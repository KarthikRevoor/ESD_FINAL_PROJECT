
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019b4  0800f988  0800f988  00010988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801133c  0801133c  00013220  2**0
                  CONTENTS
  4 .ARM          00000008  0801133c  0801133c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011344  08011344  00013220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011344  08011344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011348  08011348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0801134c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001708  20000220  0801156c  00013220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001928  0801156c  00013928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017817  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419b  00000000  00000000  0002aa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f28  00000000  00000000  0002ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcba  00000000  00000000  00030f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f780  00000000  00000000  0004cbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5a7  00000000  00000000  0006c33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb8e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006150  00000000  00000000  000fb924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00101a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f96c 	.word	0x0800f96c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800f96c 	.word	0x0800f96c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <DWT_Delay_Init+0x58>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <DWT_Delay_Init+0x58>)
 8000ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ed6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <DWT_Delay_Init+0x58>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <DWT_Delay_Init+0x58>)
 8000ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f02:	bf00      	nop
     __ASM volatile ("NOP");
 8000f04:	bf00      	nop
  __ASM volatile ("NOP");
 8000f06:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <DWT_Delay_Init+0x5c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f10:	2300      	movs	r3, #0
 8000f12:	e000      	b.n	8000f16 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f14:	2301      	movs	r3, #1
  }
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000edf0 	.word	0xe000edf0
 8000f24:	e0001000 	.word	0xe0001000

08000f28 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <delay+0x40>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f36:	f006 fe8f 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <delay+0x44>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f4c:	bf00      	nop
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <delay+0x40>)
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3f8      	bcc.n	8000f4e <delay+0x26>
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e0001000 	.word	0xe0001000
 8000f6c:	431bde83 	.word	0x431bde83

08000f70 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f004 fed6 	bl	8005d50 <HAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f004 feb8 	bl	8005d50 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <DHT_Start>:


void DHT_Start (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fec:	f7ff ff6c 	bl	8000ec8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	480d      	ldr	r0, [pc, #52]	@ (8001028 <DHT_Start+0x40>)
 8000ff4:	f7ff ffbc 	bl	8000f70 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480a      	ldr	r0, [pc, #40]	@ (8001028 <DHT_Start+0x40>)
 8000ffe:	f005 f843 	bl	8006088 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001002:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001006:	f7ff ff8f 	bl	8000f28 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800100a:	2201      	movs	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <DHT_Start+0x40>)
 8001010:	f005 f83a 	bl	8006088 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001014:	2014      	movs	r0, #20
 8001016:	f7ff ff87 	bl	8000f28 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800101a:	2101      	movs	r1, #1
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DHT_Start+0x40>)
 800101e:	f7ff ffc5 	bl	8000fac <Set_Pin_Input>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020400 	.word	0x40020400

0800102c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f7ff ff76 	bl	8000f28 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800103c:	2101      	movs	r1, #1
 800103e:	4811      	ldr	r0, [pc, #68]	@ (8001084 <DHT_Check_Response+0x58>)
 8001040:	f005 f80a 	bl	8006058 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10e      	bne.n	8001068 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800104a:	2050      	movs	r0, #80	@ 0x50
 800104c:	f7ff ff6c 	bl	8000f28 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001050:	2101      	movs	r1, #1
 8001052:	480c      	ldr	r0, [pc, #48]	@ (8001084 <DHT_Check_Response+0x58>)
 8001054:	f005 f800 	bl	8006058 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <DHT_Check_Response+0x38>
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e001      	b.n	8001068 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001064:	23ff      	movs	r3, #255	@ 0xff
 8001066:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001068:	bf00      	nop
 800106a:	2101      	movs	r1, #1
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <DHT_Check_Response+0x58>)
 800106e:	f004 fff3 	bl	8006058 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f8      	bne.n	800106a <DHT_Check_Response+0x3e>

	return Response;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020400 	.word	0x40020400

08001088 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800108e:	2300      	movs	r3, #0
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	e037      	b.n	8001104 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001094:	bf00      	nop
 8001096:	2101      	movs	r1, #1
 8001098:	481e      	ldr	r0, [pc, #120]	@ (8001114 <DHT_Read+0x8c>)
 800109a:	f004 ffdd 	bl	8006058 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f8      	beq.n	8001096 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80010a4:	2028      	movs	r0, #40	@ 0x28
 80010a6:	f7ff ff3f 	bl	8000f28 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80010aa:	2101      	movs	r1, #1
 80010ac:	4819      	ldr	r0, [pc, #100]	@ (8001114 <DHT_Read+0x8c>)
 80010ae:	f004 ffd3 	bl	8006058 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10e      	bne.n	80010d6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2201      	movs	r2, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	4013      	ands	r3, r2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e00b      	b.n	80010ee <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	f1c3 0307 	rsb	r3, r3, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ee:	bf00      	nop
 80010f0:	2101      	movs	r1, #1
 80010f2:	4808      	ldr	r0, [pc, #32]	@ (8001114 <DHT_Read+0x8c>)
 80010f4:	f004 ffb0 	bl	8006058 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f8      	bne.n	80010f0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	3301      	adds	r3, #1
 8001102:	71bb      	strb	r3, [r7, #6]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b07      	cmp	r3, #7
 8001108:	d9c4      	bls.n	8001094 <DHT_Read+0xc>
	}
	return i;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020400 	.word	0x40020400

08001118 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001120:	f7ff ff62 	bl	8000fe8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001124:	f7ff ff82 	bl	800102c <DHT_Check_Response>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <DHT_GetData+0xa4>)
 800112e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001130:	f7ff ffaa 	bl	8001088 <DHT_Read>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <DHT_GetData+0xa8>)
 800113a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800113c:	f7ff ffa4 	bl	8001088 <DHT_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <DHT_GetData+0xac>)
 8001146:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001148:	f7ff ff9e 	bl	8001088 <DHT_Read>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <DHT_GetData+0xb0>)
 8001152:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001154:	f7ff ff98 	bl	8001088 <DHT_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <DHT_GetData+0xb4>)
 800115e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001160:	f7ff ff92 	bl	8001088 <DHT_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <DHT_GetData+0xb8>)
 800116a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <DHT_GetData+0xb8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <DHT_GetData+0xa8>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <DHT_GetData+0xac>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4413      	add	r3, r2
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <DHT_GetData+0xb0>)
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <DHT_GetData+0xb4>)
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4299      	cmp	r1, r3
 800118c:	d111      	bne.n	80011b2 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <DHT_GetData+0xb0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <DHT_GetData+0xa8>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000242 	.word	0x20000242
 80011c0:	2000023c 	.word	0x2000023c
 80011c4:	2000023d 	.word	0x2000023d
 80011c8:	2000023e 	.word	0x2000023e
 80011cc:	2000023f 	.word	0x2000023f
 80011d0:	20000240 	.word	0x20000240

080011d4 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	is_received=1;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000244 	.word	0x20000244

080011f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <SELECT+0x1c>)
 8001200:	f004 ff42 	bl	8006088 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f004 f8f1 	bl	80053ec <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <DESELECT+0x1c>)
 8001220:	f004 ff32 	bl	8006088 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f004 f8e1 	bl	80053ec <HAL_Delay>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020c00 	.word	0x40020c00

08001234 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800123e:	bf00      	nop
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <SPI_TxByte+0x30>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d1f8      	bne.n	8001240 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800124e:	1df9      	adds	r1, r7, #7
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	2201      	movs	r2, #1
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <SPI_TxByte+0x30>)
 8001256:	f006 fdbc 	bl	8007dd2 <HAL_SPI_Transmit>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000132c 	.word	0x2000132c

08001268 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001274:	bf00      	nop
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <SPI_TxBuffer+0x30>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b02      	cmp	r3, #2
 8001282:	d1f8      	bne.n	8001276 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	2364      	movs	r3, #100	@ 0x64
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <SPI_TxBuffer+0x30>)
 800128c:	f006 fda1 	bl	8007dd2 <HAL_SPI_Transmit>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000132c 	.word	0x2000132c

0800129c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80012a2:	23ff      	movs	r3, #255	@ 0xff
 80012a4:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012a6:	bf00      	nop
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <SPI_RxByte+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1f8      	bne.n	80012a8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012b6:	1dba      	adds	r2, r7, #6
 80012b8:	1df9      	adds	r1, r7, #7
 80012ba:	2364      	movs	r3, #100	@ 0x64
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <SPI_RxByte+0x34>)
 80012c2:	f006 feca 	bl	800805a <HAL_SPI_TransmitReceive>

  return data;
 80012c6:	79bb      	ldrb	r3, [r7, #6]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000132c 	.word	0x2000132c

080012d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012dc:	f7ff ffde 	bl	800129c <SPI_RxByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SD_ReadyWait+0x30>)
 80012f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012fc:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80012fe:	f7ff ffcd 	bl	800129c <SPI_RxByte>
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2bff      	cmp	r3, #255	@ 0xff
 800130a:	d003      	beq.n	8001314 <SD_ReadyWait+0x24>
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SD_ReadyWait+0x30>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f4      	bne.n	80012fe <SD_ReadyWait+0xe>

  return res;
 8001314:	79fb      	ldrb	r3, [r7, #7]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000024a 	.word	0x2000024a

08001324 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800132a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800132e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001330:	f7ff ff70 	bl	8001214 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	e005      	b.n	8001346 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800133a:	20ff      	movs	r0, #255	@ 0xff
 800133c:	f7ff ff7a 	bl	8001234 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	3301      	adds	r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b09      	cmp	r3, #9
 800134a:	ddf6      	ble.n	800133a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 800134c:	f7ff ff52 	bl	80011f4 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001350:	2340      	movs	r3, #64	@ 0x40
 8001352:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001364:	2395      	movs	r3, #149	@ 0x95
 8001366:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001368:	463b      	mov	r3, r7
 800136a:	2106      	movs	r1, #6
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff7b 	bl	8001268 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001372:	e002      	b.n	800137a <SD_PowerOn+0x56>
  {
    cnt--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3b01      	subs	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800137a:	f7ff ff8f 	bl	800129c <SPI_RxByte>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d002      	beq.n	800138a <SD_PowerOn+0x66>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f4      	bne.n	8001374 <SD_PowerOn+0x50>
  }

  DESELECT();
 800138a:	f7ff ff43 	bl	8001214 <DESELECT>
  SPI_TxByte(0XFF);
 800138e:	20ff      	movs	r0, #255	@ 0xff
 8001390:	f7ff ff50 	bl	8001234 <SPI_TxByte>

  PowerFlag = 1;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <SD_PowerOn+0x80>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000024d 	.word	0x2000024d

080013a8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <SD_PowerOff+0x14>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	2000024d 	.word	0x2000024d

080013c0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <SD_CheckPower+0x14>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000024d 	.word	0x2000024d

080013d8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <SD_RxDataBlock+0x58>)
 80013e4:	22c8      	movs	r2, #200	@ 0xc8
 80013e6:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80013e8:	f7ff ff58 	bl	800129c <SPI_RxByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2bff      	cmp	r3, #255	@ 0xff
 80013f4:	d103      	bne.n	80013fe <SD_RxDataBlock+0x26>
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <SD_RxDataBlock+0x58>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f4      	bne.n	80013e8 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2bfe      	cmp	r3, #254	@ 0xfe
 8001402:	d001      	beq.n	8001408 <SD_RxDataBlock+0x30>
 8001404:	2300      	movs	r3, #0
 8001406:	e00f      	b.n	8001428 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff60 	bl	80012d4 <SPI_RxBytePtr>
  } while(len--);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	603a      	str	r2, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f4      	bne.n	8001408 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 800141e:	f7ff ff3d 	bl	800129c <SPI_RxByte>
  SPI_RxByte();
 8001422:	f7ff ff3b 	bl	800129c <SPI_RxByte>

  return TRUE;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000248 	.word	0x20000248

08001434 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001444:	f7ff ff54 	bl	80012f0 <SD_ReadyWait>
 8001448:	4603      	mov	r3, r0
 800144a:	2bff      	cmp	r3, #255	@ 0xff
 800144c:	d001      	beq.n	8001452 <SD_TxDataBlock+0x1e>
 800144e:	2300      	movs	r3, #0
 8001450:	e02f      	b.n	80014b2 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff feed 	bl	8001234 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2bfd      	cmp	r3, #253	@ 0xfd
 800145e:	d020      	beq.n	80014a2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff feff 	bl	8001268 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800146a:	f7ff ff17 	bl	800129c <SPI_RxByte>
    SPI_RxByte();
 800146e:	f7ff ff15 	bl	800129c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001472:	e00b      	b.n	800148c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001474:	f7ff ff12 	bl	800129c <SPI_RxByte>
 8001478:	4603      	mov	r3, r0
 800147a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	2b05      	cmp	r3, #5
 8001484:	d006      	beq.n	8001494 <SD_TxDataBlock+0x60>
      i++;
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	3301      	adds	r3, #1
 800148a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	2b40      	cmp	r3, #64	@ 0x40
 8001490:	d9f0      	bls.n	8001474 <SD_TxDataBlock+0x40>
 8001492:	e000      	b.n	8001496 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001494:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001496:	bf00      	nop
 8001498:	f7ff ff00 	bl	800129c <SPI_RxByte>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0fa      	beq.n	8001498 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d101      	bne.n	80014b0 <SD_TxDataBlock+0x7c>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <SD_TxDataBlock+0x7e>

  return FALSE;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	6039      	str	r1, [r7, #0]
 80014c4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014c6:	f7ff ff13 	bl	80012f0 <SD_ReadyWait>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2bff      	cmp	r3, #255	@ 0xff
 80014ce:	d001      	beq.n	80014d4 <SD_SendCmd+0x1a>
 80014d0:	23ff      	movs	r3, #255	@ 0xff
 80014d2:	e042      	b.n	800155a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff feac 	bl	8001234 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	0e1b      	lsrs	r3, r3, #24
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fea6 	bl	8001234 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	0c1b      	lsrs	r3, r3, #16
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fea0 	bl	8001234 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe9a 	bl	8001234 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe95 	bl	8001234 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b40      	cmp	r3, #64	@ 0x40
 800150e:	d102      	bne.n	8001516 <SD_SendCmd+0x5c>
 8001510:	2395      	movs	r3, #149	@ 0x95
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e007      	b.n	8001526 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b48      	cmp	r3, #72	@ 0x48
 800151a:	d102      	bne.n	8001522 <SD_SendCmd+0x68>
 800151c:	2387      	movs	r3, #135	@ 0x87
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <SD_SendCmd+0x6c>
  else crc = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe83 	bl	8001234 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b4c      	cmp	r3, #76	@ 0x4c
 8001532:	d101      	bne.n	8001538 <SD_SendCmd+0x7e>
 8001534:	f7ff feb2 	bl	800129c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001538:	230a      	movs	r3, #10
 800153a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800153c:	f7ff feae 	bl	800129c <SPI_RxByte>
 8001540:	4603      	mov	r3, r0
 8001542:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001544:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001548:	2b00      	cmp	r3, #0
 800154a:	da05      	bge.n	8001558 <SD_SendCmd+0x9e>
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	3b01      	subs	r3, #1
 8001550:	73bb      	strb	r3, [r7, #14]
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f1      	bne.n	800153c <SD_SendCmd+0x82>

  return res;
 8001558:	7b7b      	ldrb	r3, [r7, #13]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SD_disk_initialize+0x14>
 8001574:	2301      	movs	r3, #1
 8001576:	e0d1      	b.n	800171c <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001578:	4b6a      	ldr	r3, [pc, #424]	@ (8001724 <SD_disk_initialize+0x1c0>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <SD_disk_initialize+0x2a>
 8001586:	4b67      	ldr	r3, [pc, #412]	@ (8001724 <SD_disk_initialize+0x1c0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	e0c6      	b.n	800171c <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800158e:	f7ff fec9 	bl	8001324 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001592:	f7ff fe2f 	bl	80011f4 <SELECT>

  /* check disk type */
  type = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800159a:	2100      	movs	r1, #0
 800159c:	2040      	movs	r0, #64	@ 0x40
 800159e:	f7ff ff8c 	bl	80014ba <SD_SendCmd>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 80a1 	bne.w	80016ec <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <SD_disk_initialize+0x1c4>)
 80015ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015b0:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80015b6:	2048      	movs	r0, #72	@ 0x48
 80015b8:	f7ff ff7f 	bl	80014ba <SD_SendCmd>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d155      	bne.n	800166e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e00c      	b.n	80015e2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80015c8:	7bfc      	ldrb	r4, [r7, #15]
 80015ca:	f7ff fe67 	bl	800129c <SPI_RxByte>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	f104 0310 	add.w	r3, r4, #16
 80015d6:	443b      	add	r3, r7
 80015d8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d9ef      	bls.n	80015c8 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d17e      	bne.n	80016ec <SD_disk_initialize+0x188>
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	2baa      	cmp	r3, #170	@ 0xaa
 80015f2:	d17b      	bne.n	80016ec <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015f4:	2100      	movs	r1, #0
 80015f6:	2077      	movs	r0, #119	@ 0x77
 80015f8:	f7ff ff5f 	bl	80014ba <SD_SendCmd>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d807      	bhi.n	8001612 <SD_disk_initialize+0xae>
 8001602:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001606:	2069      	movs	r0, #105	@ 0x69
 8001608:	f7ff ff57 	bl	80014ba <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <SD_disk_initialize+0x1c4>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ec      	bne.n	80015f4 <SD_disk_initialize+0x90>
 800161a:	e000      	b.n	800161e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800161c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800161e:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <SD_disk_initialize+0x1c4>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d062      	beq.n	80016ec <SD_disk_initialize+0x188>
 8001626:	2100      	movs	r1, #0
 8001628:	207a      	movs	r0, #122	@ 0x7a
 800162a:	f7ff ff46 	bl	80014ba <SD_SendCmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d15b      	bne.n	80016ec <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e00c      	b.n	8001654 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800163a:	7bfc      	ldrb	r4, [r7, #15]
 800163c:	f7ff fe2e 	bl	800129c <SPI_RxByte>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	f104 0310 	add.w	r3, r4, #16
 8001648:	443b      	add	r3, r7
 800164a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d9ef      	bls.n	800163a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800165a:	7a3b      	ldrb	r3, [r7, #8]
 800165c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SD_disk_initialize+0x104>
 8001664:	230c      	movs	r3, #12
 8001666:	e000      	b.n	800166a <SD_disk_initialize+0x106>
 8001668:	2304      	movs	r3, #4
 800166a:	73bb      	strb	r3, [r7, #14]
 800166c:	e03e      	b.n	80016ec <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	@ 0x77
 8001672:	f7ff ff22 	bl	80014ba <SD_SendCmd>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d808      	bhi.n	800168e <SD_disk_initialize+0x12a>
 800167c:	2100      	movs	r1, #0
 800167e:	2069      	movs	r0, #105	@ 0x69
 8001680:	f7ff ff1b 	bl	80014ba <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d801      	bhi.n	800168e <SD_disk_initialize+0x12a>
 800168a:	2302      	movs	r3, #2
 800168c:	e000      	b.n	8001690 <SD_disk_initialize+0x12c>
 800168e:	2301      	movs	r3, #1
 8001690:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d10e      	bne.n	80016b6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001698:	2100      	movs	r1, #0
 800169a:	2077      	movs	r0, #119	@ 0x77
 800169c:	f7ff ff0d 	bl	80014ba <SD_SendCmd>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d80e      	bhi.n	80016c4 <SD_disk_initialize+0x160>
 80016a6:	2100      	movs	r1, #0
 80016a8:	2069      	movs	r0, #105	@ 0x69
 80016aa:	f7ff ff06 	bl	80014ba <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <SD_disk_initialize+0x160>
 80016b4:	e00c      	b.n	80016d0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016b6:	2100      	movs	r1, #0
 80016b8:	2041      	movs	r0, #65	@ 0x41
 80016ba:	f7ff fefe 	bl	80014ba <SD_SendCmd>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <SD_disk_initialize+0x1c4>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e2      	bne.n	8001692 <SD_disk_initialize+0x12e>
 80016cc:	e000      	b.n	80016d0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ce:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <SD_disk_initialize+0x1c4>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <SD_disk_initialize+0x184>
 80016d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016dc:	2050      	movs	r0, #80	@ 0x50
 80016de:	f7ff feec 	bl	80014ba <SD_SendCmd>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SD_disk_initialize+0x188>
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80016ec:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <SD_disk_initialize+0x1c8>)
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80016f2:	f7ff fd8f 	bl	8001214 <DESELECT>
  SPI_RxByte();
 80016f6:	f7ff fdd1 	bl	800129c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <SD_disk_initialize+0x1c0>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SD_disk_initialize+0x1c0>)
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e001      	b.n	8001716 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001712:	f7ff fe49 	bl	80013a8 <SD_PowerOff>
  }

  return Stat;
 8001716:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <SD_disk_initialize+0x1c0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	20000000 	.word	0x20000000
 8001728:	20000248 	.word	0x20000248
 800172c:	2000024c 	.word	0x2000024c

08001730 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SD_disk_status+0x14>
 8001740:	2301      	movs	r3, #1
 8001742:	e002      	b.n	800174a <SD_disk_status+0x1a>
  return Stat;
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <SD_disk_status+0x28>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000000 	.word	0x20000000

0800175c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <SD_disk_read+0x1c>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <SD_disk_read+0x20>
 8001778:	2304      	movs	r3, #4
 800177a:	e051      	b.n	8001820 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <SD_disk_read+0xcc>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SD_disk_read+0x32>
 800178a:	2303      	movs	r3, #3
 800178c:	e048      	b.n	8001820 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800178e:	4b27      	ldr	r3, [pc, #156]	@ (800182c <SD_disk_read+0xd0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <SD_disk_read+0x44>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	607b      	str	r3, [r7, #4]

  SELECT();
 80017a0:	f7ff fd28 	bl	80011f4 <SELECT>

  if (count == 1)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d111      	bne.n	80017ce <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2051      	movs	r0, #81	@ 0x51
 80017ae:	f7ff fe84 	bl	80014ba <SD_SendCmd>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d129      	bne.n	800180c <SD_disk_read+0xb0>
 80017b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017bc:	68b8      	ldr	r0, [r7, #8]
 80017be:	f7ff fe0b 	bl	80013d8 <SD_RxDataBlock>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <SD_disk_read+0xb0>
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	e01e      	b.n	800180c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	2052      	movs	r0, #82	@ 0x52
 80017d2:	f7ff fe72 	bl	80014ba <SD_SendCmd>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d117      	bne.n	800180c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80017dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	f7ff fdf9 	bl	80013d8 <SD_RxDataBlock>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00a      	beq.n	8001802 <SD_disk_read+0xa6>
        buff += 512;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017f2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ed      	bne.n	80017dc <SD_disk_read+0x80>
 8001800:	e000      	b.n	8001804 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001802:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001804:	2100      	movs	r1, #0
 8001806:	204c      	movs	r0, #76	@ 0x4c
 8001808:	f7ff fe57 	bl	80014ba <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800180c:	f7ff fd02 	bl	8001214 <DESELECT>
  SPI_RxByte();
 8001810:	f7ff fd44 	bl	800129c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	2000024c 	.word	0x2000024c

08001830 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <SD_disk_write+0x1c>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <SD_disk_write+0x20>
 800184c:	2304      	movs	r3, #4
 800184e:	e06b      	b.n	8001928 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <SD_disk_write+0x100>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SD_disk_write+0x32>
 800185e:	2303      	movs	r3, #3
 8001860:	e062      	b.n	8001928 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001862:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <SD_disk_write+0x100>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SD_disk_write+0x44>
 8001870:	2302      	movs	r3, #2
 8001872:	e059      	b.n	8001928 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001874:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <SD_disk_write+0x104>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <SD_disk_write+0x56>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	025b      	lsls	r3, r3, #9
 8001884:	607b      	str	r3, [r7, #4]

  SELECT();
 8001886:	f7ff fcb5 	bl	80011f4 <SELECT>

  if (count == 1)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d110      	bne.n	80018b2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	2058      	movs	r0, #88	@ 0x58
 8001894:	f7ff fe11 	bl	80014ba <SD_SendCmd>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d13a      	bne.n	8001914 <SD_disk_write+0xe4>
 800189e:	21fe      	movs	r1, #254	@ 0xfe
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7ff fdc7 	bl	8001434 <SD_TxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d033      	beq.n	8001914 <SD_disk_write+0xe4>
      count = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	e030      	b.n	8001914 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <SD_disk_write+0x104>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	2077      	movs	r0, #119	@ 0x77
 80018c2:	f7ff fdfa 	bl	80014ba <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	2057      	movs	r0, #87	@ 0x57
 80018ca:	f7ff fdf6 	bl	80014ba <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	2059      	movs	r0, #89	@ 0x59
 80018d2:	f7ff fdf2 	bl	80014ba <SD_SendCmd>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d11b      	bne.n	8001914 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018dc:	21fc      	movs	r1, #252	@ 0xfc
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f7ff fda8 	bl	8001434 <SD_TxDataBlock>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <SD_disk_write+0xd0>
        buff += 512;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018f0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ee      	bne.n	80018dc <SD_disk_write+0xac>
 80018fe:	e000      	b.n	8001902 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001900:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001902:	21fd      	movs	r1, #253	@ 0xfd
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff fd95 	bl	8001434 <SD_TxDataBlock>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <SD_disk_write+0xe4>
      {
        count = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001914:	f7ff fc7e 	bl	8001214 <DESELECT>
  SPI_RxByte();
 8001918:	f7ff fcc0 	bl	800129c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	2000024c 	.word	0x2000024c

08001938 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08b      	sub	sp, #44	@ 0x2c
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	603a      	str	r2, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	460b      	mov	r3, r1
 8001946:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SD_disk_ioctl+0x1e>
 8001952:	2304      	movs	r3, #4
 8001954:	e113      	b.n	8001b7e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d124      	bne.n	80019ac <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d012      	beq.n	8001990 <SD_disk_ioctl+0x58>
 800196a:	2b02      	cmp	r3, #2
 800196c:	dc1a      	bgt.n	80019a4 <SD_disk_ioctl+0x6c>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <SD_disk_ioctl+0x40>
 8001972:	2b01      	cmp	r3, #1
 8001974:	d006      	beq.n	8001984 <SD_disk_ioctl+0x4c>
 8001976:	e015      	b.n	80019a4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001978:	f7ff fd16 	bl	80013a8 <SD_PowerOff>
      res = RES_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001982:	e0fa      	b.n	8001b7a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001984:	f7ff fcce 	bl	8001324 <SD_PowerOn>
      res = RES_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800198e:	e0f4      	b.n	8001b7a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	1c5c      	adds	r4, r3, #1
 8001994:	f7ff fd14 	bl	80013c0 <SD_CheckPower>
 8001998:	4603      	mov	r3, r0
 800199a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80019a2:	e0ea      	b.n	8001b7a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80019a4:	2304      	movs	r3, #4
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019aa:	e0e6      	b.n	8001b7a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019ac:	4b76      	ldr	r3, [pc, #472]	@ (8001b88 <SD_disk_ioctl+0x250>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SD_disk_ioctl+0x86>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0df      	b.n	8001b7e <SD_disk_ioctl+0x246>

    SELECT();
 80019be:	f7ff fc19 	bl	80011f4 <SELECT>

    switch (ctrl)
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b0d      	cmp	r3, #13
 80019c6:	f200 80c9 	bhi.w	8001b5c <SD_disk_ioctl+0x224>
 80019ca:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <SD_disk_ioctl+0x98>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	08001ac7 	.word	0x08001ac7
 80019d4:	08001a09 	.word	0x08001a09
 80019d8:	08001ab7 	.word	0x08001ab7
 80019dc:	08001b5d 	.word	0x08001b5d
 80019e0:	08001b5d 	.word	0x08001b5d
 80019e4:	08001b5d 	.word	0x08001b5d
 80019e8:	08001b5d 	.word	0x08001b5d
 80019ec:	08001b5d 	.word	0x08001b5d
 80019f0:	08001b5d 	.word	0x08001b5d
 80019f4:	08001b5d 	.word	0x08001b5d
 80019f8:	08001b5d 	.word	0x08001b5d
 80019fc:	08001ad9 	.word	0x08001ad9
 8001a00:	08001afd 	.word	0x08001afd
 8001a04:	08001b21 	.word	0x08001b21
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2049      	movs	r0, #73	@ 0x49
 8001a0c:	f7ff fd55 	bl	80014ba <SD_SendCmd>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 80a6 	bne.w	8001b64 <SD_disk_ioctl+0x22c>
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fcda 	bl	80013d8 <SD_RxDataBlock>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 809c 	beq.w	8001b64 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10d      	bne.n	8001a52 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a36:	7d7b      	ldrb	r3, [r7, #21]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	7d3b      	ldrb	r3, [r7, #20]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a48:	8bfb      	ldrh	r3, [r7, #30]
 8001a4a:	029a      	lsls	r2, r3, #10
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e02d      	b.n	8001aae <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a52:	7c7b      	ldrb	r3, [r7, #17]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	7dbb      	ldrb	r3, [r7, #22]
 8001a5c:	09db      	lsrs	r3, r3, #7
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	7d7b      	ldrb	r3, [r7, #21]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0306 	and.w	r3, r3, #6
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3302      	adds	r3, #2
 8001a76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a7a:	7d3b      	ldrb	r3, [r7, #20]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	7cbb      	ldrb	r3, [r7, #18]
 8001a8e:	029b      	lsls	r3, r3, #10
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001aa0:	8bfa      	ldrh	r2, [r7, #30]
 8001aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001aa6:	3b09      	subs	r3, #9
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001ab4:	e056      	b.n	8001b64 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ac4:	e055      	b.n	8001b72 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ac6:	f7ff fc13 	bl	80012f0 <SD_ReadyWait>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2bff      	cmp	r3, #255	@ 0xff
 8001ace:	d14b      	bne.n	8001b68 <SD_disk_ioctl+0x230>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ad6:	e047      	b.n	8001b68 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2049      	movs	r0, #73	@ 0x49
 8001adc:	f7ff fced 	bl	80014ba <SD_SendCmd>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d142      	bne.n	8001b6c <SD_disk_ioctl+0x234>
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f7ff fc75 	bl	80013d8 <SD_RxDataBlock>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d03b      	beq.n	8001b6c <SD_disk_ioctl+0x234>
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001afa:	e037      	b.n	8001b6c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001afc:	2100      	movs	r1, #0
 8001afe:	204a      	movs	r0, #74	@ 0x4a
 8001b00:	f7ff fcdb 	bl	80014ba <SD_SendCmd>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d132      	bne.n	8001b70 <SD_disk_ioctl+0x238>
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	6a38      	ldr	r0, [r7, #32]
 8001b0e:	f7ff fc63 	bl	80013d8 <SD_RxDataBlock>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02b      	beq.n	8001b70 <SD_disk_ioctl+0x238>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001b1e:	e027      	b.n	8001b70 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b20:	2100      	movs	r1, #0
 8001b22:	207a      	movs	r0, #122	@ 0x7a
 8001b24:	f7ff fcc9 	bl	80014ba <SD_SendCmd>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b34:	e00b      	b.n	8001b4e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8001b36:	6a3c      	ldr	r4, [r7, #32]
 8001b38:	1c63      	adds	r3, r4, #1
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	f7ff fbae 	bl	800129c <SPI_RxByte>
 8001b40:	4603      	mov	r3, r0
 8001b42:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d9ef      	bls.n	8001b36 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b62:	e006      	b.n	8001b72 <SD_disk_ioctl+0x23a>
      break;
 8001b64:	bf00      	nop
 8001b66:	e004      	b.n	8001b72 <SD_disk_ioctl+0x23a>
      break;
 8001b68:	bf00      	nop
 8001b6a:	e002      	b.n	8001b72 <SD_disk_ioctl+0x23a>
      break;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <SD_disk_ioctl+0x23a>
      break;
 8001b70:	bf00      	nop
    }

    DESELECT();
 8001b72:	f7ff fb4f 	bl	8001214 <DESELECT>
    SPI_RxByte();
 8001b76:	f7ff fb91 	bl	800129c <SPI_RxByte>
  }

  return res;
 8001b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	372c      	adds	r7, #44	@ 0x2c
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <SD_Init>:
#define POKEBALL_WIDTH 15
#define POKEBALL_HEIGHT 15
static FATFS FatFs; // Persistent FatFS handle

// Initialize the SD card once
void SD_Init(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
    FRESULT fres = f_mount(&FatFs, "", 1); // Mount the SD card
 8001b92:	2201      	movs	r2, #1
 8001b94:	490a      	ldr	r1, [pc, #40]	@ (8001bc0 <SD_Init+0x34>)
 8001b96:	480b      	ldr	r0, [pc, #44]	@ (8001bc4 <SD_Init+0x38>)
 8001b98:	f00a f88e 	bl	800bcb8 <f_mount>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
    if (fres != FR_OK) {
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <SD_Init+0x26>
        printf("Error: Failed to mount SD card (%i)\r\n", fres);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <SD_Init+0x3c>)
 8001bac:	f00b fd38 	bl	800d620 <iprintf>
    } else {
        printf("SD Card Mounted Successfully!\r\n");
    }
}
 8001bb0:	e002      	b.n	8001bb8 <SD_Init+0x2c>
        printf("SD Card Mounted Successfully!\r\n");
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <SD_Init+0x40>)
 8001bb4:	f00b fd9c 	bl	800d6f0 <puts>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	0800f988 	.word	0x0800f988
 8001bc4:	20000250 	.word	0x20000250
 8001bc8:	0800f98c 	.word	0x0800f98c
 8001bcc:	0800f9b4 	.word	0x0800f9b4

08001bd0 <process_SD_card>:
void SD_Deinit(void) {
    f_mount(NULL, "", 0); // Unmount the SD card
    printf("SD Card Unmounted Successfully!\r\n");
}

void process_SD_card(const char *filename) {
 8001bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd4:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001be0:	f843 0cb4 	str.w	r0, [r3, #-180]
    FIL fil;                 // File handle
    FRESULT fres;            // Result after operations

    do {
 8001be4:	466b      	mov	r3, sp
 8001be6:	461e      	mov	r6, r3
        // Open the BMP file
        fres = f_open(&fil, filename, FA_READ);
 8001be8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bec:	4619      	mov	r1, r3
 8001bee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bf2:	3b14      	subs	r3, #20
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00a f8a2 	bl	800bd44 <f_open>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c06:	f102 0211 	add.w	r2, r2, #17
 8001c0a:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK) {
 8001c0c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001c10:	f103 0311 	add.w	r3, r3, #17
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00e      	beq.n	8001c38 <process_SD_card+0x68>
            printf("Error: Failed to open file %s (%i)\r\n", filename, fres);
 8001c1a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001c1e:	f103 0311 	add.w	r3, r3, #17
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001c30:	48c3      	ldr	r0, [pc, #780]	@ (8001f40 <process_SD_card+0x370>)
 8001c32:	f00b fcf5 	bl	800d620 <iprintf>
            break;
 8001c36:	e2d8      	b.n	80021ea <process_SD_card+0x61a>
        }

        printf("File %s opened successfully!\r\n", filename);
 8001c38:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c3c:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 8001c40:	48c0      	ldr	r0, [pc, #768]	@ (8001f44 <process_SD_card+0x374>)
 8001c42:	f00b fced 	bl	800d620 <iprintf>

        // Read and parse BMP header
        uint8_t bmpHeader[54];
        UINT bytesRead;
        fres = f_read(&fil, bmpHeader, sizeof(bmpHeader), &bytesRead);
 8001c46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c4a:	3b18      	subs	r3, #24
 8001c4c:	f107 0120 	add.w	r1, r7, #32
 8001c50:	3910      	subs	r1, #16
 8001c52:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001c56:	3814      	subs	r0, #20
 8001c58:	2236      	movs	r2, #54	@ 0x36
 8001c5a:	f00a fa3b 	bl	800c0d4 <f_read>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c64:	f102 0211 	add.w	r2, r2, #17
 8001c68:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK || bytesRead != sizeof(bmpHeader)) {
 8001c6a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001c6e:	f103 0311 	add.w	r3, r3, #17
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <process_SD_card+0xb4>
 8001c78:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c7c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001c80:	2b36      	cmp	r3, #54	@ 0x36
 8001c82:	d009      	beq.n	8001c98 <process_SD_card+0xc8>
            printf("Error: Failed to read BMP header\r\n");
 8001c84:	48b0      	ldr	r0, [pc, #704]	@ (8001f48 <process_SD_card+0x378>)
 8001c86:	f00b fd33 	bl	800d6f0 <puts>
            f_close(&fil);
 8001c8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c8e:	3b14      	subs	r3, #20
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00a fbfc 	bl	800c48e <f_close>
            break;
 8001c96:	e2a8      	b.n	80021ea <process_SD_card+0x61a>
        }

        // Extract BMP information
        uint16_t imageWidth = *(uint16_t *)&bmpHeader[18];
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	3b10      	subs	r3, #16
 8001c9e:	3312      	adds	r3, #18
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001ca6:	f102 020e 	add.w	r2, r2, #14
 8001caa:	8013      	strh	r3, [r2, #0]
        uint16_t imageHeight = *(uint16_t *)&bmpHeader[22];
 8001cac:	f107 0320 	add.w	r3, r7, #32
 8001cb0:	3b10      	subs	r3, #16
 8001cb2:	3316      	adds	r3, #22
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cba:	f102 020c 	add.w	r2, r2, #12
 8001cbe:	8013      	strh	r3, [r2, #0]
        uint32_t dataOffset = *(uint32_t *)&bmpHeader[10];
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	3b10      	subs	r3, #16
 8001cc6:	330a      	adds	r3, #10
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cce:	f102 0208 	add.w	r2, r2, #8
 8001cd2:	6013      	str	r3, [r2, #0]
        uint16_t bpp = *(uint16_t *)&bmpHeader[28]; // Bits per pixel
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	3b10      	subs	r3, #16
 8001cda:	331c      	adds	r3, #28
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001ce2:	f102 0206 	add.w	r2, r2, #6
 8001ce6:	8013      	strh	r3, [r2, #0]
        printf("Image Info: Width=%d, Height=%d, DataOffset=%lu, BPP=%d\r\n",
 8001ce8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cec:	f103 030e 	add.w	r3, r3, #14
 8001cf0:	8819      	ldrh	r1, [r3, #0]
 8001cf2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cf6:	f103 030c 	add.w	r3, r3, #12
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d00:	f103 0306 	add.w	r3, r3, #6
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d0c:	f103 0308 	add.w	r3, r3, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	488e      	ldr	r0, [pc, #568]	@ (8001f4c <process_SD_card+0x37c>)
 8001d14:	f00b fc84 	bl	800d620 <iprintf>
               imageWidth, imageHeight, dataOffset, bpp);

        // Validate BMP format
        if (bpp != 24 && bpp != 16) { // Check for 24-bit or 16-bit BMP
 8001d18:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d1c:	f103 0306 	add.w	r3, r3, #6
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	d010      	beq.n	8001d48 <process_SD_card+0x178>
 8001d26:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d2a:	f103 0306 	add.w	r3, r3, #6
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d009      	beq.n	8001d48 <process_SD_card+0x178>
            printf("Error: Unsupported BMP format. Only 24-bit and 16-bit supported.\r\n");
 8001d34:	4886      	ldr	r0, [pc, #536]	@ (8001f50 <process_SD_card+0x380>)
 8001d36:	f00b fcdb 	bl	800d6f0 <puts>
            f_close(&fil);
 8001d3a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d3e:	3b14      	subs	r3, #20
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00a fba4 	bl	800c48e <f_close>
            break;
 8001d46:	e250      	b.n	80021ea <process_SD_card+0x61a>
        }

        // Move to pixel data
        if (f_lseek(&fil, dataOffset) != FR_OK) {
 8001d48:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d4c:	3b14      	subs	r3, #20
 8001d4e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d52:	f102 0208 	add.w	r2, r2, #8
 8001d56:	6811      	ldr	r1, [r2, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00a fbc2 	bl	800c4e2 <f_lseek>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <process_SD_card+0x1a8>
            printf("Error: Failed to seek to pixel data\r\n");
 8001d64:	487b      	ldr	r0, [pc, #492]	@ (8001f54 <process_SD_card+0x384>)
 8001d66:	f00b fcc3 	bl	800d6f0 <puts>
            f_close(&fil);
 8001d6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d6e:	3b14      	subs	r3, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00a fb8c 	bl	800c48e <f_close>
            break;
 8001d76:	e238      	b.n	80021ea <process_SD_card+0x61a>
        }

        printf("Starting image rendering...\r\n");
 8001d78:	4877      	ldr	r0, [pc, #476]	@ (8001f58 <process_SD_card+0x388>)
 8001d7a:	f00b fcb9 	bl	800d6f0 <puts>

        uint32_t rowSize = ((imageWidth * (bpp / 8) + 3) & ~3); // Ensure 4-byte alignment
 8001d7e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d82:	f103 030e 	add.w	r3, r3, #14
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d8c:	f102 0206 	add.w	r2, r2, #6
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	08d2      	lsrs	r2, r2, #3
 8001d94:	b292      	uxth	r2, r2
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001da4:	6013      	str	r3, [r2, #0]
        uint16_t maxRowsPerBuffer = 64; // Increased rows per buffer
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001dac:	f102 021e 	add.w	r2, r2, #30
 8001db0:	8013      	strh	r3, [r2, #0]
        uint32_t bufferSize = imageWidth * maxRowsPerBuffer * 2; // RGB565 buffer size
 8001db2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001db6:	f103 030e 	add.w	r3, r3, #14
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001dc0:	f102 021e 	add.w	r2, r2, #30
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001dd0:	f102 0218 	add.w	r2, r2, #24
 8001dd4:	6013      	str	r3, [r2, #0]
        uint8_t rowBuffer[rowSize]; // Buffer for a single row
 8001dd6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001de4:	f102 0214 	add.w	r2, r2, #20
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	00c3      	lsls	r3, r0, #3
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	00c2      	lsls	r2, r0, #3
 8001e06:	2300      	movs	r3, #0
 8001e08:	468a      	mov	sl, r1
 8001e0a:	469b      	mov	fp, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e20:	1dcb      	adds	r3, r1, #7
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	ebad 0d03 	sub.w	sp, sp, r3
 8001e2a:	ab02      	add	r3, sp, #8
 8001e2c:	3300      	adds	r3, #0
 8001e2e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e32:	f102 0210 	add.w	r2, r2, #16
 8001e36:	6013      	str	r3, [r2, #0]
        uint8_t lineBuffer[bufferSize]; // Buffer for multiple rows
 8001e38:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001e3c:	f103 0318 	add.w	r3, r3, #24
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e4a:	f102 020c 	add.w	r2, r2, #12
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	4688      	mov	r8, r1
 8001e54:	4699      	mov	r9, r3
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	461d      	mov	r5, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	00eb      	lsls	r3, r5, #3
 8001e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e7e:	00e2      	lsls	r2, r4, #3
 8001e80:	1dcb      	adds	r3, r1, #7
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	ebad 0d03 	sub.w	sp, sp, r3
 8001e8a:	ab02      	add	r3, sp, #8
 8001e8c:	3300      	adds	r3, #0
 8001e8e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e92:	f102 0208 	add.w	r2, r2, #8
 8001e96:	6013      	str	r3, [r2, #0]

        ILI9341_SetAddressWindow(0, 0, imageWidth - 1, imageHeight - 1);
 8001e98:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e9c:	f103 030e 	add.w	r3, r3, #14
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001eaa:	f103 030c 	add.w	r3, r3, #12
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 fd64 	bl	8003984 <ILI9341_SetAddressWindow>

        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001ec2:	f102 021e 	add.w	r2, r2, #30
 8001ec6:	8013      	strh	r3, [r2, #0]
 8001ec8:	e170      	b.n	80021ac <process_SD_card+0x5dc>
            uint16_t rowsToProcess = (y + maxRowsPerBuffer > imageHeight)
 8001eca:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ece:	f103 031e 	add.w	r3, r3, #30
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001ed8:	f103 031e 	add.w	r3, r3, #30
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	441a      	add	r2, r3
 8001ee0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ee4:	f103 030c 	add.w	r3, r3, #12
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dd0c      	ble.n	8001f08 <process_SD_card+0x338>
 8001eee:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ef2:	f103 030c 	add.w	r3, r3, #12
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001efc:	f103 031e 	add.w	r3, r3, #30
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	e004      	b.n	8001f12 <process_SD_card+0x342>
 8001f08:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001f0c:	f103 031e 	add.w	r3, r3, #30
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001f16:	f102 0206 	add.w	r2, r2, #6
 8001f1a:	8013      	strh	r3, [r2, #0]
                                     ? (imageHeight - y)
                                     : maxRowsPerBuffer;
            uint8_t *linePtr = lineBuffer;
 8001f1c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001f20:	f103 0308 	add.w	r3, r3, #8
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f2a:	f102 0218 	add.w	r2, r2, #24
 8001f2e:	6013      	str	r3, [r2, #0]

            for (uint16_t row = 0; row < rowsToProcess; row++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f36:	f102 0216 	add.w	r2, r2, #22
 8001f3a:	8013      	strh	r3, [r2, #0]
 8001f3c:	e102      	b.n	8002144 <process_SD_card+0x574>
 8001f3e:	bf00      	nop
 8001f40:	0800f9f8 	.word	0x0800f9f8
 8001f44:	0800fa20 	.word	0x0800fa20
 8001f48:	0800fa40 	.word	0x0800fa40
 8001f4c:	0800fa64 	.word	0x0800fa64
 8001f50:	0800faa0 	.word	0x0800faa0
 8001f54:	0800fae4 	.word	0x0800fae4
 8001f58:	0800fb0c 	.word	0x0800fb0c
                fres = f_read(&fil, rowBuffer, rowSize, &bytesRead);
 8001f5c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f60:	3b18      	subs	r3, #24
 8001f62:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001f66:	3814      	subs	r0, #20
 8001f68:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	f507 5184 	add.w	r1, r7, #4224	@ 0x1080
 8001f72:	f101 0110 	add.w	r1, r1, #16
 8001f76:	6809      	ldr	r1, [r1, #0]
 8001f78:	f00a f8ac 	bl	800c0d4 <f_read>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f82:	f102 0211 	add.w	r2, r2, #17
 8001f86:	7013      	strb	r3, [r2, #0]
                if (fres != FR_OK || bytesRead < rowSize) {
 8001f88:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f8c:	f103 0311 	add.w	r3, r3, #17
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <process_SD_card+0x3d8>
 8001f96:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f9a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001f9e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d917      	bls.n	8001fd8 <process_SD_card+0x408>
                    printf("Error: Failed to read row %d, fres=%d, bytesRead=%u\r\n", y + row, fres, bytesRead);
 8001fa8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fac:	f103 031e 	add.w	r3, r3, #30
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fb6:	f103 0316 	add.w	r3, r3, #22
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	18d1      	adds	r1, r2, r3
 8001fbe:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fc2:	f103 0311 	add.w	r3, r3, #17
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001fcc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001fd0:	488a      	ldr	r0, [pc, #552]	@ (80021fc <process_SD_card+0x62c>)
 8001fd2:	f00b fb25 	bl	800d620 <iprintf>
                    break;
 8001fd6:	e0c2      	b.n	800215e <process_SD_card+0x58e>
                }

                for (uint16_t x = 0; x < imageWidth; x++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001fde:	f102 0214 	add.w	r2, r2, #20
 8001fe2:	8013      	strh	r3, [r2, #0]
 8001fe4:	e096      	b.n	8002114 <process_SD_card+0x544>
                    uint16_t color;

                    if (bpp == 24) {
 8001fe6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fea:	f103 0306 	add.w	r3, r3, #6
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	2b18      	cmp	r3, #24
 8001ff2:	d13f      	bne.n	8002074 <process_SD_card+0x4a4>
                        // 24-bit RGB (RGB888 -> RGB565)
                        uint8_t *pixel = &rowBuffer[x * 3];
 8001ff4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ff8:	f103 0314 	add.w	r3, r3, #20
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002008:	f102 0210 	add.w	r2, r2, #16
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4413      	add	r3, r2
 8002010:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002014:	f102 021c 	add.w	r2, r2, #28
 8002018:	6013      	str	r3, [r2, #0]
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 800201a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800201e:	f103 031c 	add.w	r3, r3, #28
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3302      	adds	r3, #2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21b      	sxth	r3, r3
 800202c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002030:	f023 0307 	bic.w	r3, r3, #7
 8002034:	b21a      	sxth	r2, r3
                                ((pixel[1] & 0xFC) << 3) | // Green
 8002036:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800203a:	f103 031c 	add.w	r3, r3, #28
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	b21b      	sxth	r3, r3
 8002048:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800204c:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 800204e:	4313      	orrs	r3, r2
 8002050:	b21a      	sxth	r2, r3
                                (pixel[0] >> 3);          // Blue
 8002052:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002056:	f103 031c 	add.w	r3, r3, #28
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	781b      	ldrb	r3, [r3, #0]
                                ((pixel[1] & 0xFC) << 3) | // Green
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 8002068:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800206c:	f102 0212 	add.w	r2, r2, #18
 8002070:	8013      	strh	r3, [r2, #0]
 8002072:	e01e      	b.n	80020b2 <process_SD_card+0x4e2>
                    } else if (bpp == 16) {
 8002074:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002078:	f103 0306 	add.w	r3, r3, #6
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d117      	bne.n	80020b2 <process_SD_card+0x4e2>
                        // 16-bit RGB565
                        uint16_t *pixel = (uint16_t *)&rowBuffer[x * 2];
 8002082:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002086:	f103 0314 	add.w	r3, r3, #20
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002092:	f102 0210 	add.w	r2, r2, #16
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800209e:	6013      	str	r3, [r2, #0]
                        color = *pixel; // Directly use the RGB565 value
 80020a0:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020ac:	f102 0212 	add.w	r2, r2, #18
 80020b0:	8013      	strh	r3, [r2, #0]
                    }

                    *linePtr++ = color >> 8;        // High byte
 80020b2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020b6:	f103 0312 	add.w	r3, r3, #18
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b299      	uxth	r1, r3
 80020c0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020c4:	f103 0318 	add.w	r3, r3, #24
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	f507 5085 	add.w	r0, r7, #4256	@ 0x10a0
 80020d0:	f100 0018 	add.w	r0, r0, #24
 80020d4:	6002      	str	r2, [r0, #0]
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
                    *linePtr++ = color & 0xFF;     // Low byte
 80020da:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020de:	f103 0318 	add.w	r3, r3, #24
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 80020ea:	f101 0118 	add.w	r1, r1, #24
 80020ee:	600a      	str	r2, [r1, #0]
 80020f0:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020f4:	f102 0212 	add.w	r2, r2, #18
 80020f8:	8812      	ldrh	r2, [r2, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]
                for (uint16_t x = 0; x < imageWidth; x++) {
 80020fe:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002102:	f103 0314 	add.w	r3, r3, #20
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800210e:	f102 0214 	add.w	r2, r2, #20
 8002112:	8013      	strh	r3, [r2, #0]
 8002114:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002118:	f103 0314 	add.w	r3, r3, #20
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002122:	f103 030e 	add.w	r3, r3, #14
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	f4ff af5c 	bcc.w	8001fe6 <process_SD_card+0x416>
            for (uint16_t row = 0; row < rowsToProcess; row++) {
 800212e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002132:	f103 0316 	add.w	r3, r3, #22
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800213e:	f102 0216 	add.w	r2, r2, #22
 8002142:	8013      	strh	r3, [r2, #0]
 8002144:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002148:	f103 0316 	add.w	r3, r3, #22
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002152:	f103 0306 	add.w	r3, r3, #6
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	f4ff aeff 	bcc.w	8001f5c <process_SD_card+0x38c>
                }
            }

            // Send the entire buffer for rowsToProcess
            ILI9341_SendData(lineBuffer, rowsToProcess * imageWidth * 2);
 800215e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002162:	f103 0306 	add.w	r3, r3, #6
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800216c:	f103 030e 	add.w	r3, r3, #14
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	fb12 f303 	smulbb	r3, r2, r3
 8002176:	b29b      	uxth	r3, r3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002182:	f103 0308 	add.w	r3, r3, #8
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	f001 fa86 	bl	8003698 <ILI9341_SendData>
        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 800218c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002190:	f103 031e 	add.w	r3, r3, #30
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800219a:	f103 031e 	add.w	r3, r3, #30
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80021a6:	f102 021e 	add.w	r2, r2, #30
 80021aa:	8013      	strh	r3, [r2, #0]
 80021ac:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80021b0:	f103 031e 	add.w	r3, r3, #30
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80021ba:	f103 030c 	add.w	r3, r3, #12
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f4ff ae82 	bcc.w	8001eca <process_SD_card+0x2fa>
        }

        printf("Image rendered successfully!\r\n");
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <process_SD_card+0x630>)
 80021c8:	f00b fa92 	bl	800d6f0 <puts>

        // Close the BMP file
        f_close(&fil);
 80021cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021d0:	3b14      	subs	r3, #20
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00a f95b 	bl	800c48e <f_close>
        printf("File %s closed successfully!\r\n", filename);
 80021d8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80021dc:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 80021e0:	4808      	ldr	r0, [pc, #32]	@ (8002204 <process_SD_card+0x634>)
 80021e2:	f00b fa1d 	bl	800d620 <iprintf>
 80021e6:	46b5      	mov	sp, r6

    } while (false);

}
 80021e8:	e000      	b.n	80021ec <process_SD_card+0x61c>
            break;
 80021ea:	46b5      	mov	sp, r6
}
 80021ec:	bf00      	nop
 80021ee:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 80021f2:	3704      	adds	r7, #4
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	0800fb2c 	.word	0x0800fb2c
 8002200:	0800fb64 	.word	0x0800fb64
 8002204:	0800fb84 	.word	0x0800fb84

08002208 <IR_init>:

// Variable to indicate detection
volatile uint32_t ir_triggered = 0;

// Initialize the IR sensor pin with interrupt
void IR_init(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <IR_init+0x60>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <IR_init+0x60>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6313      	str	r3, [r2, #48]	@ 0x30
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <IR_init+0x60>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	683b      	ldr	r3, [r7, #0]

    // Configure PA7 as input with external interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800223c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002240:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	@ (800226c <IR_init+0x64>)
 800224c:	f003 fd80 	bl	8005d50 <HAL_GPIO_Init>

    // Enable the interrupt in the NVIC
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
 8002250:	2200      	movs	r2, #0
 8002252:	2102      	movs	r1, #2
 8002254:	2017      	movs	r0, #23
 8002256:	f003 f9c8 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
 800225a:	2017      	movs	r0, #23
 800225c:	f003 f9e1 	bl	8005622 <HAL_NVIC_EnableIRQ>
}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_GPIO_EXTI_Callback>:

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	2b80      	cmp	r3, #128	@ 0x80
 800227e:	d102      	bne.n	8002286 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_GPIO_EXTI_Callback+0x24>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
    }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20001288 	.word	0x20001288

08002298 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 800229c:	2080      	movs	r0, #128	@ 0x80
 800229e:	f003 ff0d 	bl	80060bc <HAL_GPIO_EXTI_IRQHandler>
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <IR_is_triggered>:

// Optional: Function to get the IR trigger state (can be used in main logic)
uint8_t IR_is_triggered(void) {
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
    if (ir_triggered) {
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <IR_is_triggered+0x24>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <IR_is_triggered+0x16>
        ir_triggered = 0; // Reset the flag after reading
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <IR_is_triggered+0x24>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
        return 1;         // Return true if an object was detected
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <IR_is_triggered+0x18>
    }
    return 0;             // No detection
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20001288 	.word	0x20001288

080022d0 <init_game>:
const char *normal_pokemon[POKEMON_COUNT] = {"Chansey", "Fearow", "Pidgeot"};
const char *water_pokemon[POKEMON_COUNT] = {"Blastoise", "Feraligator", "Empoleon"};
const char *legendary_pokemon[POKEMON_COUNT] = { "Mewtwo", "Zapdos", "Darkrai"};


void init_game(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	IR_init();
 80022d4:	f7ff ff98 	bl	8002208 <IR_init>
    // Initialize sensors

	//MPU_init();
    Push_Button_Init(); // Initialize push button
 80022d8:	f002 fa60 	bl	800479c <Push_Button_Init>
    LED_init();
 80022dc:	f002 faa0 	bl	8004820 <LED_init>
    Pressure_sensor_Init();
 80022e0:	f001 f888 	bl	80033f4 <Pressure_sensor_Init>
    ADC_Config();
 80022e4:	f001 f8a4 	bl	8003430 <ADC_Config>
    MPU_init();
 80022e8:	f001 f90c 	bl	8003504 <MPU_init>
    ILI9341_Init(); // Initialize the LCD
 80022ec:	f001 f9fc 	bl	80036e8 <ILI9341_Init>
    SD_Init();
 80022f0:	f7ff fc4c 	bl	8001b8c <SD_Init>
    ILI9341_FillScreen(0x0000); // Clear the screen with black color
 80022f4:	2000      	movs	r0, #0
 80022f6:	f001 fac5 	bl	8003884 <ILI9341_FillScreen>
    currentState = IDLE;
 80022fa:	4b04      	ldr	r3, [pc, #16]	@ (800230c <init_game+0x3c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

    // Debugging output
    uart_send_string("Game initialized. System ready!\n\r");
 8002300:	4803      	ldr	r0, [pc, #12]	@ (8002310 <init_game+0x40>)
 8002302:	f002 ffb7 	bl	8005274 <uart_send_string>

    // Additional setup for game variables (if needed)
    // Example: Initialize Pokémon health, score, or other gameplay elements
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000128c 	.word	0x2000128c
 8002310:	0800fc3c 	.word	0x0800fc3c

08002314 <spawn_pokemon_from_array>:

const char *spawn_pokemon_from_array(const char *pokemon_array[]) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b09c      	sub	sp, #112	@ 0x70
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    uint32_t index = rand() % POKEMON_COUNT; // Generate a random index
 800231c:	f00a fc28 	bl	800cb70 <rand>
 8002320:	4601      	mov	r1, r0
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <spawn_pokemon_from_array+0x5c>)
 8002324:	fb83 3201 	smull	r3, r2, r3, r1
 8002328:	17cb      	asrs	r3, r1, #31
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	1aca      	subs	r2, r1, r3
 8002334:	66fa      	str	r2, [r7, #108]	@ 0x6c
    char buffer[100];
    sprintf(buffer, "A wild %s appears!", pokemon_array[index]);
 8002336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	490b      	ldr	r1, [pc, #44]	@ (8002374 <spawn_pokemon_from_array+0x60>)
 8002346:	4618      	mov	r0, r3
 8002348:	f00b f9da 	bl	800d700 <siprintf>
    uart_send_string(buffer);
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4618      	mov	r0, r3
 8002352:	f002 ff8f 	bl	8005274 <uart_send_string>
    uart_send_string("\n\r");
 8002356:	4808      	ldr	r0, [pc, #32]	@ (8002378 <spawn_pokemon_from_array+0x64>)
 8002358:	f002 ff8c 	bl	8005274 <uart_send_string>

    // Display on LCD

    return pokemon_array[index]; // Return the name of the Pokémon
 800235c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3770      	adds	r7, #112	@ 0x70
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	55555556 	.word	0x55555556
 8002374:	0800fc60 	.word	0x0800fc60
 8002378:	0800fc74 	.word	0x0800fc74

0800237c <game_state_machine>:

void game_state_machine() {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b0e1      	sub	sp, #388	@ 0x184
 8002380:	af04      	add	r7, sp, #16
    switch (currentState) {
 8002382:	4bb7      	ldr	r3, [pc, #732]	@ (8002660 <game_state_machine+0x2e4>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b07      	cmp	r3, #7
 8002388:	f200 87ec 	bhi.w	8003364 <game_state_machine+0xfe8>
 800238c:	a201      	add	r2, pc, #4	@ (adr r2, 8002394 <game_state_machine+0x18>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023b5 	.word	0x080023b5
 8002398:	0800247b 	.word	0x0800247b
 800239c:	08002705 	.word	0x08002705
 80023a0:	080028e7 	.word	0x080028e7
 80023a4:	0800297d 	.word	0x0800297d
 80023a8:	08002da1 	.word	0x08002da1
 80023ac:	080031a1 	.word	0x080031a1
 80023b0:	08003347 	.word	0x08003347
    // Add a flag to track whether the welcome message has been displayed


    case IDLE:
        if (!welcome_message_displayed) {
 80023b4:	4bab      	ldr	r3, [pc, #684]	@ (8002664 <game_state_machine+0x2e8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f083 0301 	eor.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d044      	beq.n	800244c <game_state_machine+0xd0>
            // Clear the screen and add a welcome message
            ILI9341_FillScreen(0x0000); // Clear the screen
 80023c2:	2000      	movs	r0, #0
 80023c4:	f001 fa5e 	bl	8003884 <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 60, 0x001F); // Blue title background
 80023c8:	231f      	movs	r3, #31
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	233c      	movs	r3, #60	@ 0x3c
 80023ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f001 fc87 	bl	8003ce8 <ILI9341_FillRect>

            // Center-align the "Welcome to Pokemon Adventure!" text
            // Center-align the "Welcome to Pokemon Adventure!" text
            DrawString(60, 15, "Welcome to", 0xFFFF, 0x001F, 2); // Line 1
 80023da:	2302      	movs	r3, #2
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	231f      	movs	r3, #31
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023e6:	4aa0      	ldr	r2, [pc, #640]	@ (8002668 <game_state_machine+0x2ec>)
 80023e8:	210f      	movs	r1, #15
 80023ea:	203c      	movs	r0, #60	@ 0x3c
 80023ec:	f001 fc4c 	bl	8003c88 <DrawString>
            DrawString(20, 35, "Pokemon Adventure!", 0xFFFF, 0x001F, 2); // Line 2
 80023f0:	2302      	movs	r3, #2
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	231f      	movs	r3, #31
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023fc:	4a9b      	ldr	r2, [pc, #620]	@ (800266c <game_state_machine+0x2f0>)
 80023fe:	2123      	movs	r1, #35	@ 0x23
 8002400:	2014      	movs	r0, #20
 8002402:	f001 fc41 	bl	8003c88 <DrawString>

            // Center-align the "Wave your hand to start!" text
            DrawString(40, 100, "Wave your hand", 0xFFFF, 0x0000, 2); // Line 1
 8002406:	2302      	movs	r3, #2
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2300      	movs	r3, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002412:	4a97      	ldr	r2, [pc, #604]	@ (8002670 <game_state_machine+0x2f4>)
 8002414:	2164      	movs	r1, #100	@ 0x64
 8002416:	2028      	movs	r0, #40	@ 0x28
 8002418:	f001 fc36 	bl	8003c88 <DrawString>
            DrawString(70, 120, "to start!", 0xFFFF, 0x0000, 2); // Line 2
 800241c:	2302      	movs	r3, #2
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002428:	4a92      	ldr	r2, [pc, #584]	@ (8002674 <game_state_machine+0x2f8>)
 800242a:	2178      	movs	r1, #120	@ 0x78
 800242c:	2046      	movs	r0, #70	@ 0x46
 800242e:	f001 fc2b 	bl	8003c88 <DrawString>
            uart_send_string("Waiting for IR sensor trigger...\n\r");
 8002432:	4891      	ldr	r0, [pc, #580]	@ (8002678 <game_state_machine+0x2fc>)
 8002434:	f002 ff1e 	bl	8005274 <uart_send_string>

            HAL_Delay(2000);
 8002438:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800243c:	f002 ffd6 	bl	80053ec <HAL_Delay>

            process_SD_card("init3.bmp");
 8002440:	488e      	ldr	r0, [pc, #568]	@ (800267c <game_state_machine+0x300>)
 8002442:	f7ff fbc5 	bl	8001bd0 <process_SD_card>

            // Set the flag to true after displaying the message
            welcome_message_displayed = true;
 8002446:	4b87      	ldr	r3, [pc, #540]	@ (8002664 <game_state_machine+0x2e8>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
        }

        // Wait for IR sensor trigger
        ir_triggered = 0;
 800244c:	4b8c      	ldr	r3, [pc, #560]	@ (8002680 <game_state_machine+0x304>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
        if (IR_is_triggered()) {
 8002452:	f7ff ff29 	bl	80022a8 <IR_is_triggered>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8780 	beq.w	800335e <game_state_machine+0xfe2>
            // Transition to SENSOR_READ when IR is triggered
            uart_send_string("Pokemon detected! Moving to SENSOR_READ.\n\r");
 800245e:	4889      	ldr	r0, [pc, #548]	@ (8002684 <game_state_machine+0x308>)
 8002460:	f002 ff08 	bl	8005274 <uart_send_string>

            // Clear the screen for the next state
            ILI9341_FillScreen(0x0000);
 8002464:	2000      	movs	r0, #0
 8002466:	f001 fa0d 	bl	8003884 <ILI9341_FillScreen>
            currentState = SENSOR_READ;
 800246a:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <game_state_machine+0x2e4>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]

            // Reset the flag for the next time IDLE is entered
            welcome_message_displayed = false;
 8002470:	4b7c      	ldr	r3, [pc, #496]	@ (8002664 <game_state_machine+0x2e8>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002476:	f000 bf72 	b.w	800335e <game_state_machine+0xfe2>

        case SENSOR_READ: {
            ILI9341_FillScreen(0x0000); // Clear the screen before displaying new data
 800247a:	2000      	movs	r0, #0
 800247c:	f001 fa02 	bl	8003884 <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for heading
 8002480:	231f      	movs	r3, #31
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2328      	movs	r3, #40	@ 0x28
 8002486:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800248a:	2100      	movs	r1, #0
 800248c:	2000      	movs	r0, #0
 800248e:	f001 fc2b 	bl	8003ce8 <ILI9341_FillRect>
            DrawString(10, 10, "Sensor Readings", 0xFFFF, 0x001F, 2); // Heading in white text
 8002492:	2302      	movs	r3, #2
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	231f      	movs	r3, #31
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800249e:	4a7a      	ldr	r2, [pc, #488]	@ (8002688 <game_state_machine+0x30c>)
 80024a0:	210a      	movs	r1, #10
 80024a2:	200a      	movs	r0, #10
 80024a4:	f001 fbf0 	bl	8003c88 <DrawString>

            DHT_DataTypedef DHT_Data;
            DHT_GetData(&DHT_Data); // Read DHT11 data
 80024a8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fe33 	bl	8001118 <DHT_GetData>

            // Only use humidity from DHT11
            dht11_humidity = (int)DHT_Data.Humidity;
 80024b2:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80024b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ba:	ee17 2a90 	vmov	r2, s15
 80024be:	4b73      	ldr	r3, [pc, #460]	@ (800268c <game_state_machine+0x310>)
 80024c0:	601a      	str	r2, [r3, #0]
            ds18b20_temperature=(int)DHT_Data.Temperature;
 80024c2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80024c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <game_state_machine+0x314>)
 80024d0:	edc3 7a00 	vstr	s15, [r3]
            // Read temperature from DS18B20
            //temp_sensor_check();
            // Debug output for humidity and temperature
            char buffer[100];
            sprintf(buffer, "Humidity: %d%%", dht11_humidity);
 80024d4:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <game_state_machine+0x310>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80024dc:	496d      	ldr	r1, [pc, #436]	@ (8002694 <game_state_machine+0x318>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f00b f90e 	bl	800d700 <siprintf>
            uart_send_string(buffer);
 80024e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fec3 	bl	8005274 <uart_send_string>
            DrawString(10, 50, buffer, 0xFFFF, 0x0000, 1); // Display humidity on the screen
 80024ee:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80024f2:	2301      	movs	r3, #1
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024fe:	2132      	movs	r1, #50	@ 0x32
 8002500:	200a      	movs	r0, #10
 8002502:	f001 fbc1 	bl	8003c88 <DrawString>

            sprintf(buffer, "Temperature: %.2f°C", ds18b20_temperature);
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <game_state_machine+0x314>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f834 	bl	8000578 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8002518:	495f      	ldr	r1, [pc, #380]	@ (8002698 <game_state_machine+0x31c>)
 800251a:	f00b f8f1 	bl	800d700 <siprintf>
            uart_send_string(buffer);
 800251e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fea6 	bl	8005274 <uart_send_string>
            DrawString(10, 70, buffer, 0xFFFF, 0x0000, 1); // Display temperature on the screen
 8002528:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800252c:	2301      	movs	r3, #1
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002538:	2146      	movs	r1, #70	@ 0x46
 800253a:	200a      	movs	r0, #10
 800253c:	f001 fba4 	bl	8003c88 <DrawString>

            if (ds18b20_temperature > 27 && dht11_humidity > 65) {
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <game_state_machine+0x314>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 800254a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	dd1d      	ble.n	8002590 <game_state_machine+0x214>
 8002554:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <game_state_machine+0x310>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b41      	cmp	r3, #65	@ 0x41
 800255a:	dd19      	ble.n	8002590 <game_state_machine+0x214>
                    // Spawn Mewtwo due to high temperature and humidity
                    DrawString(10, 100, "Reason:", 0xF800, 0x0000, 1); // Display "Reason:" in red
 800255c:	2301      	movs	r3, #1
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2300      	movs	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002568:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <game_state_machine+0x320>)
 800256a:	2164      	movs	r1, #100	@ 0x64
 800256c:	200a      	movs	r0, #10
 800256e:	f001 fb8b 	bl	8003c88 <DrawString>
                    DrawString(10, 120, "High temp & humidity -> Legendary spawn.", 0xF800, 0x0000, 1);
 8002572:	2301      	movs	r3, #1
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800257e:	4a48      	ldr	r2, [pc, #288]	@ (80026a0 <game_state_machine+0x324>)
 8002580:	2178      	movs	r1, #120	@ 0x78
 8002582:	200a      	movs	r0, #10
 8002584:	f001 fb80 	bl	8003c88 <DrawString>
                    uart_send_string("Reason: High temperature & humidity -> Legendary spawn.\n\r");
 8002588:	4846      	ldr	r0, [pc, #280]	@ (80026a4 <game_state_machine+0x328>)
 800258a:	f002 fe73 	bl	8005274 <uart_send_string>
 800258e:	e0b0      	b.n	80026f2 <game_state_machine+0x376>
                } else if (ds18b20_temperature < 10 && dht11_humidity < 20) {
 8002590:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <game_state_machine+0x314>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800259a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d51d      	bpl.n	80025e0 <game_state_machine+0x264>
 80025a4:	4b39      	ldr	r3, [pc, #228]	@ (800268c <game_state_machine+0x310>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b13      	cmp	r3, #19
 80025aa:	dc19      	bgt.n	80025e0 <game_state_machine+0x264>
                    // Spawn Mewtwo due to low temperature and humidity
                    DrawString(10, 100, "Reason:", 0xF800, 0x0000, 1);
 80025ac:	2301      	movs	r3, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025b8:	4a38      	ldr	r2, [pc, #224]	@ (800269c <game_state_machine+0x320>)
 80025ba:	2164      	movs	r1, #100	@ 0x64
 80025bc:	200a      	movs	r0, #10
 80025be:	f001 fb63 	bl	8003c88 <DrawString>
                    DrawString(10, 120, "Low temp & humidity -> Legendary spawn.", 0xF800, 0x0000, 1);
 80025c2:	2301      	movs	r3, #1
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025ce:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <game_state_machine+0x32c>)
 80025d0:	2178      	movs	r1, #120	@ 0x78
 80025d2:	200a      	movs	r0, #10
 80025d4:	f001 fb58 	bl	8003c88 <DrawString>
                    uart_send_string("Reason: Low temperature & humidity -> Legendary spawn.\n\r");
 80025d8:	4834      	ldr	r0, [pc, #208]	@ (80026ac <game_state_machine+0x330>)
 80025da:	f002 fe4b 	bl	8005274 <uart_send_string>
 80025de:	e088      	b.n	80026f2 <game_state_machine+0x376>
                } else if (ds18b20_temperature > 25.0) {
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <game_state_machine+0x314>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80025ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	dd19      	ble.n	8002628 <game_state_machine+0x2ac>
                    // High temperature leads to Fire-type Pokémon
                    DrawString(10, 100, "Reason:", 0xF800, 0x0000, 1);
 80025f4:	2301      	movs	r3, #1
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <game_state_machine+0x320>)
 8002602:	2164      	movs	r1, #100	@ 0x64
 8002604:	200a      	movs	r0, #10
 8002606:	f001 fb3f 	bl	8003c88 <DrawString>
                    DrawString(10, 120, "High temperature -> Fire type.", 0xF800, 0x0000, 1);
 800260a:	2301      	movs	r3, #1
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002616:	4a26      	ldr	r2, [pc, #152]	@ (80026b0 <game_state_machine+0x334>)
 8002618:	2178      	movs	r1, #120	@ 0x78
 800261a:	200a      	movs	r0, #10
 800261c:	f001 fb34 	bl	8003c88 <DrawString>
                    uart_send_string("Reason: High temperature -> Fire type.\n\r");
 8002620:	4824      	ldr	r0, [pc, #144]	@ (80026b4 <game_state_machine+0x338>)
 8002622:	f002 fe27 	bl	8005274 <uart_send_string>
 8002626:	e064      	b.n	80026f2 <game_state_machine+0x376>
                } else if (dht11_humidity > 60) {
 8002628:	4b18      	ldr	r3, [pc, #96]	@ (800268c <game_state_machine+0x310>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b3c      	cmp	r3, #60	@ 0x3c
 800262e:	dd47      	ble.n	80026c0 <game_state_machine+0x344>
                    // High humidity leads to Water-type Pokémon
                    DrawString(10, 100, "Reason:", 0x001F, 0x0000, 1);
 8002630:	2301      	movs	r3, #1
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2300      	movs	r3, #0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	231f      	movs	r3, #31
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <game_state_machine+0x320>)
 800263c:	2164      	movs	r1, #100	@ 0x64
 800263e:	200a      	movs	r0, #10
 8002640:	f001 fb22 	bl	8003c88 <DrawString>
                    DrawString(10, 120, "High humidity -> Water type.", 0x001F, 0x0000, 1);
 8002644:	2301      	movs	r3, #1
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	2300      	movs	r3, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	231f      	movs	r3, #31
 800264e:	4a1a      	ldr	r2, [pc, #104]	@ (80026b8 <game_state_machine+0x33c>)
 8002650:	2178      	movs	r1, #120	@ 0x78
 8002652:	200a      	movs	r0, #10
 8002654:	f001 fb18 	bl	8003c88 <DrawString>
                    uart_send_string("Reason: High humidity -> Water type.\n\r");
 8002658:	4818      	ldr	r0, [pc, #96]	@ (80026bc <game_state_machine+0x340>)
 800265a:	f002 fe0b 	bl	8005274 <uart_send_string>
 800265e:	e048      	b.n	80026f2 <game_state_machine+0x376>
 8002660:	2000128c 	.word	0x2000128c
 8002664:	20001294 	.word	0x20001294
 8002668:	0800fc78 	.word	0x0800fc78
 800266c:	0800fc84 	.word	0x0800fc84
 8002670:	0800fc98 	.word	0x0800fc98
 8002674:	0800fca8 	.word	0x0800fca8
 8002678:	0800fcb4 	.word	0x0800fcb4
 800267c:	0800fcd8 	.word	0x0800fcd8
 8002680:	20001288 	.word	0x20001288
 8002684:	0800fce4 	.word	0x0800fce4
 8002688:	0800fd10 	.word	0x0800fd10
 800268c:	20001298 	.word	0x20001298
 8002690:	2000129c 	.word	0x2000129c
 8002694:	0800fd20 	.word	0x0800fd20
 8002698:	0800fd30 	.word	0x0800fd30
 800269c:	0800fd48 	.word	0x0800fd48
 80026a0:	0800fd50 	.word	0x0800fd50
 80026a4:	0800fd7c 	.word	0x0800fd7c
 80026a8:	0800fdb8 	.word	0x0800fdb8
 80026ac:	0800fde0 	.word	0x0800fde0
 80026b0:	0800fe1c 	.word	0x0800fe1c
 80026b4:	0800fe3c 	.word	0x0800fe3c
 80026b8:	0800fe68 	.word	0x0800fe68
 80026bc:	0800fe88 	.word	0x0800fe88
                } else {
                    // Neutral conditions lead to Normal-type Pokémon
                    DrawString(10, 100, "Reason:", 0x07E0, 0x0000, 1);
 80026c0:	2301      	movs	r3, #1
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026cc:	4ab4      	ldr	r2, [pc, #720]	@ (80029a0 <game_state_machine+0x624>)
 80026ce:	2164      	movs	r1, #100	@ 0x64
 80026d0:	200a      	movs	r0, #10
 80026d2:	f001 fad9 	bl	8003c88 <DrawString>
                    DrawString(10, 120, "Neutral conditions -> Normal type.", 0x07E0, 0x0000, 1);
 80026d6:	2301      	movs	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026e2:	4ab0      	ldr	r2, [pc, #704]	@ (80029a4 <game_state_machine+0x628>)
 80026e4:	2178      	movs	r1, #120	@ 0x78
 80026e6:	200a      	movs	r0, #10
 80026e8:	f001 face 	bl	8003c88 <DrawString>
                    uart_send_string("Reason: Neutral conditions -> Normal type.\n\r");
 80026ec:	48ae      	ldr	r0, [pc, #696]	@ (80029a8 <game_state_machine+0x62c>)
 80026ee:	f002 fdc1 	bl	8005274 <uart_send_string>
                }

                HAL_Delay(2000); // Allow time for the user to view the readings
 80026f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80026f6:	f002 fe79 	bl	80053ec <HAL_Delay>
                currentState = CHECK_POKEMON_ENCOUNTER; // Move to next state
 80026fa:	4bac      	ldr	r3, [pc, #688]	@ (80029ac <game_state_machine+0x630>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
                break;
 8002700:	f000 be30 	b.w	8003364 <game_state_machine+0xfe8>
            }

        case CHECK_POKEMON_ENCOUNTER: {
            FlashScreen(3, 50); // Flash to indicate encounter transition
 8002704:	2132      	movs	r1, #50	@ 0x32
 8002706:	2003      	movs	r0, #3
 8002708:	f001 fc32 	bl	8003f70 <FlashScreen>
            ILI9341_FillScreen(0x0000);
 800270c:	2000      	movs	r0, #0
 800270e:	f001 f8b9 	bl	8003884 <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for heading
 8002712:	231f      	movs	r3, #31
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2328      	movs	r3, #40	@ 0x28
 8002718:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800271c:	2100      	movs	r1, #0
 800271e:	2000      	movs	r0, #0
 8002720:	f001 fae2 	bl	8003ce8 <ILI9341_FillRect>
            DrawString(10, 10, "Pokemon Encounter!", 0xFFFF, 0x001F, 2); // White text on blue background
 8002724:	2302      	movs	r3, #2
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	231f      	movs	r3, #31
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002730:	4a9f      	ldr	r2, [pc, #636]	@ (80029b0 <game_state_machine+0x634>)
 8002732:	210a      	movs	r1, #10
 8002734:	200a      	movs	r0, #10
 8002736:	f001 faa7 	bl	8003c88 <DrawString>

            // Reset health and damage for the new Pokémon
            pokemon_health_percentage = 100; // Reset health to full
 800273a:	4b9e      	ldr	r3, [pc, #632]	@ (80029b4 <game_state_machine+0x638>)
 800273c:	2264      	movs	r2, #100	@ 0x64
 800273e:	601a      	str	r2, [r3, #0]
            previous_damage = 0; // Reset damage
 8002740:	4b9d      	ldr	r3, [pc, #628]	@ (80029b8 <game_state_machine+0x63c>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
            reset_health_leds(); // Reset LEDs to default state
 8002746:	f002 f975 	bl	8004a34 <reset_health_leds>
            UpdateLEDs(pokemon_health_percentage); // Update LEDs to reflect new health
 800274a:	4b9a      	ldr	r3, [pc, #616]	@ (80029b4 <game_state_machine+0x638>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f002 f8f0 	bl	8004934 <UpdateLEDs>

            // Determine Pokémon to spawn
            const char *pokemon_name = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

            // Check conditions for Mewtwo
            if ((ds18b20_temperature > 27 && dht11_humidity > 65) ||
 800275a:	4b98      	ldr	r3, [pc, #608]	@ (80029bc <game_state_machine+0x640>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 8002764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	dd03      	ble.n	8002776 <game_state_machine+0x3fa>
 800276e:	4b94      	ldr	r3, [pc, #592]	@ (80029c0 <game_state_machine+0x644>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b41      	cmp	r3, #65	@ 0x41
 8002774:	dc0d      	bgt.n	8002792 <game_state_machine+0x416>
                (ds18b20_temperature < 10 && dht11_humidity < 20)) {
 8002776:	4b91      	ldr	r3, [pc, #580]	@ (80029bc <game_state_machine+0x640>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
            if ((ds18b20_temperature > 27 && dht11_humidity > 65) ||
 800277c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	d507      	bpl.n	800279a <game_state_machine+0x41e>
                (ds18b20_temperature < 10 && dht11_humidity < 20)) {
 800278a:	4b8d      	ldr	r3, [pc, #564]	@ (80029c0 <game_state_machine+0x644>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b13      	cmp	r3, #19
 8002790:	dc03      	bgt.n	800279a <game_state_machine+0x41e>
                pokemon_name = "Mewtwo"; // Special spawn condition for Mewtwo
 8002792:	4b8c      	ldr	r3, [pc, #560]	@ (80029c4 <game_state_machine+0x648>)
 8002794:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002798:	e033      	b.n	8002802 <game_state_machine+0x486>
            } else if (ds18b20_temperature > 25.0) {
 800279a:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <game_state_machine+0x640>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	dd05      	ble.n	80027ba <game_state_machine+0x43e>
                pokemon_name = spawn_pokemon_from_array(fire_pokemon);
 80027ae:	4886      	ldr	r0, [pc, #536]	@ (80029c8 <game_state_machine+0x64c>)
 80027b0:	f7ff fdb0 	bl	8002314 <spawn_pokemon_from_array>
 80027b4:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 80027b8:	e023      	b.n	8002802 <game_state_machine+0x486>
            } else if (dht11_humidity > 60) {
 80027ba:	4b81      	ldr	r3, [pc, #516]	@ (80029c0 <game_state_machine+0x644>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b3c      	cmp	r3, #60	@ 0x3c
 80027c0:	dd05      	ble.n	80027ce <game_state_machine+0x452>
                pokemon_name = spawn_pokemon_from_array(water_pokemon);
 80027c2:	4882      	ldr	r0, [pc, #520]	@ (80029cc <game_state_machine+0x650>)
 80027c4:	f7ff fda6 	bl	8002314 <spawn_pokemon_from_array>
 80027c8:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 80027cc:	e019      	b.n	8002802 <game_state_machine+0x486>
            } else if (rand() % 100 == 0) { // Random chance to spawn a legendary Pokémon
 80027ce:	f00a f9cf 	bl	800cb70 <rand>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b7e      	ldr	r3, [pc, #504]	@ (80029d0 <game_state_machine+0x654>)
 80027d6:	fb83 1302 	smull	r1, r3, r3, r2
 80027da:	1159      	asrs	r1, r3, #5
 80027dc:	17d3      	asrs	r3, r2, #31
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	2164      	movs	r1, #100	@ 0x64
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <game_state_machine+0x47c>
                pokemon_name = spawn_pokemon_from_array(legendary_pokemon);
 80027ec:	4879      	ldr	r0, [pc, #484]	@ (80029d4 <game_state_machine+0x658>)
 80027ee:	f7ff fd91 	bl	8002314 <spawn_pokemon_from_array>
 80027f2:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 80027f6:	e004      	b.n	8002802 <game_state_machine+0x486>
            } else {
                pokemon_name = spawn_pokemon_from_array(normal_pokemon);
 80027f8:	4877      	ldr	r0, [pc, #476]	@ (80029d8 <game_state_machine+0x65c>)
 80027fa:	f7ff fd8b 	bl	8002314 <spawn_pokemon_from_array>
 80027fe:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
            }

            strcpy(current_pokemon, pokemon_name);
 8002802:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002806:	4875      	ldr	r0, [pc, #468]	@ (80029dc <game_state_machine+0x660>)
 8002808:	f00b f8f1 	bl	800d9ee <strcpy>

            // Display the Pokémon name
            char buffer[100];
            DrawString(10, 60, "A wild", 0xFFFF, 0x0000, 2); // White text
 800280c:	2302      	movs	r3, #2
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002818:	4a71      	ldr	r2, [pc, #452]	@ (80029e0 <game_state_machine+0x664>)
 800281a:	213c      	movs	r1, #60	@ 0x3c
 800281c:	200a      	movs	r0, #10
 800281e:	f001 fa33 	bl	8003c88 <DrawString>
            sprintf(buffer, "%s", pokemon_name);
 8002822:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002826:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800282a:	496e      	ldr	r1, [pc, #440]	@ (80029e4 <game_state_machine+0x668>)
 800282c:	4618      	mov	r0, r3
 800282e:	f00a ff67 	bl	800d700 <siprintf>
            DrawString(10, 90, buffer, 0xFFFF, 0x0000, 2); // Pokémon name
 8002832:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002836:	2302      	movs	r3, #2
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002842:	215a      	movs	r1, #90	@ 0x5a
 8002844:	200a      	movs	r0, #10
 8002846:	f001 fa1f 	bl	8003c88 <DrawString>
            DrawString(10 + (strlen(buffer) * 12) + 10, 90, "appears!", 0xFFFF, 0x0000, 2); // Adjusted text position
 800284a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fd26 	bl	80002a0 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	0052      	lsls	r2, r2, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	b29b      	uxth	r3, r3
 8002862:	3314      	adds	r3, #20
 8002864:	b298      	uxth	r0, r3
 8002866:	2302      	movs	r3, #2
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002872:	4a5d      	ldr	r2, [pc, #372]	@ (80029e8 <game_state_machine+0x66c>)
 8002874:	215a      	movs	r1, #90	@ 0x5a
 8002876:	f001 fa07 	bl	8003c88 <DrawString>

            uart_send_string("A wild ");
 800287a:	485c      	ldr	r0, [pc, #368]	@ (80029ec <game_state_machine+0x670>)
 800287c:	f002 fcfa 	bl	8005274 <uart_send_string>
            uart_send_string(buffer);
 8002880:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002884:	4618      	mov	r0, r3
 8002886:	f002 fcf5 	bl	8005274 <uart_send_string>
            uart_send_string(" appears!\n\r");
 800288a:	4859      	ldr	r0, [pc, #356]	@ (80029f0 <game_state_machine+0x674>)
 800288c:	f002 fcf2 	bl	8005274 <uart_send_string>

            // Prompt user to select an action
            DrawString(10, 120, "Select an action:", 0x07E0, 0x0000, 2); // Green text
 8002890:	2302      	movs	r3, #2
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800289c:	4a55      	ldr	r2, [pc, #340]	@ (80029f4 <game_state_machine+0x678>)
 800289e:	2178      	movs	r1, #120	@ 0x78
 80028a0:	200a      	movs	r0, #10
 80028a2:	f001 f9f1 	bl	8003c88 <DrawString>
            DrawString(10, 160, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 80028a6:	2302      	movs	r3, #2
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028b2:	4a51      	ldr	r2, [pc, #324]	@ (80029f8 <game_state_machine+0x67c>)
 80028b4:	21a0      	movs	r1, #160	@ 0xa0
 80028b6:	200a      	movs	r0, #10
 80028b8:	f001 f9e6 	bl	8003c88 <DrawString>
            DrawString(10, 200, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 80028bc:	2302      	movs	r3, #2
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028c8:	4a4c      	ldr	r2, [pc, #304]	@ (80029fc <game_state_machine+0x680>)
 80028ca:	21c8      	movs	r1, #200	@ 0xc8
 80028cc:	200a      	movs	r0, #10
 80028ce:	f001 f9db 	bl	8003c88 <DrawString>

            uart_send_string("\rSelect an action: Press button for Battle or Capture.\n\r");
 80028d2:	484b      	ldr	r0, [pc, #300]	@ (8002a00 <game_state_machine+0x684>)
 80028d4:	f002 fcce 	bl	8005274 <uart_send_string>
            Reset_Button_State(); // Reset button state for selection
 80028d8:	f002 f930 	bl	8004b3c <Reset_Button_State>
            currentState = SELECT_ACTION;
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <game_state_machine+0x630>)
 80028de:	2203      	movs	r2, #3
 80028e0:	701a      	strb	r2, [r3, #0]
            break;
 80028e2:	f000 bd3f 	b.w	8003364 <game_state_machine+0xfe8>
        }

        case SELECT_ACTION: {
            // Wait for button press
            if (Get_Battle_Button_State()) { // PC13 for Battle
 80028e6:	f002 f911 	bl	8004b0c <Get_Battle_Button_State>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <game_state_machine+0x5b6>
                uart_send_string("Battle selected!\n\r");
 80028f0:	4844      	ldr	r0, [pc, #272]	@ (8002a04 <game_state_machine+0x688>)
 80028f2:	f002 fcbf 	bl	8005274 <uart_send_string>

                ILI9341_FillScreen(0x0000); // Clear the screen
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 ffc4 	bl	8003884 <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0xF800); // Red background for Battle heading
 80028fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2328      	movs	r3, #40	@ 0x28
 8002904:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002908:	2100      	movs	r1, #0
 800290a:	2000      	movs	r0, #0
 800290c:	f001 f9ec 	bl	8003ce8 <ILI9341_FillRect>
                DrawString(10, 10, "Battle Mode!", 0xFFFF, 0xF800, 3); // White text on red background
 8002910:	2303      	movs	r3, #3
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <game_state_machine+0x68c>)
 8002920:	210a      	movs	r1, #10
 8002922:	200a      	movs	r0, #10
 8002924:	f001 f9b0 	bl	8003c88 <DrawString>

                currentState = BATTLE; // Transition to Battle state
 8002928:	4b20      	ldr	r3, [pc, #128]	@ (80029ac <game_state_machine+0x630>)
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background

                currentState = CAPTURE; // Transition to Capture state
            }
            break;
 800292e:	f000 bd18 	b.w	8003362 <game_state_machine+0xfe6>
            } else if (Get_Capture_Button_State()) { // PC14 for Capture
 8002932:	f002 f8f7 	bl	8004b24 <Get_Capture_Button_State>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8512 	beq.w	8003362 <game_state_machine+0xfe6>
                uart_send_string("Capture selected!\n\r");
 800293e:	4833      	ldr	r0, [pc, #204]	@ (8002a0c <game_state_machine+0x690>)
 8002940:	f002 fc98 	bl	8005274 <uart_send_string>
                ILI9341_FillScreen(0x0000); // Clear the screen
 8002944:	2000      	movs	r0, #0
 8002946:	f000 ff9d 	bl	8003884 <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
 800294a:	231f      	movs	r3, #31
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2328      	movs	r3, #40	@ 0x28
 8002950:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002954:	2100      	movs	r1, #0
 8002956:	2000      	movs	r0, #0
 8002958:	f001 f9c6 	bl	8003ce8 <ILI9341_FillRect>
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background
 800295c:	2303      	movs	r3, #3
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	231f      	movs	r3, #31
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002968:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <game_state_machine+0x694>)
 800296a:	210a      	movs	r1, #10
 800296c:	200a      	movs	r0, #10
 800296e:	f001 f98b 	bl	8003c88 <DrawString>
                currentState = CAPTURE; // Transition to Capture state
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <game_state_machine+0x630>)
 8002974:	2205      	movs	r2, #5
 8002976:	701a      	strb	r2, [r3, #0]
            break;
 8002978:	f000 bcf3 	b.w	8003362 <game_state_machine+0xfe6>
        }


        case BATTLE: {
            uart_send_string("Battle initiated! Shake the board to attack.\n\r");
 800297c:	4825      	ldr	r0, [pc, #148]	@ (8002a14 <game_state_machine+0x698>)
 800297e:	f002 fc79 	bl	8005274 <uart_send_string>
            DrawString(10, 60, "Shake to attack!", 0x07E0, 0x0000, 2); // Green text, size 2
 8002982:	2302      	movs	r3, #2
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800298e:	4a22      	ldr	r2, [pc, #136]	@ (8002a18 <game_state_machine+0x69c>)
 8002990:	213c      	movs	r1, #60	@ 0x3c
 8002992:	200a      	movs	r0, #10
 8002994:	f001 f978 	bl	8003c88 <DrawString>

            // Countdown before shaking
            for (int countdown = 3; countdown > 0; countdown--) {
 8002998:	2303      	movs	r3, #3
 800299a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800299e:	e067      	b.n	8002a70 <game_state_machine+0x6f4>
 80029a0:	0800fd48 	.word	0x0800fd48
 80029a4:	0800feb0 	.word	0x0800feb0
 80029a8:	0800fed4 	.word	0x0800fed4
 80029ac:	2000128c 	.word	0x2000128c
 80029b0:	0800ff04 	.word	0x0800ff04
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20001290 	.word	0x20001290
 80029bc:	2000129c 	.word	0x2000129c
 80029c0:	20001298 	.word	0x20001298
 80029c4:	0800fc24 	.word	0x0800fc24
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000020 	.word	0x20000020
 80029d0:	51eb851f 	.word	0x51eb851f
 80029d4:	2000002c 	.word	0x2000002c
 80029d8:	20000014 	.word	0x20000014
 80029dc:	200012a0 	.word	0x200012a0
 80029e0:	0800ff18 	.word	0x0800ff18
 80029e4:	0800ff20 	.word	0x0800ff20
 80029e8:	0800ff24 	.word	0x0800ff24
 80029ec:	0800ff30 	.word	0x0800ff30
 80029f0:	0800ff38 	.word	0x0800ff38
 80029f4:	0800ff44 	.word	0x0800ff44
 80029f8:	0800ff58 	.word	0x0800ff58
 80029fc:	0800ff68 	.word	0x0800ff68
 8002a00:	0800ff78 	.word	0x0800ff78
 8002a04:	0800ffb4 	.word	0x0800ffb4
 8002a08:	0800ffc8 	.word	0x0800ffc8
 8002a0c:	0800ffd8 	.word	0x0800ffd8
 8002a10:	0800ffec 	.word	0x0800ffec
 8002a14:	0800fffc 	.word	0x0800fffc
 8002a18:	0801002c 	.word	0x0801002c
                char buffer[50];
                sprintf(buffer, "Prepare to shake in: %d\n\r", countdown);
 8002a1c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a20:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002a24:	49b8      	ldr	r1, [pc, #736]	@ (8002d08 <game_state_machine+0x98c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00a fe6a 	bl	800d700 <siprintf>
                uart_send_string(buffer);
 8002a2c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fc1f 	bl	8005274 <uart_send_string>

                char lcd_buffer[20];
                sprintf(lcd_buffer, "Shake in: %d", countdown);
 8002a36:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a3a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002a3e:	49b3      	ldr	r1, [pc, #716]	@ (8002d0c <game_state_machine+0x990>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00a fe5d 	bl	800d700 <siprintf>
                DrawString(10, 100, lcd_buffer, 0xFFFF, 0x0000, 2); // White text
 8002a46:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a56:	2164      	movs	r1, #100	@ 0x64
 8002a58:	200a      	movs	r0, #10
 8002a5a:	f001 f915 	bl	8003c88 <DrawString>
                HAL_Delay(1000); // 1-second delay
 8002a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a62:	f002 fcc3 	bl	80053ec <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 8002a66:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002a70:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dcd1      	bgt.n	8002a1c <game_state_machine+0x6a0>
            }

            uart_send_string("Shake the board now!\n\r");
 8002a78:	48a5      	ldr	r0, [pc, #660]	@ (8002d10 <game_state_machine+0x994>)
 8002a7a:	f002 fbfb 	bl	8005274 <uart_send_string>
            DrawString(10, 150, "Attack Progress:", 0xFFFF, 0x0000, 2); // Display attack progress on LCD
 8002a7e:	2302      	movs	r3, #2
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8a:	4aa2      	ldr	r2, [pc, #648]	@ (8002d14 <game_state_machine+0x998>)
 8002a8c:	2196      	movs	r1, #150	@ 0x96
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f001 f8fa 	bl	8003c88 <DrawString>

            const uint32_t duration = 3000; // Duration for shaking (3 seconds)
 8002a94:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002a98:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            const int threshold = 2000;    // Threshold for shake detection
 8002a9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002aa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            const int max_shakes = 70;     // Maximum allowed shakes for 100% health
 8002aa4:	2346      	movs	r3, #70	@ 0x46
 8002aa6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            uint32_t start_time = HAL_GetTick();
 8002aaa:	f002 fc93 	bl	80053d4 <HAL_GetTick>
 8002aae:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
            uint32_t shake_count = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

            // Progress bar and shake detection loop
            while ((HAL_GetTick() - start_time) < duration) {
 8002ab8:	e038      	b.n	8002b2c <game_state_machine+0x7b0>
                uint32_t elapsed = HAL_GetTick() - start_time;
 8002aba:	f002 fc8b 	bl	80053d4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                int percentage = (elapsed * 100) / duration;
 8002aca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002ace:	2264      	movs	r2, #100	@ 0x64
 8002ad0:	fb03 f202 	mul.w	r2, r3, r2
 8002ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                // Update progress bar dynamically
                progress_bar(10, 200, 220, 20, 0x07E0, 0x0000, percentage); // Green progress bar
 8002ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2314      	movs	r3, #20
 8002af2:	22dc      	movs	r2, #220	@ 0xdc
 8002af4:	21c8      	movs	r1, #200	@ 0xc8
 8002af6:	200a      	movs	r0, #10
 8002af8:	f001 f9f4 	bl	8003ee4 <progress_bar>

                // Detect shakes
                int32_t magnitude = MPU_read();
 8002afc:	f000 fd76 	bl	80035ec <MPU_read>
 8002b00:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (magnitude > threshold && shake_count < max_shakes) {
 8002b04:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dd0a      	ble.n	8002b26 <game_state_machine+0x7aa>
 8002b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b14:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d204      	bcs.n	8002b26 <game_state_machine+0x7aa>
                    shake_count++;
 8002b1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
                }

                HAL_Delay(50); // Small delay for smoother updates
 8002b26:	2032      	movs	r0, #50	@ 0x32
 8002b28:	f002 fc60 	bl	80053ec <HAL_Delay>
            while ((HAL_GetTick() - start_time) < duration) {
 8002b2c:	f002 fc52 	bl	80053d4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8bc      	bhi.n	8002aba <game_state_machine+0x73e>
            }

            // Calculate damage
            int base_damage = 10;
 8002b40:	230a      	movs	r3, #10
 8002b42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            int total_damage = shake_count * base_damage;
 8002b46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002b4a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

            // Update `previous_damage`
          // Persistent across calls
            previous_damage += total_damage;
 8002b56:	4b70      	ldr	r3, [pc, #448]	@ (8002d18 <game_state_machine+0x99c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <game_state_machine+0x99c>)
 8002b62:	6013      	str	r3, [r2, #0]

            // Calculate health percentage
            int max_health = max_shakes * base_damage; // Maximum possible damage
 8002b64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b68:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            pokemon_health_percentage = 100 - ((previous_damage * 100) / max_health);
 8002b74:	4b68      	ldr	r3, [pc, #416]	@ (8002d18 <game_state_machine+0x99c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2264      	movs	r2, #100	@ 0x64
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b86:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002b8a:	4a64      	ldr	r2, [pc, #400]	@ (8002d1c <game_state_machine+0x9a0>)
 8002b8c:	6013      	str	r3, [r2, #0]
            if (pokemon_health_percentage < 0) {
 8002b8e:	4b63      	ldr	r3, [pc, #396]	@ (8002d1c <game_state_machine+0x9a0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da02      	bge.n	8002b9c <game_state_machine+0x820>
                pokemon_health_percentage = 0; // Ensure it doesn't go below 0%
 8002b96:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <game_state_machine+0x9a0>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
            }
            UpdateLEDs(pokemon_health_percentage);
 8002b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d1c <game_state_machine+0x9a0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 fec7 	bl	8004934 <UpdateLEDs>
            // Determine health bar color based on health percentage
            uint16_t health_color;
            if (pokemon_health_percentage <= 0) {
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d1c <game_state_machine+0x9a0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dc04      	bgt.n	8002bb8 <game_state_machine+0x83c>
                health_color = 0xF800; // Red for fainted
 8002bae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bb2:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8002bb6:	e015      	b.n	8002be4 <game_state_machine+0x868>
            } else if (pokemon_health_percentage < 40) {
 8002bb8:	4b58      	ldr	r3, [pc, #352]	@ (8002d1c <game_state_machine+0x9a0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b27      	cmp	r3, #39	@ 0x27
 8002bbe:	dc04      	bgt.n	8002bca <game_state_machine+0x84e>
                health_color = 0xF800; // Red for health < 40%
 8002bc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bc4:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8002bc8:	e00c      	b.n	8002be4 <game_state_machine+0x868>
            } else if (pokemon_health_percentage < 75) {
 8002bca:	4b54      	ldr	r3, [pc, #336]	@ (8002d1c <game_state_machine+0x9a0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b4a      	cmp	r3, #74	@ 0x4a
 8002bd0:	dc04      	bgt.n	8002bdc <game_state_machine+0x860>
                health_color = 0xFFE0; // Yellow for health between 40% and 75%
 8002bd2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bd6:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8002bda:	e003      	b.n	8002be4 <game_state_machine+0x868>
            } else {
                health_color = 0x07E0; // Green for health >= 75%
 8002bdc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002be0:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
            }

            // Clear the screen and move to results
            ILI9341_FillScreen(0x0000); // Clear screen for results display
 8002be4:	2000      	movs	r0, #0
 8002be6:	f000 fe4d 	bl	8003884 <ILI9341_FillScreen>

            // Display results on the new screen
            uart_send_string("Battle complete! Displaying results...\n\r");
 8002bea:	484d      	ldr	r0, [pc, #308]	@ (8002d20 <game_state_machine+0x9a4>)
 8002bec:	f002 fb42 	bl	8005274 <uart_send_string>
            DrawString(10, 20, "Battle Results:", 0xFFE0, 0x0000, 2); // Yellow text
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bfc:	4a49      	ldr	r2, [pc, #292]	@ (8002d24 <game_state_machine+0x9a8>)
 8002bfe:	2114      	movs	r1, #20
 8002c00:	200a      	movs	r0, #10
 8002c02:	f001 f841 	bl	8003c88 <DrawString>

            // Display shake count
            char buffer[50];
            sprintf(buffer, "Shakes: %lu", shake_count);
 8002c06:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002c0a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002c0e:	4946      	ldr	r1, [pc, #280]	@ (8002d28 <game_state_machine+0x9ac>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f00a fd75 	bl	800d700 <siprintf>
            DrawString(10, 60, buffer, 0xFFFF, 0x0000, 2); // White text for shake count
 8002c16:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c26:	213c      	movs	r1, #60	@ 0x3c
 8002c28:	200a      	movs	r0, #10
 8002c2a:	f001 f82d 	bl	8003c88 <DrawString>

            // Display damage on the next line
            sprintf(buffer, "Damage: %d", total_damage);
 8002c2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002c32:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002c36:	493d      	ldr	r1, [pc, #244]	@ (8002d2c <game_state_machine+0x9b0>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00a fd61 	bl	800d700 <siprintf>
            DrawString(10, 100, buffer, 0xFFFF, 0x0000, 2); // White text for damage
 8002c3e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002c42:	2302      	movs	r3, #2
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c4e:	2164      	movs	r1, #100	@ 0x64
 8002c50:	200a      	movs	r0, #10
 8002c52:	f001 f819 	bl	8003c88 <DrawString>

            // Display health bar
            DrawString(10, 140, "Health Bar:", 0xFFFF, 0x0000, 2); // White text for health bar
 8002c56:	2302      	movs	r3, #2
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c62:	4a33      	ldr	r2, [pc, #204]	@ (8002d30 <game_state_machine+0x9b4>)
 8002c64:	218c      	movs	r1, #140	@ 0x8c
 8002c66:	200a      	movs	r0, #10
 8002c68:	f001 f80e 	bl	8003c88 <DrawString>
            ILI9341_DrawRect(10, 170, 220, 20, 0xFFFF); // Outline of health bar
 8002c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2314      	movs	r3, #20
 8002c74:	22dc      	movs	r2, #220	@ 0xdc
 8002c76:	21aa      	movs	r1, #170	@ 0xaa
 8002c78:	200a      	movs	r0, #10
 8002c7a:	f001 f909 	bl	8003e90 <ILI9341_DrawRect>
            uint16_t health_bar_width = (pokemon_health_percentage * 220) / 100; // Scale health bar width
 8002c7e:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <game_state_machine+0x9a0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	22dc      	movs	r2, #220	@ 0xdc
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <game_state_machine+0x9b8>)
 8002c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c8e:	1152      	asrs	r2, r2, #5
 8002c90:	17db      	asrs	r3, r3, #31
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
            ILI9341_FillRect(10, 170, health_bar_width, 20, health_color); // Fill health bar
 8002c98:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8002c9c:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2314      	movs	r3, #20
 8002ca4:	21aa      	movs	r1, #170	@ 0xaa
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f001 f81e 	bl	8003ce8 <ILI9341_FillRect>

            // Display health percentage
            sprintf(buffer, "Health: %d%%", pokemon_health_percentage);
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <game_state_machine+0x9a0>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cb4:	4920      	ldr	r1, [pc, #128]	@ (8002d38 <game_state_machine+0x9bc>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f00a fd22 	bl	800d700 <siprintf>
            DrawString(10, 200, buffer, 0xFFFF, 0x0000, 2); // White text for health percentage
 8002cbc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ccc:	21c8      	movs	r1, #200	@ 0xc8
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f000 ffda 	bl	8003c88 <DrawString>

            // Handle fainted Pokemon
            if (pokemon_health_percentage <= 0) {
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <game_state_machine+0x9a0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dc35      	bgt.n	8002d48 <game_state_machine+0x9cc>
                DrawString(10, 240, "Pokemon fainted!", 0xF800, 0x0000, 2); // Red text
 8002cdc:	2302      	movs	r3, #2
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <game_state_machine+0x9c0>)
 8002cea:	21f0      	movs	r1, #240	@ 0xf0
 8002cec:	200a      	movs	r0, #10
 8002cee:	f000 ffcb 	bl	8003c88 <DrawString>
                uart_send_string("Pokemon fainted! Cannot battle or capture.\n\r");
 8002cf2:	4813      	ldr	r0, [pc, #76]	@ (8002d40 <game_state_machine+0x9c4>)
 8002cf4:	f002 fabe 	bl	8005274 <uart_send_string>
                HAL_Delay(3000); // Pause to display message
 8002cf8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cfc:	f002 fb76 	bl	80053ec <HAL_Delay>
                currentState = POST_BATTLE; // Transition to POST_BATTLE state
 8002d00:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <game_state_machine+0x9c8>)
 8002d02:	2206      	movs	r2, #6
 8002d04:	701a      	strb	r2, [r3, #0]
                DrawString(10, 260, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
                DrawString(10, 280, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
                Reset_Button_State(); // Reset button state for new selection
                currentState = SELECT_ACTION; // Return to action selection
            }
            break;
 8002d06:	e32d      	b.n	8003364 <game_state_machine+0xfe8>
 8002d08:	08010040 	.word	0x08010040
 8002d0c:	0801005c 	.word	0x0801005c
 8002d10:	0801006c 	.word	0x0801006c
 8002d14:	08010084 	.word	0x08010084
 8002d18:	20001290 	.word	0x20001290
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	08010098 	.word	0x08010098
 8002d24:	080100c4 	.word	0x080100c4
 8002d28:	080100d4 	.word	0x080100d4
 8002d2c:	080100e0 	.word	0x080100e0
 8002d30:	080100ec 	.word	0x080100ec
 8002d34:	51eb851f 	.word	0x51eb851f
 8002d38:	080100f8 	.word	0x080100f8
 8002d3c:	08010108 	.word	0x08010108
 8002d40:	0801011c 	.word	0x0801011c
 8002d44:	2000128c 	.word	0x2000128c
                uart_send_string("Returning to action selection.\n\r");
 8002d48:	48cb      	ldr	r0, [pc, #812]	@ (8003078 <game_state_machine+0xcfc>)
 8002d4a:	f002 fa93 	bl	8005274 <uart_send_string>
                DrawString(10, 240, "Select Action:", 0x07E0, 0x0000, 1); // Green text
 8002d4e:	2301      	movs	r3, #1
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d5a:	4ac8      	ldr	r2, [pc, #800]	@ (800307c <game_state_machine+0xd00>)
 8002d5c:	21f0      	movs	r1, #240	@ 0xf0
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f000 ff92 	bl	8003c88 <DrawString>
                DrawString(10, 260, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 8002d64:	2302      	movs	r3, #2
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d70:	4ac3      	ldr	r2, [pc, #780]	@ (8003080 <game_state_machine+0xd04>)
 8002d72:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002d76:	200a      	movs	r0, #10
 8002d78:	f000 ff86 	bl	8003c88 <DrawString>
                DrawString(10, 280, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	2300      	movs	r3, #0
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d88:	4abe      	ldr	r2, [pc, #760]	@ (8003084 <game_state_machine+0xd08>)
 8002d8a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002d8e:	200a      	movs	r0, #10
 8002d90:	f000 ff7a 	bl	8003c88 <DrawString>
                Reset_Button_State(); // Reset button state for new selection
 8002d94:	f001 fed2 	bl	8004b3c <Reset_Button_State>
                currentState = SELECT_ACTION; // Return to action selection
 8002d98:	4bbb      	ldr	r3, [pc, #748]	@ (8003088 <game_state_machine+0xd0c>)
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	701a      	strb	r2, [r3, #0]
            break;
 8002d9e:	e2e1      	b.n	8003364 <game_state_machine+0xfe8>




        case CAPTURE: {
            uart_send_string("Capture initiated! Apply pressure to capture the Pokemon.\n\r");
 8002da0:	48ba      	ldr	r0, [pc, #744]	@ (800308c <game_state_machine+0xd10>)
 8002da2:	f002 fa67 	bl	8005274 <uart_send_string>
            char buffer_line1[50];
            char buffer_line2[50];
            char buffer[50];
            uint32_t low_threshold, high_threshold;

            if (pokemon_health_percentage > 75) {
 8002da6:	4bba      	ldr	r3, [pc, #744]	@ (8003090 <game_state_machine+0xd14>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b4b      	cmp	r3, #75	@ 0x4b
 8002dac:	dd13      	ble.n	8002dd6 <game_state_machine+0xa5a>
                low_threshold = 700;
 8002dae:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002db2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 1000;
 8002db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is healthy.");
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	49b4      	ldr	r1, [pc, #720]	@ (8003094 <game_state_machine+0xd18>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f00a fc9c 	bl	800d700 <siprintf>
                sprintf(buffer_line2, "Capturing is tough!");
 8002dc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dcc:	49b2      	ldr	r1, [pc, #712]	@ (8003098 <game_state_machine+0xd1c>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f00a fc96 	bl	800d700 <siprintf>
 8002dd4:	e029      	b.n	8002e2a <game_state_machine+0xaae>
            } else if (pokemon_health_percentage > 40) {
 8002dd6:	4bae      	ldr	r3, [pc, #696]	@ (8003090 <game_state_machine+0xd14>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b28      	cmp	r3, #40	@ 0x28
 8002ddc:	dd13      	ble.n	8002e06 <game_state_machine+0xa8a>
                low_threshold = 500;
 8002dde:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002de2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 1000;
 8002de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is weakening.");
 8002dee:	463b      	mov	r3, r7
 8002df0:	49aa      	ldr	r1, [pc, #680]	@ (800309c <game_state_machine+0xd20>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00a fc84 	bl	800d700 <siprintf>
                sprintf(buffer_line2, "Capturing is easier.");
 8002df8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dfc:	49a8      	ldr	r1, [pc, #672]	@ (80030a0 <game_state_machine+0xd24>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f00a fc7e 	bl	800d700 <siprintf>
 8002e04:	e011      	b.n	8002e2a <game_state_machine+0xaae>
            } else {
                low_threshold = 200;
 8002e06:	23c8      	movs	r3, #200	@ 0xc8
 8002e08:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 1000;
 8002e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e10:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is very weak.");
 8002e14:	463b      	mov	r3, r7
 8002e16:	49a3      	ldr	r1, [pc, #652]	@ (80030a4 <game_state_machine+0xd28>)
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00a fc71 	bl	800d700 <siprintf>
                sprintf(buffer_line2, "Capturing is likely!");
 8002e1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e22:	49a1      	ldr	r1, [pc, #644]	@ (80030a8 <game_state_machine+0xd2c>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00a fc6b 	bl	800d700 <siprintf>
            }

            // Display the divided lines on the LCD
            DrawString(10, 70, "Hint:", 0x07E0, 0x0000, 2); // Green text for "Hint:"
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e36:	4a9d      	ldr	r2, [pc, #628]	@ (80030ac <game_state_machine+0xd30>)
 8002e38:	2146      	movs	r1, #70	@ 0x46
 8002e3a:	200a      	movs	r0, #10
 8002e3c:	f000 ff24 	bl	8003c88 <DrawString>
            DrawString(10, 100, buffer_line1, 0xFFFF, 0x0000, 1); // First line of the hint
 8002e40:	463a      	mov	r2, r7
 8002e42:	2301      	movs	r3, #1
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e4e:	2164      	movs	r1, #100	@ 0x64
 8002e50:	200a      	movs	r0, #10
 8002e52:	f000 ff19 	bl	8003c88 <DrawString>
            DrawString(10, 120, buffer_line2, 0xFFFF, 0x0000, 1); // Second line of the hint
 8002e56:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e66:	2178      	movs	r1, #120	@ 0x78
 8002e68:	200a      	movs	r0, #10
 8002e6a:	f000 ff0d 	bl	8003c88 <DrawString>

            // Countdown before applying pressure
            for (int countdown = 3; countdown > 0; countdown--) {
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e74:	e025      	b.n	8002ec2 <game_state_machine+0xb46>
                // Clear only the countdown number area
                ILI9341_FillRect(10, 150, 300, 50, 0x0000); // Clear countdown area
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2332      	movs	r3, #50	@ 0x32
 8002e7c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e80:	2196      	movs	r1, #150	@ 0x96
 8002e82:	200a      	movs	r0, #10
 8002e84:	f000 ff30 	bl	8003ce8 <ILI9341_FillRect>

                // Display the countdown number
                sprintf(buffer, "Press in: %d", countdown);
 8002e88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e8c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8002e90:	4987      	ldr	r1, [pc, #540]	@ (80030b0 <game_state_machine+0xd34>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f00a fc34 	bl	800d700 <siprintf>
                DrawString(10, 150, buffer, 0xFFFF, 0x0000, 2); // White text for countdown
 8002e98:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea8:	2196      	movs	r1, #150	@ 0x96
 8002eaa:	200a      	movs	r0, #10
 8002eac:	f000 feec 	bl	8003c88 <DrawString>

                HAL_Delay(1000); // 1-second delay
 8002eb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002eb4:	f002 fa9a 	bl	80053ec <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 8002eb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ec2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dcd5      	bgt.n	8002e76 <game_state_machine+0xafa>
            }

            // Prompt user to apply pressure
            uart_send_string("Apply pressure now for 2 seconds...\n\r");
 8002eca:	487a      	ldr	r0, [pc, #488]	@ (80030b4 <game_state_machine+0xd38>)
 8002ecc:	f002 f9d2 	bl	8005274 <uart_send_string>
            DrawString(10, 150, "Apply pressure now!", 0xFFFF, 0x0000, 2); // White text
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002edc:	4a76      	ldr	r2, [pc, #472]	@ (80030b8 <game_state_machine+0xd3c>)
 8002ede:	2196      	movs	r1, #150	@ 0x96
 8002ee0:	200a      	movs	r0, #10
 8002ee2:	f000 fed1 	bl	8003c88 <DrawString>

            // Measure pressure over 2 seconds with progress bar
            uint32_t start_time = HAL_GetTick();
 8002ee6:	f002 fa75 	bl	80053d4 <HAL_GetTick>
 8002eea:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
            uint32_t total_pressure = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            uint32_t sample_count = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

            uint16_t progress_x = 10;
 8002efa:	230a      	movs	r3, #10
 8002efc:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
            uint16_t progress_y = 200;
 8002f00:	23c8      	movs	r3, #200	@ 0xc8
 8002f02:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
            uint16_t progress_width = 300;
 8002f06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002f0a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            uint16_t progress_height = 20;
 8002f0e:	2314      	movs	r3, #20
 8002f10:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
            uint16_t progress_color = 0x07E0; // Green
 8002f14:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f18:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122

            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002f1c:	e041      	b.n	8002fa2 <game_state_machine+0xc26>
                ADC_Read(); // Update global adcValue
 8002f1e:	f000 fae1 	bl	80034e4 <ADC_Read>
                total_pressure += adcValue;
 8002f22:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <game_state_machine+0xd40>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002f2e:	4413      	add	r3, r2
 8002f30:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
                sample_count++;
 8002f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

                // Update progress bar
                uint32_t elapsed_time = HAL_GetTick() - start_time;
 8002f3e:	f002 fa49 	bl	80053d4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                uint16_t progress_fill = (elapsed_time * progress_width) / 2000; // Proportional fill
 8002f4e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002f52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <game_state_machine+0xd44>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	09db      	lsrs	r3, r3, #7
 8002f62:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
                ILI9341_DrawRect(progress_x, progress_y, progress_width, progress_height, 0xFFFF); // Outline
 8002f66:	f8b7 012a 	ldrh.w	r0, [r7, #298]	@ 0x12a
 8002f6a:	f8b7 1128 	ldrh.w	r1, [r7, #296]	@ 0x128
 8002f6e:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8002f72:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002f76:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002f7a:	9400      	str	r4, [sp, #0]
 8002f7c:	f000 ff88 	bl	8003e90 <ILI9341_DrawRect>
                ILI9341_FillRect(progress_x, progress_y, progress_fill, progress_height, progress_color); // Fill
 8002f80:	f8b7 4124 	ldrh.w	r4, [r7, #292]	@ 0x124
 8002f84:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8002f88:	f8b7 1128 	ldrh.w	r1, [r7, #296]	@ 0x128
 8002f8c:	f8b7 012a 	ldrh.w	r0, [r7, #298]	@ 0x12a
 8002f90:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4623      	mov	r3, r4
 8002f98:	f000 fea6 	bl	8003ce8 <ILI9341_FillRect>

                HAL_Delay(100); // Sampling delay
 8002f9c:	2064      	movs	r0, #100	@ 0x64
 8002f9e:	f002 fa25 	bl	80053ec <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002fa2:	f002 fa17 	bl	80053d4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fb2:	d3b4      	bcc.n	8002f1e <game_state_machine+0xba2>
            }

            // Calculate average pressure
            uint32_t avg_pressure = total_pressure / sample_count;
 8002fb4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8002fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            // Display results
            ILI9341_FillScreen(0x0000);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f000 fc5d 	bl	8003884 <ILI9341_FillScreen>
            DrawString(10, 10, "Capture Results:", 0xFFFF, 0x001F, 2);
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	231f      	movs	r3, #31
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80030c4 <game_state_machine+0xd48>)
 8002fd8:	210a      	movs	r1, #10
 8002fda:	200a      	movs	r0, #10
 8002fdc:	f000 fe54 	bl	8003c88 <DrawString>

            if (avg_pressure > low_threshold && avg_pressure < high_threshold) {
 8002fe0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002fe4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d973      	bls.n	80030d4 <game_state_machine+0xd58>
 8002fec:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ff0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d26d      	bcs.n	80030d4 <game_state_machine+0xd58>
                // Success message
                sprintf(buffer, "Success!");
 8002ff8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ffc:	4932      	ldr	r1, [pc, #200]	@ (80030c8 <game_state_machine+0xd4c>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f00a fb7e 	bl	800d700 <siprintf>
                DrawString(10, 50, buffer, 0x07E0, 0x0000, 2); // Green text for success
 8003004:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003008:	2302      	movs	r3, #2
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2300      	movs	r3, #0
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003014:	2132      	movs	r1, #50	@ 0x32
 8003016:	200a      	movs	r0, #10
 8003018:	f000 fe36 	bl	8003c88 <DrawString>
                sprintf(buffer, "Pokemon captured!");
 800301c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003020:	492a      	ldr	r1, [pc, #168]	@ (80030cc <game_state_machine+0xd50>)
 8003022:	4618      	mov	r0, r3
 8003024:	f00a fb6c 	bl	800d700 <siprintf>
                DrawString(10, 80, buffer, 0x07E0, 0x0000, 2); // Green text for second line
 8003028:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800302c:	2302      	movs	r3, #2
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003038:	2150      	movs	r1, #80	@ 0x50
 800303a:	200a      	movs	r0, #10
 800303c:	f000 fe24 	bl	8003c88 <DrawString>
                sprintf(buffer, "Pressure: %lu", avg_pressure);
 8003040:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003044:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003048:	4921      	ldr	r1, [pc, #132]	@ (80030d0 <game_state_machine+0xd54>)
 800304a:	4618      	mov	r0, r3
 800304c:	f00a fb58 	bl	800d700 <siprintf>
                DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for pressure value
 8003050:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003054:	2302      	movs	r3, #2
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003060:	2178      	movs	r1, #120	@ 0x78
 8003062:	200a      	movs	r0, #10
 8003064:	f000 fe10 	bl	8003c88 <DrawString>

                HAL_Delay(2000); // Pause for user to view results
 8003068:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800306c:	f002 f9be 	bl	80053ec <HAL_Delay>
                currentState = POST_BATTLE; // Transition to POST_BATTLE
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <game_state_machine+0xd0c>)
 8003072:	2206      	movs	r2, #6
 8003074:	701a      	strb	r2, [r3, #0]
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
                Reset_Button_State(); // Reset button state
                currentState = SELECT_ACTION; // Return to action selection
            }
            break;
 8003076:	e175      	b.n	8003364 <game_state_machine+0xfe8>
 8003078:	0801014c 	.word	0x0801014c
 800307c:	08010170 	.word	0x08010170
 8003080:	0800ff58 	.word	0x0800ff58
 8003084:	0800ff68 	.word	0x0800ff68
 8003088:	2000128c 	.word	0x2000128c
 800308c:	08010180 	.word	0x08010180
 8003090:	20000004 	.word	0x20000004
 8003094:	080101bc 	.word	0x080101bc
 8003098:	080101d4 	.word	0x080101d4
 800309c:	080101e8 	.word	0x080101e8
 80030a0:	08010204 	.word	0x08010204
 80030a4:	0801021c 	.word	0x0801021c
 80030a8:	08010238 	.word	0x08010238
 80030ac:	08010250 	.word	0x08010250
 80030b0:	08010258 	.word	0x08010258
 80030b4:	08010268 	.word	0x08010268
 80030b8:	08010290 	.word	0x08010290
 80030bc:	200012d2 	.word	0x200012d2
 80030c0:	10624dd3 	.word	0x10624dd3
 80030c4:	080102a4 	.word	0x080102a4
 80030c8:	080102b8 	.word	0x080102b8
 80030cc:	080102c4 	.word	0x080102c4
 80030d0:	080102d8 	.word	0x080102d8
                sprintf(buffer, "Failed!");
 80030d4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030d8:	49a5      	ldr	r1, [pc, #660]	@ (8003370 <game_state_machine+0xff4>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f00a fb10 	bl	800d700 <siprintf>
                DrawString(10, 50, buffer, 0xF800, 0x0000, 2); // Red text for failure
 80030e0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80030e4:	2302      	movs	r3, #2
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030f0:	2132      	movs	r1, #50	@ 0x32
 80030f2:	200a      	movs	r0, #10
 80030f4:	f000 fdc8 	bl	8003c88 <DrawString>
                sprintf(buffer, "Pokemon broke out!");
 80030f8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030fc:	499d      	ldr	r1, [pc, #628]	@ (8003374 <game_state_machine+0xff8>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f00a fafe 	bl	800d700 <siprintf>
                DrawString(10, 80, buffer, 0xF800, 0x0000, 2); // Red text for second line
 8003104:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003108:	2302      	movs	r3, #2
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	2300      	movs	r3, #0
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003114:	2150      	movs	r1, #80	@ 0x50
 8003116:	200a      	movs	r0, #10
 8003118:	f000 fdb6 	bl	8003c88 <DrawString>
                sprintf(buffer, "Pressure: %lu", avg_pressure);
 800311c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003120:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003124:	4994      	ldr	r1, [pc, #592]	@ (8003378 <game_state_machine+0xffc>)
 8003126:	4618      	mov	r0, r3
 8003128:	f00a faea 	bl	800d700 <siprintf>
                DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for pressure value
 800312c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003130:	2302      	movs	r3, #2
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2300      	movs	r3, #0
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800313c:	2178      	movs	r1, #120	@ 0x78
 800313e:	200a      	movs	r0, #10
 8003140:	f000 fda2 	bl	8003c88 <DrawString>
                HAL_Delay(2000); // Pause for user to view results
 8003144:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003148:	f002 f950 	bl	80053ec <HAL_Delay>
                ILI9341_FillScreen(0x0000); // Clear screen
 800314c:	2000      	movs	r0, #0
 800314e:	f000 fb99 	bl	8003884 <ILI9341_FillScreen>
                DrawString(10, 30, "Select Action:", 0x07E0, 0x0000, 2); // Green text
 8003152:	2302      	movs	r3, #2
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800315e:	4a87      	ldr	r2, [pc, #540]	@ (800337c <game_state_machine+0x1000>)
 8003160:	211e      	movs	r1, #30
 8003162:	200a      	movs	r0, #10
 8003164:	f000 fd90 	bl	8003c88 <DrawString>
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
 8003168:	2303      	movs	r3, #3
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	2300      	movs	r3, #0
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003174:	4a82      	ldr	r2, [pc, #520]	@ (8003380 <game_state_machine+0x1004>)
 8003176:	215a      	movs	r1, #90	@ 0x5a
 8003178:	200a      	movs	r0, #10
 800317a:	f000 fd85 	bl	8003c88 <DrawString>
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
 800317e:	2303      	movs	r3, #3
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800318a:	4a7e      	ldr	r2, [pc, #504]	@ (8003384 <game_state_machine+0x1008>)
 800318c:	2178      	movs	r1, #120	@ 0x78
 800318e:	200a      	movs	r0, #10
 8003190:	f000 fd7a 	bl	8003c88 <DrawString>
                Reset_Button_State(); // Reset button state
 8003194:	f001 fcd2 	bl	8004b3c <Reset_Button_State>
                currentState = SELECT_ACTION; // Return to action selection
 8003198:	4b7b      	ldr	r3, [pc, #492]	@ (8003388 <game_state_machine+0x100c>)
 800319a:	2203      	movs	r2, #3
 800319c:	701a      	strb	r2, [r3, #0]
            break;
 800319e:	e0e1      	b.n	8003364 <game_state_machine+0xfe8>
        }

        case POST_BATTLE: {
            // Clear the screen
        	ILI9341_FillScreen(0x0000);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f000 fb6f 	bl	8003884 <ILI9341_FillScreen>

        	    if (pokemon_health_percentage <= 0) {
 80031a6:	4b79      	ldr	r3, [pc, #484]	@ (800338c <game_state_machine+0x1010>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	dc1f      	bgt.n	80031ee <game_state_machine+0xe72>
        	        DrawString(70, 100, "Pokemon", 0xF800, 0x0000, 3); // Display "Fainted" message in red
 80031ae:	2303      	movs	r3, #3
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031ba:	4a75      	ldr	r2, [pc, #468]	@ (8003390 <game_state_machine+0x1014>)
 80031bc:	2164      	movs	r1, #100	@ 0x64
 80031be:	2046      	movs	r0, #70	@ 0x46
 80031c0:	f000 fd62 	bl	8003c88 <DrawString>
        	        DrawString(70, 150, "Fainted!", 0xF800, 0x0000, 3); // Display "Fainted" message in red
 80031c4:	2303      	movs	r3, #3
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031d0:	4a70      	ldr	r2, [pc, #448]	@ (8003394 <game_state_machine+0x1018>)
 80031d2:	2196      	movs	r1, #150	@ 0x96
 80031d4:	2046      	movs	r0, #70	@ 0x46
 80031d6:	f000 fd57 	bl	8003c88 <DrawString>
        	        HAL_Delay(3000);
 80031da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80031de:	f002 f905 	bl	80053ec <HAL_Delay>
        	        reset_health_leds();
 80031e2:	f001 fc27 	bl	8004a34 <reset_health_leds>
        	        currentState = NEXT;
 80031e6:	4b68      	ldr	r3, [pc, #416]	@ (8003388 <game_state_machine+0x100c>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e0ab      	b.n	8003346 <game_state_machine+0xfca>

            // Calculate centered x-coordinates for the text
            int text_x;

            // Display Pokemon Name
            text_x = 60 - (strlen(current_pokemon) * 6); // Center Pokémon name horizontally (120 is half of 240 width)
 80031ee:	486a      	ldr	r0, [pc, #424]	@ (8003398 <game_state_machine+0x101c>)
 80031f0:	f7fd f856 	bl	80002a0 <strlen>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8003202:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            DrawString(text_x, 40, current_pokemon, 0xFFFF, 0x0000, 3); // White text for Pokémon name
 8003206:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800320a:	b298      	uxth	r0, r3
 800320c:	2303      	movs	r3, #3
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003218:	4a5f      	ldr	r2, [pc, #380]	@ (8003398 <game_state_machine+0x101c>)
 800321a:	2128      	movs	r1, #40	@ 0x28
 800321c:	f000 fd34 	bl	8003c88 <DrawString>

            // Display "Captured!"
            const char *captured_message = "Captured!";
 8003220:	4b5e      	ldr	r3, [pc, #376]	@ (800339c <game_state_machine+0x1020>)
 8003222:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
          text_x = 90 - (strlen(captured_message) * 6); // Center "Captured!" horizontally
 8003226:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800322a:	f7fd f839 	bl	80002a0 <strlen>
 800322e:	4602      	mov	r2, r0
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800323c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            DrawString(text_x, 70, captured_message, 0x07E0, 0x0000, 3); // Green text for "Captured!"
 8003240:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003244:	b298      	uxth	r0, r3
 8003246:	2303      	movs	r3, #3
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003252:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8003256:	2146      	movs	r1, #70	@ 0x46
 8003258:	f000 fd16 	bl	8003c88 <DrawString>

            // Confetti Animation with larger pixels
            for (int i = 0; i < 30; i++) { // Number of confetti iterations
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003262:	e054      	b.n	800330e <game_state_machine+0xf92>
                for (int j = 0; j < 10; j++) { // Number of confetti per iteration
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800326a:	e044      	b.n	80032f6 <game_state_machine+0xf7a>
                    int x = rand() % 235; // Random x-coordinate (ensure rectangle fits within screen width)
 800326c:	f009 fc80 	bl	800cb70 <rand>
 8003270:	4603      	mov	r3, r0
 8003272:	4a4b      	ldr	r2, [pc, #300]	@ (80033a0 <game_state_machine+0x1024>)
 8003274:	fb82 1203 	smull	r1, r2, r2, r3
 8003278:	441a      	add	r2, r3
 800327a:	11d1      	asrs	r1, r2, #7
 800327c:	17da      	asrs	r2, r3, #31
 800327e:	1a8a      	subs	r2, r1, r2
 8003280:	21eb      	movs	r1, #235	@ 0xeb
 8003282:	fb01 f202 	mul.w	r2, r1, r2
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                    int y = rand() % 315; // Random y-coordinate (ensure rectangle fits within screen height)
 800328c:	f009 fc70 	bl	800cb70 <rand>
 8003290:	4602      	mov	r2, r0
 8003292:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <game_state_machine+0x1028>)
 8003294:	fb83 1302 	smull	r1, r3, r3, r2
 8003298:	4413      	add	r3, r2
 800329a:	1219      	asrs	r1, r3, #8
 800329c:	17d3      	asrs	r3, r2, #31
 800329e:	1ac9      	subs	r1, r1, r3
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0199      	lsls	r1, r3, #6
 80032a8:	1ac9      	subs	r1, r1, r3
 80032aa:	1a53      	subs	r3, r2, r1
 80032ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    uint16_t color = rand() % 0xFFFF; // Random color
 80032b0:	f009 fc5e 	bl	800cb70 <rand>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b3c      	ldr	r3, [pc, #240]	@ (80033a8 <game_state_machine+0x102c>)
 80032b8:	fb83 1302 	smull	r1, r3, r3, r2
 80032bc:	4413      	add	r3, r2
 80032be:	13d9      	asrs	r1, r3, #15
 80032c0:	17d3      	asrs	r3, r2, #31
 80032c2:	1ac9      	subs	r1, r1, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	1a5b      	subs	r3, r3, r1
 80032ca:	1ad1      	subs	r1, r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132

                    // Draw a small rectangle as confetti
                    ILI9341_FillRect(x, y, 5, 5, color); // Rectangle of size 5x5
 80032d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80032d6:	b298      	uxth	r0, r3
 80032d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032dc:	b299      	uxth	r1, r3
 80032de:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2305      	movs	r3, #5
 80032e6:	2205      	movs	r2, #5
 80032e8:	f000 fcfe 	bl	8003ce8 <ILI9341_FillRect>
                for (int j = 0; j < 10; j++) { // Number of confetti per iteration
 80032ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80032f0:	3301      	adds	r3, #1
 80032f2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80032f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	ddb6      	ble.n	800326c <game_state_machine+0xef0>
                }
                HAL_Delay(50); // Small delay to simulate animation
 80032fe:	2032      	movs	r0, #50	@ 0x32
 8003300:	f002 f874 	bl	80053ec <HAL_Delay>
            for (int i = 0; i < 30; i++) { // Number of confetti iterations
 8003304:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003308:	3301      	adds	r3, #1
 800330a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800330e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003312:	2b1d      	cmp	r3, #29
 8003314:	dda6      	ble.n	8003264 <game_state_machine+0xee8>
            }
            // Wait for 3 seconds to allow user to view the message
            HAL_Delay(1000);
 8003316:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800331a:	f002 f867 	bl	80053ec <HAL_Delay>

            ILI9341_FillScreen(0x0000); // Clear the screen
 800331e:	2000      	movs	r0, #0
 8003320:	f000 fab0 	bl	8003884 <ILI9341_FillScreen>
            DisplayPokemonImage(current_pokemon); // Custom function to display the image of the captured Pokémons
 8003324:	481c      	ldr	r0, [pc, #112]	@ (8003398 <game_state_machine+0x101c>)
 8003326:	f000 fe4f 	bl	8003fc8 <DisplayPokemonImage>
            HAL_Delay(1500);
 800332a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800332e:	f002 f85d 	bl	80053ec <HAL_Delay>
            // Transition back to IDLE state
            ILI9341_FillScreen(0x0000); // Clear the screen
 8003332:	2000      	movs	r0, #0
 8003334:	f000 faa6 	bl	8003884 <ILI9341_FillScreen>
            uart_send_string("Returning to the forest\n\r");
 8003338:	481c      	ldr	r0, [pc, #112]	@ (80033ac <game_state_machine+0x1030>)
 800333a:	f001 ff9b 	bl	8005274 <uart_send_string>
            currentState = NEXT; // Set the state to IDLE
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <game_state_machine+0x100c>)
 8003340:	2207      	movs	r2, #7
 8003342:	701a      	strb	r2, [r3, #0]
            break;
 8003344:	e00e      	b.n	8003364 <game_state_machine+0xfe8>
        }
        case NEXT:{
        	process_SD_card("view.bmp");
 8003346:	481a      	ldr	r0, [pc, #104]	@ (80033b0 <game_state_machine+0x1034>)
 8003348:	f7fe fc42 	bl	8001bd0 <process_SD_card>
        	welcome_message_displayed=true;
 800334c:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <game_state_machine+0x1038>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
        	reset_health_leds();
 8003352:	f001 fb6f 	bl	8004a34 <reset_health_leds>
        	currentState = IDLE; // Set the state to IDLE
 8003356:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <game_state_machine+0x100c>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
        	            break;
 800335c:	e002      	b.n	8003364 <game_state_machine+0xfe8>
        break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <game_state_machine+0xfe8>
            break;
 8003362:	bf00      	nop
        }


           }
	}
}
 8003364:	bf00      	nop
 8003366:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	080102e8 	.word	0x080102e8
 8003374:	080102f0 	.word	0x080102f0
 8003378:	080102d8 	.word	0x080102d8
 800337c:	08010170 	.word	0x08010170
 8003380:	08010304 	.word	0x08010304
 8003384:	0801030c 	.word	0x0801030c
 8003388:	2000128c 	.word	0x2000128c
 800338c:	20000004 	.word	0x20000004
 8003390:	08010318 	.word	0x08010318
 8003394:	08010320 	.word	0x08010320
 8003398:	200012a0 	.word	0x200012a0
 800339c:	0801032c 	.word	0x0801032c
 80033a0:	8b70344b 	.word	0x8b70344b
 80033a4:	d00d00d1 	.word	0xd00d00d1
 80033a8:	80008001 	.word	0x80008001
 80033ac:	08010338 	.word	0x08010338
 80033b0:	08010354 	.word	0x08010354
 80033b4:	20001294 	.word	0x20001294

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	@ (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <Pressure_sensor_Init>:

// Global variables
volatile uint16_t adcValue = 0; // ADC result
volatile uint8_t adcConversionComplete = 0; // Flag to indicate conversion complete

void Pressure_sensor_Init(void) {
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <Pressure_sensor_Init+0x34>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <Pressure_sensor_Init+0x34>)
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB1 as analog
    GPIOB->MODER |= (3U << (1 * 2));  // 2 bits per pin, set to 11 (Analog mode)
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <Pressure_sensor_Init+0x38>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a08      	ldr	r2, [pc, #32]	@ (800342c <Pressure_sensor_Init+0x38>)
 800340a:	f043 030c 	orr.w	r3, r3, #12
 800340e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3U << (1 * 2)); // No pull-up/pull-down
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <Pressure_sensor_Init+0x38>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a05      	ldr	r2, [pc, #20]	@ (800342c <Pressure_sensor_Init+0x38>)
 8003416:	f023 030c 	bic.w	r3, r3, #12
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40020400 	.word	0x40020400

08003430 <ADC_Config>:

void ADC_Config(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8003434:	4b17      	ldr	r3, [pc, #92]	@ (8003494 <ADC_Config+0x64>)
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	4a16      	ldr	r2, [pc, #88]	@ (8003494 <ADC_Config+0x64>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343e:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set ADC prescaler to PCLK2/4
    ADC->CCR |= (1U << 16); // Bits 17:16 = 01 for PCLK2/4
 8003440:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <ADC_Config+0x68>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <ADC_Config+0x68>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Reset CR2
 800344c:	4b13      	ldr	r3, [pc, #76]	@ (800349c <ADC_Config+0x6c>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
    ADC1->CR2 |= ADC_CR2_ADON;         // Enable ADC
 8003452:	4b12      	ldr	r3, [pc, #72]	@ (800349c <ADC_Config+0x6c>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4a11      	ldr	r2, [pc, #68]	@ (800349c <ADC_Config+0x6c>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;        // Enable EOC interrupt
 800345e:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <ADC_Config+0x6c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a0e      	ldr	r2, [pc, #56]	@ (800349c <ADC_Config+0x6c>)
 8003464:	f043 0320 	orr.w	r3, r3, #32
 8003468:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_RES;         // 12-bit resolution
 800346a:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <ADC_Config+0x6c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a0b      	ldr	r2, [pc, #44]	@ (800349c <ADC_Config+0x6c>)
 8003470:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003474:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (3U << (3 * 9));    // Sampling time 56 cycles for channel 9
 8003476:	4b09      	ldr	r3, [pc, #36]	@ (800349c <ADC_Config+0x6c>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4a08      	ldr	r2, [pc, #32]	@ (800349c <ADC_Config+0x6c>)
 800347c:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8003480:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 9;                    // Set channel 9 (PB1)
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <ADC_Config+0x6c>)
 8003484:	2209      	movs	r2, #9
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8003488:	2012      	movs	r0, #18
 800348a:	f7ff ff95 	bl	80033b8 <__NVIC_EnableIRQ>
    //NVIC_SetPriority(ADC_IRQn, 1);
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40012300 	.word	0x40012300
 800349c:	40012000 	.word	0x40012000

080034a0 <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 80034a4:	bf00      	nop
 80034a6:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <ADC_IRQHandler+0x38>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f9      	beq.n	80034a6 <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <ADC_IRQHandler+0x38>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <ADC_IRQHandler+0x3c>)
 80034ba:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <ADC_IRQHandler+0x40>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <ADC_IRQHandler+0x38>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <ADC_IRQHandler+0x38>)
 80034c8:	f023 0302 	bic.w	r3, r3, #2
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012000 	.word	0x40012000
 80034dc:	200012d2 	.word	0x200012d2
 80034e0:	200012d4 	.word	0x200012d4

080034e4 <ADC_Read>:

void ADC_Read(void) {
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <ADC_Read+0x1c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <ADC_Read+0x1c>)
 80034ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034f2:	6093      	str	r3, [r2, #8]
    // Wait for conversion to complete
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012000 	.word	0x40012000

08003504 <MPU_init>:
    NVIC_SetPriority(EXTI9_5_IRQn, 2); // Set priority level
    NVIC_EnableIRQ(EXTI9_5_IRQn);      // Enable EXTI9_5 interrupt
}

void MPU_init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af04      	add	r7, sp, #16
HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEV_ADD <<1)+0, 1, 100);
 800350a:	2364      	movs	r3, #100	@ 0x64
 800350c:	2201      	movs	r2, #1
 800350e:	21d0      	movs	r1, #208	@ 0xd0
 8003510:	4830      	ldr	r0, [pc, #192]	@ (80035d4 <MPU_init+0xd0>)
 8003512:	f003 fa5b 	bl	80069cc <HAL_I2C_IsDeviceReady>
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <MPU_init+0x24>
  {
	  uart_send_string("ready\n\r");
 8003520:	482d      	ldr	r0, [pc, #180]	@ (80035d8 <MPU_init+0xd4>)
 8003522:	f001 fea7 	bl	8005274 <uart_send_string>
 8003526:	e002      	b.n	800352e <MPU_init+0x2a>
  }
  else
	  uart_send_string("not ready\n\r");
 8003528:	482c      	ldr	r0, [pc, #176]	@ (80035dc <MPU_init+0xd8>)
 800352a:	f001 fea3 	bl	8005274 <uart_send_string>
  /* USER CODE END 2 */
  uint8_t temp_data = FS_GYRO_500;
 800352e:	2308      	movs	r3, #8
 8003530:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8003532:	2364      	movs	r3, #100	@ 0x64
 8003534:	9302      	str	r3, [sp, #8]
 8003536:	2301      	movs	r3, #1
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2301      	movs	r3, #1
 8003540:	221b      	movs	r2, #27
 8003542:	21d0      	movs	r1, #208	@ 0xd0
 8003544:	4823      	ldr	r0, [pc, #140]	@ (80035d4 <MPU_init+0xd0>)
 8003546:	f002 ff15 	bl	8006374 <HAL_I2C_Mem_Write>
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <MPU_init+0x58>
  {
	  uart_send_string("config gyro\n\r");
 8003554:	4822      	ldr	r0, [pc, #136]	@ (80035e0 <MPU_init+0xdc>)
 8003556:	f001 fe8d 	bl	8005274 <uart_send_string>
 800355a:	e002      	b.n	8003562 <MPU_init+0x5e>
  }
  else
	  uart_send_string("not ready\n\r");
 800355c:	481f      	ldr	r0, [pc, #124]	@ (80035dc <MPU_init+0xd8>)
 800355e:	f001 fe89 	bl	8005274 <uart_send_string>

temp_data = FS_ACC_4G;
 8003562:	2308      	movs	r3, #8
 8003564:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8003566:	2364      	movs	r3, #100	@ 0x64
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	2301      	movs	r3, #1
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2301      	movs	r3, #1
 8003574:	221c      	movs	r2, #28
 8003576:	21d0      	movs	r1, #208	@ 0xd0
 8003578:	4816      	ldr	r0, [pc, #88]	@ (80035d4 <MPU_init+0xd0>)
 800357a:	f002 fefb 	bl	8006374 <HAL_I2C_Mem_Write>
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <MPU_init+0x8c>
  {
	  uart_send_string("config acc\n\r");
 8003588:	4816      	ldr	r0, [pc, #88]	@ (80035e4 <MPU_init+0xe0>)
 800358a:	f001 fe73 	bl	8005274 <uart_send_string>
 800358e:	e002      	b.n	8003596 <MPU_init+0x92>
  }
  else
	  uart_send_string("not ready\n\r");
 8003590:	4812      	ldr	r0, [pc, #72]	@ (80035dc <MPU_init+0xd8>)
 8003592:	f001 fe6f 	bl	8005274 <uart_send_string>

temp_data = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 800359a:	2364      	movs	r3, #100	@ 0x64
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	2301      	movs	r3, #1
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	1dbb      	adds	r3, r7, #6
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	226b      	movs	r2, #107	@ 0x6b
 80035aa:	21d0      	movs	r1, #208	@ 0xd0
 80035ac:	4809      	ldr	r0, [pc, #36]	@ (80035d4 <MPU_init+0xd0>)
 80035ae:	f002 fee1 	bl	8006374 <HAL_I2C_Mem_Write>
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <MPU_init+0xc0>
  {
	  uart_send_string("exit sleep and enable interrupt\n\r");
 80035bc:	480a      	ldr	r0, [pc, #40]	@ (80035e8 <MPU_init+0xe4>)
 80035be:	f001 fe59 	bl	8005274 <uart_send_string>
  }
  else
	  uart_send_string("not ready\n\r");

}
 80035c2:	e002      	b.n	80035ca <MPU_init+0xc6>
	  uart_send_string("not ready\n\r");
 80035c4:	4805      	ldr	r0, [pc, #20]	@ (80035dc <MPU_init+0xd8>)
 80035c6:	f001 fe55 	bl	8005274 <uart_send_string>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200012d8 	.word	0x200012d8
 80035d8:	08010360 	.word	0x08010360
 80035dc:	08010368 	.word	0x08010368
 80035e0:	08010374 	.word	0x08010374
 80035e4:	08010384 	.word	0x08010384
 80035e8:	08010394 	.word	0x08010394

080035ec <MPU_read>:

int16_t read_axis_data(uint8_t high_byte, uint8_t low_byte) {
    return ((int16_t)high_byte << 8) | low_byte;
}

int32_t MPU_read() {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af04      	add	r7, sp, #16
    uint8_t data[2];
    int16_t x_acc;

    // Read 2 bytes of accelerometer data (X-axis only)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (DEV_ADD << 1), REG_DATA, 1, data, 2, 100);
 80035f2:	2364      	movs	r3, #100	@ 0x64
 80035f4:	9302      	str	r3, [sp, #8]
 80035f6:	2302      	movs	r3, #2
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	463b      	mov	r3, r7
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2301      	movs	r3, #1
 8003600:	223b      	movs	r2, #59	@ 0x3b
 8003602:	21d0      	movs	r1, #208	@ 0xd0
 8003604:	480f      	ldr	r0, [pc, #60]	@ (8003644 <MPU_read+0x58>)
 8003606:	f002 ffaf 	bl	8006568 <HAL_I2C_Mem_Read>
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <MPU_read+0x34>
        uart_send_string("Error: Failed to read accelerometer data\n\r");
 8003614:	480c      	ldr	r0, [pc, #48]	@ (8003648 <MPU_read+0x5c>)
 8003616:	f001 fe2d 	bl	8005274 <uart_send_string>
        return -1; // Error reading data
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e00c      	b.n	800363a <MPU_read+0x4e>
    }

    // Combine high and low bytes for X-axis
    x_acc = ((int16_t)data[0] << 8) | data[1];
 8003620:	783b      	ldrb	r3, [r7, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	b21a      	sxth	r2, r3
 8003626:	787b      	ldrb	r3, [r7, #1]
 8003628:	b21b      	sxth	r3, r3
 800362a:	4313      	orrs	r3, r2
 800362c:	80bb      	strh	r3, [r7, #4]

    // Debug: Print raw X-axis value

    // Return the absolute value of X-axis acceleration
    return abs(x_acc);
 800362e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	425b      	neglt	r3, r3
 8003638:	b29b      	uxth	r3, r3
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200012d8 	.word	0x200012d8
 8003648:	080103b8 	.word	0x080103b8

0800364c <ILI9341_SendCommand>:
#define RST_HIGH()  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET)
#define SD_CS_PORT GPIOD
#define SD_CS_PIN GPIO_PIN_9

// Function to send a command
void ILI9341_SendCommand(uint8_t cmd) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8003656:	2200      	movs	r2, #0
 8003658:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800365c:	480c      	ldr	r0, [pc, #48]	@ (8003690 <ILI9341_SendCommand+0x44>)
 800365e:	f002 fd13 	bl	8006088 <HAL_GPIO_WritePin>
    DC_COMMAND();
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003668:	4809      	ldr	r0, [pc, #36]	@ (8003690 <ILI9341_SendCommand+0x44>)
 800366a:	f002 fd0d 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800366e:	1df9      	adds	r1, r7, #7
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	2201      	movs	r2, #1
 8003676:	4807      	ldr	r0, [pc, #28]	@ (8003694 <ILI9341_SendCommand+0x48>)
 8003678:	f004 fbab 	bl	8007dd2 <HAL_SPI_Transmit>
    CS_HIGH();
 800367c:	2201      	movs	r2, #1
 800367e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003682:	4803      	ldr	r0, [pc, #12]	@ (8003690 <ILI9341_SendCommand+0x44>)
 8003684:	f002 fd00 	bl	8006088 <HAL_GPIO_WritePin>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40020400 	.word	0x40020400
 8003694:	2000132c 	.word	0x2000132c

08003698 <ILI9341_SendData>:

// Function to send data
void ILI9341_SendData(uint8_t *data, uint16_t size) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
    CS_LOW();
 80036a4:	2200      	movs	r2, #0
 80036a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036aa:	480d      	ldr	r0, [pc, #52]	@ (80036e0 <ILI9341_SendData+0x48>)
 80036ac:	f002 fcec 	bl	8006088 <HAL_GPIO_WritePin>
    DC_DATA();
 80036b0:	2201      	movs	r2, #1
 80036b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036b6:	480a      	ldr	r0, [pc, #40]	@ (80036e0 <ILI9341_SendData+0x48>)
 80036b8:	f002 fce6 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 80036bc:	887a      	ldrh	r2, [r7, #2]
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4807      	ldr	r0, [pc, #28]	@ (80036e4 <ILI9341_SendData+0x4c>)
 80036c6:	f004 fb84 	bl	8007dd2 <HAL_SPI_Transmit>
    CS_HIGH();
 80036ca:	2201      	movs	r2, #1
 80036cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036d0:	4803      	ldr	r0, [pc, #12]	@ (80036e0 <ILI9341_SendData+0x48>)
 80036d2:	f002 fcd9 	bl	8006088 <HAL_GPIO_WritePin>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40020400 	.word	0x40020400
 80036e4:	2000132c 	.word	0x2000132c

080036e8 <ILI9341_Init>:
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
    CS_HIGH();
}

// Initialization sequence for ILI9341
void ILI9341_Init(void) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
    // Reset the display
    RST_LOW();
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	@ 0x80
 80036f2:	4863      	ldr	r0, [pc, #396]	@ (8003880 <ILI9341_Init+0x198>)
 80036f4:	f002 fcc8 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10ms delay
 80036f8:	200a      	movs	r0, #10
 80036fa:	f001 fe77 	bl	80053ec <HAL_Delay>
    RST_HIGH();
 80036fe:	2201      	movs	r2, #1
 8003700:	2180      	movs	r1, #128	@ 0x80
 8003702:	485f      	ldr	r0, [pc, #380]	@ (8003880 <ILI9341_Init+0x198>)
 8003704:	f002 fcc0 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_Delay(120); // 120ms delay after reset
 8003708:	2078      	movs	r0, #120	@ 0x78
 800370a:	f001 fe6f 	bl	80053ec <HAL_Delay>

    // Initialization commands based on the datasheet
    uint8_t data[15];

    // Power Control A
    ILI9341_SendCommand(0xCB);
 800370e:	20cb      	movs	r0, #203	@ 0xcb
 8003710:	f7ff ff9c 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x39; data[1] = 0x2C; data[2] = 0x00; data[3] = 0x34; data[4] = 0x02;
 8003714:	2339      	movs	r3, #57	@ 0x39
 8003716:	703b      	strb	r3, [r7, #0]
 8003718:	232c      	movs	r3, #44	@ 0x2c
 800371a:	707b      	strb	r3, [r7, #1]
 800371c:	2300      	movs	r3, #0
 800371e:	70bb      	strb	r3, [r7, #2]
 8003720:	2334      	movs	r3, #52	@ 0x34
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	2302      	movs	r3, #2
 8003726:	713b      	strb	r3, [r7, #4]
    ILI9341_SendData(data, 5);
 8003728:	463b      	mov	r3, r7
 800372a:	2105      	movs	r1, #5
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ffb3 	bl	8003698 <ILI9341_SendData>

    // Power Control B
    ILI9341_SendCommand(0xCF);
 8003732:	20cf      	movs	r0, #207	@ 0xcf
 8003734:	f7ff ff8a 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0xC1; data[2] = 0x30;
 8003738:	2300      	movs	r3, #0
 800373a:	703b      	strb	r3, [r7, #0]
 800373c:	23c1      	movs	r3, #193	@ 0xc1
 800373e:	707b      	strb	r3, [r7, #1]
 8003740:	2330      	movs	r3, #48	@ 0x30
 8003742:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8003744:	463b      	mov	r3, r7
 8003746:	2103      	movs	r1, #3
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ffa5 	bl	8003698 <ILI9341_SendData>

    // Driver Timing Control A
    ILI9341_SendCommand(0xE8);
 800374e:	20e8      	movs	r0, #232	@ 0xe8
 8003750:	f7ff ff7c 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x85; data[1] = 0x00; data[2] = 0x78;
 8003754:	2385      	movs	r3, #133	@ 0x85
 8003756:	703b      	strb	r3, [r7, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	707b      	strb	r3, [r7, #1]
 800375c:	2378      	movs	r3, #120	@ 0x78
 800375e:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8003760:	463b      	mov	r3, r7
 8003762:	2103      	movs	r1, #3
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff97 	bl	8003698 <ILI9341_SendData>

    // Driver Timing Control B
    ILI9341_SendCommand(0xEA);
 800376a:	20ea      	movs	r0, #234	@ 0xea
 800376c:	f7ff ff6e 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00;
 8003770:	2300      	movs	r3, #0
 8003772:	703b      	strb	r3, [r7, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8003778:	463b      	mov	r3, r7
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff8b 	bl	8003698 <ILI9341_SendData>

    // Power On Sequence Control
    ILI9341_SendCommand(0xED);
 8003782:	20ed      	movs	r0, #237	@ 0xed
 8003784:	f7ff ff62 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x64; data[1] = 0x03; data[2] = 0x12; data[3] = 0x81;
 8003788:	2364      	movs	r3, #100	@ 0x64
 800378a:	703b      	strb	r3, [r7, #0]
 800378c:	2303      	movs	r3, #3
 800378e:	707b      	strb	r3, [r7, #1]
 8003790:	2312      	movs	r3, #18
 8003792:	70bb      	strb	r3, [r7, #2]
 8003794:	2381      	movs	r3, #129	@ 0x81
 8003796:	70fb      	strb	r3, [r7, #3]
    ILI9341_SendData(data, 4);
 8003798:	463b      	mov	r3, r7
 800379a:	2104      	movs	r1, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff7b 	bl	8003698 <ILI9341_SendData>

    // Pump Ratio Control
    ILI9341_SendCommand(0xF7);
 80037a2:	20f7      	movs	r0, #247	@ 0xf7
 80037a4:	f7ff ff52 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x20;
 80037a8:	2320      	movs	r3, #32
 80037aa:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 80037ac:	463b      	mov	r3, r7
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff71 	bl	8003698 <ILI9341_SendData>

    // Power Control 1
    ILI9341_SendCommand(0xC0);
 80037b6:	20c0      	movs	r0, #192	@ 0xc0
 80037b8:	f7ff ff48 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x23;
 80037bc:	2323      	movs	r3, #35	@ 0x23
 80037be:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 80037c0:	463b      	mov	r3, r7
 80037c2:	2101      	movs	r1, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff67 	bl	8003698 <ILI9341_SendData>

    // Power Control 2
    ILI9341_SendCommand(0xC1);
 80037ca:	20c1      	movs	r0, #193	@ 0xc1
 80037cc:	f7ff ff3e 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x10;
 80037d0:	2310      	movs	r3, #16
 80037d2:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 80037d4:	463b      	mov	r3, r7
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5d 	bl	8003698 <ILI9341_SendData>

    // VCOM Control 1
    ILI9341_SendCommand(0xC5);
 80037de:	20c5      	movs	r0, #197	@ 0xc5
 80037e0:	f7ff ff34 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x3E; data[1] = 0x28;
 80037e4:	233e      	movs	r3, #62	@ 0x3e
 80037e6:	703b      	strb	r3, [r7, #0]
 80037e8:	2328      	movs	r3, #40	@ 0x28
 80037ea:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 80037ec:	463b      	mov	r3, r7
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff51 	bl	8003698 <ILI9341_SendData>

    // VCOM Control 2
    ILI9341_SendCommand(0xC7);
 80037f6:	20c7      	movs	r0, #199	@ 0xc7
 80037f8:	f7ff ff28 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x86;
 80037fc:	2386      	movs	r3, #134	@ 0x86
 80037fe:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003800:	463b      	mov	r3, r7
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff47 	bl	8003698 <ILI9341_SendData>

    // Memory Access Control
    ILI9341_SendCommand(0x36);
 800380a:	2036      	movs	r0, #54	@ 0x36
 800380c:	f7ff ff1e 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x48;
 8003810:	2348      	movs	r3, #72	@ 0x48
 8003812:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003814:	463b      	mov	r3, r7
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff3d 	bl	8003698 <ILI9341_SendData>

    // Pixel Format Set
    ILI9341_SendCommand(0x3A);
 800381e:	203a      	movs	r0, #58	@ 0x3a
 8003820:	f7ff ff14 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x55;  // 16-bit RGB565
 8003824:	2355      	movs	r3, #85	@ 0x55
 8003826:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003828:	463b      	mov	r3, r7
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff33 	bl	8003698 <ILI9341_SendData>

    // Frame Rate Control
    ILI9341_SendCommand(0xB1);
 8003832:	20b1      	movs	r0, #177	@ 0xb1
 8003834:	f7ff ff0a 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x18;
 8003838:	2300      	movs	r3, #0
 800383a:	703b      	strb	r3, [r7, #0]
 800383c:	2318      	movs	r3, #24
 800383e:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8003840:	463b      	mov	r3, r7
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff27 	bl	8003698 <ILI9341_SendData>

    // Display Function Control
    ILI9341_SendCommand(0xB6);
 800384a:	20b6      	movs	r0, #182	@ 0xb6
 800384c:	f7ff fefe 	bl	800364c <ILI9341_SendCommand>
    data[0] = 0x08; data[1] = 0x82; data[2] = 0x27;
 8003850:	2308      	movs	r3, #8
 8003852:	703b      	strb	r3, [r7, #0]
 8003854:	2382      	movs	r3, #130	@ 0x82
 8003856:	707b      	strb	r3, [r7, #1]
 8003858:	2327      	movs	r3, #39	@ 0x27
 800385a:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 800385c:	463b      	mov	r3, r7
 800385e:	2103      	movs	r1, #3
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff19 	bl	8003698 <ILI9341_SendData>

    // Exit Sleep Mode
    ILI9341_SendCommand(0x11);
 8003866:	2011      	movs	r0, #17
 8003868:	f7ff fef0 	bl	800364c <ILI9341_SendCommand>
    HAL_Delay(120);
 800386c:	2078      	movs	r0, #120	@ 0x78
 800386e:	f001 fdbd 	bl	80053ec <HAL_Delay>

    // Turn on Display
    ILI9341_SendCommand(0x29);
 8003872:	2029      	movs	r0, #41	@ 0x29
 8003874:	f7ff feea 	bl	800364c <ILI9341_SendCommand>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40020800 	.word	0x40020800

08003884 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8003884:	b580      	push	{r7, lr}
 8003886:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800388a:	af00      	add	r7, sp, #0
 800388c:	4602      	mov	r2, r0
 800388e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003892:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 8003896:	801a      	strh	r2, [r3, #0]
    // Combine the color bytes to save redundant operations
    uint8_t buffer[512]; // Buffer to send 256 pixels (512 bytes for RGB565)
    uint8_t high_byte = color >> 8;
 8003898:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800389c:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t low_byte = color & 0xFF;
 80038aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038ae:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

    // Fill the buffer once
    for (uint16_t i = 0; i < 256; i++) {
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 80038be:	e019      	b.n	80038f4 <ILI9341_FillScreen+0x70>
        buffer[i * 2] = high_byte;
 80038c0:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80038ca:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80038ce:	f897 1217 	ldrb.w	r1, [r7, #535]	@ 0x217
 80038d2:	54d1      	strb	r1, [r2, r3]
        buffer[i * 2 + 1] = low_byte;
 80038d4:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	3301      	adds	r3, #1
 80038dc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80038e0:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80038e4:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 80038e8:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < 256; i++) {
 80038ea:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 80038ee:	3301      	adds	r3, #1
 80038f0:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 80038f4:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 80038f8:	2bff      	cmp	r3, #255	@ 0xff
 80038fa:	d9e1      	bls.n	80038c0 <ILI9341_FillScreen+0x3c>
    }

    // Set column address (entire width of the display)
    uint8_t col_data[4] = {0x00, 0x00, 0x00, 0xEF}; // Start: 0x0000, End: 239
 80038fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003900:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003904:	f04f 426f 	mov.w	r2, #4009754624	@ 0xef000000
 8003908:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2A); // Column Address Set
 800390a:	202a      	movs	r0, #42	@ 0x2a
 800390c:	f7ff fe9e 	bl	800364c <ILI9341_SendCommand>
    ILI9341_SendData(col_data, sizeof(col_data));
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	2104      	movs	r1, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff febe 	bl	8003698 <ILI9341_SendData>

    // Set page address (entire height of the display)
    uint8_t page_data[4] = {0x00, 0x00, 0x01, 0x3F}; // Start: 0x0000, End: 319
 800391c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003920:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <ILI9341_FillScreen+0xfc>)
 8003926:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2B); // Page Address Set
 8003928:	202b      	movs	r0, #43	@ 0x2b
 800392a:	f7ff fe8f 	bl	800364c <ILI9341_SendCommand>
    ILI9341_SendData(page_data, sizeof(page_data));
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	2104      	movs	r1, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff feaf 	bl	8003698 <ILI9341_SendData>

    // Start memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 800393a:	202c      	movs	r0, #44	@ 0x2c
 800393c:	f7ff fe86 	bl	800364c <ILI9341_SendCommand>

    // Send buffer in chunks
    uint32_t num_chunks = (240 * 320) / 256; // Total pixels divided by buffer size
 8003940:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003944:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    for (uint32_t i = 0; i < num_chunks; i++) {
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800394e:	e00b      	b.n	8003968 <ILI9341_FillScreen+0xe4>
        ILI9341_SendData(buffer, sizeof(buffer));
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fe9d 	bl	8003698 <ILI9341_SendData>
    for (uint32_t i = 0; i < num_chunks; i++) {
 800395e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8003962:	3301      	adds	r3, #1
 8003964:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8003968:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 800396c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003970:	429a      	cmp	r2, r3
 8003972:	d3ed      	bcc.n	8003950 <ILI9341_FillScreen+0xcc>
    }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	3f010000 	.word	0x3f010000

08003984 <ILI9341_SetAddressWindow>:


void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4623      	mov	r3, r4
 8003994:	80fb      	strh	r3, [r7, #6]
 8003996:	4603      	mov	r3, r0
 8003998:	80bb      	strh	r3, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	807b      	strh	r3, [r7, #2]
 800399e:	4613      	mov	r3, r2
 80039a0:	803b      	strh	r3, [r7, #0]
    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 80039a2:	202a      	movs	r0, #42	@ 0x2a
 80039a4:	f7ff fe52 	bl	800364c <ILI9341_SendCommand>
    uint8_t columnData[4] = {
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	733b      	strb	r3, [r7, #12]
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	737b      	strb	r3, [r7, #13]
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	73bb      	strb	r3, [r7, #14]
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	73fb      	strb	r3, [r7, #15]
        (x0 >> 8) & 0xFF, x0 & 0xFF, // Start column
        (x1 >> 8) & 0xFF, x1 & 0xFF  // End column
    };
    ILI9341_SendData(columnData, 4);
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	2104      	movs	r1, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fe62 	bl	8003698 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 80039d4:	202b      	movs	r0, #43	@ 0x2b
 80039d6:	f7ff fe39 	bl	800364c <ILI9341_SendCommand>
    uint8_t rowData[4] = {
 80039da:	88bb      	ldrh	r3, [r7, #4]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	723b      	strb	r3, [r7, #8]
 80039e4:	88bb      	ldrh	r3, [r7, #4]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	727b      	strb	r3, [r7, #9]
 80039ea:	883b      	ldrh	r3, [r7, #0]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	72bb      	strb	r3, [r7, #10]
 80039f4:	883b      	ldrh	r3, [r7, #0]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	72fb      	strb	r3, [r7, #11]
        (y0 >> 8) & 0xFF, y0 & 0xFF, // Start row
        (y1 >> 8) & 0xFF, y1 & 0xFF  // End row
    };
    ILI9341_SendData(rowData, 4);
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	2104      	movs	r1, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fe49 	bl	8003698 <ILI9341_SendData>

    // Prepare for memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 8003a06:	202c      	movs	r0, #44	@ 0x2c
 8003a08:	f7ff fe20 	bl	800364c <ILI9341_SendCommand>
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd90      	pop	{r4, r7, pc}

08003a14 <ILI9341_DrawPixel>:
#include "lcd_functions.h"
#include "fatfs.h"
#include "gfxfont.h"

bool FadeTextComplete = false;
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	80bb      	strh	r3, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	807b      	strh	r3, [r7, #2]
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2bef      	cmp	r3, #239	@ 0xef
 8003a2a:	d847      	bhi.n	8003abc <ILI9341_DrawPixel+0xa8>
 8003a2c:	88bb      	ldrh	r3, [r7, #4]
 8003a2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003a32:	d243      	bcs.n	8003abc <ILI9341_DrawPixel+0xa8>

    ILI9341_SendCommand(0x2A); // Column Address Set
 8003a34:	202a      	movs	r0, #42	@ 0x2a
 8003a36:	f7ff fe09 	bl	800364c <ILI9341_SendCommand>
    uint8_t data_x[] = {(x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF};
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	753b      	strb	r3, [r7, #20]
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	757b      	strb	r3, [r7, #21]
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	75bb      	strb	r3, [r7, #22]
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	75fb      	strb	r3, [r7, #23]
    ILI9341_SendData(data_x, 4);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fe19 	bl	8003698 <ILI9341_SendData>

    ILI9341_SendCommand(0x2B); // Page Address Set
 8003a66:	202b      	movs	r0, #43	@ 0x2b
 8003a68:	f7ff fdf0 	bl	800364c <ILI9341_SendCommand>
    uint8_t data_y[] = {(y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF};
 8003a6c:	88bb      	ldrh	r3, [r7, #4]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	743b      	strb	r3, [r7, #16]
 8003a76:	88bb      	ldrh	r3, [r7, #4]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	747b      	strb	r3, [r7, #17]
 8003a7c:	88bb      	ldrh	r3, [r7, #4]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	74bb      	strb	r3, [r7, #18]
 8003a86:	88bb      	ldrh	r3, [r7, #4]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(data_y, 4);
 8003a8c:	f107 0310 	add.w	r3, r7, #16
 8003a90:	2104      	movs	r1, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fe00 	bl	8003698 <ILI9341_SendData>

    ILI9341_SendCommand(0x2C); // Memory Write
 8003a98:	202c      	movs	r0, #44	@ 0x2c
 8003a9a:	f7ff fdd7 	bl	800364c <ILI9341_SendCommand>
    uint8_t color_data[] = {(color >> 8) & 0xFF, color & 0xFF};
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	733b      	strb	r3, [r7, #12]
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(color_data, 2);
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fdef 	bl	8003698 <ILI9341_SendData>
 8003aba:	e000      	b.n	8003abe <ILI9341_DrawPixel+0xaa>
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 8003abc:	bf00      	nop
}
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <DrawChar>:
void DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t scale) {
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	80fb      	strh	r3, [r7, #6]
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80bb      	strh	r3, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	803b      	strh	r3, [r7, #0]
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8003ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f2c0 80c7 	blt.w	8003c7a <DrawChar+0x1b6>

    // Map ASCII character to the font array
    const unsigned char *charBitmap = &font[c * 5];
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	4a63      	ldr	r2, [pc, #396]	@ (8003c84 <DrawChar+0x1c0>)
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

    // Draw each column of the character
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
 8003afe:	e089      	b.n	8003c14 <DrawChar+0x150>
        uint8_t columnData = charBitmap[col];
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	72fb      	strb	r3, [r7, #11]
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75bb      	strb	r3, [r7, #22]
 8003b0e:	e07b      	b.n	8003c08 <DrawChar+0x144>
            if (columnData & (1 << row)) { // Check if pixel is ON
 8003b10:	7afa      	ldrb	r2, [r7, #11]
 8003b12:	7dbb      	ldrb	r3, [r7, #22]
 8003b14:	fa42 f303 	asr.w	r3, r2, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d038      	beq.n	8003b92 <DrawChar+0xce>
                // Draw a scaled block for the ON pixel
                for (uint8_t i = 0; i < scale; i++) {
 8003b20:	2300      	movs	r3, #0
 8003b22:	757b      	strb	r3, [r7, #21]
 8003b24:	e02f      	b.n	8003b86 <DrawChar+0xc2>
                    for (uint8_t j = 0; j < scale; j++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	753b      	strb	r3, [r7, #20]
 8003b2a:	e024      	b.n	8003b76 <DrawChar+0xb2>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, color);
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	fb12 f303 	smulbb	r3, r2, r3
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	4413      	add	r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	7d7b      	ldrb	r3, [r7, #21]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	b298      	uxth	r0, r3
 8003b4a:	7dbb      	ldrb	r3, [r7, #22]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	fb12 f303 	smulbb	r3, r2, r3
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	88bb      	ldrh	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	7d3b      	ldrb	r3, [r7, #20]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	883a      	ldrh	r2, [r7, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f7ff ff52 	bl	8003a14 <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8003b70:	7d3b      	ldrb	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	753b      	strb	r3, [r7, #20]
 8003b76:	7d3a      	ldrb	r2, [r7, #20]
 8003b78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3d5      	bcc.n	8003b2c <DrawChar+0x68>
                for (uint8_t i = 0; i < scale; i++) {
 8003b80:	7d7b      	ldrb	r3, [r7, #21]
 8003b82:	3301      	adds	r3, #1
 8003b84:	757b      	strb	r3, [r7, #21]
 8003b86:	7d7a      	ldrb	r2, [r7, #21]
 8003b88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3ca      	bcc.n	8003b26 <DrawChar+0x62>
 8003b90:	e037      	b.n	8003c02 <DrawChar+0x13e>
                    }
                }
            } else {
                // Draw a scaled block for the OFF pixel (background)
                for (uint8_t i = 0; i < scale; i++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	74fb      	strb	r3, [r7, #19]
 8003b96:	e02f      	b.n	8003bf8 <DrawChar+0x134>
                    for (uint8_t j = 0; j < scale; j++) {
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74bb      	strb	r3, [r7, #18]
 8003b9c:	e024      	b.n	8003be8 <DrawChar+0x124>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, bg);
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	fb12 f303 	smulbb	r3, r2, r3
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	b298      	uxth	r0, r3
 8003bbc:	7dbb      	ldrb	r3, [r7, #22]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	fb12 f303 	smulbb	r3, r2, r3
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	88bb      	ldrh	r3, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	7cbb      	ldrb	r3, [r7, #18]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7ff ff19 	bl	8003a14 <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8003be2:	7cbb      	ldrb	r3, [r7, #18]
 8003be4:	3301      	adds	r3, #1
 8003be6:	74bb      	strb	r3, [r7, #18]
 8003be8:	7cba      	ldrb	r2, [r7, #18]
 8003bea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3d5      	bcc.n	8003b9e <DrawChar+0xda>
                for (uint8_t i = 0; i < scale; i++) {
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	74fb      	strb	r3, [r7, #19]
 8003bf8:	7cfa      	ldrb	r2, [r7, #19]
 8003bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3ca      	bcc.n	8003b98 <DrawChar+0xd4>
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8003c02:	7dbb      	ldrb	r3, [r7, #22]
 8003c04:	3301      	adds	r3, #1
 8003c06:	75bb      	strb	r3, [r7, #22]
 8003c08:	7dbb      	ldrb	r3, [r7, #22]
 8003c0a:	2b07      	cmp	r3, #7
 8003c0c:	d980      	bls.n	8003b10 <DrawChar+0x4c>
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	3301      	adds	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	f67f af72 	bls.w	8003b00 <DrawChar+0x3c>
            }
        }
    }

    // Add scaled spacing after each character
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	747b      	strb	r3, [r7, #17]
 8003c20:	e024      	b.n	8003c6c <DrawChar+0x1a8>
        for (uint8_t i = 0; i < scale; i++) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	743b      	strb	r3, [r7, #16]
 8003c26:	e019      	b.n	8003c5c <DrawChar+0x198>
            ILI9341_DrawPixel(x + 5 * scale + i, y + row, bg);
 8003c28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	4413      	add	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	7c3b      	ldrb	r3, [r7, #16]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	b298      	uxth	r0, r3
 8003c44:	7c7b      	ldrb	r3, [r7, #17]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	88bb      	ldrh	r3, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7ff fedf 	bl	8003a14 <ILI9341_DrawPixel>
        for (uint8_t i = 0; i < scale; i++) {
 8003c56:	7c3b      	ldrb	r3, [r7, #16]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	743b      	strb	r3, [r7, #16]
 8003c5c:	7c3a      	ldrb	r2, [r7, #16]
 8003c5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d3e0      	bcc.n	8003c28 <DrawChar+0x164>
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8003c66:	7c7b      	ldrb	r3, [r7, #17]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	747b      	strb	r3, [r7, #17]
 8003c6c:	7c7a      	ldrb	r2, [r7, #17]
 8003c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbd4      	blt.n	8003c22 <DrawChar+0x15e>
 8003c78:	e000      	b.n	8003c7c <DrawChar+0x1b8>
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8003c7a:	bf00      	nop
        }
    }
}
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd90      	pop	{r4, r7, pc}
 8003c82:	bf00      	nop
 8003c84:	08010610 	.word	0x08010610

08003c88 <DrawString>:


void DrawString(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bg, uint8_t scale) {
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60ba      	str	r2, [r7, #8]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	81fb      	strh	r3, [r7, #14]
 8003c96:	460b      	mov	r3, r1
 8003c98:	81bb      	strh	r3, [r7, #12]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 8003c9e:	e01a      	b.n	8003cd6 <DrawString+0x4e>
        DrawChar(x, y, *str, color, bg, scale);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	88fc      	ldrh	r4, [r7, #6]
 8003ca6:	89b9      	ldrh	r1, [r7, #12]
 8003ca8:	89f8      	ldrh	r0, [r7, #14]
 8003caa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	8c3b      	ldrh	r3, [r7, #32]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	f7ff ff05 	bl	8003ac4 <DrawChar>
        x += 6 * scale; // Adjust character spacing based on scale
 8003cba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	0052      	lsls	r2, r2, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	4413      	add	r3, r2
 8003cce:	81fb      	strh	r3, [r7, #14]
        str++;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e0      	bne.n	8003ca0 <DrawString+0x18>
    }
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <ILI9341_FillRect>:


void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	80fb      	strh	r3, [r7, #6]
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80bb      	strh	r3, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]
 8003d02:	4613      	mov	r3, r2
 8003d04:	803b      	strh	r3, [r7, #0]
    // Ensure the rectangle lies within the screen boundaries
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	2bef      	cmp	r3, #239	@ 0xef
 8003d0a:	d879      	bhi.n	8003e00 <ILI9341_FillRect+0x118>
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d12:	d275      	bcs.n	8003e00 <ILI9341_FillRect+0x118>

    // Clip width and height if the rectangle extends beyond screen boundaries
    if ((x + width - 1) >= ILI9341_WIDTH) {
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	4413      	add	r3, r2
 8003d1a:	2bf0      	cmp	r3, #240	@ 0xf0
 8003d1c:	dd03      	ble.n	8003d26 <ILI9341_FillRect+0x3e>
        width = ILI9341_WIDTH - x;
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003d24:	807b      	strh	r3, [r7, #2]
    }
    if ((y + height - 1) >= ILI9341_HEIGHT) {
 8003d26:	88ba      	ldrh	r2, [r7, #4]
 8003d28:	883b      	ldrh	r3, [r7, #0]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d30:	dd03      	ble.n	8003d3a <ILI9341_FillRect+0x52>
        height = ILI9341_HEIGHT - y;
 8003d32:	88bb      	ldrh	r3, [r7, #4]
 8003d34:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003d38:	803b      	strh	r3, [r7, #0]
    }

    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 8003d3a:	202a      	movs	r0, #42	@ 0x2a
 8003d3c:	f7ff fc86 	bl	800364c <ILI9341_SendCommand>
    uint8_t colData[4] = { (x >> 8) & 0xFF, x & 0xFF, ((x + width - 1) >> 8) & 0xFF, (x + width - 1) & 0xFF };
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	743b      	strb	r3, [r7, #16]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	747b      	strb	r3, [r7, #17]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	4413      	add	r3, r2
 8003d56:	3b01      	subs	r3, #1
 8003d58:	121b      	asrs	r3, r3, #8
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	74bb      	strb	r3, [r7, #18]
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(colData, 4);
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	2104      	movs	r1, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fc8e 	bl	8003698 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 8003d7c:	202b      	movs	r0, #43	@ 0x2b
 8003d7e:	f7ff fc65 	bl	800364c <ILI9341_SendCommand>
    uint8_t rowData[4] = { (y >> 8) & 0xFF, y & 0xFF, ((y + height - 1) >> 8) & 0xFF, (y + height - 1) & 0xFF };
 8003d82:	88bb      	ldrh	r3, [r7, #4]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	733b      	strb	r3, [r7, #12]
 8003d8c:	88bb      	ldrh	r3, [r7, #4]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	737b      	strb	r3, [r7, #13]
 8003d92:	88ba      	ldrh	r2, [r7, #4]
 8003d94:	883b      	ldrh	r3, [r7, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	121b      	asrs	r3, r3, #8
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	73bb      	strb	r3, [r7, #14]
 8003da0:	88bb      	ldrh	r3, [r7, #4]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	883b      	ldrh	r3, [r7, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	73fb      	strb	r3, [r7, #15]
    ILI9341_SendData(rowData, 4);
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	2104      	movs	r1, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fc6d 	bl	8003698 <ILI9341_SendData>

    // Write memory
    ILI9341_SendCommand(0x2C); // Memory Write
 8003dbe:	202c      	movs	r0, #44	@ 0x2c
 8003dc0:	f7ff fc44 	bl	800364c <ILI9341_SendCommand>

    // Fill the rectangle with color
    uint16_t pixelCount = width * height;
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	883b      	ldrh	r3, [r7, #0]
 8003dc8:	fb12 f303 	smulbb	r3, r2, r3
 8003dcc:	82bb      	strh	r3, [r7, #20]
    uint8_t colorData[2] = { (color >> 8) & 0xFF, color & 0xFF }; // Split color into 2 bytes
 8003dce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	723b      	strb	r3, [r7, #8]
 8003dd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	727b      	strb	r3, [r7, #9]
    for (uint16_t i = 0; i < pixelCount; i++) {
 8003dde:	2300      	movs	r3, #0
 8003de0:	82fb      	strh	r3, [r7, #22]
 8003de2:	e008      	b.n	8003df6 <ILI9341_FillRect+0x10e>
        ILI9341_SendData(colorData, 2);
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	2102      	movs	r1, #2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fc54 	bl	8003698 <ILI9341_SendData>
    for (uint16_t i = 0; i < pixelCount; i++) {
 8003df0:	8afb      	ldrh	r3, [r7, #22]
 8003df2:	3301      	adds	r3, #1
 8003df4:	82fb      	strh	r3, [r7, #22]
 8003df6:	8afa      	ldrh	r2, [r7, #22]
 8003df8:	8abb      	ldrh	r3, [r7, #20]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3f2      	bcc.n	8003de4 <ILI9341_FillRect+0xfc>
 8003dfe:	e000      	b.n	8003e02 <ILI9341_FillRect+0x11a>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003e00:	bf00      	nop
    }
}
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}

08003e08 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(int x, int y, int length, uint16_t color) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e00e      	b.n	8003e3a <ILI9341_DrawVLine+0x32>
        ILI9341_DrawPixel(x, y + i, color);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	b298      	uxth	r0, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	887a      	ldrh	r2, [r7, #2]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f7ff fdf0 	bl	8003a14 <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3301      	adds	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	dbec      	blt.n	8003e1c <ILI9341_DrawVLine+0x14>
    }
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(int x, int y, int length, uint16_t color) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e00e      	b.n	8003e7e <ILI9341_DrawHLine+0x32>
        ILI9341_DrawPixel(x + i, y, color);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	b291      	uxth	r1, r2
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fdce 	bl	8003a14 <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	dbec      	blt.n	8003e60 <ILI9341_DrawHLine+0x14>
    }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <ILI9341_DrawRect>:

void ILI9341_DrawRect(int x, int y, int width, int height, uint16_t color) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
    // Draw top horizontal line
    ILI9341_DrawHLine(x, y, width, color);
 8003e9e:	8b3b      	ldrh	r3, [r7, #24]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ffd1 	bl	8003e4c <ILI9341_DrawHLine>

    // Draw bottom horizontal line
    ILI9341_DrawHLine(x, y + height - 1, width, color);
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	1e59      	subs	r1, r3, #1
 8003eb2:	8b3b      	ldrh	r3, [r7, #24]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ffc8 	bl	8003e4c <ILI9341_DrawHLine>

    // Draw left vertical line
    ILI9341_DrawVLine(x, y, height, color);
 8003ebc:	8b3b      	ldrh	r3, [r7, #24]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ffa0 	bl	8003e08 <ILI9341_DrawVLine>

    // Draw right vertical line
    ILI9341_DrawVLine(x + width - 1, y, height, color);
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	8b3b      	ldrh	r3, [r7, #24]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	f7ff ff97 	bl	8003e08 <ILI9341_DrawVLine>
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <progress_bar>:
        DrawString(x, y_pos, text, color, bg_color, 1); // Draw text at new position
        HAL_Delay(50); // Adjust speed of sliding
    }
}

void progress_bar(int x, int y, int width, int height, uint16_t fill_color, uint16_t bg_color, int percentage) {
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b089      	sub	sp, #36	@ 0x24
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
    int progress_width = (width * percentage) / 100;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <progress_bar+0x88>)
 8003efc:	fb82 1203 	smull	r1, r2, r2, r3
 8003f00:	1152      	asrs	r2, r2, #5
 8003f02:	17db      	asrs	r3, r3, #31
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	617b      	str	r3, [r7, #20]

    // Draw only the progress portion
    ILI9341_FillRect(x, y, progress_width, height, fill_color);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	b298      	uxth	r0, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	b299      	uxth	r1, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b29c      	uxth	r4, r3
 8003f18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	f7ff fee3 	bl	8003ce8 <ILI9341_FillRect>

    // Optionally draw the remaining portion (if needed)
    if (percentage < 100) {
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2b63      	cmp	r3, #99	@ 0x63
 8003f26:	dc14      	bgt.n	8003f52 <progress_bar+0x6e>
        ILI9341_FillRect(x + progress_width, y, width - progress_width, height, bg_color);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	b298      	uxth	r0, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	b299      	uxth	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7ff fecb 	bl	8003ce8 <ILI9341_FillRect>
    }

    // Draw a border if necessary
    ILI9341_DrawRect(x, y, width, height, 0xFFFF);
 8003f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ff96 	bl	8003e90 <ILI9341_DrawRect>
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	51eb851f 	.word	0x51eb851f

08003f70 <FlashScreen>:
        }
    }
}

void FlashScreen(int flashes, int duration)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < flashes; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e019      	b.n	8003fb4 <FlashScreen+0x44>
    {
        ILI9341_FillScreen(0xFFFF); // White screen
 8003f80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003f84:	f7ff fc7e 	bl	8003884 <ILI9341_FillScreen>
        HAL_Delay(duration-(duration/2));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	0fda      	lsrs	r2, r3, #31
 8003f8c:	4413      	add	r3, r2
 8003f8e:	105b      	asrs	r3, r3, #1
 8003f90:	425b      	negs	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fa27 	bl	80053ec <HAL_Delay>
        ILI9341_FillScreen(0xF7BE); // Black screen
 8003f9e:	f24f 70be 	movw	r0, #63422	@ 0xf7be
 8003fa2:	f7ff fc6f 	bl	8003884 <ILI9341_FillScreen>
        HAL_Delay(duration);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fa1f 	bl	80053ec <HAL_Delay>
    for (int i = 0; i < flashes; i++)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	dbe1      	blt.n	8003f80 <FlashScreen+0x10>
    }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <DisplayPokemonImage>:
                ILI9341_FillRect(x + j * size, y - i * size, size, size, bgcolor);
            }
        }
    }
}
void DisplayPokemonImage(const char *pokemon_name) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
    char image_file[20]; // Buffer to hold the image filename

    // Check which Pokémon is captured and load the corresponding image
    if (strcmp(pokemon_name, "Charizard") == 0) {
 8003fd0:	4973      	ldr	r1, [pc, #460]	@ (80041a0 <DisplayPokemonImage+0x1d8>)
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc f904 	bl	80001e0 <strcmp>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <DisplayPokemonImage+0x24>
        sprintf(image_file, "charizard.bmp");
 8003fde:	f107 030c 	add.w	r3, r7, #12
 8003fe2:	4970      	ldr	r1, [pc, #448]	@ (80041a4 <DisplayPokemonImage+0x1dc>)
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f009 fb8b 	bl	800d700 <siprintf>
 8003fea:	e0c9      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Growlithe") == 0) {
 8003fec:	496e      	ldr	r1, [pc, #440]	@ (80041a8 <DisplayPokemonImage+0x1e0>)
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc f8f6 	bl	80001e0 <strcmp>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <DisplayPokemonImage+0x40>
        sprintf(image_file, "grow.bmp");
 8003ffa:	f107 030c 	add.w	r3, r7, #12
 8003ffe:	496b      	ldr	r1, [pc, #428]	@ (80041ac <DisplayPokemonImage+0x1e4>)
 8004000:	4618      	mov	r0, r3
 8004002:	f009 fb7d 	bl	800d700 <siprintf>
 8004006:	e0bb      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Magmar") == 0) {
 8004008:	4969      	ldr	r1, [pc, #420]	@ (80041b0 <DisplayPokemonImage+0x1e8>)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc f8e8 	bl	80001e0 <strcmp>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <DisplayPokemonImage+0x5c>
        sprintf(image_file, "magmar.bmp");
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	4966      	ldr	r1, [pc, #408]	@ (80041b4 <DisplayPokemonImage+0x1ec>)
 800401c:	4618      	mov	r0, r3
 800401e:	f009 fb6f 	bl	800d700 <siprintf>
 8004022:	e0ad      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Articuno") == 0) {
 8004024:	4964      	ldr	r1, [pc, #400]	@ (80041b8 <DisplayPokemonImage+0x1f0>)
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc f8da 	bl	80001e0 <strcmp>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <DisplayPokemonImage+0x78>
        sprintf(image_file, "articuno.bmp");
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	4961      	ldr	r1, [pc, #388]	@ (80041bc <DisplayPokemonImage+0x1f4>)
 8004038:	4618      	mov	r0, r3
 800403a:	f009 fb61 	bl	800d700 <siprintf>
 800403e:	e09f      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Jynx") == 0) {
 8004040:	495f      	ldr	r1, [pc, #380]	@ (80041c0 <DisplayPokemonImage+0x1f8>)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8cc 	bl	80001e0 <strcmp>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <DisplayPokemonImage+0x94>
        sprintf(image_file, "jynx.bmp");
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	495c      	ldr	r1, [pc, #368]	@ (80041c4 <DisplayPokemonImage+0x1fc>)
 8004054:	4618      	mov	r0, r3
 8004056:	f009 fb53 	bl	800d700 <siprintf>
 800405a:	e091      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Lapras") == 0) {
 800405c:	495a      	ldr	r1, [pc, #360]	@ (80041c8 <DisplayPokemonImage+0x200>)
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc f8be 	bl	80001e0 <strcmp>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <DisplayPokemonImage+0xb0>
        sprintf(image_file, "lapras.bmp");
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	4957      	ldr	r1, [pc, #348]	@ (80041cc <DisplayPokemonImage+0x204>)
 8004070:	4618      	mov	r0, r3
 8004072:	f009 fb45 	bl	800d700 <siprintf>
 8004076:	e083      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Chansey") == 0) {
 8004078:	4955      	ldr	r1, [pc, #340]	@ (80041d0 <DisplayPokemonImage+0x208>)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc f8b0 	bl	80001e0 <strcmp>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <DisplayPokemonImage+0xcc>
        sprintf(image_file, "chansey.bmp");
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	4952      	ldr	r1, [pc, #328]	@ (80041d4 <DisplayPokemonImage+0x20c>)
 800408c:	4618      	mov	r0, r3
 800408e:	f009 fb37 	bl	800d700 <siprintf>
 8004092:	e075      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Fearow") == 0) {
 8004094:	4950      	ldr	r1, [pc, #320]	@ (80041d8 <DisplayPokemonImage+0x210>)
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fc f8a2 	bl	80001e0 <strcmp>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <DisplayPokemonImage+0xe8>
        sprintf(image_file, "fearow.bmp");
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	494d      	ldr	r1, [pc, #308]	@ (80041dc <DisplayPokemonImage+0x214>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	f009 fb29 	bl	800d700 <siprintf>
 80040ae:	e067      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Pidgeot") == 0) {
 80040b0:	494b      	ldr	r1, [pc, #300]	@ (80041e0 <DisplayPokemonImage+0x218>)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc f894 	bl	80001e0 <strcmp>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <DisplayPokemonImage+0x104>
        sprintf(image_file, "pidgeot.bmp");
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	4948      	ldr	r1, [pc, #288]	@ (80041e4 <DisplayPokemonImage+0x21c>)
 80040c4:	4618      	mov	r0, r3
 80040c6:	f009 fb1b 	bl	800d700 <siprintf>
 80040ca:	e059      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Blastoise") == 0) {
 80040cc:	4946      	ldr	r1, [pc, #280]	@ (80041e8 <DisplayPokemonImage+0x220>)
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc f886 	bl	80001e0 <strcmp>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <DisplayPokemonImage+0x120>
        sprintf(image_file, "blastoise.bmp");
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4943      	ldr	r1, [pc, #268]	@ (80041ec <DisplayPokemonImage+0x224>)
 80040e0:	4618      	mov	r0, r3
 80040e2:	f009 fb0d 	bl	800d700 <siprintf>
 80040e6:	e04b      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Feraligator") == 0) {
 80040e8:	4941      	ldr	r1, [pc, #260]	@ (80041f0 <DisplayPokemonImage+0x228>)
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc f878 	bl	80001e0 <strcmp>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <DisplayPokemonImage+0x13c>
        sprintf(image_file, "fer.bmp");
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	493e      	ldr	r1, [pc, #248]	@ (80041f4 <DisplayPokemonImage+0x22c>)
 80040fc:	4618      	mov	r0, r3
 80040fe:	f009 faff 	bl	800d700 <siprintf>
 8004102:	e03d      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Empoleon") == 0) {
 8004104:	493c      	ldr	r1, [pc, #240]	@ (80041f8 <DisplayPokemonImage+0x230>)
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc f86a 	bl	80001e0 <strcmp>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <DisplayPokemonImage+0x158>
        sprintf(image_file, "emp.bmp");
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	4939      	ldr	r1, [pc, #228]	@ (80041fc <DisplayPokemonImage+0x234>)
 8004118:	4618      	mov	r0, r3
 800411a:	f009 faf1 	bl	800d700 <siprintf>
 800411e:	e02f      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Mewtwo") == 0) {
 8004120:	4937      	ldr	r1, [pc, #220]	@ (8004200 <DisplayPokemonImage+0x238>)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fc f85c 	bl	80001e0 <strcmp>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <DisplayPokemonImage+0x174>
        sprintf(image_file, "mewtwo.bmp");
 800412e:	f107 030c 	add.w	r3, r7, #12
 8004132:	4934      	ldr	r1, [pc, #208]	@ (8004204 <DisplayPokemonImage+0x23c>)
 8004134:	4618      	mov	r0, r3
 8004136:	f009 fae3 	bl	800d700 <siprintf>
 800413a:	e021      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Zapdos") == 0) {
 800413c:	4932      	ldr	r1, [pc, #200]	@ (8004208 <DisplayPokemonImage+0x240>)
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc f84e 	bl	80001e0 <strcmp>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <DisplayPokemonImage+0x190>
        sprintf(image_file, "zapdos.bmp");
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	492f      	ldr	r1, [pc, #188]	@ (800420c <DisplayPokemonImage+0x244>)
 8004150:	4618      	mov	r0, r3
 8004152:	f009 fad5 	bl	800d700 <siprintf>
 8004156:	e013      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else if (strcmp(pokemon_name, "Darkrai") == 0) {
 8004158:	492d      	ldr	r1, [pc, #180]	@ (8004210 <DisplayPokemonImage+0x248>)
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc f840 	bl	80001e0 <strcmp>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <DisplayPokemonImage+0x1ac>
        sprintf(image_file, "darkrai.bmp");
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	492a      	ldr	r1, [pc, #168]	@ (8004214 <DisplayPokemonImage+0x24c>)
 800416c:	4618      	mov	r0, r3
 800416e:	f009 fac7 	bl	800d700 <siprintf>
 8004172:	e005      	b.n	8004180 <DisplayPokemonImage+0x1b8>
    } else {
        sprintf(image_file, "default.bmp"); // Default image if no match
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	4927      	ldr	r1, [pc, #156]	@ (8004218 <DisplayPokemonImage+0x250>)
 800417a:	4618      	mov	r0, r3
 800417c:	f009 fac0 	bl	800d700 <siprintf>
    }
    HAL_Delay(100); // Delay to ensure previous display state is cleared
 8004180:	2064      	movs	r0, #100	@ 0x64
 8004182:	f001 f933 	bl	80053ec <HAL_Delay>
    ILI9341_FillScreen(0x0000); // Clear the screen before displaying the new image
 8004186:	2000      	movs	r0, #0
 8004188:	f7ff fb7c 	bl	8003884 <ILI9341_FillScreen>

        // Use the process_SD_card function to display the image
   process_SD_card(image_file);
 800418c:	f107 030c 	add.w	r3, r7, #12
 8004190:	4618      	mov	r0, r3
 8004192:	f7fd fd1d 	bl	8001bd0 <process_SD_card>

}
 8004196:	bf00      	nop
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	0801043c 	.word	0x0801043c
 80041a4:	08010448 	.word	0x08010448
 80041a8:	08010458 	.word	0x08010458
 80041ac:	08010464 	.word	0x08010464
 80041b0:	08010470 	.word	0x08010470
 80041b4:	08010478 	.word	0x08010478
 80041b8:	08010484 	.word	0x08010484
 80041bc:	08010490 	.word	0x08010490
 80041c0:	080104a0 	.word	0x080104a0
 80041c4:	080104a8 	.word	0x080104a8
 80041c8:	080104b4 	.word	0x080104b4
 80041cc:	080104bc 	.word	0x080104bc
 80041d0:	080104c8 	.word	0x080104c8
 80041d4:	080104d0 	.word	0x080104d0
 80041d8:	080104dc 	.word	0x080104dc
 80041dc:	080104e4 	.word	0x080104e4
 80041e0:	080104f0 	.word	0x080104f0
 80041e4:	080104f8 	.word	0x080104f8
 80041e8:	08010504 	.word	0x08010504
 80041ec:	08010510 	.word	0x08010510
 80041f0:	08010520 	.word	0x08010520
 80041f4:	0801052c 	.word	0x0801052c
 80041f8:	08010534 	.word	0x08010534
 80041fc:	08010540 	.word	0x08010540
 8004200:	08010548 	.word	0x08010548
 8004204:	08010550 	.word	0x08010550
 8004208:	0801055c 	.word	0x0801055c
 800420c:	08010564 	.word	0x08010564
 8004210:	08010570 	.word	0x08010570
 8004214:	08010578 	.word	0x08010578
 8004218:	08010584 	.word	0x08010584

0800421c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004220:	f001 f872 	bl	8005308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004224:	f000 f814 	bl	8004250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004228:	f000 f97a 	bl	8004520 <MX_GPIO_Init>
  MX_DMA_Init();
 800422c:	f000 f932 	bl	8004494 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004230:	f000 f8dc 	bl	80043ec <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8004234:	f000 f8a4 	bl	8004380 <MX_SPI2_Init>
  MX_I2C1_Init();
 8004238:	f000 f874 	bl	8004324 <MX_I2C1_Init>
  MX_FATFS_Init();
 800423c:	f005 faf4 	bl	8009828 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8004240:	f000 f8fe 	bl	8004440 <MX_USART2_UART_Init>
  init_game();
 8004244:	f7fe f844 	bl	80022d0 <init_game>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  game_state_machine();
 8004248:	f7fe f898 	bl	800237c <game_state_machine>
 800424c:	e7fc      	b.n	8004248 <main+0x2c>
	...

08004250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b094      	sub	sp, #80	@ 0x50
 8004254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004256:	f107 0320 	add.w	r3, r7, #32
 800425a:	2230      	movs	r2, #48	@ 0x30
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f009 fb46 	bl	800d8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	4b28      	ldr	r3, [pc, #160]	@ (800431c <SystemClock_Config+0xcc>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	4a27      	ldr	r2, [pc, #156]	@ (800431c <SystemClock_Config+0xcc>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004282:	6413      	str	r3, [r2, #64]	@ 0x40
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <SystemClock_Config+0xcc>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	4b22      	ldr	r3, [pc, #136]	@ (8004320 <SystemClock_Config+0xd0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a21      	ldr	r2, [pc, #132]	@ (8004320 <SystemClock_Config+0xd0>)
 800429a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004320 <SystemClock_Config+0xd0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042ac:	2302      	movs	r3, #2
 80042ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042b4:	2310      	movs	r3, #16
 80042b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042b8:	2302      	movs	r3, #2
 80042ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80042c0:	2308      	movs	r3, #8
 80042c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80042c4:	2360      	movs	r3, #96	@ 0x60
 80042c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042c8:	2302      	movs	r3, #2
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80042cc:	2308      	movs	r3, #8
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042d0:	f107 0320 	add.w	r3, r7, #32
 80042d4:	4618      	mov	r0, r3
 80042d6:	f003 f85b 	bl	8007390 <HAL_RCC_OscConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80042e0:	f000 fa56 	bl	8004790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042e4:	230f      	movs	r3, #15
 80042e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042e8:	2302      	movs	r3, #2
 80042ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	2103      	movs	r1, #3
 8004302:	4618      	mov	r0, r3
 8004304:	f003 fabc 	bl	8007880 <HAL_RCC_ClockConfig>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800430e:	f000 fa3f 	bl	8004790 <Error_Handler>
  }
}
 8004312:	bf00      	nop
 8004314:	3750      	adds	r7, #80	@ 0x50
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	40007000 	.word	0x40007000

08004324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004328:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <MX_I2C1_Init+0x50>)
 800432a:	4a13      	ldr	r2, [pc, #76]	@ (8004378 <MX_I2C1_Init+0x54>)
 800432c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800432e:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004330:	4a12      	ldr	r2, [pc, #72]	@ (800437c <MX_I2C1_Init+0x58>)
 8004332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004334:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800433a:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <MX_I2C1_Init+0x50>)
 800433c:	2200      	movs	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004348:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <MX_I2C1_Init+0x50>)
 800434a:	2200      	movs	r2, #0
 800434c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800434e:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004350:	2200      	movs	r2, #0
 8004352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004354:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004356:	2200      	movs	r2, #0
 8004358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <MX_I2C1_Init+0x50>)
 800435c:	2200      	movs	r2, #0
 800435e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004360:	4804      	ldr	r0, [pc, #16]	@ (8004374 <MX_I2C1_Init+0x50>)
 8004362:	f001 fec3 	bl	80060ec <HAL_I2C_Init>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800436c:	f000 fa10 	bl	8004790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200012d8 	.word	0x200012d8
 8004378:	40005400 	.word	0x40005400
 800437c:	000186a0 	.word	0x000186a0

08004380 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <MX_SPI2_Init+0x64>)
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <MX_SPI2_Init+0x68>)
 8004388:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800438a:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <MX_SPI2_Init+0x64>)
 800438c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004390:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <MX_SPI2_Init+0x64>)
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004398:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <MX_SPI2_Init+0x64>)
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800439e:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043a4:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043be:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043ca:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043cc:	220a      	movs	r2, #10
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043d0:	4804      	ldr	r0, [pc, #16]	@ (80043e4 <MX_SPI2_Init+0x64>)
 80043d2:	f003 fc75 	bl	8007cc0 <HAL_SPI_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80043dc:	f000 f9d8 	bl	8004790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	2000132c 	.word	0x2000132c
 80043e8:	40003800 	.word	0x40003800

080043ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <MX_USART1_UART_Init+0x50>)
 80043f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043f6:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 80043f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004404:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004410:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 8004412:	220c      	movs	r2, #12
 8004414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004422:	4805      	ldr	r0, [pc, #20]	@ (8004438 <MX_USART1_UART_Init+0x4c>)
 8004424:	f004 fa00 	bl	8008828 <HAL_HalfDuplex_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800442e:	f000 f9af 	bl	8004790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20001444 	.word	0x20001444
 800443c:	40011000 	.word	0x40011000

08004440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <MX_USART2_UART_Init+0x50>)
 8004448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 800444c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004452:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004458:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 800445a:	2200      	movs	r2, #0
 800445c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004466:	220c      	movs	r2, #12
 8004468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004472:	2200      	movs	r2, #0
 8004474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004476:	4805      	ldr	r0, [pc, #20]	@ (800448c <MX_USART2_UART_Init+0x4c>)
 8004478:	f004 f986 	bl	8008788 <HAL_UART_Init>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004482:	f000 f985 	bl	8004790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000148c 	.word	0x2000148c
 8004490:	40004400 	.word	0x40004400

08004494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <MX_DMA_Init+0x88>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <MX_DMA_Init+0x88>)
 80044a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044aa:	4b1c      	ldr	r3, [pc, #112]	@ (800451c <MX_DMA_Init+0x88>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4b18      	ldr	r3, [pc, #96]	@ (800451c <MX_DMA_Init+0x88>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	4a17      	ldr	r2, [pc, #92]	@ (800451c <MX_DMA_Init+0x88>)
 80044c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c6:	4b15      	ldr	r3, [pc, #84]	@ (800451c <MX_DMA_Init+0x88>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	200e      	movs	r0, #14
 80044d8:	f001 f887 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80044dc:	200e      	movs	r0, #14
 80044de:	f001 f8a0 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	200f      	movs	r0, #15
 80044e8:	f001 f87f 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80044ec:	200f      	movs	r0, #15
 80044ee:	f001 f898 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	203a      	movs	r0, #58	@ 0x3a
 80044f8:	f001 f877 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80044fc:	203a      	movs	r0, #58	@ 0x3a
 80044fe:	f001 f890 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	2100      	movs	r1, #0
 8004506:	2046      	movs	r0, #70	@ 0x46
 8004508:	f001 f86f 	bl	80055ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800450c:	2046      	movs	r0, #70	@ 0x46
 800450e:	f001 f888 	bl	8005622 <HAL_NVIC_EnableIRQ>

}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	@ 0x30
 8004524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	4b86      	ldr	r3, [pc, #536]	@ (8004754 <MX_GPIO_Init+0x234>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	4a85      	ldr	r2, [pc, #532]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	6313      	str	r3, [r2, #48]	@ 0x30
 8004546:	4b83      	ldr	r3, [pc, #524]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	4b7f      	ldr	r3, [pc, #508]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4a7e      	ldr	r2, [pc, #504]	@ (8004754 <MX_GPIO_Init+0x234>)
 800455c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004560:	6313      	str	r3, [r2, #48]	@ 0x30
 8004562:	4b7c      	ldr	r3, [pc, #496]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	4b78      	ldr	r3, [pc, #480]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	4a77      	ldr	r2, [pc, #476]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6313      	str	r3, [r2, #48]	@ 0x30
 800457e:	4b75      	ldr	r3, [pc, #468]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b71      	ldr	r3, [pc, #452]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	4a70      	ldr	r2, [pc, #448]	@ (8004754 <MX_GPIO_Init+0x234>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	6313      	str	r3, [r2, #48]	@ 0x30
 800459a:	4b6e      	ldr	r3, [pc, #440]	@ (8004754 <MX_GPIO_Init+0x234>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	4a69      	ldr	r2, [pc, #420]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b6:	4b67      	ldr	r3, [pc, #412]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	4b63      	ldr	r3, [pc, #396]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	4a62      	ldr	r2, [pc, #392]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d2:	4b60      	ldr	r3, [pc, #384]	@ (8004754 <MX_GPIO_Init+0x234>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80045de:	2201      	movs	r2, #1
 80045e0:	2101      	movs	r1, #1
 80045e2:	485d      	ldr	r0, [pc, #372]	@ (8004758 <MX_GPIO_Init+0x238>)
 80045e4:	f001 fd50 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80045e8:	2200      	movs	r2, #0
 80045ea:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80045ee:	485b      	ldr	r0, [pc, #364]	@ (800475c <MX_GPIO_Init+0x23c>)
 80045f0:	f001 fd4a 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80045f4:	2200      	movs	r2, #0
 80045f6:	f24f 2110 	movw	r1, #61968	@ 0xf210
 80045fa:	4859      	ldr	r0, [pc, #356]	@ (8004760 <MX_GPIO_Init+0x240>)
 80045fc:	f001 fd44 	bl	8006088 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	@ 0x80
 8004604:	4854      	ldr	r0, [pc, #336]	@ (8004758 <MX_GPIO_Init+0x238>)
 8004606:	f001 fd3f 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004610:	4854      	ldr	r0, [pc, #336]	@ (8004764 <MX_GPIO_Init+0x244>)
 8004612:	f001 fd39 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8004616:	2381      	movs	r3, #129	@ 0x81
 8004618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461a:	2301      	movs	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004626:	f107 031c 	add.w	r3, r7, #28
 800462a:	4619      	mov	r1, r3
 800462c:	484a      	ldr	r0, [pc, #296]	@ (8004758 <MX_GPIO_Init+0x238>)
 800462e:	f001 fb8f 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004632:	2308      	movs	r3, #8
 8004634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	2302      	movs	r3, #2
 8004638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463e:	2300      	movs	r3, #0
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004642:	2305      	movs	r3, #5
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004646:	f107 031c 	add.w	r3, r7, #28
 800464a:	4619      	mov	r1, r3
 800464c:	4842      	ldr	r0, [pc, #264]	@ (8004758 <MX_GPIO_Init+0x238>)
 800464e:	f001 fb7f 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004652:	2301      	movs	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004656:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800465a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	4619      	mov	r1, r3
 8004666:	483f      	ldr	r0, [pc, #252]	@ (8004764 <MX_GPIO_Init+0x244>)
 8004668:	f001 fb72 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800466c:	2320      	movs	r3, #32
 800466e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	4619      	mov	r1, r3
 800467e:	4836      	ldr	r0, [pc, #216]	@ (8004758 <MX_GPIO_Init+0x238>)
 8004680:	f001 fb66 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468a:	2301      	movs	r3, #1
 800468c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004692:	2300      	movs	r3, #0
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004696:	f107 031c 	add.w	r3, r7, #28
 800469a:	4619      	mov	r1, r3
 800469c:	482f      	ldr	r0, [pc, #188]	@ (800475c <MX_GPIO_Init+0x23c>)
 800469e:	f001 fb57 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80046a2:	f24f 2310 	movw	r3, #61968	@ 0xf210
 80046a6:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a8:	2301      	movs	r3, #1
 80046aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b4:	f107 031c 	add.w	r3, r7, #28
 80046b8:	4619      	mov	r1, r3
 80046ba:	4829      	ldr	r0, [pc, #164]	@ (8004760 <MX_GPIO_Init+0x240>)
 80046bc:	f001 fb48 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80046c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80046ce:	f107 031c 	add.w	r3, r7, #28
 80046d2:	4619      	mov	r1, r3
 80046d4:	4823      	ldr	r0, [pc, #140]	@ (8004764 <MX_GPIO_Init+0x244>)
 80046d6:	f001 fb3b 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e0:	2301      	movs	r3, #1
 80046e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ec:	f107 031c 	add.w	r3, r7, #28
 80046f0:	4619      	mov	r1, r3
 80046f2:	481c      	ldr	r0, [pc, #112]	@ (8004764 <MX_GPIO_Init+0x244>)
 80046f4:	f001 fb2c 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80046f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80046fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004706:	2303      	movs	r3, #3
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800470a:	230a      	movs	r3, #10
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	4619      	mov	r1, r3
 8004714:	4813      	ldr	r0, [pc, #76]	@ (8004764 <MX_GPIO_Init+0x244>)
 8004716:	f001 fb1b 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800471a:	2320      	movs	r3, #32
 800471c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800471e:	2300      	movs	r3, #0
 8004720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004726:	f107 031c 	add.w	r3, r7, #28
 800472a:	4619      	mov	r1, r3
 800472c:	480c      	ldr	r0, [pc, #48]	@ (8004760 <MX_GPIO_Init+0x240>)
 800472e:	f001 fb0f 	bl	8005d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004732:	2302      	movs	r3, #2
 8004734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004736:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800473a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004740:	f107 031c 	add.w	r3, r7, #28
 8004744:	4619      	mov	r1, r3
 8004746:	4808      	ldr	r0, [pc, #32]	@ (8004768 <MX_GPIO_Init+0x248>)
 8004748:	f001 fb02 	bl	8005d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800474c:	bf00      	nop
 800474e:	3730      	adds	r7, #48	@ 0x30
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	40020800 	.word	0x40020800
 800475c:	40020400 	.word	0x40020400
 8004760:	40020c00 	.word	0x40020c00
 8004764:	40020000 	.word	0x40020000
 8004768:	40021000 	.word	0x40021000

0800476c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004774:	1d39      	adds	r1, r7, #4
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	2201      	movs	r2, #1
 800477c:	4803      	ldr	r0, [pc, #12]	@ (800478c <__io_putchar+0x20>)
 800477e:	f004 f8ab 	bl	80088d8 <HAL_UART_Transmit>
  return ch;
 8004782:	687b      	ldr	r3, [r7, #4]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000148c 	.word	0x2000148c

08004790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004794:	b672      	cpsid	i
}
 8004796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <Error_Handler+0x8>

0800479c <Push_Button_Init>:
// Variables to track button states
volatile uint8_t battle_button_state = 0; // For PC13 (Battle)
volatile uint8_t capture_button_state = 0; // For PC14 (Capture)

// Initialize both buttons: PC13 for Battle, PC14 for Capture
void Push_Button_Init(void) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]

    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b0:	2300      	movs	r3, #0
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4b18      	ldr	r3, [pc, #96]	@ (8004818 <Push_Button_Init+0x7c>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <Push_Button_Init+0x7c>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6313      	str	r3, [r2, #48]	@ 0x30
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <Push_Button_Init+0x7c>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as input with pull-up resistor (Battle Button)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80047cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 80047d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80047d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d8:	2301      	movs	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	480e      	ldr	r0, [pc, #56]	@ (800481c <Push_Button_Init+0x80>)
 80047e2:	f001 fab5 	bl	8005d50 <HAL_GPIO_Init>

    // Configure PC14 as input with pull-up resistor (Capture Button)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80047e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047ea:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 80047ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80047f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f2:	2301      	movs	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4808      	ldr	r0, [pc, #32]	@ (800481c <Push_Button_Init+0x80>)
 80047fc:	f001 faa8 	bl	8005d50 <HAL_GPIO_Init>

    // Enable and set EXTI Line 15-10 Interrupt to the lowest priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8004800:	2200      	movs	r2, #0
 8004802:	2102      	movs	r1, #2
 8004804:	2028      	movs	r0, #40	@ 0x28
 8004806:	f000 fef0 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800480a:	2028      	movs	r0, #40	@ 0x28
 800480c:	f000 ff09 	bl	8005622 <HAL_NVIC_EnableIRQ>
}
 8004810:	bf00      	nop
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	40020800 	.word	0x40020800

08004820 <LED_init>:

void LED_init(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	611a      	str	r2, [r3, #16]

    // Enable Clocks
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <LED_init+0x100>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <LED_init+0x100>)
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	6313      	str	r3, [r2, #48]	@ 0x30
 8004846:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <LED_init+0x100>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	4b32      	ldr	r3, [pc, #200]	@ (8004920 <LED_init+0x100>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	4a31      	ldr	r2, [pc, #196]	@ (8004920 <LED_init+0x100>)
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	6313      	str	r3, [r2, #48]	@ 0x30
 8004862:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <LED_init+0x100>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <LED_init+0x100>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <LED_init+0x100>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6313      	str	r3, [r2, #48]	@ 0x30
 800487e:	4b28      	ldr	r3, [pc, #160]	@ (8004920 <LED_init+0x100>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <LED_init+0x100>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	4a23      	ldr	r2, [pc, #140]	@ (8004920 <LED_init+0x100>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6313      	str	r3, [r2, #48]	@ 0x30
 800489a:	4b21      	ldr	r3, [pc, #132]	@ (8004920 <LED_init+0x100>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]

    // Configure Green LEDs (G1 - PD15, G2 - PE15, G3 - PE13)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4619      	mov	r1, r3
 80048be:	4819      	ldr	r0, [pc, #100]	@ (8004924 <LED_init+0x104>)
 80048c0:	f001 fa46 	bl	8005d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_13;
 80048c4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80048c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048ca:	f107 0314 	add.w	r3, r7, #20
 80048ce:	4619      	mov	r1, r3
 80048d0:	4815      	ldr	r0, [pc, #84]	@ (8004928 <LED_init+0x108>)
 80048d2:	f001 fa3d 	bl	8005d50 <HAL_GPIO_Init>

    // Configure Yellow LEDs (Y1 - PE11, Y2 - PE7, Y3 - PA5)
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_7;
 80048d6:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80048da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4619      	mov	r1, r3
 80048e2:	4811      	ldr	r0, [pc, #68]	@ (8004928 <LED_init+0x108>)
 80048e4:	f001 fa34 	bl	8005d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048e8:	2320      	movs	r3, #32
 80048ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4619      	mov	r1, r3
 80048f2:	480e      	ldr	r0, [pc, #56]	@ (800492c <LED_init+0x10c>)
 80048f4:	f001 fa2c 	bl	8005d50 <HAL_GPIO_Init>

    // Configure Red LEDs (R1 - PA1, R2 - PC3, R3 - PC1)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80048f8:	2302      	movs	r3, #2
 80048fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4619      	mov	r1, r3
 8004902:	480a      	ldr	r0, [pc, #40]	@ (800492c <LED_init+0x10c>)
 8004904:	f001 fa24 	bl	8005d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_1;
 8004908:	230a      	movs	r3, #10
 800490a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4619      	mov	r1, r3
 8004912:	4807      	ldr	r0, [pc, #28]	@ (8004930 <LED_init+0x110>)
 8004914:	f001 fa1c 	bl	8005d50 <HAL_GPIO_Init>
}
 8004918:	bf00      	nop
 800491a:	3728      	adds	r7, #40	@ 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	40020c00 	.word	0x40020c00
 8004928:	40021000 	.word	0x40021000
 800492c:	40020000 	.word	0x40020000
 8004930:	40020800 	.word	0x40020800

08004934 <UpdateLEDs>:

void UpdateLEDs(int health_percentage) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	    // Reset all LEDs before updating
	    reset_health_leds();
 800493c:	f000 f87a 	bl	8004a34 <reset_health_leds>

	    if (health_percentage > 75) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b4b      	cmp	r3, #75	@ 0x4b
 8004944:	dd12      	ble.n	800496c <UpdateLEDs+0x38>
	        // Turn ON all Green LEDs (reversed logic)
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // G1 - PD15
 8004946:	2201      	movs	r2, #1
 8004948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800494c:	4835      	ldr	r0, [pc, #212]	@ (8004a24 <UpdateLEDs+0xf0>)
 800494e:	f001 fb9b 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET); // G2 - PE15
 8004952:	2201      	movs	r2, #1
 8004954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004958:	4833      	ldr	r0, [pc, #204]	@ (8004a28 <UpdateLEDs+0xf4>)
 800495a:	f001 fb95 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET); // G3 - PE13
 800495e:	2201      	movs	r2, #1
 8004960:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004964:	4830      	ldr	r0, [pc, #192]	@ (8004a28 <UpdateLEDs+0xf4>)
 8004966:	f001 fb8f 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Y3 - PA5
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // R1 - PA1
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);  // R2 - PC3
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);  // R3 - PC1
	    }
	}
 800496a:	e056      	b.n	8004a1a <UpdateLEDs+0xe6>
	    } else if (health_percentage > 40) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b28      	cmp	r3, #40	@ 0x28
 8004970:	dd22      	ble.n	80049b8 <UpdateLEDs+0x84>
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // G1 - PD15
 8004972:	2200      	movs	r2, #0
 8004974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004978:	482a      	ldr	r0, [pc, #168]	@ (8004a24 <UpdateLEDs+0xf0>)
 800497a:	f001 fb85 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET); // G2 - PE15
 800497e:	2200      	movs	r2, #0
 8004980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004984:	4828      	ldr	r0, [pc, #160]	@ (8004a28 <UpdateLEDs+0xf4>)
 8004986:	f001 fb7f 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); // G3 - PE13
 800498a:	2200      	movs	r2, #0
 800498c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004990:	4825      	ldr	r0, [pc, #148]	@ (8004a28 <UpdateLEDs+0xf4>)
 8004992:	f001 fb79 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // Y1 - PE11
 8004996:	2201      	movs	r2, #1
 8004998:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800499c:	4822      	ldr	r0, [pc, #136]	@ (8004a28 <UpdateLEDs+0xf4>)
 800499e:	f001 fb73 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);  // Y2 - PE7
 80049a2:	2201      	movs	r2, #1
 80049a4:	2180      	movs	r1, #128	@ 0x80
 80049a6:	4820      	ldr	r0, [pc, #128]	@ (8004a28 <UpdateLEDs+0xf4>)
 80049a8:	f001 fb6e 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Y3 - PA5
 80049ac:	2201      	movs	r2, #1
 80049ae:	2120      	movs	r1, #32
 80049b0:	481e      	ldr	r0, [pc, #120]	@ (8004a2c <UpdateLEDs+0xf8>)
 80049b2:	f001 fb69 	bl	8006088 <HAL_GPIO_WritePin>
	}
 80049b6:	e030      	b.n	8004a1a <UpdateLEDs+0xe6>
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // G1 - PD15
 80049b8:	2200      	movs	r2, #0
 80049ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049be:	4819      	ldr	r0, [pc, #100]	@ (8004a24 <UpdateLEDs+0xf0>)
 80049c0:	f001 fb62 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET); // G2 - PE15
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ca:	4817      	ldr	r0, [pc, #92]	@ (8004a28 <UpdateLEDs+0xf4>)
 80049cc:	f001 fb5c 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); // G3 - PE13
 80049d0:	2200      	movs	r2, #0
 80049d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049d6:	4814      	ldr	r0, [pc, #80]	@ (8004a28 <UpdateLEDs+0xf4>)
 80049d8:	f001 fb56 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // Y1 - PE11
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049e2:	4811      	ldr	r0, [pc, #68]	@ (8004a28 <UpdateLEDs+0xf4>)
 80049e4:	f001 fb50 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);  // Y2 - PE7
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	@ 0x80
 80049ec:	480e      	ldr	r0, [pc, #56]	@ (8004a28 <UpdateLEDs+0xf4>)
 80049ee:	f001 fb4b 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Y3 - PA5
 80049f2:	2200      	movs	r2, #0
 80049f4:	2120      	movs	r1, #32
 80049f6:	480d      	ldr	r0, [pc, #52]	@ (8004a2c <UpdateLEDs+0xf8>)
 80049f8:	f001 fb46 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // R1 - PA1
 80049fc:	2201      	movs	r2, #1
 80049fe:	2102      	movs	r1, #2
 8004a00:	480a      	ldr	r0, [pc, #40]	@ (8004a2c <UpdateLEDs+0xf8>)
 8004a02:	f001 fb41 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);  // R2 - PC3
 8004a06:	2201      	movs	r2, #1
 8004a08:	2108      	movs	r1, #8
 8004a0a:	4809      	ldr	r0, [pc, #36]	@ (8004a30 <UpdateLEDs+0xfc>)
 8004a0c:	f001 fb3c 	bl	8006088 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);  // R3 - PC1
 8004a10:	2201      	movs	r2, #1
 8004a12:	2102      	movs	r1, #2
 8004a14:	4806      	ldr	r0, [pc, #24]	@ (8004a30 <UpdateLEDs+0xfc>)
 8004a16:	f001 fb37 	bl	8006088 <HAL_GPIO_WritePin>
	}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40020c00 	.word	0x40020c00
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	40020800 	.word	0x40020800

08004a34 <reset_health_leds>:


void reset_health_leds() {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
    // Turn off all Green LEDs
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // G1 - PD15
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a3e:	4818      	ldr	r0, [pc, #96]	@ (8004aa0 <reset_health_leds+0x6c>)
 8004a40:	f001 fb22 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET); // G2 - PE15
 8004a44:	2201      	movs	r2, #1
 8004a46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a4a:	4816      	ldr	r0, [pc, #88]	@ (8004aa4 <reset_health_leds+0x70>)
 8004a4c:	f001 fb1c 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET); // G3 - PE13
 8004a50:	2201      	movs	r2, #1
 8004a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a56:	4813      	ldr	r0, [pc, #76]	@ (8004aa4 <reset_health_leds+0x70>)
 8004a58:	f001 fb16 	bl	8006088 <HAL_GPIO_WritePin>

    // Turn off all Yellow LEDs
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // Y1 - PE11
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a62:	4810      	ldr	r0, [pc, #64]	@ (8004aa4 <reset_health_leds+0x70>)
 8004a64:	f001 fb10 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);  // Y2 - PE7
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2180      	movs	r1, #128	@ 0x80
 8004a6c:	480d      	ldr	r0, [pc, #52]	@ (8004aa4 <reset_health_leds+0x70>)
 8004a6e:	f001 fb0b 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Y3 - PA5
 8004a72:	2201      	movs	r2, #1
 8004a74:	2120      	movs	r1, #32
 8004a76:	480c      	ldr	r0, [pc, #48]	@ (8004aa8 <reset_health_leds+0x74>)
 8004a78:	f001 fb06 	bl	8006088 <HAL_GPIO_WritePin>

    // Turn off all Red LEDs
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // R1 - PA1
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4809      	ldr	r0, [pc, #36]	@ (8004aa8 <reset_health_leds+0x74>)
 8004a82:	f001 fb01 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);  // R2 - PC3
 8004a86:	2201      	movs	r2, #1
 8004a88:	2108      	movs	r1, #8
 8004a8a:	4808      	ldr	r0, [pc, #32]	@ (8004aac <reset_health_leds+0x78>)
 8004a8c:	f001 fafc 	bl	8006088 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);  // R3 - PC1
 8004a90:	2201      	movs	r2, #1
 8004a92:	2102      	movs	r1, #2
 8004a94:	4805      	ldr	r0, [pc, #20]	@ (8004aac <reset_health_leds+0x78>)
 8004a96:	f001 faf7 	bl	8006088 <HAL_GPIO_WritePin>
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40020000 	.word	0x40020000
 8004aac:	40020800 	.word	0x40020800

08004ab0 <EXTI15_10_IRQHandler>:
// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8004ab4:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <EXTI15_10_IRQHandler+0x48>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <EXTI15_10_IRQHandler+0x48>)
 8004ac2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ac6:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <EXTI15_10_IRQHandler+0x4c>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 8004ace:	480c      	ldr	r0, [pc, #48]	@ (8004b00 <EXTI15_10_IRQHandler+0x50>)
 8004ad0:	f000 fbd0 	bl	8005274 <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8004ad4:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <EXTI15_10_IRQHandler+0x48>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <EXTI15_10_IRQHandler+0x48>)
 8004ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ae6:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <EXTI15_10_IRQHandler+0x54>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 8004aee:	4806      	ldr	r0, [pc, #24]	@ (8004b08 <EXTI15_10_IRQHandler+0x58>)
 8004af0:	f000 fbc0 	bl	8005274 <uart_send_string>
    }
}
 8004af4:	bf00      	nop
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40013c00 	.word	0x40013c00
 8004afc:	20001594 	.word	0x20001594
 8004b00:	08010590 	.word	0x08010590
 8004b04:	20001595 	.word	0x20001595
 8004b08:	080105ac 	.word	0x080105ac

08004b0c <Get_Battle_Button_State>:

// Getter functions for button states
uint8_t Get_Battle_Button_State(void) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
    return battle_button_state;
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <Get_Battle_Button_State+0x14>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20001594 	.word	0x20001594

08004b24 <Get_Capture_Button_State>:

uint8_t Get_Capture_Button_State(void) {
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
    return capture_button_state;
 8004b28:	4b03      	ldr	r3, [pc, #12]	@ (8004b38 <Get_Capture_Button_State+0x14>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20001595 	.word	0x20001595

08004b3c <Reset_Button_State>:

// Reset both button states
void Reset_Button_State(void) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
    battle_button_state = 0;
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <Reset_Button_State+0x1c>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
    capture_button_state = 0;
 8004b46:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <Reset_Button_State+0x20>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20001594 	.word	0x20001594
 8004b5c:	20001595 	.word	0x20001595

08004b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	4b10      	ldr	r3, [pc, #64]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	4a08      	ldr	r2, [pc, #32]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_MspInit+0x4c>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004b9e:	2007      	movs	r0, #7
 8004ba0:	f000 fd18 	bl	80055d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <HAL_I2C_MspInit+0x84>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d12c      	bne.n	8004c2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be2:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf4:	2312      	movs	r3, #18
 8004bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c00:	2304      	movs	r3, #4
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	4619      	mov	r1, r3
 8004c0a:	480c      	ldr	r0, [pc, #48]	@ (8004c3c <HAL_I2C_MspInit+0x8c>)
 8004c0c:	f001 f8a0 	bl	8005d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c2c:	bf00      	nop
 8004c2e:	3728      	adds	r7, #40	@ 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40005400 	.word	0x40005400
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40020400 	.word	0x40020400

08004c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004d90 <HAL_SPI_MspInit+0x150>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f040 8091 	bne.w	8004d86 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	4b4a      	ldr	r3, [pc, #296]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	4a49      	ldr	r2, [pc, #292]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c74:	4b47      	ldr	r3, [pc, #284]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c88:	4a42      	ldr	r2, [pc, #264]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c90:	4b40      	ldr	r3, [pc, #256]	@ (8004d94 <HAL_SPI_MspInit+0x154>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004c9c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004caa:	2303      	movs	r3, #3
 8004cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cae:	2305      	movs	r3, #5
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4837      	ldr	r0, [pc, #220]	@ (8004d98 <HAL_SPI_MspInit+0x158>)
 8004cba:	f001 f849 	bl	8005d50 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cc0:	4a37      	ldr	r2, [pc, #220]	@ (8004da0 <HAL_SPI_MspInit+0x160>)
 8004cc2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cca:	4b34      	ldr	r3, [pc, #208]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004ccc:	2240      	movs	r2, #64	@ 0x40
 8004cce:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cd0:	4b32      	ldr	r3, [pc, #200]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cd6:	4b31      	ldr	r3, [pc, #196]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cdc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cde:	4b2f      	ldr	r3, [pc, #188]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cf2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cf6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cf8:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004cfe:	4827      	ldr	r0, [pc, #156]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004d00:	f000 fcaa 	bl	8005658 <HAL_DMA_Init>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8004d0a:	f7ff fd41 	bl	8004790 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a22      	ldr	r2, [pc, #136]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004d12:	649a      	str	r2, [r3, #72]	@ 0x48
 8004d14:	4a21      	ldr	r2, [pc, #132]	@ (8004d9c <HAL_SPI_MspInit+0x15c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004d1a:	4b22      	ldr	r3, [pc, #136]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d1c:	4a22      	ldr	r2, [pc, #136]	@ (8004da8 <HAL_SPI_MspInit+0x168>)
 8004d1e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004d20:	4b20      	ldr	r3, [pc, #128]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d26:	4b1f      	ldr	r3, [pc, #124]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d32:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d38:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004d46:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d4c:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d52:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d54:	4b13      	ldr	r3, [pc, #76]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004d5a:	4812      	ldr	r0, [pc, #72]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d5c:	f000 fc7c 	bl	8005658 <HAL_DMA_Init>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8004d66:	f7ff fd13 	bl	8004790 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004d70:	4a0c      	ldr	r2, [pc, #48]	@ (8004da4 <HAL_SPI_MspInit+0x164>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2024      	movs	r0, #36	@ 0x24
 8004d7c:	f000 fc35 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004d80:	2024      	movs	r0, #36	@ 0x24
 8004d82:	f000 fc4e 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d86:	bf00      	nop
 8004d88:	3728      	adds	r7, #40	@ 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40003800 	.word	0x40003800
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020400 	.word	0x40020400
 8004d9c:	20001384 	.word	0x20001384
 8004da0:	40026070 	.word	0x40026070
 8004da4:	200013e4 	.word	0x200013e4
 8004da8:	40026058 	.word	0x40026058

08004dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	@ 0x30
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db4:	f107 031c 	add.w	r3, r7, #28
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a65      	ldr	r2, [pc, #404]	@ (8004f60 <HAL_UART_MspInit+0x1b4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	f040 8092 	bne.w	8004ef4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	4b63      	ldr	r3, [pc, #396]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd8:	4a62      	ldr	r2, [pc, #392]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004dda:	f043 0310 	orr.w	r3, r3, #16
 8004dde:	6453      	str	r3, [r2, #68]	@ 0x44
 8004de0:	4b60      	ldr	r3, [pc, #384]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	4a5b      	ldr	r2, [pc, #364]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dfc:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e0e:	2312      	movs	r3, #18
 8004e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e16:	2303      	movs	r3, #3
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	f107 031c 	add.w	r3, r7, #28
 8004e22:	4619      	mov	r1, r3
 8004e24:	4850      	ldr	r0, [pc, #320]	@ (8004f68 <HAL_UART_MspInit+0x1bc>)
 8004e26:	f000 ff93 	bl	8005d50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004e2a:	4b50      	ldr	r3, [pc, #320]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e2c:	4a50      	ldr	r2, [pc, #320]	@ (8004f70 <HAL_UART_MspInit+0x1c4>)
 8004e2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004e30:	4b4e      	ldr	r3, [pc, #312]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e38:	4b4c      	ldr	r3, [pc, #304]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e44:	4b49      	ldr	r3, [pc, #292]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e4c:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e52:	4b46      	ldr	r3, [pc, #280]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004e58:	4b44      	ldr	r3, [pc, #272]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e5e:	4b43      	ldr	r3, [pc, #268]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e64:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e6a:	4840      	ldr	r0, [pc, #256]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e6c:	f000 fbf4 	bl	8005658 <HAL_DMA_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004e76:	f7ff fc8b 	bl	8004790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e80:	4a3a      	ldr	r2, [pc, #232]	@ (8004f6c <HAL_UART_MspInit+0x1c0>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004e88:	4a3b      	ldr	r2, [pc, #236]	@ (8004f78 <HAL_UART_MspInit+0x1cc>)
 8004e8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004e8c:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004e8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e94:	4b37      	ldr	r3, [pc, #220]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004e96:	2240      	movs	r2, #64	@ 0x40
 8004e98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e9a:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ea0:	4b34      	ldr	r3, [pc, #208]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ea6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ea8:	4b32      	ldr	r3, [pc, #200]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eae:	4b31      	ldr	r3, [pc, #196]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eba:	4b2e      	ldr	r3, [pc, #184]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004ec6:	482b      	ldr	r0, [pc, #172]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004ec8:	f000 fbc6 	bl	8005658 <HAL_DMA_Init>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004ed2:	f7ff fc5d 	bl	8004790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
 8004edc:	4a25      	ldr	r2, [pc, #148]	@ (8004f74 <HAL_UART_MspInit+0x1c8>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2025      	movs	r0, #37	@ 0x25
 8004ee8:	f000 fb7f 	bl	80055ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004eec:	2025      	movs	r0, #37	@ 0x25
 8004eee:	f000 fb98 	bl	8005622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ef2:	e030      	b.n	8004f56 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	@ (8004f7c <HAL_UART_MspInit+0x1d0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d12b      	bne.n	8004f56 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	4b11      	ldr	r3, [pc, #68]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	4a10      	ldr	r2, [pc, #64]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <HAL_UART_MspInit+0x1b8>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f36:	230c      	movs	r3, #12
 8004f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f42:	2303      	movs	r3, #3
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f46:	2307      	movs	r3, #7
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4805      	ldr	r0, [pc, #20]	@ (8004f68 <HAL_UART_MspInit+0x1bc>)
 8004f52:	f000 fefd 	bl	8005d50 <HAL_GPIO_Init>
}
 8004f56:	bf00      	nop
 8004f58:	3730      	adds	r7, #48	@ 0x30
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40011000 	.word	0x40011000
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40020000 	.word	0x40020000
 8004f6c:	200014d4 	.word	0x200014d4
 8004f70:	40026440 	.word	0x40026440
 8004f74:	20001534 	.word	0x20001534
 8004f78:	400264b8 	.word	0x400264b8
 8004f7c:	40004400 	.word	0x40004400

08004f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <NMI_Handler+0x4>

08004f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <HardFault_Handler+0x4>

08004f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <MemManage_Handler+0x4>

08004f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <BusFault_Handler+0x4>

08004fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <UsageFault_Handler+0x4>

08004fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <SysTick_Handler+0x34>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <SysTick_Handler+0x18>
	  Timer1--;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <SysTick_Handler+0x34>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <SysTick_Handler+0x34>)
 8004fea:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8004fec:	4b07      	ldr	r3, [pc, #28]	@ (800500c <SysTick_Handler+0x38>)
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <SysTick_Handler+0x2c>
	  Timer2--;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <SysTick_Handler+0x38>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	4b03      	ldr	r3, [pc, #12]	@ (800500c <SysTick_Handler+0x38>)
 8004ffe:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005000:	f000 f9d4 	bl	80053ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000248 	.word	0x20000248
 800500c:	2000024a 	.word	0x2000024a

08005010 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005014:	4802      	ldr	r0, [pc, #8]	@ (8005020 <DMA1_Stream3_IRQHandler+0x10>)
 8005016:	f000 fc5f 	bl	80058d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200013e4 	.word	0x200013e4

08005024 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005028:	4802      	ldr	r0, [pc, #8]	@ (8005034 <DMA1_Stream4_IRQHandler+0x10>)
 800502a:	f000 fc55 	bl	80058d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20001384 	.word	0x20001384

08005038 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800503c:	4802      	ldr	r0, [pc, #8]	@ (8005048 <SPI2_IRQHandler+0x10>)
 800503e:	f003 f9b5 	bl	80083ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000132c 	.word	0x2000132c

0800504c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005050:	4802      	ldr	r0, [pc, #8]	@ (800505c <USART1_IRQHandler+0x10>)
 8005052:	f003 fccd 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20001444 	.word	0x20001444

08005060 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005064:	4802      	ldr	r0, [pc, #8]	@ (8005070 <DMA2_Stream2_IRQHandler+0x10>)
 8005066:	f000 fc37 	bl	80058d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200014d4 	.word	0x200014d4

08005074 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005078:	4802      	ldr	r0, [pc, #8]	@ (8005084 <DMA2_Stream7_IRQHandler+0x10>)
 800507a:	f000 fc2d 	bl	80058d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20001534 	.word	0x20001534

08005088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return 1;
 800508c:	2301      	movs	r3, #1
}
 800508e:	4618      	mov	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_kill>:

int _kill(int pid, int sig)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050a2:	f008 fc77 	bl	800d994 <__errno>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2216      	movs	r2, #22
 80050aa:	601a      	str	r2, [r3, #0]
  return -1;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <_exit>:

void _exit (int status)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050c0:	f04f 31ff 	mov.w	r1, #4294967295
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ffe7 	bl	8005098 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <_exit+0x12>

080050ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e00a      	b.n	80050f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050e0:	f3af 8000 	nop.w
 80050e4:	4601      	mov	r1, r0
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	60ba      	str	r2, [r7, #8]
 80050ec:	b2ca      	uxtb	r2, r1
 80050ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	3301      	adds	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	dbf0      	blt.n	80050e0 <_read+0x12>
  }

  return len;
 80050fe:	687b      	ldr	r3, [r7, #4]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e009      	b.n	800512e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	60ba      	str	r2, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fb22 	bl	800476c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3301      	adds	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	dbf1      	blt.n	800511a <_write+0x12>
  }
  return len;
 8005136:	687b      	ldr	r3, [r7, #4]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <_close>:

int _close(int file)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005168:	605a      	str	r2, [r3, #4]
  return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_isatty>:

int _isatty(int file)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005180:	2301      	movs	r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b0:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <_sbrk+0x5c>)
 80051b2:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <_sbrk+0x60>)
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c4:	4b11      	ldr	r3, [pc, #68]	@ (800520c <_sbrk+0x64>)
 80051c6:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <_sbrk+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051d8:	f008 fbdc 	bl	800d994 <__errno>
 80051dc:	4603      	mov	r3, r0
 80051de:	220c      	movs	r2, #12
 80051e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	e009      	b.n	80051fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051e8:	4b08      	ldr	r3, [pc, #32]	@ (800520c <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a05      	ldr	r2, [pc, #20]	@ (800520c <_sbrk+0x64>)
 80051f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20020000 	.word	0x20020000
 8005208:	00000400 	.word	0x00000400
 800520c:	20001598 	.word	0x20001598
 8005210:	20001928 	.word	0x20001928

08005214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <SystemInit+0x20>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	4a05      	ldr	r2, [pc, #20]	@ (8005234 <SystemInit+0x20>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <USART2_IRQHandler>:
// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
}

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <USART2_IRQHandler+0x38>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <USART2_IRQHandler+0x38>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 8005250:	bf00      	nop
 8005252:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <USART2_IRQHandler+0x38>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f9      	beq.n	8005252 <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 800525e:	4a04      	ldr	r2, [pc, #16]	@ (8005270 <USART2_IRQHandler+0x38>)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	6053      	str	r3, [r2, #4]
    }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40004400 	.word	0x40004400

08005274 <uart_send_string>:

void uart_send_string(const char *str) {
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800527c:	e00c      	b.n	8005298 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 800527e:	bf00      	nop
 8005280:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <uart_send_string+0x3c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f9      	beq.n	8005280 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <uart_send_string+0x3c>)
 8005296:	605a      	str	r2, [r3, #4]
    while (*str) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ee      	bne.n	800527e <uart_send_string+0xa>
    }
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40004400 	.word	0x40004400

080052b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80052b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80052ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052b8:	f7ff ffac 	bl	8005214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052bc:	480c      	ldr	r0, [pc, #48]	@ (80052f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80052be:	490d      	ldr	r1, [pc, #52]	@ (80052f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80052c0:	4a0d      	ldr	r2, [pc, #52]	@ (80052f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80052c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052c4:	e002      	b.n	80052cc <LoopCopyDataInit>

080052c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ca:	3304      	adds	r3, #4

080052cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d0:	d3f9      	bcc.n	80052c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052d2:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80052d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d8:	e001      	b.n	80052de <LoopFillZerobss>

080052da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052dc:	3204      	adds	r2, #4

080052de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e0:	d3fb      	bcc.n	80052da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80052e2:	f008 fb5d 	bl	800d9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052e6:	f7fe ff99 	bl	800421c <main>
  bx  lr    
 80052ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80052ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80052f8:	0801134c 	.word	0x0801134c
  ldr r2, =_sbss
 80052fc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005300:	20001928 	.word	0x20001928

08005304 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005304:	e7fe      	b.n	8005304 <DMA1_Stream0_IRQHandler>
	...

08005308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800530c:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <HAL_Init+0x40>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0d      	ldr	r2, [pc, #52]	@ (8005348 <HAL_Init+0x40>)
 8005312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <HAL_Init+0x40>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_Init+0x40>)
 800531e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005324:	4b08      	ldr	r3, [pc, #32]	@ (8005348 <HAL_Init+0x40>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a07      	ldr	r2, [pc, #28]	@ (8005348 <HAL_Init+0x40>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005330:	2003      	movs	r0, #3
 8005332:	f000 f94f 	bl	80055d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005336:	2000      	movs	r0, #0
 8005338:	f000 f808 	bl	800534c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800533c:	f7ff fc10 	bl	8004b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40023c00 	.word	0x40023c00

0800534c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005354:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <HAL_InitTick+0x54>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <HAL_InitTick+0x58>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005362:	fbb3 f3f1 	udiv	r3, r3, r1
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f967 	bl	800563e <HAL_SYSTICK_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e00e      	b.n	8005398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b0f      	cmp	r3, #15
 800537e:	d80a      	bhi.n	8005396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005380:	2200      	movs	r2, #0
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	f000 f92f 	bl	80055ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800538c:	4a06      	ldr	r2, [pc, #24]	@ (80053a8 <HAL_InitTick+0x5c>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000038 	.word	0x20000038
 80053a4:	20000040 	.word	0x20000040
 80053a8:	2000003c 	.word	0x2000003c

080053ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b0:	4b06      	ldr	r3, [pc, #24]	@ (80053cc <HAL_IncTick+0x20>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <HAL_IncTick+0x24>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4413      	add	r3, r2
 80053bc:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <HAL_IncTick+0x24>)
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000040 	.word	0x20000040
 80053d0:	2000159c 	.word	0x2000159c

080053d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return uwTick;
 80053d8:	4b03      	ldr	r3, [pc, #12]	@ (80053e8 <HAL_GetTick+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000159c 	.word	0x2000159c

080053ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f4:	f7ff ffee 	bl	80053d4 <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d005      	beq.n	8005412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005406:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <HAL_Delay+0x44>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005412:	bf00      	nop
 8005414:	f7ff ffde 	bl	80053d4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	429a      	cmp	r2, r3
 8005422:	d8f7      	bhi.n	8005414 <HAL_Delay+0x28>
  {
  }
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000040 	.word	0x20000040

08005434 <__NVIC_SetPriorityGrouping>:
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800545c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005466:	4a04      	ldr	r2, [pc, #16]	@ (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	60d3      	str	r3, [r2, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_GetPriorityGrouping>:
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b04      	ldr	r3, [pc, #16]	@ (8005494 <__NVIC_GetPriorityGrouping+0x18>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0307 	and.w	r3, r3, #7
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <__NVIC_EnableIRQ>:
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db0b      	blt.n	80054c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	4907      	ldr	r1, [pc, #28]	@ (80054d0 <__NVIC_EnableIRQ+0x38>)
 80054b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	fa00 f202 	lsl.w	r2, r0, r2
 80054be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	@ (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	@ (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
         );
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	@ 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055a0:	d301      	bcc.n	80055a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055a2:	2301      	movs	r3, #1
 80055a4:	e00f      	b.n	80055c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a6:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <SysTick_Config+0x40>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ae:	210f      	movs	r1, #15
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	f7ff ff8e 	bl	80054d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <SysTick_Config+0x40>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055be:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <SysTick_Config+0x40>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010

080055d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff29 	bl	8005434 <__NVIC_SetPriorityGrouping>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055fc:	f7ff ff3e 	bl	800547c <__NVIC_GetPriorityGrouping>
 8005600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7ff ff8e 	bl	8005528 <NVIC_EncodePriority>
 800560c:	4602      	mov	r2, r0
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff5d 	bl	80054d4 <__NVIC_SetPriority>
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ff31 	bl	8005498 <__NVIC_EnableIRQ>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ffa2 	bl	8005590 <SysTick_Config>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7ff feb6 	bl	80053d4 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e099      	b.n	80057a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005694:	e00f      	b.n	80056b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005696:	f7ff fe9d 	bl	80053d4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b05      	cmp	r3, #5
 80056a2:	d908      	bls.n	80056b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e078      	b.n	80057a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e8      	bne.n	8005696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4b38      	ldr	r3, [pc, #224]	@ (80057b0 <HAL_DMA_Init+0x158>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	2b04      	cmp	r3, #4
 800570e:	d107      	bne.n	8005720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	4313      	orrs	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	2b04      	cmp	r3, #4
 8005748:	d117      	bne.n	800577a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fa7b 	bl	8005c58 <DMA_CheckFifoParam>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	@ 0x40
 800576c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005776:	2301      	movs	r3, #1
 8005778:	e016      	b.n	80057a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa32 	bl	8005bec <DMA_CalcBaseAndBitshift>
 8005788:	4603      	mov	r3, r0
 800578a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005790:	223f      	movs	r2, #63	@ 0x3f
 8005792:	409a      	lsls	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	f010803f 	.word	0xf010803f

080057b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057c2:	f7ff fe07 	bl	80053d4 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d008      	beq.n	80057e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2280      	movs	r2, #128	@ 0x80
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e052      	b.n	800588c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0216 	bic.w	r2, r2, #22
 80057f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_DMA_Abort+0x62>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0208 	bic.w	r2, r2, #8
 8005824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005836:	e013      	b.n	8005860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005838:	f7ff fdcc 	bl	80053d4 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b05      	cmp	r3, #5
 8005844:	d90c      	bls.n	8005860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2203      	movs	r2, #3
 8005850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e015      	b.n	800588c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e4      	bne.n	8005838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	223f      	movs	r2, #63	@ 0x3f
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d004      	beq.n	80058b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2280      	movs	r2, #128	@ 0x80
 80058ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e00c      	b.n	80058cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2205      	movs	r2, #5
 80058b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005b20 <HAL_DMA_IRQHandler+0x248>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a8e      	ldr	r2, [pc, #568]	@ (8005b24 <HAL_DMA_IRQHandler+0x24c>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	0a9b      	lsrs	r3, r3, #10
 80058f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005902:	2208      	movs	r2, #8
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01a      	beq.n	8005944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	2208      	movs	r2, #8
 8005932:	409a      	lsls	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593c:	f043 0201 	orr.w	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	2201      	movs	r2, #1
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d012      	beq.n	800597a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005966:	2201      	movs	r2, #1
 8005968:	409a      	lsls	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	2204      	movs	r2, #4
 8005980:	409a      	lsls	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d012      	beq.n	80059b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599c:	2204      	movs	r2, #4
 800599e:	409a      	lsls	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a8:	f043 0204 	orr.w	r2, r3, #4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b4:	2210      	movs	r2, #16
 80059b6:	409a      	lsls	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d043      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03c      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d2:	2210      	movs	r2, #16
 80059d4:	409a      	lsls	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d018      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d108      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d024      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	e01f      	b.n	8005a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
 8005a18:	e016      	b.n	8005a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0208 	bic.w	r2, r2, #8
 8005a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 808f 	beq.w	8005b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8087 	beq.w	8005b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6e:	2220      	movs	r2, #32
 8005a70:	409a      	lsls	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d136      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0216 	bic.w	r2, r2, #22
 8005a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_DMA_IRQHandler+0x1da>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0208 	bic.w	r2, r2, #8
 8005ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	223f      	movs	r2, #63	@ 0x3f
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d07e      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
        }
        return;
 8005aee:	e079      	b.n	8005be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01d      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10d      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d031      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
 8005b1c:	e02c      	b.n	8005b78 <HAL_DMA_IRQHandler+0x2a0>
 8005b1e:	bf00      	nop
 8005b20:	20000038 	.word	0x20000038
 8005b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d023      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	e01e      	b.n	8005b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0210 	bic.w	r2, r2, #16
 8005b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d032      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d022      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2205      	movs	r2, #5
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d307      	bcc.n	8005bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f2      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x2cc>
 8005bbe:	e000      	b.n	8005bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
 8005be2:	e000      	b.n	8005be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005be4:	bf00      	nop
    }
  }
}
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	3b10      	subs	r3, #16
 8005bfc:	4a14      	ldr	r2, [pc, #80]	@ (8005c50 <DMA_CalcBaseAndBitshift+0x64>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c06:	4a13      	ldr	r2, [pc, #76]	@ (8005c54 <DMA_CalcBaseAndBitshift+0x68>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d909      	bls.n	8005c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c2c:	e007      	b.n	8005c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	aaaaaaab 	.word	0xaaaaaaab
 8005c54:	08010b28 	.word	0x08010b28

08005c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11f      	bne.n	8005cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d856      	bhi.n	8005d26 <DMA_CheckFifoParam+0xce>
 8005c78:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <DMA_CheckFifoParam+0x28>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005ca3 	.word	0x08005ca3
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005d27 	.word	0x08005d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d046      	beq.n	8005d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca0:	e043      	b.n	8005d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005caa:	d140      	bne.n	8005d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb0:	e03d      	b.n	8005d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cba:	d121      	bne.n	8005d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d837      	bhi.n	8005d32 <DMA_CheckFifoParam+0xda>
 8005cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <DMA_CheckFifoParam+0x70>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005cdf 	.word	0x08005cdf
 8005cd0:	08005cd9 	.word	0x08005cd9
 8005cd4:	08005cf1 	.word	0x08005cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e030      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d025      	beq.n	8005d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cee:	e022      	b.n	8005d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cf8:	d11f      	bne.n	8005d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cfe:	e01c      	b.n	8005d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d903      	bls.n	8005d0e <DMA_CheckFifoParam+0xb6>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d003      	beq.n	8005d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d0c:	e018      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
      break;
 8005d12:	e015      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00e      	beq.n	8005d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e00b      	b.n	8005d3e <DMA_CheckFifoParam+0xe6>
      break;
 8005d26:	bf00      	nop
 8005d28:	e00a      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e008      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e006      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;
 8005d32:	bf00      	nop
 8005d34:	e004      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;
 8005d36:	bf00      	nop
 8005d38:	e002      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <DMA_CheckFifoParam+0xe8>
      break;
 8005d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop

08005d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	@ 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e159      	b.n	8006020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	f040 8148 	bne.w	800601a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d005      	beq.n	8005da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d130      	bne.n	8005e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	2203      	movs	r2, #3
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dd8:	2201      	movs	r2, #1
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 0201 	and.w	r2, r3, #1
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d017      	beq.n	8005e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d123      	bne.n	8005e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	08da      	lsrs	r2, r3, #3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3208      	adds	r2, #8
 8005e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	220f      	movs	r2, #15
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	08da      	lsrs	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3208      	adds	r2, #8
 8005e8e:	69b9      	ldr	r1, [r7, #24]
 8005e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 0203 	and.w	r2, r3, #3
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80a2 	beq.w	800601a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4b57      	ldr	r3, [pc, #348]	@ (8006038 <HAL_GPIO_Init+0x2e8>)
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	4a56      	ldr	r2, [pc, #344]	@ (8006038 <HAL_GPIO_Init+0x2e8>)
 8005ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ee6:	4b54      	ldr	r3, [pc, #336]	@ (8006038 <HAL_GPIO_Init+0x2e8>)
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ef2:	4a52      	ldr	r2, [pc, #328]	@ (800603c <HAL_GPIO_Init+0x2ec>)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	220f      	movs	r2, #15
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4013      	ands	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a49      	ldr	r2, [pc, #292]	@ (8006040 <HAL_GPIO_Init+0x2f0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d019      	beq.n	8005f52 <HAL_GPIO_Init+0x202>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a48      	ldr	r2, [pc, #288]	@ (8006044 <HAL_GPIO_Init+0x2f4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_GPIO_Init+0x1fe>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a47      	ldr	r2, [pc, #284]	@ (8006048 <HAL_GPIO_Init+0x2f8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <HAL_GPIO_Init+0x1fa>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a46      	ldr	r2, [pc, #280]	@ (800604c <HAL_GPIO_Init+0x2fc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <HAL_GPIO_Init+0x1f6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a45      	ldr	r2, [pc, #276]	@ (8006050 <HAL_GPIO_Init+0x300>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <HAL_GPIO_Init+0x1f2>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	e008      	b.n	8005f54 <HAL_GPIO_Init+0x204>
 8005f42:	2307      	movs	r3, #7
 8005f44:	e006      	b.n	8005f54 <HAL_GPIO_Init+0x204>
 8005f46:	2303      	movs	r3, #3
 8005f48:	e004      	b.n	8005f54 <HAL_GPIO_Init+0x204>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e002      	b.n	8005f54 <HAL_GPIO_Init+0x204>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_GPIO_Init+0x204>
 8005f52:	2300      	movs	r3, #0
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	f002 0203 	and.w	r2, r2, #3
 8005f5a:	0092      	lsls	r2, r2, #2
 8005f5c:	4093      	lsls	r3, r2
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f64:	4935      	ldr	r1, [pc, #212]	@ (800603c <HAL_GPIO_Init+0x2ec>)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f72:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f96:	4a2f      	ldr	r2, [pc, #188]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fc0:	4a24      	ldr	r2, [pc, #144]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fc6:	4b23      	ldr	r3, [pc, #140]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fea:	4a1a      	ldr	r2, [pc, #104]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ff0:	4b18      	ldr	r3, [pc, #96]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006014:	4a0f      	ldr	r2, [pc, #60]	@ (8006054 <HAL_GPIO_Init+0x304>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3301      	adds	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	f67f aea2 	bls.w	8005d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	3724      	adds	r7, #36	@ 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800
 800603c:	40013800 	.word	0x40013800
 8006040:	40020000 	.word	0x40020000
 8006044:	40020400 	.word	0x40020400
 8006048:	40020800 	.word	0x40020800
 800604c:	40020c00 	.word	0x40020c00
 8006050:	40021000 	.word	0x40021000
 8006054:	40013c00 	.word	0x40013c00

08006058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
 8006074:	e001      	b.n	800607a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
 8006094:	4613      	mov	r3, r2
 8006096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006098:	787b      	ldrb	r3, [r7, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060a4:	e003      	b.n	80060ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	041a      	lsls	r2, r3, #16
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	619a      	str	r2, [r3, #24]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060c6:	4b08      	ldr	r3, [pc, #32]	@ (80060e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d006      	beq.n	80060e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060d2:	4a05      	ldr	r2, [pc, #20]	@ (80060e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fc f8c8 	bl	8002270 <HAL_GPIO_EXTI_Callback>
  }
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40013c00 	.word	0x40013c00

080060ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e12b      	b.n	8006356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe fd4c 	bl	8004bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	@ 0x24
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800613e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800614e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006150:	f001 fd8e 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 8006154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4a81      	ldr	r2, [pc, #516]	@ (8006360 <HAL_I2C_Init+0x274>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d807      	bhi.n	8006170 <HAL_I2C_Init+0x84>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a80      	ldr	r2, [pc, #512]	@ (8006364 <HAL_I2C_Init+0x278>)
 8006164:	4293      	cmp	r3, r2
 8006166:	bf94      	ite	ls
 8006168:	2301      	movls	r3, #1
 800616a:	2300      	movhi	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e006      	b.n	800617e <HAL_I2C_Init+0x92>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a7d      	ldr	r2, [pc, #500]	@ (8006368 <HAL_I2C_Init+0x27c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	bf94      	ite	ls
 8006178:	2301      	movls	r3, #1
 800617a:	2300      	movhi	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e0e7      	b.n	8006356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a78      	ldr	r2, [pc, #480]	@ (800636c <HAL_I2C_Init+0x280>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0c9b      	lsrs	r3, r3, #18
 8006190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a6a      	ldr	r2, [pc, #424]	@ (8006360 <HAL_I2C_Init+0x274>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d802      	bhi.n	80061c0 <HAL_I2C_Init+0xd4>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3301      	adds	r3, #1
 80061be:	e009      	b.n	80061d4 <HAL_I2C_Init+0xe8>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	4a69      	ldr	r2, [pc, #420]	@ (8006370 <HAL_I2C_Init+0x284>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	3301      	adds	r3, #1
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	430b      	orrs	r3, r1
 80061da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80061e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	495c      	ldr	r1, [pc, #368]	@ (8006360 <HAL_I2C_Init+0x274>)
 80061f0:	428b      	cmp	r3, r1
 80061f2:	d819      	bhi.n	8006228 <HAL_I2C_Init+0x13c>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1e59      	subs	r1, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006208:	400b      	ands	r3, r1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_I2C_Init+0x138>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1e59      	subs	r1, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	fbb1 f3f3 	udiv	r3, r1, r3
 800621c:	3301      	adds	r3, #1
 800621e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006222:	e051      	b.n	80062c8 <HAL_I2C_Init+0x1dc>
 8006224:	2304      	movs	r3, #4
 8006226:	e04f      	b.n	80062c8 <HAL_I2C_Init+0x1dc>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d111      	bne.n	8006254 <HAL_I2C_Init+0x168>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1e58      	subs	r0, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	440b      	add	r3, r1
 800623e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006242:	3301      	adds	r3, #1
 8006244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	e012      	b.n	800627a <HAL_I2C_Init+0x18e>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1e58      	subs	r0, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6859      	ldr	r1, [r3, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	0099      	lsls	r1, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	fbb0 f3f3 	udiv	r3, r0, r3
 800626a:	3301      	adds	r3, #1
 800626c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Init+0x196>
 800627e:	2301      	movs	r3, #1
 8006280:	e022      	b.n	80062c8 <HAL_I2C_Init+0x1dc>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10e      	bne.n	80062a8 <HAL_I2C_Init+0x1bc>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1e58      	subs	r0, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	440b      	add	r3, r1
 8006298:	fbb0 f3f3 	udiv	r3, r0, r3
 800629c:	3301      	adds	r3, #1
 800629e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a6:	e00f      	b.n	80062c8 <HAL_I2C_Init+0x1dc>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1e58      	subs	r0, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6859      	ldr	r1, [r3, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	0099      	lsls	r1, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80062be:	3301      	adds	r3, #1
 80062c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	6809      	ldr	r1, [r1, #0]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80062f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6911      	ldr	r1, [r2, #16]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68d2      	ldr	r2, [r2, #12]
 8006302:	4311      	orrs	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	430b      	orrs	r3, r1
 800630a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	000186a0 	.word	0x000186a0
 8006364:	001e847f 	.word	0x001e847f
 8006368:	003d08ff 	.word	0x003d08ff
 800636c:	431bde83 	.word	0x431bde83
 8006370:	10624dd3 	.word	0x10624dd3

08006374 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	4603      	mov	r3, r0
 8006384:	817b      	strh	r3, [r7, #10]
 8006386:	460b      	mov	r3, r1
 8006388:	813b      	strh	r3, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800638e:	f7ff f821 	bl	80053d4 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b20      	cmp	r3, #32
 800639e:	f040 80d9 	bne.w	8006554 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2319      	movs	r3, #25
 80063a8:	2201      	movs	r2, #1
 80063aa:	496d      	ldr	r1, [pc, #436]	@ (8006560 <HAL_I2C_Mem_Write+0x1ec>)
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fdb9 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
 80063ba:	e0cc      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_I2C_Mem_Write+0x56>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e0c5      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d007      	beq.n	80063f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2221      	movs	r2, #33	@ 0x21
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2240      	movs	r2, #64	@ 0x40
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a4d      	ldr	r2, [pc, #308]	@ (8006564 <HAL_I2C_Mem_Write+0x1f0>)
 8006430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006432:	88f8      	ldrh	r0, [r7, #6]
 8006434:	893a      	ldrh	r2, [r7, #8]
 8006436:	8979      	ldrh	r1, [r7, #10]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4603      	mov	r3, r0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fbf0 	bl	8006c28 <I2C_RequestMemoryWrite>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d052      	beq.n	80064f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e081      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fe7e 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00d      	beq.n	800647e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	2b04      	cmp	r3, #4
 8006468:	d107      	bne.n	800647a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006478:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e06b      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d11b      	bne.n	80064f4 <HAL_I2C_Mem_Write+0x180>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d017      	beq.n	80064f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1aa      	bne.n	8006452 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fe71 	bl	80071e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00d      	beq.n	8006528 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	2b04      	cmp	r3, #4
 8006512:	d107      	bne.n	8006524 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006522:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e016      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	00100002 	.word	0x00100002
 8006564:	ffff0000 	.word	0xffff0000

08006568 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	@ 0x30
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	461a      	mov	r2, r3
 8006576:	4603      	mov	r3, r0
 8006578:	817b      	strh	r3, [r7, #10]
 800657a:	460b      	mov	r3, r1
 800657c:	813b      	strh	r3, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006582:	f7fe ff27 	bl	80053d4 <HAL_GetTick>
 8006586:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b20      	cmp	r3, #32
 8006592:	f040 8214 	bne.w	80069be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	2319      	movs	r3, #25
 800659c:	2201      	movs	r2, #1
 800659e:	497b      	ldr	r1, [pc, #492]	@ (800678c <HAL_I2C_Mem_Read+0x224>)
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fcbf 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
 80065ae:	e207      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_I2C_Mem_Read+0x56>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e200      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d007      	beq.n	80065e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2222      	movs	r2, #34	@ 0x22
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2240      	movs	r2, #64	@ 0x40
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800660e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a5b      	ldr	r2, [pc, #364]	@ (8006790 <HAL_I2C_Mem_Read+0x228>)
 8006624:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006626:	88f8      	ldrh	r0, [r7, #6]
 8006628:	893a      	ldrh	r2, [r7, #8]
 800662a:	8979      	ldrh	r1, [r7, #10]
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4603      	mov	r3, r0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fb8c 	bl	8006d54 <I2C_RequestMemoryRead>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e1bc      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d113      	bne.n	8006676 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664e:	2300      	movs	r3, #0
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e190      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667a:	2b01      	cmp	r3, #1
 800667c:	d11b      	bne.n	80066b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800668c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e170      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d11b      	bne.n	80066f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066de:	2300      	movs	r3, #0
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	e150      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800670c:	e144      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006712:	2b03      	cmp	r3, #3
 8006714:	f200 80f1 	bhi.w	80068fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671c:	2b01      	cmp	r3, #1
 800671e:	d123      	bne.n	8006768 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006722:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fda7 	bl	8007278 <I2C_WaitOnRXNEFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e145      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006766:	e117      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676c:	2b02      	cmp	r3, #2
 800676e:	d14e      	bne.n	800680e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	2200      	movs	r2, #0
 8006778:	4906      	ldr	r1, [pc, #24]	@ (8006794 <HAL_I2C_Mem_Read+0x22c>)
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fbd2 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e11a      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
 800678a:	bf00      	nop
 800678c:	00100002 	.word	0x00100002
 8006790:	ffff0000 	.word	0xffff0000
 8006794:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800680c:	e0c4      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	2200      	movs	r2, #0
 8006816:	496c      	ldr	r1, [pc, #432]	@ (80069c8 <HAL_I2C_Mem_Read+0x460>)
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fb83 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0cb      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	2200      	movs	r2, #0
 8006872:	4955      	ldr	r1, [pc, #340]	@ (80069c8 <HAL_I2C_Mem_Read+0x460>)
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fb55 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e09d      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068f8:	e04e      	b.n	8006998 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fcba 	bl	8007278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e058      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b04      	cmp	r3, #4
 800694c:	d124      	bne.n	8006998 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006952:	2b03      	cmp	r3, #3
 8006954:	d107      	bne.n	8006966 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006964:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f aeb6 	bne.w	800670e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3728      	adds	r7, #40	@ 0x28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00010004 	.word	0x00010004

080069cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	@ 0x28
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	460b      	mov	r3, r1
 80069da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80069dc:	f7fe fcfa 	bl	80053d4 <HAL_GetTick>
 80069e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	f040 8111 	bne.w	8006c16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2319      	movs	r3, #25
 80069fa:	2201      	movs	r2, #1
 80069fc:	4988      	ldr	r1, [pc, #544]	@ (8006c20 <HAL_I2C_IsDeviceReady+0x254>)
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fa90 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e104      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_I2C_IsDeviceReady+0x50>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e0fd      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d007      	beq.n	8006a42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0201 	orr.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2224      	movs	r2, #36	@ 0x24
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a70      	ldr	r2, [pc, #448]	@ (8006c24 <HAL_I2C_IsDeviceReady+0x258>)
 8006a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fa4e 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9c:	d103      	bne.n	8006aa6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e0b6      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aaa:	897b      	ldrh	r3, [r7, #10]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ab8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006aba:	f7fe fc8b 	bl	80053d4 <HAL_GetTick>
 8006abe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae4:	bf0c      	ite	eq
 8006ae6:	2301      	moveq	r3, #1
 8006ae8:	2300      	movne	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006aee:	e025      	b.n	8006b3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006af0:	f7fe fc70 	bl	80053d4 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <HAL_I2C_IsDeviceReady+0x13a>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	22a0      	movs	r2, #160	@ 0xa0
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b46:	d005      	beq.n	8006b54 <HAL_I2C_IsDeviceReady+0x188>
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <HAL_I2C_IsDeviceReady+0x188>
 8006b4e:	7dbb      	ldrb	r3, [r7, #22]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0cd      	beq.n	8006af0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d129      	bne.n	8006bbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2319      	movs	r3, #25
 8006b96:	2201      	movs	r2, #1
 8006b98:	4921      	ldr	r1, [pc, #132]	@ (8006c20 <HAL_I2C_IsDeviceReady+0x254>)
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 f9c2 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e036      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e02c      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	2319      	movs	r3, #25
 8006bde:	2201      	movs	r2, #1
 8006be0:	490f      	ldr	r1, [pc, #60]	@ (8006c20 <HAL_I2C_IsDeviceReady+0x254>)
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f99e 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e012      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	f4ff af32 	bcc.w	8006a66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
  }
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	00100002 	.word	0x00100002
 8006c24:	ffff0000 	.word	0xffff0000

08006c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	817b      	strh	r3, [r7, #10]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	813b      	strh	r3, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f960 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c78:	d103      	bne.n	8006c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e05f      	b.n	8006d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c86:	897b      	ldrh	r3, [r7, #10]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	492d      	ldr	r1, [pc, #180]	@ (8006d50 <I2C_RequestMemoryWrite+0x128>)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f9bb 	bl	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e04c      	b.n	8006d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc4:	6a39      	ldr	r1, [r7, #32]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa46 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d107      	bne.n	8006cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e02b      	b.n	8006d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d105      	bne.n	8006d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	611a      	str	r2, [r3, #16]
 8006cfe:	e021      	b.n	8006d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d00:	893b      	ldrh	r3, [r7, #8]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d10:	6a39      	ldr	r1, [r7, #32]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fa20 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d107      	bne.n	8006d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e005      	b.n	8006d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d3a:	893b      	ldrh	r3, [r7, #8]
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	00010002 	.word	0x00010002

08006d54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	817b      	strh	r3, [r7, #10]
 8006d66:	460b      	mov	r3, r1
 8006d68:	813b      	strh	r3, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f8c2 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00d      	beq.n	8006dc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db4:	d103      	bne.n	8006dbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e0aa      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dc2:	897b      	ldrh	r3, [r7, #10]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	6a3a      	ldr	r2, [r7, #32]
 8006dd6:	4952      	ldr	r1, [pc, #328]	@ (8006f20 <I2C_RequestMemoryRead+0x1cc>)
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f91d 	bl	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e097      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e00:	6a39      	ldr	r1, [r7, #32]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f9a8 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d107      	bne.n	8006e26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e076      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e30:	893b      	ldrh	r3, [r7, #8]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	611a      	str	r2, [r3, #16]
 8006e3a:	e021      	b.n	8006e80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e3c:	893b      	ldrh	r3, [r7, #8]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4c:	6a39      	ldr	r1, [r7, #32]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f982 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00d      	beq.n	8006e76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d107      	bne.n	8006e72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e050      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e76:	893b      	ldrh	r3, [r7, #8]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e82:	6a39      	ldr	r1, [r7, #32]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f967 	bl	8007158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00d      	beq.n	8006eac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d107      	bne.n	8006ea8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e035      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f82b 	bl	8006f24 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee2:	d103      	bne.n	8006eec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e013      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ef0:	897b      	ldrh	r3, [r7, #10]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	6a3a      	ldr	r2, [r7, #32]
 8006f04:	4906      	ldr	r1, [pc, #24]	@ (8006f20 <I2C_RequestMemoryRead+0x1cc>)
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f886 	bl	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	00010002 	.word	0x00010002

08006f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4613      	mov	r3, r2
 8006f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f34:	e048      	b.n	8006fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d044      	beq.n	8006fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3e:	f7fe fa49 	bl	80053d4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d302      	bcc.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d139      	bne.n	8006fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10d      	bne.n	8006f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	43da      	mvns	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	e00c      	b.n	8006f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	43da      	mvns	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4013      	ands	r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d116      	bne.n	8006fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e023      	b.n	8007010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	0c1b      	lsrs	r3, r3, #16
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10d      	bne.n	8006fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	43da      	mvns	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	e00c      	b.n	8007008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	43da      	mvns	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	429a      	cmp	r2, r3
 800700c:	d093      	beq.n	8006f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007026:	e071      	b.n	800710c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007036:	d123      	bne.n	8007080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	f043 0204 	orr.w	r2, r3, #4
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e067      	b.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d041      	beq.n	800710c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007088:	f7fe f9a4 	bl	80053d4 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d136      	bne.n	800710c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10c      	bne.n	80070c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	43da      	mvns	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4013      	ands	r3, r2
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bf14      	ite	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	2300      	moveq	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	e00b      	b.n	80070da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	43da      	mvns	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf14      	ite	ne
 80070d4:	2301      	movne	r3, #1
 80070d6:	2300      	moveq	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d016      	beq.n	800710c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	f043 0220 	orr.w	r2, r3, #32
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e021      	b.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10c      	bne.n	8007130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	43da      	mvns	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	e00b      	b.n	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	43da      	mvns	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf14      	ite	ne
 8007142:	2301      	movne	r3, #1
 8007144:	2300      	moveq	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f af6d 	bne.w	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007164:	e034      	b.n	80071d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f8e3 	bl	8007332 <I2C_IsAcknowledgeFailed>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e034      	b.n	80071e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d028      	beq.n	80071d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717e:	f7fe f929 	bl	80053d4 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11d      	bne.n	80071d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719e:	2b80      	cmp	r3, #128	@ 0x80
 80071a0:	d016      	beq.n	80071d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e007      	b.n	80071e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071da:	2b80      	cmp	r3, #128	@ 0x80
 80071dc:	d1c3      	bne.n	8007166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071f4:	e034      	b.n	8007260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f89b 	bl	8007332 <I2C_IsAcknowledgeFailed>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e034      	b.n	8007270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d028      	beq.n	8007260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fe f8e1 	bl	80053d4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11d      	bne.n	8007260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d016      	beq.n	8007260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e007      	b.n	8007270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b04      	cmp	r3, #4
 800726c:	d1c3      	bne.n	80071f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007284:	e049      	b.n	800731a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d119      	bne.n	80072c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0210 	mvn.w	r2, #16
 800729c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e030      	b.n	800732a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c8:	f7fe f884 	bl	80053d4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d302      	bcc.n	80072de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d11d      	bne.n	800731a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d016      	beq.n	800731a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e007      	b.n	800732a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	d1ae      	bne.n	8007286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007348:	d11b      	bne.n	8007382 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007352:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f043 0204 	orr.w	r2, r3, #4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e267      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d075      	beq.n	800749a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073ae:	4b88      	ldr	r3, [pc, #544]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d00c      	beq.n	80073d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073ba:	4b85      	ldr	r3, [pc, #532]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d112      	bne.n	80073ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073c6:	4b82      	ldr	r3, [pc, #520]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d2:	d10b      	bne.n	80073ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d4:	4b7e      	ldr	r3, [pc, #504]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d05b      	beq.n	8007498 <HAL_RCC_OscConfig+0x108>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d157      	bne.n	8007498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e242      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f4:	d106      	bne.n	8007404 <HAL_RCC_OscConfig+0x74>
 80073f6:	4b76      	ldr	r3, [pc, #472]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a75      	ldr	r2, [pc, #468]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80073fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	e01d      	b.n	8007440 <HAL_RCC_OscConfig+0xb0>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800740c:	d10c      	bne.n	8007428 <HAL_RCC_OscConfig+0x98>
 800740e:	4b70      	ldr	r3, [pc, #448]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a6f      	ldr	r2, [pc, #444]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	4b6d      	ldr	r3, [pc, #436]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a6c      	ldr	r2, [pc, #432]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e00b      	b.n	8007440 <HAL_RCC_OscConfig+0xb0>
 8007428:	4b69      	ldr	r3, [pc, #420]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a68      	ldr	r2, [pc, #416]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800742e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4b66      	ldr	r3, [pc, #408]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a65      	ldr	r2, [pc, #404]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800743a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800743e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d013      	beq.n	8007470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007448:	f7fd ffc4 	bl	80053d4 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007450:	f7fd ffc0 	bl	80053d4 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b64      	cmp	r3, #100	@ 0x64
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e207      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007462:	4b5b      	ldr	r3, [pc, #364]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f0      	beq.n	8007450 <HAL_RCC_OscConfig+0xc0>
 800746e:	e014      	b.n	800749a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007470:	f7fd ffb0 	bl	80053d4 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007478:	f7fd ffac 	bl	80053d4 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b64      	cmp	r3, #100	@ 0x64
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e1f3      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800748a:	4b51      	ldr	r3, [pc, #324]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0xe8>
 8007496:	e000      	b.n	800749a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d063      	beq.n	800756e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074a6:	4b4a      	ldr	r3, [pc, #296]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 030c 	and.w	r3, r3, #12
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074b2:	4b47      	ldr	r3, [pc, #284]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d11c      	bne.n	80074f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074be:	4b44      	ldr	r3, [pc, #272]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d116      	bne.n	80074f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ca:	4b41      	ldr	r3, [pc, #260]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <HAL_RCC_OscConfig+0x152>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d001      	beq.n	80074e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e1c7      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074e2:	4b3b      	ldr	r3, [pc, #236]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	4937      	ldr	r1, [pc, #220]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074f6:	e03a      	b.n	800756e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007500:	4b34      	ldr	r3, [pc, #208]	@ (80075d4 <HAL_RCC_OscConfig+0x244>)
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007506:	f7fd ff65 	bl	80053d4 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800750e:	f7fd ff61 	bl	80053d4 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e1a8      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007520:	4b2b      	ldr	r3, [pc, #172]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0f0      	beq.n	800750e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800752c:	4b28      	ldr	r3, [pc, #160]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	4925      	ldr	r1, [pc, #148]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 800753c:	4313      	orrs	r3, r2
 800753e:	600b      	str	r3, [r1, #0]
 8007540:	e015      	b.n	800756e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007542:	4b24      	ldr	r3, [pc, #144]	@ (80075d4 <HAL_RCC_OscConfig+0x244>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007548:	f7fd ff44 	bl	80053d4 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007550:	f7fd ff40 	bl	80053d4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e187      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d036      	beq.n	80075e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007582:	4b15      	ldr	r3, [pc, #84]	@ (80075d8 <HAL_RCC_OscConfig+0x248>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007588:	f7fd ff24 	bl	80053d4 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007590:	f7fd ff20 	bl	80053d4 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e167      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075a2:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <HAL_RCC_OscConfig+0x240>)
 80075a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0x200>
 80075ae:	e01b      	b.n	80075e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b0:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <HAL_RCC_OscConfig+0x248>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075b6:	f7fd ff0d 	bl	80053d4 <HAL_GetTick>
 80075ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075bc:	e00e      	b.n	80075dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075be:	f7fd ff09 	bl	80053d4 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d907      	bls.n	80075dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e150      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
 80075d0:	40023800 	.word	0x40023800
 80075d4:	42470000 	.word	0x42470000
 80075d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075dc:	4b88      	ldr	r3, [pc, #544]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80075de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1ea      	bne.n	80075be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8097 	beq.w	8007724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075fa:	4b81      	ldr	r3, [pc, #516]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10f      	bne.n	8007626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	4b7d      	ldr	r3, [pc, #500]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	4a7c      	ldr	r2, [pc, #496]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007614:	6413      	str	r3, [r2, #64]	@ 0x40
 8007616:	4b7a      	ldr	r3, [pc, #488]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007626:	4b77      	ldr	r3, [pc, #476]	@ (8007804 <HAL_RCC_OscConfig+0x474>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d118      	bne.n	8007664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007632:	4b74      	ldr	r3, [pc, #464]	@ (8007804 <HAL_RCC_OscConfig+0x474>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a73      	ldr	r2, [pc, #460]	@ (8007804 <HAL_RCC_OscConfig+0x474>)
 8007638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800763c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800763e:	f7fd fec9 	bl	80053d4 <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007644:	e008      	b.n	8007658 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007646:	f7fd fec5 	bl	80053d4 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e10c      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007658:	4b6a      	ldr	r3, [pc, #424]	@ (8007804 <HAL_RCC_OscConfig+0x474>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d106      	bne.n	800767a <HAL_RCC_OscConfig+0x2ea>
 800766c:	4b64      	ldr	r3, [pc, #400]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 800766e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007670:	4a63      	ldr	r2, [pc, #396]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	6713      	str	r3, [r2, #112]	@ 0x70
 8007678:	e01c      	b.n	80076b4 <HAL_RCC_OscConfig+0x324>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b05      	cmp	r3, #5
 8007680:	d10c      	bne.n	800769c <HAL_RCC_OscConfig+0x30c>
 8007682:	4b5f      	ldr	r3, [pc, #380]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007686:	4a5e      	ldr	r2, [pc, #376]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007688:	f043 0304 	orr.w	r3, r3, #4
 800768c:	6713      	str	r3, [r2, #112]	@ 0x70
 800768e:	4b5c      	ldr	r3, [pc, #368]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007692:	4a5b      	ldr	r2, [pc, #364]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	6713      	str	r3, [r2, #112]	@ 0x70
 800769a:	e00b      	b.n	80076b4 <HAL_RCC_OscConfig+0x324>
 800769c:	4b58      	ldr	r3, [pc, #352]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 800769e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a0:	4a57      	ldr	r2, [pc, #348]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076a8:	4b55      	ldr	r3, [pc, #340]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80076aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ac:	4a54      	ldr	r2, [pc, #336]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80076ae:	f023 0304 	bic.w	r3, r3, #4
 80076b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d015      	beq.n	80076e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076bc:	f7fd fe8a 	bl	80053d4 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c2:	e00a      	b.n	80076da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c4:	f7fd fe86 	bl	80053d4 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e0cb      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076da:	4b49      	ldr	r3, [pc, #292]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0ee      	beq.n	80076c4 <HAL_RCC_OscConfig+0x334>
 80076e6:	e014      	b.n	8007712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076e8:	f7fd fe74 	bl	80053d4 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f0:	f7fd fe70 	bl	80053d4 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e0b5      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007706:	4b3e      	ldr	r3, [pc, #248]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1ee      	bne.n	80076f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d105      	bne.n	8007724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007718:	4b39      	ldr	r3, [pc, #228]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 800771a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771c:	4a38      	ldr	r2, [pc, #224]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 800771e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80a1 	beq.w	8007870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800772e:	4b34      	ldr	r3, [pc, #208]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b08      	cmp	r3, #8
 8007738:	d05c      	beq.n	80077f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d141      	bne.n	80077c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007742:	4b31      	ldr	r3, [pc, #196]	@ (8007808 <HAL_RCC_OscConfig+0x478>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007748:	f7fd fe44 	bl	80053d4 <HAL_GetTick>
 800774c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007750:	f7fd fe40 	bl	80053d4 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e087      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007762:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f0      	bne.n	8007750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	019b      	lsls	r3, r3, #6
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	3b01      	subs	r3, #1
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	491b      	ldr	r1, [pc, #108]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 8007794:	4313      	orrs	r3, r2
 8007796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007798:	4b1b      	ldr	r3, [pc, #108]	@ (8007808 <HAL_RCC_OscConfig+0x478>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779e:	f7fd fe19 	bl	80053d4 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a6:	f7fd fe15 	bl	80053d4 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e05c      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077b8:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x416>
 80077c4:	e054      	b.n	8007870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c6:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <HAL_RCC_OscConfig+0x478>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077cc:	f7fd fe02 	bl	80053d4 <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d4:	f7fd fdfe 	bl	80053d4 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e045      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <HAL_RCC_OscConfig+0x470>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f0      	bne.n	80077d4 <HAL_RCC_OscConfig+0x444>
 80077f2:	e03d      	b.n	8007870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d107      	bne.n	800780c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e038      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
 8007800:	40023800 	.word	0x40023800
 8007804:	40007000 	.word	0x40007000
 8007808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800780c:	4b1b      	ldr	r3, [pc, #108]	@ (800787c <HAL_RCC_OscConfig+0x4ec>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d028      	beq.n	800786c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007824:	429a      	cmp	r2, r3
 8007826:	d121      	bne.n	800786c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007832:	429a      	cmp	r2, r3
 8007834:	d11a      	bne.n	800786c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800783c:	4013      	ands	r3, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007844:	4293      	cmp	r3, r2
 8007846:	d111      	bne.n	800786c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	3b01      	subs	r3, #1
 8007856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007858:	429a      	cmp	r2, r3
 800785a:	d107      	bne.n	800786c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007868:	429a      	cmp	r2, r3
 800786a:	d001      	beq.n	8007870 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800

08007880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0cc      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007894:	4b68      	ldr	r3, [pc, #416]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d90c      	bls.n	80078bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a2:	4b65      	ldr	r3, [pc, #404]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b63      	ldr	r3, [pc, #396]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0b8      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d020      	beq.n	800790a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d4:	4b59      	ldr	r3, [pc, #356]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4a58      	ldr	r2, [pc, #352]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078ec:	4b53      	ldr	r3, [pc, #332]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	4a52      	ldr	r2, [pc, #328]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078f8:	4b50      	ldr	r3, [pc, #320]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	494d      	ldr	r1, [pc, #308]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d044      	beq.n	80079a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791e:	4b47      	ldr	r3, [pc, #284]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d119      	bne.n	800795e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e07f      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d003      	beq.n	800793e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800793a:	2b03      	cmp	r3, #3
 800793c:	d107      	bne.n	800794e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800793e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e06f      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e067      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800795e:	4b37      	ldr	r3, [pc, #220]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f023 0203 	bic.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	4934      	ldr	r1, [pc, #208]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 800796c:	4313      	orrs	r3, r2
 800796e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007970:	f7fd fd30 	bl	80053d4 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007976:	e00a      	b.n	800798e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007978:	f7fd fd2c 	bl	80053d4 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007986:	4293      	cmp	r3, r2
 8007988:	d901      	bls.n	800798e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e04f      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800798e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 020c 	and.w	r2, r3, #12
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	429a      	cmp	r2, r3
 800799e:	d1eb      	bne.n	8007978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079a0:	4b25      	ldr	r3, [pc, #148]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d20c      	bcs.n	80079c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ae:	4b22      	ldr	r3, [pc, #136]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d001      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e032      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d4:	4b19      	ldr	r3, [pc, #100]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4916      	ldr	r1, [pc, #88]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079f2:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	490e      	ldr	r1, [pc, #56]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a06:	f000 f821 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	490a      	ldr	r1, [pc, #40]	@ (8007a40 <HAL_RCC_ClockConfig+0x1c0>)
 8007a18:	5ccb      	ldrb	r3, [r1, r3]
 8007a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1e:	4a09      	ldr	r2, [pc, #36]	@ (8007a44 <HAL_RCC_ClockConfig+0x1c4>)
 8007a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a22:	4b09      	ldr	r3, [pc, #36]	@ (8007a48 <HAL_RCC_ClockConfig+0x1c8>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd fc90 	bl	800534c <HAL_InitTick>

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40023c00 	.word	0x40023c00
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	08010b10 	.word	0x08010b10
 8007a44:	20000038 	.word	0x20000038
 8007a48:	2000003c 	.word	0x2000003c

08007a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a50:	b094      	sub	sp, #80	@ 0x50
 8007a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a64:	4b79      	ldr	r3, [pc, #484]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 030c 	and.w	r3, r3, #12
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d00d      	beq.n	8007a8c <HAL_RCC_GetSysClockFreq+0x40>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	f200 80e1 	bhi.w	8007c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_RCC_GetSysClockFreq+0x34>
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a7e:	e0db      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a80:	4b73      	ldr	r3, [pc, #460]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a84:	e0db      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a86:	4b73      	ldr	r3, [pc, #460]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a8a:	e0d8      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a96:	4b6d      	ldr	r3, [pc, #436]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d063      	beq.n	8007b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f04f 0100 	mov.w	r1, #0
 8007aca:	0159      	lsls	r1, r3, #5
 8007acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ad0:	0150      	lsls	r0, r2, #5
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	1a51      	subs	r1, r2, r1
 8007ada:	6139      	str	r1, [r7, #16]
 8007adc:	4629      	mov	r1, r5
 8007ade:	eb63 0301 	sbc.w	r3, r3, r1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af0:	4659      	mov	r1, fp
 8007af2:	018b      	lsls	r3, r1, #6
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007afa:	4651      	mov	r1, sl
 8007afc:	018a      	lsls	r2, r1, #6
 8007afe:	4651      	mov	r1, sl
 8007b00:	ebb2 0801 	subs.w	r8, r2, r1
 8007b04:	4659      	mov	r1, fp
 8007b06:	eb63 0901 	sbc.w	r9, r3, r1
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b1e:	4690      	mov	r8, r2
 8007b20:	4699      	mov	r9, r3
 8007b22:	4623      	mov	r3, r4
 8007b24:	eb18 0303 	adds.w	r3, r8, r3
 8007b28:	60bb      	str	r3, [r7, #8]
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	eb49 0303 	adc.w	r3, r9, r3
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b3e:	4629      	mov	r1, r5
 8007b40:	024b      	lsls	r3, r1, #9
 8007b42:	4621      	mov	r1, r4
 8007b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b48:	4621      	mov	r1, r4
 8007b4a:	024a      	lsls	r2, r1, #9
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b52:	2200      	movs	r2, #0
 8007b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b5c:	f7f9 f83c 	bl	8000bd8 <__aeabi_uldivmod>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4613      	mov	r3, r2
 8007b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b68:	e058      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b6a:	4b38      	ldr	r3, [pc, #224]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	099b      	lsrs	r3, r3, #6
 8007b70:	2200      	movs	r2, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	4611      	mov	r1, r2
 8007b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b7a:	623b      	str	r3, [r7, #32]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	f04f 0000 	mov.w	r0, #0
 8007b8c:	f04f 0100 	mov.w	r1, #0
 8007b90:	0159      	lsls	r1, r3, #5
 8007b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b96:	0150      	lsls	r0, r2, #5
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8007bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	00eb      	lsls	r3, r5, #3
 8007bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bd2:	00e2      	lsls	r2, r4, #3
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	4643      	mov	r3, r8
 8007bda:	18e3      	adds	r3, r4, r3
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	464b      	mov	r3, r9
 8007be0:	eb45 0303 	adc.w	r3, r5, r3
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	028b      	lsls	r3, r1, #10
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	028a      	lsls	r2, r1, #10
 8007c00:	4610      	mov	r0, r2
 8007c02:	4619      	mov	r1, r3
 8007c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c06:	2200      	movs	r2, #0
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	61fa      	str	r2, [r7, #28]
 8007c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c10:	f7f8 ffe2 	bl	8000bd8 <__aeabi_uldivmod>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4613      	mov	r3, r2
 8007c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	0c1b      	lsrs	r3, r3, #16
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	3301      	adds	r3, #1
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3750      	adds	r7, #80	@ 0x50
 8007c44:	46bd      	mov	sp, r7
 8007c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c4a:	bf00      	nop
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	00f42400 	.word	0x00f42400
 8007c54:	007a1200 	.word	0x007a1200

08007c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c5c:	4b03      	ldr	r3, [pc, #12]	@ (8007c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000038 	.word	0x20000038

08007c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c74:	f7ff fff0 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	0a9b      	lsrs	r3, r3, #10
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	4903      	ldr	r1, [pc, #12]	@ (8007c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c86:	5ccb      	ldrb	r3, [r1, r3]
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800
 8007c94:	08010b20 	.word	0x08010b20

08007c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c9c:	f7ff ffdc 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	0b5b      	lsrs	r3, r3, #13
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4903      	ldr	r1, [pc, #12]	@ (8007cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cae:	5ccb      	ldrb	r3, [r1, r3]
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	08010b20 	.word	0x08010b20

08007cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e07b      	b.n	8007dca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d108      	bne.n	8007cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ce2:	d009      	beq.n	8007cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	61da      	str	r2, [r3, #28]
 8007cea:	e005      	b.n	8007cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fc ff94 	bl	8004c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7c:	ea42 0103 	orr.w	r1, r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	f003 0104 	and.w	r1, r3, #4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	f003 0210 	and.w	r2, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b088      	sub	sp, #32
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de2:	f7fd faf7 	bl	80053d4 <HAL_GetTick>
 8007de6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d001      	beq.n	8007dfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e12a      	b.n	8008052 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_Transmit+0x36>
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e122      	b.n	8008052 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_SPI_Transmit+0x48>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e11b      	b.n	8008052 <HAL_SPI_Transmit+0x280>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2203      	movs	r2, #3
 8007e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e68:	d10f      	bne.n	8007e8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e94:	2b40      	cmp	r3, #64	@ 0x40
 8007e96:	d007      	beq.n	8007ea8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eb0:	d152      	bne.n	8007f58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <HAL_SPI_Transmit+0xee>
 8007eba:	8b7b      	ldrh	r3, [r7, #26]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d145      	bne.n	8007f4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec4:	881a      	ldrh	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed0:	1c9a      	adds	r2, r3, #2
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ee4:	e032      	b.n	8007f4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d112      	bne.n	8007f1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	881a      	ldrh	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	1c9a      	adds	r2, r3, #2
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f18:	e018      	b.n	8007f4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f1a:	f7fd fa5b 	bl	80053d4 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d803      	bhi.n	8007f32 <HAL_SPI_Transmit+0x160>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d102      	bne.n	8007f38 <HAL_SPI_Transmit+0x166>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d109      	bne.n	8007f4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e082      	b.n	8008052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1c7      	bne.n	8007ee6 <HAL_SPI_Transmit+0x114>
 8007f56:	e053      	b.n	8008000 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_SPI_Transmit+0x194>
 8007f60:	8b7b      	ldrh	r3, [r7, #26]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d147      	bne.n	8007ff6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f8c:	e033      	b.n	8007ff6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d113      	bne.n	8007fc4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007fc2:	e018      	b.n	8007ff6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fc4:	f7fd fa06 	bl	80053d4 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d803      	bhi.n	8007fdc <HAL_SPI_Transmit+0x20a>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d102      	bne.n	8007fe2 <HAL_SPI_Transmit+0x210>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e02d      	b.n	8008052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1c6      	bne.n	8007f8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fb6b 	bl	80086e0 <SPI_EndRxTxTransaction>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008050:	2300      	movs	r3, #0
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b08a      	sub	sp, #40	@ 0x28
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008068:	2301      	movs	r3, #1
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800806c:	f7fd f9b2 	bl	80053d4 <HAL_GetTick>
 8008070:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008078:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008084:	7ffb      	ldrb	r3, [r7, #31]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d00c      	beq.n	80080a4 <HAL_SPI_TransmitReceive+0x4a>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008090:	d106      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x46>
 800809a:	7ffb      	ldrb	r3, [r7, #31]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d001      	beq.n	80080a4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
 80080a2:	e17f      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x5c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x5c>
 80080b0:	887b      	ldrh	r3, [r7, #2]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e174      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_SPI_TransmitReceive+0x6e>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e16d      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d003      	beq.n	80080e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2205      	movs	r2, #5
 80080e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	887a      	ldrh	r2, [r7, #2]
 80080f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	887a      	ldrh	r2, [r7, #2]
 80080fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	887a      	ldrh	r2, [r7, #2]
 8008106:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	887a      	ldrh	r2, [r7, #2]
 800810c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008124:	2b40      	cmp	r3, #64	@ 0x40
 8008126:	d007      	beq.n	8008138 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008140:	d17e      	bne.n	8008240 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SPI_TransmitReceive+0xf6>
 800814a:	8afb      	ldrh	r3, [r7, #22]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d16c      	bne.n	800822a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008154:	881a      	ldrh	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008160:	1c9a      	adds	r2, r3, #2
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008174:	e059      	b.n	800822a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b02      	cmp	r3, #2
 8008182:	d11b      	bne.n	80081bc <HAL_SPI_TransmitReceive+0x162>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d016      	beq.n	80081bc <HAL_SPI_TransmitReceive+0x162>
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	2b01      	cmp	r3, #1
 8008192:	d113      	bne.n	80081bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a4:	1c9a      	adds	r2, r3, #2
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d119      	bne.n	80081fe <HAL_SPI_TransmitReceive+0x1a4>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d014      	beq.n	80081fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081de:	b292      	uxth	r2, r2
 80081e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e6:	1c9a      	adds	r2, r3, #2
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081fa:	2301      	movs	r3, #1
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081fe:	f7fd f8e9 	bl	80053d4 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820a:	429a      	cmp	r2, r3
 800820c:	d80d      	bhi.n	800822a <HAL_SPI_TransmitReceive+0x1d0>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d009      	beq.n	800822a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e0bc      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800822e:	b29b      	uxth	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1a0      	bne.n	8008176 <HAL_SPI_TransmitReceive+0x11c>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d19b      	bne.n	8008176 <HAL_SPI_TransmitReceive+0x11c>
 800823e:	e082      	b.n	8008346 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <HAL_SPI_TransmitReceive+0x1f4>
 8008248:	8afb      	ldrh	r3, [r7, #22]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d171      	bne.n	8008332 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008274:	e05d      	b.n	8008332 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b02      	cmp	r3, #2
 8008282:	d11c      	bne.n	80082be <HAL_SPI_TransmitReceive+0x264>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d017      	beq.n	80082be <HAL_SPI_TransmitReceive+0x264>
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	2b01      	cmp	r3, #1
 8008292:	d114      	bne.n	80082be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	330c      	adds	r3, #12
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d119      	bne.n	8008300 <HAL_SPI_TransmitReceive+0x2a6>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d014      	beq.n	8008300 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082fc:	2301      	movs	r3, #1
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008300:	f7fd f868 	bl	80053d4 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800830c:	429a      	cmp	r2, r3
 800830e:	d803      	bhi.n	8008318 <HAL_SPI_TransmitReceive+0x2be>
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d102      	bne.n	800831e <HAL_SPI_TransmitReceive+0x2c4>
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e038      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d19c      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x21c>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d197      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008346:	6a3a      	ldr	r2, [r7, #32]
 8008348:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f9c8 	bl	80086e0 <SPI_EndRxTxTransaction>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d008      	beq.n	8008368 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2220      	movs	r2, #32
 800835a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e01d      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008370:	2300      	movs	r3, #0
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80083a2:	2300      	movs	r3, #0
  }
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	@ 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10e      	bne.n	80083ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
    return;
 80083ea:	e0ce      	b.n	800858a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <HAL_SPI_IRQHandler+0x5e>
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
    return;
 8008408:	e0bf      	b.n	800858a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <HAL_SPI_IRQHandler+0x7e>
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	d105      	bne.n	800842a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80b0 	beq.w	800858a <HAL_SPI_IRQHandler+0x1de>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80aa 	beq.w	800858a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d023      	beq.n	8008488 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b03      	cmp	r3, #3
 800844a:	d011      	beq.n	8008470 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008450:	f043 0204 	orr.w	r2, r3, #4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	e00b      	b.n	8008488 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008470:	2300      	movs	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
        return;
 8008486:	e080      	b.n	800858a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d014      	beq.n	80084bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008496:	f043 0201 	orr.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ca:	f043 0208 	orr.w	r2, r3, #8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084d2:	2300      	movs	r3, #0
 80084d4:	60bb      	str	r3, [r7, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d04f      	beq.n	8008588 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d104      	bne.n	8008514 <HAL_SPI_IRQHandler+0x168>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d034      	beq.n	800857e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0203 	bic.w	r2, r2, #3
 8008522:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d011      	beq.n	8008550 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008530:	4a17      	ldr	r2, [pc, #92]	@ (8008590 <HAL_SPI_IRQHandler+0x1e4>)
 8008532:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008538:	4618      	mov	r0, r3
 800853a:	f7fd f9ab 	bl	8005894 <HAL_DMA_Abort_IT>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008548:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008554:	2b00      	cmp	r3, #0
 8008556:	d016      	beq.n	8008586 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800855c:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <HAL_SPI_IRQHandler+0x1e4>)
 800855e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008564:	4618      	mov	r0, r3
 8008566:	f7fd f995 	bl	8005894 <HAL_DMA_Abort_IT>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008574:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800857c:	e003      	b.n	8008586 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f808 	bl	8008594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008584:	e000      	b.n	8008588 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008586:	bf00      	nop
    return;
 8008588:	bf00      	nop
  }
}
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	080085a9 	.word	0x080085a9

08008594 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff ffe6 	bl	8008594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085e0:	f7fc fef8 	bl	80053d4 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085f0:	f7fc fef0 	bl	80053d4 <HAL_GetTick>
 80085f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085f6:	4b39      	ldr	r3, [pc, #228]	@ (80086dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	015b      	lsls	r3, r3, #5
 80085fc:	0d1b      	lsrs	r3, r3, #20
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008606:	e054      	b.n	80086b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d050      	beq.n	80086b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008610:	f7fc fee0 	bl	80053d4 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	429a      	cmp	r2, r3
 800861e:	d902      	bls.n	8008626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d13d      	bne.n	80086a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800863e:	d111      	bne.n	8008664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008648:	d004      	beq.n	8008654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008652:	d107      	bne.n	8008664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866c:	d10f      	bne.n	800868e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800868c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e017      	b.n	80086d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	429a      	cmp	r2, r3
 80086c0:	bf0c      	ite	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	2300      	movne	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d19b      	bne.n	8008608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000038 	.word	0x20000038

080086e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2201      	movs	r2, #1
 80086f4:	2102      	movs	r1, #2
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7ff ff6a 	bl	80085d0 <SPI_WaitFlagStateUntilTimeout>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008706:	f043 0220 	orr.w	r2, r3, #32
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e032      	b.n	8008778 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008712:	4b1b      	ldr	r3, [pc, #108]	@ (8008780 <SPI_EndRxTxTransaction+0xa0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1b      	ldr	r2, [pc, #108]	@ (8008784 <SPI_EndRxTxTransaction+0xa4>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	0d5b      	lsrs	r3, r3, #21
 800871e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008730:	d112      	bne.n	8008758 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	2180      	movs	r1, #128	@ 0x80
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff ff47 	bl	80085d0 <SPI_WaitFlagStateUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d016      	beq.n	8008776 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874c:	f043 0220 	orr.w	r2, r3, #32
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e00f      	b.n	8008778 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3b01      	subs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876e:	2b80      	cmp	r3, #128	@ 0x80
 8008770:	d0f2      	beq.n	8008758 <SPI_EndRxTxTransaction+0x78>
 8008772:	e000      	b.n	8008776 <SPI_EndRxTxTransaction+0x96>
        break;
 8008774:	bf00      	nop
  }

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000038 	.word	0x20000038
 8008784:	165e9f81 	.word	0x165e9f81

08008788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e042      	b.n	8008820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fc fafc 	bl	8004dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2224      	movs	r2, #36	@ 0x24
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fdb7 	bl	8009340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e04a      	b.n	80088d0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fc faac 	bl	8004dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	@ 0x24
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800886a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fd67 	bl	8009340 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691a      	ldr	r2, [r3, #16]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695a      	ldr	r2, [r3, #20]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008890:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0208 	orr.w	r2, r2, #8
 80088a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	@ 0x28
 80088dc:	af02      	add	r7, sp, #8
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d175      	bne.n	80089e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_UART_Transmit+0x2c>
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e06e      	b.n	80089e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2221      	movs	r2, #33	@ 0x21
 8008912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008916:	f7fc fd5d 	bl	80053d4 <HAL_GetTick>
 800891a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008930:	d108      	bne.n	8008944 <HAL_UART_Transmit+0x6c>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d104      	bne.n	8008944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	e003      	b.n	800894c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800894c:	e02e      	b.n	80089ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fafb 	bl	8008f54 <UART_WaitOnFlagUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e03a      	b.n	80089e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10b      	bne.n	800898e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	3302      	adds	r3, #2
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	e007      	b.n	800899e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	3301      	adds	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1cb      	bne.n	800894e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2200      	movs	r2, #0
 80089be:	2140      	movs	r1, #64	@ 0x40
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fac7 	bl	8008f54 <UART_WaitOnFlagUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e006      	b.n	80089e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b0ba      	sub	sp, #232	@ 0xe8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10f      	bne.n	8008a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <HAL_UART_IRQHandler+0x66>
 8008a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fbb8 	bl	80091c4 <UART_Receive_IT>
      return;
 8008a54:	e25b      	b.n	8008f0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80de 	beq.w	8008c1c <HAL_UART_IRQHandler+0x22c>
 8008a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80d1 	beq.w	8008c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <HAL_UART_IRQHandler+0xae>
 8008a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a96:	f043 0201 	orr.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <HAL_UART_IRQHandler+0xd2>
 8008aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <HAL_UART_IRQHandler+0xf6>
 8008ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ade:	f043 0204 	orr.w	r2, r3, #4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d011      	beq.n	8008b16 <HAL_UART_IRQHandler+0x126>
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0e:	f043 0208 	orr.w	r2, r3, #8
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 81f2 	beq.w	8008f04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d008      	beq.n	8008b3e <HAL_UART_IRQHandler+0x14e>
 8008b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fb43 	bl	80091c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b48:	2b40      	cmp	r3, #64	@ 0x40
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2301      	moveq	r3, #1
 8008b4e:	2300      	movne	r3, #0
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <HAL_UART_IRQHandler+0x17a>
 8008b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d04f      	beq.n	8008c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fa4b 	bl	8009006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b40      	cmp	r3, #64	@ 0x40
 8008b7c:	d141      	bne.n	8008c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3314      	adds	r3, #20
 8008b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3314      	adds	r3, #20
 8008ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1d9      	bne.n	8008b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d013      	beq.n	8008bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8008dd0 <HAL_UART_IRQHandler+0x3e0>)
 8008bd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fc fe58 	bl	8005894 <HAL_DMA_Abort_IT>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d016      	beq.n	8008c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf8:	e00e      	b.n	8008c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f994 	bl	8008f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c00:	e00a      	b.n	8008c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f990 	bl	8008f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c08:	e006      	b.n	8008c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f98c 	bl	8008f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c16:	e175      	b.n	8008f04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	bf00      	nop
    return;
 8008c1a:	e173      	b.n	8008f04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	f040 814f 	bne.w	8008ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2a:	f003 0310 	and.w	r3, r3, #16
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8148 	beq.w	8008ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8141 	beq.w	8008ec4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c42:	2300      	movs	r3, #0
 8008c44:	60bb      	str	r3, [r7, #8]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c62:	2b40      	cmp	r3, #64	@ 0x40
 8008c64:	f040 80b6 	bne.w	8008dd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8145 	beq.w	8008f08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f080 813e 	bcs.w	8008f08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c9e:	f000 8088 	beq.w	8008db2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1d9      	bne.n	8008ca2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d00:	f023 0301 	bic.w	r3, r3, #1
 8008d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3314      	adds	r3, #20
 8008d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e1      	bne.n	8008cee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3314      	adds	r3, #20
 8008d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e3      	bne.n	8008d2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d82:	f023 0310 	bic.w	r3, r3, #16
 8008d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008d94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d9c:	e841 2300 	strex	r3, r2, [r1]
 8008da0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e3      	bne.n	8008d70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fc fd01 	bl	80057b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8b7 	bl	8008f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dce:	e09b      	b.n	8008f08 <HAL_UART_IRQHandler+0x518>
 8008dd0:	080090cd 	.word	0x080090cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 808e 	beq.w	8008f0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8089 	beq.w	8008f0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e26:	e841 2300 	strex	r3, r2, [r1]
 8008e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1e3      	bne.n	8008dfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3314      	adds	r3, #20
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	623b      	str	r3, [r7, #32]
   return(result);
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3314      	adds	r3, #20
 8008e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e3      	bne.n	8008e32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 0310 	bic.w	r3, r3, #16
 8008e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	330c      	adds	r3, #12
 8008e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	69b9      	ldr	r1, [r7, #24]
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e3      	bne.n	8008e78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f83d 	bl	8008f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ec2:	e023      	b.n	8008f0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d009      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x4f4>
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f909 	bl	80090f4 <UART_Transmit_IT>
    return;
 8008ee2:	e014      	b.n	8008f0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00e      	beq.n	8008f0e <HAL_UART_IRQHandler+0x51e>
 8008ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f949 	bl	8009194 <UART_EndTransmit_IT>
    return;
 8008f02:	e004      	b.n	8008f0e <HAL_UART_IRQHandler+0x51e>
    return;
 8008f04:	bf00      	nop
 8008f06:	e002      	b.n	8008f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f08:	bf00      	nop
 8008f0a:	e000      	b.n	8008f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f0c:	bf00      	nop
  }
}
 8008f0e:	37e8      	adds	r7, #232	@ 0xe8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f64:	e03b      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d037      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f6e:	f7fc fa31 	bl	80053d4 <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	6a3a      	ldr	r2, [r7, #32]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d302      	bcc.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e03a      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d023      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b80      	cmp	r3, #128	@ 0x80
 8008f9a:	d020      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b40      	cmp	r3, #64	@ 0x40
 8008fa0:	d01d      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d116      	bne.n	8008fde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 f81d 	bl	8009006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2208      	movs	r2, #8
 8008fd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e00f      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d0b4      	beq.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009006:	b480      	push	{r7}
 8009008:	b095      	sub	sp, #84	@ 0x54
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	330c      	adds	r3, #12
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	330c      	adds	r3, #12
 800902c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800902e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009034:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e5      	bne.n	800900e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3314      	adds	r3, #20
 8009048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	61fb      	str	r3, [r7, #28]
   return(result);
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3314      	adds	r3, #20
 8009060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e5      	bne.n	8009042 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907a:	2b01      	cmp	r3, #1
 800907c:	d119      	bne.n	80090b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	60bb      	str	r3, [r7, #8]
   return(result);
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f023 0310 	bic.w	r3, r3, #16
 8009094:	647b      	str	r3, [r7, #68]	@ 0x44
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	330c      	adds	r3, #12
 800909c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800909e:	61ba      	str	r2, [r7, #24]
 80090a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6979      	ldr	r1, [r7, #20]
 80090a4:	69ba      	ldr	r2, [r7, #24]
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	613b      	str	r3, [r7, #16]
   return(result);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e5      	bne.n	800907e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80090c0:	bf00      	nop
 80090c2:	3754      	adds	r7, #84	@ 0x54
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff ff1e 	bl	8008f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b21      	cmp	r3, #33	@ 0x21
 8009106:	d13e      	bne.n	8009186 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009110:	d114      	bne.n	800913c <UART_Transmit_IT+0x48>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d110      	bne.n	800913c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800912e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	1c9a      	adds	r2, r3, #2
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]
 800913a:	e008      	b.n	800914e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	1c59      	adds	r1, r3, #1
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6211      	str	r1, [r2, #32]
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4619      	mov	r1, r3
 800915c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10f      	bne.n	8009182 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009170:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009180:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009186:	2302      	movs	r3, #2
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fead 	bl	8008f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08c      	sub	sp, #48	@ 0x30
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b22      	cmp	r3, #34	@ 0x22
 80091d6:	f040 80ae 	bne.w	8009336 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091e2:	d117      	bne.n	8009214 <UART_Receive_IT+0x50>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009202:	b29a      	uxth	r2, r3
 8009204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009206:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	1c9a      	adds	r2, r3, #2
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	629a      	str	r2, [r3, #40]	@ 0x28
 8009212:	e026      	b.n	8009262 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009218:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009226:	d007      	beq.n	8009238 <UART_Receive_IT+0x74>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <UART_Receive_IT+0x82>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	e008      	b.n	8009258 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009252:	b2da      	uxtb	r2, r3
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009266:	b29b      	uxth	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	b29b      	uxth	r3, r3
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	4619      	mov	r1, r3
 8009270:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009272:	2b00      	cmp	r3, #0
 8009274:	d15d      	bne.n	8009332 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0220 	bic.w	r2, r2, #32
 8009284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695a      	ldr	r2, [r3, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0201 	bic.w	r2, r2, #1
 80092a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d135      	bne.n	8009328 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	613b      	str	r3, [r7, #16]
   return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f023 0310 	bic.w	r3, r3, #16
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e2:	623a      	str	r2, [r7, #32]
 80092e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	69f9      	ldr	r1, [r7, #28]
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e5      	bne.n	80092c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d10a      	bne.n	800931a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fe0b 	bl	8008f3c <HAL_UARTEx_RxEventCallback>
 8009326:	e002      	b.n	800932e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7f7 ff53 	bl	80011d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e002      	b.n	8009338 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	e000      	b.n	8009338 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009336:	2302      	movs	r3, #2
  }
}
 8009338:	4618      	mov	r0, r3
 800933a:	3730      	adds	r7, #48	@ 0x30
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009344:	b0c0      	sub	sp, #256	@ 0x100
 8009346:	af00      	add	r7, sp, #0
 8009348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800934c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800935c:	68d9      	ldr	r1, [r3, #12]
 800935e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	ea40 0301 	orr.w	r3, r0, r1
 8009368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	431a      	orrs	r2, r3
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	431a      	orrs	r2, r3
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	4313      	orrs	r3, r2
 8009388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009398:	f021 010c 	bic.w	r1, r1, #12
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80093a6:	430b      	orrs	r3, r1
 80093a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80093b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ba:	6999      	ldr	r1, [r3, #24]
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	ea40 0301 	orr.w	r3, r0, r1
 80093c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b8f      	ldr	r3, [pc, #572]	@ (800960c <UART_SetConfig+0x2cc>)
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d005      	beq.n	80093e0 <UART_SetConfig+0xa0>
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b8d      	ldr	r3, [pc, #564]	@ (8009610 <UART_SetConfig+0x2d0>)
 80093dc:	429a      	cmp	r2, r3
 80093de:	d104      	bne.n	80093ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093e0:	f7fe fc5a 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 80093e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80093e8:	e003      	b.n	80093f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093ea:	f7fe fc41 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 80093ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093fc:	f040 810c 	bne.w	8009618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009404:	2200      	movs	r2, #0
 8009406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800940a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800940e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009412:	4622      	mov	r2, r4
 8009414:	462b      	mov	r3, r5
 8009416:	1891      	adds	r1, r2, r2
 8009418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800941a:	415b      	adcs	r3, r3
 800941c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800941e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009422:	4621      	mov	r1, r4
 8009424:	eb12 0801 	adds.w	r8, r2, r1
 8009428:	4629      	mov	r1, r5
 800942a:	eb43 0901 	adc.w	r9, r3, r1
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	f04f 0300 	mov.w	r3, #0
 8009436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800943a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800943e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009442:	4690      	mov	r8, r2
 8009444:	4699      	mov	r9, r3
 8009446:	4623      	mov	r3, r4
 8009448:	eb18 0303 	adds.w	r3, r8, r3
 800944c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009450:	462b      	mov	r3, r5
 8009452:	eb49 0303 	adc.w	r3, r9, r3
 8009456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800946a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800946e:	460b      	mov	r3, r1
 8009470:	18db      	adds	r3, r3, r3
 8009472:	653b      	str	r3, [r7, #80]	@ 0x50
 8009474:	4613      	mov	r3, r2
 8009476:	eb42 0303 	adc.w	r3, r2, r3
 800947a:	657b      	str	r3, [r7, #84]	@ 0x54
 800947c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009484:	f7f7 fba8 	bl	8000bd8 <__aeabi_uldivmod>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4b61      	ldr	r3, [pc, #388]	@ (8009614 <UART_SetConfig+0x2d4>)
 800948e:	fba3 2302 	umull	r2, r3, r3, r2
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	011c      	lsls	r4, r3, #4
 8009496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800949a:	2200      	movs	r2, #0
 800949c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80094a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	1891      	adds	r1, r2, r2
 80094ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80094b0:	415b      	adcs	r3, r3
 80094b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80094b8:	4641      	mov	r1, r8
 80094ba:	eb12 0a01 	adds.w	sl, r2, r1
 80094be:	4649      	mov	r1, r9
 80094c0:	eb43 0b01 	adc.w	fp, r3, r1
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d8:	4692      	mov	sl, r2
 80094da:	469b      	mov	fp, r3
 80094dc:	4643      	mov	r3, r8
 80094de:	eb1a 0303 	adds.w	r3, sl, r3
 80094e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094e6:	464b      	mov	r3, r9
 80094e8:	eb4b 0303 	adc.w	r3, fp, r3
 80094ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009504:	460b      	mov	r3, r1
 8009506:	18db      	adds	r3, r3, r3
 8009508:	643b      	str	r3, [r7, #64]	@ 0x40
 800950a:	4613      	mov	r3, r2
 800950c:	eb42 0303 	adc.w	r3, r2, r3
 8009510:	647b      	str	r3, [r7, #68]	@ 0x44
 8009512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800951a:	f7f7 fb5d 	bl	8000bd8 <__aeabi_uldivmod>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4611      	mov	r1, r2
 8009524:	4b3b      	ldr	r3, [pc, #236]	@ (8009614 <UART_SetConfig+0x2d4>)
 8009526:	fba3 2301 	umull	r2, r3, r3, r1
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	2264      	movs	r2, #100	@ 0x64
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	1acb      	subs	r3, r1, r3
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800953a:	4b36      	ldr	r3, [pc, #216]	@ (8009614 <UART_SetConfig+0x2d4>)
 800953c:	fba3 2302 	umull	r2, r3, r3, r2
 8009540:	095b      	lsrs	r3, r3, #5
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009548:	441c      	add	r4, r3
 800954a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800954e:	2200      	movs	r2, #0
 8009550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	1891      	adds	r1, r2, r2
 8009562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009564:	415b      	adcs	r3, r3
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800956c:	4641      	mov	r1, r8
 800956e:	1851      	adds	r1, r2, r1
 8009570:	6339      	str	r1, [r7, #48]	@ 0x30
 8009572:	4649      	mov	r1, r9
 8009574:	414b      	adcs	r3, r1
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009584:	4659      	mov	r1, fp
 8009586:	00cb      	lsls	r3, r1, #3
 8009588:	4651      	mov	r1, sl
 800958a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800958e:	4651      	mov	r1, sl
 8009590:	00ca      	lsls	r2, r1, #3
 8009592:	4610      	mov	r0, r2
 8009594:	4619      	mov	r1, r3
 8009596:	4603      	mov	r3, r0
 8009598:	4642      	mov	r2, r8
 800959a:	189b      	adds	r3, r3, r2
 800959c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095a0:	464b      	mov	r3, r9
 80095a2:	460a      	mov	r2, r1
 80095a4:	eb42 0303 	adc.w	r3, r2, r3
 80095a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80095bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095c0:	460b      	mov	r3, r1
 80095c2:	18db      	adds	r3, r3, r3
 80095c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095c6:	4613      	mov	r3, r2
 80095c8:	eb42 0303 	adc.w	r3, r2, r3
 80095cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80095d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80095d6:	f7f7 faff 	bl	8000bd8 <__aeabi_uldivmod>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <UART_SetConfig+0x2d4>)
 80095e0:	fba3 1302 	umull	r1, r3, r3, r2
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	2164      	movs	r1, #100	@ 0x64
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	3332      	adds	r3, #50	@ 0x32
 80095f2:	4a08      	ldr	r2, [pc, #32]	@ (8009614 <UART_SetConfig+0x2d4>)
 80095f4:	fba2 2303 	umull	r2, r3, r2, r3
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	f003 0207 	and.w	r2, r3, #7
 80095fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4422      	add	r2, r4
 8009606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009608:	e106      	b.n	8009818 <UART_SetConfig+0x4d8>
 800960a:	bf00      	nop
 800960c:	40011000 	.word	0x40011000
 8009610:	40011400 	.word	0x40011400
 8009614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800962a:	4642      	mov	r2, r8
 800962c:	464b      	mov	r3, r9
 800962e:	1891      	adds	r1, r2, r2
 8009630:	6239      	str	r1, [r7, #32]
 8009632:	415b      	adcs	r3, r3
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
 8009636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800963a:	4641      	mov	r1, r8
 800963c:	1854      	adds	r4, r2, r1
 800963e:	4649      	mov	r1, r9
 8009640:	eb43 0501 	adc.w	r5, r3, r1
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	00eb      	lsls	r3, r5, #3
 800964e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009652:	00e2      	lsls	r2, r4, #3
 8009654:	4614      	mov	r4, r2
 8009656:	461d      	mov	r5, r3
 8009658:	4643      	mov	r3, r8
 800965a:	18e3      	adds	r3, r4, r3
 800965c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009660:	464b      	mov	r3, r9
 8009662:	eb45 0303 	adc.w	r3, r5, r3
 8009666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800966a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009686:	4629      	mov	r1, r5
 8009688:	008b      	lsls	r3, r1, #2
 800968a:	4621      	mov	r1, r4
 800968c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009690:	4621      	mov	r1, r4
 8009692:	008a      	lsls	r2, r1, #2
 8009694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009698:	f7f7 fa9e 	bl	8000bd8 <__aeabi_uldivmod>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4b60      	ldr	r3, [pc, #384]	@ (8009824 <UART_SetConfig+0x4e4>)
 80096a2:	fba3 2302 	umull	r2, r3, r3, r2
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	011c      	lsls	r4, r3, #4
 80096aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80096b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	1891      	adds	r1, r2, r2
 80096c2:	61b9      	str	r1, [r7, #24]
 80096c4:	415b      	adcs	r3, r3
 80096c6:	61fb      	str	r3, [r7, #28]
 80096c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096cc:	4641      	mov	r1, r8
 80096ce:	1851      	adds	r1, r2, r1
 80096d0:	6139      	str	r1, [r7, #16]
 80096d2:	4649      	mov	r1, r9
 80096d4:	414b      	adcs	r3, r1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	f04f 0200 	mov.w	r2, #0
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096e4:	4659      	mov	r1, fp
 80096e6:	00cb      	lsls	r3, r1, #3
 80096e8:	4651      	mov	r1, sl
 80096ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ee:	4651      	mov	r1, sl
 80096f0:	00ca      	lsls	r2, r1, #3
 80096f2:	4610      	mov	r0, r2
 80096f4:	4619      	mov	r1, r3
 80096f6:	4603      	mov	r3, r0
 80096f8:	4642      	mov	r2, r8
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009700:	464b      	mov	r3, r9
 8009702:	460a      	mov	r2, r1
 8009704:	eb42 0303 	adc.w	r3, r2, r3
 8009708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800970c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009718:	f04f 0200 	mov.w	r2, #0
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009724:	4649      	mov	r1, r9
 8009726:	008b      	lsls	r3, r1, #2
 8009728:	4641      	mov	r1, r8
 800972a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800972e:	4641      	mov	r1, r8
 8009730:	008a      	lsls	r2, r1, #2
 8009732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009736:	f7f7 fa4f 	bl	8000bd8 <__aeabi_uldivmod>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4611      	mov	r1, r2
 8009740:	4b38      	ldr	r3, [pc, #224]	@ (8009824 <UART_SetConfig+0x4e4>)
 8009742:	fba3 2301 	umull	r2, r3, r3, r1
 8009746:	095b      	lsrs	r3, r3, #5
 8009748:	2264      	movs	r2, #100	@ 0x64
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	1acb      	subs	r3, r1, r3
 8009750:	011b      	lsls	r3, r3, #4
 8009752:	3332      	adds	r3, #50	@ 0x32
 8009754:	4a33      	ldr	r2, [pc, #204]	@ (8009824 <UART_SetConfig+0x4e4>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009760:	441c      	add	r4, r3
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	2200      	movs	r2, #0
 8009768:	673b      	str	r3, [r7, #112]	@ 0x70
 800976a:	677a      	str	r2, [r7, #116]	@ 0x74
 800976c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009770:	4642      	mov	r2, r8
 8009772:	464b      	mov	r3, r9
 8009774:	1891      	adds	r1, r2, r2
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	415b      	adcs	r3, r3
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009780:	4641      	mov	r1, r8
 8009782:	1851      	adds	r1, r2, r1
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	4649      	mov	r1, r9
 8009788:	414b      	adcs	r3, r1
 800978a:	607b      	str	r3, [r7, #4]
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009798:	4659      	mov	r1, fp
 800979a:	00cb      	lsls	r3, r1, #3
 800979c:	4651      	mov	r1, sl
 800979e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a2:	4651      	mov	r1, sl
 80097a4:	00ca      	lsls	r2, r1, #3
 80097a6:	4610      	mov	r0, r2
 80097a8:	4619      	mov	r1, r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	4642      	mov	r2, r8
 80097ae:	189b      	adds	r3, r3, r2
 80097b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097b2:	464b      	mov	r3, r9
 80097b4:	460a      	mov	r2, r1
 80097b6:	eb42 0303 	adc.w	r3, r2, r3
 80097ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80097c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80097d4:	4649      	mov	r1, r9
 80097d6:	008b      	lsls	r3, r1, #2
 80097d8:	4641      	mov	r1, r8
 80097da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097de:	4641      	mov	r1, r8
 80097e0:	008a      	lsls	r2, r1, #2
 80097e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097e6:	f7f7 f9f7 	bl	8000bd8 <__aeabi_uldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <UART_SetConfig+0x4e4>)
 80097f0:	fba3 1302 	umull	r1, r3, r3, r2
 80097f4:	095b      	lsrs	r3, r3, #5
 80097f6:	2164      	movs	r1, #100	@ 0x64
 80097f8:	fb01 f303 	mul.w	r3, r1, r3
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	3332      	adds	r3, #50	@ 0x32
 8009802:	4a08      	ldr	r2, [pc, #32]	@ (8009824 <UART_SetConfig+0x4e4>)
 8009804:	fba2 2303 	umull	r2, r3, r2, r3
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	f003 020f 	and.w	r2, r3, #15
 800980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4422      	add	r2, r4
 8009816:	609a      	str	r2, [r3, #8]
}
 8009818:	bf00      	nop
 800981a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800981e:	46bd      	mov	sp, r7
 8009820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009824:	51eb851f 	.word	0x51eb851f

08009828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800982c:	4904      	ldr	r1, [pc, #16]	@ (8009840 <MX_FATFS_Init+0x18>)
 800982e:	4805      	ldr	r0, [pc, #20]	@ (8009844 <MX_FATFS_Init+0x1c>)
 8009830:	f003 f8c8 	bl	800c9c4 <FATFS_LinkDriver>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	4b03      	ldr	r3, [pc, #12]	@ (8009848 <MX_FATFS_Init+0x20>)
 800983a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200015a4 	.word	0x200015a4
 8009844:	20000044 	.word	0x20000044
 8009848:	200015a0 	.word	0x200015a0

0800984c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009852:	4618      	mov	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 fe7b 	bl	8001564 <SD_disk_initialize>
 800986e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	4618      	mov	r0, r3
 8009886:	f7f7 ff53 	bl	8001730 <SD_disk_status>
 800988a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80098a4:	7bf8      	ldrb	r0, [r7, #15]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	f7f7 ff56 	bl	800175c <SD_disk_read>
 80098b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 80098ca:	7bf8      	ldrb	r0, [r7, #15]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	f7f7 ffad 	bl	8001830 <SD_disk_write>
 80098d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	603a      	str	r2, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
 80098ec:	460b      	mov	r3, r1
 80098ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 80098f0:	79b9      	ldrb	r1, [r7, #6]
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f8 f81e 	bl	8001938 <SD_disk_ioctl>
 80098fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	4a08      	ldr	r2, [pc, #32]	@ (8009938 <disk_status+0x30>)
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	79fa      	ldrb	r2, [r7, #7]
 8009920:	4905      	ldr	r1, [pc, #20]	@ (8009938 <disk_status+0x30>)
 8009922:	440a      	add	r2, r1
 8009924:	7a12      	ldrb	r2, [r2, #8]
 8009926:	4610      	mov	r0, r2
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	200017d0 	.word	0x200017d0

0800993c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	4a0e      	ldr	r2, [pc, #56]	@ (8009988 <disk_initialize+0x4c>)
 800994e:	5cd3      	ldrb	r3, [r2, r3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d114      	bne.n	800997e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	4a0c      	ldr	r2, [pc, #48]	@ (8009988 <disk_initialize+0x4c>)
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	4909      	ldr	r1, [pc, #36]	@ (8009988 <disk_initialize+0x4c>)
 8009964:	440a      	add	r2, r1
 8009966:	7a12      	ldrb	r2, [r2, #8]
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	4a03      	ldr	r2, [pc, #12]	@ (8009988 <disk_initialize+0x4c>)
 800997a:	2101      	movs	r1, #1
 800997c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200017d0 	.word	0x200017d0

0800998c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	4a0a      	ldr	r2, [pc, #40]	@ (80099c8 <disk_read+0x3c>)
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	689c      	ldr	r4, [r3, #8]
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4a07      	ldr	r2, [pc, #28]	@ (80099c8 <disk_read+0x3c>)
 80099ac:	4413      	add	r3, r2
 80099ae:	7a18      	ldrb	r0, [r3, #8]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	47a0      	blx	r4
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200017d0 	.word	0x200017d0

080099cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4a0a      	ldr	r2, [pc, #40]	@ (8009a08 <disk_write+0x3c>)
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	68dc      	ldr	r4, [r3, #12]
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	4a07      	ldr	r2, [pc, #28]	@ (8009a08 <disk_write+0x3c>)
 80099ec:	4413      	add	r3, r2
 80099ee:	7a18      	ldrb	r0, [r3, #8]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	47a0      	blx	r4
 80099f8:	4603      	mov	r3, r0
 80099fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80099fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd90      	pop	{r4, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200017d0 	.word	0x200017d0

08009a0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	603a      	str	r2, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	4a09      	ldr	r2, [pc, #36]	@ (8009a44 <disk_ioctl+0x38>)
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	79fa      	ldrb	r2, [r7, #7]
 8009a2a:	4906      	ldr	r1, [pc, #24]	@ (8009a44 <disk_ioctl+0x38>)
 8009a2c:	440a      	add	r2, r1
 8009a2e:	7a10      	ldrb	r0, [r2, #8]
 8009a30:	79b9      	ldrb	r1, [r7, #6]
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4798      	blx	r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	200017d0 	.word	0x200017d0

08009a48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3301      	adds	r3, #1
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a58:	89fb      	ldrh	r3, [r7, #14]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b21a      	sxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b21b      	sxth	r3, r3
 8009a64:	4313      	orrs	r3, r2
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3303      	adds	r3, #3
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	021b      	lsls	r3, r3, #8
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	3202      	adds	r2, #2
 8009a90:	7812      	ldrb	r2, [r2, #0]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	3201      	adds	r2, #1
 8009a9e:	7812      	ldrb	r2, [r2, #0]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	7812      	ldrb	r2, [r2, #0]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	887a      	ldrh	r2, [r7, #2]
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	887a      	ldrh	r2, [r7, #2]
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	0a1b      	lsrs	r3, r3, #8
 8009b32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00d      	beq.n	8009b82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	1c53      	adds	r3, r2, #1
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1c59      	adds	r1, r3, #1
 8009b70:	6179      	str	r1, [r7, #20]
 8009b72:	7812      	ldrb	r2, [r2, #0]
 8009b74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f1      	bne.n	8009b66 <mem_cpy+0x1a>
	}
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b8e:	b480      	push	{r7}
 8009b90:	b087      	sub	sp, #28
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	617a      	str	r2, [r7, #20]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	607b      	str	r3, [r7, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f3      	bne.n	8009b9e <mem_set+0x10>
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bc4:	b480      	push	{r7}
 8009bc6:	b089      	sub	sp, #36	@ 0x24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	61fa      	str	r2, [r7, #28]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	4619      	mov	r1, r3
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	61ba      	str	r2, [r7, #24]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	1acb      	subs	r3, r1, r3
 8009bf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	607b      	str	r3, [r7, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <mem_cmp+0x40>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0eb      	beq.n	8009bdc <mem_cmp+0x18>

	return r;
 8009c04:	697b      	ldr	r3, [r7, #20]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3724      	adds	r7, #36	@ 0x24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c1c:	e002      	b.n	8009c24 <chk_chr+0x12>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3301      	adds	r3, #1
 8009c22:	607b      	str	r3, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <chk_chr+0x26>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d1f2      	bne.n	8009c1e <chk_chr+0xc>
	return *str;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c52:	2300      	movs	r3, #0
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	e029      	b.n	8009cb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c5c:	4a27      	ldr	r2, [pc, #156]	@ (8009cfc <chk_lock+0xb4>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	4413      	add	r3, r2
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d01d      	beq.n	8009ca6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c6a:	4a24      	ldr	r2, [pc, #144]	@ (8009cfc <chk_lock+0xb4>)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	011b      	lsls	r3, r3, #4
 8009c70:	4413      	add	r3, r2
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d116      	bne.n	8009caa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009cfc <chk_lock+0xb4>)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	4413      	add	r3, r2
 8009c84:	3304      	adds	r3, #4
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d10c      	bne.n	8009caa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c90:	4a1a      	ldr	r2, [pc, #104]	@ (8009cfc <chk_lock+0xb4>)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	4413      	add	r3, r2
 8009c98:	3308      	adds	r3, #8
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d102      	bne.n	8009caa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ca4:	e007      	b.n	8009cb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d9d2      	bls.n	8009c5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d109      	bne.n	8009cd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d102      	bne.n	8009cc8 <chk_lock+0x80>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d101      	bne.n	8009ccc <chk_lock+0x84>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e010      	b.n	8009cee <chk_lock+0xa6>
 8009ccc:	2312      	movs	r3, #18
 8009cce:	e00e      	b.n	8009cee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d108      	bne.n	8009ce8 <chk_lock+0xa0>
 8009cd6:	4a09      	ldr	r2, [pc, #36]	@ (8009cfc <chk_lock+0xb4>)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	4413      	add	r3, r2
 8009cde:	330c      	adds	r3, #12
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce6:	d101      	bne.n	8009cec <chk_lock+0xa4>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	e000      	b.n	8009cee <chk_lock+0xa6>
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	200015b0 	.word	0x200015b0

08009d00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d06:	2300      	movs	r3, #0
 8009d08:	607b      	str	r3, [r7, #4]
 8009d0a:	e002      	b.n	8009d12 <enq_lock+0x12>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	607b      	str	r3, [r7, #4]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d806      	bhi.n	8009d26 <enq_lock+0x26>
 8009d18:	4a09      	ldr	r2, [pc, #36]	@ (8009d40 <enq_lock+0x40>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	4413      	add	r3, r2
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f2      	bne.n	8009d0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	bf14      	ite	ne
 8009d2c:	2301      	movne	r3, #1
 8009d2e:	2300      	moveq	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	200015b0 	.word	0x200015b0

08009d44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e01f      	b.n	8009d94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d54:	4a41      	ldr	r2, [pc, #260]	@ (8009e5c <inc_lock+0x118>)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	4413      	add	r3, r2
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d113      	bne.n	8009d8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d66:	4a3d      	ldr	r2, [pc, #244]	@ (8009e5c <inc_lock+0x118>)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3304      	adds	r3, #4
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d109      	bne.n	8009d8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d7a:	4a38      	ldr	r2, [pc, #224]	@ (8009e5c <inc_lock+0x118>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	4413      	add	r3, r2
 8009d82:	3308      	adds	r3, #8
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d006      	beq.n	8009d9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3301      	adds	r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d9dc      	bls.n	8009d54 <inc_lock+0x10>
 8009d9a:	e000      	b.n	8009d9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d132      	bne.n	8009e0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e002      	b.n	8009db0 <inc_lock+0x6c>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3301      	adds	r3, #1
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d806      	bhi.n	8009dc4 <inc_lock+0x80>
 8009db6:	4a29      	ldr	r2, [pc, #164]	@ (8009e5c <inc_lock+0x118>)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	4413      	add	r3, r2
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1f2      	bne.n	8009daa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d101      	bne.n	8009dce <inc_lock+0x8a>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e040      	b.n	8009e50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4922      	ldr	r1, [pc, #136]	@ (8009e5c <inc_lock+0x118>)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	440b      	add	r3, r1
 8009dda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	491e      	ldr	r1, [pc, #120]	@ (8009e5c <inc_lock+0x118>)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	440b      	add	r3, r1
 8009de8:	3304      	adds	r3, #4
 8009dea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695a      	ldr	r2, [r3, #20]
 8009df0:	491a      	ldr	r1, [pc, #104]	@ (8009e5c <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	440b      	add	r3, r1
 8009df8:	3308      	adds	r3, #8
 8009dfa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009dfc:	4a17      	ldr	r2, [pc, #92]	@ (8009e5c <inc_lock+0x118>)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	4413      	add	r3, r2
 8009e04:	330c      	adds	r3, #12
 8009e06:	2200      	movs	r2, #0
 8009e08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <inc_lock+0xe0>
 8009e10:	4a12      	ldr	r2, [pc, #72]	@ (8009e5c <inc_lock+0x118>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	4413      	add	r3, r2
 8009e18:	330c      	adds	r3, #12
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <inc_lock+0xe0>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e015      	b.n	8009e50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d108      	bne.n	8009e3c <inc_lock+0xf8>
 8009e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e5c <inc_lock+0x118>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	4413      	add	r3, r2
 8009e32:	330c      	adds	r3, #12
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	e001      	b.n	8009e40 <inc_lock+0xfc>
 8009e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e40:	4906      	ldr	r1, [pc, #24]	@ (8009e5c <inc_lock+0x118>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	440b      	add	r3, r1
 8009e48:	330c      	adds	r3, #12
 8009e4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3301      	adds	r3, #1
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	200015b0 	.word	0x200015b0

08009e60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	607b      	str	r3, [r7, #4]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d825      	bhi.n	8009ec0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e74:	4a17      	ldr	r2, [pc, #92]	@ (8009ed4 <dec_lock+0x74>)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	011b      	lsls	r3, r3, #4
 8009e7a:	4413      	add	r3, r2
 8009e7c:	330c      	adds	r3, #12
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e82:	89fb      	ldrh	r3, [r7, #14]
 8009e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e88:	d101      	bne.n	8009e8e <dec_lock+0x2e>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e8e:	89fb      	ldrh	r3, [r7, #14]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <dec_lock+0x3a>
 8009e94:	89fb      	ldrh	r3, [r7, #14]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8009ed4 <dec_lock+0x74>)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	4413      	add	r3, r2
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	89fa      	ldrh	r2, [r7, #14]
 8009ea6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d105      	bne.n	8009eba <dec_lock+0x5a>
 8009eae:	4a09      	ldr	r2, [pc, #36]	@ (8009ed4 <dec_lock+0x74>)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	4413      	add	r3, r2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	737b      	strb	r3, [r7, #13]
 8009ebe:	e001      	b.n	8009ec4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ec4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	200015b0 	.word	0x200015b0

08009ed8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e010      	b.n	8009f08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8009f1c <clear_lock+0x44>)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	4413      	add	r3, r2
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d105      	bne.n	8009f02 <clear_lock+0x2a>
 8009ef6:	4a09      	ldr	r2, [pc, #36]	@ (8009f1c <clear_lock+0x44>)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	4413      	add	r3, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d9eb      	bls.n	8009ee6 <clear_lock+0xe>
	}
}
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	200015b0 	.word	0x200015b0

08009f20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	78db      	ldrb	r3, [r3, #3]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d034      	beq.n	8009f9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7858      	ldrb	r0, [r3, #1]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f44:	2301      	movs	r3, #1
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	f7ff fd40 	bl	80099cc <disk_write>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	e022      	b.n	8009f9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	1ad2      	subs	r2, r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d217      	bcs.n	8009f9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	789b      	ldrb	r3, [r3, #2]
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	e010      	b.n	8009f98 <sync_window+0x78>
					wsect += fs->fsize;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7858      	ldrb	r0, [r3, #1]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	f7ff fd1d 	bl	80099cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	613b      	str	r3, [r7, #16]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d8eb      	bhi.n	8009f76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d01b      	beq.n	8009ff8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff ffad 	bl	8009f20 <sync_window>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d113      	bne.n	8009ff8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7858      	ldrb	r0, [r3, #1]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fda:	2301      	movs	r3, #1
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	f7ff fcd5 	bl	800998c <disk_read>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff ff87 	bl	8009f20 <sync_window>
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d159      	bne.n	800a0d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b03      	cmp	r3, #3
 800a022:	d149      	bne.n	800a0b8 <sync_fs+0xb4>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	791b      	ldrb	r3, [r3, #4]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d145      	bne.n	800a0b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	899b      	ldrh	r3, [r3, #12]
 800a036:	461a      	mov	r2, r3
 800a038:	2100      	movs	r1, #0
 800a03a:	f7ff fda8 	bl	8009b8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	3338      	adds	r3, #56	@ 0x38
 800a042:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a046:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fd37 	bl	8009abe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3338      	adds	r3, #56	@ 0x38
 800a054:	4921      	ldr	r1, [pc, #132]	@ (800a0dc <sync_fs+0xd8>)
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff fd4c 	bl	8009af4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3338      	adds	r3, #56	@ 0x38
 800a060:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a064:	491e      	ldr	r1, [pc, #120]	@ (800a0e0 <sync_fs+0xdc>)
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff fd44 	bl	8009af4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3338      	adds	r3, #56	@ 0x38
 800a070:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f7ff fd3a 	bl	8009af4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3338      	adds	r3, #56	@ 0x38
 800a084:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7ff fd30 	bl	8009af4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7858      	ldrb	r0, [r3, #1]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f7ff fc8d 	bl	80099cc <disk_write>
			fs->fsi_flag = 0;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fca3 	bl	8009a0c <disk_ioctl>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <sync_fs+0xcc>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	41615252 	.word	0x41615252
 800a0e0:	61417272 	.word	0x61417272

0800a0e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	3b02      	subs	r3, #2
 800a0f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	3b02      	subs	r3, #2
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d301      	bcc.n	800a104 <clust2sect+0x20>
 800a100:	2300      	movs	r3, #0
 800a102:	e008      	b.n	800a116 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	895b      	ldrh	r3, [r3, #10]
 800a108:	461a      	mov	r2, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	fb03 f202 	mul.w	r2, r3, r2
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a114:	4413      	add	r3, r2
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d904      	bls.n	800a142 <get_fat+0x20>
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d302      	bcc.n	800a148 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a142:	2301      	movs	r3, #1
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e0ba      	b.n	800a2be <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b03      	cmp	r3, #3
 800a154:	f000 8082 	beq.w	800a25c <get_fat+0x13a>
 800a158:	2b03      	cmp	r3, #3
 800a15a:	f300 80a6 	bgt.w	800a2aa <get_fat+0x188>
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d002      	beq.n	800a168 <get_fat+0x46>
 800a162:	2b02      	cmp	r3, #2
 800a164:	d055      	beq.n	800a212 <get_fat+0xf0>
 800a166:	e0a0      	b.n	800a2aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	085b      	lsrs	r3, r3, #1
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	899b      	ldrh	r3, [r3, #12]
 800a17e:	4619      	mov	r1, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	fbb3 f3f1 	udiv	r3, r3, r1
 800a186:	4413      	add	r3, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f7ff ff0c 	bl	8009fa8 <move_window>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 808c 	bne.w	800a2b0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	60fa      	str	r2, [r7, #12]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	8992      	ldrh	r2, [r2, #12]
 800a1a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1a6:	fb01 f202 	mul.w	r2, r1, r2
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	899b      	ldrh	r3, [r3, #12]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6938      	ldr	r0, [r7, #16]
 800a1cc:	f7ff feec 	bl	8009fa8 <move_window>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d16e      	bne.n	800a2b4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	899b      	ldrh	r3, [r3, #12]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1e2:	fb01 f202 	mul.w	r2, r1, r2
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1f0:	021b      	lsls	r3, r3, #8
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <get_fat+0xe6>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	e002      	b.n	800a20e <get_fat+0xec>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a20e:	617b      	str	r3, [r7, #20]
			break;
 800a210:	e055      	b.n	800a2be <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	899b      	ldrh	r3, [r3, #12]
 800a21a:	085b      	lsrs	r3, r3, #1
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4619      	mov	r1, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	fbb3 f3f1 	udiv	r3, r3, r1
 800a226:	4413      	add	r3, r2
 800a228:	4619      	mov	r1, r3
 800a22a:	6938      	ldr	r0, [r7, #16]
 800a22c:	f7ff febc 	bl	8009fa8 <move_window>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d140      	bne.n	800a2b8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	8992      	ldrh	r2, [r2, #12]
 800a244:	fbb3 f0f2 	udiv	r0, r3, r2
 800a248:	fb00 f202 	mul.w	r2, r0, r2
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	440b      	add	r3, r1
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fbf9 	bl	8009a48 <ld_word>
 800a256:	4603      	mov	r3, r0
 800a258:	617b      	str	r3, [r7, #20]
			break;
 800a25a:	e030      	b.n	800a2be <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	899b      	ldrh	r3, [r3, #12]
 800a264:	089b      	lsrs	r3, r3, #2
 800a266:	b29b      	uxth	r3, r3
 800a268:	4619      	mov	r1, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a270:	4413      	add	r3, r2
 800a272:	4619      	mov	r1, r3
 800a274:	6938      	ldr	r0, [r7, #16]
 800a276:	f7ff fe97 	bl	8009fa8 <move_window>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11d      	bne.n	800a2bc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	8992      	ldrh	r2, [r2, #12]
 800a28e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a292:	fb00 f202 	mul.w	r2, r0, r2
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	440b      	add	r3, r1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff fbec 	bl	8009a78 <ld_dword>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a2a6:	617b      	str	r3, [r7, #20]
			break;
 800a2a8:	e009      	b.n	800a2be <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e006      	b.n	800a2be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2b0:	bf00      	nop
 800a2b2:	e004      	b.n	800a2be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2b4:	bf00      	nop
 800a2b6:	e002      	b.n	800a2be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2b8:	bf00      	nop
 800a2ba:	e000      	b.n	800a2be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2bc:	bf00      	nop
		}
	}

	return val;
 800a2be:	697b      	ldr	r3, [r7, #20]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2c8:	b590      	push	{r4, r7, lr}
 800a2ca:	b089      	sub	sp, #36	@ 0x24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	f240 8109 	bls.w	800a4f2 <put_fat+0x22a>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	f080 8103 	bcs.w	800a4f2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	f000 80b6 	beq.w	800a462 <put_fat+0x19a>
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	f300 80fb 	bgt.w	800a4f2 <put_fat+0x22a>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d003      	beq.n	800a308 <put_fat+0x40>
 800a300:	2b02      	cmp	r3, #2
 800a302:	f000 8083 	beq.w	800a40c <put_fat+0x144>
 800a306:	e0f4      	b.n	800a4f2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	61bb      	str	r3, [r7, #24]
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	4413      	add	r3, r2
 800a314:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	4619      	mov	r1, r3
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	fbb3 f3f1 	udiv	r3, r3, r1
 800a326:	4413      	add	r3, r2
 800a328:	4619      	mov	r1, r3
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fe3c 	bl	8009fa8 <move_window>
 800a330:	4603      	mov	r3, r0
 800a332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a334:	7ffb      	ldrb	r3, [r7, #31]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f040 80d4 	bne.w	800a4e4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	61ba      	str	r2, [r7, #24]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	8992      	ldrh	r2, [r2, #12]
 800a34c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a350:	fb00 f202 	mul.w	r2, r0, r2
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	440b      	add	r3, r1
 800a358:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00d      	beq.n	800a380 <put_fat+0xb8>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	b25b      	sxtb	r3, r3
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	b25a      	sxtb	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	b25b      	sxtb	r3, r3
 800a378:	4313      	orrs	r3, r2
 800a37a:	b25b      	sxtb	r3, r3
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	e001      	b.n	800a384 <put_fat+0xbc>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2201      	movs	r2, #1
 800a38c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	899b      	ldrh	r3, [r3, #12]
 800a396:	4619      	mov	r1, r3
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a39e:	4413      	add	r3, r2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fe00 	bl	8009fa8 <move_window>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3ac:	7ffb      	ldrb	r3, [r7, #31]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f040 809a 	bne.w	800a4e8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	899b      	ldrh	r3, [r3, #12]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3c6:	fb00 f202 	mul.w	r2, r0, r2
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <put_fat+0x11a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	e00e      	b.n	800a400 <put_fat+0x138>
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f023 030f 	bic.w	r3, r3, #15
 800a3ec:	b25a      	sxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	0a1b      	lsrs	r3, r3, #8
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	b25b      	sxtb	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2201      	movs	r2, #1
 800a408:	70da      	strb	r2, [r3, #3]
			break;
 800a40a:	e072      	b.n	800a4f2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	899b      	ldrh	r3, [r3, #12]
 800a414:	085b      	lsrs	r3, r3, #1
 800a416:	b29b      	uxth	r3, r3
 800a418:	4619      	mov	r1, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a420:	4413      	add	r3, r2
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff fdbf 	bl	8009fa8 <move_window>
 800a42a:	4603      	mov	r3, r0
 800a42c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a42e:	7ffb      	ldrb	r3, [r7, #31]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d15b      	bne.n	800a4ec <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	8992      	ldrh	r2, [r2, #12]
 800a442:	fbb3 f0f2 	udiv	r0, r3, r2
 800a446:	fb00 f202 	mul.w	r2, r0, r2
 800a44a:	1a9b      	subs	r3, r3, r2
 800a44c:	440b      	add	r3, r1
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	b292      	uxth	r2, r2
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fb32 	bl	8009abe <st_word>
			fs->wflag = 1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	70da      	strb	r2, [r3, #3]
			break;
 800a460:	e047      	b.n	800a4f2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	899b      	ldrh	r3, [r3, #12]
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	fbb3 f3f1 	udiv	r3, r3, r1
 800a476:	4413      	add	r3, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fd94 	bl	8009fa8 <move_window>
 800a480:	4603      	mov	r3, r0
 800a482:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a484:	7ffb      	ldrb	r3, [r7, #31]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d132      	bne.n	800a4f0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	8992      	ldrh	r2, [r2, #12]
 800a49e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4a2:	fb00 f202 	mul.w	r2, r0, r2
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7ff fae4 	bl	8009a78 <ld_dword>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4b6:	4323      	orrs	r3, r4
 800a4b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	8992      	ldrh	r2, [r2, #12]
 800a4c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4cc:	fb00 f202 	mul.w	r2, r0, r2
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	440b      	add	r3, r1
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff fb0c 	bl	8009af4 <st_dword>
			fs->wflag = 1;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	70da      	strb	r2, [r3, #3]
			break;
 800a4e2:	e006      	b.n	800a4f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a4e4:	bf00      	nop
 800a4e6:	e004      	b.n	800a4f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a4e8:	bf00      	nop
 800a4ea:	e002      	b.n	800a4f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a4ec:	bf00      	nop
 800a4ee:	e000      	b.n	800a4f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a4f0:	bf00      	nop
		}
	}
	return res;
 800a4f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3724      	adds	r7, #36	@ 0x24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd90      	pop	{r4, r7, pc}

0800a4fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d904      	bls.n	800a522 <remove_chain+0x26>
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d301      	bcc.n	800a526 <remove_chain+0x2a>
 800a522:	2302      	movs	r3, #2
 800a524:	e04b      	b.n	800a5be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00c      	beq.n	800a546 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	69b8      	ldr	r0, [r7, #24]
 800a534:	f7ff fec8 	bl	800a2c8 <put_fat>
 800a538:	4603      	mov	r3, r0
 800a53a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a53c:	7ffb      	ldrb	r3, [r7, #31]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <remove_chain+0x4a>
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	e03b      	b.n	800a5be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff fdea 	bl	800a122 <get_fat>
 800a54e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d031      	beq.n	800a5ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <remove_chain+0x64>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e02e      	b.n	800a5be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d101      	bne.n	800a56c <remove_chain+0x70>
 800a568:	2301      	movs	r3, #1
 800a56a:	e028      	b.n	800a5be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a56c:	2200      	movs	r2, #0
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	69b8      	ldr	r0, [r7, #24]
 800a572:	f7ff fea9 	bl	800a2c8 <put_fat>
 800a576:	4603      	mov	r3, r0
 800a578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a57a:	7ffb      	ldrb	r3, [r7, #31]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <remove_chain+0x88>
 800a580:	7ffb      	ldrb	r3, [r7, #31]
 800a582:	e01c      	b.n	800a5be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	699a      	ldr	r2, [r3, #24]
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	3b02      	subs	r3, #2
 800a58e:	429a      	cmp	r2, r3
 800a590:	d20b      	bcs.n	800a5aa <remove_chain+0xae>
			fs->free_clst++;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	791b      	ldrb	r3, [r3, #4]
 800a5a0:	f043 0301 	orr.w	r3, r3, #1
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d3c6      	bcc.n	800a546 <remove_chain+0x4a>
 800a5b8:	e000      	b.n	800a5bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a5ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10d      	bne.n	800a5f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d004      	beq.n	800a5f2 <create_chain+0x2c>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d31b      	bcc.n	800a62a <create_chain+0x64>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	61bb      	str	r3, [r7, #24]
 800a5f6:	e018      	b.n	800a62a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fd91 	bl	800a122 <get_fat>
 800a600:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d801      	bhi.n	800a60c <create_chain+0x46>
 800a608:	2301      	movs	r3, #1
 800a60a:	e070      	b.n	800a6ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a612:	d101      	bne.n	800a618 <create_chain+0x52>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	e06a      	b.n	800a6ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d201      	bcs.n	800a626 <create_chain+0x60>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	e063      	b.n	800a6ee <create_chain+0x128>
		scl = clst;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	3301      	adds	r3, #1
 800a632:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d307      	bcc.n	800a64e <create_chain+0x88>
				ncl = 2;
 800a63e:	2302      	movs	r3, #2
 800a640:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	429a      	cmp	r2, r3
 800a648:	d901      	bls.n	800a64e <create_chain+0x88>
 800a64a:	2300      	movs	r3, #0
 800a64c:	e04f      	b.n	800a6ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a64e:	69f9      	ldr	r1, [r7, #28]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff fd66 	bl	800a122 <get_fat>
 800a656:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00e      	beq.n	800a67c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d003      	beq.n	800a66c <create_chain+0xa6>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d101      	bne.n	800a670 <create_chain+0xaa>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	e03e      	b.n	800a6ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	429a      	cmp	r2, r3
 800a676:	d1da      	bne.n	800a62e <create_chain+0x68>
 800a678:	2300      	movs	r3, #0
 800a67a:	e038      	b.n	800a6ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a67c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a67e:	f04f 32ff 	mov.w	r2, #4294967295
 800a682:	69f9      	ldr	r1, [r7, #28]
 800a684:	6938      	ldr	r0, [r7, #16]
 800a686:	f7ff fe1f 	bl	800a2c8 <put_fat>
 800a68a:	4603      	mov	r3, r0
 800a68c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <create_chain+0xe2>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a69a:	69fa      	ldr	r2, [r7, #28]
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6938      	ldr	r0, [r7, #16]
 800a6a0:	f7ff fe12 	bl	800a2c8 <put_fat>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d116      	bne.n	800a6dc <create_chain+0x116>
		fs->last_clst = ncl;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	699a      	ldr	r2, [r3, #24]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	3b02      	subs	r3, #2
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d804      	bhi.n	800a6cc <create_chain+0x106>
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	f043 0301 	orr.w	r3, r3, #1
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	711a      	strb	r2, [r3, #4]
 800a6da:	e007      	b.n	800a6ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d102      	bne.n	800a6e8 <create_chain+0x122>
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e000      	b.n	800a6ea <create_chain+0x124>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a6ec:	69fb      	ldr	r3, [r7, #28]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b087      	sub	sp, #28
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70a:	3304      	adds	r3, #4
 800a70c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	899b      	ldrh	r3, [r3, #12]
 800a712:	461a      	mov	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	fbb3 f3f2 	udiv	r3, r3, r2
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	8952      	ldrh	r2, [r2, #10]
 800a71e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a722:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	613a      	str	r2, [r7, #16]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <clmt_clust+0x42>
 800a734:	2300      	movs	r3, #0
 800a736:	e010      	b.n	800a75a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d307      	bcc.n	800a750 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	3304      	adds	r3, #4
 800a74c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a74e:	e7e9      	b.n	800a724 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a750:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	4413      	add	r3, r2
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b086      	sub	sp, #24
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a77c:	d204      	bcs.n	800a788 <dir_sdi+0x22>
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f003 031f 	and.w	r3, r3, #31
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <dir_sdi+0x26>
		return FR_INT_ERR;
 800a788:	2302      	movs	r3, #2
 800a78a:	e071      	b.n	800a870 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <dir_sdi+0x46>
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d902      	bls.n	800a7ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10c      	bne.n	800a7cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	8912      	ldrh	r2, [r2, #8]
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d301      	bcc.n	800a7c2 <dir_sdi+0x5c>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e056      	b.n	800a870 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	61da      	str	r2, [r3, #28]
 800a7ca:	e02d      	b.n	800a828 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	895b      	ldrh	r3, [r3, #10]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	fb02 f303 	mul.w	r3, r2, r3
 800a7da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7dc:	e019      	b.n	800a812 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6979      	ldr	r1, [r7, #20]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff fc9d 	bl	800a122 <get_fat>
 800a7e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d101      	bne.n	800a7f6 <dir_sdi+0x90>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e03c      	b.n	800a870 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d904      	bls.n	800a806 <dir_sdi+0xa0>
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	429a      	cmp	r2, r3
 800a804:	d301      	bcc.n	800a80a <dir_sdi+0xa4>
 800a806:	2302      	movs	r3, #2
 800a808:	e032      	b.n	800a870 <dir_sdi+0x10a>
			ofs -= csz;
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	429a      	cmp	r2, r3
 800a818:	d2e1      	bcs.n	800a7de <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a81a:	6979      	ldr	r1, [r7, #20]
 800a81c:	6938      	ldr	r0, [r7, #16]
 800a81e:	f7ff fc61 	bl	800a0e4 <clust2sect>
 800a822:	4602      	mov	r2, r0
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <dir_sdi+0xd4>
 800a836:	2302      	movs	r3, #2
 800a838:	e01a      	b.n	800a870 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	899b      	ldrh	r3, [r3, #12]
 800a842:	4619      	mov	r1, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	fbb3 f3f1 	udiv	r3, r3, r1
 800a84a:	441a      	add	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	899b      	ldrh	r3, [r3, #12]
 800a85a:	461a      	mov	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a862:	fb00 f202 	mul.w	r2, r0, r2
 800a866:	1a9b      	subs	r3, r3, r2
 800a868:	18ca      	adds	r2, r1, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	3320      	adds	r3, #32
 800a88e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <dir_next+0x28>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a89e:	d301      	bcc.n	800a8a4 <dir_next+0x2c>
 800a8a0:	2304      	movs	r3, #4
 800a8a2:	e0bb      	b.n	800aa1c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	899b      	ldrh	r3, [r3, #12]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8b0:	fb01 f202 	mul.w	r2, r1, r2
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 809d 	bne.w	800a9f6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10b      	bne.n	800a8e6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	095b      	lsrs	r3, r3, #5
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	8912      	ldrh	r2, [r2, #8]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f0c0 808d 	bcc.w	800a9f6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	61da      	str	r2, [r3, #28]
 800a8e2:	2304      	movs	r3, #4
 800a8e4:	e09a      	b.n	800aa1c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	899b      	ldrh	r3, [r3, #12]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	8952      	ldrh	r2, [r2, #10]
 800a8f6:	3a01      	subs	r2, #1
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d17b      	bne.n	800a9f6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7ff fc0b 	bl	800a122 <get_fat>
 800a90c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d801      	bhi.n	800a918 <dir_next+0xa0>
 800a914:	2302      	movs	r3, #2
 800a916:	e081      	b.n	800aa1c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d101      	bne.n	800a924 <dir_next+0xac>
 800a920:	2301      	movs	r3, #1
 800a922:	e07b      	b.n	800aa1c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d359      	bcc.n	800a9e2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d104      	bne.n	800a93e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	61da      	str	r2, [r3, #28]
 800a93a:	2304      	movs	r3, #4
 800a93c:	e06e      	b.n	800aa1c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f7ff fe3d 	bl	800a5c6 <create_chain>
 800a94c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <dir_next+0xe0>
 800a954:	2307      	movs	r3, #7
 800a956:	e061      	b.n	800aa1c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <dir_next+0xea>
 800a95e:	2302      	movs	r3, #2
 800a960:	e05c      	b.n	800aa1c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a968:	d101      	bne.n	800a96e <dir_next+0xf6>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e056      	b.n	800aa1c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fad6 	bl	8009f20 <sync_window>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <dir_next+0x106>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e04e      	b.n	800aa1c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	899b      	ldrh	r3, [r3, #12]
 800a988:	461a      	mov	r2, r3
 800a98a:	2100      	movs	r1, #0
 800a98c:	f7ff f8ff 	bl	8009b8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]
 800a994:	6979      	ldr	r1, [r7, #20]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f7ff fba4 	bl	800a0e4 <clust2sect>
 800a99c:	4602      	mov	r2, r0
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9a2:	e012      	b.n	800a9ca <dir_next+0x152>
						fs->wflag = 1;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff fab8 	bl	8009f20 <sync_window>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <dir_next+0x142>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e030      	b.n	800aa1c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	895b      	ldrh	r3, [r3, #10]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d3e6      	bcc.n	800a9a4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad2      	subs	r2, r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a9e8:	6979      	ldr	r1, [r7, #20]
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7ff fb7a 	bl	800a0e4 <clust2sect>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	899b      	ldrh	r3, [r3, #12]
 800aa06:	461a      	mov	r2, r3
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa0e:	fb00 f202 	mul.w	r2, r0, r2
 800aa12:	1a9b      	subs	r3, r3, r2
 800aa14:	18ca      	adds	r2, r1, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa34:	2100      	movs	r1, #0
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff fe95 	bl	800a766 <dir_sdi>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d12b      	bne.n	800aa9e <dir_alloc+0x7a>
		n = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff faa9 	bl	8009fa8 <move_window>
 800aa56:	4603      	mov	r3, r0
 800aa58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d11d      	bne.n	800aa9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2be5      	cmp	r3, #229	@ 0xe5
 800aa68:	d004      	beq.n	800aa74 <dir_alloc+0x50>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d107      	bne.n	800aa84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	3301      	adds	r3, #1
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d102      	bne.n	800aa88 <dir_alloc+0x64>
 800aa82:	e00c      	b.n	800aa9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa84:	2300      	movs	r3, #0
 800aa86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa88:	2101      	movs	r1, #1
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff fef4 	bl	800a878 <dir_next>
 800aa90:	4603      	mov	r3, r0
 800aa92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0d7      	beq.n	800aa4a <dir_alloc+0x26>
 800aa9a:	e000      	b.n	800aa9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d101      	bne.n	800aaa8 <dir_alloc+0x84>
 800aaa4:	2307      	movs	r3, #7
 800aaa6:	75fb      	strb	r3, [r7, #23]
	return res;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	331a      	adds	r3, #26
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe ffc1 	bl	8009a48 <ld_word>
 800aac6:	4603      	mov	r3, r0
 800aac8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d109      	bne.n	800aae6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	3314      	adds	r3, #20
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe ffb6 	bl	8009a48 <ld_word>
 800aadc:	4603      	mov	r3, r0
 800aade:	041b      	lsls	r3, r3, #16
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	331a      	adds	r3, #26
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	b292      	uxth	r2, r2
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe ffd9 	bl	8009abe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d109      	bne.n	800ab28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f103 0214 	add.w	r2, r3, #20
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	0c1b      	lsrs	r3, r3, #16
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fe ffcb 	bl	8009abe <st_word>
	}
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab30:	b590      	push	{r4, r7, lr}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	331a      	adds	r3, #26
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe ff82 	bl	8009a48 <ld_word>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <cmp_lfn+0x1e>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e059      	b.n	800ac02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	4613      	mov	r3, r2
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab64:	2301      	movs	r3, #1
 800ab66:	81fb      	strh	r3, [r7, #14]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	e033      	b.n	800abd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab6e:	4a27      	ldr	r2, [pc, #156]	@ (800ac0c <cmp_lfn+0xdc>)
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	4413      	add	r3, r2
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe ff63 	bl	8009a48 <ld_word>
 800ab82:	4603      	mov	r3, r0
 800ab84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ab86:	89fb      	ldrh	r3, [r7, #14]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01a      	beq.n	800abc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab90:	d812      	bhi.n	800abb8 <cmp_lfn+0x88>
 800ab92:	89bb      	ldrh	r3, [r7, #12]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 ff61 	bl	800ca5c <ff_wtoupper>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	461c      	mov	r4, r3
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	617a      	str	r2, [r7, #20]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f001 ff55 	bl	800ca5c <ff_wtoupper>
 800abb2:	4603      	mov	r3, r0
 800abb4:	429c      	cmp	r4, r3
 800abb6:	d001      	beq.n	800abbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800abb8:	2300      	movs	r3, #0
 800abba:	e022      	b.n	800ac02 <cmp_lfn+0xd2>
			}
			wc = uc;
 800abbc:	89bb      	ldrh	r3, [r7, #12]
 800abbe:	81fb      	strh	r3, [r7, #14]
 800abc0:	e006      	b.n	800abd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800abc2:	89bb      	ldrh	r3, [r7, #12]
 800abc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abc8:	4293      	cmp	r3, r2
 800abca:	d001      	beq.n	800abd0 <cmp_lfn+0xa0>
 800abcc:	2300      	movs	r3, #0
 800abce:	e018      	b.n	800ac02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	3301      	adds	r3, #1
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2b0c      	cmp	r3, #12
 800abda:	d9c8      	bls.n	800ab6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <cmp_lfn+0xd0>
 800abe8:	89fb      	ldrh	r3, [r7, #14]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d008      	beq.n	800ac00 <cmp_lfn+0xd0>
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <cmp_lfn+0xd0>
 800abfc:	2300      	movs	r3, #0
 800abfe:	e000      	b.n	800ac02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac00:	2301      	movs	r3, #1
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd90      	pop	{r4, r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	08010bb0 	.word	0x08010bb0

0800ac10 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	460b      	mov	r3, r1
 800ac20:	71fb      	strb	r3, [r7, #7]
 800ac22:	4613      	mov	r3, r2
 800ac24:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	330d      	adds	r3, #13
 800ac2a:	79ba      	ldrb	r2, [r7, #6]
 800ac2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	330b      	adds	r3, #11
 800ac32:	220f      	movs	r2, #15
 800ac34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	330c      	adds	r3, #12
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	331a      	adds	r3, #26
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fe ff3a 	bl	8009abe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	1e5a      	subs	r2, r3, #1
 800ac4e:	4613      	mov	r3, r2
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	82fb      	strh	r3, [r7, #22]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ac62:	8afb      	ldrh	r3, [r7, #22]
 800ac64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d007      	beq.n	800ac7c <put_lfn+0x6c>
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	61fa      	str	r2, [r7, #28]
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ac7c:	4a17      	ldr	r2, [pc, #92]	@ (800acdc <put_lfn+0xcc>)
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	4413      	add	r3, r2
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4413      	add	r3, r2
 800ac8a:	8afa      	ldrh	r2, [r7, #22]
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe ff15 	bl	8009abe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ac94:	8afb      	ldrh	r3, [r7, #22]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <put_lfn+0x90>
 800ac9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac9e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	3301      	adds	r3, #1
 800aca4:	61bb      	str	r3, [r7, #24]
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b0c      	cmp	r3, #12
 800acaa:	d9da      	bls.n	800ac62 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800acac:	8afb      	ldrh	r3, [r7, #22]
 800acae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d006      	beq.n	800acc4 <put_lfn+0xb4>
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4413      	add	r3, r2
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <put_lfn+0xbc>
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	79fa      	ldrb	r2, [r7, #7]
 800acd0:	701a      	strb	r2, [r3, #0]
}
 800acd2:	bf00      	nop
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	08010bb0 	.word	0x08010bb0

0800ace0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08c      	sub	sp, #48	@ 0x30
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800acee:	220b      	movs	r2, #11
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7fe ff2a 	bl	8009b4c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d92b      	bls.n	800ad56 <gen_numname+0x76>
		sr = seq;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad02:	e022      	b.n	800ad4a <gen_numname+0x6a>
			wc = *lfn++;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	1c9a      	adds	r2, r3, #2
 800ad08:	607a      	str	r2, [r7, #4]
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ad0e:	2300      	movs	r3, #0
 800ad10:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad12:	e017      	b.n	800ad44 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	005a      	lsls	r2, r3, #1
 800ad18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	4413      	add	r3, r2
 800ad20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <gen_numname+0x5e>
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ad38:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ad3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad40:	3301      	adds	r3, #1
 800ad42:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d9e4      	bls.n	800ad14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1d8      	bne.n	800ad04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad56:	2307      	movs	r3, #7
 800ad58:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 030f 	and.w	r3, r3, #15
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	3330      	adds	r3, #48	@ 0x30
 800ad66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ad6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad6e:	2b39      	cmp	r3, #57	@ 0x39
 800ad70:	d904      	bls.n	800ad7c <gen_numname+0x9c>
 800ad72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad76:	3307      	adds	r3, #7
 800ad78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ad82:	3330      	adds	r3, #48	@ 0x30
 800ad84:	443b      	add	r3, r7
 800ad86:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ad8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	091b      	lsrs	r3, r3, #4
 800ad92:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1df      	bne.n	800ad5a <gen_numname+0x7a>
	ns[i] = '~';
 800ad9a:	f107 0214 	add.w	r2, r7, #20
 800ad9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada0:	4413      	add	r3, r2
 800ada2:	227e      	movs	r2, #126	@ 0x7e
 800ada4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ada6:	2300      	movs	r3, #0
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adaa:	e002      	b.n	800adb2 <gen_numname+0xd2>
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	3301      	adds	r3, #1
 800adb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800adb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d205      	bcs.n	800adc6 <gen_numname+0xe6>
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	4413      	add	r3, r2
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d1f2      	bne.n	800adac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800adc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc8:	2b07      	cmp	r3, #7
 800adca:	d807      	bhi.n	800addc <gen_numname+0xfc>
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800add2:	3330      	adds	r3, #48	@ 0x30
 800add4:	443b      	add	r3, r7
 800add6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800adda:	e000      	b.n	800adde <gen_numname+0xfe>
 800addc:	2120      	movs	r1, #32
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	627a      	str	r2, [r7, #36]	@ 0x24
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	460a      	mov	r2, r1
 800adea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800adec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adee:	2b07      	cmp	r3, #7
 800adf0:	d9e9      	bls.n	800adc6 <gen_numname+0xe6>
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	3730      	adds	r7, #48	@ 0x30
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae08:	230b      	movs	r3, #11
 800ae0a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	0852      	lsrs	r2, r2, #1
 800ae12:	01db      	lsls	r3, r3, #7
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	1c59      	adds	r1, r3, #1
 800ae1c:	6079      	str	r1, [r7, #4]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4413      	add	r3, r2
 800ae22:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	60bb      	str	r3, [r7, #8]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1ed      	bne.n	800ae0c <sum_sfn+0x10>
	return sum;
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b086      	sub	sp, #24
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff fc89 	bl	800a766 <dir_sdi>
 800ae54:	4603      	mov	r3, r0
 800ae56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <dir_find+0x24>
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	e0a9      	b.n	800afb6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae62:	23ff      	movs	r3, #255	@ 0xff
 800ae64:	753b      	strb	r3, [r7, #20]
 800ae66:	7d3b      	ldrb	r3, [r7, #20]
 800ae68:	757b      	strb	r3, [r7, #21]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae70:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6938      	ldr	r0, [r7, #16]
 800ae7a:	f7ff f895 	bl	8009fa8 <move_window>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f040 8090 	bne.w	800afaa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae92:	7dbb      	ldrb	r3, [r7, #22]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <dir_find+0x60>
 800ae98:	2304      	movs	r3, #4
 800ae9a:	75fb      	strb	r3, [r7, #23]
 800ae9c:	e08a      	b.n	800afb4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	330b      	adds	r3, #11
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aeaa:	73fb      	strb	r3, [r7, #15]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7bfa      	ldrb	r2, [r7, #15]
 800aeb0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aeb2:	7dbb      	ldrb	r3, [r7, #22]
 800aeb4:	2be5      	cmp	r3, #229	@ 0xe5
 800aeb6:	d007      	beq.n	800aec8 <dir_find+0x8a>
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	f003 0308 	and.w	r3, r3, #8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d009      	beq.n	800aed6 <dir_find+0x98>
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	2b0f      	cmp	r3, #15
 800aec6:	d006      	beq.n	800aed6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aec8:	23ff      	movs	r3, #255	@ 0xff
 800aeca:	757b      	strb	r3, [r7, #21]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f04f 32ff 	mov.w	r2, #4294967295
 800aed2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aed4:	e05e      	b.n	800af94 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	2b0f      	cmp	r3, #15
 800aeda:	d136      	bne.n	800af4a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d154      	bne.n	800af94 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800aeea:	7dbb      	ldrb	r3, [r7, #22]
 800aeec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00d      	beq.n	800af10 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	7b5b      	ldrb	r3, [r3, #13]
 800aefa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aefc:	7dbb      	ldrb	r3, [r7, #22]
 800aefe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af02:	75bb      	strb	r3, [r7, #22]
 800af04:	7dbb      	ldrb	r3, [r7, #22]
 800af06:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	695a      	ldr	r2, [r3, #20]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af10:	7dba      	ldrb	r2, [r7, #22]
 800af12:	7d7b      	ldrb	r3, [r7, #21]
 800af14:	429a      	cmp	r2, r3
 800af16:	d115      	bne.n	800af44 <dir_find+0x106>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
 800af1c:	330d      	adds	r3, #13
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	7d3a      	ldrb	r2, [r7, #20]
 800af22:	429a      	cmp	r2, r3
 800af24:	d10e      	bne.n	800af44 <dir_find+0x106>
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	691a      	ldr	r2, [r3, #16]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7ff fdfd 	bl	800ab30 <cmp_lfn>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <dir_find+0x106>
 800af3c:	7d7b      	ldrb	r3, [r7, #21]
 800af3e:	3b01      	subs	r3, #1
 800af40:	b2db      	uxtb	r3, r3
 800af42:	e000      	b.n	800af46 <dir_find+0x108>
 800af44:	23ff      	movs	r3, #255	@ 0xff
 800af46:	757b      	strb	r3, [r7, #21]
 800af48:	e024      	b.n	800af94 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af4a:	7d7b      	ldrb	r3, [r7, #21]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d109      	bne.n	800af64 <dir_find+0x126>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff ff51 	bl	800adfc <sum_sfn>
 800af5a:	4603      	mov	r3, r0
 800af5c:	461a      	mov	r2, r3
 800af5e:	7d3b      	ldrb	r3, [r7, #20]
 800af60:	4293      	cmp	r3, r2
 800af62:	d024      	beq.n	800afae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <dir_find+0x14a>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a18      	ldr	r0, [r3, #32]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	3324      	adds	r3, #36	@ 0x24
 800af7a:	220b      	movs	r2, #11
 800af7c:	4619      	mov	r1, r3
 800af7e:	f7fe fe21 	bl	8009bc4 <mem_cmp>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d014      	beq.n	800afb2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af88:	23ff      	movs	r3, #255	@ 0xff
 800af8a:	757b      	strb	r3, [r7, #21]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fc6e 	bl	800a878 <dir_next>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f43f af65 	beq.w	800ae72 <dir_find+0x34>
 800afa8:	e004      	b.n	800afb4 <dir_find+0x176>
		if (res != FR_OK) break;
 800afaa:	bf00      	nop
 800afac:	e002      	b.n	800afb4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800afae:	bf00      	nop
 800afb0:	e000      	b.n	800afb4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afb2:	bf00      	nop

	return res;
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	@ 0x30
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800afd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <dir_register+0x20>
 800afdc:	2306      	movs	r3, #6
 800afde:	e0e0      	b.n	800b1a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800afe0:	2300      	movs	r3, #0
 800afe2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afe4:	e002      	b.n	800afec <dir_register+0x2c>
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	3301      	adds	r3, #1
 800afea:	627b      	str	r3, [r7, #36]	@ 0x24
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	4413      	add	r3, r2
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f4      	bne.n	800afe6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b002:	f107 030c 	add.w	r3, r7, #12
 800b006:	220c      	movs	r2, #12
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe fd9f 	bl	8009b4c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d032      	beq.n	800b07e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2240      	movs	r2, #64	@ 0x40
 800b01c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b020:	2301      	movs	r3, #1
 800b022:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b024:	e016      	b.n	800b054 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	f107 010c 	add.w	r1, r7, #12
 800b034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b036:	f7ff fe53 	bl	800ace0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff feff 	bl	800ae3e <dir_find>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b050:	3301      	adds	r3, #1
 800b052:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	2b63      	cmp	r3, #99	@ 0x63
 800b058:	d9e5      	bls.n	800b026 <dir_register+0x66>
 800b05a:	e000      	b.n	800b05e <dir_register+0x9e>
			if (res != FR_OK) break;
 800b05c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b060:	2b64      	cmp	r3, #100	@ 0x64
 800b062:	d101      	bne.n	800b068 <dir_register+0xa8>
 800b064:	2307      	movs	r3, #7
 800b066:	e09c      	b.n	800b1a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d002      	beq.n	800b076 <dir_register+0xb6>
 800b070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b074:	e095      	b.n	800b1a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b076:	7dfa      	ldrb	r2, [r7, #23]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d007      	beq.n	800b098 <dir_register+0xd8>
 800b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08a:	330c      	adds	r3, #12
 800b08c:	4a47      	ldr	r2, [pc, #284]	@ (800b1ac <dir_register+0x1ec>)
 800b08e:	fba2 2303 	umull	r2, r3, r2, r3
 800b092:	089b      	lsrs	r3, r3, #2
 800b094:	3301      	adds	r3, #1
 800b096:	e000      	b.n	800b09a <dir_register+0xda>
 800b098:	2301      	movs	r3, #1
 800b09a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b09c:	6a39      	ldr	r1, [r7, #32]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff fcc0 	bl	800aa24 <dir_alloc>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d148      	bne.n	800b144 <dir_register+0x184>
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	623b      	str	r3, [r7, #32]
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d042      	beq.n	800b144 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695a      	ldr	r2, [r3, #20]
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	015b      	lsls	r3, r3, #5
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff fb4b 	bl	800a766 <dir_sdi>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d132      	bne.n	800b144 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	3324      	adds	r3, #36	@ 0x24
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fe8a 	bl	800adfc <sum_sfn>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	69f8      	ldr	r0, [r7, #28]
 800b0f4:	f7fe ff58 	bl	8009fa8 <move_window>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d11d      	bne.n	800b142 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	6918      	ldr	r0, [r3, #16]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a19      	ldr	r1, [r3, #32]
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	b2da      	uxtb	r2, r3
 800b112:	7efb      	ldrb	r3, [r7, #27]
 800b114:	f7ff fd7c 	bl	800ac10 <put_lfn>
				fs->wflag = 1;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	2201      	movs	r2, #1
 800b11c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b11e:	2100      	movs	r1, #0
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff fba9 	bl	800a878 <dir_next>
 800b126:	4603      	mov	r3, r0
 800b128:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b12c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b130:	2b00      	cmp	r3, #0
 800b132:	d107      	bne.n	800b144 <dir_register+0x184>
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	3b01      	subs	r3, #1
 800b138:	623b      	str	r3, [r7, #32]
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1d5      	bne.n	800b0ec <dir_register+0x12c>
 800b140:	e000      	b.n	800b144 <dir_register+0x184>
				if (res != FR_OK) break;
 800b142:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d128      	bne.n	800b19e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	4619      	mov	r1, r3
 800b152:	69f8      	ldr	r0, [r7, #28]
 800b154:	f7fe ff28 	bl	8009fa8 <move_window>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b15e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11b      	bne.n	800b19e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	2220      	movs	r2, #32
 800b16c:	2100      	movs	r1, #0
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fd0d 	bl	8009b8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a18      	ldr	r0, [r3, #32]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3324      	adds	r3, #36	@ 0x24
 800b17c:	220b      	movs	r2, #11
 800b17e:	4619      	mov	r1, r3
 800b180:	f7fe fce4 	bl	8009b4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	330c      	adds	r3, #12
 800b190:	f002 0218 	and.w	r2, r2, #24
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2201      	movs	r2, #1
 800b19c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b19e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3730      	adds	r7, #48	@ 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	4ec4ec4f 	.word	0x4ec4ec4f

0800b1b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08a      	sub	sp, #40	@ 0x28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	61ba      	str	r2, [r7, #24]
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	4413      	add	r3, r2
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b1de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1e0:	2b1f      	cmp	r3, #31
 800b1e2:	d940      	bls.n	800b266 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1e6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b1e8:	d006      	beq.n	800b1f8 <create_name+0x48>
 800b1ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1ee:	d110      	bne.n	800b212 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b1f0:	e002      	b.n	800b1f8 <create_name+0x48>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	61bb      	str	r3, [r7, #24]
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b2f      	cmp	r3, #47	@ 0x2f
 800b202:	d0f6      	beq.n	800b1f2 <create_name+0x42>
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	4413      	add	r3, r2
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b20e:	d0f0      	beq.n	800b1f2 <create_name+0x42>
			break;
 800b210:	e02a      	b.n	800b268 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2bfe      	cmp	r3, #254	@ 0xfe
 800b216:	d901      	bls.n	800b21c <create_name+0x6c>
 800b218:	2306      	movs	r3, #6
 800b21a:	e17d      	b.n	800b518 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b21c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b224:	2101      	movs	r1, #1
 800b226:	4618      	mov	r0, r3
 800b228:	f001 fbdc 	bl	800c9e4 <ff_convert>
 800b22c:	4603      	mov	r3, r0
 800b22e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b230:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <create_name+0x8a>
 800b236:	2306      	movs	r3, #6
 800b238:	e16e      	b.n	800b518 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b23a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b23c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b23e:	d809      	bhi.n	800b254 <create_name+0xa4>
 800b240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b242:	4619      	mov	r1, r3
 800b244:	488d      	ldr	r0, [pc, #564]	@ (800b47c <create_name+0x2cc>)
 800b246:	f7fe fce4 	bl	8009c12 <chk_chr>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <create_name+0xa4>
 800b250:	2306      	movs	r3, #6
 800b252:	e161      	b.n	800b518 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	617a      	str	r2, [r7, #20]
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b262:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b264:	e7b4      	b.n	800b1d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b266:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	441a      	add	r2, r3
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b274:	2b1f      	cmp	r3, #31
 800b276:	d801      	bhi.n	800b27c <create_name+0xcc>
 800b278:	2304      	movs	r3, #4
 800b27a:	e000      	b.n	800b27e <create_name+0xce>
 800b27c:	2300      	movs	r3, #0
 800b27e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b282:	e011      	b.n	800b2a8 <create_name+0xf8>
		w = lfn[di - 1];
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b28a:	3b01      	subs	r3, #1
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4413      	add	r3, r2
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d002      	beq.n	800b2a2 <create_name+0xf2>
 800b29c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b29e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2a0:	d106      	bne.n	800b2b0 <create_name+0x100>
		di--;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1ea      	bne.n	800b284 <create_name+0xd4>
 800b2ae:	e000      	b.n	800b2b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b2b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <create_name+0x118>
 800b2c4:	2306      	movs	r3, #6
 800b2c6:	e127      	b.n	800b518 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3324      	adds	r3, #36	@ 0x24
 800b2cc:	220b      	movs	r2, #11
 800b2ce:	2120      	movs	r1, #32
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fc5c 	bl	8009b8e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61bb      	str	r3, [r7, #24]
 800b2da:	e002      	b.n	800b2e2 <create_name+0x132>
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	61bb      	str	r3, [r7, #24]
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	d0f5      	beq.n	800b2dc <create_name+0x12c>
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2fc:	d0ee      	beq.n	800b2dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <create_name+0x168>
 800b304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b308:	f043 0303 	orr.w	r3, r3, #3
 800b30c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b310:	e002      	b.n	800b318 <create_name+0x168>
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	3b01      	subs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <create_name+0x182>
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	3b01      	subs	r3, #1
 800b326:	005b      	lsls	r3, r3, #1
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b330:	d1ef      	bne.n	800b312 <create_name+0x162>

	i = b = 0; ni = 8;
 800b332:	2300      	movs	r3, #0
 800b334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b338:	2300      	movs	r3, #0
 800b33a:	623b      	str	r3, [r7, #32]
 800b33c:	2308      	movs	r3, #8
 800b33e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	61ba      	str	r2, [r7, #24]
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 8090 	beq.w	800b478 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d006      	beq.n	800b36c <create_name+0x1bc>
 800b35e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b360:	2b2e      	cmp	r3, #46	@ 0x2e
 800b362:	d10a      	bne.n	800b37a <create_name+0x1ca>
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d006      	beq.n	800b37a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b370:	f043 0303 	orr.w	r3, r3, #3
 800b374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b378:	e07d      	b.n	800b476 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b37a:	6a3a      	ldr	r2, [r7, #32]
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d203      	bcs.n	800b38a <create_name+0x1da>
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	429a      	cmp	r2, r3
 800b388:	d123      	bne.n	800b3d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2b0b      	cmp	r3, #11
 800b38e:	d106      	bne.n	800b39e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b394:	f043 0303 	orr.w	r3, r3, #3
 800b398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b39c:	e075      	b.n	800b48a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d005      	beq.n	800b3b2 <create_name+0x202>
 800b3a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3aa:	f043 0303 	orr.w	r3, r3, #3
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d866      	bhi.n	800b488 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	61bb      	str	r3, [r7, #24]
 800b3be:	2308      	movs	r3, #8
 800b3c0:	623b      	str	r3, [r7, #32]
 800b3c2:	230b      	movs	r3, #11
 800b3c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b3c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3d0:	e051      	b.n	800b476 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b3d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3d6:	d914      	bls.n	800b402 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b3d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3da:	2100      	movs	r1, #0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fb01 	bl	800c9e4 <ff_convert>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b3e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d004      	beq.n	800b3f6 <create_name+0x246>
 800b3ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3ee:	3b80      	subs	r3, #128	@ 0x80
 800b3f0:	4a23      	ldr	r2, [pc, #140]	@ (800b480 <create_name+0x2d0>)
 800b3f2:	5cd3      	ldrb	r3, [r2, r3]
 800b3f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3fa:	f043 0302 	orr.w	r3, r3, #2
 800b3fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b404:	2b00      	cmp	r3, #0
 800b406:	d007      	beq.n	800b418 <create_name+0x268>
 800b408:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b40a:	4619      	mov	r1, r3
 800b40c:	481d      	ldr	r0, [pc, #116]	@ (800b484 <create_name+0x2d4>)
 800b40e:	f7fe fc00 	bl	8009c12 <chk_chr>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d008      	beq.n	800b42a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b418:	235f      	movs	r3, #95	@ 0x5f
 800b41a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b420:	f043 0303 	orr.w	r3, r3, #3
 800b424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b428:	e01b      	b.n	800b462 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b42a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b42c:	2b40      	cmp	r3, #64	@ 0x40
 800b42e:	d909      	bls.n	800b444 <create_name+0x294>
 800b430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b432:	2b5a      	cmp	r3, #90	@ 0x5a
 800b434:	d806      	bhi.n	800b444 <create_name+0x294>
					b |= 2;
 800b436:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b43a:	f043 0302 	orr.w	r3, r3, #2
 800b43e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b442:	e00e      	b.n	800b462 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b446:	2b60      	cmp	r3, #96	@ 0x60
 800b448:	d90b      	bls.n	800b462 <create_name+0x2b2>
 800b44a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b44c:	2b7a      	cmp	r3, #122	@ 0x7a
 800b44e:	d808      	bhi.n	800b462 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b450:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b454:	f043 0301 	orr.w	r3, r3, #1
 800b458:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b45c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b45e:	3b20      	subs	r3, #32
 800b460:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	623a      	str	r2, [r7, #32]
 800b468:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b46a:	b2d1      	uxtb	r1, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	4413      	add	r3, r2
 800b470:	460a      	mov	r2, r1
 800b472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b476:	e763      	b.n	800b340 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b478:	bf00      	nop
 800b47a:	e006      	b.n	800b48a <create_name+0x2da>
 800b47c:	080105c8 	.word	0x080105c8
 800b480:	08010b30 	.word	0x08010b30
 800b484:	080105d4 	.word	0x080105d4
			if (si > di) break;			/* No extension */
 800b488:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b490:	2be5      	cmp	r3, #229	@ 0xe5
 800b492:	d103      	bne.n	800b49c <create_name+0x2ec>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2205      	movs	r2, #5
 800b498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d104      	bne.n	800b4ac <create_name+0x2fc>
 800b4a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b4ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4b0:	f003 030c 	and.w	r3, r3, #12
 800b4b4:	2b0c      	cmp	r3, #12
 800b4b6:	d005      	beq.n	800b4c4 <create_name+0x314>
 800b4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4bc:	f003 0303 	and.w	r3, r3, #3
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d105      	bne.n	800b4d0 <create_name+0x320>
 800b4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d117      	bne.n	800b50c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b4dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4e0:	f003 0303 	and.w	r3, r3, #3
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d105      	bne.n	800b4f4 <create_name+0x344>
 800b4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ec:	f043 0310 	orr.w	r3, r3, #16
 800b4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b4f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4f8:	f003 030c 	and.w	r3, r3, #12
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d105      	bne.n	800b50c <create_name+0x35c>
 800b500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b504:	f043 0308 	orr.w	r3, r3, #8
 800b508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b512:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b516:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3728      	adds	r7, #40	@ 0x28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b534:	e002      	b.n	800b53c <follow_path+0x1c>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b2f      	cmp	r3, #47	@ 0x2f
 800b542:	d0f8      	beq.n	800b536 <follow_path+0x16>
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b5c      	cmp	r3, #92	@ 0x5c
 800b54a:	d0f4      	beq.n	800b536 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	2200      	movs	r2, #0
 800b550:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b1f      	cmp	r3, #31
 800b558:	d80a      	bhi.n	800b570 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2280      	movs	r2, #128	@ 0x80
 800b55e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b562:	2100      	movs	r1, #0
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff f8fe 	bl	800a766 <dir_sdi>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]
 800b56e:	e048      	b.n	800b602 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b570:	463b      	mov	r3, r7
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7ff fe1b 	bl	800b1b0 <create_name>
 800b57a:	4603      	mov	r3, r0
 800b57c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d139      	bne.n	800b5f8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff fc5a 	bl	800ae3e <dir_find>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b594:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d12c      	bne.n	800b5fc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d127      	bne.n	800b5fc <follow_path+0xdc>
 800b5ac:	2305      	movs	r3, #5
 800b5ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b5b0:	e024      	b.n	800b5fc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5b2:	7afb      	ldrb	r3, [r7, #11]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d121      	bne.n	800b600 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	799b      	ldrb	r3, [r3, #6]
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b5c8:	2305      	movs	r3, #5
 800b5ca:	75fb      	strb	r3, [r7, #23]
 800b5cc:	e019      	b.n	800b602 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	8992      	ldrh	r2, [r2, #12]
 800b5dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5e0:	fb00 f202 	mul.w	r2, r0, r2
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7ff fa61 	bl	800aab2 <ld_clust>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5f6:	e7bb      	b.n	800b570 <follow_path+0x50>
			if (res != FR_OK) break;
 800b5f8:	bf00      	nop
 800b5fa:	e002      	b.n	800b602 <follow_path+0xe2>
				break;
 800b5fc:	bf00      	nop
 800b5fe:	e000      	b.n	800b602 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b600:	bf00      	nop
			}
		}
	}

	return res;
 800b602:	7dfb      	ldrb	r3, [r7, #23]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b614:	f04f 33ff 	mov.w	r3, #4294967295
 800b618:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d031      	beq.n	800b686 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	e002      	b.n	800b630 <get_ldnumber+0x24>
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	3301      	adds	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b1f      	cmp	r3, #31
 800b636:	d903      	bls.n	800b640 <get_ldnumber+0x34>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b63e:	d1f4      	bne.n	800b62a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b3a      	cmp	r3, #58	@ 0x3a
 800b646:	d11c      	bne.n	800b682 <get_ldnumber+0x76>
			tp = *path;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	60fa      	str	r2, [r7, #12]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	3b30      	subs	r3, #48	@ 0x30
 800b658:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b09      	cmp	r3, #9
 800b65e:	d80e      	bhi.n	800b67e <get_ldnumber+0x72>
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	429a      	cmp	r2, r3
 800b666:	d10a      	bne.n	800b67e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d107      	bne.n	800b67e <get_ldnumber+0x72>
					vol = (int)i;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	3301      	adds	r3, #1
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	e002      	b.n	800b688 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b682:	2300      	movs	r3, #0
 800b684:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b686:	693b      	ldr	r3, [r7, #16]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	70da      	strb	r2, [r3, #3]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fe fc7a 	bl	8009fa8 <move_window>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <check_fs+0x2a>
 800b6ba:	2304      	movs	r3, #4
 800b6bc:	e038      	b.n	800b730 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3338      	adds	r3, #56	@ 0x38
 800b6c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe f9be 	bl	8009a48 <ld_word>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d001      	beq.n	800b6dc <check_fs+0x48>
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e029      	b.n	800b730 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6e2:	2be9      	cmp	r3, #233	@ 0xe9
 800b6e4:	d009      	beq.n	800b6fa <check_fs+0x66>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6ec:	2beb      	cmp	r3, #235	@ 0xeb
 800b6ee:	d11e      	bne.n	800b72e <check_fs+0x9a>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b6f6:	2b90      	cmp	r3, #144	@ 0x90
 800b6f8:	d119      	bne.n	800b72e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3338      	adds	r3, #56	@ 0x38
 800b6fe:	3336      	adds	r3, #54	@ 0x36
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe f9b9 	bl	8009a78 <ld_dword>
 800b706:	4603      	mov	r3, r0
 800b708:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b70c:	4a0a      	ldr	r2, [pc, #40]	@ (800b738 <check_fs+0xa4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d101      	bne.n	800b716 <check_fs+0x82>
 800b712:	2300      	movs	r3, #0
 800b714:	e00c      	b.n	800b730 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3338      	adds	r3, #56	@ 0x38
 800b71a:	3352      	adds	r3, #82	@ 0x52
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe f9ab 	bl	8009a78 <ld_dword>
 800b722:	4603      	mov	r3, r0
 800b724:	4a05      	ldr	r2, [pc, #20]	@ (800b73c <check_fs+0xa8>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d101      	bne.n	800b72e <check_fs+0x9a>
 800b72a:	2300      	movs	r3, #0
 800b72c:	e000      	b.n	800b730 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b72e:	2302      	movs	r3, #2
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	00544146 	.word	0x00544146
 800b73c:	33544146 	.word	0x33544146

0800b740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b096      	sub	sp, #88	@ 0x58
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4613      	mov	r3, r2
 800b74c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7ff ff59 	bl	800b60c <get_ldnumber>
 800b75a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	da01      	bge.n	800b766 <find_volume+0x26>
 800b762:	230b      	movs	r3, #11
 800b764:	e265      	b.n	800bc32 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b766:	4a9f      	ldr	r2, [pc, #636]	@ (800b9e4 <find_volume+0x2a4>)
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b76e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <find_volume+0x3a>
 800b776:	230c      	movs	r3, #12
 800b778:	e25b      	b.n	800bc32 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b77e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d01a      	beq.n	800b7c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe f8b7 	bl	8009908 <disk_status>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10c      	bne.n	800b7c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d007      	beq.n	800b7c2 <find_volume+0x82>
 800b7b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b7be:	230a      	movs	r3, #10
 800b7c0:	e237      	b.n	800bc32 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e235      	b.n	800bc32 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe f8af 	bl	800993c <disk_initialize>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b7e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e21e      	b.n	800bc32 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <find_volume+0xca>
 800b7fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b806:	230a      	movs	r3, #10
 800b808:	e213      	b.n	800bc32 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	7858      	ldrb	r0, [r3, #1]
 800b80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b810:	330c      	adds	r3, #12
 800b812:	461a      	mov	r2, r3
 800b814:	2102      	movs	r1, #2
 800b816:	f7fe f8f9 	bl	8009a0c <disk_ioctl>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <find_volume+0xe4>
 800b820:	2301      	movs	r3, #1
 800b822:	e206      	b.n	800bc32 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	899b      	ldrh	r3, [r3, #12]
 800b828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b82c:	d80d      	bhi.n	800b84a <find_volume+0x10a>
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	899b      	ldrh	r3, [r3, #12]
 800b832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b836:	d308      	bcc.n	800b84a <find_volume+0x10a>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	899b      	ldrh	r3, [r3, #12]
 800b83c:	461a      	mov	r2, r3
 800b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b840:	899b      	ldrh	r3, [r3, #12]
 800b842:	3b01      	subs	r3, #1
 800b844:	4013      	ands	r3, r2
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <find_volume+0x10e>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e1f1      	b.n	800bc32 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b852:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b854:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b856:	f7ff ff1d 	bl	800b694 <check_fs>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b864:	2b02      	cmp	r3, #2
 800b866:	d149      	bne.n	800b8fc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b868:	2300      	movs	r3, #0
 800b86a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b86c:	e01e      	b.n	800b8ac <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b87c:	4413      	add	r3, r2
 800b87e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b882:	3304      	adds	r3, #4
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d006      	beq.n	800b898 <find_volume+0x158>
 800b88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88c:	3308      	adds	r3, #8
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe f8f2 	bl	8009a78 <ld_dword>
 800b894:	4602      	mov	r2, r0
 800b896:	e000      	b.n	800b89a <find_volume+0x15a>
 800b898:	2200      	movs	r2, #0
 800b89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	3358      	adds	r3, #88	@ 0x58
 800b8a0:	443b      	add	r3, r7
 800b8a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d9dd      	bls.n	800b86e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b8b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <find_volume+0x182>
 800b8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	3358      	adds	r3, #88	@ 0x58
 800b8c8:	443b      	add	r3, r7
 800b8ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b8ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <find_volume+0x1a2>
 800b8d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b8da:	f7ff fedb 	bl	800b694 <check_fs>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	e000      	b.n	800b8e4 <find_volume+0x1a4>
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b8e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d905      	bls.n	800b8fc <find_volume+0x1bc>
 800b8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d9e2      	bls.n	800b8c2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b900:	2b04      	cmp	r3, #4
 800b902:	d101      	bne.n	800b908 <find_volume+0x1c8>
 800b904:	2301      	movs	r3, #1
 800b906:	e194      	b.n	800bc32 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d901      	bls.n	800b914 <find_volume+0x1d4>
 800b910:	230d      	movs	r3, #13
 800b912:	e18e      	b.n	800bc32 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	3338      	adds	r3, #56	@ 0x38
 800b918:	330b      	adds	r3, #11
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe f894 	bl	8009a48 <ld_word>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b926:	899b      	ldrh	r3, [r3, #12]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d001      	beq.n	800b930 <find_volume+0x1f0>
 800b92c:	230d      	movs	r3, #13
 800b92e:	e180      	b.n	800bc32 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	3338      	adds	r3, #56	@ 0x38
 800b934:	3316      	adds	r3, #22
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe f886 	bl	8009a48 <ld_word>
 800b93c:	4603      	mov	r3, r0
 800b93e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <find_volume+0x214>
 800b946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b948:	3338      	adds	r3, #56	@ 0x38
 800b94a:	3324      	adds	r3, #36	@ 0x24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe f893 	bl	8009a78 <ld_dword>
 800b952:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b958:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	789b      	ldrb	r3, [r3, #2]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d005      	beq.n	800b978 <find_volume+0x238>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96e:	789b      	ldrb	r3, [r3, #2]
 800b970:	2b02      	cmp	r3, #2
 800b972:	d001      	beq.n	800b978 <find_volume+0x238>
 800b974:	230d      	movs	r3, #13
 800b976:	e15c      	b.n	800bc32 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	789b      	ldrb	r3, [r3, #2]
 800b97c:	461a      	mov	r2, r3
 800b97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b980:	fb02 f303 	mul.w	r3, r2, r3
 800b984:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b98c:	461a      	mov	r2, r3
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	895b      	ldrh	r3, [r3, #10]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d008      	beq.n	800b9ac <find_volume+0x26c>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	895b      	ldrh	r3, [r3, #10]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <find_volume+0x270>
 800b9ac:	230d      	movs	r3, #13
 800b9ae:	e140      	b.n	800bc32 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	3338      	adds	r3, #56	@ 0x38
 800b9b4:	3311      	adds	r3, #17
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe f846 	bl	8009a48 <ld_word>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c6:	891b      	ldrh	r3, [r3, #8]
 800b9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ca:	8992      	ldrh	r2, [r2, #12]
 800b9cc:	0952      	lsrs	r2, r2, #5
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9d4:	fb01 f202 	mul.w	r2, r1, r2
 800b9d8:	1a9b      	subs	r3, r3, r2
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <find_volume+0x2a8>
 800b9e0:	230d      	movs	r3, #13
 800b9e2:	e126      	b.n	800bc32 <find_volume+0x4f2>
 800b9e4:	200015a8 	.word	0x200015a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ea:	3338      	adds	r3, #56	@ 0x38
 800b9ec:	3313      	adds	r3, #19
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe f82a 	bl	8009a48 <ld_word>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b9f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <find_volume+0x2cc>
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba00:	3338      	adds	r3, #56	@ 0x38
 800ba02:	3320      	adds	r3, #32
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe f837 	bl	8009a78 <ld_dword>
 800ba0a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	3338      	adds	r3, #56	@ 0x38
 800ba10:	330e      	adds	r3, #14
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe f818 	bl	8009a48 <ld_word>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <find_volume+0x2e6>
 800ba22:	230d      	movs	r3, #13
 800ba24:	e105      	b.n	800bc32 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba2a:	4413      	add	r3, r2
 800ba2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba2e:	8911      	ldrh	r1, [r2, #8]
 800ba30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba32:	8992      	ldrh	r2, [r2, #12]
 800ba34:	0952      	lsrs	r2, r2, #5
 800ba36:	b292      	uxth	r2, r2
 800ba38:	fbb1 f2f2 	udiv	r2, r1, r2
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	4413      	add	r3, r2
 800ba40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d201      	bcs.n	800ba4e <find_volume+0x30e>
 800ba4a:	230d      	movs	r3, #13
 800ba4c:	e0f1      	b.n	800bc32 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba56:	8952      	ldrh	r2, [r2, #10]
 800ba58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba5c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <find_volume+0x328>
 800ba64:	230d      	movs	r3, #13
 800ba66:	e0e4      	b.n	800bc32 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d802      	bhi.n	800ba7e <find_volume+0x33e>
 800ba78:	2302      	movs	r3, #2
 800ba7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d802      	bhi.n	800ba8e <find_volume+0x34e>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba90:	1c9a      	adds	r2, r3, #2
 800ba92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba94:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba9a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baa0:	441a      	add	r2, r3
 800baa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800baa6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baaa:	441a      	add	r2, r3
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800bab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d11e      	bne.n	800baf6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baba:	3338      	adds	r3, #56	@ 0x38
 800babc:	332a      	adds	r3, #42	@ 0x2a
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd ffc2 	bl	8009a48 <ld_word>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <find_volume+0x38e>
 800baca:	230d      	movs	r3, #13
 800bacc:	e0b1      	b.n	800bc32 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	891b      	ldrh	r3, [r3, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <find_volume+0x39a>
 800bad6:	230d      	movs	r3, #13
 800bad8:	e0ab      	b.n	800bc32 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	3338      	adds	r3, #56	@ 0x38
 800bade:	332c      	adds	r3, #44	@ 0x2c
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fd ffc9 	bl	8009a78 <ld_dword>
 800bae6:	4602      	mov	r2, r0
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	647b      	str	r3, [r7, #68]	@ 0x44
 800baf4:	e01f      	b.n	800bb36 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800baf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf8:	891b      	ldrh	r3, [r3, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <find_volume+0x3c2>
 800bafe:	230d      	movs	r3, #13
 800bb00:	e097      	b.n	800bc32 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb08:	441a      	add	r2, r3
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d103      	bne.n	800bb1e <find_volume+0x3de>
 800bb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	e00a      	b.n	800bb34 <find_volume+0x3f4>
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb20:	69da      	ldr	r2, [r3, #28]
 800bb22:	4613      	mov	r3, r2
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	085a      	lsrs	r2, r3, #1
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb34:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb38:	6a1a      	ldr	r2, [r3, #32]
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	899b      	ldrh	r3, [r3, #12]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb42:	440b      	add	r3, r1
 800bb44:	3b01      	subs	r3, #1
 800bb46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb48:	8989      	ldrh	r1, [r1, #12]
 800bb4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d201      	bcs.n	800bb56 <find_volume+0x416>
 800bb52:	230d      	movs	r3, #13
 800bb54:	e06d      	b.n	800bc32 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	619a      	str	r2, [r3, #24]
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	699a      	ldr	r2, [r3, #24]
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	2280      	movs	r2, #128	@ 0x80
 800bb6a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d149      	bne.n	800bc08 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	3338      	adds	r3, #56	@ 0x38
 800bb78:	3330      	adds	r3, #48	@ 0x30
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd ff64 	bl	8009a48 <ld_word>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d140      	bne.n	800bc08 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb88:	3301      	adds	r3, #1
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bb8e:	f7fe fa0b 	bl	8009fa8 <move_window>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d137      	bne.n	800bc08 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba0:	3338      	adds	r3, #56	@ 0x38
 800bba2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd ff4e 	bl	8009a48 <ld_word>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d127      	bne.n	800bc08 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbba:	3338      	adds	r3, #56	@ 0x38
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fd ff5b 	bl	8009a78 <ld_dword>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc3c <find_volume+0x4fc>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d11e      	bne.n	800bc08 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbcc:	3338      	adds	r3, #56	@ 0x38
 800bbce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd ff50 	bl	8009a78 <ld_dword>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4a19      	ldr	r2, [pc, #100]	@ (800bc40 <find_volume+0x500>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d113      	bne.n	800bc08 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe2:	3338      	adds	r3, #56	@ 0x38
 800bbe4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fd ff45 	bl	8009a78 <ld_dword>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	3338      	adds	r3, #56	@ 0x38
 800bbf8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fd ff3b 	bl	8009a78 <ld_dword>
 800bc02:	4602      	mov	r2, r0
 800bc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc06:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bc0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc10:	4b0c      	ldr	r3, [pc, #48]	@ (800bc44 <find_volume+0x504>)
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	3301      	adds	r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <find_volume+0x504>)
 800bc1a:	801a      	strh	r2, [r3, #0]
 800bc1c:	4b09      	ldr	r3, [pc, #36]	@ (800bc44 <find_volume+0x504>)
 800bc1e:	881a      	ldrh	r2, [r3, #0]
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	4a08      	ldr	r2, [pc, #32]	@ (800bc48 <find_volume+0x508>)
 800bc28:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc2c:	f7fe f954 	bl	8009ed8 <clear_lock>
#endif
	return FR_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3758      	adds	r7, #88	@ 0x58
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	41615252 	.word	0x41615252
 800bc40:	61417272 	.word	0x61417272
 800bc44:	200015ac 	.word	0x200015ac
 800bc48:	200015d0 	.word	0x200015d0

0800bc4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc56:	2309      	movs	r3, #9
 800bc58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01c      	beq.n	800bc9a <validate+0x4e>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d018      	beq.n	800bc9a <validate+0x4e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d013      	beq.n	800bc9a <validate+0x4e>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	889a      	ldrh	r2, [r3, #4]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	88db      	ldrh	r3, [r3, #6]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d10c      	bne.n	800bc9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	785b      	ldrb	r3, [r3, #1]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fd fe3e 	bl	8009908 <disk_status>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <validate+0x4e>
			res = FR_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <validate+0x5a>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	e000      	b.n	800bca8 <validate+0x5c>
 800bca6:	2300      	movs	r3, #0
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	6013      	str	r3, [r2, #0]
	return res;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bcca:	f107 0310 	add.w	r3, r7, #16
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7ff fc9c 	bl	800b60c <get_ldnumber>
 800bcd4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	da01      	bge.n	800bce0 <f_mount+0x28>
 800bcdc:	230b      	movs	r3, #11
 800bcde:	e02b      	b.n	800bd38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bce0:	4a17      	ldr	r2, [pc, #92]	@ (800bd40 <f_mount+0x88>)
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bce8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d005      	beq.n	800bcfc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bcf0:	69b8      	ldr	r0, [r7, #24]
 800bcf2:	f7fe f8f1 	bl	8009ed8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	490d      	ldr	r1, [pc, #52]	@ (800bd40 <f_mount+0x88>)
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <f_mount+0x66>
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d001      	beq.n	800bd22 <f_mount+0x6a>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e00a      	b.n	800bd38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd22:	f107 010c 	add.w	r1, r7, #12
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fd07 	bl	800b740 <find_volume>
 800bd32:	4603      	mov	r3, r0
 800bd34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200015a8 	.word	0x200015a8

0800bd44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b09a      	sub	sp, #104	@ 0x68
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <f_open+0x18>
 800bd58:	2309      	movs	r3, #9
 800bd5a:	e1b7      	b.n	800c0cc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd64:	79fa      	ldrb	r2, [r7, #7]
 800bd66:	f107 0114 	add.w	r1, r7, #20
 800bd6a:	f107 0308 	add.w	r3, r7, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fce6 	bl	800b740 <find_volume>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bd7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f040 819b 	bne.w	800c0ba <f_open+0x376>
		dj.obj.fs = fs;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	f107 0318 	add.w	r3, r7, #24
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fbc5 	bl	800b520 <follow_path>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d118      	bne.n	800bdd6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bda4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bda8:	b25b      	sxtb	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da03      	bge.n	800bdb6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bdae:	2306      	movs	r3, #6
 800bdb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bdb4:	e00f      	b.n	800bdd6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	bf8c      	ite	hi
 800bdbc:	2301      	movhi	r3, #1
 800bdbe:	2300      	movls	r3, #0
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f107 0318 	add.w	r3, r7, #24
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd ff3c 	bl	8009c48 <chk_lock>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	f003 031c 	and.w	r3, r3, #28
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d07f      	beq.n	800bee0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bde0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d017      	beq.n	800be18 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bde8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bdec:	2b04      	cmp	r3, #4
 800bdee:	d10e      	bne.n	800be0e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bdf0:	f7fd ff86 	bl	8009d00 <enq_lock>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d006      	beq.n	800be08 <f_open+0xc4>
 800bdfa:	f107 0318 	add.w	r3, r7, #24
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff f8de 	bl	800afc0 <dir_register>
 800be04:	4603      	mov	r3, r0
 800be06:	e000      	b.n	800be0a <f_open+0xc6>
 800be08:	2312      	movs	r3, #18
 800be0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	f043 0308 	orr.w	r3, r3, #8
 800be14:	71fb      	strb	r3, [r7, #7]
 800be16:	e010      	b.n	800be3a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be18:	7fbb      	ldrb	r3, [r7, #30]
 800be1a:	f003 0311 	and.w	r3, r3, #17
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <f_open+0xe6>
					res = FR_DENIED;
 800be22:	2307      	movs	r3, #7
 800be24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800be28:	e007      	b.n	800be3a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	f003 0304 	and.w	r3, r3, #4
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <f_open+0xf6>
 800be34:	2308      	movs	r3, #8
 800be36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d168      	bne.n	800bf14 <f_open+0x1d0>
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d063      	beq.n	800bf14 <f_open+0x1d0>
				dw = GET_FATTIME();
 800be4c:	f7fd fcfe 	bl	800984c <get_fattime>
 800be50:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	330e      	adds	r3, #14
 800be56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fd fe4b 	bl	8009af4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be60:	3316      	adds	r3, #22
 800be62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be64:	4618      	mov	r0, r3
 800be66:	f7fd fe45 	bl	8009af4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6c:	330b      	adds	r3, #11
 800be6e:	2220      	movs	r2, #32
 800be70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be76:	4611      	mov	r1, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe fe1a 	bl	800aab2 <ld_clust>
 800be7e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800be84:	2200      	movs	r2, #0
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fe32 	bl	800aaf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	331c      	adds	r3, #28
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f7fd fe2e 	bl	8009af4 <st_dword>
					fs->wflag = 1;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2201      	movs	r2, #1
 800be9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d037      	beq.n	800bf14 <f_open+0x1d0>
						dw = fs->winsect;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bea8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800beaa:	f107 0318 	add.w	r3, r7, #24
 800beae:	2200      	movs	r2, #0
 800beb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fb22 	bl	800a4fc <remove_chain>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800bebe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d126      	bne.n	800bf14 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe f86c 	bl	8009fa8 <move_window>
 800bed0:	4603      	mov	r3, r0
 800bed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800beda:	3a01      	subs	r2, #1
 800bedc:	615a      	str	r2, [r3, #20]
 800bede:	e019      	b.n	800bf14 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d115      	bne.n	800bf14 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bee8:	7fbb      	ldrb	r3, [r7, #30]
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d003      	beq.n	800befa <f_open+0x1b6>
					res = FR_NO_FILE;
 800bef2:	2304      	movs	r3, #4
 800bef4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bef8:	e00c      	b.n	800bf14 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <f_open+0x1d0>
 800bf04:	7fbb      	ldrb	r3, [r7, #30]
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <f_open+0x1d0>
						res = FR_DENIED;
 800bf0e:	2307      	movs	r3, #7
 800bf10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d126      	bne.n	800bf6a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	f003 0308 	and.w	r3, r3, #8
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bf36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	bf8c      	ite	hi
 800bf42:	2301      	movhi	r3, #1
 800bf44:	2300      	movls	r3, #0
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	f107 0318 	add.w	r3, r7, #24
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fd fef7 	bl	8009d44 <inc_lock>
 800bf56:	4602      	mov	r2, r0
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <f_open+0x226>
 800bf64:	2302      	movs	r3, #2
 800bf66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 80a3 	bne.w	800c0ba <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fd99 	bl	800aab2 <ld_clust>
 800bf80:	4602      	mov	r2, r0
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf88:	331c      	adds	r3, #28
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fd74 	bl	8009a78 <ld_dword>
 800bf90:	4602      	mov	r2, r0
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	88da      	ldrh	r2, [r3, #6]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	79fa      	ldrb	r2, [r7, #7]
 800bfae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3330      	adds	r3, #48	@ 0x30
 800bfc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fd fdde 	bl	8009b8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	f003 0320 	and.w	r3, r3, #32
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d06e      	beq.n	800c0ba <f_open+0x376>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d06a      	beq.n	800c0ba <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	68da      	ldr	r2, [r3, #12]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	895b      	ldrh	r3, [r3, #10]
 800bff0:	461a      	mov	r2, r3
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	899b      	ldrh	r3, [r3, #12]
 800bff6:	fb02 f303 	mul.w	r3, r2, r3
 800bffa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c008:	e016      	b.n	800c038 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe f887 	bl	800a122 <get_fat>
 800c014:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d802      	bhi.n	800c022 <f_open+0x2de>
 800c01c:	2302      	movs	r3, #2
 800c01e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c028:	d102      	bne.n	800c030 <f_open+0x2ec>
 800c02a:	2301      	movs	r3, #1
 800c02c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c030:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c038:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <f_open+0x304>
 800c040:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c044:	429a      	cmp	r2, r3
 800c046:	d8e0      	bhi.n	800c00a <f_open+0x2c6>
				}
				fp->clust = clst;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c04c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c04e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c052:	2b00      	cmp	r3, #0
 800c054:	d131      	bne.n	800c0ba <f_open+0x376>
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	899b      	ldrh	r3, [r3, #12]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c05e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c062:	fb01 f202 	mul.w	r2, r1, r2
 800c066:	1a9b      	subs	r3, r3, r2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d026      	beq.n	800c0ba <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe f837 	bl	800a0e4 <clust2sect>
 800c076:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d103      	bne.n	800c086 <f_open+0x342>
						res = FR_INT_ERR;
 800c07e:	2302      	movs	r3, #2
 800c080:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c084:	e019      	b.n	800c0ba <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	461a      	mov	r2, r3
 800c08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c08e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c094:	441a      	add	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	7858      	ldrb	r0, [r3, #1]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6a1a      	ldr	r2, [r3, #32]
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	f7fd fc6f 	bl	800998c <disk_read>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <f_open+0x376>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c0ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <f_open+0x384>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c0c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3768      	adds	r7, #104	@ 0x68
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08e      	sub	sp, #56	@ 0x38
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f107 0214 	add.w	r2, r7, #20
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fda9 	bl	800bc4c <validate>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <f_read+0x44>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	7d5b      	ldrb	r3, [r3, #21]
 800c10c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <f_read+0x4a>
 800c118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c11c:	e135      	b.n	800c38a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	7d1b      	ldrb	r3, [r3, #20]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <f_read+0x5a>
 800c12a:	2307      	movs	r3, #7
 800c12c:	e12d      	b.n	800c38a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	68da      	ldr	r2, [r3, #12]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	429a      	cmp	r2, r3
 800c140:	f240 811e 	bls.w	800c380 <f_read+0x2ac>
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c148:	e11a      	b.n	800c380 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	8992      	ldrh	r2, [r2, #12]
 800c152:	fbb3 f1f2 	udiv	r1, r3, r2
 800c156:	fb01 f202 	mul.w	r2, r1, r2
 800c15a:	1a9b      	subs	r3, r3, r2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f040 80d5 	bne.w	800c30c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	8992      	ldrh	r2, [r2, #12]
 800c16a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	8952      	ldrh	r2, [r2, #10]
 800c172:	3a01      	subs	r2, #1
 800c174:	4013      	ands	r3, r2
 800c176:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d12f      	bne.n	800c1de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d103      	bne.n	800c18e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c18c:	e013      	b.n	800c1b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c192:	2b00      	cmp	r3, #0
 800c194:	d007      	beq.n	800c1a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	4619      	mov	r1, r3
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f7fe faaa 	bl	800a6f6 <clmt_clust>
 800c1a2:	6338      	str	r0, [r7, #48]	@ 0x30
 800c1a4:	e007      	b.n	800c1b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7fd ffb7 	bl	800a122 <get_fat>
 800c1b4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d804      	bhi.n	800c1c6 <f_read+0xf2>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	755a      	strb	r2, [r3, #21]
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e0e1      	b.n	800c38a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d104      	bne.n	800c1d8 <f_read+0x104>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	755a      	strb	r2, [r3, #21]
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e0d8      	b.n	800c38a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f7fd ff7c 	bl	800a0e4 <clust2sect>
 800c1ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <f_read+0x12a>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	755a      	strb	r2, [r3, #21]
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e0c5      	b.n	800c38a <f_read+0x2b6>
			sect += csect;
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	4413      	add	r3, r2
 800c204:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	899b      	ldrh	r3, [r3, #12]
 800c20a:	461a      	mov	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c212:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c216:	2b00      	cmp	r3, #0
 800c218:	d041      	beq.n	800c29e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21e:	4413      	add	r3, r2
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	8952      	ldrh	r2, [r2, #10]
 800c224:	4293      	cmp	r3, r2
 800c226:	d905      	bls.n	800c234 <f_read+0x160>
					cc = fs->csize - csect;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	895b      	ldrh	r3, [r3, #10]
 800c22c:	461a      	mov	r2, r3
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	7858      	ldrb	r0, [r3, #1]
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c23e:	f7fd fba5 	bl	800998c <disk_read>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <f_read+0x17e>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2201      	movs	r2, #1
 800c24c:	755a      	strb	r2, [r3, #21]
 800c24e:	2301      	movs	r3, #1
 800c250:	e09b      	b.n	800c38a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	7d1b      	ldrb	r3, [r3, #20]
 800c256:	b25b      	sxtb	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	da18      	bge.n	800c28e <f_read+0x1ba>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a1a      	ldr	r2, [r3, #32]
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c266:	429a      	cmp	r2, r3
 800c268:	d911      	bls.n	800c28e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a1a      	ldr	r2, [r3, #32]
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	8992      	ldrh	r2, [r2, #12]
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c27c:	18d0      	adds	r0, r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	899b      	ldrh	r3, [r3, #12]
 800c288:	461a      	mov	r2, r3
 800c28a:	f7fd fc5f 	bl	8009b4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	899b      	ldrh	r3, [r3, #12]
 800c292:	461a      	mov	r2, r3
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	fb02 f303 	mul.w	r3, r2, r3
 800c29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c29c:	e05c      	b.n	800c358 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d02e      	beq.n	800c306 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	7d1b      	ldrb	r3, [r3, #20]
 800c2ac:	b25b      	sxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	da18      	bge.n	800c2e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	7858      	ldrb	r0, [r3, #1]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a1a      	ldr	r2, [r3, #32]
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f7fd fb83 	bl	80099cc <disk_write>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <f_read+0x202>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	755a      	strb	r2, [r3, #21]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e059      	b.n	800c38a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	7d1b      	ldrb	r3, [r3, #20]
 800c2da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	7858      	ldrb	r0, [r3, #1]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	f7fd fb4b 	bl	800998c <disk_read>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <f_read+0x232>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	755a      	strb	r2, [r3, #21]
 800c302:	2301      	movs	r3, #1
 800c304:	e041      	b.n	800c38a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	899b      	ldrh	r3, [r3, #12]
 800c310:	4618      	mov	r0, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	8992      	ldrh	r2, [r2, #12]
 800c31a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c31e:	fb01 f202 	mul.w	r2, r1, r2
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	1ac3      	subs	r3, r0, r3
 800c326:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d901      	bls.n	800c334 <f_read+0x260>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	8992      	ldrh	r2, [r2, #12]
 800c342:	fbb3 f0f2 	udiv	r0, r3, r2
 800c346:	fb00 f202 	mul.w	r2, r0, r2
 800c34a:	1a9b      	subs	r3, r3, r2
 800c34c:	440b      	add	r3, r1
 800c34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c350:	4619      	mov	r1, r3
 800c352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c354:	f7fd fbfa 	bl	8009b4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35c:	4413      	add	r3, r2
 800c35e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	699a      	ldr	r2, [r3, #24]
 800c364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c366:	441a      	add	r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	619a      	str	r2, [r3, #24]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c372:	441a      	add	r2, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	f47f aee1 	bne.w	800c14a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3738      	adds	r7, #56	@ 0x38
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b086      	sub	sp, #24
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f107 0208 	add.w	r2, r7, #8
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff fc52 	bl	800bc4c <validate>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d168      	bne.n	800c484 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
 800c3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d062      	beq.n	800c484 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	7d1b      	ldrb	r3, [r3, #20]
 800c3c2:	b25b      	sxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	da15      	bge.n	800c3f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	7858      	ldrb	r0, [r3, #1]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1a      	ldr	r2, [r3, #32]
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	f7fd faf8 	bl	80099cc <disk_write>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <f_sync+0x54>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e04f      	b.n	800c486 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	7d1b      	ldrb	r3, [r3, #20]
 800c3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3f4:	f7fd fa2a 	bl	800984c <get_fattime>
 800c3f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7fd fdd0 	bl	8009fa8 <move_window>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d138      	bne.n	800c484 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c416:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	330b      	adds	r3, #11
 800c41c:	781a      	ldrb	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	330b      	adds	r3, #11
 800c422:	f042 0220 	orr.w	r2, r2, #32
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	461a      	mov	r2, r3
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	f7fe fb5b 	bl	800aaf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f103 021c 	add.w	r2, r3, #28
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f7fd fb54 	bl	8009af4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3316      	adds	r3, #22
 800c450:	6939      	ldr	r1, [r7, #16]
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd fb4e 	bl	8009af4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3312      	adds	r3, #18
 800c45c:	2100      	movs	r1, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fd fb2d 	bl	8009abe <st_word>
					fs->wflag = 1;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2201      	movs	r2, #1
 800c468:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fd fdc9 	bl	800a004 <sync_fs>
 800c472:	4603      	mov	r3, r0
 800c474:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	7d1b      	ldrb	r3, [r3, #20]
 800c47a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff ff7b 	bl	800c392 <f_sync>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d118      	bne.n	800c4d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f107 0208 	add.w	r2, r7, #8
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff fbcc 	bl	800bc4c <validate>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10c      	bne.n	800c4d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd fccc 	bl	8009e60 <dec_lock>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b090      	sub	sp, #64	@ 0x40
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f107 0208 	add.w	r2, r7, #8
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff fba9 	bl	800bc4c <validate>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c500:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <f_lseek+0x2e>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7d5b      	ldrb	r3, [r3, #21]
 800c50c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c510:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <f_lseek+0x3c>
 800c518:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c51c:	e201      	b.n	800c922 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 80d9 	beq.w	800c6da <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52e:	d15a      	bne.n	800c5e6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c534:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	1d1a      	adds	r2, r3, #4
 800c53a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	2302      	movs	r3, #2
 800c542:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d03a      	beq.n	800c5c6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	2300      	movs	r3, #0
 800c556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55a:	3302      	adds	r3, #2
 800c55c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c564:	3301      	adds	r3, #1
 800c566:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fd fdd8 	bl	800a122 <get_fat>
 800c572:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	2b01      	cmp	r3, #1
 800c578:	d804      	bhi.n	800c584 <f_lseek+0xa2>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2202      	movs	r2, #2
 800c57e:	755a      	strb	r2, [r3, #21]
 800c580:	2302      	movs	r3, #2
 800c582:	e1ce      	b.n	800c922 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d104      	bne.n	800c596 <f_lseek+0xb4>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	755a      	strb	r2, [r3, #21]
 800c592:	2301      	movs	r3, #1
 800c594:	e1c5      	b.n	800c922 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d0de      	beq.n	800c55e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c5a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d809      	bhi.n	800c5bc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	1d1a      	adds	r2, r3, #4
 800c5ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b4:	1d1a      	adds	r2, r3, #4
 800c5b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d3c4      	bcc.n	800c550 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5cc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c5ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d803      	bhi.n	800c5de <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	e19f      	b.n	800c91e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c5de:	2311      	movs	r3, #17
 800c5e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c5e4:	e19b      	b.n	800c91e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d902      	bls.n	800c5f6 <f_lseek+0x114>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 818d 	beq.w	800c91e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	3b01      	subs	r3, #1
 800c608:	4619      	mov	r1, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fe f873 	bl	800a6f6 <clmt_clust>
 800c610:	4602      	mov	r2, r0
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	4619      	mov	r1, r3
 800c61e:	4610      	mov	r0, r2
 800c620:	f7fd fd60 	bl	800a0e4 <clust2sect>
 800c624:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <f_lseek+0x154>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	755a      	strb	r2, [r3, #21]
 800c632:	2302      	movs	r3, #2
 800c634:	e175      	b.n	800c922 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	3b01      	subs	r3, #1
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	8992      	ldrh	r2, [r2, #12]
 800c63e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	8952      	ldrh	r2, [r2, #10]
 800c646:	3a01      	subs	r2, #1
 800c648:	4013      	ands	r3, r2
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	4413      	add	r3, r2
 800c64e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	8992      	ldrh	r2, [r2, #12]
 800c658:	fbb3 f1f2 	udiv	r1, r3, r2
 800c65c:	fb01 f202 	mul.w	r2, r1, r2
 800c660:	1a9b      	subs	r3, r3, r2
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 815b 	beq.w	800c91e <f_lseek+0x43c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	69ba      	ldr	r2, [r7, #24]
 800c66e:	429a      	cmp	r2, r3
 800c670:	f000 8155 	beq.w	800c91e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	b25b      	sxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da18      	bge.n	800c6b0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	7858      	ldrb	r0, [r3, #1]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1a      	ldr	r2, [r3, #32]
 800c68c:	2301      	movs	r3, #1
 800c68e:	f7fd f99d 	bl	80099cc <disk_write>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <f_lseek+0x1c0>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	755a      	strb	r2, [r3, #21]
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e13f      	b.n	800c922 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	7d1b      	ldrb	r3, [r3, #20]
 800c6a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	7858      	ldrb	r0, [r3, #1]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	f7fd f965 	bl	800998c <disk_read>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d004      	beq.n	800c6d2 <f_lseek+0x1f0>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	755a      	strb	r2, [r3, #21]
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e127      	b.n	800c922 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	621a      	str	r2, [r3, #32]
 800c6d8:	e121      	b.n	800c91e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d908      	bls.n	800c6f6 <f_lseek+0x214>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	7d1b      	ldrb	r3, [r3, #20]
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c704:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 80b5 	beq.w	800c878 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	895b      	ldrh	r3, [r3, #10]
 800c712:	461a      	mov	r2, r3
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	fb02 f303 	mul.w	r3, r2, r3
 800c71c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c71e:	6a3b      	ldr	r3, [r7, #32]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01b      	beq.n	800c75c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	1e5a      	subs	r2, r3, #1
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	1e59      	subs	r1, r3, #1
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c738:	429a      	cmp	r2, r3
 800c73a:	d30f      	bcc.n	800c75c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	1e5a      	subs	r2, r3, #1
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	425b      	negs	r3, r3
 800c744:	401a      	ands	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	69db      	ldr	r3, [r3, #28]
 800c758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c75a:	e022      	b.n	800c7a2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	2b00      	cmp	r3, #0
 800c766:	d119      	bne.n	800c79c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fd ff2a 	bl	800a5c6 <create_chain>
 800c772:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	2b01      	cmp	r3, #1
 800c778:	d104      	bne.n	800c784 <f_lseek+0x2a2>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2202      	movs	r2, #2
 800c77e:	755a      	strb	r2, [r3, #21]
 800c780:	2302      	movs	r3, #2
 800c782:	e0ce      	b.n	800c922 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78a:	d104      	bne.n	800c796 <f_lseek+0x2b4>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	755a      	strb	r2, [r3, #21]
 800c792:	2301      	movs	r3, #1
 800c794:	e0c5      	b.n	800c922 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c79a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7a0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d067      	beq.n	800c878 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c7a8:	e03a      	b.n	800c820 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	603b      	str	r3, [r7, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	441a      	add	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	7d1b      	ldrb	r3, [r3, #20]
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd fef9 	bl	800a5c6 <create_chain>
 800c7d4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d108      	bne.n	800c7ee <f_lseek+0x30c>
							ofs = 0; break;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	e022      	b.n	800c828 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd fc9b 	bl	800a122 <get_fat>
 800c7ec:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d104      	bne.n	800c800 <f_lseek+0x31e>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	755a      	strb	r2, [r3, #21]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e090      	b.n	800c922 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c802:	2b01      	cmp	r3, #1
 800c804:	d904      	bls.n	800c810 <f_lseek+0x32e>
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d304      	bcc.n	800c81a <f_lseek+0x338>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2202      	movs	r2, #2
 800c814:	755a      	strb	r2, [r3, #21]
 800c816:	2302      	movs	r3, #2
 800c818:	e083      	b.n	800c922 <f_lseek+0x440>
					fp->clust = clst;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c81e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	429a      	cmp	r2, r3
 800c826:	d8c0      	bhi.n	800c7aa <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699a      	ldr	r2, [r3, #24]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	441a      	add	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	899b      	ldrh	r3, [r3, #12]
 800c838:	461a      	mov	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c840:	fb01 f202 	mul.w	r2, r1, r2
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	2b00      	cmp	r3, #0
 800c848:	d016      	beq.n	800c878 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fd fc48 	bl	800a0e4 <clust2sect>
 800c854:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d104      	bne.n	800c866 <f_lseek+0x384>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2202      	movs	r2, #2
 800c860:	755a      	strb	r2, [r3, #21]
 800c862:	2302      	movs	r3, #2
 800c864:	e05d      	b.n	800c922 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	899b      	ldrh	r3, [r3, #12]
 800c86a:	461a      	mov	r2, r3
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c874:	4413      	add	r3, r2
 800c876:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	699a      	ldr	r2, [r3, #24]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	429a      	cmp	r2, r3
 800c882:	d90a      	bls.n	800c89a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	699a      	ldr	r2, [r3, #24]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
 800c890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c894:	b2da      	uxtb	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	8992      	ldrh	r2, [r2, #12]
 800c8a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8a6:	fb01 f202 	mul.w	r2, r1, r2
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d036      	beq.n	800c91e <f_lseek+0x43c>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d031      	beq.n	800c91e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	da18      	bge.n	800c8f6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	7858      	ldrb	r0, [r3, #1]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a1a      	ldr	r2, [r3, #32]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f7fd f87a 	bl	80099cc <disk_write>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d004      	beq.n	800c8e8 <f_lseek+0x406>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	755a      	strb	r2, [r3, #21]
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e01c      	b.n	800c922 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7d1b      	ldrb	r3, [r3, #20]
 800c8ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	7858      	ldrb	r0, [r3, #1]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c900:	2301      	movs	r3, #1
 800c902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c904:	f7fd f842 	bl	800998c <disk_read>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d004      	beq.n	800c918 <f_lseek+0x436>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	755a      	strb	r2, [r3, #21]
 800c914:	2301      	movs	r3, #1
 800c916:	e004      	b.n	800c922 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c91c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c91e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c922:	4618      	mov	r0, r3
 800c924:	3740      	adds	r7, #64	@ 0x40
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4613      	mov	r3, r2
 800c938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c93a:	2301      	movs	r3, #1
 800c93c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c942:	4b1f      	ldr	r3, [pc, #124]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c944:	7a5b      	ldrb	r3, [r3, #9]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d131      	bne.n	800c9b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c94c:	4b1c      	ldr	r3, [pc, #112]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c94e:	7a5b      	ldrb	r3, [r3, #9]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	461a      	mov	r2, r3
 800c954:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c956:	2100      	movs	r1, #0
 800c958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c95a:	4b19      	ldr	r3, [pc, #100]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c95c:	7a5b      	ldrb	r3, [r3, #9]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	4a17      	ldr	r2, [pc, #92]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c96a:	4b15      	ldr	r3, [pc, #84]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c96c:	7a5b      	ldrb	r3, [r3, #9]
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	461a      	mov	r2, r3
 800c972:	4b13      	ldr	r3, [pc, #76]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c974:	4413      	add	r3, r2
 800c976:	79fa      	ldrb	r2, [r7, #7]
 800c978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c97a:	4b11      	ldr	r3, [pc, #68]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c97c:	7a5b      	ldrb	r3, [r3, #9]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	b2d1      	uxtb	r1, r2
 800c984:	4a0e      	ldr	r2, [pc, #56]	@ (800c9c0 <FATFS_LinkDriverEx+0x94>)
 800c986:	7251      	strb	r1, [r2, #9]
 800c988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c98a:	7dbb      	ldrb	r3, [r7, #22]
 800c98c:	3330      	adds	r3, #48	@ 0x30
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3301      	adds	r3, #1
 800c998:	223a      	movs	r2, #58	@ 0x3a
 800c99a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3302      	adds	r3, #2
 800c9a0:	222f      	movs	r2, #47	@ 0x2f
 800c9a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	3303      	adds	r3, #3
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	371c      	adds	r7, #28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	200017d0 	.word	0x200017d0

0800c9c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ffaa 	bl	800c92c <FATFS_LinkDriverEx>
 800c9d8:	4603      	mov	r3, r0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6039      	str	r1, [r7, #0]
 800c9ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c9f0:	88fb      	ldrh	r3, [r7, #6]
 800c9f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9f4:	d802      	bhi.n	800c9fc <ff_convert+0x18>
		c = chr;
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	81fb      	strh	r3, [r7, #14]
 800c9fa:	e025      	b.n	800ca48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	2bff      	cmp	r3, #255	@ 0xff
 800ca06:	d805      	bhi.n	800ca14 <ff_convert+0x30>
 800ca08:	88fb      	ldrh	r3, [r7, #6]
 800ca0a:	3b80      	subs	r3, #128	@ 0x80
 800ca0c:	4a12      	ldr	r2, [pc, #72]	@ (800ca58 <ff_convert+0x74>)
 800ca0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca12:	e000      	b.n	800ca16 <ff_convert+0x32>
 800ca14:	2300      	movs	r3, #0
 800ca16:	81fb      	strh	r3, [r7, #14]
 800ca18:	e016      	b.n	800ca48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	81fb      	strh	r3, [r7, #14]
 800ca1e:	e009      	b.n	800ca34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ca20:	89fb      	ldrh	r3, [r7, #14]
 800ca22:	4a0d      	ldr	r2, [pc, #52]	@ (800ca58 <ff_convert+0x74>)
 800ca24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca28:	88fa      	ldrh	r2, [r7, #6]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d006      	beq.n	800ca3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ca2e:	89fb      	ldrh	r3, [r7, #14]
 800ca30:	3301      	adds	r3, #1
 800ca32:	81fb      	strh	r3, [r7, #14]
 800ca34:	89fb      	ldrh	r3, [r7, #14]
 800ca36:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca38:	d9f2      	bls.n	800ca20 <ff_convert+0x3c>
 800ca3a:	e000      	b.n	800ca3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ca3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ca3e:	89fb      	ldrh	r3, [r7, #14]
 800ca40:	3380      	adds	r3, #128	@ 0x80
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ca48:	89fb      	ldrh	r3, [r7, #14]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	08010bc0 	.word	0x08010bc0

0800ca5c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca6c:	d201      	bcs.n	800ca72 <ff_wtoupper+0x16>
 800ca6e:	4b3e      	ldr	r3, [pc, #248]	@ (800cb68 <ff_wtoupper+0x10c>)
 800ca70:	e000      	b.n	800ca74 <ff_wtoupper+0x18>
 800ca72:	4b3e      	ldr	r3, [pc, #248]	@ (800cb6c <ff_wtoupper+0x110>)
 800ca74:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	1c9a      	adds	r2, r3, #2
 800ca7a:	617a      	str	r2, [r7, #20]
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ca80:	8a7b      	ldrh	r3, [r7, #18]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d068      	beq.n	800cb58 <ff_wtoupper+0xfc>
 800ca86:	88fa      	ldrh	r2, [r7, #6]
 800ca88:	8a7b      	ldrh	r3, [r7, #18]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d364      	bcc.n	800cb58 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	1c9a      	adds	r2, r3, #2
 800ca92:	617a      	str	r2, [r7, #20]
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	823b      	strh	r3, [r7, #16]
 800ca98:	8a3b      	ldrh	r3, [r7, #16]
 800ca9a:	0a1b      	lsrs	r3, r3, #8
 800ca9c:	81fb      	strh	r3, [r7, #14]
 800ca9e:	8a3b      	ldrh	r3, [r7, #16]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800caa4:	88fa      	ldrh	r2, [r7, #6]
 800caa6:	8a79      	ldrh	r1, [r7, #18]
 800caa8:	8a3b      	ldrh	r3, [r7, #16]
 800caaa:	440b      	add	r3, r1
 800caac:	429a      	cmp	r2, r3
 800caae:	da49      	bge.n	800cb44 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cab0:	89fb      	ldrh	r3, [r7, #14]
 800cab2:	2b08      	cmp	r3, #8
 800cab4:	d84f      	bhi.n	800cb56 <ff_wtoupper+0xfa>
 800cab6:	a201      	add	r2, pc, #4	@ (adr r2, 800cabc <ff_wtoupper+0x60>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cae1 	.word	0x0800cae1
 800cac0:	0800caf3 	.word	0x0800caf3
 800cac4:	0800cb09 	.word	0x0800cb09
 800cac8:	0800cb11 	.word	0x0800cb11
 800cacc:	0800cb19 	.word	0x0800cb19
 800cad0:	0800cb21 	.word	0x0800cb21
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800cb31 	.word	0x0800cb31
 800cadc:	0800cb39 	.word	0x0800cb39
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cae0:	88fa      	ldrh	r2, [r7, #6]
 800cae2:	8a7b      	ldrh	r3, [r7, #18]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	4413      	add	r3, r2
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	80fb      	strh	r3, [r7, #6]
 800caf0:	e027      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800caf2:	88fa      	ldrh	r2, [r7, #6]
 800caf4:	8a7b      	ldrh	r3, [r7, #18]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	88fa      	ldrh	r2, [r7, #6]
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	80fb      	strh	r3, [r7, #6]
 800cb06:	e01c      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cb08:	88fb      	ldrh	r3, [r7, #6]
 800cb0a:	3b10      	subs	r3, #16
 800cb0c:	80fb      	strh	r3, [r7, #6]
 800cb0e:	e018      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cb10:	88fb      	ldrh	r3, [r7, #6]
 800cb12:	3b20      	subs	r3, #32
 800cb14:	80fb      	strh	r3, [r7, #6]
 800cb16:	e014      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cb18:	88fb      	ldrh	r3, [r7, #6]
 800cb1a:	3b30      	subs	r3, #48	@ 0x30
 800cb1c:	80fb      	strh	r3, [r7, #6]
 800cb1e:	e010      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cb20:	88fb      	ldrh	r3, [r7, #6]
 800cb22:	3b1a      	subs	r3, #26
 800cb24:	80fb      	strh	r3, [r7, #6]
 800cb26:	e00c      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cb28:	88fb      	ldrh	r3, [r7, #6]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	80fb      	strh	r3, [r7, #6]
 800cb2e:	e008      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cb30:	88fb      	ldrh	r3, [r7, #6]
 800cb32:	3b50      	subs	r3, #80	@ 0x50
 800cb34:	80fb      	strh	r3, [r7, #6]
 800cb36:	e004      	b.n	800cb42 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cb38:	88fb      	ldrh	r3, [r7, #6]
 800cb3a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cb3e:	80fb      	strh	r3, [r7, #6]
 800cb40:	bf00      	nop
			}
			break;
 800cb42:	e008      	b.n	800cb56 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cb44:	89fb      	ldrh	r3, [r7, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d195      	bne.n	800ca76 <ff_wtoupper+0x1a>
 800cb4a:	8a3b      	ldrh	r3, [r7, #16]
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4413      	add	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cb54:	e78f      	b.n	800ca76 <ff_wtoupper+0x1a>
			break;
 800cb56:	bf00      	nop
	}

	return chr;
 800cb58:	88fb      	ldrh	r3, [r7, #6]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	08010cc0 	.word	0x08010cc0
 800cb6c:	08010eb4 	.word	0x08010eb4

0800cb70 <rand>:
 800cb70:	4b16      	ldr	r3, [pc, #88]	@ (800cbcc <rand+0x5c>)
 800cb72:	b510      	push	{r4, lr}
 800cb74:	681c      	ldr	r4, [r3, #0]
 800cb76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb78:	b9b3      	cbnz	r3, 800cba8 <rand+0x38>
 800cb7a:	2018      	movs	r0, #24
 800cb7c:	f001 fdf6 	bl	800e76c <malloc>
 800cb80:	4602      	mov	r2, r0
 800cb82:	6320      	str	r0, [r4, #48]	@ 0x30
 800cb84:	b920      	cbnz	r0, 800cb90 <rand+0x20>
 800cb86:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <rand+0x60>)
 800cb88:	4812      	ldr	r0, [pc, #72]	@ (800cbd4 <rand+0x64>)
 800cb8a:	2152      	movs	r1, #82	@ 0x52
 800cb8c:	f000 ff38 	bl	800da00 <__assert_func>
 800cb90:	4911      	ldr	r1, [pc, #68]	@ (800cbd8 <rand+0x68>)
 800cb92:	4b12      	ldr	r3, [pc, #72]	@ (800cbdc <rand+0x6c>)
 800cb94:	e9c0 1300 	strd	r1, r3, [r0]
 800cb98:	4b11      	ldr	r3, [pc, #68]	@ (800cbe0 <rand+0x70>)
 800cb9a:	6083      	str	r3, [r0, #8]
 800cb9c:	230b      	movs	r3, #11
 800cb9e:	8183      	strh	r3, [r0, #12]
 800cba0:	2100      	movs	r1, #0
 800cba2:	2001      	movs	r0, #1
 800cba4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cba8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cbaa:	480e      	ldr	r0, [pc, #56]	@ (800cbe4 <rand+0x74>)
 800cbac:	690b      	ldr	r3, [r1, #16]
 800cbae:	694c      	ldr	r4, [r1, #20]
 800cbb0:	4a0d      	ldr	r2, [pc, #52]	@ (800cbe8 <rand+0x78>)
 800cbb2:	4358      	muls	r0, r3
 800cbb4:	fb02 0004 	mla	r0, r2, r4, r0
 800cbb8:	fba3 3202 	umull	r3, r2, r3, r2
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	eb40 0002 	adc.w	r0, r0, r2
 800cbc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cbc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cbca:	bd10      	pop	{r4, pc}
 800cbcc:	20000064 	.word	0x20000064
 800cbd0:	08010f70 	.word	0x08010f70
 800cbd4:	08010f87 	.word	0x08010f87
 800cbd8:	abcd330e 	.word	0xabcd330e
 800cbdc:	e66d1234 	.word	0xe66d1234
 800cbe0:	0005deec 	.word	0x0005deec
 800cbe4:	5851f42d 	.word	0x5851f42d
 800cbe8:	4c957f2d 	.word	0x4c957f2d

0800cbec <__cvt>:
 800cbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf0:	ec57 6b10 	vmov	r6, r7, d0
 800cbf4:	2f00      	cmp	r7, #0
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	463b      	mov	r3, r7
 800cbfc:	bfbb      	ittet	lt
 800cbfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc02:	461f      	movlt	r7, r3
 800cc04:	2300      	movge	r3, #0
 800cc06:	232d      	movlt	r3, #45	@ 0x2d
 800cc08:	700b      	strb	r3, [r1, #0]
 800cc0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc10:	4691      	mov	r9, r2
 800cc12:	f023 0820 	bic.w	r8, r3, #32
 800cc16:	bfbc      	itt	lt
 800cc18:	4632      	movlt	r2, r6
 800cc1a:	4616      	movlt	r6, r2
 800cc1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc20:	d005      	beq.n	800cc2e <__cvt+0x42>
 800cc22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc26:	d100      	bne.n	800cc2a <__cvt+0x3e>
 800cc28:	3401      	adds	r4, #1
 800cc2a:	2102      	movs	r1, #2
 800cc2c:	e000      	b.n	800cc30 <__cvt+0x44>
 800cc2e:	2103      	movs	r1, #3
 800cc30:	ab03      	add	r3, sp, #12
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	ab02      	add	r3, sp, #8
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	ec47 6b10 	vmov	d0, r6, r7
 800cc3c:	4653      	mov	r3, sl
 800cc3e:	4622      	mov	r2, r4
 800cc40:	f000 ff86 	bl	800db50 <_dtoa_r>
 800cc44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc48:	4605      	mov	r5, r0
 800cc4a:	d119      	bne.n	800cc80 <__cvt+0x94>
 800cc4c:	f019 0f01 	tst.w	r9, #1
 800cc50:	d00e      	beq.n	800cc70 <__cvt+0x84>
 800cc52:	eb00 0904 	add.w	r9, r0, r4
 800cc56:	2200      	movs	r2, #0
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	f7f3 ff4b 	bl	8000af8 <__aeabi_dcmpeq>
 800cc62:	b108      	cbz	r0, 800cc68 <__cvt+0x7c>
 800cc64:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc68:	2230      	movs	r2, #48	@ 0x30
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	454b      	cmp	r3, r9
 800cc6e:	d31e      	bcc.n	800ccae <__cvt+0xc2>
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc74:	1b5b      	subs	r3, r3, r5
 800cc76:	4628      	mov	r0, r5
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	b004      	add	sp, #16
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc84:	eb00 0904 	add.w	r9, r0, r4
 800cc88:	d1e5      	bne.n	800cc56 <__cvt+0x6a>
 800cc8a:	7803      	ldrb	r3, [r0, #0]
 800cc8c:	2b30      	cmp	r3, #48	@ 0x30
 800cc8e:	d10a      	bne.n	800cca6 <__cvt+0xba>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	4630      	mov	r0, r6
 800cc96:	4639      	mov	r1, r7
 800cc98:	f7f3 ff2e 	bl	8000af8 <__aeabi_dcmpeq>
 800cc9c:	b918      	cbnz	r0, 800cca6 <__cvt+0xba>
 800cc9e:	f1c4 0401 	rsb	r4, r4, #1
 800cca2:	f8ca 4000 	str.w	r4, [sl]
 800cca6:	f8da 3000 	ldr.w	r3, [sl]
 800ccaa:	4499      	add	r9, r3
 800ccac:	e7d3      	b.n	800cc56 <__cvt+0x6a>
 800ccae:	1c59      	adds	r1, r3, #1
 800ccb0:	9103      	str	r1, [sp, #12]
 800ccb2:	701a      	strb	r2, [r3, #0]
 800ccb4:	e7d9      	b.n	800cc6a <__cvt+0x7e>

0800ccb6 <__exponent>:
 800ccb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	bfba      	itte	lt
 800ccbc:	4249      	neglt	r1, r1
 800ccbe:	232d      	movlt	r3, #45	@ 0x2d
 800ccc0:	232b      	movge	r3, #43	@ 0x2b
 800ccc2:	2909      	cmp	r1, #9
 800ccc4:	7002      	strb	r2, [r0, #0]
 800ccc6:	7043      	strb	r3, [r0, #1]
 800ccc8:	dd29      	ble.n	800cd1e <__exponent+0x68>
 800ccca:	f10d 0307 	add.w	r3, sp, #7
 800ccce:	461d      	mov	r5, r3
 800ccd0:	270a      	movs	r7, #10
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ccd8:	fb07 1416 	mls	r4, r7, r6, r1
 800ccdc:	3430      	adds	r4, #48	@ 0x30
 800ccde:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cce2:	460c      	mov	r4, r1
 800cce4:	2c63      	cmp	r4, #99	@ 0x63
 800cce6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccea:	4631      	mov	r1, r6
 800ccec:	dcf1      	bgt.n	800ccd2 <__exponent+0x1c>
 800ccee:	3130      	adds	r1, #48	@ 0x30
 800ccf0:	1e94      	subs	r4, r2, #2
 800ccf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ccf6:	1c41      	adds	r1, r0, #1
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	42ab      	cmp	r3, r5
 800ccfc:	d30a      	bcc.n	800cd14 <__exponent+0x5e>
 800ccfe:	f10d 0309 	add.w	r3, sp, #9
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	42ac      	cmp	r4, r5
 800cd06:	bf88      	it	hi
 800cd08:	2300      	movhi	r3, #0
 800cd0a:	3302      	adds	r3, #2
 800cd0c:	4403      	add	r3, r0
 800cd0e:	1a18      	subs	r0, r3, r0
 800cd10:	b003      	add	sp, #12
 800cd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd14:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd18:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd1c:	e7ed      	b.n	800ccfa <__exponent+0x44>
 800cd1e:	2330      	movs	r3, #48	@ 0x30
 800cd20:	3130      	adds	r1, #48	@ 0x30
 800cd22:	7083      	strb	r3, [r0, #2]
 800cd24:	70c1      	strb	r1, [r0, #3]
 800cd26:	1d03      	adds	r3, r0, #4
 800cd28:	e7f1      	b.n	800cd0e <__exponent+0x58>
	...

0800cd2c <_printf_float>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	b08d      	sub	sp, #52	@ 0x34
 800cd32:	460c      	mov	r4, r1
 800cd34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd38:	4616      	mov	r6, r2
 800cd3a:	461f      	mov	r7, r3
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	f000 fddf 	bl	800d900 <_localeconv_r>
 800cd42:	6803      	ldr	r3, [r0, #0]
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f3 faaa 	bl	80002a0 <strlen>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd50:	f8d8 3000 	ldr.w	r3, [r8]
 800cd54:	9005      	str	r0, [sp, #20]
 800cd56:	3307      	adds	r3, #7
 800cd58:	f023 0307 	bic.w	r3, r3, #7
 800cd5c:	f103 0208 	add.w	r2, r3, #8
 800cd60:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd64:	f8d4 b000 	ldr.w	fp, [r4]
 800cd68:	f8c8 2000 	str.w	r2, [r8]
 800cd6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd74:	9307      	str	r3, [sp, #28]
 800cd76:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd82:	4b9c      	ldr	r3, [pc, #624]	@ (800cff4 <_printf_float+0x2c8>)
 800cd84:	f04f 32ff 	mov.w	r2, #4294967295
 800cd88:	f7f3 fee8 	bl	8000b5c <__aeabi_dcmpun>
 800cd8c:	bb70      	cbnz	r0, 800cdec <_printf_float+0xc0>
 800cd8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd92:	4b98      	ldr	r3, [pc, #608]	@ (800cff4 <_printf_float+0x2c8>)
 800cd94:	f04f 32ff 	mov.w	r2, #4294967295
 800cd98:	f7f3 fec2 	bl	8000b20 <__aeabi_dcmple>
 800cd9c:	bb30      	cbnz	r0, 800cdec <_printf_float+0xc0>
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2300      	movs	r3, #0
 800cda2:	4640      	mov	r0, r8
 800cda4:	4649      	mov	r1, r9
 800cda6:	f7f3 feb1 	bl	8000b0c <__aeabi_dcmplt>
 800cdaa:	b110      	cbz	r0, 800cdb2 <_printf_float+0x86>
 800cdac:	232d      	movs	r3, #45	@ 0x2d
 800cdae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdb2:	4a91      	ldr	r2, [pc, #580]	@ (800cff8 <_printf_float+0x2cc>)
 800cdb4:	4b91      	ldr	r3, [pc, #580]	@ (800cffc <_printf_float+0x2d0>)
 800cdb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdba:	bf94      	ite	ls
 800cdbc:	4690      	movls	r8, r2
 800cdbe:	4698      	movhi	r8, r3
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	f02b 0304 	bic.w	r3, fp, #4
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	f04f 0900 	mov.w	r9, #0
 800cdce:	9700      	str	r7, [sp, #0]
 800cdd0:	4633      	mov	r3, r6
 800cdd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f000 f9d2 	bl	800d180 <_printf_common>
 800cddc:	3001      	adds	r0, #1
 800cdde:	f040 808d 	bne.w	800cefc <_printf_float+0x1d0>
 800cde2:	f04f 30ff 	mov.w	r0, #4294967295
 800cde6:	b00d      	add	sp, #52	@ 0x34
 800cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdec:	4642      	mov	r2, r8
 800cdee:	464b      	mov	r3, r9
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	f7f3 feb2 	bl	8000b5c <__aeabi_dcmpun>
 800cdf8:	b140      	cbz	r0, 800ce0c <_printf_float+0xe0>
 800cdfa:	464b      	mov	r3, r9
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfbc      	itt	lt
 800ce00:	232d      	movlt	r3, #45	@ 0x2d
 800ce02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce06:	4a7e      	ldr	r2, [pc, #504]	@ (800d000 <_printf_float+0x2d4>)
 800ce08:	4b7e      	ldr	r3, [pc, #504]	@ (800d004 <_printf_float+0x2d8>)
 800ce0a:	e7d4      	b.n	800cdb6 <_printf_float+0x8a>
 800ce0c:	6863      	ldr	r3, [r4, #4]
 800ce0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce12:	9206      	str	r2, [sp, #24]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	d13b      	bne.n	800ce90 <_printf_float+0x164>
 800ce18:	2306      	movs	r3, #6
 800ce1a:	6063      	str	r3, [r4, #4]
 800ce1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce20:	2300      	movs	r3, #0
 800ce22:	6022      	str	r2, [r4, #0]
 800ce24:	9303      	str	r3, [sp, #12]
 800ce26:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce28:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce2c:	ab09      	add	r3, sp, #36	@ 0x24
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	6861      	ldr	r1, [r4, #4]
 800ce32:	ec49 8b10 	vmov	d0, r8, r9
 800ce36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f7ff fed6 	bl	800cbec <__cvt>
 800ce40:	9b06      	ldr	r3, [sp, #24]
 800ce42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce44:	2b47      	cmp	r3, #71	@ 0x47
 800ce46:	4680      	mov	r8, r0
 800ce48:	d129      	bne.n	800ce9e <_printf_float+0x172>
 800ce4a:	1cc8      	adds	r0, r1, #3
 800ce4c:	db02      	blt.n	800ce54 <_printf_float+0x128>
 800ce4e:	6863      	ldr	r3, [r4, #4]
 800ce50:	4299      	cmp	r1, r3
 800ce52:	dd41      	ble.n	800ced8 <_printf_float+0x1ac>
 800ce54:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce58:	fa5f fa8a 	uxtb.w	sl, sl
 800ce5c:	3901      	subs	r1, #1
 800ce5e:	4652      	mov	r2, sl
 800ce60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce64:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce66:	f7ff ff26 	bl	800ccb6 <__exponent>
 800ce6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce6c:	1813      	adds	r3, r2, r0
 800ce6e:	2a01      	cmp	r2, #1
 800ce70:	4681      	mov	r9, r0
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	dc02      	bgt.n	800ce7c <_printf_float+0x150>
 800ce76:	6822      	ldr	r2, [r4, #0]
 800ce78:	07d2      	lsls	r2, r2, #31
 800ce7a:	d501      	bpl.n	800ce80 <_printf_float+0x154>
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0a2      	beq.n	800cdce <_printf_float+0xa2>
 800ce88:	232d      	movs	r3, #45	@ 0x2d
 800ce8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce8e:	e79e      	b.n	800cdce <_printf_float+0xa2>
 800ce90:	9a06      	ldr	r2, [sp, #24]
 800ce92:	2a47      	cmp	r2, #71	@ 0x47
 800ce94:	d1c2      	bne.n	800ce1c <_printf_float+0xf0>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1c0      	bne.n	800ce1c <_printf_float+0xf0>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e7bd      	b.n	800ce1a <_printf_float+0xee>
 800ce9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cea2:	d9db      	bls.n	800ce5c <_printf_float+0x130>
 800cea4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cea8:	d118      	bne.n	800cedc <_printf_float+0x1b0>
 800ceaa:	2900      	cmp	r1, #0
 800ceac:	6863      	ldr	r3, [r4, #4]
 800ceae:	dd0b      	ble.n	800cec8 <_printf_float+0x19c>
 800ceb0:	6121      	str	r1, [r4, #16]
 800ceb2:	b913      	cbnz	r3, 800ceba <_printf_float+0x18e>
 800ceb4:	6822      	ldr	r2, [r4, #0]
 800ceb6:	07d0      	lsls	r0, r2, #31
 800ceb8:	d502      	bpl.n	800cec0 <_printf_float+0x194>
 800ceba:	3301      	adds	r3, #1
 800cebc:	440b      	add	r3, r1
 800cebe:	6123      	str	r3, [r4, #16]
 800cec0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cec2:	f04f 0900 	mov.w	r9, #0
 800cec6:	e7db      	b.n	800ce80 <_printf_float+0x154>
 800cec8:	b913      	cbnz	r3, 800ced0 <_printf_float+0x1a4>
 800ceca:	6822      	ldr	r2, [r4, #0]
 800cecc:	07d2      	lsls	r2, r2, #31
 800cece:	d501      	bpl.n	800ced4 <_printf_float+0x1a8>
 800ced0:	3302      	adds	r3, #2
 800ced2:	e7f4      	b.n	800cebe <_printf_float+0x192>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e7f2      	b.n	800cebe <_printf_float+0x192>
 800ced8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cede:	4299      	cmp	r1, r3
 800cee0:	db05      	blt.n	800ceee <_printf_float+0x1c2>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	6121      	str	r1, [r4, #16]
 800cee6:	07d8      	lsls	r0, r3, #31
 800cee8:	d5ea      	bpl.n	800cec0 <_printf_float+0x194>
 800ceea:	1c4b      	adds	r3, r1, #1
 800ceec:	e7e7      	b.n	800cebe <_printf_float+0x192>
 800ceee:	2900      	cmp	r1, #0
 800cef0:	bfd4      	ite	le
 800cef2:	f1c1 0202 	rsble	r2, r1, #2
 800cef6:	2201      	movgt	r2, #1
 800cef8:	4413      	add	r3, r2
 800cefa:	e7e0      	b.n	800cebe <_printf_float+0x192>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	055a      	lsls	r2, r3, #21
 800cf00:	d407      	bmi.n	800cf12 <_printf_float+0x1e6>
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	4642      	mov	r2, r8
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	47b8      	blx	r7
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	d12b      	bne.n	800cf68 <_printf_float+0x23c>
 800cf10:	e767      	b.n	800cde2 <_printf_float+0xb6>
 800cf12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf16:	f240 80dd 	bls.w	800d0d4 <_printf_float+0x3a8>
 800cf1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2300      	movs	r3, #0
 800cf22:	f7f3 fde9 	bl	8000af8 <__aeabi_dcmpeq>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d033      	beq.n	800cf92 <_printf_float+0x266>
 800cf2a:	4a37      	ldr	r2, [pc, #220]	@ (800d008 <_printf_float+0x2dc>)
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	4631      	mov	r1, r6
 800cf30:	4628      	mov	r0, r5
 800cf32:	47b8      	blx	r7
 800cf34:	3001      	adds	r0, #1
 800cf36:	f43f af54 	beq.w	800cde2 <_printf_float+0xb6>
 800cf3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf3e:	4543      	cmp	r3, r8
 800cf40:	db02      	blt.n	800cf48 <_printf_float+0x21c>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	07d8      	lsls	r0, r3, #31
 800cf46:	d50f      	bpl.n	800cf68 <_printf_float+0x23c>
 800cf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	f43f af45 	beq.w	800cde2 <_printf_float+0xb6>
 800cf58:	f04f 0900 	mov.w	r9, #0
 800cf5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf60:	f104 0a1a 	add.w	sl, r4, #26
 800cf64:	45c8      	cmp	r8, r9
 800cf66:	dc09      	bgt.n	800cf7c <_printf_float+0x250>
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	079b      	lsls	r3, r3, #30
 800cf6c:	f100 8103 	bmi.w	800d176 <_printf_float+0x44a>
 800cf70:	68e0      	ldr	r0, [r4, #12]
 800cf72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf74:	4298      	cmp	r0, r3
 800cf76:	bfb8      	it	lt
 800cf78:	4618      	movlt	r0, r3
 800cf7a:	e734      	b.n	800cde6 <_printf_float+0xba>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	4652      	mov	r2, sl
 800cf80:	4631      	mov	r1, r6
 800cf82:	4628      	mov	r0, r5
 800cf84:	47b8      	blx	r7
 800cf86:	3001      	adds	r0, #1
 800cf88:	f43f af2b 	beq.w	800cde2 <_printf_float+0xb6>
 800cf8c:	f109 0901 	add.w	r9, r9, #1
 800cf90:	e7e8      	b.n	800cf64 <_printf_float+0x238>
 800cf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dc39      	bgt.n	800d00c <_printf_float+0x2e0>
 800cf98:	4a1b      	ldr	r2, [pc, #108]	@ (800d008 <_printf_float+0x2dc>)
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f af1d 	beq.w	800cde2 <_printf_float+0xb6>
 800cfa8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfac:	ea59 0303 	orrs.w	r3, r9, r3
 800cfb0:	d102      	bne.n	800cfb8 <_printf_float+0x28c>
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	07d9      	lsls	r1, r3, #31
 800cfb6:	d5d7      	bpl.n	800cf68 <_printf_float+0x23c>
 800cfb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b8      	blx	r7
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	f43f af0d 	beq.w	800cde2 <_printf_float+0xb6>
 800cfc8:	f04f 0a00 	mov.w	sl, #0
 800cfcc:	f104 0b1a 	add.w	fp, r4, #26
 800cfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd2:	425b      	negs	r3, r3
 800cfd4:	4553      	cmp	r3, sl
 800cfd6:	dc01      	bgt.n	800cfdc <_printf_float+0x2b0>
 800cfd8:	464b      	mov	r3, r9
 800cfda:	e793      	b.n	800cf04 <_printf_float+0x1d8>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	465a      	mov	r2, fp
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f aefb 	beq.w	800cde2 <_printf_float+0xb6>
 800cfec:	f10a 0a01 	add.w	sl, sl, #1
 800cff0:	e7ee      	b.n	800cfd0 <_printf_float+0x2a4>
 800cff2:	bf00      	nop
 800cff4:	7fefffff 	.word	0x7fefffff
 800cff8:	08010fdf 	.word	0x08010fdf
 800cffc:	08010fe3 	.word	0x08010fe3
 800d000:	08010fe7 	.word	0x08010fe7
 800d004:	08010feb 	.word	0x08010feb
 800d008:	08010fef 	.word	0x08010fef
 800d00c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d00e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d012:	4553      	cmp	r3, sl
 800d014:	bfa8      	it	ge
 800d016:	4653      	movge	r3, sl
 800d018:	2b00      	cmp	r3, #0
 800d01a:	4699      	mov	r9, r3
 800d01c:	dc36      	bgt.n	800d08c <_printf_float+0x360>
 800d01e:	f04f 0b00 	mov.w	fp, #0
 800d022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d026:	f104 021a 	add.w	r2, r4, #26
 800d02a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d02c:	9306      	str	r3, [sp, #24]
 800d02e:	eba3 0309 	sub.w	r3, r3, r9
 800d032:	455b      	cmp	r3, fp
 800d034:	dc31      	bgt.n	800d09a <_printf_float+0x36e>
 800d036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d038:	459a      	cmp	sl, r3
 800d03a:	dc3a      	bgt.n	800d0b2 <_printf_float+0x386>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	07da      	lsls	r2, r3, #31
 800d040:	d437      	bmi.n	800d0b2 <_printf_float+0x386>
 800d042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d044:	ebaa 0903 	sub.w	r9, sl, r3
 800d048:	9b06      	ldr	r3, [sp, #24]
 800d04a:	ebaa 0303 	sub.w	r3, sl, r3
 800d04e:	4599      	cmp	r9, r3
 800d050:	bfa8      	it	ge
 800d052:	4699      	movge	r9, r3
 800d054:	f1b9 0f00 	cmp.w	r9, #0
 800d058:	dc33      	bgt.n	800d0c2 <_printf_float+0x396>
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d062:	f104 0b1a 	add.w	fp, r4, #26
 800d066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d068:	ebaa 0303 	sub.w	r3, sl, r3
 800d06c:	eba3 0309 	sub.w	r3, r3, r9
 800d070:	4543      	cmp	r3, r8
 800d072:	f77f af79 	ble.w	800cf68 <_printf_float+0x23c>
 800d076:	2301      	movs	r3, #1
 800d078:	465a      	mov	r2, fp
 800d07a:	4631      	mov	r1, r6
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b8      	blx	r7
 800d080:	3001      	adds	r0, #1
 800d082:	f43f aeae 	beq.w	800cde2 <_printf_float+0xb6>
 800d086:	f108 0801 	add.w	r8, r8, #1
 800d08a:	e7ec      	b.n	800d066 <_printf_float+0x33a>
 800d08c:	4642      	mov	r2, r8
 800d08e:	4631      	mov	r1, r6
 800d090:	4628      	mov	r0, r5
 800d092:	47b8      	blx	r7
 800d094:	3001      	adds	r0, #1
 800d096:	d1c2      	bne.n	800d01e <_printf_float+0x2f2>
 800d098:	e6a3      	b.n	800cde2 <_printf_float+0xb6>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	9206      	str	r2, [sp, #24]
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	f43f ae9c 	beq.w	800cde2 <_printf_float+0xb6>
 800d0aa:	9a06      	ldr	r2, [sp, #24]
 800d0ac:	f10b 0b01 	add.w	fp, fp, #1
 800d0b0:	e7bb      	b.n	800d02a <_printf_float+0x2fe>
 800d0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d1c0      	bne.n	800d042 <_printf_float+0x316>
 800d0c0:	e68f      	b.n	800cde2 <_printf_float+0xb6>
 800d0c2:	9a06      	ldr	r2, [sp, #24]
 800d0c4:	464b      	mov	r3, r9
 800d0c6:	4442      	add	r2, r8
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d1c3      	bne.n	800d05a <_printf_float+0x32e>
 800d0d2:	e686      	b.n	800cde2 <_printf_float+0xb6>
 800d0d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0d8:	f1ba 0f01 	cmp.w	sl, #1
 800d0dc:	dc01      	bgt.n	800d0e2 <_printf_float+0x3b6>
 800d0de:	07db      	lsls	r3, r3, #31
 800d0e0:	d536      	bpl.n	800d150 <_printf_float+0x424>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4642      	mov	r2, r8
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b8      	blx	r7
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	f43f ae78 	beq.w	800cde2 <_printf_float+0xb6>
 800d0f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	47b8      	blx	r7
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	f43f ae70 	beq.w	800cde2 <_printf_float+0xb6>
 800d102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d106:	2200      	movs	r2, #0
 800d108:	2300      	movs	r3, #0
 800d10a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d10e:	f7f3 fcf3 	bl	8000af8 <__aeabi_dcmpeq>
 800d112:	b9c0      	cbnz	r0, 800d146 <_printf_float+0x41a>
 800d114:	4653      	mov	r3, sl
 800d116:	f108 0201 	add.w	r2, r8, #1
 800d11a:	4631      	mov	r1, r6
 800d11c:	4628      	mov	r0, r5
 800d11e:	47b8      	blx	r7
 800d120:	3001      	adds	r0, #1
 800d122:	d10c      	bne.n	800d13e <_printf_float+0x412>
 800d124:	e65d      	b.n	800cde2 <_printf_float+0xb6>
 800d126:	2301      	movs	r3, #1
 800d128:	465a      	mov	r2, fp
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f ae56 	beq.w	800cde2 <_printf_float+0xb6>
 800d136:	f108 0801 	add.w	r8, r8, #1
 800d13a:	45d0      	cmp	r8, sl
 800d13c:	dbf3      	blt.n	800d126 <_printf_float+0x3fa>
 800d13e:	464b      	mov	r3, r9
 800d140:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d144:	e6df      	b.n	800cf06 <_printf_float+0x1da>
 800d146:	f04f 0800 	mov.w	r8, #0
 800d14a:	f104 0b1a 	add.w	fp, r4, #26
 800d14e:	e7f4      	b.n	800d13a <_printf_float+0x40e>
 800d150:	2301      	movs	r3, #1
 800d152:	4642      	mov	r2, r8
 800d154:	e7e1      	b.n	800d11a <_printf_float+0x3ee>
 800d156:	2301      	movs	r3, #1
 800d158:	464a      	mov	r2, r9
 800d15a:	4631      	mov	r1, r6
 800d15c:	4628      	mov	r0, r5
 800d15e:	47b8      	blx	r7
 800d160:	3001      	adds	r0, #1
 800d162:	f43f ae3e 	beq.w	800cde2 <_printf_float+0xb6>
 800d166:	f108 0801 	add.w	r8, r8, #1
 800d16a:	68e3      	ldr	r3, [r4, #12]
 800d16c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d16e:	1a5b      	subs	r3, r3, r1
 800d170:	4543      	cmp	r3, r8
 800d172:	dcf0      	bgt.n	800d156 <_printf_float+0x42a>
 800d174:	e6fc      	b.n	800cf70 <_printf_float+0x244>
 800d176:	f04f 0800 	mov.w	r8, #0
 800d17a:	f104 0919 	add.w	r9, r4, #25
 800d17e:	e7f4      	b.n	800d16a <_printf_float+0x43e>

0800d180 <_printf_common>:
 800d180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d184:	4616      	mov	r6, r2
 800d186:	4698      	mov	r8, r3
 800d188:	688a      	ldr	r2, [r1, #8]
 800d18a:	690b      	ldr	r3, [r1, #16]
 800d18c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d190:	4293      	cmp	r3, r2
 800d192:	bfb8      	it	lt
 800d194:	4613      	movlt	r3, r2
 800d196:	6033      	str	r3, [r6, #0]
 800d198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d19c:	4607      	mov	r7, r0
 800d19e:	460c      	mov	r4, r1
 800d1a0:	b10a      	cbz	r2, 800d1a6 <_printf_common+0x26>
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	6033      	str	r3, [r6, #0]
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	0699      	lsls	r1, r3, #26
 800d1aa:	bf42      	ittt	mi
 800d1ac:	6833      	ldrmi	r3, [r6, #0]
 800d1ae:	3302      	addmi	r3, #2
 800d1b0:	6033      	strmi	r3, [r6, #0]
 800d1b2:	6825      	ldr	r5, [r4, #0]
 800d1b4:	f015 0506 	ands.w	r5, r5, #6
 800d1b8:	d106      	bne.n	800d1c8 <_printf_common+0x48>
 800d1ba:	f104 0a19 	add.w	sl, r4, #25
 800d1be:	68e3      	ldr	r3, [r4, #12]
 800d1c0:	6832      	ldr	r2, [r6, #0]
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	42ab      	cmp	r3, r5
 800d1c6:	dc26      	bgt.n	800d216 <_printf_common+0x96>
 800d1c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1cc:	6822      	ldr	r2, [r4, #0]
 800d1ce:	3b00      	subs	r3, #0
 800d1d0:	bf18      	it	ne
 800d1d2:	2301      	movne	r3, #1
 800d1d4:	0692      	lsls	r2, r2, #26
 800d1d6:	d42b      	bmi.n	800d230 <_printf_common+0xb0>
 800d1d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1dc:	4641      	mov	r1, r8
 800d1de:	4638      	mov	r0, r7
 800d1e0:	47c8      	blx	r9
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	d01e      	beq.n	800d224 <_printf_common+0xa4>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	6922      	ldr	r2, [r4, #16]
 800d1ea:	f003 0306 	and.w	r3, r3, #6
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	bf02      	ittt	eq
 800d1f2:	68e5      	ldreq	r5, [r4, #12]
 800d1f4:	6833      	ldreq	r3, [r6, #0]
 800d1f6:	1aed      	subeq	r5, r5, r3
 800d1f8:	68a3      	ldr	r3, [r4, #8]
 800d1fa:	bf0c      	ite	eq
 800d1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d200:	2500      	movne	r5, #0
 800d202:	4293      	cmp	r3, r2
 800d204:	bfc4      	itt	gt
 800d206:	1a9b      	subgt	r3, r3, r2
 800d208:	18ed      	addgt	r5, r5, r3
 800d20a:	2600      	movs	r6, #0
 800d20c:	341a      	adds	r4, #26
 800d20e:	42b5      	cmp	r5, r6
 800d210:	d11a      	bne.n	800d248 <_printf_common+0xc8>
 800d212:	2000      	movs	r0, #0
 800d214:	e008      	b.n	800d228 <_printf_common+0xa8>
 800d216:	2301      	movs	r3, #1
 800d218:	4652      	mov	r2, sl
 800d21a:	4641      	mov	r1, r8
 800d21c:	4638      	mov	r0, r7
 800d21e:	47c8      	blx	r9
 800d220:	3001      	adds	r0, #1
 800d222:	d103      	bne.n	800d22c <_printf_common+0xac>
 800d224:	f04f 30ff 	mov.w	r0, #4294967295
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22c:	3501      	adds	r5, #1
 800d22e:	e7c6      	b.n	800d1be <_printf_common+0x3e>
 800d230:	18e1      	adds	r1, r4, r3
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	2030      	movs	r0, #48	@ 0x30
 800d236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d23a:	4422      	add	r2, r4
 800d23c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d244:	3302      	adds	r3, #2
 800d246:	e7c7      	b.n	800d1d8 <_printf_common+0x58>
 800d248:	2301      	movs	r3, #1
 800d24a:	4622      	mov	r2, r4
 800d24c:	4641      	mov	r1, r8
 800d24e:	4638      	mov	r0, r7
 800d250:	47c8      	blx	r9
 800d252:	3001      	adds	r0, #1
 800d254:	d0e6      	beq.n	800d224 <_printf_common+0xa4>
 800d256:	3601      	adds	r6, #1
 800d258:	e7d9      	b.n	800d20e <_printf_common+0x8e>
	...

0800d25c <_printf_i>:
 800d25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d260:	7e0f      	ldrb	r7, [r1, #24]
 800d262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d264:	2f78      	cmp	r7, #120	@ 0x78
 800d266:	4691      	mov	r9, r2
 800d268:	4680      	mov	r8, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	469a      	mov	sl, r3
 800d26e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d272:	d807      	bhi.n	800d284 <_printf_i+0x28>
 800d274:	2f62      	cmp	r7, #98	@ 0x62
 800d276:	d80a      	bhi.n	800d28e <_printf_i+0x32>
 800d278:	2f00      	cmp	r7, #0
 800d27a:	f000 80d2 	beq.w	800d422 <_printf_i+0x1c6>
 800d27e:	2f58      	cmp	r7, #88	@ 0x58
 800d280:	f000 80b9 	beq.w	800d3f6 <_printf_i+0x19a>
 800d284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d28c:	e03a      	b.n	800d304 <_printf_i+0xa8>
 800d28e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d292:	2b15      	cmp	r3, #21
 800d294:	d8f6      	bhi.n	800d284 <_printf_i+0x28>
 800d296:	a101      	add	r1, pc, #4	@ (adr r1, 800d29c <_printf_i+0x40>)
 800d298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d29c:	0800d2f5 	.word	0x0800d2f5
 800d2a0:	0800d309 	.word	0x0800d309
 800d2a4:	0800d285 	.word	0x0800d285
 800d2a8:	0800d285 	.word	0x0800d285
 800d2ac:	0800d285 	.word	0x0800d285
 800d2b0:	0800d285 	.word	0x0800d285
 800d2b4:	0800d309 	.word	0x0800d309
 800d2b8:	0800d285 	.word	0x0800d285
 800d2bc:	0800d285 	.word	0x0800d285
 800d2c0:	0800d285 	.word	0x0800d285
 800d2c4:	0800d285 	.word	0x0800d285
 800d2c8:	0800d409 	.word	0x0800d409
 800d2cc:	0800d333 	.word	0x0800d333
 800d2d0:	0800d3c3 	.word	0x0800d3c3
 800d2d4:	0800d285 	.word	0x0800d285
 800d2d8:	0800d285 	.word	0x0800d285
 800d2dc:	0800d42b 	.word	0x0800d42b
 800d2e0:	0800d285 	.word	0x0800d285
 800d2e4:	0800d333 	.word	0x0800d333
 800d2e8:	0800d285 	.word	0x0800d285
 800d2ec:	0800d285 	.word	0x0800d285
 800d2f0:	0800d3cb 	.word	0x0800d3cb
 800d2f4:	6833      	ldr	r3, [r6, #0]
 800d2f6:	1d1a      	adds	r2, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6032      	str	r2, [r6, #0]
 800d2fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d304:	2301      	movs	r3, #1
 800d306:	e09d      	b.n	800d444 <_printf_i+0x1e8>
 800d308:	6833      	ldr	r3, [r6, #0]
 800d30a:	6820      	ldr	r0, [r4, #0]
 800d30c:	1d19      	adds	r1, r3, #4
 800d30e:	6031      	str	r1, [r6, #0]
 800d310:	0606      	lsls	r6, r0, #24
 800d312:	d501      	bpl.n	800d318 <_printf_i+0xbc>
 800d314:	681d      	ldr	r5, [r3, #0]
 800d316:	e003      	b.n	800d320 <_printf_i+0xc4>
 800d318:	0645      	lsls	r5, r0, #25
 800d31a:	d5fb      	bpl.n	800d314 <_printf_i+0xb8>
 800d31c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d320:	2d00      	cmp	r5, #0
 800d322:	da03      	bge.n	800d32c <_printf_i+0xd0>
 800d324:	232d      	movs	r3, #45	@ 0x2d
 800d326:	426d      	negs	r5, r5
 800d328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d32c:	4859      	ldr	r0, [pc, #356]	@ (800d494 <_printf_i+0x238>)
 800d32e:	230a      	movs	r3, #10
 800d330:	e011      	b.n	800d356 <_printf_i+0xfa>
 800d332:	6821      	ldr	r1, [r4, #0]
 800d334:	6833      	ldr	r3, [r6, #0]
 800d336:	0608      	lsls	r0, r1, #24
 800d338:	f853 5b04 	ldr.w	r5, [r3], #4
 800d33c:	d402      	bmi.n	800d344 <_printf_i+0xe8>
 800d33e:	0649      	lsls	r1, r1, #25
 800d340:	bf48      	it	mi
 800d342:	b2ad      	uxthmi	r5, r5
 800d344:	2f6f      	cmp	r7, #111	@ 0x6f
 800d346:	4853      	ldr	r0, [pc, #332]	@ (800d494 <_printf_i+0x238>)
 800d348:	6033      	str	r3, [r6, #0]
 800d34a:	bf14      	ite	ne
 800d34c:	230a      	movne	r3, #10
 800d34e:	2308      	moveq	r3, #8
 800d350:	2100      	movs	r1, #0
 800d352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d356:	6866      	ldr	r6, [r4, #4]
 800d358:	60a6      	str	r6, [r4, #8]
 800d35a:	2e00      	cmp	r6, #0
 800d35c:	bfa2      	ittt	ge
 800d35e:	6821      	ldrge	r1, [r4, #0]
 800d360:	f021 0104 	bicge.w	r1, r1, #4
 800d364:	6021      	strge	r1, [r4, #0]
 800d366:	b90d      	cbnz	r5, 800d36c <_printf_i+0x110>
 800d368:	2e00      	cmp	r6, #0
 800d36a:	d04b      	beq.n	800d404 <_printf_i+0x1a8>
 800d36c:	4616      	mov	r6, r2
 800d36e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d372:	fb03 5711 	mls	r7, r3, r1, r5
 800d376:	5dc7      	ldrb	r7, [r0, r7]
 800d378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d37c:	462f      	mov	r7, r5
 800d37e:	42bb      	cmp	r3, r7
 800d380:	460d      	mov	r5, r1
 800d382:	d9f4      	bls.n	800d36e <_printf_i+0x112>
 800d384:	2b08      	cmp	r3, #8
 800d386:	d10b      	bne.n	800d3a0 <_printf_i+0x144>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	07df      	lsls	r7, r3, #31
 800d38c:	d508      	bpl.n	800d3a0 <_printf_i+0x144>
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	4299      	cmp	r1, r3
 800d394:	bfde      	ittt	le
 800d396:	2330      	movle	r3, #48	@ 0x30
 800d398:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d39c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3a0:	1b92      	subs	r2, r2, r6
 800d3a2:	6122      	str	r2, [r4, #16]
 800d3a4:	f8cd a000 	str.w	sl, [sp]
 800d3a8:	464b      	mov	r3, r9
 800d3aa:	aa03      	add	r2, sp, #12
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7ff fee6 	bl	800d180 <_printf_common>
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d14a      	bne.n	800d44e <_printf_i+0x1f2>
 800d3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3bc:	b004      	add	sp, #16
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	f043 0320 	orr.w	r3, r3, #32
 800d3c8:	6023      	str	r3, [r4, #0]
 800d3ca:	4833      	ldr	r0, [pc, #204]	@ (800d498 <_printf_i+0x23c>)
 800d3cc:	2778      	movs	r7, #120	@ 0x78
 800d3ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	6831      	ldr	r1, [r6, #0]
 800d3d6:	061f      	lsls	r7, r3, #24
 800d3d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3dc:	d402      	bmi.n	800d3e4 <_printf_i+0x188>
 800d3de:	065f      	lsls	r7, r3, #25
 800d3e0:	bf48      	it	mi
 800d3e2:	b2ad      	uxthmi	r5, r5
 800d3e4:	6031      	str	r1, [r6, #0]
 800d3e6:	07d9      	lsls	r1, r3, #31
 800d3e8:	bf44      	itt	mi
 800d3ea:	f043 0320 	orrmi.w	r3, r3, #32
 800d3ee:	6023      	strmi	r3, [r4, #0]
 800d3f0:	b11d      	cbz	r5, 800d3fa <_printf_i+0x19e>
 800d3f2:	2310      	movs	r3, #16
 800d3f4:	e7ac      	b.n	800d350 <_printf_i+0xf4>
 800d3f6:	4827      	ldr	r0, [pc, #156]	@ (800d494 <_printf_i+0x238>)
 800d3f8:	e7e9      	b.n	800d3ce <_printf_i+0x172>
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	f023 0320 	bic.w	r3, r3, #32
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	e7f6      	b.n	800d3f2 <_printf_i+0x196>
 800d404:	4616      	mov	r6, r2
 800d406:	e7bd      	b.n	800d384 <_printf_i+0x128>
 800d408:	6833      	ldr	r3, [r6, #0]
 800d40a:	6825      	ldr	r5, [r4, #0]
 800d40c:	6961      	ldr	r1, [r4, #20]
 800d40e:	1d18      	adds	r0, r3, #4
 800d410:	6030      	str	r0, [r6, #0]
 800d412:	062e      	lsls	r6, r5, #24
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	d501      	bpl.n	800d41c <_printf_i+0x1c0>
 800d418:	6019      	str	r1, [r3, #0]
 800d41a:	e002      	b.n	800d422 <_printf_i+0x1c6>
 800d41c:	0668      	lsls	r0, r5, #25
 800d41e:	d5fb      	bpl.n	800d418 <_printf_i+0x1bc>
 800d420:	8019      	strh	r1, [r3, #0]
 800d422:	2300      	movs	r3, #0
 800d424:	6123      	str	r3, [r4, #16]
 800d426:	4616      	mov	r6, r2
 800d428:	e7bc      	b.n	800d3a4 <_printf_i+0x148>
 800d42a:	6833      	ldr	r3, [r6, #0]
 800d42c:	1d1a      	adds	r2, r3, #4
 800d42e:	6032      	str	r2, [r6, #0]
 800d430:	681e      	ldr	r6, [r3, #0]
 800d432:	6862      	ldr	r2, [r4, #4]
 800d434:	2100      	movs	r1, #0
 800d436:	4630      	mov	r0, r6
 800d438:	f7f2 fee2 	bl	8000200 <memchr>
 800d43c:	b108      	cbz	r0, 800d442 <_printf_i+0x1e6>
 800d43e:	1b80      	subs	r0, r0, r6
 800d440:	6060      	str	r0, [r4, #4]
 800d442:	6863      	ldr	r3, [r4, #4]
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	2300      	movs	r3, #0
 800d448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d44c:	e7aa      	b.n	800d3a4 <_printf_i+0x148>
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	4632      	mov	r2, r6
 800d452:	4649      	mov	r1, r9
 800d454:	4640      	mov	r0, r8
 800d456:	47d0      	blx	sl
 800d458:	3001      	adds	r0, #1
 800d45a:	d0ad      	beq.n	800d3b8 <_printf_i+0x15c>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	079b      	lsls	r3, r3, #30
 800d460:	d413      	bmi.n	800d48a <_printf_i+0x22e>
 800d462:	68e0      	ldr	r0, [r4, #12]
 800d464:	9b03      	ldr	r3, [sp, #12]
 800d466:	4298      	cmp	r0, r3
 800d468:	bfb8      	it	lt
 800d46a:	4618      	movlt	r0, r3
 800d46c:	e7a6      	b.n	800d3bc <_printf_i+0x160>
 800d46e:	2301      	movs	r3, #1
 800d470:	4632      	mov	r2, r6
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d09d      	beq.n	800d3b8 <_printf_i+0x15c>
 800d47c:	3501      	adds	r5, #1
 800d47e:	68e3      	ldr	r3, [r4, #12]
 800d480:	9903      	ldr	r1, [sp, #12]
 800d482:	1a5b      	subs	r3, r3, r1
 800d484:	42ab      	cmp	r3, r5
 800d486:	dcf2      	bgt.n	800d46e <_printf_i+0x212>
 800d488:	e7eb      	b.n	800d462 <_printf_i+0x206>
 800d48a:	2500      	movs	r5, #0
 800d48c:	f104 0619 	add.w	r6, r4, #25
 800d490:	e7f5      	b.n	800d47e <_printf_i+0x222>
 800d492:	bf00      	nop
 800d494:	08010ff1 	.word	0x08010ff1
 800d498:	08011002 	.word	0x08011002

0800d49c <std>:
 800d49c:	2300      	movs	r3, #0
 800d49e:	b510      	push	{r4, lr}
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4aa:	6083      	str	r3, [r0, #8]
 800d4ac:	8181      	strh	r1, [r0, #12]
 800d4ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4b0:	81c2      	strh	r2, [r0, #14]
 800d4b2:	6183      	str	r3, [r0, #24]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	2208      	movs	r2, #8
 800d4b8:	305c      	adds	r0, #92	@ 0x5c
 800d4ba:	f000 fa19 	bl	800d8f0 <memset>
 800d4be:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f4 <std+0x58>)
 800d4c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f8 <std+0x5c>)
 800d4c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d4fc <std+0x60>)
 800d4c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d500 <std+0x64>)
 800d4cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <std+0x68>)
 800d4d0:	6224      	str	r4, [r4, #32]
 800d4d2:	429c      	cmp	r4, r3
 800d4d4:	d006      	beq.n	800d4e4 <std+0x48>
 800d4d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d4da:	4294      	cmp	r4, r2
 800d4dc:	d002      	beq.n	800d4e4 <std+0x48>
 800d4de:	33d0      	adds	r3, #208	@ 0xd0
 800d4e0:	429c      	cmp	r4, r3
 800d4e2:	d105      	bne.n	800d4f0 <std+0x54>
 800d4e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ec:	f000 ba7c 	b.w	800d9e8 <__retarget_lock_init_recursive>
 800d4f0:	bd10      	pop	{r4, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0800d741 	.word	0x0800d741
 800d4f8:	0800d763 	.word	0x0800d763
 800d4fc:	0800d79b 	.word	0x0800d79b
 800d500:	0800d7bf 	.word	0x0800d7bf
 800d504:	200017dc 	.word	0x200017dc

0800d508 <stdio_exit_handler>:
 800d508:	4a02      	ldr	r2, [pc, #8]	@ (800d514 <stdio_exit_handler+0xc>)
 800d50a:	4903      	ldr	r1, [pc, #12]	@ (800d518 <stdio_exit_handler+0x10>)
 800d50c:	4803      	ldr	r0, [pc, #12]	@ (800d51c <stdio_exit_handler+0x14>)
 800d50e:	f000 b869 	b.w	800d5e4 <_fwalk_sglue>
 800d512:	bf00      	nop
 800d514:	20000058 	.word	0x20000058
 800d518:	0800f619 	.word	0x0800f619
 800d51c:	20000068 	.word	0x20000068

0800d520 <cleanup_stdio>:
 800d520:	6841      	ldr	r1, [r0, #4]
 800d522:	4b0c      	ldr	r3, [pc, #48]	@ (800d554 <cleanup_stdio+0x34>)
 800d524:	4299      	cmp	r1, r3
 800d526:	b510      	push	{r4, lr}
 800d528:	4604      	mov	r4, r0
 800d52a:	d001      	beq.n	800d530 <cleanup_stdio+0x10>
 800d52c:	f002 f874 	bl	800f618 <_fflush_r>
 800d530:	68a1      	ldr	r1, [r4, #8]
 800d532:	4b09      	ldr	r3, [pc, #36]	@ (800d558 <cleanup_stdio+0x38>)
 800d534:	4299      	cmp	r1, r3
 800d536:	d002      	beq.n	800d53e <cleanup_stdio+0x1e>
 800d538:	4620      	mov	r0, r4
 800d53a:	f002 f86d 	bl	800f618 <_fflush_r>
 800d53e:	68e1      	ldr	r1, [r4, #12]
 800d540:	4b06      	ldr	r3, [pc, #24]	@ (800d55c <cleanup_stdio+0x3c>)
 800d542:	4299      	cmp	r1, r3
 800d544:	d004      	beq.n	800d550 <cleanup_stdio+0x30>
 800d546:	4620      	mov	r0, r4
 800d548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d54c:	f002 b864 	b.w	800f618 <_fflush_r>
 800d550:	bd10      	pop	{r4, pc}
 800d552:	bf00      	nop
 800d554:	200017dc 	.word	0x200017dc
 800d558:	20001844 	.word	0x20001844
 800d55c:	200018ac 	.word	0x200018ac

0800d560 <global_stdio_init.part.0>:
 800d560:	b510      	push	{r4, lr}
 800d562:	4b0b      	ldr	r3, [pc, #44]	@ (800d590 <global_stdio_init.part.0+0x30>)
 800d564:	4c0b      	ldr	r4, [pc, #44]	@ (800d594 <global_stdio_init.part.0+0x34>)
 800d566:	4a0c      	ldr	r2, [pc, #48]	@ (800d598 <global_stdio_init.part.0+0x38>)
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	4620      	mov	r0, r4
 800d56c:	2200      	movs	r2, #0
 800d56e:	2104      	movs	r1, #4
 800d570:	f7ff ff94 	bl	800d49c <std>
 800d574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d578:	2201      	movs	r2, #1
 800d57a:	2109      	movs	r1, #9
 800d57c:	f7ff ff8e 	bl	800d49c <std>
 800d580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d584:	2202      	movs	r2, #2
 800d586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d58a:	2112      	movs	r1, #18
 800d58c:	f7ff bf86 	b.w	800d49c <std>
 800d590:	20001914 	.word	0x20001914
 800d594:	200017dc 	.word	0x200017dc
 800d598:	0800d509 	.word	0x0800d509

0800d59c <__sfp_lock_acquire>:
 800d59c:	4801      	ldr	r0, [pc, #4]	@ (800d5a4 <__sfp_lock_acquire+0x8>)
 800d59e:	f000 ba24 	b.w	800d9ea <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	2000191d 	.word	0x2000191d

0800d5a8 <__sfp_lock_release>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	@ (800d5b0 <__sfp_lock_release+0x8>)
 800d5aa:	f000 ba1f 	b.w	800d9ec <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	2000191d 	.word	0x2000191d

0800d5b4 <__sinit>:
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	f7ff fff0 	bl	800d59c <__sfp_lock_acquire>
 800d5bc:	6a23      	ldr	r3, [r4, #32]
 800d5be:	b11b      	cbz	r3, 800d5c8 <__sinit+0x14>
 800d5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5c4:	f7ff bff0 	b.w	800d5a8 <__sfp_lock_release>
 800d5c8:	4b04      	ldr	r3, [pc, #16]	@ (800d5dc <__sinit+0x28>)
 800d5ca:	6223      	str	r3, [r4, #32]
 800d5cc:	4b04      	ldr	r3, [pc, #16]	@ (800d5e0 <__sinit+0x2c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1f5      	bne.n	800d5c0 <__sinit+0xc>
 800d5d4:	f7ff ffc4 	bl	800d560 <global_stdio_init.part.0>
 800d5d8:	e7f2      	b.n	800d5c0 <__sinit+0xc>
 800d5da:	bf00      	nop
 800d5dc:	0800d521 	.word	0x0800d521
 800d5e0:	20001914 	.word	0x20001914

0800d5e4 <_fwalk_sglue>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	4688      	mov	r8, r1
 800d5ec:	4614      	mov	r4, r2
 800d5ee:	2600      	movs	r6, #0
 800d5f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5f4:	f1b9 0901 	subs.w	r9, r9, #1
 800d5f8:	d505      	bpl.n	800d606 <_fwalk_sglue+0x22>
 800d5fa:	6824      	ldr	r4, [r4, #0]
 800d5fc:	2c00      	cmp	r4, #0
 800d5fe:	d1f7      	bne.n	800d5f0 <_fwalk_sglue+0xc>
 800d600:	4630      	mov	r0, r6
 800d602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d606:	89ab      	ldrh	r3, [r5, #12]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d907      	bls.n	800d61c <_fwalk_sglue+0x38>
 800d60c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d610:	3301      	adds	r3, #1
 800d612:	d003      	beq.n	800d61c <_fwalk_sglue+0x38>
 800d614:	4629      	mov	r1, r5
 800d616:	4638      	mov	r0, r7
 800d618:	47c0      	blx	r8
 800d61a:	4306      	orrs	r6, r0
 800d61c:	3568      	adds	r5, #104	@ 0x68
 800d61e:	e7e9      	b.n	800d5f4 <_fwalk_sglue+0x10>

0800d620 <iprintf>:
 800d620:	b40f      	push	{r0, r1, r2, r3}
 800d622:	b507      	push	{r0, r1, r2, lr}
 800d624:	4906      	ldr	r1, [pc, #24]	@ (800d640 <iprintf+0x20>)
 800d626:	ab04      	add	r3, sp, #16
 800d628:	6808      	ldr	r0, [r1, #0]
 800d62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d62e:	6881      	ldr	r1, [r0, #8]
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	f001 fe55 	bl	800f2e0 <_vfiprintf_r>
 800d636:	b003      	add	sp, #12
 800d638:	f85d eb04 	ldr.w	lr, [sp], #4
 800d63c:	b004      	add	sp, #16
 800d63e:	4770      	bx	lr
 800d640:	20000064 	.word	0x20000064

0800d644 <_puts_r>:
 800d644:	6a03      	ldr	r3, [r0, #32]
 800d646:	b570      	push	{r4, r5, r6, lr}
 800d648:	6884      	ldr	r4, [r0, #8]
 800d64a:	4605      	mov	r5, r0
 800d64c:	460e      	mov	r6, r1
 800d64e:	b90b      	cbnz	r3, 800d654 <_puts_r+0x10>
 800d650:	f7ff ffb0 	bl	800d5b4 <__sinit>
 800d654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d656:	07db      	lsls	r3, r3, #31
 800d658:	d405      	bmi.n	800d666 <_puts_r+0x22>
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	0598      	lsls	r0, r3, #22
 800d65e:	d402      	bmi.n	800d666 <_puts_r+0x22>
 800d660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d662:	f000 f9c2 	bl	800d9ea <__retarget_lock_acquire_recursive>
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	0719      	lsls	r1, r3, #28
 800d66a:	d502      	bpl.n	800d672 <_puts_r+0x2e>
 800d66c:	6923      	ldr	r3, [r4, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d135      	bne.n	800d6de <_puts_r+0x9a>
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f000 f8e5 	bl	800d844 <__swsetup_r>
 800d67a:	b380      	cbz	r0, 800d6de <_puts_r+0x9a>
 800d67c:	f04f 35ff 	mov.w	r5, #4294967295
 800d680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d682:	07da      	lsls	r2, r3, #31
 800d684:	d405      	bmi.n	800d692 <_puts_r+0x4e>
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	059b      	lsls	r3, r3, #22
 800d68a:	d402      	bmi.n	800d692 <_puts_r+0x4e>
 800d68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d68e:	f000 f9ad 	bl	800d9ec <__retarget_lock_release_recursive>
 800d692:	4628      	mov	r0, r5
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	2b00      	cmp	r3, #0
 800d698:	da04      	bge.n	800d6a4 <_puts_r+0x60>
 800d69a:	69a2      	ldr	r2, [r4, #24]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	dc17      	bgt.n	800d6d0 <_puts_r+0x8c>
 800d6a0:	290a      	cmp	r1, #10
 800d6a2:	d015      	beq.n	800d6d0 <_puts_r+0x8c>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	6022      	str	r2, [r4, #0]
 800d6aa:	7019      	strb	r1, [r3, #0]
 800d6ac:	68a3      	ldr	r3, [r4, #8]
 800d6ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	60a3      	str	r3, [r4, #8]
 800d6b6:	2900      	cmp	r1, #0
 800d6b8:	d1ed      	bne.n	800d696 <_puts_r+0x52>
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	da11      	bge.n	800d6e2 <_puts_r+0x9e>
 800d6be:	4622      	mov	r2, r4
 800d6c0:	210a      	movs	r1, #10
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f000 f87f 	bl	800d7c6 <__swbuf_r>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d0d7      	beq.n	800d67c <_puts_r+0x38>
 800d6cc:	250a      	movs	r5, #10
 800d6ce:	e7d7      	b.n	800d680 <_puts_r+0x3c>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 f877 	bl	800d7c6 <__swbuf_r>
 800d6d8:	3001      	adds	r0, #1
 800d6da:	d1e7      	bne.n	800d6ac <_puts_r+0x68>
 800d6dc:	e7ce      	b.n	800d67c <_puts_r+0x38>
 800d6de:	3e01      	subs	r6, #1
 800d6e0:	e7e4      	b.n	800d6ac <_puts_r+0x68>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	6022      	str	r2, [r4, #0]
 800d6e8:	220a      	movs	r2, #10
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	e7ee      	b.n	800d6cc <_puts_r+0x88>
	...

0800d6f0 <puts>:
 800d6f0:	4b02      	ldr	r3, [pc, #8]	@ (800d6fc <puts+0xc>)
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	f7ff bfa5 	b.w	800d644 <_puts_r>
 800d6fa:	bf00      	nop
 800d6fc:	20000064 	.word	0x20000064

0800d700 <siprintf>:
 800d700:	b40e      	push	{r1, r2, r3}
 800d702:	b500      	push	{lr}
 800d704:	b09c      	sub	sp, #112	@ 0x70
 800d706:	ab1d      	add	r3, sp, #116	@ 0x74
 800d708:	9002      	str	r0, [sp, #8]
 800d70a:	9006      	str	r0, [sp, #24]
 800d70c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d710:	4809      	ldr	r0, [pc, #36]	@ (800d738 <siprintf+0x38>)
 800d712:	9107      	str	r1, [sp, #28]
 800d714:	9104      	str	r1, [sp, #16]
 800d716:	4909      	ldr	r1, [pc, #36]	@ (800d73c <siprintf+0x3c>)
 800d718:	f853 2b04 	ldr.w	r2, [r3], #4
 800d71c:	9105      	str	r1, [sp, #20]
 800d71e:	6800      	ldr	r0, [r0, #0]
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	a902      	add	r1, sp, #8
 800d724:	f001 fcb6 	bl	800f094 <_svfiprintf_r>
 800d728:	9b02      	ldr	r3, [sp, #8]
 800d72a:	2200      	movs	r2, #0
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	b01c      	add	sp, #112	@ 0x70
 800d730:	f85d eb04 	ldr.w	lr, [sp], #4
 800d734:	b003      	add	sp, #12
 800d736:	4770      	bx	lr
 800d738:	20000064 	.word	0x20000064
 800d73c:	ffff0208 	.word	0xffff0208

0800d740 <__sread>:
 800d740:	b510      	push	{r4, lr}
 800d742:	460c      	mov	r4, r1
 800d744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d748:	f000 f900 	bl	800d94c <_read_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	bfab      	itete	ge
 800d750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d752:	89a3      	ldrhlt	r3, [r4, #12]
 800d754:	181b      	addge	r3, r3, r0
 800d756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d75a:	bfac      	ite	ge
 800d75c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d75e:	81a3      	strhlt	r3, [r4, #12]
 800d760:	bd10      	pop	{r4, pc}

0800d762 <__swrite>:
 800d762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d766:	461f      	mov	r7, r3
 800d768:	898b      	ldrh	r3, [r1, #12]
 800d76a:	05db      	lsls	r3, r3, #23
 800d76c:	4605      	mov	r5, r0
 800d76e:	460c      	mov	r4, r1
 800d770:	4616      	mov	r6, r2
 800d772:	d505      	bpl.n	800d780 <__swrite+0x1e>
 800d774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d778:	2302      	movs	r3, #2
 800d77a:	2200      	movs	r2, #0
 800d77c:	f000 f8d4 	bl	800d928 <_lseek_r>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	4632      	mov	r2, r6
 800d78e:	463b      	mov	r3, r7
 800d790:	4628      	mov	r0, r5
 800d792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d796:	f000 b8eb 	b.w	800d970 <_write_r>

0800d79a <__sseek>:
 800d79a:	b510      	push	{r4, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a2:	f000 f8c1 	bl	800d928 <_lseek_r>
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	bf15      	itete	ne
 800d7ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d7ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d7b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d7b6:	81a3      	strheq	r3, [r4, #12]
 800d7b8:	bf18      	it	ne
 800d7ba:	81a3      	strhne	r3, [r4, #12]
 800d7bc:	bd10      	pop	{r4, pc}

0800d7be <__sclose>:
 800d7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c2:	f000 b8a1 	b.w	800d908 <_close_r>

0800d7c6 <__swbuf_r>:
 800d7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c8:	460e      	mov	r6, r1
 800d7ca:	4614      	mov	r4, r2
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	b118      	cbz	r0, 800d7d8 <__swbuf_r+0x12>
 800d7d0:	6a03      	ldr	r3, [r0, #32]
 800d7d2:	b90b      	cbnz	r3, 800d7d8 <__swbuf_r+0x12>
 800d7d4:	f7ff feee 	bl	800d5b4 <__sinit>
 800d7d8:	69a3      	ldr	r3, [r4, #24]
 800d7da:	60a3      	str	r3, [r4, #8]
 800d7dc:	89a3      	ldrh	r3, [r4, #12]
 800d7de:	071a      	lsls	r2, r3, #28
 800d7e0:	d501      	bpl.n	800d7e6 <__swbuf_r+0x20>
 800d7e2:	6923      	ldr	r3, [r4, #16]
 800d7e4:	b943      	cbnz	r3, 800d7f8 <__swbuf_r+0x32>
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f000 f82b 	bl	800d844 <__swsetup_r>
 800d7ee:	b118      	cbz	r0, 800d7f8 <__swbuf_r+0x32>
 800d7f0:	f04f 37ff 	mov.w	r7, #4294967295
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	6922      	ldr	r2, [r4, #16]
 800d7fc:	1a98      	subs	r0, r3, r2
 800d7fe:	6963      	ldr	r3, [r4, #20]
 800d800:	b2f6      	uxtb	r6, r6
 800d802:	4283      	cmp	r3, r0
 800d804:	4637      	mov	r7, r6
 800d806:	dc05      	bgt.n	800d814 <__swbuf_r+0x4e>
 800d808:	4621      	mov	r1, r4
 800d80a:	4628      	mov	r0, r5
 800d80c:	f001 ff04 	bl	800f618 <_fflush_r>
 800d810:	2800      	cmp	r0, #0
 800d812:	d1ed      	bne.n	800d7f0 <__swbuf_r+0x2a>
 800d814:	68a3      	ldr	r3, [r4, #8]
 800d816:	3b01      	subs	r3, #1
 800d818:	60a3      	str	r3, [r4, #8]
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	6022      	str	r2, [r4, #0]
 800d820:	701e      	strb	r6, [r3, #0]
 800d822:	6962      	ldr	r2, [r4, #20]
 800d824:	1c43      	adds	r3, r0, #1
 800d826:	429a      	cmp	r2, r3
 800d828:	d004      	beq.n	800d834 <__swbuf_r+0x6e>
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	07db      	lsls	r3, r3, #31
 800d82e:	d5e1      	bpl.n	800d7f4 <__swbuf_r+0x2e>
 800d830:	2e0a      	cmp	r6, #10
 800d832:	d1df      	bne.n	800d7f4 <__swbuf_r+0x2e>
 800d834:	4621      	mov	r1, r4
 800d836:	4628      	mov	r0, r5
 800d838:	f001 feee 	bl	800f618 <_fflush_r>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d0d9      	beq.n	800d7f4 <__swbuf_r+0x2e>
 800d840:	e7d6      	b.n	800d7f0 <__swbuf_r+0x2a>
	...

0800d844 <__swsetup_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4b29      	ldr	r3, [pc, #164]	@ (800d8ec <__swsetup_r+0xa8>)
 800d848:	4605      	mov	r5, r0
 800d84a:	6818      	ldr	r0, [r3, #0]
 800d84c:	460c      	mov	r4, r1
 800d84e:	b118      	cbz	r0, 800d858 <__swsetup_r+0x14>
 800d850:	6a03      	ldr	r3, [r0, #32]
 800d852:	b90b      	cbnz	r3, 800d858 <__swsetup_r+0x14>
 800d854:	f7ff feae 	bl	800d5b4 <__sinit>
 800d858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d85c:	0719      	lsls	r1, r3, #28
 800d85e:	d422      	bmi.n	800d8a6 <__swsetup_r+0x62>
 800d860:	06da      	lsls	r2, r3, #27
 800d862:	d407      	bmi.n	800d874 <__swsetup_r+0x30>
 800d864:	2209      	movs	r2, #9
 800d866:	602a      	str	r2, [r5, #0]
 800d868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86c:	81a3      	strh	r3, [r4, #12]
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295
 800d872:	e033      	b.n	800d8dc <__swsetup_r+0x98>
 800d874:	0758      	lsls	r0, r3, #29
 800d876:	d512      	bpl.n	800d89e <__swsetup_r+0x5a>
 800d878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d87a:	b141      	cbz	r1, 800d88e <__swsetup_r+0x4a>
 800d87c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d880:	4299      	cmp	r1, r3
 800d882:	d002      	beq.n	800d88a <__swsetup_r+0x46>
 800d884:	4628      	mov	r0, r5
 800d886:	f000 ff27 	bl	800e6d8 <_free_r>
 800d88a:	2300      	movs	r3, #0
 800d88c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d894:	81a3      	strh	r3, [r4, #12]
 800d896:	2300      	movs	r3, #0
 800d898:	6063      	str	r3, [r4, #4]
 800d89a:	6923      	ldr	r3, [r4, #16]
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	f043 0308 	orr.w	r3, r3, #8
 800d8a4:	81a3      	strh	r3, [r4, #12]
 800d8a6:	6923      	ldr	r3, [r4, #16]
 800d8a8:	b94b      	cbnz	r3, 800d8be <__swsetup_r+0x7a>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8b4:	d003      	beq.n	800d8be <__swsetup_r+0x7a>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f001 ff0d 	bl	800f6d8 <__smakebuf_r>
 800d8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c2:	f013 0201 	ands.w	r2, r3, #1
 800d8c6:	d00a      	beq.n	800d8de <__swsetup_r+0x9a>
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	60a2      	str	r2, [r4, #8]
 800d8cc:	6962      	ldr	r2, [r4, #20]
 800d8ce:	4252      	negs	r2, r2
 800d8d0:	61a2      	str	r2, [r4, #24]
 800d8d2:	6922      	ldr	r2, [r4, #16]
 800d8d4:	b942      	cbnz	r2, 800d8e8 <__swsetup_r+0xa4>
 800d8d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8da:	d1c5      	bne.n	800d868 <__swsetup_r+0x24>
 800d8dc:	bd38      	pop	{r3, r4, r5, pc}
 800d8de:	0799      	lsls	r1, r3, #30
 800d8e0:	bf58      	it	pl
 800d8e2:	6962      	ldrpl	r2, [r4, #20]
 800d8e4:	60a2      	str	r2, [r4, #8]
 800d8e6:	e7f4      	b.n	800d8d2 <__swsetup_r+0x8e>
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	e7f7      	b.n	800d8dc <__swsetup_r+0x98>
 800d8ec:	20000064 	.word	0x20000064

0800d8f0 <memset>:
 800d8f0:	4402      	add	r2, r0
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d100      	bne.n	800d8fa <memset+0xa>
 800d8f8:	4770      	bx	lr
 800d8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d8fe:	e7f9      	b.n	800d8f4 <memset+0x4>

0800d900 <_localeconv_r>:
 800d900:	4800      	ldr	r0, [pc, #0]	@ (800d904 <_localeconv_r+0x4>)
 800d902:	4770      	bx	lr
 800d904:	200001a4 	.word	0x200001a4

0800d908 <_close_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	@ (800d924 <_close_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7f7 fc14 	bl	8005140 <_close>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_close_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_close_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	20001918 	.word	0x20001918

0800d928 <_lseek_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	@ (800d948 <_lseek_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f7 fc29 	bl	800518e <_lseek>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_lseek_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_lseek_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	20001918 	.word	0x20001918

0800d94c <_read_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d07      	ldr	r5, [pc, #28]	@ (800d96c <_read_r+0x20>)
 800d950:	4604      	mov	r4, r0
 800d952:	4608      	mov	r0, r1
 800d954:	4611      	mov	r1, r2
 800d956:	2200      	movs	r2, #0
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	f7f7 fbb7 	bl	80050ce <_read>
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	d102      	bne.n	800d96a <_read_r+0x1e>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	b103      	cbz	r3, 800d96a <_read_r+0x1e>
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	20001918 	.word	0x20001918

0800d970 <_write_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	@ (800d990 <_write_r+0x20>)
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	4611      	mov	r1, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	602a      	str	r2, [r5, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	f7f7 fbc2 	bl	8005108 <_write>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_write_r+0x1e>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_write_r+0x1e>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20001918 	.word	0x20001918

0800d994 <__errno>:
 800d994:	4b01      	ldr	r3, [pc, #4]	@ (800d99c <__errno+0x8>)
 800d996:	6818      	ldr	r0, [r3, #0]
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	20000064 	.word	0x20000064

0800d9a0 <__libc_init_array>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d9d8 <__libc_init_array+0x38>)
 800d9a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d9dc <__libc_init_array+0x3c>)
 800d9a6:	1b64      	subs	r4, r4, r5
 800d9a8:	10a4      	asrs	r4, r4, #2
 800d9aa:	2600      	movs	r6, #0
 800d9ac:	42a6      	cmp	r6, r4
 800d9ae:	d109      	bne.n	800d9c4 <__libc_init_array+0x24>
 800d9b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d9e0 <__libc_init_array+0x40>)
 800d9b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d9e4 <__libc_init_array+0x44>)
 800d9b4:	f001 ffda 	bl	800f96c <_init>
 800d9b8:	1b64      	subs	r4, r4, r5
 800d9ba:	10a4      	asrs	r4, r4, #2
 800d9bc:	2600      	movs	r6, #0
 800d9be:	42a6      	cmp	r6, r4
 800d9c0:	d105      	bne.n	800d9ce <__libc_init_array+0x2e>
 800d9c2:	bd70      	pop	{r4, r5, r6, pc}
 800d9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9c8:	4798      	blx	r3
 800d9ca:	3601      	adds	r6, #1
 800d9cc:	e7ee      	b.n	800d9ac <__libc_init_array+0xc>
 800d9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d2:	4798      	blx	r3
 800d9d4:	3601      	adds	r6, #1
 800d9d6:	e7f2      	b.n	800d9be <__libc_init_array+0x1e>
 800d9d8:	08011344 	.word	0x08011344
 800d9dc:	08011344 	.word	0x08011344
 800d9e0:	08011344 	.word	0x08011344
 800d9e4:	08011348 	.word	0x08011348

0800d9e8 <__retarget_lock_init_recursive>:
 800d9e8:	4770      	bx	lr

0800d9ea <__retarget_lock_acquire_recursive>:
 800d9ea:	4770      	bx	lr

0800d9ec <__retarget_lock_release_recursive>:
 800d9ec:	4770      	bx	lr

0800d9ee <strcpy>:
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9f4:	f803 2b01 	strb.w	r2, [r3], #1
 800d9f8:	2a00      	cmp	r2, #0
 800d9fa:	d1f9      	bne.n	800d9f0 <strcpy+0x2>
 800d9fc:	4770      	bx	lr
	...

0800da00 <__assert_func>:
 800da00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da02:	4614      	mov	r4, r2
 800da04:	461a      	mov	r2, r3
 800da06:	4b09      	ldr	r3, [pc, #36]	@ (800da2c <__assert_func+0x2c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4605      	mov	r5, r0
 800da0c:	68d8      	ldr	r0, [r3, #12]
 800da0e:	b954      	cbnz	r4, 800da26 <__assert_func+0x26>
 800da10:	4b07      	ldr	r3, [pc, #28]	@ (800da30 <__assert_func+0x30>)
 800da12:	461c      	mov	r4, r3
 800da14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da18:	9100      	str	r1, [sp, #0]
 800da1a:	462b      	mov	r3, r5
 800da1c:	4905      	ldr	r1, [pc, #20]	@ (800da34 <__assert_func+0x34>)
 800da1e:	f001 fe23 	bl	800f668 <fiprintf>
 800da22:	f001 feef 	bl	800f804 <abort>
 800da26:	4b04      	ldr	r3, [pc, #16]	@ (800da38 <__assert_func+0x38>)
 800da28:	e7f4      	b.n	800da14 <__assert_func+0x14>
 800da2a:	bf00      	nop
 800da2c:	20000064 	.word	0x20000064
 800da30:	0801104e 	.word	0x0801104e
 800da34:	08011020 	.word	0x08011020
 800da38:	08011013 	.word	0x08011013

0800da3c <quorem>:
 800da3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da40:	6903      	ldr	r3, [r0, #16]
 800da42:	690c      	ldr	r4, [r1, #16]
 800da44:	42a3      	cmp	r3, r4
 800da46:	4607      	mov	r7, r0
 800da48:	db7e      	blt.n	800db48 <quorem+0x10c>
 800da4a:	3c01      	subs	r4, #1
 800da4c:	f101 0814 	add.w	r8, r1, #20
 800da50:	00a3      	lsls	r3, r4, #2
 800da52:	f100 0514 	add.w	r5, r0, #20
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da66:	3301      	adds	r3, #1
 800da68:	429a      	cmp	r2, r3
 800da6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da6e:	fbb2 f6f3 	udiv	r6, r2, r3
 800da72:	d32e      	bcc.n	800dad2 <quorem+0x96>
 800da74:	f04f 0a00 	mov.w	sl, #0
 800da78:	46c4      	mov	ip, r8
 800da7a:	46ae      	mov	lr, r5
 800da7c:	46d3      	mov	fp, sl
 800da7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da82:	b298      	uxth	r0, r3
 800da84:	fb06 a000 	mla	r0, r6, r0, sl
 800da88:	0c02      	lsrs	r2, r0, #16
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	fb06 2303 	mla	r3, r6, r3, r2
 800da90:	f8de 2000 	ldr.w	r2, [lr]
 800da94:	b280      	uxth	r0, r0
 800da96:	b292      	uxth	r2, r2
 800da98:	1a12      	subs	r2, r2, r0
 800da9a:	445a      	add	r2, fp
 800da9c:	f8de 0000 	ldr.w	r0, [lr]
 800daa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800daaa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800daae:	b292      	uxth	r2, r2
 800dab0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dab4:	45e1      	cmp	r9, ip
 800dab6:	f84e 2b04 	str.w	r2, [lr], #4
 800daba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dabe:	d2de      	bcs.n	800da7e <quorem+0x42>
 800dac0:	9b00      	ldr	r3, [sp, #0]
 800dac2:	58eb      	ldr	r3, [r5, r3]
 800dac4:	b92b      	cbnz	r3, 800dad2 <quorem+0x96>
 800dac6:	9b01      	ldr	r3, [sp, #4]
 800dac8:	3b04      	subs	r3, #4
 800daca:	429d      	cmp	r5, r3
 800dacc:	461a      	mov	r2, r3
 800dace:	d32f      	bcc.n	800db30 <quorem+0xf4>
 800dad0:	613c      	str	r4, [r7, #16]
 800dad2:	4638      	mov	r0, r7
 800dad4:	f001 f97a 	bl	800edcc <__mcmp>
 800dad8:	2800      	cmp	r0, #0
 800dada:	db25      	blt.n	800db28 <quorem+0xec>
 800dadc:	4629      	mov	r1, r5
 800dade:	2000      	movs	r0, #0
 800dae0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dae4:	f8d1 c000 	ldr.w	ip, [r1]
 800dae8:	fa1f fe82 	uxth.w	lr, r2
 800daec:	fa1f f38c 	uxth.w	r3, ip
 800daf0:	eba3 030e 	sub.w	r3, r3, lr
 800daf4:	4403      	add	r3, r0
 800daf6:	0c12      	lsrs	r2, r2, #16
 800daf8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dafc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db00:	b29b      	uxth	r3, r3
 800db02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db06:	45c1      	cmp	r9, r8
 800db08:	f841 3b04 	str.w	r3, [r1], #4
 800db0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db10:	d2e6      	bcs.n	800dae0 <quorem+0xa4>
 800db12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db1a:	b922      	cbnz	r2, 800db26 <quorem+0xea>
 800db1c:	3b04      	subs	r3, #4
 800db1e:	429d      	cmp	r5, r3
 800db20:	461a      	mov	r2, r3
 800db22:	d30b      	bcc.n	800db3c <quorem+0x100>
 800db24:	613c      	str	r4, [r7, #16]
 800db26:	3601      	adds	r6, #1
 800db28:	4630      	mov	r0, r6
 800db2a:	b003      	add	sp, #12
 800db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db30:	6812      	ldr	r2, [r2, #0]
 800db32:	3b04      	subs	r3, #4
 800db34:	2a00      	cmp	r2, #0
 800db36:	d1cb      	bne.n	800dad0 <quorem+0x94>
 800db38:	3c01      	subs	r4, #1
 800db3a:	e7c6      	b.n	800daca <quorem+0x8e>
 800db3c:	6812      	ldr	r2, [r2, #0]
 800db3e:	3b04      	subs	r3, #4
 800db40:	2a00      	cmp	r2, #0
 800db42:	d1ef      	bne.n	800db24 <quorem+0xe8>
 800db44:	3c01      	subs	r4, #1
 800db46:	e7ea      	b.n	800db1e <quorem+0xe2>
 800db48:	2000      	movs	r0, #0
 800db4a:	e7ee      	b.n	800db2a <quorem+0xee>
 800db4c:	0000      	movs	r0, r0
	...

0800db50 <_dtoa_r>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	69c7      	ldr	r7, [r0, #28]
 800db56:	b099      	sub	sp, #100	@ 0x64
 800db58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800db5c:	ec55 4b10 	vmov	r4, r5, d0
 800db60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800db62:	9109      	str	r1, [sp, #36]	@ 0x24
 800db64:	4683      	mov	fp, r0
 800db66:	920e      	str	r2, [sp, #56]	@ 0x38
 800db68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db6a:	b97f      	cbnz	r7, 800db8c <_dtoa_r+0x3c>
 800db6c:	2010      	movs	r0, #16
 800db6e:	f000 fdfd 	bl	800e76c <malloc>
 800db72:	4602      	mov	r2, r0
 800db74:	f8cb 001c 	str.w	r0, [fp, #28]
 800db78:	b920      	cbnz	r0, 800db84 <_dtoa_r+0x34>
 800db7a:	4ba7      	ldr	r3, [pc, #668]	@ (800de18 <_dtoa_r+0x2c8>)
 800db7c:	21ef      	movs	r1, #239	@ 0xef
 800db7e:	48a7      	ldr	r0, [pc, #668]	@ (800de1c <_dtoa_r+0x2cc>)
 800db80:	f7ff ff3e 	bl	800da00 <__assert_func>
 800db84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800db88:	6007      	str	r7, [r0, #0]
 800db8a:	60c7      	str	r7, [r0, #12]
 800db8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db90:	6819      	ldr	r1, [r3, #0]
 800db92:	b159      	cbz	r1, 800dbac <_dtoa_r+0x5c>
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	604a      	str	r2, [r1, #4]
 800db98:	2301      	movs	r3, #1
 800db9a:	4093      	lsls	r3, r2
 800db9c:	608b      	str	r3, [r1, #8]
 800db9e:	4658      	mov	r0, fp
 800dba0:	f000 feda 	bl	800e958 <_Bfree>
 800dba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	1e2b      	subs	r3, r5, #0
 800dbae:	bfb9      	ittee	lt
 800dbb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dbb4:	9303      	strlt	r3, [sp, #12]
 800dbb6:	2300      	movge	r3, #0
 800dbb8:	6033      	strge	r3, [r6, #0]
 800dbba:	9f03      	ldr	r7, [sp, #12]
 800dbbc:	4b98      	ldr	r3, [pc, #608]	@ (800de20 <_dtoa_r+0x2d0>)
 800dbbe:	bfbc      	itt	lt
 800dbc0:	2201      	movlt	r2, #1
 800dbc2:	6032      	strlt	r2, [r6, #0]
 800dbc4:	43bb      	bics	r3, r7
 800dbc6:	d112      	bne.n	800dbee <_dtoa_r+0x9e>
 800dbc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dbca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dbce:	6013      	str	r3, [r2, #0]
 800dbd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dbd4:	4323      	orrs	r3, r4
 800dbd6:	f000 854d 	beq.w	800e674 <_dtoa_r+0xb24>
 800dbda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800de34 <_dtoa_r+0x2e4>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 854f 	beq.w	800e684 <_dtoa_r+0xb34>
 800dbe6:	f10a 0303 	add.w	r3, sl, #3
 800dbea:	f000 bd49 	b.w	800e680 <_dtoa_r+0xb30>
 800dbee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	ec51 0b17 	vmov	r0, r1, d7
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dbfe:	f7f2 ff7b 	bl	8000af8 <__aeabi_dcmpeq>
 800dc02:	4680      	mov	r8, r0
 800dc04:	b158      	cbz	r0, 800dc1e <_dtoa_r+0xce>
 800dc06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc08:	2301      	movs	r3, #1
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc0e:	b113      	cbz	r3, 800dc16 <_dtoa_r+0xc6>
 800dc10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc12:	4b84      	ldr	r3, [pc, #528]	@ (800de24 <_dtoa_r+0x2d4>)
 800dc14:	6013      	str	r3, [r2, #0]
 800dc16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800de38 <_dtoa_r+0x2e8>
 800dc1a:	f000 bd33 	b.w	800e684 <_dtoa_r+0xb34>
 800dc1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dc22:	aa16      	add	r2, sp, #88	@ 0x58
 800dc24:	a917      	add	r1, sp, #92	@ 0x5c
 800dc26:	4658      	mov	r0, fp
 800dc28:	f001 f980 	bl	800ef2c <__d2b>
 800dc2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dc30:	4681      	mov	r9, r0
 800dc32:	2e00      	cmp	r6, #0
 800dc34:	d077      	beq.n	800dd26 <_dtoa_r+0x1d6>
 800dc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dc3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dc48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dc4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dc50:	4619      	mov	r1, r3
 800dc52:	2200      	movs	r2, #0
 800dc54:	4b74      	ldr	r3, [pc, #464]	@ (800de28 <_dtoa_r+0x2d8>)
 800dc56:	f7f2 fb2f 	bl	80002b8 <__aeabi_dsub>
 800dc5a:	a369      	add	r3, pc, #420	@ (adr r3, 800de00 <_dtoa_r+0x2b0>)
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	f7f2 fce2 	bl	8000628 <__aeabi_dmul>
 800dc64:	a368      	add	r3, pc, #416	@ (adr r3, 800de08 <_dtoa_r+0x2b8>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	f7f2 fb27 	bl	80002bc <__adddf3>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	4630      	mov	r0, r6
 800dc72:	460d      	mov	r5, r1
 800dc74:	f7f2 fc6e 	bl	8000554 <__aeabi_i2d>
 800dc78:	a365      	add	r3, pc, #404	@ (adr r3, 800de10 <_dtoa_r+0x2c0>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fcd3 	bl	8000628 <__aeabi_dmul>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	4620      	mov	r0, r4
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f2 fb17 	bl	80002bc <__adddf3>
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
 800dc92:	f7f2 ff79 	bl	8000b88 <__aeabi_d2iz>
 800dc96:	2200      	movs	r2, #0
 800dc98:	4607      	mov	r7, r0
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 ff34 	bl	8000b0c <__aeabi_dcmplt>
 800dca4:	b140      	cbz	r0, 800dcb8 <_dtoa_r+0x168>
 800dca6:	4638      	mov	r0, r7
 800dca8:	f7f2 fc54 	bl	8000554 <__aeabi_i2d>
 800dcac:	4622      	mov	r2, r4
 800dcae:	462b      	mov	r3, r5
 800dcb0:	f7f2 ff22 	bl	8000af8 <__aeabi_dcmpeq>
 800dcb4:	b900      	cbnz	r0, 800dcb8 <_dtoa_r+0x168>
 800dcb6:	3f01      	subs	r7, #1
 800dcb8:	2f16      	cmp	r7, #22
 800dcba:	d851      	bhi.n	800dd60 <_dtoa_r+0x210>
 800dcbc:	4b5b      	ldr	r3, [pc, #364]	@ (800de2c <_dtoa_r+0x2dc>)
 800dcbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcca:	f7f2 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d048      	beq.n	800dd64 <_dtoa_r+0x214>
 800dcd2:	3f01      	subs	r7, #1
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dcd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcda:	1b9b      	subs	r3, r3, r6
 800dcdc:	1e5a      	subs	r2, r3, #1
 800dcde:	bf44      	itt	mi
 800dce0:	f1c3 0801 	rsbmi	r8, r3, #1
 800dce4:	2300      	movmi	r3, #0
 800dce6:	9208      	str	r2, [sp, #32]
 800dce8:	bf54      	ite	pl
 800dcea:	f04f 0800 	movpl.w	r8, #0
 800dcee:	9308      	strmi	r3, [sp, #32]
 800dcf0:	2f00      	cmp	r7, #0
 800dcf2:	db39      	blt.n	800dd68 <_dtoa_r+0x218>
 800dcf4:	9b08      	ldr	r3, [sp, #32]
 800dcf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dcf8:	443b      	add	r3, r7
 800dcfa:	9308      	str	r3, [sp, #32]
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd02:	2b09      	cmp	r3, #9
 800dd04:	d864      	bhi.n	800ddd0 <_dtoa_r+0x280>
 800dd06:	2b05      	cmp	r3, #5
 800dd08:	bfc4      	itt	gt
 800dd0a:	3b04      	subgt	r3, #4
 800dd0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd10:	f1a3 0302 	sub.w	r3, r3, #2
 800dd14:	bfcc      	ite	gt
 800dd16:	2400      	movgt	r4, #0
 800dd18:	2401      	movle	r4, #1
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d863      	bhi.n	800dde6 <_dtoa_r+0x296>
 800dd1e:	e8df f003 	tbb	[pc, r3]
 800dd22:	372a      	.short	0x372a
 800dd24:	5535      	.short	0x5535
 800dd26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dd2a:	441e      	add	r6, r3
 800dd2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	bfc1      	itttt	gt
 800dd34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dd38:	409f      	lslgt	r7, r3
 800dd3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dd3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dd42:	bfd6      	itet	le
 800dd44:	f1c3 0320 	rsble	r3, r3, #32
 800dd48:	ea47 0003 	orrgt.w	r0, r7, r3
 800dd4c:	fa04 f003 	lslle.w	r0, r4, r3
 800dd50:	f7f2 fbf0 	bl	8000534 <__aeabi_ui2d>
 800dd54:	2201      	movs	r2, #1
 800dd56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dd5a:	3e01      	subs	r6, #1
 800dd5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800dd5e:	e777      	b.n	800dc50 <_dtoa_r+0x100>
 800dd60:	2301      	movs	r3, #1
 800dd62:	e7b8      	b.n	800dcd6 <_dtoa_r+0x186>
 800dd64:	9012      	str	r0, [sp, #72]	@ 0x48
 800dd66:	e7b7      	b.n	800dcd8 <_dtoa_r+0x188>
 800dd68:	427b      	negs	r3, r7
 800dd6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	eba8 0807 	sub.w	r8, r8, r7
 800dd72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd74:	e7c4      	b.n	800dd00 <_dtoa_r+0x1b0>
 800dd76:	2300      	movs	r3, #0
 800dd78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	dc35      	bgt.n	800ddec <_dtoa_r+0x29c>
 800dd80:	2301      	movs	r3, #1
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	9307      	str	r3, [sp, #28]
 800dd86:	461a      	mov	r2, r3
 800dd88:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd8a:	e00b      	b.n	800dda4 <_dtoa_r+0x254>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e7f3      	b.n	800dd78 <_dtoa_r+0x228>
 800dd90:	2300      	movs	r3, #0
 800dd92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd96:	18fb      	adds	r3, r7, r3
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	9307      	str	r3, [sp, #28]
 800dda0:	bfb8      	it	lt
 800dda2:	2301      	movlt	r3, #1
 800dda4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dda8:	2100      	movs	r1, #0
 800ddaa:	2204      	movs	r2, #4
 800ddac:	f102 0514 	add.w	r5, r2, #20
 800ddb0:	429d      	cmp	r5, r3
 800ddb2:	d91f      	bls.n	800ddf4 <_dtoa_r+0x2a4>
 800ddb4:	6041      	str	r1, [r0, #4]
 800ddb6:	4658      	mov	r0, fp
 800ddb8:	f000 fd8e 	bl	800e8d8 <_Balloc>
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d13c      	bne.n	800de3c <_dtoa_r+0x2ec>
 800ddc2:	4b1b      	ldr	r3, [pc, #108]	@ (800de30 <_dtoa_r+0x2e0>)
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ddca:	e6d8      	b.n	800db7e <_dtoa_r+0x2e>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e7e0      	b.n	800dd92 <_dtoa_r+0x242>
 800ddd0:	2401      	movs	r4, #1
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ddd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	2200      	movs	r2, #0
 800dde2:	2312      	movs	r3, #18
 800dde4:	e7d0      	b.n	800dd88 <_dtoa_r+0x238>
 800dde6:	2301      	movs	r3, #1
 800dde8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddea:	e7f5      	b.n	800ddd8 <_dtoa_r+0x288>
 800ddec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	9307      	str	r3, [sp, #28]
 800ddf2:	e7d7      	b.n	800dda4 <_dtoa_r+0x254>
 800ddf4:	3101      	adds	r1, #1
 800ddf6:	0052      	lsls	r2, r2, #1
 800ddf8:	e7d8      	b.n	800ddac <_dtoa_r+0x25c>
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w
 800de00:	636f4361 	.word	0x636f4361
 800de04:	3fd287a7 	.word	0x3fd287a7
 800de08:	8b60c8b3 	.word	0x8b60c8b3
 800de0c:	3fc68a28 	.word	0x3fc68a28
 800de10:	509f79fb 	.word	0x509f79fb
 800de14:	3fd34413 	.word	0x3fd34413
 800de18:	08010f70 	.word	0x08010f70
 800de1c:	0801105c 	.word	0x0801105c
 800de20:	7ff00000 	.word	0x7ff00000
 800de24:	08010ff0 	.word	0x08010ff0
 800de28:	3ff80000 	.word	0x3ff80000
 800de2c:	08011158 	.word	0x08011158
 800de30:	080110b4 	.word	0x080110b4
 800de34:	08011058 	.word	0x08011058
 800de38:	08010fef 	.word	0x08010fef
 800de3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800de40:	6018      	str	r0, [r3, #0]
 800de42:	9b07      	ldr	r3, [sp, #28]
 800de44:	2b0e      	cmp	r3, #14
 800de46:	f200 80a4 	bhi.w	800df92 <_dtoa_r+0x442>
 800de4a:	2c00      	cmp	r4, #0
 800de4c:	f000 80a1 	beq.w	800df92 <_dtoa_r+0x442>
 800de50:	2f00      	cmp	r7, #0
 800de52:	dd33      	ble.n	800debc <_dtoa_r+0x36c>
 800de54:	4bad      	ldr	r3, [pc, #692]	@ (800e10c <_dtoa_r+0x5bc>)
 800de56:	f007 020f 	and.w	r2, r7, #15
 800de5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de5e:	ed93 7b00 	vldr	d7, [r3]
 800de62:	05f8      	lsls	r0, r7, #23
 800de64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800de68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800de6c:	d516      	bpl.n	800de9c <_dtoa_r+0x34c>
 800de6e:	4ba8      	ldr	r3, [pc, #672]	@ (800e110 <_dtoa_r+0x5c0>)
 800de70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de78:	f7f2 fd00 	bl	800087c <__aeabi_ddiv>
 800de7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de80:	f004 040f 	and.w	r4, r4, #15
 800de84:	2603      	movs	r6, #3
 800de86:	4da2      	ldr	r5, [pc, #648]	@ (800e110 <_dtoa_r+0x5c0>)
 800de88:	b954      	cbnz	r4, 800dea0 <_dtoa_r+0x350>
 800de8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de92:	f7f2 fcf3 	bl	800087c <__aeabi_ddiv>
 800de96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de9a:	e028      	b.n	800deee <_dtoa_r+0x39e>
 800de9c:	2602      	movs	r6, #2
 800de9e:	e7f2      	b.n	800de86 <_dtoa_r+0x336>
 800dea0:	07e1      	lsls	r1, r4, #31
 800dea2:	d508      	bpl.n	800deb6 <_dtoa_r+0x366>
 800dea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800deac:	f7f2 fbbc 	bl	8000628 <__aeabi_dmul>
 800deb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800deb4:	3601      	adds	r6, #1
 800deb6:	1064      	asrs	r4, r4, #1
 800deb8:	3508      	adds	r5, #8
 800deba:	e7e5      	b.n	800de88 <_dtoa_r+0x338>
 800debc:	f000 80d2 	beq.w	800e064 <_dtoa_r+0x514>
 800dec0:	427c      	negs	r4, r7
 800dec2:	4b92      	ldr	r3, [pc, #584]	@ (800e10c <_dtoa_r+0x5bc>)
 800dec4:	4d92      	ldr	r5, [pc, #584]	@ (800e110 <_dtoa_r+0x5c0>)
 800dec6:	f004 020f 	and.w	r2, r4, #15
 800deca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ded6:	f7f2 fba7 	bl	8000628 <__aeabi_dmul>
 800deda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dede:	1124      	asrs	r4, r4, #4
 800dee0:	2300      	movs	r3, #0
 800dee2:	2602      	movs	r6, #2
 800dee4:	2c00      	cmp	r4, #0
 800dee6:	f040 80b2 	bne.w	800e04e <_dtoa_r+0x4fe>
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1d3      	bne.n	800de96 <_dtoa_r+0x346>
 800deee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800def0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 80b7 	beq.w	800e068 <_dtoa_r+0x518>
 800defa:	4b86      	ldr	r3, [pc, #536]	@ (800e114 <_dtoa_r+0x5c4>)
 800defc:	2200      	movs	r2, #0
 800defe:	4620      	mov	r0, r4
 800df00:	4629      	mov	r1, r5
 800df02:	f7f2 fe03 	bl	8000b0c <__aeabi_dcmplt>
 800df06:	2800      	cmp	r0, #0
 800df08:	f000 80ae 	beq.w	800e068 <_dtoa_r+0x518>
 800df0c:	9b07      	ldr	r3, [sp, #28]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f000 80aa 	beq.w	800e068 <_dtoa_r+0x518>
 800df14:	9b00      	ldr	r3, [sp, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	dd37      	ble.n	800df8a <_dtoa_r+0x43a>
 800df1a:	1e7b      	subs	r3, r7, #1
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	4620      	mov	r0, r4
 800df20:	4b7d      	ldr	r3, [pc, #500]	@ (800e118 <_dtoa_r+0x5c8>)
 800df22:	2200      	movs	r2, #0
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 fb7f 	bl	8000628 <__aeabi_dmul>
 800df2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df2e:	9c00      	ldr	r4, [sp, #0]
 800df30:	3601      	adds	r6, #1
 800df32:	4630      	mov	r0, r6
 800df34:	f7f2 fb0e 	bl	8000554 <__aeabi_i2d>
 800df38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df3c:	f7f2 fb74 	bl	8000628 <__aeabi_dmul>
 800df40:	4b76      	ldr	r3, [pc, #472]	@ (800e11c <_dtoa_r+0x5cc>)
 800df42:	2200      	movs	r2, #0
 800df44:	f7f2 f9ba 	bl	80002bc <__adddf3>
 800df48:	4605      	mov	r5, r0
 800df4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800df4e:	2c00      	cmp	r4, #0
 800df50:	f040 808d 	bne.w	800e06e <_dtoa_r+0x51e>
 800df54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df58:	4b71      	ldr	r3, [pc, #452]	@ (800e120 <_dtoa_r+0x5d0>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	f7f2 f9ac 	bl	80002b8 <__aeabi_dsub>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df68:	462a      	mov	r2, r5
 800df6a:	4633      	mov	r3, r6
 800df6c:	f7f2 fdec 	bl	8000b48 <__aeabi_dcmpgt>
 800df70:	2800      	cmp	r0, #0
 800df72:	f040 828b 	bne.w	800e48c <_dtoa_r+0x93c>
 800df76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df7a:	462a      	mov	r2, r5
 800df7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800df80:	f7f2 fdc4 	bl	8000b0c <__aeabi_dcmplt>
 800df84:	2800      	cmp	r0, #0
 800df86:	f040 8128 	bne.w	800e1da <_dtoa_r+0x68a>
 800df8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800df8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800df92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800df94:	2b00      	cmp	r3, #0
 800df96:	f2c0 815a 	blt.w	800e24e <_dtoa_r+0x6fe>
 800df9a:	2f0e      	cmp	r7, #14
 800df9c:	f300 8157 	bgt.w	800e24e <_dtoa_r+0x6fe>
 800dfa0:	4b5a      	ldr	r3, [pc, #360]	@ (800e10c <_dtoa_r+0x5bc>)
 800dfa2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfa6:	ed93 7b00 	vldr	d7, [r3]
 800dfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	ed8d 7b00 	vstr	d7, [sp]
 800dfb2:	da03      	bge.n	800dfbc <_dtoa_r+0x46c>
 800dfb4:	9b07      	ldr	r3, [sp, #28]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f340 8101 	ble.w	800e1be <_dtoa_r+0x66e>
 800dfbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfc0:	4656      	mov	r6, sl
 800dfc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 fc57 	bl	800087c <__aeabi_ddiv>
 800dfce:	f7f2 fddb 	bl	8000b88 <__aeabi_d2iz>
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	f7f2 fabe 	bl	8000554 <__aeabi_i2d>
 800dfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfdc:	f7f2 fb24 	bl	8000628 <__aeabi_dmul>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dfec:	f7f2 f964 	bl	80002b8 <__aeabi_dsub>
 800dff0:	f806 4b01 	strb.w	r4, [r6], #1
 800dff4:	9d07      	ldr	r5, [sp, #28]
 800dff6:	eba6 040a 	sub.w	r4, r6, sl
 800dffa:	42a5      	cmp	r5, r4
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	f040 8117 	bne.w	800e232 <_dtoa_r+0x6e2>
 800e004:	f7f2 f95a 	bl	80002bc <__adddf3>
 800e008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e00c:	4604      	mov	r4, r0
 800e00e:	460d      	mov	r5, r1
 800e010:	f7f2 fd9a 	bl	8000b48 <__aeabi_dcmpgt>
 800e014:	2800      	cmp	r0, #0
 800e016:	f040 80f9 	bne.w	800e20c <_dtoa_r+0x6bc>
 800e01a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e01e:	4620      	mov	r0, r4
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 fd69 	bl	8000af8 <__aeabi_dcmpeq>
 800e026:	b118      	cbz	r0, 800e030 <_dtoa_r+0x4e0>
 800e028:	f018 0f01 	tst.w	r8, #1
 800e02c:	f040 80ee 	bne.w	800e20c <_dtoa_r+0x6bc>
 800e030:	4649      	mov	r1, r9
 800e032:	4658      	mov	r0, fp
 800e034:	f000 fc90 	bl	800e958 <_Bfree>
 800e038:	2300      	movs	r3, #0
 800e03a:	7033      	strb	r3, [r6, #0]
 800e03c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e03e:	3701      	adds	r7, #1
 800e040:	601f      	str	r7, [r3, #0]
 800e042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 831d 	beq.w	800e684 <_dtoa_r+0xb34>
 800e04a:	601e      	str	r6, [r3, #0]
 800e04c:	e31a      	b.n	800e684 <_dtoa_r+0xb34>
 800e04e:	07e2      	lsls	r2, r4, #31
 800e050:	d505      	bpl.n	800e05e <_dtoa_r+0x50e>
 800e052:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e056:	f7f2 fae7 	bl	8000628 <__aeabi_dmul>
 800e05a:	3601      	adds	r6, #1
 800e05c:	2301      	movs	r3, #1
 800e05e:	1064      	asrs	r4, r4, #1
 800e060:	3508      	adds	r5, #8
 800e062:	e73f      	b.n	800dee4 <_dtoa_r+0x394>
 800e064:	2602      	movs	r6, #2
 800e066:	e742      	b.n	800deee <_dtoa_r+0x39e>
 800e068:	9c07      	ldr	r4, [sp, #28]
 800e06a:	9704      	str	r7, [sp, #16]
 800e06c:	e761      	b.n	800df32 <_dtoa_r+0x3e2>
 800e06e:	4b27      	ldr	r3, [pc, #156]	@ (800e10c <_dtoa_r+0x5bc>)
 800e070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e076:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e07a:	4454      	add	r4, sl
 800e07c:	2900      	cmp	r1, #0
 800e07e:	d053      	beq.n	800e128 <_dtoa_r+0x5d8>
 800e080:	4928      	ldr	r1, [pc, #160]	@ (800e124 <_dtoa_r+0x5d4>)
 800e082:	2000      	movs	r0, #0
 800e084:	f7f2 fbfa 	bl	800087c <__aeabi_ddiv>
 800e088:	4633      	mov	r3, r6
 800e08a:	462a      	mov	r2, r5
 800e08c:	f7f2 f914 	bl	80002b8 <__aeabi_dsub>
 800e090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e094:	4656      	mov	r6, sl
 800e096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09a:	f7f2 fd75 	bl	8000b88 <__aeabi_d2iz>
 800e09e:	4605      	mov	r5, r0
 800e0a0:	f7f2 fa58 	bl	8000554 <__aeabi_i2d>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ac:	f7f2 f904 	bl	80002b8 <__aeabi_dsub>
 800e0b0:	3530      	adds	r5, #48	@ 0x30
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0ba:	f806 5b01 	strb.w	r5, [r6], #1
 800e0be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0c2:	f7f2 fd23 	bl	8000b0c <__aeabi_dcmplt>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d171      	bne.n	800e1ae <_dtoa_r+0x65e>
 800e0ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ce:	4911      	ldr	r1, [pc, #68]	@ (800e114 <_dtoa_r+0x5c4>)
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	f7f2 f8f1 	bl	80002b8 <__aeabi_dsub>
 800e0d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0da:	f7f2 fd17 	bl	8000b0c <__aeabi_dcmplt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f040 8095 	bne.w	800e20e <_dtoa_r+0x6be>
 800e0e4:	42a6      	cmp	r6, r4
 800e0e6:	f43f af50 	beq.w	800df8a <_dtoa_r+0x43a>
 800e0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e118 <_dtoa_r+0x5c8>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f7f2 fa99 	bl	8000628 <__aeabi_dmul>
 800e0f6:	4b08      	ldr	r3, [pc, #32]	@ (800e118 <_dtoa_r+0x5c8>)
 800e0f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e102:	f7f2 fa91 	bl	8000628 <__aeabi_dmul>
 800e106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e10a:	e7c4      	b.n	800e096 <_dtoa_r+0x546>
 800e10c:	08011158 	.word	0x08011158
 800e110:	08011130 	.word	0x08011130
 800e114:	3ff00000 	.word	0x3ff00000
 800e118:	40240000 	.word	0x40240000
 800e11c:	401c0000 	.word	0x401c0000
 800e120:	40140000 	.word	0x40140000
 800e124:	3fe00000 	.word	0x3fe00000
 800e128:	4631      	mov	r1, r6
 800e12a:	4628      	mov	r0, r5
 800e12c:	f7f2 fa7c 	bl	8000628 <__aeabi_dmul>
 800e130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e134:	9415      	str	r4, [sp, #84]	@ 0x54
 800e136:	4656      	mov	r6, sl
 800e138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e13c:	f7f2 fd24 	bl	8000b88 <__aeabi_d2iz>
 800e140:	4605      	mov	r5, r0
 800e142:	f7f2 fa07 	bl	8000554 <__aeabi_i2d>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e14e:	f7f2 f8b3 	bl	80002b8 <__aeabi_dsub>
 800e152:	3530      	adds	r5, #48	@ 0x30
 800e154:	f806 5b01 	strb.w	r5, [r6], #1
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	42a6      	cmp	r6, r4
 800e15e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e162:	f04f 0200 	mov.w	r2, #0
 800e166:	d124      	bne.n	800e1b2 <_dtoa_r+0x662>
 800e168:	4bac      	ldr	r3, [pc, #688]	@ (800e41c <_dtoa_r+0x8cc>)
 800e16a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e16e:	f7f2 f8a5 	bl	80002bc <__adddf3>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e17a:	f7f2 fce5 	bl	8000b48 <__aeabi_dcmpgt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d145      	bne.n	800e20e <_dtoa_r+0x6be>
 800e182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e186:	49a5      	ldr	r1, [pc, #660]	@ (800e41c <_dtoa_r+0x8cc>)
 800e188:	2000      	movs	r0, #0
 800e18a:	f7f2 f895 	bl	80002b8 <__aeabi_dsub>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e196:	f7f2 fcb9 	bl	8000b0c <__aeabi_dcmplt>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	f43f aef5 	beq.w	800df8a <_dtoa_r+0x43a>
 800e1a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e1a2:	1e73      	subs	r3, r6, #1
 800e1a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e1aa:	2b30      	cmp	r3, #48	@ 0x30
 800e1ac:	d0f8      	beq.n	800e1a0 <_dtoa_r+0x650>
 800e1ae:	9f04      	ldr	r7, [sp, #16]
 800e1b0:	e73e      	b.n	800e030 <_dtoa_r+0x4e0>
 800e1b2:	4b9b      	ldr	r3, [pc, #620]	@ (800e420 <_dtoa_r+0x8d0>)
 800e1b4:	f7f2 fa38 	bl	8000628 <__aeabi_dmul>
 800e1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1bc:	e7bc      	b.n	800e138 <_dtoa_r+0x5e8>
 800e1be:	d10c      	bne.n	800e1da <_dtoa_r+0x68a>
 800e1c0:	4b98      	ldr	r3, [pc, #608]	@ (800e424 <_dtoa_r+0x8d4>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1c8:	f7f2 fa2e 	bl	8000628 <__aeabi_dmul>
 800e1cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1d0:	f7f2 fcb0 	bl	8000b34 <__aeabi_dcmpge>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f000 8157 	beq.w	800e488 <_dtoa_r+0x938>
 800e1da:	2400      	movs	r4, #0
 800e1dc:	4625      	mov	r5, r4
 800e1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e0:	43db      	mvns	r3, r3
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	4656      	mov	r6, sl
 800e1e6:	2700      	movs	r7, #0
 800e1e8:	4621      	mov	r1, r4
 800e1ea:	4658      	mov	r0, fp
 800e1ec:	f000 fbb4 	bl	800e958 <_Bfree>
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d0dc      	beq.n	800e1ae <_dtoa_r+0x65e>
 800e1f4:	b12f      	cbz	r7, 800e202 <_dtoa_r+0x6b2>
 800e1f6:	42af      	cmp	r7, r5
 800e1f8:	d003      	beq.n	800e202 <_dtoa_r+0x6b2>
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	4658      	mov	r0, fp
 800e1fe:	f000 fbab 	bl	800e958 <_Bfree>
 800e202:	4629      	mov	r1, r5
 800e204:	4658      	mov	r0, fp
 800e206:	f000 fba7 	bl	800e958 <_Bfree>
 800e20a:	e7d0      	b.n	800e1ae <_dtoa_r+0x65e>
 800e20c:	9704      	str	r7, [sp, #16]
 800e20e:	4633      	mov	r3, r6
 800e210:	461e      	mov	r6, r3
 800e212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e216:	2a39      	cmp	r2, #57	@ 0x39
 800e218:	d107      	bne.n	800e22a <_dtoa_r+0x6da>
 800e21a:	459a      	cmp	sl, r3
 800e21c:	d1f8      	bne.n	800e210 <_dtoa_r+0x6c0>
 800e21e:	9a04      	ldr	r2, [sp, #16]
 800e220:	3201      	adds	r2, #1
 800e222:	9204      	str	r2, [sp, #16]
 800e224:	2230      	movs	r2, #48	@ 0x30
 800e226:	f88a 2000 	strb.w	r2, [sl]
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	3201      	adds	r2, #1
 800e22e:	701a      	strb	r2, [r3, #0]
 800e230:	e7bd      	b.n	800e1ae <_dtoa_r+0x65e>
 800e232:	4b7b      	ldr	r3, [pc, #492]	@ (800e420 <_dtoa_r+0x8d0>)
 800e234:	2200      	movs	r2, #0
 800e236:	f7f2 f9f7 	bl	8000628 <__aeabi_dmul>
 800e23a:	2200      	movs	r2, #0
 800e23c:	2300      	movs	r3, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	f7f2 fc59 	bl	8000af8 <__aeabi_dcmpeq>
 800e246:	2800      	cmp	r0, #0
 800e248:	f43f aebb 	beq.w	800dfc2 <_dtoa_r+0x472>
 800e24c:	e6f0      	b.n	800e030 <_dtoa_r+0x4e0>
 800e24e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e250:	2a00      	cmp	r2, #0
 800e252:	f000 80db 	beq.w	800e40c <_dtoa_r+0x8bc>
 800e256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e258:	2a01      	cmp	r2, #1
 800e25a:	f300 80bf 	bgt.w	800e3dc <_dtoa_r+0x88c>
 800e25e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e260:	2a00      	cmp	r2, #0
 800e262:	f000 80b7 	beq.w	800e3d4 <_dtoa_r+0x884>
 800e266:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e26a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e26c:	4646      	mov	r6, r8
 800e26e:	9a08      	ldr	r2, [sp, #32]
 800e270:	2101      	movs	r1, #1
 800e272:	441a      	add	r2, r3
 800e274:	4658      	mov	r0, fp
 800e276:	4498      	add	r8, r3
 800e278:	9208      	str	r2, [sp, #32]
 800e27a:	f000 fc21 	bl	800eac0 <__i2b>
 800e27e:	4605      	mov	r5, r0
 800e280:	b15e      	cbz	r6, 800e29a <_dtoa_r+0x74a>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	2b00      	cmp	r3, #0
 800e286:	dd08      	ble.n	800e29a <_dtoa_r+0x74a>
 800e288:	42b3      	cmp	r3, r6
 800e28a:	9a08      	ldr	r2, [sp, #32]
 800e28c:	bfa8      	it	ge
 800e28e:	4633      	movge	r3, r6
 800e290:	eba8 0803 	sub.w	r8, r8, r3
 800e294:	1af6      	subs	r6, r6, r3
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	9308      	str	r3, [sp, #32]
 800e29a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e29c:	b1f3      	cbz	r3, 800e2dc <_dtoa_r+0x78c>
 800e29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80b7 	beq.w	800e414 <_dtoa_r+0x8c4>
 800e2a6:	b18c      	cbz	r4, 800e2cc <_dtoa_r+0x77c>
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	4658      	mov	r0, fp
 800e2ae:	f000 fcc7 	bl	800ec40 <__pow5mult>
 800e2b2:	464a      	mov	r2, r9
 800e2b4:	4601      	mov	r1, r0
 800e2b6:	4605      	mov	r5, r0
 800e2b8:	4658      	mov	r0, fp
 800e2ba:	f000 fc17 	bl	800eaec <__multiply>
 800e2be:	4649      	mov	r1, r9
 800e2c0:	9004      	str	r0, [sp, #16]
 800e2c2:	4658      	mov	r0, fp
 800e2c4:	f000 fb48 	bl	800e958 <_Bfree>
 800e2c8:	9b04      	ldr	r3, [sp, #16]
 800e2ca:	4699      	mov	r9, r3
 800e2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2ce:	1b1a      	subs	r2, r3, r4
 800e2d0:	d004      	beq.n	800e2dc <_dtoa_r+0x78c>
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	4658      	mov	r0, fp
 800e2d6:	f000 fcb3 	bl	800ec40 <__pow5mult>
 800e2da:	4681      	mov	r9, r0
 800e2dc:	2101      	movs	r1, #1
 800e2de:	4658      	mov	r0, fp
 800e2e0:	f000 fbee 	bl	800eac0 <__i2b>
 800e2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 81cf 	beq.w	800e68c <_dtoa_r+0xb3c>
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	4658      	mov	r0, fp
 800e2f4:	f000 fca4 	bl	800ec40 <__pow5mult>
 800e2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	f300 8095 	bgt.w	800e42c <_dtoa_r+0x8dc>
 800e302:	9b02      	ldr	r3, [sp, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f040 8087 	bne.w	800e418 <_dtoa_r+0x8c8>
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e310:	2b00      	cmp	r3, #0
 800e312:	f040 8089 	bne.w	800e428 <_dtoa_r+0x8d8>
 800e316:	9b03      	ldr	r3, [sp, #12]
 800e318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e31c:	0d1b      	lsrs	r3, r3, #20
 800e31e:	051b      	lsls	r3, r3, #20
 800e320:	b12b      	cbz	r3, 800e32e <_dtoa_r+0x7de>
 800e322:	9b08      	ldr	r3, [sp, #32]
 800e324:	3301      	adds	r3, #1
 800e326:	9308      	str	r3, [sp, #32]
 800e328:	f108 0801 	add.w	r8, r8, #1
 800e32c:	2301      	movs	r3, #1
 800e32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 81b0 	beq.w	800e698 <_dtoa_r+0xb48>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e33e:	6918      	ldr	r0, [r3, #16]
 800e340:	f000 fb72 	bl	800ea28 <__hi0bits>
 800e344:	f1c0 0020 	rsb	r0, r0, #32
 800e348:	9b08      	ldr	r3, [sp, #32]
 800e34a:	4418      	add	r0, r3
 800e34c:	f010 001f 	ands.w	r0, r0, #31
 800e350:	d077      	beq.n	800e442 <_dtoa_r+0x8f2>
 800e352:	f1c0 0320 	rsb	r3, r0, #32
 800e356:	2b04      	cmp	r3, #4
 800e358:	dd6b      	ble.n	800e432 <_dtoa_r+0x8e2>
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	f1c0 001c 	rsb	r0, r0, #28
 800e360:	4403      	add	r3, r0
 800e362:	4480      	add	r8, r0
 800e364:	4406      	add	r6, r0
 800e366:	9308      	str	r3, [sp, #32]
 800e368:	f1b8 0f00 	cmp.w	r8, #0
 800e36c:	dd05      	ble.n	800e37a <_dtoa_r+0x82a>
 800e36e:	4649      	mov	r1, r9
 800e370:	4642      	mov	r2, r8
 800e372:	4658      	mov	r0, fp
 800e374:	f000 fcbe 	bl	800ecf4 <__lshift>
 800e378:	4681      	mov	r9, r0
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	dd05      	ble.n	800e38c <_dtoa_r+0x83c>
 800e380:	4621      	mov	r1, r4
 800e382:	461a      	mov	r2, r3
 800e384:	4658      	mov	r0, fp
 800e386:	f000 fcb5 	bl	800ecf4 <__lshift>
 800e38a:	4604      	mov	r4, r0
 800e38c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d059      	beq.n	800e446 <_dtoa_r+0x8f6>
 800e392:	4621      	mov	r1, r4
 800e394:	4648      	mov	r0, r9
 800e396:	f000 fd19 	bl	800edcc <__mcmp>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	da53      	bge.n	800e446 <_dtoa_r+0x8f6>
 800e39e:	1e7b      	subs	r3, r7, #1
 800e3a0:	9304      	str	r3, [sp, #16]
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	220a      	movs	r2, #10
 800e3a8:	4658      	mov	r0, fp
 800e3aa:	f000 faf7 	bl	800e99c <__multadd>
 800e3ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3b0:	4681      	mov	r9, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 8172 	beq.w	800e69c <_dtoa_r+0xb4c>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	220a      	movs	r2, #10
 800e3be:	4658      	mov	r0, fp
 800e3c0:	f000 faec 	bl	800e99c <__multadd>
 800e3c4:	9b00      	ldr	r3, [sp, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	dc67      	bgt.n	800e49c <_dtoa_r+0x94c>
 800e3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	dc41      	bgt.n	800e456 <_dtoa_r+0x906>
 800e3d2:	e063      	b.n	800e49c <_dtoa_r+0x94c>
 800e3d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e3da:	e746      	b.n	800e26a <_dtoa_r+0x71a>
 800e3dc:	9b07      	ldr	r3, [sp, #28]
 800e3de:	1e5c      	subs	r4, r3, #1
 800e3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3e2:	42a3      	cmp	r3, r4
 800e3e4:	bfbf      	itttt	lt
 800e3e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e3e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e3ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e3ec:	1ae3      	sublt	r3, r4, r3
 800e3ee:	bfb4      	ite	lt
 800e3f0:	18d2      	addlt	r2, r2, r3
 800e3f2:	1b1c      	subge	r4, r3, r4
 800e3f4:	9b07      	ldr	r3, [sp, #28]
 800e3f6:	bfbc      	itt	lt
 800e3f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e3fa:	2400      	movlt	r4, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	bfb5      	itete	lt
 800e400:	eba8 0603 	sublt.w	r6, r8, r3
 800e404:	9b07      	ldrge	r3, [sp, #28]
 800e406:	2300      	movlt	r3, #0
 800e408:	4646      	movge	r6, r8
 800e40a:	e730      	b.n	800e26e <_dtoa_r+0x71e>
 800e40c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e40e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e410:	4646      	mov	r6, r8
 800e412:	e735      	b.n	800e280 <_dtoa_r+0x730>
 800e414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e416:	e75c      	b.n	800e2d2 <_dtoa_r+0x782>
 800e418:	2300      	movs	r3, #0
 800e41a:	e788      	b.n	800e32e <_dtoa_r+0x7de>
 800e41c:	3fe00000 	.word	0x3fe00000
 800e420:	40240000 	.word	0x40240000
 800e424:	40140000 	.word	0x40140000
 800e428:	9b02      	ldr	r3, [sp, #8]
 800e42a:	e780      	b.n	800e32e <_dtoa_r+0x7de>
 800e42c:	2300      	movs	r3, #0
 800e42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e430:	e782      	b.n	800e338 <_dtoa_r+0x7e8>
 800e432:	d099      	beq.n	800e368 <_dtoa_r+0x818>
 800e434:	9a08      	ldr	r2, [sp, #32]
 800e436:	331c      	adds	r3, #28
 800e438:	441a      	add	r2, r3
 800e43a:	4498      	add	r8, r3
 800e43c:	441e      	add	r6, r3
 800e43e:	9208      	str	r2, [sp, #32]
 800e440:	e792      	b.n	800e368 <_dtoa_r+0x818>
 800e442:	4603      	mov	r3, r0
 800e444:	e7f6      	b.n	800e434 <_dtoa_r+0x8e4>
 800e446:	9b07      	ldr	r3, [sp, #28]
 800e448:	9704      	str	r7, [sp, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	dc20      	bgt.n	800e490 <_dtoa_r+0x940>
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e452:	2b02      	cmp	r3, #2
 800e454:	dd1e      	ble.n	800e494 <_dtoa_r+0x944>
 800e456:	9b00      	ldr	r3, [sp, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f47f aec0 	bne.w	800e1de <_dtoa_r+0x68e>
 800e45e:	4621      	mov	r1, r4
 800e460:	2205      	movs	r2, #5
 800e462:	4658      	mov	r0, fp
 800e464:	f000 fa9a 	bl	800e99c <__multadd>
 800e468:	4601      	mov	r1, r0
 800e46a:	4604      	mov	r4, r0
 800e46c:	4648      	mov	r0, r9
 800e46e:	f000 fcad 	bl	800edcc <__mcmp>
 800e472:	2800      	cmp	r0, #0
 800e474:	f77f aeb3 	ble.w	800e1de <_dtoa_r+0x68e>
 800e478:	4656      	mov	r6, sl
 800e47a:	2331      	movs	r3, #49	@ 0x31
 800e47c:	f806 3b01 	strb.w	r3, [r6], #1
 800e480:	9b04      	ldr	r3, [sp, #16]
 800e482:	3301      	adds	r3, #1
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	e6ae      	b.n	800e1e6 <_dtoa_r+0x696>
 800e488:	9c07      	ldr	r4, [sp, #28]
 800e48a:	9704      	str	r7, [sp, #16]
 800e48c:	4625      	mov	r5, r4
 800e48e:	e7f3      	b.n	800e478 <_dtoa_r+0x928>
 800e490:	9b07      	ldr	r3, [sp, #28]
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 8104 	beq.w	800e6a4 <_dtoa_r+0xb54>
 800e49c:	2e00      	cmp	r6, #0
 800e49e:	dd05      	ble.n	800e4ac <_dtoa_r+0x95c>
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	f000 fc25 	bl	800ecf4 <__lshift>
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d05a      	beq.n	800e568 <_dtoa_r+0xa18>
 800e4b2:	6869      	ldr	r1, [r5, #4]
 800e4b4:	4658      	mov	r0, fp
 800e4b6:	f000 fa0f 	bl	800e8d8 <_Balloc>
 800e4ba:	4606      	mov	r6, r0
 800e4bc:	b928      	cbnz	r0, 800e4ca <_dtoa_r+0x97a>
 800e4be:	4b84      	ldr	r3, [pc, #528]	@ (800e6d0 <_dtoa_r+0xb80>)
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e4c6:	f7ff bb5a 	b.w	800db7e <_dtoa_r+0x2e>
 800e4ca:	692a      	ldr	r2, [r5, #16]
 800e4cc:	3202      	adds	r2, #2
 800e4ce:	0092      	lsls	r2, r2, #2
 800e4d0:	f105 010c 	add.w	r1, r5, #12
 800e4d4:	300c      	adds	r0, #12
 800e4d6:	f001 f987 	bl	800f7e8 <memcpy>
 800e4da:	2201      	movs	r2, #1
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4658      	mov	r0, fp
 800e4e0:	f000 fc08 	bl	800ecf4 <__lshift>
 800e4e4:	f10a 0301 	add.w	r3, sl, #1
 800e4e8:	9307      	str	r3, [sp, #28]
 800e4ea:	9b00      	ldr	r3, [sp, #0]
 800e4ec:	4453      	add	r3, sl
 800e4ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4f0:	9b02      	ldr	r3, [sp, #8]
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	462f      	mov	r7, r5
 800e4f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	9b07      	ldr	r3, [sp, #28]
 800e4fe:	4621      	mov	r1, r4
 800e500:	3b01      	subs	r3, #1
 800e502:	4648      	mov	r0, r9
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	f7ff fa99 	bl	800da3c <quorem>
 800e50a:	4639      	mov	r1, r7
 800e50c:	9002      	str	r0, [sp, #8]
 800e50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e512:	4648      	mov	r0, r9
 800e514:	f000 fc5a 	bl	800edcc <__mcmp>
 800e518:	462a      	mov	r2, r5
 800e51a:	9008      	str	r0, [sp, #32]
 800e51c:	4621      	mov	r1, r4
 800e51e:	4658      	mov	r0, fp
 800e520:	f000 fc70 	bl	800ee04 <__mdiff>
 800e524:	68c2      	ldr	r2, [r0, #12]
 800e526:	4606      	mov	r6, r0
 800e528:	bb02      	cbnz	r2, 800e56c <_dtoa_r+0xa1c>
 800e52a:	4601      	mov	r1, r0
 800e52c:	4648      	mov	r0, r9
 800e52e:	f000 fc4d 	bl	800edcc <__mcmp>
 800e532:	4602      	mov	r2, r0
 800e534:	4631      	mov	r1, r6
 800e536:	4658      	mov	r0, fp
 800e538:	920e      	str	r2, [sp, #56]	@ 0x38
 800e53a:	f000 fa0d 	bl	800e958 <_Bfree>
 800e53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e540:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e542:	9e07      	ldr	r6, [sp, #28]
 800e544:	ea43 0102 	orr.w	r1, r3, r2
 800e548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e54a:	4319      	orrs	r1, r3
 800e54c:	d110      	bne.n	800e570 <_dtoa_r+0xa20>
 800e54e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e552:	d029      	beq.n	800e5a8 <_dtoa_r+0xa58>
 800e554:	9b08      	ldr	r3, [sp, #32]
 800e556:	2b00      	cmp	r3, #0
 800e558:	dd02      	ble.n	800e560 <_dtoa_r+0xa10>
 800e55a:	9b02      	ldr	r3, [sp, #8]
 800e55c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e560:	9b00      	ldr	r3, [sp, #0]
 800e562:	f883 8000 	strb.w	r8, [r3]
 800e566:	e63f      	b.n	800e1e8 <_dtoa_r+0x698>
 800e568:	4628      	mov	r0, r5
 800e56a:	e7bb      	b.n	800e4e4 <_dtoa_r+0x994>
 800e56c:	2201      	movs	r2, #1
 800e56e:	e7e1      	b.n	800e534 <_dtoa_r+0x9e4>
 800e570:	9b08      	ldr	r3, [sp, #32]
 800e572:	2b00      	cmp	r3, #0
 800e574:	db04      	blt.n	800e580 <_dtoa_r+0xa30>
 800e576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e578:	430b      	orrs	r3, r1
 800e57a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e57c:	430b      	orrs	r3, r1
 800e57e:	d120      	bne.n	800e5c2 <_dtoa_r+0xa72>
 800e580:	2a00      	cmp	r2, #0
 800e582:	dded      	ble.n	800e560 <_dtoa_r+0xa10>
 800e584:	4649      	mov	r1, r9
 800e586:	2201      	movs	r2, #1
 800e588:	4658      	mov	r0, fp
 800e58a:	f000 fbb3 	bl	800ecf4 <__lshift>
 800e58e:	4621      	mov	r1, r4
 800e590:	4681      	mov	r9, r0
 800e592:	f000 fc1b 	bl	800edcc <__mcmp>
 800e596:	2800      	cmp	r0, #0
 800e598:	dc03      	bgt.n	800e5a2 <_dtoa_r+0xa52>
 800e59a:	d1e1      	bne.n	800e560 <_dtoa_r+0xa10>
 800e59c:	f018 0f01 	tst.w	r8, #1
 800e5a0:	d0de      	beq.n	800e560 <_dtoa_r+0xa10>
 800e5a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e5a6:	d1d8      	bne.n	800e55a <_dtoa_r+0xa0a>
 800e5a8:	9a00      	ldr	r2, [sp, #0]
 800e5aa:	2339      	movs	r3, #57	@ 0x39
 800e5ac:	7013      	strb	r3, [r2, #0]
 800e5ae:	4633      	mov	r3, r6
 800e5b0:	461e      	mov	r6, r3
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e5b8:	2a39      	cmp	r2, #57	@ 0x39
 800e5ba:	d052      	beq.n	800e662 <_dtoa_r+0xb12>
 800e5bc:	3201      	adds	r2, #1
 800e5be:	701a      	strb	r2, [r3, #0]
 800e5c0:	e612      	b.n	800e1e8 <_dtoa_r+0x698>
 800e5c2:	2a00      	cmp	r2, #0
 800e5c4:	dd07      	ble.n	800e5d6 <_dtoa_r+0xa86>
 800e5c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e5ca:	d0ed      	beq.n	800e5a8 <_dtoa_r+0xa58>
 800e5cc:	9a00      	ldr	r2, [sp, #0]
 800e5ce:	f108 0301 	add.w	r3, r8, #1
 800e5d2:	7013      	strb	r3, [r2, #0]
 800e5d4:	e608      	b.n	800e1e8 <_dtoa_r+0x698>
 800e5d6:	9b07      	ldr	r3, [sp, #28]
 800e5d8:	9a07      	ldr	r2, [sp, #28]
 800e5da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d028      	beq.n	800e636 <_dtoa_r+0xae6>
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	220a      	movs	r2, #10
 800e5ea:	4658      	mov	r0, fp
 800e5ec:	f000 f9d6 	bl	800e99c <__multadd>
 800e5f0:	42af      	cmp	r7, r5
 800e5f2:	4681      	mov	r9, r0
 800e5f4:	f04f 0300 	mov.w	r3, #0
 800e5f8:	f04f 020a 	mov.w	r2, #10
 800e5fc:	4639      	mov	r1, r7
 800e5fe:	4658      	mov	r0, fp
 800e600:	d107      	bne.n	800e612 <_dtoa_r+0xac2>
 800e602:	f000 f9cb 	bl	800e99c <__multadd>
 800e606:	4607      	mov	r7, r0
 800e608:	4605      	mov	r5, r0
 800e60a:	9b07      	ldr	r3, [sp, #28]
 800e60c:	3301      	adds	r3, #1
 800e60e:	9307      	str	r3, [sp, #28]
 800e610:	e774      	b.n	800e4fc <_dtoa_r+0x9ac>
 800e612:	f000 f9c3 	bl	800e99c <__multadd>
 800e616:	4629      	mov	r1, r5
 800e618:	4607      	mov	r7, r0
 800e61a:	2300      	movs	r3, #0
 800e61c:	220a      	movs	r2, #10
 800e61e:	4658      	mov	r0, fp
 800e620:	f000 f9bc 	bl	800e99c <__multadd>
 800e624:	4605      	mov	r5, r0
 800e626:	e7f0      	b.n	800e60a <_dtoa_r+0xaba>
 800e628:	9b00      	ldr	r3, [sp, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bfcc      	ite	gt
 800e62e:	461e      	movgt	r6, r3
 800e630:	2601      	movle	r6, #1
 800e632:	4456      	add	r6, sl
 800e634:	2700      	movs	r7, #0
 800e636:	4649      	mov	r1, r9
 800e638:	2201      	movs	r2, #1
 800e63a:	4658      	mov	r0, fp
 800e63c:	f000 fb5a 	bl	800ecf4 <__lshift>
 800e640:	4621      	mov	r1, r4
 800e642:	4681      	mov	r9, r0
 800e644:	f000 fbc2 	bl	800edcc <__mcmp>
 800e648:	2800      	cmp	r0, #0
 800e64a:	dcb0      	bgt.n	800e5ae <_dtoa_r+0xa5e>
 800e64c:	d102      	bne.n	800e654 <_dtoa_r+0xb04>
 800e64e:	f018 0f01 	tst.w	r8, #1
 800e652:	d1ac      	bne.n	800e5ae <_dtoa_r+0xa5e>
 800e654:	4633      	mov	r3, r6
 800e656:	461e      	mov	r6, r3
 800e658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e65c:	2a30      	cmp	r2, #48	@ 0x30
 800e65e:	d0fa      	beq.n	800e656 <_dtoa_r+0xb06>
 800e660:	e5c2      	b.n	800e1e8 <_dtoa_r+0x698>
 800e662:	459a      	cmp	sl, r3
 800e664:	d1a4      	bne.n	800e5b0 <_dtoa_r+0xa60>
 800e666:	9b04      	ldr	r3, [sp, #16]
 800e668:	3301      	adds	r3, #1
 800e66a:	9304      	str	r3, [sp, #16]
 800e66c:	2331      	movs	r3, #49	@ 0x31
 800e66e:	f88a 3000 	strb.w	r3, [sl]
 800e672:	e5b9      	b.n	800e1e8 <_dtoa_r+0x698>
 800e674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e676:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e6d4 <_dtoa_r+0xb84>
 800e67a:	b11b      	cbz	r3, 800e684 <_dtoa_r+0xb34>
 800e67c:	f10a 0308 	add.w	r3, sl, #8
 800e680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	4650      	mov	r0, sl
 800e686:	b019      	add	sp, #100	@ 0x64
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e68e:	2b01      	cmp	r3, #1
 800e690:	f77f ae37 	ble.w	800e302 <_dtoa_r+0x7b2>
 800e694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e696:	930a      	str	r3, [sp, #40]	@ 0x28
 800e698:	2001      	movs	r0, #1
 800e69a:	e655      	b.n	800e348 <_dtoa_r+0x7f8>
 800e69c:	9b00      	ldr	r3, [sp, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f77f aed6 	ble.w	800e450 <_dtoa_r+0x900>
 800e6a4:	4656      	mov	r6, sl
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4648      	mov	r0, r9
 800e6aa:	f7ff f9c7 	bl	800da3c <quorem>
 800e6ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6b2:	f806 8b01 	strb.w	r8, [r6], #1
 800e6b6:	9b00      	ldr	r3, [sp, #0]
 800e6b8:	eba6 020a 	sub.w	r2, r6, sl
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	ddb3      	ble.n	800e628 <_dtoa_r+0xad8>
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	220a      	movs	r2, #10
 800e6c6:	4658      	mov	r0, fp
 800e6c8:	f000 f968 	bl	800e99c <__multadd>
 800e6cc:	4681      	mov	r9, r0
 800e6ce:	e7ea      	b.n	800e6a6 <_dtoa_r+0xb56>
 800e6d0:	080110b4 	.word	0x080110b4
 800e6d4:	0801104f 	.word	0x0801104f

0800e6d8 <_free_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4605      	mov	r5, r0
 800e6dc:	2900      	cmp	r1, #0
 800e6de:	d041      	beq.n	800e764 <_free_r+0x8c>
 800e6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e4:	1f0c      	subs	r4, r1, #4
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bfb8      	it	lt
 800e6ea:	18e4      	addlt	r4, r4, r3
 800e6ec:	f000 f8e8 	bl	800e8c0 <__malloc_lock>
 800e6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800e768 <_free_r+0x90>)
 800e6f2:	6813      	ldr	r3, [r2, #0]
 800e6f4:	b933      	cbnz	r3, 800e704 <_free_r+0x2c>
 800e6f6:	6063      	str	r3, [r4, #4]
 800e6f8:	6014      	str	r4, [r2, #0]
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e700:	f000 b8e4 	b.w	800e8cc <__malloc_unlock>
 800e704:	42a3      	cmp	r3, r4
 800e706:	d908      	bls.n	800e71a <_free_r+0x42>
 800e708:	6820      	ldr	r0, [r4, #0]
 800e70a:	1821      	adds	r1, r4, r0
 800e70c:	428b      	cmp	r3, r1
 800e70e:	bf01      	itttt	eq
 800e710:	6819      	ldreq	r1, [r3, #0]
 800e712:	685b      	ldreq	r3, [r3, #4]
 800e714:	1809      	addeq	r1, r1, r0
 800e716:	6021      	streq	r1, [r4, #0]
 800e718:	e7ed      	b.n	800e6f6 <_free_r+0x1e>
 800e71a:	461a      	mov	r2, r3
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	b10b      	cbz	r3, 800e724 <_free_r+0x4c>
 800e720:	42a3      	cmp	r3, r4
 800e722:	d9fa      	bls.n	800e71a <_free_r+0x42>
 800e724:	6811      	ldr	r1, [r2, #0]
 800e726:	1850      	adds	r0, r2, r1
 800e728:	42a0      	cmp	r0, r4
 800e72a:	d10b      	bne.n	800e744 <_free_r+0x6c>
 800e72c:	6820      	ldr	r0, [r4, #0]
 800e72e:	4401      	add	r1, r0
 800e730:	1850      	adds	r0, r2, r1
 800e732:	4283      	cmp	r3, r0
 800e734:	6011      	str	r1, [r2, #0]
 800e736:	d1e0      	bne.n	800e6fa <_free_r+0x22>
 800e738:	6818      	ldr	r0, [r3, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	6053      	str	r3, [r2, #4]
 800e73e:	4408      	add	r0, r1
 800e740:	6010      	str	r0, [r2, #0]
 800e742:	e7da      	b.n	800e6fa <_free_r+0x22>
 800e744:	d902      	bls.n	800e74c <_free_r+0x74>
 800e746:	230c      	movs	r3, #12
 800e748:	602b      	str	r3, [r5, #0]
 800e74a:	e7d6      	b.n	800e6fa <_free_r+0x22>
 800e74c:	6820      	ldr	r0, [r4, #0]
 800e74e:	1821      	adds	r1, r4, r0
 800e750:	428b      	cmp	r3, r1
 800e752:	bf04      	itt	eq
 800e754:	6819      	ldreq	r1, [r3, #0]
 800e756:	685b      	ldreq	r3, [r3, #4]
 800e758:	6063      	str	r3, [r4, #4]
 800e75a:	bf04      	itt	eq
 800e75c:	1809      	addeq	r1, r1, r0
 800e75e:	6021      	streq	r1, [r4, #0]
 800e760:	6054      	str	r4, [r2, #4]
 800e762:	e7ca      	b.n	800e6fa <_free_r+0x22>
 800e764:	bd38      	pop	{r3, r4, r5, pc}
 800e766:	bf00      	nop
 800e768:	20001924 	.word	0x20001924

0800e76c <malloc>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	@ (800e778 <malloc+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f000 b825 	b.w	800e7c0 <_malloc_r>
 800e776:	bf00      	nop
 800e778:	20000064 	.word	0x20000064

0800e77c <sbrk_aligned>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4e0f      	ldr	r6, [pc, #60]	@ (800e7bc <sbrk_aligned+0x40>)
 800e780:	460c      	mov	r4, r1
 800e782:	6831      	ldr	r1, [r6, #0]
 800e784:	4605      	mov	r5, r0
 800e786:	b911      	cbnz	r1, 800e78e <sbrk_aligned+0x12>
 800e788:	f001 f81e 	bl	800f7c8 <_sbrk_r>
 800e78c:	6030      	str	r0, [r6, #0]
 800e78e:	4621      	mov	r1, r4
 800e790:	4628      	mov	r0, r5
 800e792:	f001 f819 	bl	800f7c8 <_sbrk_r>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d103      	bne.n	800e7a2 <sbrk_aligned+0x26>
 800e79a:	f04f 34ff 	mov.w	r4, #4294967295
 800e79e:	4620      	mov	r0, r4
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	1cc4      	adds	r4, r0, #3
 800e7a4:	f024 0403 	bic.w	r4, r4, #3
 800e7a8:	42a0      	cmp	r0, r4
 800e7aa:	d0f8      	beq.n	800e79e <sbrk_aligned+0x22>
 800e7ac:	1a21      	subs	r1, r4, r0
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f001 f80a 	bl	800f7c8 <_sbrk_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	d1f2      	bne.n	800e79e <sbrk_aligned+0x22>
 800e7b8:	e7ef      	b.n	800e79a <sbrk_aligned+0x1e>
 800e7ba:	bf00      	nop
 800e7bc:	20001920 	.word	0x20001920

0800e7c0 <_malloc_r>:
 800e7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	1ccd      	adds	r5, r1, #3
 800e7c6:	f025 0503 	bic.w	r5, r5, #3
 800e7ca:	3508      	adds	r5, #8
 800e7cc:	2d0c      	cmp	r5, #12
 800e7ce:	bf38      	it	cc
 800e7d0:	250c      	movcc	r5, #12
 800e7d2:	2d00      	cmp	r5, #0
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	db01      	blt.n	800e7dc <_malloc_r+0x1c>
 800e7d8:	42a9      	cmp	r1, r5
 800e7da:	d904      	bls.n	800e7e6 <_malloc_r+0x26>
 800e7dc:	230c      	movs	r3, #12
 800e7de:	6033      	str	r3, [r6, #0]
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8bc <_malloc_r+0xfc>
 800e7ea:	f000 f869 	bl	800e8c0 <__malloc_lock>
 800e7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f2:	461c      	mov	r4, r3
 800e7f4:	bb44      	cbnz	r4, 800e848 <_malloc_r+0x88>
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7ff ffbf 	bl	800e77c <sbrk_aligned>
 800e7fe:	1c43      	adds	r3, r0, #1
 800e800:	4604      	mov	r4, r0
 800e802:	d158      	bne.n	800e8b6 <_malloc_r+0xf6>
 800e804:	f8d8 4000 	ldr.w	r4, [r8]
 800e808:	4627      	mov	r7, r4
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	d143      	bne.n	800e896 <_malloc_r+0xd6>
 800e80e:	2c00      	cmp	r4, #0
 800e810:	d04b      	beq.n	800e8aa <_malloc_r+0xea>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	4639      	mov	r1, r7
 800e816:	4630      	mov	r0, r6
 800e818:	eb04 0903 	add.w	r9, r4, r3
 800e81c:	f000 ffd4 	bl	800f7c8 <_sbrk_r>
 800e820:	4581      	cmp	r9, r0
 800e822:	d142      	bne.n	800e8aa <_malloc_r+0xea>
 800e824:	6821      	ldr	r1, [r4, #0]
 800e826:	1a6d      	subs	r5, r5, r1
 800e828:	4629      	mov	r1, r5
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7ff ffa6 	bl	800e77c <sbrk_aligned>
 800e830:	3001      	adds	r0, #1
 800e832:	d03a      	beq.n	800e8aa <_malloc_r+0xea>
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	442b      	add	r3, r5
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	f8d8 3000 	ldr.w	r3, [r8]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	bb62      	cbnz	r2, 800e89c <_malloc_r+0xdc>
 800e842:	f8c8 7000 	str.w	r7, [r8]
 800e846:	e00f      	b.n	800e868 <_malloc_r+0xa8>
 800e848:	6822      	ldr	r2, [r4, #0]
 800e84a:	1b52      	subs	r2, r2, r5
 800e84c:	d420      	bmi.n	800e890 <_malloc_r+0xd0>
 800e84e:	2a0b      	cmp	r2, #11
 800e850:	d917      	bls.n	800e882 <_malloc_r+0xc2>
 800e852:	1961      	adds	r1, r4, r5
 800e854:	42a3      	cmp	r3, r4
 800e856:	6025      	str	r5, [r4, #0]
 800e858:	bf18      	it	ne
 800e85a:	6059      	strne	r1, [r3, #4]
 800e85c:	6863      	ldr	r3, [r4, #4]
 800e85e:	bf08      	it	eq
 800e860:	f8c8 1000 	streq.w	r1, [r8]
 800e864:	5162      	str	r2, [r4, r5]
 800e866:	604b      	str	r3, [r1, #4]
 800e868:	4630      	mov	r0, r6
 800e86a:	f000 f82f 	bl	800e8cc <__malloc_unlock>
 800e86e:	f104 000b 	add.w	r0, r4, #11
 800e872:	1d23      	adds	r3, r4, #4
 800e874:	f020 0007 	bic.w	r0, r0, #7
 800e878:	1ac2      	subs	r2, r0, r3
 800e87a:	bf1c      	itt	ne
 800e87c:	1a1b      	subne	r3, r3, r0
 800e87e:	50a3      	strne	r3, [r4, r2]
 800e880:	e7af      	b.n	800e7e2 <_malloc_r+0x22>
 800e882:	6862      	ldr	r2, [r4, #4]
 800e884:	42a3      	cmp	r3, r4
 800e886:	bf0c      	ite	eq
 800e888:	f8c8 2000 	streq.w	r2, [r8]
 800e88c:	605a      	strne	r2, [r3, #4]
 800e88e:	e7eb      	b.n	800e868 <_malloc_r+0xa8>
 800e890:	4623      	mov	r3, r4
 800e892:	6864      	ldr	r4, [r4, #4]
 800e894:	e7ae      	b.n	800e7f4 <_malloc_r+0x34>
 800e896:	463c      	mov	r4, r7
 800e898:	687f      	ldr	r7, [r7, #4]
 800e89a:	e7b6      	b.n	800e80a <_malloc_r+0x4a>
 800e89c:	461a      	mov	r2, r3
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	d1fb      	bne.n	800e89c <_malloc_r+0xdc>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	6053      	str	r3, [r2, #4]
 800e8a8:	e7de      	b.n	800e868 <_malloc_r+0xa8>
 800e8aa:	230c      	movs	r3, #12
 800e8ac:	6033      	str	r3, [r6, #0]
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f000 f80c 	bl	800e8cc <__malloc_unlock>
 800e8b4:	e794      	b.n	800e7e0 <_malloc_r+0x20>
 800e8b6:	6005      	str	r5, [r0, #0]
 800e8b8:	e7d6      	b.n	800e868 <_malloc_r+0xa8>
 800e8ba:	bf00      	nop
 800e8bc:	20001924 	.word	0x20001924

0800e8c0 <__malloc_lock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	@ (800e8c8 <__malloc_lock+0x8>)
 800e8c2:	f7ff b892 	b.w	800d9ea <__retarget_lock_acquire_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	2000191c 	.word	0x2000191c

0800e8cc <__malloc_unlock>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	@ (800e8d4 <__malloc_unlock+0x8>)
 800e8ce:	f7ff b88d 	b.w	800d9ec <__retarget_lock_release_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	2000191c 	.word	0x2000191c

0800e8d8 <_Balloc>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	69c6      	ldr	r6, [r0, #28]
 800e8dc:	4604      	mov	r4, r0
 800e8de:	460d      	mov	r5, r1
 800e8e0:	b976      	cbnz	r6, 800e900 <_Balloc+0x28>
 800e8e2:	2010      	movs	r0, #16
 800e8e4:	f7ff ff42 	bl	800e76c <malloc>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	61e0      	str	r0, [r4, #28]
 800e8ec:	b920      	cbnz	r0, 800e8f8 <_Balloc+0x20>
 800e8ee:	4b18      	ldr	r3, [pc, #96]	@ (800e950 <_Balloc+0x78>)
 800e8f0:	4818      	ldr	r0, [pc, #96]	@ (800e954 <_Balloc+0x7c>)
 800e8f2:	216b      	movs	r1, #107	@ 0x6b
 800e8f4:	f7ff f884 	bl	800da00 <__assert_func>
 800e8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8fc:	6006      	str	r6, [r0, #0]
 800e8fe:	60c6      	str	r6, [r0, #12]
 800e900:	69e6      	ldr	r6, [r4, #28]
 800e902:	68f3      	ldr	r3, [r6, #12]
 800e904:	b183      	cbz	r3, 800e928 <_Balloc+0x50>
 800e906:	69e3      	ldr	r3, [r4, #28]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e90e:	b9b8      	cbnz	r0, 800e940 <_Balloc+0x68>
 800e910:	2101      	movs	r1, #1
 800e912:	fa01 f605 	lsl.w	r6, r1, r5
 800e916:	1d72      	adds	r2, r6, #5
 800e918:	0092      	lsls	r2, r2, #2
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 ff79 	bl	800f812 <_calloc_r>
 800e920:	b160      	cbz	r0, 800e93c <_Balloc+0x64>
 800e922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e926:	e00e      	b.n	800e946 <_Balloc+0x6e>
 800e928:	2221      	movs	r2, #33	@ 0x21
 800e92a:	2104      	movs	r1, #4
 800e92c:	4620      	mov	r0, r4
 800e92e:	f000 ff70 	bl	800f812 <_calloc_r>
 800e932:	69e3      	ldr	r3, [r4, #28]
 800e934:	60f0      	str	r0, [r6, #12]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e4      	bne.n	800e906 <_Balloc+0x2e>
 800e93c:	2000      	movs	r0, #0
 800e93e:	bd70      	pop	{r4, r5, r6, pc}
 800e940:	6802      	ldr	r2, [r0, #0]
 800e942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e946:	2300      	movs	r3, #0
 800e948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e94c:	e7f7      	b.n	800e93e <_Balloc+0x66>
 800e94e:	bf00      	nop
 800e950:	08010f70 	.word	0x08010f70
 800e954:	080110c5 	.word	0x080110c5

0800e958 <_Bfree>:
 800e958:	b570      	push	{r4, r5, r6, lr}
 800e95a:	69c6      	ldr	r6, [r0, #28]
 800e95c:	4605      	mov	r5, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	b976      	cbnz	r6, 800e980 <_Bfree+0x28>
 800e962:	2010      	movs	r0, #16
 800e964:	f7ff ff02 	bl	800e76c <malloc>
 800e968:	4602      	mov	r2, r0
 800e96a:	61e8      	str	r0, [r5, #28]
 800e96c:	b920      	cbnz	r0, 800e978 <_Bfree+0x20>
 800e96e:	4b09      	ldr	r3, [pc, #36]	@ (800e994 <_Bfree+0x3c>)
 800e970:	4809      	ldr	r0, [pc, #36]	@ (800e998 <_Bfree+0x40>)
 800e972:	218f      	movs	r1, #143	@ 0x8f
 800e974:	f7ff f844 	bl	800da00 <__assert_func>
 800e978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e97c:	6006      	str	r6, [r0, #0]
 800e97e:	60c6      	str	r6, [r0, #12]
 800e980:	b13c      	cbz	r4, 800e992 <_Bfree+0x3a>
 800e982:	69eb      	ldr	r3, [r5, #28]
 800e984:	6862      	ldr	r2, [r4, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e98c:	6021      	str	r1, [r4, #0]
 800e98e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e992:	bd70      	pop	{r4, r5, r6, pc}
 800e994:	08010f70 	.word	0x08010f70
 800e998:	080110c5 	.word	0x080110c5

0800e99c <__multadd>:
 800e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a0:	690d      	ldr	r5, [r1, #16]
 800e9a2:	4607      	mov	r7, r0
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	461e      	mov	r6, r3
 800e9a8:	f101 0c14 	add.w	ip, r1, #20
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e9b2:	b299      	uxth	r1, r3
 800e9b4:	fb02 6101 	mla	r1, r2, r1, r6
 800e9b8:	0c1e      	lsrs	r6, r3, #16
 800e9ba:	0c0b      	lsrs	r3, r1, #16
 800e9bc:	fb02 3306 	mla	r3, r2, r6, r3
 800e9c0:	b289      	uxth	r1, r1
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9c8:	4285      	cmp	r5, r0
 800e9ca:	f84c 1b04 	str.w	r1, [ip], #4
 800e9ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e9d2:	dcec      	bgt.n	800e9ae <__multadd+0x12>
 800e9d4:	b30e      	cbz	r6, 800ea1a <__multadd+0x7e>
 800e9d6:	68a3      	ldr	r3, [r4, #8]
 800e9d8:	42ab      	cmp	r3, r5
 800e9da:	dc19      	bgt.n	800ea10 <__multadd+0x74>
 800e9dc:	6861      	ldr	r1, [r4, #4]
 800e9de:	4638      	mov	r0, r7
 800e9e0:	3101      	adds	r1, #1
 800e9e2:	f7ff ff79 	bl	800e8d8 <_Balloc>
 800e9e6:	4680      	mov	r8, r0
 800e9e8:	b928      	cbnz	r0, 800e9f6 <__multadd+0x5a>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800ea20 <__multadd+0x84>)
 800e9ee:	480d      	ldr	r0, [pc, #52]	@ (800ea24 <__multadd+0x88>)
 800e9f0:	21ba      	movs	r1, #186	@ 0xba
 800e9f2:	f7ff f805 	bl	800da00 <__assert_func>
 800e9f6:	6922      	ldr	r2, [r4, #16]
 800e9f8:	3202      	adds	r2, #2
 800e9fa:	f104 010c 	add.w	r1, r4, #12
 800e9fe:	0092      	lsls	r2, r2, #2
 800ea00:	300c      	adds	r0, #12
 800ea02:	f000 fef1 	bl	800f7e8 <memcpy>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff ffa5 	bl	800e958 <_Bfree>
 800ea0e:	4644      	mov	r4, r8
 800ea10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea14:	3501      	adds	r5, #1
 800ea16:	615e      	str	r6, [r3, #20]
 800ea18:	6125      	str	r5, [r4, #16]
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	080110b4 	.word	0x080110b4
 800ea24:	080110c5 	.word	0x080110c5

0800ea28 <__hi0bits>:
 800ea28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	bf36      	itet	cc
 800ea30:	0403      	lslcc	r3, r0, #16
 800ea32:	2000      	movcs	r0, #0
 800ea34:	2010      	movcc	r0, #16
 800ea36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea3a:	bf3c      	itt	cc
 800ea3c:	021b      	lslcc	r3, r3, #8
 800ea3e:	3008      	addcc	r0, #8
 800ea40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea44:	bf3c      	itt	cc
 800ea46:	011b      	lslcc	r3, r3, #4
 800ea48:	3004      	addcc	r0, #4
 800ea4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea4e:	bf3c      	itt	cc
 800ea50:	009b      	lslcc	r3, r3, #2
 800ea52:	3002      	addcc	r0, #2
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	db05      	blt.n	800ea64 <__hi0bits+0x3c>
 800ea58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea5c:	f100 0001 	add.w	r0, r0, #1
 800ea60:	bf08      	it	eq
 800ea62:	2020      	moveq	r0, #32
 800ea64:	4770      	bx	lr

0800ea66 <__lo0bits>:
 800ea66:	6803      	ldr	r3, [r0, #0]
 800ea68:	4602      	mov	r2, r0
 800ea6a:	f013 0007 	ands.w	r0, r3, #7
 800ea6e:	d00b      	beq.n	800ea88 <__lo0bits+0x22>
 800ea70:	07d9      	lsls	r1, r3, #31
 800ea72:	d421      	bmi.n	800eab8 <__lo0bits+0x52>
 800ea74:	0798      	lsls	r0, r3, #30
 800ea76:	bf49      	itett	mi
 800ea78:	085b      	lsrmi	r3, r3, #1
 800ea7a:	089b      	lsrpl	r3, r3, #2
 800ea7c:	2001      	movmi	r0, #1
 800ea7e:	6013      	strmi	r3, [r2, #0]
 800ea80:	bf5c      	itt	pl
 800ea82:	6013      	strpl	r3, [r2, #0]
 800ea84:	2002      	movpl	r0, #2
 800ea86:	4770      	bx	lr
 800ea88:	b299      	uxth	r1, r3
 800ea8a:	b909      	cbnz	r1, 800ea90 <__lo0bits+0x2a>
 800ea8c:	0c1b      	lsrs	r3, r3, #16
 800ea8e:	2010      	movs	r0, #16
 800ea90:	b2d9      	uxtb	r1, r3
 800ea92:	b909      	cbnz	r1, 800ea98 <__lo0bits+0x32>
 800ea94:	3008      	adds	r0, #8
 800ea96:	0a1b      	lsrs	r3, r3, #8
 800ea98:	0719      	lsls	r1, r3, #28
 800ea9a:	bf04      	itt	eq
 800ea9c:	091b      	lsreq	r3, r3, #4
 800ea9e:	3004      	addeq	r0, #4
 800eaa0:	0799      	lsls	r1, r3, #30
 800eaa2:	bf04      	itt	eq
 800eaa4:	089b      	lsreq	r3, r3, #2
 800eaa6:	3002      	addeq	r0, #2
 800eaa8:	07d9      	lsls	r1, r3, #31
 800eaaa:	d403      	bmi.n	800eab4 <__lo0bits+0x4e>
 800eaac:	085b      	lsrs	r3, r3, #1
 800eaae:	f100 0001 	add.w	r0, r0, #1
 800eab2:	d003      	beq.n	800eabc <__lo0bits+0x56>
 800eab4:	6013      	str	r3, [r2, #0]
 800eab6:	4770      	bx	lr
 800eab8:	2000      	movs	r0, #0
 800eaba:	4770      	bx	lr
 800eabc:	2020      	movs	r0, #32
 800eabe:	4770      	bx	lr

0800eac0 <__i2b>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	2101      	movs	r1, #1
 800eac6:	f7ff ff07 	bl	800e8d8 <_Balloc>
 800eaca:	4602      	mov	r2, r0
 800eacc:	b928      	cbnz	r0, 800eada <__i2b+0x1a>
 800eace:	4b05      	ldr	r3, [pc, #20]	@ (800eae4 <__i2b+0x24>)
 800ead0:	4805      	ldr	r0, [pc, #20]	@ (800eae8 <__i2b+0x28>)
 800ead2:	f240 1145 	movw	r1, #325	@ 0x145
 800ead6:	f7fe ff93 	bl	800da00 <__assert_func>
 800eada:	2301      	movs	r3, #1
 800eadc:	6144      	str	r4, [r0, #20]
 800eade:	6103      	str	r3, [r0, #16]
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	080110b4 	.word	0x080110b4
 800eae8:	080110c5 	.word	0x080110c5

0800eaec <__multiply>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4614      	mov	r4, r2
 800eaf2:	690a      	ldr	r2, [r1, #16]
 800eaf4:	6923      	ldr	r3, [r4, #16]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	bfa8      	it	ge
 800eafa:	4623      	movge	r3, r4
 800eafc:	460f      	mov	r7, r1
 800eafe:	bfa4      	itt	ge
 800eb00:	460c      	movge	r4, r1
 800eb02:	461f      	movge	r7, r3
 800eb04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eb0c:	68a3      	ldr	r3, [r4, #8]
 800eb0e:	6861      	ldr	r1, [r4, #4]
 800eb10:	eb0a 0609 	add.w	r6, sl, r9
 800eb14:	42b3      	cmp	r3, r6
 800eb16:	b085      	sub	sp, #20
 800eb18:	bfb8      	it	lt
 800eb1a:	3101      	addlt	r1, #1
 800eb1c:	f7ff fedc 	bl	800e8d8 <_Balloc>
 800eb20:	b930      	cbnz	r0, 800eb30 <__multiply+0x44>
 800eb22:	4602      	mov	r2, r0
 800eb24:	4b44      	ldr	r3, [pc, #272]	@ (800ec38 <__multiply+0x14c>)
 800eb26:	4845      	ldr	r0, [pc, #276]	@ (800ec3c <__multiply+0x150>)
 800eb28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb2c:	f7fe ff68 	bl	800da00 <__assert_func>
 800eb30:	f100 0514 	add.w	r5, r0, #20
 800eb34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb38:	462b      	mov	r3, r5
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4543      	cmp	r3, r8
 800eb3e:	d321      	bcc.n	800eb84 <__multiply+0x98>
 800eb40:	f107 0114 	add.w	r1, r7, #20
 800eb44:	f104 0214 	add.w	r2, r4, #20
 800eb48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb50:	9302      	str	r3, [sp, #8]
 800eb52:	1b13      	subs	r3, r2, r4
 800eb54:	3b15      	subs	r3, #21
 800eb56:	f023 0303 	bic.w	r3, r3, #3
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	f104 0715 	add.w	r7, r4, #21
 800eb60:	42ba      	cmp	r2, r7
 800eb62:	bf38      	it	cc
 800eb64:	2304      	movcc	r3, #4
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	9103      	str	r1, [sp, #12]
 800eb6c:	428b      	cmp	r3, r1
 800eb6e:	d80c      	bhi.n	800eb8a <__multiply+0x9e>
 800eb70:	2e00      	cmp	r6, #0
 800eb72:	dd03      	ble.n	800eb7c <__multiply+0x90>
 800eb74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d05b      	beq.n	800ec34 <__multiply+0x148>
 800eb7c:	6106      	str	r6, [r0, #16]
 800eb7e:	b005      	add	sp, #20
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	f843 2b04 	str.w	r2, [r3], #4
 800eb88:	e7d8      	b.n	800eb3c <__multiply+0x50>
 800eb8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb8e:	f1ba 0f00 	cmp.w	sl, #0
 800eb92:	d024      	beq.n	800ebde <__multiply+0xf2>
 800eb94:	f104 0e14 	add.w	lr, r4, #20
 800eb98:	46a9      	mov	r9, r5
 800eb9a:	f04f 0c00 	mov.w	ip, #0
 800eb9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eba2:	f8d9 3000 	ldr.w	r3, [r9]
 800eba6:	fa1f fb87 	uxth.w	fp, r7
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	fb0a 330b 	mla	r3, sl, fp, r3
 800ebb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ebb4:	f8d9 7000 	ldr.w	r7, [r9]
 800ebb8:	4463      	add	r3, ip
 800ebba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800ebc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ebcc:	4572      	cmp	r2, lr
 800ebce:	f849 3b04 	str.w	r3, [r9], #4
 800ebd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebd6:	d8e2      	bhi.n	800eb9e <__multiply+0xb2>
 800ebd8:	9b01      	ldr	r3, [sp, #4]
 800ebda:	f845 c003 	str.w	ip, [r5, r3]
 800ebde:	9b03      	ldr	r3, [sp, #12]
 800ebe0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ebe4:	3104      	adds	r1, #4
 800ebe6:	f1b9 0f00 	cmp.w	r9, #0
 800ebea:	d021      	beq.n	800ec30 <__multiply+0x144>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	f104 0c14 	add.w	ip, r4, #20
 800ebf2:	46ae      	mov	lr, r5
 800ebf4:	f04f 0a00 	mov.w	sl, #0
 800ebf8:	f8bc b000 	ldrh.w	fp, [ip]
 800ebfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec00:	fb09 770b 	mla	r7, r9, fp, r7
 800ec04:	4457      	add	r7, sl
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec0c:	f84e 3b04 	str.w	r3, [lr], #4
 800ec10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec18:	f8be 3000 	ldrh.w	r3, [lr]
 800ec1c:	fb09 330a 	mla	r3, r9, sl, r3
 800ec20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ec24:	4562      	cmp	r2, ip
 800ec26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec2a:	d8e5      	bhi.n	800ebf8 <__multiply+0x10c>
 800ec2c:	9f01      	ldr	r7, [sp, #4]
 800ec2e:	51eb      	str	r3, [r5, r7]
 800ec30:	3504      	adds	r5, #4
 800ec32:	e799      	b.n	800eb68 <__multiply+0x7c>
 800ec34:	3e01      	subs	r6, #1
 800ec36:	e79b      	b.n	800eb70 <__multiply+0x84>
 800ec38:	080110b4 	.word	0x080110b4
 800ec3c:	080110c5 	.word	0x080110c5

0800ec40 <__pow5mult>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4615      	mov	r5, r2
 800ec46:	f012 0203 	ands.w	r2, r2, #3
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	460e      	mov	r6, r1
 800ec4e:	d007      	beq.n	800ec60 <__pow5mult+0x20>
 800ec50:	4c25      	ldr	r4, [pc, #148]	@ (800ece8 <__pow5mult+0xa8>)
 800ec52:	3a01      	subs	r2, #1
 800ec54:	2300      	movs	r3, #0
 800ec56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec5a:	f7ff fe9f 	bl	800e99c <__multadd>
 800ec5e:	4606      	mov	r6, r0
 800ec60:	10ad      	asrs	r5, r5, #2
 800ec62:	d03d      	beq.n	800ece0 <__pow5mult+0xa0>
 800ec64:	69fc      	ldr	r4, [r7, #28]
 800ec66:	b97c      	cbnz	r4, 800ec88 <__pow5mult+0x48>
 800ec68:	2010      	movs	r0, #16
 800ec6a:	f7ff fd7f 	bl	800e76c <malloc>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	61f8      	str	r0, [r7, #28]
 800ec72:	b928      	cbnz	r0, 800ec80 <__pow5mult+0x40>
 800ec74:	4b1d      	ldr	r3, [pc, #116]	@ (800ecec <__pow5mult+0xac>)
 800ec76:	481e      	ldr	r0, [pc, #120]	@ (800ecf0 <__pow5mult+0xb0>)
 800ec78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec7c:	f7fe fec0 	bl	800da00 <__assert_func>
 800ec80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec84:	6004      	str	r4, [r0, #0]
 800ec86:	60c4      	str	r4, [r0, #12]
 800ec88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec90:	b94c      	cbnz	r4, 800eca6 <__pow5mult+0x66>
 800ec92:	f240 2171 	movw	r1, #625	@ 0x271
 800ec96:	4638      	mov	r0, r7
 800ec98:	f7ff ff12 	bl	800eac0 <__i2b>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eca2:	4604      	mov	r4, r0
 800eca4:	6003      	str	r3, [r0, #0]
 800eca6:	f04f 0900 	mov.w	r9, #0
 800ecaa:	07eb      	lsls	r3, r5, #31
 800ecac:	d50a      	bpl.n	800ecc4 <__pow5mult+0x84>
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	f7ff ff1a 	bl	800eaec <__multiply>
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4680      	mov	r8, r0
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	f7ff fe4b 	bl	800e958 <_Bfree>
 800ecc2:	4646      	mov	r6, r8
 800ecc4:	106d      	asrs	r5, r5, #1
 800ecc6:	d00b      	beq.n	800ece0 <__pow5mult+0xa0>
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	b938      	cbnz	r0, 800ecdc <__pow5mult+0x9c>
 800eccc:	4622      	mov	r2, r4
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4638      	mov	r0, r7
 800ecd2:	f7ff ff0b 	bl	800eaec <__multiply>
 800ecd6:	6020      	str	r0, [r4, #0]
 800ecd8:	f8c0 9000 	str.w	r9, [r0]
 800ecdc:	4604      	mov	r4, r0
 800ecde:	e7e4      	b.n	800ecaa <__pow5mult+0x6a>
 800ece0:	4630      	mov	r0, r6
 800ece2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece6:	bf00      	nop
 800ece8:	08011120 	.word	0x08011120
 800ecec:	08010f70 	.word	0x08010f70
 800ecf0:	080110c5 	.word	0x080110c5

0800ecf4 <__lshift>:
 800ecf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	6849      	ldr	r1, [r1, #4]
 800ecfc:	6923      	ldr	r3, [r4, #16]
 800ecfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	4607      	mov	r7, r0
 800ed06:	4691      	mov	r9, r2
 800ed08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed0c:	f108 0601 	add.w	r6, r8, #1
 800ed10:	42b3      	cmp	r3, r6
 800ed12:	db0b      	blt.n	800ed2c <__lshift+0x38>
 800ed14:	4638      	mov	r0, r7
 800ed16:	f7ff fddf 	bl	800e8d8 <_Balloc>
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	b948      	cbnz	r0, 800ed32 <__lshift+0x3e>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	4b28      	ldr	r3, [pc, #160]	@ (800edc4 <__lshift+0xd0>)
 800ed22:	4829      	ldr	r0, [pc, #164]	@ (800edc8 <__lshift+0xd4>)
 800ed24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed28:	f7fe fe6a 	bl	800da00 <__assert_func>
 800ed2c:	3101      	adds	r1, #1
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	e7ee      	b.n	800ed10 <__lshift+0x1c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	f100 0114 	add.w	r1, r0, #20
 800ed38:	f100 0210 	add.w	r2, r0, #16
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	4553      	cmp	r3, sl
 800ed40:	db33      	blt.n	800edaa <__lshift+0xb6>
 800ed42:	6920      	ldr	r0, [r4, #16]
 800ed44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed48:	f104 0314 	add.w	r3, r4, #20
 800ed4c:	f019 091f 	ands.w	r9, r9, #31
 800ed50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed58:	d02b      	beq.n	800edb2 <__lshift+0xbe>
 800ed5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed5e:	468a      	mov	sl, r1
 800ed60:	2200      	movs	r2, #0
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	fa00 f009 	lsl.w	r0, r0, r9
 800ed68:	4310      	orrs	r0, r2
 800ed6a:	f84a 0b04 	str.w	r0, [sl], #4
 800ed6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed72:	459c      	cmp	ip, r3
 800ed74:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed78:	d8f3      	bhi.n	800ed62 <__lshift+0x6e>
 800ed7a:	ebac 0304 	sub.w	r3, ip, r4
 800ed7e:	3b15      	subs	r3, #21
 800ed80:	f023 0303 	bic.w	r3, r3, #3
 800ed84:	3304      	adds	r3, #4
 800ed86:	f104 0015 	add.w	r0, r4, #21
 800ed8a:	4584      	cmp	ip, r0
 800ed8c:	bf38      	it	cc
 800ed8e:	2304      	movcc	r3, #4
 800ed90:	50ca      	str	r2, [r1, r3]
 800ed92:	b10a      	cbz	r2, 800ed98 <__lshift+0xa4>
 800ed94:	f108 0602 	add.w	r6, r8, #2
 800ed98:	3e01      	subs	r6, #1
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	612e      	str	r6, [r5, #16]
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f7ff fdda 	bl	800e958 <_Bfree>
 800eda4:	4628      	mov	r0, r5
 800eda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800edae:	3301      	adds	r3, #1
 800edb0:	e7c5      	b.n	800ed3e <__lshift+0x4a>
 800edb2:	3904      	subs	r1, #4
 800edb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800edb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800edbc:	459c      	cmp	ip, r3
 800edbe:	d8f9      	bhi.n	800edb4 <__lshift+0xc0>
 800edc0:	e7ea      	b.n	800ed98 <__lshift+0xa4>
 800edc2:	bf00      	nop
 800edc4:	080110b4 	.word	0x080110b4
 800edc8:	080110c5 	.word	0x080110c5

0800edcc <__mcmp>:
 800edcc:	690a      	ldr	r2, [r1, #16]
 800edce:	4603      	mov	r3, r0
 800edd0:	6900      	ldr	r0, [r0, #16]
 800edd2:	1a80      	subs	r0, r0, r2
 800edd4:	b530      	push	{r4, r5, lr}
 800edd6:	d10e      	bne.n	800edf6 <__mcmp+0x2a>
 800edd8:	3314      	adds	r3, #20
 800edda:	3114      	adds	r1, #20
 800eddc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ede0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ede4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ede8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edec:	4295      	cmp	r5, r2
 800edee:	d003      	beq.n	800edf8 <__mcmp+0x2c>
 800edf0:	d205      	bcs.n	800edfe <__mcmp+0x32>
 800edf2:	f04f 30ff 	mov.w	r0, #4294967295
 800edf6:	bd30      	pop	{r4, r5, pc}
 800edf8:	42a3      	cmp	r3, r4
 800edfa:	d3f3      	bcc.n	800ede4 <__mcmp+0x18>
 800edfc:	e7fb      	b.n	800edf6 <__mcmp+0x2a>
 800edfe:	2001      	movs	r0, #1
 800ee00:	e7f9      	b.n	800edf6 <__mcmp+0x2a>
	...

0800ee04 <__mdiff>:
 800ee04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee08:	4689      	mov	r9, r1
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4648      	mov	r0, r9
 800ee10:	4614      	mov	r4, r2
 800ee12:	f7ff ffdb 	bl	800edcc <__mcmp>
 800ee16:	1e05      	subs	r5, r0, #0
 800ee18:	d112      	bne.n	800ee40 <__mdiff+0x3c>
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff fd5b 	bl	800e8d8 <_Balloc>
 800ee22:	4602      	mov	r2, r0
 800ee24:	b928      	cbnz	r0, 800ee32 <__mdiff+0x2e>
 800ee26:	4b3f      	ldr	r3, [pc, #252]	@ (800ef24 <__mdiff+0x120>)
 800ee28:	f240 2137 	movw	r1, #567	@ 0x237
 800ee2c:	483e      	ldr	r0, [pc, #248]	@ (800ef28 <__mdiff+0x124>)
 800ee2e:	f7fe fde7 	bl	800da00 <__assert_func>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee38:	4610      	mov	r0, r2
 800ee3a:	b003      	add	sp, #12
 800ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee40:	bfbc      	itt	lt
 800ee42:	464b      	movlt	r3, r9
 800ee44:	46a1      	movlt	r9, r4
 800ee46:	4630      	mov	r0, r6
 800ee48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee4c:	bfba      	itte	lt
 800ee4e:	461c      	movlt	r4, r3
 800ee50:	2501      	movlt	r5, #1
 800ee52:	2500      	movge	r5, #0
 800ee54:	f7ff fd40 	bl	800e8d8 <_Balloc>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	b918      	cbnz	r0, 800ee64 <__mdiff+0x60>
 800ee5c:	4b31      	ldr	r3, [pc, #196]	@ (800ef24 <__mdiff+0x120>)
 800ee5e:	f240 2145 	movw	r1, #581	@ 0x245
 800ee62:	e7e3      	b.n	800ee2c <__mdiff+0x28>
 800ee64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee68:	6926      	ldr	r6, [r4, #16]
 800ee6a:	60c5      	str	r5, [r0, #12]
 800ee6c:	f109 0310 	add.w	r3, r9, #16
 800ee70:	f109 0514 	add.w	r5, r9, #20
 800ee74:	f104 0e14 	add.w	lr, r4, #20
 800ee78:	f100 0b14 	add.w	fp, r0, #20
 800ee7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	46d9      	mov	r9, fp
 800ee88:	f04f 0c00 	mov.w	ip, #0
 800ee8c:	9b01      	ldr	r3, [sp, #4]
 800ee8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee92:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee96:	9301      	str	r3, [sp, #4]
 800ee98:	fa1f f38a 	uxth.w	r3, sl
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	b283      	uxth	r3, r0
 800eea0:	1acb      	subs	r3, r1, r3
 800eea2:	0c00      	lsrs	r0, r0, #16
 800eea4:	4463      	add	r3, ip
 800eea6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eeaa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eeb4:	4576      	cmp	r6, lr
 800eeb6:	f849 3b04 	str.w	r3, [r9], #4
 800eeba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eebe:	d8e5      	bhi.n	800ee8c <__mdiff+0x88>
 800eec0:	1b33      	subs	r3, r6, r4
 800eec2:	3b15      	subs	r3, #21
 800eec4:	f023 0303 	bic.w	r3, r3, #3
 800eec8:	3415      	adds	r4, #21
 800eeca:	3304      	adds	r3, #4
 800eecc:	42a6      	cmp	r6, r4
 800eece:	bf38      	it	cc
 800eed0:	2304      	movcc	r3, #4
 800eed2:	441d      	add	r5, r3
 800eed4:	445b      	add	r3, fp
 800eed6:	461e      	mov	r6, r3
 800eed8:	462c      	mov	r4, r5
 800eeda:	4544      	cmp	r4, r8
 800eedc:	d30e      	bcc.n	800eefc <__mdiff+0xf8>
 800eede:	f108 0103 	add.w	r1, r8, #3
 800eee2:	1b49      	subs	r1, r1, r5
 800eee4:	f021 0103 	bic.w	r1, r1, #3
 800eee8:	3d03      	subs	r5, #3
 800eeea:	45a8      	cmp	r8, r5
 800eeec:	bf38      	it	cc
 800eeee:	2100      	movcc	r1, #0
 800eef0:	440b      	add	r3, r1
 800eef2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eef6:	b191      	cbz	r1, 800ef1e <__mdiff+0x11a>
 800eef8:	6117      	str	r7, [r2, #16]
 800eefa:	e79d      	b.n	800ee38 <__mdiff+0x34>
 800eefc:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef00:	46e6      	mov	lr, ip
 800ef02:	0c08      	lsrs	r0, r1, #16
 800ef04:	fa1c fc81 	uxtah	ip, ip, r1
 800ef08:	4471      	add	r1, lr
 800ef0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef0e:	b289      	uxth	r1, r1
 800ef10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef14:	f846 1b04 	str.w	r1, [r6], #4
 800ef18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef1c:	e7dd      	b.n	800eeda <__mdiff+0xd6>
 800ef1e:	3f01      	subs	r7, #1
 800ef20:	e7e7      	b.n	800eef2 <__mdiff+0xee>
 800ef22:	bf00      	nop
 800ef24:	080110b4 	.word	0x080110b4
 800ef28:	080110c5 	.word	0x080110c5

0800ef2c <__d2b>:
 800ef2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef30:	460f      	mov	r7, r1
 800ef32:	2101      	movs	r1, #1
 800ef34:	ec59 8b10 	vmov	r8, r9, d0
 800ef38:	4616      	mov	r6, r2
 800ef3a:	f7ff fccd 	bl	800e8d8 <_Balloc>
 800ef3e:	4604      	mov	r4, r0
 800ef40:	b930      	cbnz	r0, 800ef50 <__d2b+0x24>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b23      	ldr	r3, [pc, #140]	@ (800efd4 <__d2b+0xa8>)
 800ef46:	4824      	ldr	r0, [pc, #144]	@ (800efd8 <__d2b+0xac>)
 800ef48:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef4c:	f7fe fd58 	bl	800da00 <__assert_func>
 800ef50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef58:	b10d      	cbz	r5, 800ef5e <__d2b+0x32>
 800ef5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef5e:	9301      	str	r3, [sp, #4]
 800ef60:	f1b8 0300 	subs.w	r3, r8, #0
 800ef64:	d023      	beq.n	800efae <__d2b+0x82>
 800ef66:	4668      	mov	r0, sp
 800ef68:	9300      	str	r3, [sp, #0]
 800ef6a:	f7ff fd7c 	bl	800ea66 <__lo0bits>
 800ef6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef72:	b1d0      	cbz	r0, 800efaa <__d2b+0x7e>
 800ef74:	f1c0 0320 	rsb	r3, r0, #32
 800ef78:	fa02 f303 	lsl.w	r3, r2, r3
 800ef7c:	430b      	orrs	r3, r1
 800ef7e:	40c2      	lsrs	r2, r0
 800ef80:	6163      	str	r3, [r4, #20]
 800ef82:	9201      	str	r2, [sp, #4]
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	61a3      	str	r3, [r4, #24]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	bf0c      	ite	eq
 800ef8c:	2201      	moveq	r2, #1
 800ef8e:	2202      	movne	r2, #2
 800ef90:	6122      	str	r2, [r4, #16]
 800ef92:	b1a5      	cbz	r5, 800efbe <__d2b+0x92>
 800ef94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ef98:	4405      	add	r5, r0
 800ef9a:	603d      	str	r5, [r7, #0]
 800ef9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efa0:	6030      	str	r0, [r6, #0]
 800efa2:	4620      	mov	r0, r4
 800efa4:	b003      	add	sp, #12
 800efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efaa:	6161      	str	r1, [r4, #20]
 800efac:	e7ea      	b.n	800ef84 <__d2b+0x58>
 800efae:	a801      	add	r0, sp, #4
 800efb0:	f7ff fd59 	bl	800ea66 <__lo0bits>
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	6163      	str	r3, [r4, #20]
 800efb8:	3020      	adds	r0, #32
 800efba:	2201      	movs	r2, #1
 800efbc:	e7e8      	b.n	800ef90 <__d2b+0x64>
 800efbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800efc6:	6038      	str	r0, [r7, #0]
 800efc8:	6918      	ldr	r0, [r3, #16]
 800efca:	f7ff fd2d 	bl	800ea28 <__hi0bits>
 800efce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800efd2:	e7e5      	b.n	800efa0 <__d2b+0x74>
 800efd4:	080110b4 	.word	0x080110b4
 800efd8:	080110c5 	.word	0x080110c5

0800efdc <__ssputs_r>:
 800efdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efe0:	688e      	ldr	r6, [r1, #8]
 800efe2:	461f      	mov	r7, r3
 800efe4:	42be      	cmp	r6, r7
 800efe6:	680b      	ldr	r3, [r1, #0]
 800efe8:	4682      	mov	sl, r0
 800efea:	460c      	mov	r4, r1
 800efec:	4690      	mov	r8, r2
 800efee:	d82d      	bhi.n	800f04c <__ssputs_r+0x70>
 800eff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eff4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eff8:	d026      	beq.n	800f048 <__ssputs_r+0x6c>
 800effa:	6965      	ldr	r5, [r4, #20]
 800effc:	6909      	ldr	r1, [r1, #16]
 800effe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f002:	eba3 0901 	sub.w	r9, r3, r1
 800f006:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f00a:	1c7b      	adds	r3, r7, #1
 800f00c:	444b      	add	r3, r9
 800f00e:	106d      	asrs	r5, r5, #1
 800f010:	429d      	cmp	r5, r3
 800f012:	bf38      	it	cc
 800f014:	461d      	movcc	r5, r3
 800f016:	0553      	lsls	r3, r2, #21
 800f018:	d527      	bpl.n	800f06a <__ssputs_r+0x8e>
 800f01a:	4629      	mov	r1, r5
 800f01c:	f7ff fbd0 	bl	800e7c0 <_malloc_r>
 800f020:	4606      	mov	r6, r0
 800f022:	b360      	cbz	r0, 800f07e <__ssputs_r+0xa2>
 800f024:	6921      	ldr	r1, [r4, #16]
 800f026:	464a      	mov	r2, r9
 800f028:	f000 fbde 	bl	800f7e8 <memcpy>
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	6126      	str	r6, [r4, #16]
 800f03a:	6165      	str	r5, [r4, #20]
 800f03c:	444e      	add	r6, r9
 800f03e:	eba5 0509 	sub.w	r5, r5, r9
 800f042:	6026      	str	r6, [r4, #0]
 800f044:	60a5      	str	r5, [r4, #8]
 800f046:	463e      	mov	r6, r7
 800f048:	42be      	cmp	r6, r7
 800f04a:	d900      	bls.n	800f04e <__ssputs_r+0x72>
 800f04c:	463e      	mov	r6, r7
 800f04e:	6820      	ldr	r0, [r4, #0]
 800f050:	4632      	mov	r2, r6
 800f052:	4641      	mov	r1, r8
 800f054:	f000 fb7c 	bl	800f750 <memmove>
 800f058:	68a3      	ldr	r3, [r4, #8]
 800f05a:	1b9b      	subs	r3, r3, r6
 800f05c:	60a3      	str	r3, [r4, #8]
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	4433      	add	r3, r6
 800f062:	6023      	str	r3, [r4, #0]
 800f064:	2000      	movs	r0, #0
 800f066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06a:	462a      	mov	r2, r5
 800f06c:	f000 fbf7 	bl	800f85e <_realloc_r>
 800f070:	4606      	mov	r6, r0
 800f072:	2800      	cmp	r0, #0
 800f074:	d1e0      	bne.n	800f038 <__ssputs_r+0x5c>
 800f076:	6921      	ldr	r1, [r4, #16]
 800f078:	4650      	mov	r0, sl
 800f07a:	f7ff fb2d 	bl	800e6d8 <_free_r>
 800f07e:	230c      	movs	r3, #12
 800f080:	f8ca 3000 	str.w	r3, [sl]
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	e7e9      	b.n	800f066 <__ssputs_r+0x8a>
	...

0800f094 <_svfiprintf_r>:
 800f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f098:	4698      	mov	r8, r3
 800f09a:	898b      	ldrh	r3, [r1, #12]
 800f09c:	061b      	lsls	r3, r3, #24
 800f09e:	b09d      	sub	sp, #116	@ 0x74
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	4614      	mov	r4, r2
 800f0a6:	d510      	bpl.n	800f0ca <_svfiprintf_r+0x36>
 800f0a8:	690b      	ldr	r3, [r1, #16]
 800f0aa:	b973      	cbnz	r3, 800f0ca <_svfiprintf_r+0x36>
 800f0ac:	2140      	movs	r1, #64	@ 0x40
 800f0ae:	f7ff fb87 	bl	800e7c0 <_malloc_r>
 800f0b2:	6028      	str	r0, [r5, #0]
 800f0b4:	6128      	str	r0, [r5, #16]
 800f0b6:	b930      	cbnz	r0, 800f0c6 <_svfiprintf_r+0x32>
 800f0b8:	230c      	movs	r3, #12
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c0:	b01d      	add	sp, #116	@ 0x74
 800f0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c6:	2340      	movs	r3, #64	@ 0x40
 800f0c8:	616b      	str	r3, [r5, #20]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0ce:	2320      	movs	r3, #32
 800f0d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0d8:	2330      	movs	r3, #48	@ 0x30
 800f0da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f278 <_svfiprintf_r+0x1e4>
 800f0de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0e2:	f04f 0901 	mov.w	r9, #1
 800f0e6:	4623      	mov	r3, r4
 800f0e8:	469a      	mov	sl, r3
 800f0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0ee:	b10a      	cbz	r2, 800f0f4 <_svfiprintf_r+0x60>
 800f0f0:	2a25      	cmp	r2, #37	@ 0x25
 800f0f2:	d1f9      	bne.n	800f0e8 <_svfiprintf_r+0x54>
 800f0f4:	ebba 0b04 	subs.w	fp, sl, r4
 800f0f8:	d00b      	beq.n	800f112 <_svfiprintf_r+0x7e>
 800f0fa:	465b      	mov	r3, fp
 800f0fc:	4622      	mov	r2, r4
 800f0fe:	4629      	mov	r1, r5
 800f100:	4638      	mov	r0, r7
 800f102:	f7ff ff6b 	bl	800efdc <__ssputs_r>
 800f106:	3001      	adds	r0, #1
 800f108:	f000 80a7 	beq.w	800f25a <_svfiprintf_r+0x1c6>
 800f10c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f10e:	445a      	add	r2, fp
 800f110:	9209      	str	r2, [sp, #36]	@ 0x24
 800f112:	f89a 3000 	ldrb.w	r3, [sl]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f000 809f 	beq.w	800f25a <_svfiprintf_r+0x1c6>
 800f11c:	2300      	movs	r3, #0
 800f11e:	f04f 32ff 	mov.w	r2, #4294967295
 800f122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f126:	f10a 0a01 	add.w	sl, sl, #1
 800f12a:	9304      	str	r3, [sp, #16]
 800f12c:	9307      	str	r3, [sp, #28]
 800f12e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f132:	931a      	str	r3, [sp, #104]	@ 0x68
 800f134:	4654      	mov	r4, sl
 800f136:	2205      	movs	r2, #5
 800f138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f13c:	484e      	ldr	r0, [pc, #312]	@ (800f278 <_svfiprintf_r+0x1e4>)
 800f13e:	f7f1 f85f 	bl	8000200 <memchr>
 800f142:	9a04      	ldr	r2, [sp, #16]
 800f144:	b9d8      	cbnz	r0, 800f17e <_svfiprintf_r+0xea>
 800f146:	06d0      	lsls	r0, r2, #27
 800f148:	bf44      	itt	mi
 800f14a:	2320      	movmi	r3, #32
 800f14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f150:	0711      	lsls	r1, r2, #28
 800f152:	bf44      	itt	mi
 800f154:	232b      	movmi	r3, #43	@ 0x2b
 800f156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f15a:	f89a 3000 	ldrb.w	r3, [sl]
 800f15e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f160:	d015      	beq.n	800f18e <_svfiprintf_r+0xfa>
 800f162:	9a07      	ldr	r2, [sp, #28]
 800f164:	4654      	mov	r4, sl
 800f166:	2000      	movs	r0, #0
 800f168:	f04f 0c0a 	mov.w	ip, #10
 800f16c:	4621      	mov	r1, r4
 800f16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f172:	3b30      	subs	r3, #48	@ 0x30
 800f174:	2b09      	cmp	r3, #9
 800f176:	d94b      	bls.n	800f210 <_svfiprintf_r+0x17c>
 800f178:	b1b0      	cbz	r0, 800f1a8 <_svfiprintf_r+0x114>
 800f17a:	9207      	str	r2, [sp, #28]
 800f17c:	e014      	b.n	800f1a8 <_svfiprintf_r+0x114>
 800f17e:	eba0 0308 	sub.w	r3, r0, r8
 800f182:	fa09 f303 	lsl.w	r3, r9, r3
 800f186:	4313      	orrs	r3, r2
 800f188:	9304      	str	r3, [sp, #16]
 800f18a:	46a2      	mov	sl, r4
 800f18c:	e7d2      	b.n	800f134 <_svfiprintf_r+0xa0>
 800f18e:	9b03      	ldr	r3, [sp, #12]
 800f190:	1d19      	adds	r1, r3, #4
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	9103      	str	r1, [sp, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	bfbb      	ittet	lt
 800f19a:	425b      	neglt	r3, r3
 800f19c:	f042 0202 	orrlt.w	r2, r2, #2
 800f1a0:	9307      	strge	r3, [sp, #28]
 800f1a2:	9307      	strlt	r3, [sp, #28]
 800f1a4:	bfb8      	it	lt
 800f1a6:	9204      	strlt	r2, [sp, #16]
 800f1a8:	7823      	ldrb	r3, [r4, #0]
 800f1aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1ac:	d10a      	bne.n	800f1c4 <_svfiprintf_r+0x130>
 800f1ae:	7863      	ldrb	r3, [r4, #1]
 800f1b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1b2:	d132      	bne.n	800f21a <_svfiprintf_r+0x186>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1d1a      	adds	r2, r3, #4
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	9203      	str	r2, [sp, #12]
 800f1bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1c0:	3402      	adds	r4, #2
 800f1c2:	9305      	str	r3, [sp, #20]
 800f1c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f288 <_svfiprintf_r+0x1f4>
 800f1c8:	7821      	ldrb	r1, [r4, #0]
 800f1ca:	2203      	movs	r2, #3
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	f7f1 f817 	bl	8000200 <memchr>
 800f1d2:	b138      	cbz	r0, 800f1e4 <_svfiprintf_r+0x150>
 800f1d4:	9b04      	ldr	r3, [sp, #16]
 800f1d6:	eba0 000a 	sub.w	r0, r0, sl
 800f1da:	2240      	movs	r2, #64	@ 0x40
 800f1dc:	4082      	lsls	r2, r0
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	3401      	adds	r4, #1
 800f1e2:	9304      	str	r3, [sp, #16]
 800f1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e8:	4824      	ldr	r0, [pc, #144]	@ (800f27c <_svfiprintf_r+0x1e8>)
 800f1ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1ee:	2206      	movs	r2, #6
 800f1f0:	f7f1 f806 	bl	8000200 <memchr>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d036      	beq.n	800f266 <_svfiprintf_r+0x1d2>
 800f1f8:	4b21      	ldr	r3, [pc, #132]	@ (800f280 <_svfiprintf_r+0x1ec>)
 800f1fa:	bb1b      	cbnz	r3, 800f244 <_svfiprintf_r+0x1b0>
 800f1fc:	9b03      	ldr	r3, [sp, #12]
 800f1fe:	3307      	adds	r3, #7
 800f200:	f023 0307 	bic.w	r3, r3, #7
 800f204:	3308      	adds	r3, #8
 800f206:	9303      	str	r3, [sp, #12]
 800f208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f20a:	4433      	add	r3, r6
 800f20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f20e:	e76a      	b.n	800f0e6 <_svfiprintf_r+0x52>
 800f210:	fb0c 3202 	mla	r2, ip, r2, r3
 800f214:	460c      	mov	r4, r1
 800f216:	2001      	movs	r0, #1
 800f218:	e7a8      	b.n	800f16c <_svfiprintf_r+0xd8>
 800f21a:	2300      	movs	r3, #0
 800f21c:	3401      	adds	r4, #1
 800f21e:	9305      	str	r3, [sp, #20]
 800f220:	4619      	mov	r1, r3
 800f222:	f04f 0c0a 	mov.w	ip, #10
 800f226:	4620      	mov	r0, r4
 800f228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f22c:	3a30      	subs	r2, #48	@ 0x30
 800f22e:	2a09      	cmp	r2, #9
 800f230:	d903      	bls.n	800f23a <_svfiprintf_r+0x1a6>
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0c6      	beq.n	800f1c4 <_svfiprintf_r+0x130>
 800f236:	9105      	str	r1, [sp, #20]
 800f238:	e7c4      	b.n	800f1c4 <_svfiprintf_r+0x130>
 800f23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f23e:	4604      	mov	r4, r0
 800f240:	2301      	movs	r3, #1
 800f242:	e7f0      	b.n	800f226 <_svfiprintf_r+0x192>
 800f244:	ab03      	add	r3, sp, #12
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	462a      	mov	r2, r5
 800f24a:	4b0e      	ldr	r3, [pc, #56]	@ (800f284 <_svfiprintf_r+0x1f0>)
 800f24c:	a904      	add	r1, sp, #16
 800f24e:	4638      	mov	r0, r7
 800f250:	f7fd fd6c 	bl	800cd2c <_printf_float>
 800f254:	1c42      	adds	r2, r0, #1
 800f256:	4606      	mov	r6, r0
 800f258:	d1d6      	bne.n	800f208 <_svfiprintf_r+0x174>
 800f25a:	89ab      	ldrh	r3, [r5, #12]
 800f25c:	065b      	lsls	r3, r3, #25
 800f25e:	f53f af2d 	bmi.w	800f0bc <_svfiprintf_r+0x28>
 800f262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f264:	e72c      	b.n	800f0c0 <_svfiprintf_r+0x2c>
 800f266:	ab03      	add	r3, sp, #12
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	462a      	mov	r2, r5
 800f26c:	4b05      	ldr	r3, [pc, #20]	@ (800f284 <_svfiprintf_r+0x1f0>)
 800f26e:	a904      	add	r1, sp, #16
 800f270:	4638      	mov	r0, r7
 800f272:	f7fd fff3 	bl	800d25c <_printf_i>
 800f276:	e7ed      	b.n	800f254 <_svfiprintf_r+0x1c0>
 800f278:	08011220 	.word	0x08011220
 800f27c:	0801122a 	.word	0x0801122a
 800f280:	0800cd2d 	.word	0x0800cd2d
 800f284:	0800efdd 	.word	0x0800efdd
 800f288:	08011226 	.word	0x08011226

0800f28c <__sfputc_r>:
 800f28c:	6893      	ldr	r3, [r2, #8]
 800f28e:	3b01      	subs	r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	b410      	push	{r4}
 800f294:	6093      	str	r3, [r2, #8]
 800f296:	da08      	bge.n	800f2aa <__sfputc_r+0x1e>
 800f298:	6994      	ldr	r4, [r2, #24]
 800f29a:	42a3      	cmp	r3, r4
 800f29c:	db01      	blt.n	800f2a2 <__sfputc_r+0x16>
 800f29e:	290a      	cmp	r1, #10
 800f2a0:	d103      	bne.n	800f2aa <__sfputc_r+0x1e>
 800f2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2a6:	f7fe ba8e 	b.w	800d7c6 <__swbuf_r>
 800f2aa:	6813      	ldr	r3, [r2, #0]
 800f2ac:	1c58      	adds	r0, r3, #1
 800f2ae:	6010      	str	r0, [r2, #0]
 800f2b0:	7019      	strb	r1, [r3, #0]
 800f2b2:	4608      	mov	r0, r1
 800f2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <__sfputs_r>:
 800f2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2bc:	4606      	mov	r6, r0
 800f2be:	460f      	mov	r7, r1
 800f2c0:	4614      	mov	r4, r2
 800f2c2:	18d5      	adds	r5, r2, r3
 800f2c4:	42ac      	cmp	r4, r5
 800f2c6:	d101      	bne.n	800f2cc <__sfputs_r+0x12>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	e007      	b.n	800f2dc <__sfputs_r+0x22>
 800f2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d0:	463a      	mov	r2, r7
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7ff ffda 	bl	800f28c <__sfputc_r>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d1f3      	bne.n	800f2c4 <__sfputs_r+0xa>
 800f2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2e0 <_vfiprintf_r>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	460d      	mov	r5, r1
 800f2e6:	b09d      	sub	sp, #116	@ 0x74
 800f2e8:	4614      	mov	r4, r2
 800f2ea:	4698      	mov	r8, r3
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	b118      	cbz	r0, 800f2f8 <_vfiprintf_r+0x18>
 800f2f0:	6a03      	ldr	r3, [r0, #32]
 800f2f2:	b90b      	cbnz	r3, 800f2f8 <_vfiprintf_r+0x18>
 800f2f4:	f7fe f95e 	bl	800d5b4 <__sinit>
 800f2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2fa:	07d9      	lsls	r1, r3, #31
 800f2fc:	d405      	bmi.n	800f30a <_vfiprintf_r+0x2a>
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	059a      	lsls	r2, r3, #22
 800f302:	d402      	bmi.n	800f30a <_vfiprintf_r+0x2a>
 800f304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f306:	f7fe fb70 	bl	800d9ea <__retarget_lock_acquire_recursive>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	071b      	lsls	r3, r3, #28
 800f30e:	d501      	bpl.n	800f314 <_vfiprintf_r+0x34>
 800f310:	692b      	ldr	r3, [r5, #16]
 800f312:	b99b      	cbnz	r3, 800f33c <_vfiprintf_r+0x5c>
 800f314:	4629      	mov	r1, r5
 800f316:	4630      	mov	r0, r6
 800f318:	f7fe fa94 	bl	800d844 <__swsetup_r>
 800f31c:	b170      	cbz	r0, 800f33c <_vfiprintf_r+0x5c>
 800f31e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f320:	07dc      	lsls	r4, r3, #31
 800f322:	d504      	bpl.n	800f32e <_vfiprintf_r+0x4e>
 800f324:	f04f 30ff 	mov.w	r0, #4294967295
 800f328:	b01d      	add	sp, #116	@ 0x74
 800f32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	0598      	lsls	r0, r3, #22
 800f332:	d4f7      	bmi.n	800f324 <_vfiprintf_r+0x44>
 800f334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f336:	f7fe fb59 	bl	800d9ec <__retarget_lock_release_recursive>
 800f33a:	e7f3      	b.n	800f324 <_vfiprintf_r+0x44>
 800f33c:	2300      	movs	r3, #0
 800f33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f340:	2320      	movs	r3, #32
 800f342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f346:	f8cd 800c 	str.w	r8, [sp, #12]
 800f34a:	2330      	movs	r3, #48	@ 0x30
 800f34c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4fc <_vfiprintf_r+0x21c>
 800f350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f354:	f04f 0901 	mov.w	r9, #1
 800f358:	4623      	mov	r3, r4
 800f35a:	469a      	mov	sl, r3
 800f35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f360:	b10a      	cbz	r2, 800f366 <_vfiprintf_r+0x86>
 800f362:	2a25      	cmp	r2, #37	@ 0x25
 800f364:	d1f9      	bne.n	800f35a <_vfiprintf_r+0x7a>
 800f366:	ebba 0b04 	subs.w	fp, sl, r4
 800f36a:	d00b      	beq.n	800f384 <_vfiprintf_r+0xa4>
 800f36c:	465b      	mov	r3, fp
 800f36e:	4622      	mov	r2, r4
 800f370:	4629      	mov	r1, r5
 800f372:	4630      	mov	r0, r6
 800f374:	f7ff ffa1 	bl	800f2ba <__sfputs_r>
 800f378:	3001      	adds	r0, #1
 800f37a:	f000 80a7 	beq.w	800f4cc <_vfiprintf_r+0x1ec>
 800f37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f380:	445a      	add	r2, fp
 800f382:	9209      	str	r2, [sp, #36]	@ 0x24
 800f384:	f89a 3000 	ldrb.w	r3, [sl]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 809f 	beq.w	800f4cc <_vfiprintf_r+0x1ec>
 800f38e:	2300      	movs	r3, #0
 800f390:	f04f 32ff 	mov.w	r2, #4294967295
 800f394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f398:	f10a 0a01 	add.w	sl, sl, #1
 800f39c:	9304      	str	r3, [sp, #16]
 800f39e:	9307      	str	r3, [sp, #28]
 800f3a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3a6:	4654      	mov	r4, sl
 800f3a8:	2205      	movs	r2, #5
 800f3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ae:	4853      	ldr	r0, [pc, #332]	@ (800f4fc <_vfiprintf_r+0x21c>)
 800f3b0:	f7f0 ff26 	bl	8000200 <memchr>
 800f3b4:	9a04      	ldr	r2, [sp, #16]
 800f3b6:	b9d8      	cbnz	r0, 800f3f0 <_vfiprintf_r+0x110>
 800f3b8:	06d1      	lsls	r1, r2, #27
 800f3ba:	bf44      	itt	mi
 800f3bc:	2320      	movmi	r3, #32
 800f3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3c2:	0713      	lsls	r3, r2, #28
 800f3c4:	bf44      	itt	mi
 800f3c6:	232b      	movmi	r3, #43	@ 0x2b
 800f3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d2:	d015      	beq.n	800f400 <_vfiprintf_r+0x120>
 800f3d4:	9a07      	ldr	r2, [sp, #28]
 800f3d6:	4654      	mov	r4, sl
 800f3d8:	2000      	movs	r0, #0
 800f3da:	f04f 0c0a 	mov.w	ip, #10
 800f3de:	4621      	mov	r1, r4
 800f3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3e4:	3b30      	subs	r3, #48	@ 0x30
 800f3e6:	2b09      	cmp	r3, #9
 800f3e8:	d94b      	bls.n	800f482 <_vfiprintf_r+0x1a2>
 800f3ea:	b1b0      	cbz	r0, 800f41a <_vfiprintf_r+0x13a>
 800f3ec:	9207      	str	r2, [sp, #28]
 800f3ee:	e014      	b.n	800f41a <_vfiprintf_r+0x13a>
 800f3f0:	eba0 0308 	sub.w	r3, r0, r8
 800f3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	9304      	str	r3, [sp, #16]
 800f3fc:	46a2      	mov	sl, r4
 800f3fe:	e7d2      	b.n	800f3a6 <_vfiprintf_r+0xc6>
 800f400:	9b03      	ldr	r3, [sp, #12]
 800f402:	1d19      	adds	r1, r3, #4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	9103      	str	r1, [sp, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bfbb      	ittet	lt
 800f40c:	425b      	neglt	r3, r3
 800f40e:	f042 0202 	orrlt.w	r2, r2, #2
 800f412:	9307      	strge	r3, [sp, #28]
 800f414:	9307      	strlt	r3, [sp, #28]
 800f416:	bfb8      	it	lt
 800f418:	9204      	strlt	r2, [sp, #16]
 800f41a:	7823      	ldrb	r3, [r4, #0]
 800f41c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f41e:	d10a      	bne.n	800f436 <_vfiprintf_r+0x156>
 800f420:	7863      	ldrb	r3, [r4, #1]
 800f422:	2b2a      	cmp	r3, #42	@ 0x2a
 800f424:	d132      	bne.n	800f48c <_vfiprintf_r+0x1ac>
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	9203      	str	r2, [sp, #12]
 800f42e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f432:	3402      	adds	r4, #2
 800f434:	9305      	str	r3, [sp, #20]
 800f436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f50c <_vfiprintf_r+0x22c>
 800f43a:	7821      	ldrb	r1, [r4, #0]
 800f43c:	2203      	movs	r2, #3
 800f43e:	4650      	mov	r0, sl
 800f440:	f7f0 fede 	bl	8000200 <memchr>
 800f444:	b138      	cbz	r0, 800f456 <_vfiprintf_r+0x176>
 800f446:	9b04      	ldr	r3, [sp, #16]
 800f448:	eba0 000a 	sub.w	r0, r0, sl
 800f44c:	2240      	movs	r2, #64	@ 0x40
 800f44e:	4082      	lsls	r2, r0
 800f450:	4313      	orrs	r3, r2
 800f452:	3401      	adds	r4, #1
 800f454:	9304      	str	r3, [sp, #16]
 800f456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f45a:	4829      	ldr	r0, [pc, #164]	@ (800f500 <_vfiprintf_r+0x220>)
 800f45c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f460:	2206      	movs	r2, #6
 800f462:	f7f0 fecd 	bl	8000200 <memchr>
 800f466:	2800      	cmp	r0, #0
 800f468:	d03f      	beq.n	800f4ea <_vfiprintf_r+0x20a>
 800f46a:	4b26      	ldr	r3, [pc, #152]	@ (800f504 <_vfiprintf_r+0x224>)
 800f46c:	bb1b      	cbnz	r3, 800f4b6 <_vfiprintf_r+0x1d6>
 800f46e:	9b03      	ldr	r3, [sp, #12]
 800f470:	3307      	adds	r3, #7
 800f472:	f023 0307 	bic.w	r3, r3, #7
 800f476:	3308      	adds	r3, #8
 800f478:	9303      	str	r3, [sp, #12]
 800f47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f47c:	443b      	add	r3, r7
 800f47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f480:	e76a      	b.n	800f358 <_vfiprintf_r+0x78>
 800f482:	fb0c 3202 	mla	r2, ip, r2, r3
 800f486:	460c      	mov	r4, r1
 800f488:	2001      	movs	r0, #1
 800f48a:	e7a8      	b.n	800f3de <_vfiprintf_r+0xfe>
 800f48c:	2300      	movs	r3, #0
 800f48e:	3401      	adds	r4, #1
 800f490:	9305      	str	r3, [sp, #20]
 800f492:	4619      	mov	r1, r3
 800f494:	f04f 0c0a 	mov.w	ip, #10
 800f498:	4620      	mov	r0, r4
 800f49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f49e:	3a30      	subs	r2, #48	@ 0x30
 800f4a0:	2a09      	cmp	r2, #9
 800f4a2:	d903      	bls.n	800f4ac <_vfiprintf_r+0x1cc>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d0c6      	beq.n	800f436 <_vfiprintf_r+0x156>
 800f4a8:	9105      	str	r1, [sp, #20]
 800f4aa:	e7c4      	b.n	800f436 <_vfiprintf_r+0x156>
 800f4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e7f0      	b.n	800f498 <_vfiprintf_r+0x1b8>
 800f4b6:	ab03      	add	r3, sp, #12
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	462a      	mov	r2, r5
 800f4bc:	4b12      	ldr	r3, [pc, #72]	@ (800f508 <_vfiprintf_r+0x228>)
 800f4be:	a904      	add	r1, sp, #16
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7fd fc33 	bl	800cd2c <_printf_float>
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	1c78      	adds	r0, r7, #1
 800f4ca:	d1d6      	bne.n	800f47a <_vfiprintf_r+0x19a>
 800f4cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4ce:	07d9      	lsls	r1, r3, #31
 800f4d0:	d405      	bmi.n	800f4de <_vfiprintf_r+0x1fe>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	059a      	lsls	r2, r3, #22
 800f4d6:	d402      	bmi.n	800f4de <_vfiprintf_r+0x1fe>
 800f4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4da:	f7fe fa87 	bl	800d9ec <__retarget_lock_release_recursive>
 800f4de:	89ab      	ldrh	r3, [r5, #12]
 800f4e0:	065b      	lsls	r3, r3, #25
 800f4e2:	f53f af1f 	bmi.w	800f324 <_vfiprintf_r+0x44>
 800f4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4e8:	e71e      	b.n	800f328 <_vfiprintf_r+0x48>
 800f4ea:	ab03      	add	r3, sp, #12
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	4b05      	ldr	r3, [pc, #20]	@ (800f508 <_vfiprintf_r+0x228>)
 800f4f2:	a904      	add	r1, sp, #16
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7fd feb1 	bl	800d25c <_printf_i>
 800f4fa:	e7e4      	b.n	800f4c6 <_vfiprintf_r+0x1e6>
 800f4fc:	08011220 	.word	0x08011220
 800f500:	0801122a 	.word	0x0801122a
 800f504:	0800cd2d 	.word	0x0800cd2d
 800f508:	0800f2bb 	.word	0x0800f2bb
 800f50c:	08011226 	.word	0x08011226

0800f510 <__sflush_r>:
 800f510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f518:	0716      	lsls	r6, r2, #28
 800f51a:	4605      	mov	r5, r0
 800f51c:	460c      	mov	r4, r1
 800f51e:	d454      	bmi.n	800f5ca <__sflush_r+0xba>
 800f520:	684b      	ldr	r3, [r1, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dc02      	bgt.n	800f52c <__sflush_r+0x1c>
 800f526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f528:	2b00      	cmp	r3, #0
 800f52a:	dd48      	ble.n	800f5be <__sflush_r+0xae>
 800f52c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f52e:	2e00      	cmp	r6, #0
 800f530:	d045      	beq.n	800f5be <__sflush_r+0xae>
 800f532:	2300      	movs	r3, #0
 800f534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f538:	682f      	ldr	r7, [r5, #0]
 800f53a:	6a21      	ldr	r1, [r4, #32]
 800f53c:	602b      	str	r3, [r5, #0]
 800f53e:	d030      	beq.n	800f5a2 <__sflush_r+0x92>
 800f540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	0759      	lsls	r1, r3, #29
 800f546:	d505      	bpl.n	800f554 <__sflush_r+0x44>
 800f548:	6863      	ldr	r3, [r4, #4]
 800f54a:	1ad2      	subs	r2, r2, r3
 800f54c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f54e:	b10b      	cbz	r3, 800f554 <__sflush_r+0x44>
 800f550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f552:	1ad2      	subs	r2, r2, r3
 800f554:	2300      	movs	r3, #0
 800f556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f558:	6a21      	ldr	r1, [r4, #32]
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b0      	blx	r6
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	d106      	bne.n	800f572 <__sflush_r+0x62>
 800f564:	6829      	ldr	r1, [r5, #0]
 800f566:	291d      	cmp	r1, #29
 800f568:	d82b      	bhi.n	800f5c2 <__sflush_r+0xb2>
 800f56a:	4a2a      	ldr	r2, [pc, #168]	@ (800f614 <__sflush_r+0x104>)
 800f56c:	410a      	asrs	r2, r1
 800f56e:	07d6      	lsls	r6, r2, #31
 800f570:	d427      	bmi.n	800f5c2 <__sflush_r+0xb2>
 800f572:	2200      	movs	r2, #0
 800f574:	6062      	str	r2, [r4, #4]
 800f576:	04d9      	lsls	r1, r3, #19
 800f578:	6922      	ldr	r2, [r4, #16]
 800f57a:	6022      	str	r2, [r4, #0]
 800f57c:	d504      	bpl.n	800f588 <__sflush_r+0x78>
 800f57e:	1c42      	adds	r2, r0, #1
 800f580:	d101      	bne.n	800f586 <__sflush_r+0x76>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b903      	cbnz	r3, 800f588 <__sflush_r+0x78>
 800f586:	6560      	str	r0, [r4, #84]	@ 0x54
 800f588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f58a:	602f      	str	r7, [r5, #0]
 800f58c:	b1b9      	cbz	r1, 800f5be <__sflush_r+0xae>
 800f58e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f592:	4299      	cmp	r1, r3
 800f594:	d002      	beq.n	800f59c <__sflush_r+0x8c>
 800f596:	4628      	mov	r0, r5
 800f598:	f7ff f89e 	bl	800e6d8 <_free_r>
 800f59c:	2300      	movs	r3, #0
 800f59e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5a0:	e00d      	b.n	800f5be <__sflush_r+0xae>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b0      	blx	r6
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	1c50      	adds	r0, r2, #1
 800f5ac:	d1c9      	bne.n	800f542 <__sflush_r+0x32>
 800f5ae:	682b      	ldr	r3, [r5, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0c6      	beq.n	800f542 <__sflush_r+0x32>
 800f5b4:	2b1d      	cmp	r3, #29
 800f5b6:	d001      	beq.n	800f5bc <__sflush_r+0xac>
 800f5b8:	2b16      	cmp	r3, #22
 800f5ba:	d11e      	bne.n	800f5fa <__sflush_r+0xea>
 800f5bc:	602f      	str	r7, [r5, #0]
 800f5be:	2000      	movs	r0, #0
 800f5c0:	e022      	b.n	800f608 <__sflush_r+0xf8>
 800f5c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5c6:	b21b      	sxth	r3, r3
 800f5c8:	e01b      	b.n	800f602 <__sflush_r+0xf2>
 800f5ca:	690f      	ldr	r7, [r1, #16]
 800f5cc:	2f00      	cmp	r7, #0
 800f5ce:	d0f6      	beq.n	800f5be <__sflush_r+0xae>
 800f5d0:	0793      	lsls	r3, r2, #30
 800f5d2:	680e      	ldr	r6, [r1, #0]
 800f5d4:	bf08      	it	eq
 800f5d6:	694b      	ldreq	r3, [r1, #20]
 800f5d8:	600f      	str	r7, [r1, #0]
 800f5da:	bf18      	it	ne
 800f5dc:	2300      	movne	r3, #0
 800f5de:	eba6 0807 	sub.w	r8, r6, r7
 800f5e2:	608b      	str	r3, [r1, #8]
 800f5e4:	f1b8 0f00 	cmp.w	r8, #0
 800f5e8:	dde9      	ble.n	800f5be <__sflush_r+0xae>
 800f5ea:	6a21      	ldr	r1, [r4, #32]
 800f5ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f5ee:	4643      	mov	r3, r8
 800f5f0:	463a      	mov	r2, r7
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	47b0      	blx	r6
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	dc08      	bgt.n	800f60c <__sflush_r+0xfc>
 800f5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60c:	4407      	add	r7, r0
 800f60e:	eba8 0800 	sub.w	r8, r8, r0
 800f612:	e7e7      	b.n	800f5e4 <__sflush_r+0xd4>
 800f614:	dfbffffe 	.word	0xdfbffffe

0800f618 <_fflush_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	690b      	ldr	r3, [r1, #16]
 800f61c:	4605      	mov	r5, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	b913      	cbnz	r3, 800f628 <_fflush_r+0x10>
 800f622:	2500      	movs	r5, #0
 800f624:	4628      	mov	r0, r5
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	b118      	cbz	r0, 800f632 <_fflush_r+0x1a>
 800f62a:	6a03      	ldr	r3, [r0, #32]
 800f62c:	b90b      	cbnz	r3, 800f632 <_fflush_r+0x1a>
 800f62e:	f7fd ffc1 	bl	800d5b4 <__sinit>
 800f632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d0f3      	beq.n	800f622 <_fflush_r+0xa>
 800f63a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f63c:	07d0      	lsls	r0, r2, #31
 800f63e:	d404      	bmi.n	800f64a <_fflush_r+0x32>
 800f640:	0599      	lsls	r1, r3, #22
 800f642:	d402      	bmi.n	800f64a <_fflush_r+0x32>
 800f644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f646:	f7fe f9d0 	bl	800d9ea <__retarget_lock_acquire_recursive>
 800f64a:	4628      	mov	r0, r5
 800f64c:	4621      	mov	r1, r4
 800f64e:	f7ff ff5f 	bl	800f510 <__sflush_r>
 800f652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f654:	07da      	lsls	r2, r3, #31
 800f656:	4605      	mov	r5, r0
 800f658:	d4e4      	bmi.n	800f624 <_fflush_r+0xc>
 800f65a:	89a3      	ldrh	r3, [r4, #12]
 800f65c:	059b      	lsls	r3, r3, #22
 800f65e:	d4e1      	bmi.n	800f624 <_fflush_r+0xc>
 800f660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f662:	f7fe f9c3 	bl	800d9ec <__retarget_lock_release_recursive>
 800f666:	e7dd      	b.n	800f624 <_fflush_r+0xc>

0800f668 <fiprintf>:
 800f668:	b40e      	push	{r1, r2, r3}
 800f66a:	b503      	push	{r0, r1, lr}
 800f66c:	4601      	mov	r1, r0
 800f66e:	ab03      	add	r3, sp, #12
 800f670:	4805      	ldr	r0, [pc, #20]	@ (800f688 <fiprintf+0x20>)
 800f672:	f853 2b04 	ldr.w	r2, [r3], #4
 800f676:	6800      	ldr	r0, [r0, #0]
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	f7ff fe31 	bl	800f2e0 <_vfiprintf_r>
 800f67e:	b002      	add	sp, #8
 800f680:	f85d eb04 	ldr.w	lr, [sp], #4
 800f684:	b003      	add	sp, #12
 800f686:	4770      	bx	lr
 800f688:	20000064 	.word	0x20000064

0800f68c <__swhatbuf_r>:
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	460c      	mov	r4, r1
 800f690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f694:	2900      	cmp	r1, #0
 800f696:	b096      	sub	sp, #88	@ 0x58
 800f698:	4615      	mov	r5, r2
 800f69a:	461e      	mov	r6, r3
 800f69c:	da0d      	bge.n	800f6ba <__swhatbuf_r+0x2e>
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6a4:	f04f 0100 	mov.w	r1, #0
 800f6a8:	bf14      	ite	ne
 800f6aa:	2340      	movne	r3, #64	@ 0x40
 800f6ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	6031      	str	r1, [r6, #0]
 800f6b4:	602b      	str	r3, [r5, #0]
 800f6b6:	b016      	add	sp, #88	@ 0x58
 800f6b8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ba:	466a      	mov	r2, sp
 800f6bc:	f000 f862 	bl	800f784 <_fstat_r>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	dbec      	blt.n	800f69e <__swhatbuf_r+0x12>
 800f6c4:	9901      	ldr	r1, [sp, #4]
 800f6c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6ce:	4259      	negs	r1, r3
 800f6d0:	4159      	adcs	r1, r3
 800f6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6d6:	e7eb      	b.n	800f6b0 <__swhatbuf_r+0x24>

0800f6d8 <__smakebuf_r>:
 800f6d8:	898b      	ldrh	r3, [r1, #12]
 800f6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6dc:	079d      	lsls	r5, r3, #30
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	d507      	bpl.n	800f6f4 <__smakebuf_r+0x1c>
 800f6e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	6163      	str	r3, [r4, #20]
 800f6f0:	b003      	add	sp, #12
 800f6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f4:	ab01      	add	r3, sp, #4
 800f6f6:	466a      	mov	r2, sp
 800f6f8:	f7ff ffc8 	bl	800f68c <__swhatbuf_r>
 800f6fc:	9f00      	ldr	r7, [sp, #0]
 800f6fe:	4605      	mov	r5, r0
 800f700:	4639      	mov	r1, r7
 800f702:	4630      	mov	r0, r6
 800f704:	f7ff f85c 	bl	800e7c0 <_malloc_r>
 800f708:	b948      	cbnz	r0, 800f71e <__smakebuf_r+0x46>
 800f70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f70e:	059a      	lsls	r2, r3, #22
 800f710:	d4ee      	bmi.n	800f6f0 <__smakebuf_r+0x18>
 800f712:	f023 0303 	bic.w	r3, r3, #3
 800f716:	f043 0302 	orr.w	r3, r3, #2
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	e7e2      	b.n	800f6e4 <__smakebuf_r+0xc>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	6020      	str	r0, [r4, #0]
 800f722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f726:	81a3      	strh	r3, [r4, #12]
 800f728:	9b01      	ldr	r3, [sp, #4]
 800f72a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f72e:	b15b      	cbz	r3, 800f748 <__smakebuf_r+0x70>
 800f730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f734:	4630      	mov	r0, r6
 800f736:	f000 f837 	bl	800f7a8 <_isatty_r>
 800f73a:	b128      	cbz	r0, 800f748 <__smakebuf_r+0x70>
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	f023 0303 	bic.w	r3, r3, #3
 800f742:	f043 0301 	orr.w	r3, r3, #1
 800f746:	81a3      	strh	r3, [r4, #12]
 800f748:	89a3      	ldrh	r3, [r4, #12]
 800f74a:	431d      	orrs	r5, r3
 800f74c:	81a5      	strh	r5, [r4, #12]
 800f74e:	e7cf      	b.n	800f6f0 <__smakebuf_r+0x18>

0800f750 <memmove>:
 800f750:	4288      	cmp	r0, r1
 800f752:	b510      	push	{r4, lr}
 800f754:	eb01 0402 	add.w	r4, r1, r2
 800f758:	d902      	bls.n	800f760 <memmove+0x10>
 800f75a:	4284      	cmp	r4, r0
 800f75c:	4623      	mov	r3, r4
 800f75e:	d807      	bhi.n	800f770 <memmove+0x20>
 800f760:	1e43      	subs	r3, r0, #1
 800f762:	42a1      	cmp	r1, r4
 800f764:	d008      	beq.n	800f778 <memmove+0x28>
 800f766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f76e:	e7f8      	b.n	800f762 <memmove+0x12>
 800f770:	4402      	add	r2, r0
 800f772:	4601      	mov	r1, r0
 800f774:	428a      	cmp	r2, r1
 800f776:	d100      	bne.n	800f77a <memmove+0x2a>
 800f778:	bd10      	pop	{r4, pc}
 800f77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f782:	e7f7      	b.n	800f774 <memmove+0x24>

0800f784 <_fstat_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4d07      	ldr	r5, [pc, #28]	@ (800f7a4 <_fstat_r+0x20>)
 800f788:	2300      	movs	r3, #0
 800f78a:	4604      	mov	r4, r0
 800f78c:	4608      	mov	r0, r1
 800f78e:	4611      	mov	r1, r2
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	f7f5 fce1 	bl	8005158 <_fstat>
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	d102      	bne.n	800f7a0 <_fstat_r+0x1c>
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	b103      	cbz	r3, 800f7a0 <_fstat_r+0x1c>
 800f79e:	6023      	str	r3, [r4, #0]
 800f7a0:	bd38      	pop	{r3, r4, r5, pc}
 800f7a2:	bf00      	nop
 800f7a4:	20001918 	.word	0x20001918

0800f7a8 <_isatty_r>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4d06      	ldr	r5, [pc, #24]	@ (800f7c4 <_isatty_r+0x1c>)
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	4608      	mov	r0, r1
 800f7b2:	602b      	str	r3, [r5, #0]
 800f7b4:	f7f5 fce0 	bl	8005178 <_isatty>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d102      	bne.n	800f7c2 <_isatty_r+0x1a>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	b103      	cbz	r3, 800f7c2 <_isatty_r+0x1a>
 800f7c0:	6023      	str	r3, [r4, #0]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
 800f7c4:	20001918 	.word	0x20001918

0800f7c8 <_sbrk_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d06      	ldr	r5, [pc, #24]	@ (800f7e4 <_sbrk_r+0x1c>)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	602b      	str	r3, [r5, #0]
 800f7d4:	f7f5 fce8 	bl	80051a8 <_sbrk>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d102      	bne.n	800f7e2 <_sbrk_r+0x1a>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	b103      	cbz	r3, 800f7e2 <_sbrk_r+0x1a>
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	20001918 	.word	0x20001918

0800f7e8 <memcpy>:
 800f7e8:	440a      	add	r2, r1
 800f7ea:	4291      	cmp	r1, r2
 800f7ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7f0:	d100      	bne.n	800f7f4 <memcpy+0xc>
 800f7f2:	4770      	bx	lr
 800f7f4:	b510      	push	{r4, lr}
 800f7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7fe:	4291      	cmp	r1, r2
 800f800:	d1f9      	bne.n	800f7f6 <memcpy+0xe>
 800f802:	bd10      	pop	{r4, pc}

0800f804 <abort>:
 800f804:	b508      	push	{r3, lr}
 800f806:	2006      	movs	r0, #6
 800f808:	f000 f88c 	bl	800f924 <raise>
 800f80c:	2001      	movs	r0, #1
 800f80e:	f7f5 fc53 	bl	80050b8 <_exit>

0800f812 <_calloc_r>:
 800f812:	b570      	push	{r4, r5, r6, lr}
 800f814:	fba1 5402 	umull	r5, r4, r1, r2
 800f818:	b93c      	cbnz	r4, 800f82a <_calloc_r+0x18>
 800f81a:	4629      	mov	r1, r5
 800f81c:	f7fe ffd0 	bl	800e7c0 <_malloc_r>
 800f820:	4606      	mov	r6, r0
 800f822:	b928      	cbnz	r0, 800f830 <_calloc_r+0x1e>
 800f824:	2600      	movs	r6, #0
 800f826:	4630      	mov	r0, r6
 800f828:	bd70      	pop	{r4, r5, r6, pc}
 800f82a:	220c      	movs	r2, #12
 800f82c:	6002      	str	r2, [r0, #0]
 800f82e:	e7f9      	b.n	800f824 <_calloc_r+0x12>
 800f830:	462a      	mov	r2, r5
 800f832:	4621      	mov	r1, r4
 800f834:	f7fe f85c 	bl	800d8f0 <memset>
 800f838:	e7f5      	b.n	800f826 <_calloc_r+0x14>

0800f83a <__ascii_mbtowc>:
 800f83a:	b082      	sub	sp, #8
 800f83c:	b901      	cbnz	r1, 800f840 <__ascii_mbtowc+0x6>
 800f83e:	a901      	add	r1, sp, #4
 800f840:	b142      	cbz	r2, 800f854 <__ascii_mbtowc+0x1a>
 800f842:	b14b      	cbz	r3, 800f858 <__ascii_mbtowc+0x1e>
 800f844:	7813      	ldrb	r3, [r2, #0]
 800f846:	600b      	str	r3, [r1, #0]
 800f848:	7812      	ldrb	r2, [r2, #0]
 800f84a:	1e10      	subs	r0, r2, #0
 800f84c:	bf18      	it	ne
 800f84e:	2001      	movne	r0, #1
 800f850:	b002      	add	sp, #8
 800f852:	4770      	bx	lr
 800f854:	4610      	mov	r0, r2
 800f856:	e7fb      	b.n	800f850 <__ascii_mbtowc+0x16>
 800f858:	f06f 0001 	mvn.w	r0, #1
 800f85c:	e7f8      	b.n	800f850 <__ascii_mbtowc+0x16>

0800f85e <_realloc_r>:
 800f85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f862:	4680      	mov	r8, r0
 800f864:	4615      	mov	r5, r2
 800f866:	460c      	mov	r4, r1
 800f868:	b921      	cbnz	r1, 800f874 <_realloc_r+0x16>
 800f86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f86e:	4611      	mov	r1, r2
 800f870:	f7fe bfa6 	b.w	800e7c0 <_malloc_r>
 800f874:	b92a      	cbnz	r2, 800f882 <_realloc_r+0x24>
 800f876:	f7fe ff2f 	bl	800e6d8 <_free_r>
 800f87a:	2400      	movs	r4, #0
 800f87c:	4620      	mov	r0, r4
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	f000 f86b 	bl	800f95c <_malloc_usable_size_r>
 800f886:	4285      	cmp	r5, r0
 800f888:	4606      	mov	r6, r0
 800f88a:	d802      	bhi.n	800f892 <_realloc_r+0x34>
 800f88c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f890:	d8f4      	bhi.n	800f87c <_realloc_r+0x1e>
 800f892:	4629      	mov	r1, r5
 800f894:	4640      	mov	r0, r8
 800f896:	f7fe ff93 	bl	800e7c0 <_malloc_r>
 800f89a:	4607      	mov	r7, r0
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d0ec      	beq.n	800f87a <_realloc_r+0x1c>
 800f8a0:	42b5      	cmp	r5, r6
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	4621      	mov	r1, r4
 800f8a6:	bf28      	it	cs
 800f8a8:	4632      	movcs	r2, r6
 800f8aa:	f7ff ff9d 	bl	800f7e8 <memcpy>
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	f7fe ff11 	bl	800e6d8 <_free_r>
 800f8b6:	463c      	mov	r4, r7
 800f8b8:	e7e0      	b.n	800f87c <_realloc_r+0x1e>

0800f8ba <__ascii_wctomb>:
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	4608      	mov	r0, r1
 800f8be:	b141      	cbz	r1, 800f8d2 <__ascii_wctomb+0x18>
 800f8c0:	2aff      	cmp	r2, #255	@ 0xff
 800f8c2:	d904      	bls.n	800f8ce <__ascii_wctomb+0x14>
 800f8c4:	228a      	movs	r2, #138	@ 0x8a
 800f8c6:	601a      	str	r2, [r3, #0]
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8cc:	4770      	bx	lr
 800f8ce:	700a      	strb	r2, [r1, #0]
 800f8d0:	2001      	movs	r0, #1
 800f8d2:	4770      	bx	lr

0800f8d4 <_raise_r>:
 800f8d4:	291f      	cmp	r1, #31
 800f8d6:	b538      	push	{r3, r4, r5, lr}
 800f8d8:	4605      	mov	r5, r0
 800f8da:	460c      	mov	r4, r1
 800f8dc:	d904      	bls.n	800f8e8 <_raise_r+0x14>
 800f8de:	2316      	movs	r3, #22
 800f8e0:	6003      	str	r3, [r0, #0]
 800f8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e6:	bd38      	pop	{r3, r4, r5, pc}
 800f8e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f8ea:	b112      	cbz	r2, 800f8f2 <_raise_r+0x1e>
 800f8ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8f0:	b94b      	cbnz	r3, 800f906 <_raise_r+0x32>
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f000 f830 	bl	800f958 <_getpid_r>
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f902:	f000 b817 	b.w	800f934 <_kill_r>
 800f906:	2b01      	cmp	r3, #1
 800f908:	d00a      	beq.n	800f920 <_raise_r+0x4c>
 800f90a:	1c59      	adds	r1, r3, #1
 800f90c:	d103      	bne.n	800f916 <_raise_r+0x42>
 800f90e:	2316      	movs	r3, #22
 800f910:	6003      	str	r3, [r0, #0]
 800f912:	2001      	movs	r0, #1
 800f914:	e7e7      	b.n	800f8e6 <_raise_r+0x12>
 800f916:	2100      	movs	r1, #0
 800f918:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f91c:	4620      	mov	r0, r4
 800f91e:	4798      	blx	r3
 800f920:	2000      	movs	r0, #0
 800f922:	e7e0      	b.n	800f8e6 <_raise_r+0x12>

0800f924 <raise>:
 800f924:	4b02      	ldr	r3, [pc, #8]	@ (800f930 <raise+0xc>)
 800f926:	4601      	mov	r1, r0
 800f928:	6818      	ldr	r0, [r3, #0]
 800f92a:	f7ff bfd3 	b.w	800f8d4 <_raise_r>
 800f92e:	bf00      	nop
 800f930:	20000064 	.word	0x20000064

0800f934 <_kill_r>:
 800f934:	b538      	push	{r3, r4, r5, lr}
 800f936:	4d07      	ldr	r5, [pc, #28]	@ (800f954 <_kill_r+0x20>)
 800f938:	2300      	movs	r3, #0
 800f93a:	4604      	mov	r4, r0
 800f93c:	4608      	mov	r0, r1
 800f93e:	4611      	mov	r1, r2
 800f940:	602b      	str	r3, [r5, #0]
 800f942:	f7f5 fba9 	bl	8005098 <_kill>
 800f946:	1c43      	adds	r3, r0, #1
 800f948:	d102      	bne.n	800f950 <_kill_r+0x1c>
 800f94a:	682b      	ldr	r3, [r5, #0]
 800f94c:	b103      	cbz	r3, 800f950 <_kill_r+0x1c>
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	bd38      	pop	{r3, r4, r5, pc}
 800f952:	bf00      	nop
 800f954:	20001918 	.word	0x20001918

0800f958 <_getpid_r>:
 800f958:	f7f5 bb96 	b.w	8005088 <_getpid>

0800f95c <_malloc_usable_size_r>:
 800f95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f960:	1f18      	subs	r0, r3, #4
 800f962:	2b00      	cmp	r3, #0
 800f964:	bfbc      	itt	lt
 800f966:	580b      	ldrlt	r3, [r1, r0]
 800f968:	18c0      	addlt	r0, r0, r3
 800f96a:	4770      	bx	lr

0800f96c <_init>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	bf00      	nop
 800f970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f972:	bc08      	pop	{r3}
 800f974:	469e      	mov	lr, r3
 800f976:	4770      	bx	lr

0800f978 <_fini>:
 800f978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97a:	bf00      	nop
 800f97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f97e:	bc08      	pop	{r3}
 800f980:	469e      	mov	lr, r3
 800f982:	4770      	bx	lr
