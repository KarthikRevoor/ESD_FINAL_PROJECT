
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ec  0800eee0  0800eee0  0000fee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104cc  080104cc  00012264  2**0
                  CONTENTS
  4 .ARM          00000008  080104cc  080104cc  000114cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104d4  080104d4  00012264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104d4  080104d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080104d8  080104d8  000114d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  080104dc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d0  20000264  08010740  00012264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001934  08010740  00012934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017780  00000000  00000000  00012294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a9  00000000  00000000  00029a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f35  00000000  00000000  0002efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd5f  00000000  00000000  0002fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f617  00000000  00000000  0004bc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5b6  00000000  00000000  0006b24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  000fa844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001009a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eec4 	.word	0x0800eec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	0800eec4 	.word	0x0800eec4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ee2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ee6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000edf0 	.word	0xe000edf0
 8000f04:	e0001000 	.word	0xe0001000

08000f08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <delay+0x40>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f16:	f006 f953 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <delay+0x44>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f2c:	bf00      	nop
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <delay+0x40>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f8      	bcc.n	8000f2e <delay+0x26>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e0001000 	.word	0xe0001000
 8000f4c:	431bde83 	.word	0x431bde83

08000f50 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f004 f99a 	bl	80052b8 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f004 f97c 	bl	80052b8 <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DHT_Start>:


void DHT_Start (void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fcc:	f7ff ff6c 	bl	8000ea8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <DHT_Start+0x40>)
 8000fd4:	f7ff ffbc 	bl	8000f50 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <DHT_Start+0x40>)
 8000fde:	f004 fb07 	bl	80055f0 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fe2:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000fe6:	f7ff ff8f 	bl	8000f08 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <DHT_Start+0x40>)
 8000ff0:	f004 fafe 	bl	80055f0 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ff87 	bl	8000f08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DHT_Start+0x40>)
 8000ffe:	f7ff ffc5 	bl	8000f8c <Set_Pin_Input>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020400 	.word	0x40020400

0800100c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ff76 	bl	8000f08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800101c:	2101      	movs	r1, #1
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <DHT_Check_Response+0x58>)
 8001020:	f004 face 	bl	80055c0 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800102a:	2050      	movs	r0, #80	@ 0x50
 800102c:	f7ff ff6c 	bl	8000f08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001030:	2101      	movs	r1, #1
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <DHT_Check_Response+0x58>)
 8001034:	f004 fac4 	bl	80055c0 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DHT_Check_Response+0x38>
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001048:	bf00      	nop
 800104a:	2101      	movs	r1, #1
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <DHT_Check_Response+0x58>)
 800104e:	f004 fab7 	bl	80055c0 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f8      	bne.n	800104a <DHT_Check_Response+0x3e>

	return Response;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e037      	b.n	80010e4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001074:	bf00      	nop
 8001076:	2101      	movs	r1, #1
 8001078:	481e      	ldr	r0, [pc, #120]	@ (80010f4 <DHT_Read+0x8c>)
 800107a:	f004 faa1 	bl	80055c0 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001084:	2028      	movs	r0, #40	@ 0x28
 8001086:	f7ff ff3f 	bl	8000f08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800108a:	2101      	movs	r1, #1
 800108c:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <DHT_Read+0x8c>)
 800108e:	f004 fa97 	bl	80055c0 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2201      	movs	r2, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e00b      	b.n	80010ce <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f1c3 0307 	rsb	r3, r3, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ce:	bf00      	nop
 80010d0:	2101      	movs	r1, #1
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DHT_Read+0x8c>)
 80010d4:	f004 fa74 	bl	80055c0 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f8      	bne.n	80010d0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71bb      	strb	r3, [r7, #6]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9c4      	bls.n	8001074 <DHT_Read+0xc>
	}
	return i;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001100:	f7ff ff62 	bl	8000fc8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001104:	f7ff ff82 	bl	800100c <DHT_Check_Response>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <DHT_GetData+0xa4>)
 800110e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001110:	f7ff ffaa 	bl	8001068 <DHT_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <DHT_GetData+0xa8>)
 800111a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800111c:	f7ff ffa4 	bl	8001068 <DHT_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <DHT_GetData+0xac>)
 8001126:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001128:	f7ff ff9e 	bl	8001068 <DHT_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <DHT_GetData+0xb0>)
 8001132:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001134:	f7ff ff98 	bl	8001068 <DHT_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <DHT_GetData+0xb4>)
 800113e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001140:	f7ff ff92 	bl	8001068 <DHT_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <DHT_GetData+0xb8>)
 800114a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <DHT_GetData+0xb8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <DHT_GetData+0xa8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <DHT_GetData+0xac>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <DHT_GetData+0xb0>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <DHT_GetData+0xb4>)
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4299      	cmp	r1, r3
 800116c:	d111      	bne.n	8001192 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <DHT_GetData+0xb0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <DHT_GetData+0xa8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000286 	.word	0x20000286
 80011a0:	20000280 	.word	0x20000280
 80011a4:	20000281 	.word	0x20000281
 80011a8:	20000282 	.word	0x20000282
 80011ac:	20000283 	.word	0x20000283
 80011b0:	20000284 	.word	0x20000284

080011b4 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	is_received=1;
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000288 	.word	0x20000288

080011d4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011de:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <SELECT+0x1c>)
 80011e0:	f004 fa06 	bl	80055f0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fbb5 	bl	8004954 <HAL_Delay>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <DESELECT+0x1c>)
 8001200:	f004 f9f6 	bl	80055f0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f003 fba5 	bl	8004954 <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800121e:	bf00      	nop
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <SPI_TxByte+0x30>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b02      	cmp	r3, #2
 800122c:	d1f8      	bne.n	8001220 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800122e:	1df9      	adds	r1, r7, #7
 8001230:	2364      	movs	r3, #100	@ 0x64
 8001232:	2201      	movs	r2, #1
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <SPI_TxByte+0x30>)
 8001236:	f006 f880 	bl	800733a <HAL_SPI_Transmit>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20001338 	.word	0x20001338

08001248 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001254:	bf00      	nop
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <SPI_TxBuffer+0x30>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b02      	cmp	r3, #2
 8001262:	d1f8      	bne.n	8001256 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4803      	ldr	r0, [pc, #12]	@ (8001278 <SPI_TxBuffer+0x30>)
 800126c:	f006 f865 	bl	800733a <HAL_SPI_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20001338 	.word	0x20001338

0800127c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001286:	bf00      	nop
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <SPI_RxByte+0x34>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d1f8      	bne.n	8001288 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001296:	1dba      	adds	r2, r7, #6
 8001298:	1df9      	adds	r1, r7, #7
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <SPI_RxByte+0x34>)
 80012a2:	f006 f98e 	bl	80075c2 <HAL_SPI_TransmitReceive>

  return data;
 80012a6:	79bb      	ldrb	r3, [r7, #6]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20001338 	.word	0x20001338

080012b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012bc:	f7ff ffde 	bl	800127c <SPI_RxByte>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <SD_ReadyWait+0x30>)
 80012d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012dc:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80012de:	f7ff ffcd 	bl	800127c <SPI_RxByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d003      	beq.n	80012f4 <SD_ReadyWait+0x24>
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SD_ReadyWait+0x30>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f4      	bne.n	80012de <SD_ReadyWait+0xe>

  return res;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000292 	.word	0x20000292

08001304 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800130a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800130e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001310:	f7ff ff70 	bl	80011f4 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e005      	b.n	8001326 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	f7ff ff7a 	bl	8001214 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3301      	adds	r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b09      	cmp	r3, #9
 800132a:	ddf6      	ble.n	800131a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 800132c:	f7ff ff52 	bl	80011d4 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001330:	2340      	movs	r3, #64	@ 0x40
 8001332:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001344:	2395      	movs	r3, #149	@ 0x95
 8001346:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001348:	463b      	mov	r3, r7
 800134a:	2106      	movs	r1, #6
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff7b 	bl	8001248 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001352:	e002      	b.n	800135a <SD_PowerOn+0x56>
  {
    cnt--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800135a:	f7ff ff8f 	bl	800127c <SPI_RxByte>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d002      	beq.n	800136a <SD_PowerOn+0x66>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f4      	bne.n	8001354 <SD_PowerOn+0x50>
  }

  DESELECT();
 800136a:	f7ff ff43 	bl	80011f4 <DESELECT>
  SPI_TxByte(0XFF);
 800136e:	20ff      	movs	r0, #255	@ 0xff
 8001370:	f7ff ff50 	bl	8001214 <SPI_TxByte>

  PowerFlag = 1;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <SD_PowerOn+0x80>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000295 	.word	0x20000295

08001388 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SD_PowerOff+0x14>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000295 	.word	0x20000295

080013a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <SD_CheckPower+0x14>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000295 	.word	0x20000295

080013b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013c4:	22c8      	movs	r2, #200	@ 0xc8
 80013c6:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80013c8:	f7ff ff58 	bl	800127c <SPI_RxByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d103      	bne.n	80013de <SD_RxDataBlock+0x26>
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f4      	bne.n	80013c8 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80013e2:	d001      	beq.n	80013e8 <SD_RxDataBlock+0x30>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e00f      	b.n	8001408 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff60 	bl	80012b4 <SPI_RxBytePtr>
  } while(len--);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	603a      	str	r2, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f4      	bne.n	80013e8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80013fe:	f7ff ff3d 	bl	800127c <SPI_RxByte>
  SPI_RxByte();
 8001402:	f7ff ff3b 	bl	800127c <SPI_RxByte>

  return TRUE;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000290 	.word	0x20000290

08001414 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001424:	f7ff ff54 	bl	80012d0 <SD_ReadyWait>
 8001428:	4603      	mov	r3, r0
 800142a:	2bff      	cmp	r3, #255	@ 0xff
 800142c:	d001      	beq.n	8001432 <SD_TxDataBlock+0x1e>
 800142e:	2300      	movs	r3, #0
 8001430:	e02f      	b.n	8001492 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff feed 	bl	8001214 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2bfd      	cmp	r3, #253	@ 0xfd
 800143e:	d020      	beq.n	8001482 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff feff 	bl	8001248 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800144a:	f7ff ff17 	bl	800127c <SPI_RxByte>
    SPI_RxByte();
 800144e:	f7ff ff15 	bl	800127c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001452:	e00b      	b.n	800146c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001454:	f7ff ff12 	bl	800127c <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2b05      	cmp	r3, #5
 8001464:	d006      	beq.n	8001474 <SD_TxDataBlock+0x60>
      i++;
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	2b40      	cmp	r3, #64	@ 0x40
 8001470:	d9f0      	bls.n	8001454 <SD_TxDataBlock+0x40>
 8001472:	e000      	b.n	8001476 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001474:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001476:	bf00      	nop
 8001478:	f7ff ff00 	bl	800127c <SPI_RxByte>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0fa      	beq.n	8001478 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2b05      	cmp	r3, #5
 800148a:	d101      	bne.n	8001490 <SD_TxDataBlock+0x7c>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014a6:	f7ff ff13 	bl	80012d0 <SD_ReadyWait>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2bff      	cmp	r3, #255	@ 0xff
 80014ae:	d001      	beq.n	80014b4 <SD_SendCmd+0x1a>
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	e042      	b.n	800153a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff feac 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	0e1b      	lsrs	r3, r3, #24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fea6 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fea0 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe9a 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe95 	bl	8001214 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d102      	bne.n	80014f6 <SD_SendCmd+0x5c>
 80014f0:	2395      	movs	r3, #149	@ 0x95
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e007      	b.n	8001506 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b48      	cmp	r3, #72	@ 0x48
 80014fa:	d102      	bne.n	8001502 <SD_SendCmd+0x68>
 80014fc:	2387      	movs	r3, #135	@ 0x87
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e001      	b.n	8001506 <SD_SendCmd+0x6c>
  else crc = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe83 	bl	8001214 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b4c      	cmp	r3, #76	@ 0x4c
 8001512:	d101      	bne.n	8001518 <SD_SendCmd+0x7e>
 8001514:	f7ff feb2 	bl	800127c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001518:	230a      	movs	r3, #10
 800151a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800151c:	f7ff feae 	bl	800127c <SPI_RxByte>
 8001520:	4603      	mov	r3, r0
 8001522:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001524:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <SD_SendCmd+0x9e>
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	3b01      	subs	r3, #1
 8001530:	73bb      	strb	r3, [r7, #14]
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f1      	bne.n	800151c <SD_SendCmd+0x82>

  return res;
 8001538:	7b7b      	ldrb	r3, [r7, #13]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_initialize+0x14>
 8001554:	2301      	movs	r3, #1
 8001556:	e0d1      	b.n	80016fc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <SD_disk_initialize+0x1c0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <SD_disk_initialize+0x2a>
 8001566:	4b67      	ldr	r3, [pc, #412]	@ (8001704 <SD_disk_initialize+0x1c0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	e0c6      	b.n	80016fc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800156e:	f7ff fec9 	bl	8001304 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001572:	f7ff fe2f 	bl	80011d4 <SELECT>

  /* check disk type */
  type = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800157a:	2100      	movs	r1, #0
 800157c:	2040      	movs	r0, #64	@ 0x40
 800157e:	f7ff ff8c 	bl	800149a <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 80a1 	bne.w	80016cc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <SD_disk_initialize+0x1c4>)
 800158c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001590:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001592:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001596:	2048      	movs	r0, #72	@ 0x48
 8001598:	f7ff ff7f 	bl	800149a <SD_SendCmd>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d155      	bne.n	800164e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e00c      	b.n	80015c2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80015a8:	7bfc      	ldrb	r4, [r7, #15]
 80015aa:	f7ff fe67 	bl	800127c <SPI_RxByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	f104 0310 	add.w	r3, r4, #16
 80015b6:	443b      	add	r3, r7
 80015b8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d9ef      	bls.n	80015a8 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d17e      	bne.n	80016cc <SD_disk_initialize+0x188>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2baa      	cmp	r3, #170	@ 0xaa
 80015d2:	d17b      	bne.n	80016cc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015d4:	2100      	movs	r1, #0
 80015d6:	2077      	movs	r0, #119	@ 0x77
 80015d8:	f7ff ff5f 	bl	800149a <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d807      	bhi.n	80015f2 <SD_disk_initialize+0xae>
 80015e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015e6:	2069      	movs	r0, #105	@ 0x69
 80015e8:	f7ff ff57 	bl	800149a <SD_SendCmd>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <SD_disk_initialize+0xb8>
        } while (Timer1);
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ec      	bne.n	80015d4 <SD_disk_initialize+0x90>
 80015fa:	e000      	b.n	80015fe <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015fc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <SD_disk_initialize+0x1c4>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d062      	beq.n	80016cc <SD_disk_initialize+0x188>
 8001606:	2100      	movs	r1, #0
 8001608:	207a      	movs	r0, #122	@ 0x7a
 800160a:	f7ff ff46 	bl	800149a <SD_SendCmd>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15b      	bne.n	80016cc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e00c      	b.n	8001634 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800161a:	7bfc      	ldrb	r4, [r7, #15]
 800161c:	f7ff fe2e 	bl	800127c <SPI_RxByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	f104 0310 	add.w	r3, r4, #16
 8001628:	443b      	add	r3, r7
 800162a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d9ef      	bls.n	800161a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800163a:	7a3b      	ldrb	r3, [r7, #8]
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SD_disk_initialize+0x104>
 8001644:	230c      	movs	r3, #12
 8001646:	e000      	b.n	800164a <SD_disk_initialize+0x106>
 8001648:	2304      	movs	r3, #4
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e03e      	b.n	80016cc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800164e:	2100      	movs	r1, #0
 8001650:	2077      	movs	r0, #119	@ 0x77
 8001652:	f7ff ff22 	bl	800149a <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	2b01      	cmp	r3, #1
 800165a:	d808      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800165c:	2100      	movs	r1, #0
 800165e:	2069      	movs	r0, #105	@ 0x69
 8001660:	f7ff ff1b 	bl	800149a <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d801      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800166a:	2302      	movs	r3, #2
 800166c:	e000      	b.n	8001670 <SD_disk_initialize+0x12c>
 800166e:	2301      	movs	r3, #1
 8001670:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d10e      	bne.n	8001696 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001678:	2100      	movs	r1, #0
 800167a:	2077      	movs	r0, #119	@ 0x77
 800167c:	f7ff ff0d 	bl	800149a <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d80e      	bhi.n	80016a4 <SD_disk_initialize+0x160>
 8001686:	2100      	movs	r1, #0
 8001688:	2069      	movs	r0, #105	@ 0x69
 800168a:	f7ff ff06 	bl	800149a <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <SD_disk_initialize+0x160>
 8001694:	e00c      	b.n	80016b0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001696:	2100      	movs	r1, #0
 8001698:	2041      	movs	r0, #65	@ 0x41
 800169a:	f7ff fefe 	bl	800149a <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e2      	bne.n	8001672 <SD_disk_initialize+0x12e>
 80016ac:	e000      	b.n	80016b0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ae:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <SD_disk_initialize+0x184>
 80016b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016bc:	2050      	movs	r0, #80	@ 0x50
 80016be:	f7ff feec 	bl	800149a <SD_SendCmd>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SD_disk_initialize+0x188>
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <SD_disk_initialize+0x1c8>)
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80016d2:	f7ff fd8f 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80016d6:	f7ff fdd1 	bl	800127c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e001      	b.n	80016f6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016f2:	f7ff fe49 	bl	8001388 <SD_PowerOff>
  }

  return Stat;
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000290 	.word	0x20000290
 800170c:	20000294 	.word	0x20000294

08001710 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_status+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e002      	b.n	800172a <SD_disk_status+0x1a>
  return Stat;
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SD_disk_status+0x28>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000000 	.word	0x20000000

0800173c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <SD_disk_read+0x1c>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <SD_disk_read+0x20>
 8001758:	2304      	movs	r3, #4
 800175a:	e051      	b.n	8001800 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <SD_disk_read+0xcc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_read+0x32>
 800176a:	2303      	movs	r3, #3
 800176c:	e048      	b.n	8001800 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <SD_disk_read+0xd0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <SD_disk_read+0x44>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001780:	f7ff fd28 	bl	80011d4 <SELECT>

  if (count == 1)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d111      	bne.n	80017ae <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2051      	movs	r0, #81	@ 0x51
 800178e:	f7ff fe84 	bl	800149a <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d129      	bne.n	80017ec <SD_disk_read+0xb0>
 8001798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7ff fe0b 	bl	80013b8 <SD_RxDataBlock>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d021      	beq.n	80017ec <SD_disk_read+0xb0>
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	e01e      	b.n	80017ec <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2052      	movs	r0, #82	@ 0x52
 80017b2:	f7ff fe72 	bl	800149a <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d117      	bne.n	80017ec <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80017bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	f7ff fdf9 	bl	80013b8 <SD_RxDataBlock>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <SD_disk_read+0xa6>
        buff += 512;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017d2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ed      	bne.n	80017bc <SD_disk_read+0x80>
 80017e0:	e000      	b.n	80017e4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80017e2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	204c      	movs	r0, #76	@ 0x4c
 80017e8:	f7ff fe57 	bl	800149a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80017ec:	f7ff fd02 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80017f0:	f7ff fd44 	bl	800127c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000294 	.word	0x20000294

08001810 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <SD_disk_write+0x1c>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <SD_disk_write+0x20>
 800182c:	2304      	movs	r3, #4
 800182e:	e06b      	b.n	8001908 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <SD_disk_write+0x100>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SD_disk_write+0x32>
 800183e:	2303      	movs	r3, #3
 8001840:	e062      	b.n	8001908 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001842:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <SD_disk_write+0x100>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SD_disk_write+0x44>
 8001850:	2302      	movs	r3, #2
 8001852:	e059      	b.n	8001908 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001854:	4b2f      	ldr	r3, [pc, #188]	@ (8001914 <SD_disk_write+0x104>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <SD_disk_write+0x56>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	607b      	str	r3, [r7, #4]

  SELECT();
 8001866:	f7ff fcb5 	bl	80011d4 <SELECT>

  if (count == 1)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d110      	bne.n	8001892 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	2058      	movs	r0, #88	@ 0x58
 8001874:	f7ff fe11 	bl	800149a <SD_SendCmd>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d13a      	bne.n	80018f4 <SD_disk_write+0xe4>
 800187e:	21fe      	movs	r1, #254	@ 0xfe
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f7ff fdc7 	bl	8001414 <SD_TxDataBlock>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d033      	beq.n	80018f4 <SD_disk_write+0xe4>
      count = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	e030      	b.n	80018f4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <SD_disk_write+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800189e:	2100      	movs	r1, #0
 80018a0:	2077      	movs	r0, #119	@ 0x77
 80018a2:	f7ff fdfa 	bl	800149a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	2057      	movs	r0, #87	@ 0x57
 80018aa:	f7ff fdf6 	bl	800149a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2059      	movs	r0, #89	@ 0x59
 80018b2:	f7ff fdf2 	bl	800149a <SD_SendCmd>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11b      	bne.n	80018f4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018bc:	21fc      	movs	r1, #252	@ 0xfc
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f7ff fda8 	bl	8001414 <SD_TxDataBlock>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00a      	beq.n	80018e0 <SD_disk_write+0xd0>
        buff += 512;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018d0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ee      	bne.n	80018bc <SD_disk_write+0xac>
 80018de:	e000      	b.n	80018e2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018e0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80018e2:	21fd      	movs	r1, #253	@ 0xfd
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fd95 	bl	8001414 <SD_TxDataBlock>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <SD_disk_write+0xe4>
      {
        count = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80018f4:	f7ff fc7e 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80018f8:	f7ff fcc0 	bl	800127c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000294 	.word	0x20000294

08001918 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b08b      	sub	sp, #44	@ 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	460b      	mov	r3, r1
 8001926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SD_disk_ioctl+0x1e>
 8001932:	2304      	movs	r3, #4
 8001934:	e113      	b.n	8001b5e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d124      	bne.n	800198c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d012      	beq.n	8001970 <SD_disk_ioctl+0x58>
 800194a:	2b02      	cmp	r3, #2
 800194c:	dc1a      	bgt.n	8001984 <SD_disk_ioctl+0x6c>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <SD_disk_ioctl+0x40>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d006      	beq.n	8001964 <SD_disk_ioctl+0x4c>
 8001956:	e015      	b.n	8001984 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001958:	f7ff fd16 	bl	8001388 <SD_PowerOff>
      res = RES_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001962:	e0fa      	b.n	8001b5a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001964:	f7ff fcce 	bl	8001304 <SD_PowerOn>
      res = RES_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800196e:	e0f4      	b.n	8001b5a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	1c5c      	adds	r4, r3, #1
 8001974:	f7ff fd14 	bl	80013a0 <SD_CheckPower>
 8001978:	4603      	mov	r3, r0
 800197a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001982:	e0ea      	b.n	8001b5a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001984:	2304      	movs	r3, #4
 8001986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800198a:	e0e6      	b.n	8001b5a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800198c:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <SD_disk_ioctl+0x250>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SD_disk_ioctl+0x86>
 800199a:	2303      	movs	r3, #3
 800199c:	e0df      	b.n	8001b5e <SD_disk_ioctl+0x246>

    SELECT();
 800199e:	f7ff fc19 	bl	80011d4 <SELECT>

    switch (ctrl)
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	2b0d      	cmp	r3, #13
 80019a6:	f200 80c9 	bhi.w	8001b3c <SD_disk_ioctl+0x224>
 80019aa:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <SD_disk_ioctl+0x98>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001aa7 	.word	0x08001aa7
 80019b4:	080019e9 	.word	0x080019e9
 80019b8:	08001a97 	.word	0x08001a97
 80019bc:	08001b3d 	.word	0x08001b3d
 80019c0:	08001b3d 	.word	0x08001b3d
 80019c4:	08001b3d 	.word	0x08001b3d
 80019c8:	08001b3d 	.word	0x08001b3d
 80019cc:	08001b3d 	.word	0x08001b3d
 80019d0:	08001b3d 	.word	0x08001b3d
 80019d4:	08001b3d 	.word	0x08001b3d
 80019d8:	08001b3d 	.word	0x08001b3d
 80019dc:	08001ab9 	.word	0x08001ab9
 80019e0:	08001add 	.word	0x08001add
 80019e4:	08001b01 	.word	0x08001b01
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019e8:	2100      	movs	r1, #0
 80019ea:	2049      	movs	r0, #73	@ 0x49
 80019ec:	f7ff fd55 	bl	800149a <SD_SendCmd>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80a6 	bne.w	8001b44 <SD_disk_ioctl+0x22c>
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2110      	movs	r1, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fcda 	bl	80013b8 <SD_RxDataBlock>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 809c 	beq.w	8001b44 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	029a      	lsls	r2, r3, #10
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e02d      	b.n	8001a8e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a32:	7c7b      	ldrb	r3, [r7, #17]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	09db      	lsrs	r3, r3, #7
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f003 0306 	and.w	r3, r3, #6
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3302      	adds	r3, #2
 8001a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a5a:	7d3b      	ldrb	r3, [r7, #20]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	7cbb      	ldrb	r3, [r7, #18]
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a80:	8bfa      	ldrh	r2, [r7, #30]
 8001a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a86:	3b09      	subs	r3, #9
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001a94:	e056      	b.n	8001b44 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001aa4:	e055      	b.n	8001b52 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001aa6:	f7ff fc13 	bl	80012d0 <SD_ReadyWait>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2bff      	cmp	r3, #255	@ 0xff
 8001aae:	d14b      	bne.n	8001b48 <SD_disk_ioctl+0x230>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ab6:	e047      	b.n	8001b48 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2049      	movs	r0, #73	@ 0x49
 8001abc:	f7ff fced 	bl	800149a <SD_SendCmd>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d142      	bne.n	8001b4c <SD_disk_ioctl+0x234>
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f7ff fc75 	bl	80013b8 <SD_RxDataBlock>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03b      	beq.n	8001b4c <SD_disk_ioctl+0x234>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ada:	e037      	b.n	8001b4c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001adc:	2100      	movs	r1, #0
 8001ade:	204a      	movs	r0, #74	@ 0x4a
 8001ae0:	f7ff fcdb 	bl	800149a <SD_SendCmd>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d132      	bne.n	8001b50 <SD_disk_ioctl+0x238>
 8001aea:	2110      	movs	r1, #16
 8001aec:	6a38      	ldr	r0, [r7, #32]
 8001aee:	f7ff fc63 	bl	80013b8 <SD_RxDataBlock>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02b      	beq.n	8001b50 <SD_disk_ioctl+0x238>
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001afe:	e027      	b.n	8001b50 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b00:	2100      	movs	r1, #0
 8001b02:	207a      	movs	r0, #122	@ 0x7a
 8001b04:	f7ff fcc9 	bl	800149a <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b14:	e00b      	b.n	8001b2e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8001b16:	6a3c      	ldr	r4, [r7, #32]
 8001b18:	1c63      	adds	r3, r4, #1
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	f7ff fbae 	bl	800127c <SPI_RxByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ef      	bls.n	8001b16 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b42:	e006      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b44:	bf00      	nop
 8001b46:	e004      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b48:	bf00      	nop
 8001b4a:	e002      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e000      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b50:	bf00      	nop
    }

    DESELECT();
 8001b52:	f7ff fb4f 	bl	80011f4 <DESELECT>
    SPI_RxByte();
 8001b56:	f7ff fb91 	bl	800127c <SPI_RxByte>
  }

  return res;
 8001b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	372c      	adds	r7, #44	@ 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <SD_Init>:
#define POKEBALL_WIDTH 15
#define POKEBALL_HEIGHT 15
static FATFS FatFs; // Persistent FatFS handle

// Initialize the SD card once
void SD_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
    FRESULT fres = f_mount(&FatFs, "", 1); // Mount the SD card
 8001b72:	2201      	movs	r2, #1
 8001b74:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <SD_Init+0x34>)
 8001b76:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <SD_Init+0x38>)
 8001b78:	f009 fb52 	bl	800b220 <f_mount>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
    if (fres != FR_OK) {
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <SD_Init+0x26>
        printf("Error: Failed to mount SD card (%i)\r\n", fres);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <SD_Init+0x3c>)
 8001b8c:	f00a fffc 	bl	800cb88 <iprintf>
    } else {
        printf("SD Card Mounted Successfully!\r\n");
    }
}
 8001b90:	e002      	b.n	8001b98 <SD_Init+0x2c>
        printf("SD Card Mounted Successfully!\r\n");
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <SD_Init+0x40>)
 8001b94:	f00b f860 	bl	800cc58 <puts>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800eee0 	.word	0x0800eee0
 8001ba4:	20000298 	.word	0x20000298
 8001ba8:	0800eee4 	.word	0x0800eee4
 8001bac:	0800ef0c 	.word	0x0800ef0c

08001bb0 <process_SD_card>:
void SD_Deinit(void) {
    f_mount(NULL, "", 0); // Unmount the SD card
    printf("SD Card Unmounted Successfully!\r\n");
}

void process_SD_card(const char *filename) {
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bc0:	f843 0cb4 	str.w	r0, [r3, #-180]
    FIL fil;                 // File handle
    FRESULT fres;            // Result after operations

    do {
 8001bc4:	466b      	mov	r3, sp
 8001bc6:	461e      	mov	r6, r3
        // Open the BMP file
        fres = f_open(&fil, filename, FA_READ);
 8001bc8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bd2:	3b14      	subs	r3, #20
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f009 fb66 	bl	800b2ac <f_open>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001be6:	f102 0211 	add.w	r2, r2, #17
 8001bea:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK) {
 8001bec:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001bf0:	f103 0311 	add.w	r3, r3, #17
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <process_SD_card+0x68>
            printf("Error: Failed to open file %s (%i)\r\n", filename, fres);
 8001bfa:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001bfe:	f103 0311 	add.w	r3, r3, #17
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001c08:	4611      	mov	r1, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001c10:	48c3      	ldr	r0, [pc, #780]	@ (8001f20 <process_SD_card+0x370>)
 8001c12:	f00a ffb9 	bl	800cb88 <iprintf>
            break;
 8001c16:	e2d8      	b.n	80021ca <process_SD_card+0x61a>
        }

        printf("File %s opened successfully!\r\n", filename);
 8001c18:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c1c:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 8001c20:	48c0      	ldr	r0, [pc, #768]	@ (8001f24 <process_SD_card+0x374>)
 8001c22:	f00a ffb1 	bl	800cb88 <iprintf>

        // Read and parse BMP header
        uint8_t bmpHeader[54];
        UINT bytesRead;
        fres = f_read(&fil, bmpHeader, sizeof(bmpHeader), &bytesRead);
 8001c26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c2a:	3b18      	subs	r3, #24
 8001c2c:	f107 0120 	add.w	r1, r7, #32
 8001c30:	3910      	subs	r1, #16
 8001c32:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001c36:	3814      	subs	r0, #20
 8001c38:	2236      	movs	r2, #54	@ 0x36
 8001c3a:	f009 fcff 	bl	800b63c <f_read>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c44:	f102 0211 	add.w	r2, r2, #17
 8001c48:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK || bytesRead != sizeof(bmpHeader)) {
 8001c4a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001c4e:	f103 0311 	add.w	r3, r3, #17
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <process_SD_card+0xb4>
 8001c58:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c5c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001c60:	2b36      	cmp	r3, #54	@ 0x36
 8001c62:	d009      	beq.n	8001c78 <process_SD_card+0xc8>
            printf("Error: Failed to read BMP header\r\n");
 8001c64:	48b0      	ldr	r0, [pc, #704]	@ (8001f28 <process_SD_card+0x378>)
 8001c66:	f00a fff7 	bl	800cc58 <puts>
            f_close(&fil);
 8001c6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c6e:	3b14      	subs	r3, #20
 8001c70:	4618      	mov	r0, r3
 8001c72:	f009 fec0 	bl	800b9f6 <f_close>
            break;
 8001c76:	e2a8      	b.n	80021ca <process_SD_card+0x61a>
        }

        // Extract BMP information
        uint16_t imageWidth = *(uint16_t *)&bmpHeader[18];
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	3b10      	subs	r3, #16
 8001c7e:	3312      	adds	r3, #18
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c86:	f102 020e 	add.w	r2, r2, #14
 8001c8a:	8013      	strh	r3, [r2, #0]
        uint16_t imageHeight = *(uint16_t *)&bmpHeader[22];
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	3b10      	subs	r3, #16
 8001c92:	3316      	adds	r3, #22
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c9a:	f102 020c 	add.w	r2, r2, #12
 8001c9e:	8013      	strh	r3, [r2, #0]
        uint32_t dataOffset = *(uint32_t *)&bmpHeader[10];
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	3b10      	subs	r3, #16
 8001ca6:	330a      	adds	r3, #10
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cae:	f102 0208 	add.w	r2, r2, #8
 8001cb2:	6013      	str	r3, [r2, #0]
        uint16_t bpp = *(uint16_t *)&bmpHeader[28]; // Bits per pixel
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	3b10      	subs	r3, #16
 8001cba:	331c      	adds	r3, #28
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cc2:	f102 0206 	add.w	r2, r2, #6
 8001cc6:	8013      	strh	r3, [r2, #0]
        printf("Image Info: Width=%d, Height=%d, DataOffset=%lu, BPP=%d\r\n",
 8001cc8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ccc:	f103 030e 	add.w	r3, r3, #14
 8001cd0:	8819      	ldrh	r1, [r3, #0]
 8001cd2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cd6:	f103 030c 	add.w	r3, r3, #12
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ce0:	f103 0306 	add.w	r3, r3, #6
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cec:	f103 0308 	add.w	r3, r3, #8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	488e      	ldr	r0, [pc, #568]	@ (8001f2c <process_SD_card+0x37c>)
 8001cf4:	f00a ff48 	bl	800cb88 <iprintf>
               imageWidth, imageHeight, dataOffset, bpp);

        // Validate BMP format
        if (bpp != 24 && bpp != 16) { // Check for 24-bit or 16-bit BMP
 8001cf8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cfc:	f103 0306 	add.w	r3, r3, #6
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b18      	cmp	r3, #24
 8001d04:	d010      	beq.n	8001d28 <process_SD_card+0x178>
 8001d06:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d0a:	f103 0306 	add.w	r3, r3, #6
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d009      	beq.n	8001d28 <process_SD_card+0x178>
            printf("Error: Unsupported BMP format. Only 24-bit and 16-bit supported.\r\n");
 8001d14:	4886      	ldr	r0, [pc, #536]	@ (8001f30 <process_SD_card+0x380>)
 8001d16:	f00a ff9f 	bl	800cc58 <puts>
            f_close(&fil);
 8001d1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d1e:	3b14      	subs	r3, #20
 8001d20:	4618      	mov	r0, r3
 8001d22:	f009 fe68 	bl	800b9f6 <f_close>
            break;
 8001d26:	e250      	b.n	80021ca <process_SD_card+0x61a>
        }

        // Move to pixel data
        if (f_lseek(&fil, dataOffset) != FR_OK) {
 8001d28:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d2c:	3b14      	subs	r3, #20
 8001d2e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d32:	f102 0208 	add.w	r2, r2, #8
 8001d36:	6811      	ldr	r1, [r2, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f009 fe86 	bl	800ba4a <f_lseek>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <process_SD_card+0x1a8>
            printf("Error: Failed to seek to pixel data\r\n");
 8001d44:	487b      	ldr	r0, [pc, #492]	@ (8001f34 <process_SD_card+0x384>)
 8001d46:	f00a ff87 	bl	800cc58 <puts>
            f_close(&fil);
 8001d4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d4e:	3b14      	subs	r3, #20
 8001d50:	4618      	mov	r0, r3
 8001d52:	f009 fe50 	bl	800b9f6 <f_close>
            break;
 8001d56:	e238      	b.n	80021ca <process_SD_card+0x61a>
        }

        printf("Starting image rendering...\r\n");
 8001d58:	4877      	ldr	r0, [pc, #476]	@ (8001f38 <process_SD_card+0x388>)
 8001d5a:	f00a ff7d 	bl	800cc58 <puts>

        uint32_t rowSize = ((imageWidth * (bpp / 8) + 3) & ~3); // Ensure 4-byte alignment
 8001d5e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d62:	f103 030e 	add.w	r3, r3, #14
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d6c:	f102 0206 	add.w	r2, r2, #6
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	08d2      	lsrs	r2, r2, #3
 8001d74:	b292      	uxth	r2, r2
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	f023 0303 	bic.w	r3, r3, #3
 8001d80:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d84:	6013      	str	r3, [r2, #0]
        uint16_t maxRowsPerBuffer = 128; // Increased rows per buffer
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001d8c:	f102 021e 	add.w	r2, r2, #30
 8001d90:	8013      	strh	r3, [r2, #0]
        uint32_t bufferSize = imageWidth * maxRowsPerBuffer * 2; // RGB565 buffer size
 8001d92:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d96:	f103 030e 	add.w	r3, r3, #14
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001da0:	f102 021e 	add.w	r2, r2, #30
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001db0:	f102 0218 	add.w	r2, r2, #24
 8001db4:	6013      	str	r3, [r2, #0]
        uint8_t rowBuffer[rowSize]; // Buffer for a single row
 8001db6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001dc4:	f102 0214 	add.w	r2, r2, #20
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	00c3      	lsls	r3, r0, #3
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	00c2      	lsls	r2, r0, #3
 8001de6:	2300      	movs	r3, #0
 8001de8:	468a      	mov	sl, r1
 8001dea:	469b      	mov	fp, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e00:	1dcb      	adds	r3, r1, #7
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	ebad 0d03 	sub.w	sp, sp, r3
 8001e0a:	ab02      	add	r3, sp, #8
 8001e0c:	3300      	adds	r3, #0
 8001e0e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e12:	f102 0210 	add.w	r2, r2, #16
 8001e16:	6013      	str	r3, [r2, #0]
        uint8_t lineBuffer[bufferSize]; // Buffer for multiple rows
 8001e18:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001e1c:	f103 0318 	add.w	r3, r3, #24
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	460b      	mov	r3, r1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e2a:	f102 020c 	add.w	r2, r2, #12
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	4688      	mov	r8, r1
 8001e34:	4699      	mov	r9, r3
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	461d      	mov	r5, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00eb      	lsls	r3, r5, #3
 8001e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	1dcb      	adds	r3, r1, #7
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6a:	ab02      	add	r3, sp, #8
 8001e6c:	3300      	adds	r3, #0
 8001e6e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e72:	f102 0208 	add.w	r2, r2, #8
 8001e76:	6013      	str	r3, [r2, #0]

        ILI9341_SetAddressWindow(0, 0, imageWidth - 1, imageHeight - 1);
 8001e78:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e7c:	f103 030e 	add.w	r3, r3, #14
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e8a:	f103 030c 	add.w	r3, r3, #12
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	2000      	movs	r0, #0
 8001e98:	f001 fa34 	bl	8003304 <ILI9341_SetAddressWindow>

        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001ea2:	f102 021e 	add.w	r2, r2, #30
 8001ea6:	8013      	strh	r3, [r2, #0]
 8001ea8:	e170      	b.n	800218c <process_SD_card+0x5dc>
            uint16_t rowsToProcess = (y + maxRowsPerBuffer > imageHeight)
 8001eaa:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001eae:	f103 031e 	add.w	r3, r3, #30
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001eb8:	f103 031e 	add.w	r3, r3, #30
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ec4:	f103 030c 	add.w	r3, r3, #12
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dd0c      	ble.n	8001ee8 <process_SD_card+0x338>
 8001ece:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ed2:	f103 030c 	add.w	r3, r3, #12
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001edc:	f103 031e 	add.w	r3, r3, #30
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	e004      	b.n	8001ef2 <process_SD_card+0x342>
 8001ee8:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001eec:	f103 031e 	add.w	r3, r3, #30
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001ef6:	f102 0206 	add.w	r2, r2, #6
 8001efa:	8013      	strh	r3, [r2, #0]
                                     ? (imageHeight - y)
                                     : maxRowsPerBuffer;
            uint8_t *linePtr = lineBuffer;
 8001efc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001f00:	f103 0308 	add.w	r3, r3, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f0a:	f102 0218 	add.w	r2, r2, #24
 8001f0e:	6013      	str	r3, [r2, #0]

            for (uint16_t row = 0; row < rowsToProcess; row++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f16:	f102 0216 	add.w	r2, r2, #22
 8001f1a:	8013      	strh	r3, [r2, #0]
 8001f1c:	e102      	b.n	8002124 <process_SD_card+0x574>
 8001f1e:	bf00      	nop
 8001f20:	0800ef50 	.word	0x0800ef50
 8001f24:	0800ef78 	.word	0x0800ef78
 8001f28:	0800ef98 	.word	0x0800ef98
 8001f2c:	0800efbc 	.word	0x0800efbc
 8001f30:	0800eff8 	.word	0x0800eff8
 8001f34:	0800f03c 	.word	0x0800f03c
 8001f38:	0800f064 	.word	0x0800f064
                fres = f_read(&fil, rowBuffer, rowSize, &bytesRead);
 8001f3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f40:	3b18      	subs	r3, #24
 8001f42:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001f46:	3814      	subs	r0, #20
 8001f48:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f507 5184 	add.w	r1, r7, #4224	@ 0x1080
 8001f52:	f101 0110 	add.w	r1, r1, #16
 8001f56:	6809      	ldr	r1, [r1, #0]
 8001f58:	f009 fb70 	bl	800b63c <f_read>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f62:	f102 0211 	add.w	r2, r2, #17
 8001f66:	7013      	strb	r3, [r2, #0]
                if (fres != FR_OK || bytesRead < rowSize) {
 8001f68:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f6c:	f103 0311 	add.w	r3, r3, #17
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <process_SD_card+0x3d8>
 8001f76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f7a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001f7e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d917      	bls.n	8001fb8 <process_SD_card+0x408>
                    printf("Error: Failed to read row %d, fres=%d, bytesRead=%u\r\n", y + row, fres, bytesRead);
 8001f88:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f8c:	f103 031e 	add.w	r3, r3, #30
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f96:	f103 0316 	add.w	r3, r3, #22
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	18d1      	adds	r1, r2, r3
 8001f9e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fa2:	f103 0311 	add.w	r3, r3, #17
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001fac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001fb0:	488a      	ldr	r0, [pc, #552]	@ (80021dc <process_SD_card+0x62c>)
 8001fb2:	f00a fde9 	bl	800cb88 <iprintf>
                    break;
 8001fb6:	e0c2      	b.n	800213e <process_SD_card+0x58e>
                }

                for (uint16_t x = 0; x < imageWidth; x++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001fbe:	f102 0214 	add.w	r2, r2, #20
 8001fc2:	8013      	strh	r3, [r2, #0]
 8001fc4:	e096      	b.n	80020f4 <process_SD_card+0x544>
                    uint16_t color;

                    if (bpp == 24) {
 8001fc6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fca:	f103 0306 	add.w	r3, r3, #6
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b18      	cmp	r3, #24
 8001fd2:	d13f      	bne.n	8002054 <process_SD_card+0x4a4>
                        // 24-bit RGB (RGB888 -> RGB565)
                        uint8_t *pixel = &rowBuffer[x * 3];
 8001fd4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fd8:	f103 0314 	add.w	r3, r3, #20
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001fe8:	f102 0210 	add.w	r2, r2, #16
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001ff4:	f102 021c 	add.w	r2, r2, #28
 8001ff8:	6013      	str	r3, [r2, #0]
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 8001ffa:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001ffe:	f103 031c 	add.w	r3, r3, #28
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3302      	adds	r3, #2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21b      	sxth	r3, r3
 800200c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002010:	f023 0307 	bic.w	r3, r3, #7
 8002014:	b21a      	sxth	r2, r3
                                ((pixel[1] & 0xFC) << 3) | // Green
 8002016:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800201a:	f103 031c 	add.w	r3, r3, #28
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	b21b      	sxth	r3, r3
 8002028:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800202c:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 800202e:	4313      	orrs	r3, r2
 8002030:	b21a      	sxth	r2, r3
                                (pixel[0] >> 3);          // Blue
 8002032:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002036:	f103 031c 	add.w	r3, r3, #28
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
                                ((pixel[1] & 0xFC) << 3) | // Green
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 8002048:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800204c:	f102 0212 	add.w	r2, r2, #18
 8002050:	8013      	strh	r3, [r2, #0]
 8002052:	e01e      	b.n	8002092 <process_SD_card+0x4e2>
                    } else if (bpp == 16) {
 8002054:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002058:	f103 0306 	add.w	r3, r3, #6
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d117      	bne.n	8002092 <process_SD_card+0x4e2>
                        // 16-bit RGB565
                        uint16_t *pixel = (uint16_t *)&rowBuffer[x * 2];
 8002062:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002066:	f103 0314 	add.w	r3, r3, #20
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002072:	f102 0210 	add.w	r2, r2, #16
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4413      	add	r3, r2
 800207a:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800207e:	6013      	str	r3, [r2, #0]
                        color = *pixel; // Directly use the RGB565 value
 8002080:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800208c:	f102 0212 	add.w	r2, r2, #18
 8002090:	8013      	strh	r3, [r2, #0]
                    }

                    *linePtr++ = color >> 8;        // High byte
 8002092:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002096:	f103 0312 	add.w	r3, r3, #18
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b299      	uxth	r1, r3
 80020a0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020a4:	f103 0318 	add.w	r3, r3, #24
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	f507 5085 	add.w	r0, r7, #4256	@ 0x10a0
 80020b0:	f100 0018 	add.w	r0, r0, #24
 80020b4:	6002      	str	r2, [r0, #0]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
                    *linePtr++ = color & 0xFF;     // Low byte
 80020ba:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020be:	f103 0318 	add.w	r3, r3, #24
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 80020ca:	f101 0118 	add.w	r1, r1, #24
 80020ce:	600a      	str	r2, [r1, #0]
 80020d0:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020d4:	f102 0212 	add.w	r2, r2, #18
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
                for (uint16_t x = 0; x < imageWidth; x++) {
 80020de:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020e2:	f103 0314 	add.w	r3, r3, #20
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020ee:	f102 0214 	add.w	r2, r2, #20
 80020f2:	8013      	strh	r3, [r2, #0]
 80020f4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020f8:	f103 0314 	add.w	r3, r3, #20
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002102:	f103 030e 	add.w	r3, r3, #14
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	f4ff af5c 	bcc.w	8001fc6 <process_SD_card+0x416>
            for (uint16_t row = 0; row < rowsToProcess; row++) {
 800210e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002112:	f103 0316 	add.w	r3, r3, #22
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800211e:	f102 0216 	add.w	r2, r2, #22
 8002122:	8013      	strh	r3, [r2, #0]
 8002124:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002128:	f103 0316 	add.w	r3, r3, #22
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002132:	f103 0306 	add.w	r3, r3, #6
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	f4ff aeff 	bcc.w	8001f3c <process_SD_card+0x38c>
                }
            }

            // Send the entire buffer for rowsToProcess
            ILI9341_SendData(lineBuffer, rowsToProcess * imageWidth * 2);
 800213e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002142:	f103 0306 	add.w	r3, r3, #6
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800214c:	f103 030e 	add.w	r3, r3, #14
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	fb12 f303 	smulbb	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002162:	f103 0308 	add.w	r3, r3, #8
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f000 ff56 	bl	8003018 <ILI9341_SendData>
        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 800216c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002170:	f103 031e 	add.w	r3, r3, #30
 8002174:	881a      	ldrh	r2, [r3, #0]
 8002176:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800217a:	f103 031e 	add.w	r3, r3, #30
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002186:	f102 021e 	add.w	r2, r2, #30
 800218a:	8013      	strh	r3, [r2, #0]
 800218c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002190:	f103 031e 	add.w	r3, r3, #30
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800219a:	f103 030c 	add.w	r3, r3, #12
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f4ff ae82 	bcc.w	8001eaa <process_SD_card+0x2fa>
        }

        printf("Image rendered successfully!\r\n");
 80021a6:	480e      	ldr	r0, [pc, #56]	@ (80021e0 <process_SD_card+0x630>)
 80021a8:	f00a fd56 	bl	800cc58 <puts>

        // Close the BMP file
        f_close(&fil);
 80021ac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021b0:	3b14      	subs	r3, #20
 80021b2:	4618      	mov	r0, r3
 80021b4:	f009 fc1f 	bl	800b9f6 <f_close>
        printf("File %s closed successfully!\r\n", filename);
 80021b8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80021bc:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 80021c0:	4808      	ldr	r0, [pc, #32]	@ (80021e4 <process_SD_card+0x634>)
 80021c2:	f00a fce1 	bl	800cb88 <iprintf>
 80021c6:	46b5      	mov	sp, r6

    } while (false);

}
 80021c8:	e000      	b.n	80021cc <process_SD_card+0x61c>
            break;
 80021ca:	46b5      	mov	sp, r6
}
 80021cc:	bf00      	nop
 80021ce:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 80021d2:	3704      	adds	r7, #4
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021da:	bf00      	nop
 80021dc:	0800f084 	.word	0x0800f084
 80021e0:	0800f0bc 	.word	0x0800f0bc
 80021e4:	0800f0dc 	.word	0x0800f0dc

080021e8 <IR_init>:

// Variable to indicate detection
volatile uint32_t ir_triggered = 0;

// Initialize the IR sensor pin with interrupt
void IR_init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <IR_init+0x60>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <IR_init+0x60>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <IR_init+0x60>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

    // Configure PA7 as input with external interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800221c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002220:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4808      	ldr	r0, [pc, #32]	@ (800224c <IR_init+0x64>)
 800222c:	f003 f844 	bl	80052b8 <HAL_GPIO_Init>

    // Enable the interrupt in the NVIC
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
 8002230:	2200      	movs	r2, #0
 8002232:	2102      	movs	r1, #2
 8002234:	2017      	movs	r0, #23
 8002236:	f002 fc8c 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
 800223a:	2017      	movs	r0, #23
 800223c:	f002 fca5 	bl	8004b8a <HAL_NVIC_EnableIRQ>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_GPIO_EXTI_Callback>:

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b80      	cmp	r3, #128	@ 0x80
 800225e:	d102      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x24>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200012d0 	.word	0x200012d0

08002278 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 800227c:	2080      	movs	r0, #128	@ 0x80
 800227e:	f003 f9d1 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <IR_is_triggered>:

// Optional: Function to get the IR trigger state (can be used in main logic)
uint8_t IR_is_triggered(void) {
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
    if (ir_triggered) {
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <IR_is_triggered+0x24>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <IR_is_triggered+0x16>
        ir_triggered = 0; // Reset the flag after reading
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <IR_is_triggered+0x24>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
        return 1;         // Return true if an object was detected
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <IR_is_triggered+0x18>
    }
    return 0;             // No detection
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200012d0 	.word	0x200012d0

080022b0 <init_game>:
const char *water_pokemon[POKEMON_COUNT] = {
    "Squirtle", "Totodile", "Mudkip", "Piplup", "Froakie",
    "Vaporeon", "Lapras", "Poliwag", "Wooper", "Marill"
};

void init_game(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	IR_init();
 80022b4:	f7ff ff98 	bl	80021e8 <IR_init>
    // Initialize sensors

	//MPU_init();
    Push_Button_Init(); // Initialize push button
 80022b8:	f001 fe0c 	bl	8003ed4 <Push_Button_Init>
    Pressure_sensor_Init();
 80022bc:	f000 fd5a 	bl	8002d74 <Pressure_sensor_Init>
    ADC_Config();
 80022c0:	f000 fd76 	bl	8002db0 <ADC_Config>
    MPU_init();
 80022c4:	f000 fdde 	bl	8002e84 <MPU_init>
    ILI9341_Init(); // Initialize the LCD
 80022c8:	f000 fece 	bl	8003068 <ILI9341_Init>
    SD_Init();
 80022cc:	f7ff fc4e 	bl	8001b6c <SD_Init>
    ILI9341_FillScreen(0x0000); // Clear the screen with black color
 80022d0:	2000      	movs	r0, #0
 80022d2:	f000 ff97 	bl	8003204 <ILI9341_FillScreen>
    currentState = IDLE;
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <init_game+0x38>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]

    // Debugging output
    uart_send_string("Game initialized. System ready!\n\r");
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <init_game+0x3c>)
 80022de:	f002 fa7d 	bl	80047dc <uart_send_string>

    // Additional setup for game variables (if needed)
    // Example: Initialize Pokémon health, score, or other gameplay elements
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200012d4 	.word	0x200012d4
 80022ec:	0800f280 	.word	0x0800f280

080022f0 <spawn_pokemon_from_array>:

const char *spawn_pokemon_from_array(const char *pokemon_array[]) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09c      	sub	sp, #112	@ 0x70
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    uint32_t index = rand() % POKEMON_COUNT; // Generate a random index
 80022f8:	f009 feee 	bl	800c0d8 <rand>
 80022fc:	4601      	mov	r1, r0
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <spawn_pokemon_from_array+0x60>)
 8002300:	fb83 2301 	smull	r2, r3, r3, r1
 8002304:	109a      	asrs	r2, r3, #2
 8002306:	17cb      	asrs	r3, r1, #31
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1aca      	subs	r2, r1, r3
 8002314:	66fa      	str	r2, [r7, #108]	@ 0x6c
    char buffer[100];
    sprintf(buffer, "A wild %s appears!", pokemon_array[index]);
 8002316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	490b      	ldr	r1, [pc, #44]	@ (8002354 <spawn_pokemon_from_array+0x64>)
 8002326:	4618      	mov	r0, r3
 8002328:	f00a fc9e 	bl	800cc68 <siprintf>
    uart_send_string(buffer);
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	4618      	mov	r0, r3
 8002332:	f002 fa53 	bl	80047dc <uart_send_string>
    uart_send_string("\n\r");
 8002336:	4808      	ldr	r0, [pc, #32]	@ (8002358 <spawn_pokemon_from_array+0x68>)
 8002338:	f002 fa50 	bl	80047dc <uart_send_string>

    // Display on LCD

    return pokemon_array[index]; // Return the name of the Pokémon
 800233c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3770      	adds	r7, #112	@ 0x70
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	66666667 	.word	0x66666667
 8002354:	0800f2a4 	.word	0x0800f2a4
 8002358:	0800f2b8 	.word	0x0800f2b8

0800235c <game_state_machine>:

void game_state_machine() {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b0bf      	sub	sp, #252	@ 0xfc
 8002360:	af04      	add	r7, sp, #16
    switch (currentState) {
 8002362:	4bb9      	ldr	r3, [pc, #740]	@ (8002648 <game_state_machine+0x2ec>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b06      	cmp	r3, #6
 8002368:	f200 84bd 	bhi.w	8002ce6 <game_state_machine+0x98a>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <game_state_machine+0x18>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002391 	.word	0x08002391
 8002378:	080023b9 	.word	0x080023b9
 800237c:	08002447 	.word	0x08002447
 8002380:	08002591 	.word	0x08002591
 8002384:	08002623 	.word	0x08002623
 8002388:	0800297d 	.word	0x0800297d
 800238c:	08002cd3 	.word	0x08002cd3
        case IDLE:
            //DrawString(10, 10, "Welcome to Pokemon Adventure!", 0xFFFF, 0x0000,2);
            //DrawString(10, 30, "Wave your hand to start!", 0xFFFF, 0x0000,2);
            // Wait for IR sensor trigger
        	ir_triggered=0;
 8002390:	4bae      	ldr	r3, [pc, #696]	@ (800264c <game_state_machine+0x2f0>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
            if (IR_is_triggered()) {
 8002396:	f7ff ff77 	bl	8002288 <IR_is_triggered>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 849f 	beq.w	8002ce0 <game_state_machine+0x984>
                uart_send_string("Pokemon detected! Moving to SENSOR_READ.\n\r");
 80023a2:	48ab      	ldr	r0, [pc, #684]	@ (8002650 <game_state_machine+0x2f4>)
 80023a4:	f002 fa1a 	bl	80047dc <uart_send_string>
                currentState = SENSOR_READ;
 80023a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002648 <game_state_machine+0x2ec>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
                ILI9341_FillScreen(0x0000);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f000 ff28 	bl	8003204 <ILI9341_FillScreen>
            }
            break;
 80023b4:	f000 bc94 	b.w	8002ce0 <game_state_machine+0x984>

        case SENSOR_READ: {
        	ILI9341_FillRect(10, 30, 100, 50, 0x07E0);
 80023b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2332      	movs	r3, #50	@ 0x32
 80023c0:	2264      	movs	r2, #100	@ 0x64
 80023c2:	211e      	movs	r1, #30
 80023c4:	200a      	movs	r0, #10
 80023c6:	f001 f94f 	bl	8003668 <ILI9341_FillRect>
            DHT_DataTypedef DHT_Data;
            DHT_GetData(&DHT_Data); // Read DHT11 data
 80023ca:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fe92 	bl	80010f8 <DHT_GetData>

            // Only use humidity from DHT11
            dht11_humidity = (int)DHT_Data.Humidity;
 80023d4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80023d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023dc:	ee17 2a90 	vmov	r2, s15
 80023e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002654 <game_state_machine+0x2f8>)
 80023e2:	601a      	str	r2, [r3, #0]

            // Read temperature from DS18B20
            //temp_sensor_check();
            ds18b20_temperature = temperature;
 80023e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002658 <game_state_machine+0x2fc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a9c      	ldr	r2, [pc, #624]	@ (800265c <game_state_machine+0x300>)
 80023ea:	6013      	str	r3, [r2, #0]

            // Debug output for humidity and temperature
            char buffer[100];
            sprintf(buffer, "DHT11 Humidity: %d%%\n\r", dht11_humidity);
 80023ec:	4b99      	ldr	r3, [pc, #612]	@ (8002654 <game_state_machine+0x2f8>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	463b      	mov	r3, r7
 80023f2:	499b      	ldr	r1, [pc, #620]	@ (8002660 <game_state_machine+0x304>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00a fc37 	bl	800cc68 <siprintf>
            DrawString(10, 30, buffer, 0xFFFF, 0x0000,1);
 80023fa:	463a      	mov	r2, r7
 80023fc:	2301      	movs	r3, #1
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002408:	211e      	movs	r1, #30
 800240a:	200a      	movs	r0, #10
 800240c:	f001 f8fc 	bl	8003608 <DrawString>
            //uart_send_string(buffer);

            sprintf(buffer, "DS18B20 Temperature: %.2f°C\n\r", ds18b20_temperature);
 8002410:	4b92      	ldr	r3, [pc, #584]	@ (800265c <game_state_machine+0x300>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f89f 	bl	8000558 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4638      	mov	r0, r7
 8002420:	4990      	ldr	r1, [pc, #576]	@ (8002664 <game_state_machine+0x308>)
 8002422:	f00a fc21 	bl	800cc68 <siprintf>
            DrawString(10, 50, buffer, 0xFFFF, 0x0000,1);
 8002426:	463a      	mov	r2, r7
 8002428:	2301      	movs	r3, #1
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	2300      	movs	r3, #0
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002434:	2132      	movs	r1, #50	@ 0x32
 8002436:	200a      	movs	r0, #10
 8002438:	f001 f8e6 	bl	8003608 <DrawString>
            //uart_send_string(buffer);

            currentState = CHECK_POKEMON_ENCOUNTER;
 800243c:	4b82      	ldr	r3, [pc, #520]	@ (8002648 <game_state_machine+0x2ec>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
            break;
 8002442:	f000 bc50 	b.w	8002ce6 <game_state_machine+0x98a>
        }

        case CHECK_POKEMON_ENCOUNTER: {
            FlashScreen(3, 50); // Flash to indicate encounter transition
 8002446:	2132      	movs	r1, #50	@ 0x32
 8002448:	2003      	movs	r0, #3
 800244a:	f001 fa51 	bl	80038f0 <FlashScreen>
            ILI9341_FillScreen(0x0000);
 800244e:	2000      	movs	r0, #0
 8002450:	f000 fed8 	bl	8003204 <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for heading
 8002454:	231f      	movs	r3, #31
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2328      	movs	r3, #40	@ 0x28
 800245a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800245e:	2100      	movs	r1, #0
 8002460:	2000      	movs	r0, #0
 8002462:	f001 f901 	bl	8003668 <ILI9341_FillRect>
            DrawString(10, 10, "Pokemon Encounter!", 0xFFFF, 0x001F, 2); // White text on blue background
 8002466:	2302      	movs	r3, #2
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	231f      	movs	r3, #31
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002472:	4a7d      	ldr	r2, [pc, #500]	@ (8002668 <game_state_machine+0x30c>)
 8002474:	210a      	movs	r1, #10
 8002476:	200a      	movs	r0, #10
 8002478:	f001 f8c6 	bl	8003608 <DrawString>

            // Determine Pokémon to spawn
            const char *pokemon_name = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            if (ds18b20_temperature > 25.0) {
 8002482:	4b76      	ldr	r3, [pc, #472]	@ (800265c <game_state_machine+0x300>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800248c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	dd05      	ble.n	80024a2 <game_state_machine+0x146>
                pokemon_name = spawn_pokemon_from_array(fire_pokemon);
 8002496:	4875      	ldr	r0, [pc, #468]	@ (800266c <game_state_machine+0x310>)
 8002498:	f7ff ff2a 	bl	80022f0 <spawn_pokemon_from_array>
 800249c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 80024a0:	e00e      	b.n	80024c0 <game_state_machine+0x164>
            } else if (dht11_humidity > 60) {
 80024a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002654 <game_state_machine+0x2f8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b3c      	cmp	r3, #60	@ 0x3c
 80024a8:	dd05      	ble.n	80024b6 <game_state_machine+0x15a>
                pokemon_name = spawn_pokemon_from_array(water_pokemon);
 80024aa:	4871      	ldr	r0, [pc, #452]	@ (8002670 <game_state_machine+0x314>)
 80024ac:	f7ff ff20 	bl	80022f0 <spawn_pokemon_from_array>
 80024b0:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 80024b4:	e004      	b.n	80024c0 <game_state_machine+0x164>
            } else {
                pokemon_name = spawn_pokemon_from_array(normal_pokemon);
 80024b6:	486f      	ldr	r0, [pc, #444]	@ (8002674 <game_state_machine+0x318>)
 80024b8:	f7ff ff1a 	bl	80022f0 <spawn_pokemon_from_array>
 80024bc:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

            // Display the Pokémon name
            char buffer[100];

            // Display "A wild" on the first line
            DrawString(10, 60, "A wild", 0xFFFF, 0x0000, 2); // White text
 80024c0:	2302      	movs	r3, #2
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002678 <game_state_machine+0x31c>)
 80024ce:	213c      	movs	r1, #60	@ 0x3c
 80024d0:	200a      	movs	r0, #10
 80024d2:	f001 f899 	bl	8003608 <DrawString>

            // Display the Pokémon name on the second line
            sprintf(buffer, "%s", pokemon_name);
 80024d6:	463b      	mov	r3, r7
 80024d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024dc:	4967      	ldr	r1, [pc, #412]	@ (800267c <game_state_machine+0x320>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fbc2 	bl	800cc68 <siprintf>
            DrawString(10, 90, buffer, 0xFFFF, 0x0000, 2); // White text for the Pokémon name
 80024e4:	463a      	mov	r2, r7
 80024e6:	2302      	movs	r3, #2
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024f2:	215a      	movs	r1, #90	@ 0x5a
 80024f4:	200a      	movs	r0, #10
 80024f6:	f001 f887 	bl	8003608 <DrawString>

            // Display "appears" on the same line as the Pokémon name
            DrawString(10 + (strlen(buffer) * 12) + 10, 90, "appears!", 0xFFFF, 0x0000, 2); // Adjust position based on name length
 80024fa:	463b      	mov	r3, r7
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd febf 	bl	8000280 <strlen>
 8002502:	4603      	mov	r3, r0
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	0052      	lsls	r2, r2, #1
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	b29b      	uxth	r3, r3
 8002510:	3314      	adds	r3, #20
 8002512:	b298      	uxth	r0, r3
 8002514:	2302      	movs	r3, #2
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002520:	4a57      	ldr	r2, [pc, #348]	@ (8002680 <game_state_machine+0x324>)
 8002522:	215a      	movs	r1, #90	@ 0x5a
 8002524:	f001 f870 	bl	8003608 <DrawString>

            // Send the Pokémon name via UART for debugging
            uart_send_string("A wild ");
 8002528:	4856      	ldr	r0, [pc, #344]	@ (8002684 <game_state_machine+0x328>)
 800252a:	f002 f957 	bl	80047dc <uart_send_string>
            uart_send_string(buffer);
 800252e:	463b      	mov	r3, r7
 8002530:	4618      	mov	r0, r3
 8002532:	f002 f953 	bl	80047dc <uart_send_string>
            uart_send_string(" appears!\n\r");
 8002536:	4854      	ldr	r0, [pc, #336]	@ (8002688 <game_state_machine+0x32c>)
 8002538:	f002 f950 	bl	80047dc <uart_send_string>

            // Prompt user to select an action
            DrawString(10, 120, "Select an action:", 0x07E0, 0x0000, 2); // Green text
 800253c:	2302      	movs	r3, #2
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002548:	4a50      	ldr	r2, [pc, #320]	@ (800268c <game_state_machine+0x330>)
 800254a:	2178      	movs	r1, #120	@ 0x78
 800254c:	200a      	movs	r0, #10
 800254e:	f001 f85b 	bl	8003608 <DrawString>
            DrawString(10, 160, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 8002552:	2302      	movs	r3, #2
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800255e:	4a4c      	ldr	r2, [pc, #304]	@ (8002690 <game_state_machine+0x334>)
 8002560:	21a0      	movs	r1, #160	@ 0xa0
 8002562:	200a      	movs	r0, #10
 8002564:	f001 f850 	bl	8003608 <DrawString>
            DrawString(10, 200, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 8002568:	2302      	movs	r3, #2
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2300      	movs	r3, #0
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002574:	4a47      	ldr	r2, [pc, #284]	@ (8002694 <game_state_machine+0x338>)
 8002576:	21c8      	movs	r1, #200	@ 0xc8
 8002578:	200a      	movs	r0, #10
 800257a:	f001 f845 	bl	8003608 <DrawString>

            uart_send_string("\rSelect an action: Press button for Battle or Capture.\n\r");
 800257e:	4846      	ldr	r0, [pc, #280]	@ (8002698 <game_state_machine+0x33c>)
 8002580:	f002 f92c 	bl	80047dc <uart_send_string>
            Reset_Button_State(); // Reset button state for selection
 8002584:	f001 fd2e 	bl	8003fe4 <Reset_Button_State>
            currentState = SELECT_ACTION;
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <game_state_machine+0x2ec>)
 800258a:	2203      	movs	r2, #3
 800258c:	701a      	strb	r2, [r3, #0]
            break;
 800258e:	e3aa      	b.n	8002ce6 <game_state_machine+0x98a>
        }
        case SELECT_ACTION: {
            // Wait for button press
            if (Get_Battle_Button_State()) { // PC13 for Battle
 8002590:	f001 fd10 	bl	8003fb4 <Get_Battle_Button_State>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01f      	beq.n	80025da <game_state_machine+0x27e>
                uart_send_string("Battle selected!\n\r");
 800259a:	4840      	ldr	r0, [pc, #256]	@ (800269c <game_state_machine+0x340>)
 800259c:	f002 f91e 	bl	80047dc <uart_send_string>

                ILI9341_FillScreen(0x0000); // Clear the screen
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 fe2f 	bl	8003204 <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0xF800); // Red background for Battle heading
 80025a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2328      	movs	r3, #40	@ 0x28
 80025ae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f001 f857 	bl	8003668 <ILI9341_FillRect>
                DrawString(10, 10, "Battle Mode!", 0xFFFF, 0xF800, 3); // White text on red background
 80025ba:	2303      	movs	r3, #3
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025c8:	4a35      	ldr	r2, [pc, #212]	@ (80026a0 <game_state_machine+0x344>)
 80025ca:	210a      	movs	r1, #10
 80025cc:	200a      	movs	r0, #10
 80025ce:	f001 f81b 	bl	8003608 <DrawString>

                currentState = BATTLE; // Transition to Battle state
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <game_state_machine+0x2ec>)
 80025d4:	2204      	movs	r2, #4
 80025d6:	701a      	strb	r2, [r3, #0]
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background

                currentState = CAPTURE; // Transition to Capture state
            }
            break;
 80025d8:	e384      	b.n	8002ce4 <game_state_machine+0x988>
            } else if (Get_Capture_Button_State()) { // PC14 for Capture
 80025da:	f001 fcf7 	bl	8003fcc <Get_Capture_Button_State>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 837f 	beq.w	8002ce4 <game_state_machine+0x988>
                uart_send_string("Capture selected!\n\r");
 80025e6:	482f      	ldr	r0, [pc, #188]	@ (80026a4 <game_state_machine+0x348>)
 80025e8:	f002 f8f8 	bl	80047dc <uart_send_string>
                ILI9341_FillScreen(0x0000); // Clear the screen
 80025ec:	2000      	movs	r0, #0
 80025ee:	f000 fe09 	bl	8003204 <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
 80025f2:	231f      	movs	r3, #31
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2328      	movs	r3, #40	@ 0x28
 80025f8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025fc:	2100      	movs	r1, #0
 80025fe:	2000      	movs	r0, #0
 8002600:	f001 f832 	bl	8003668 <ILI9341_FillRect>
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background
 8002604:	2303      	movs	r3, #3
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	231f      	movs	r3, #31
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002610:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <game_state_machine+0x34c>)
 8002612:	210a      	movs	r1, #10
 8002614:	200a      	movs	r0, #10
 8002616:	f000 fff7 	bl	8003608 <DrawString>
                currentState = CAPTURE; // Transition to Capture state
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <game_state_machine+0x2ec>)
 800261c:	2205      	movs	r2, #5
 800261e:	701a      	strb	r2, [r3, #0]
            break;
 8002620:	e360      	b.n	8002ce4 <game_state_machine+0x988>
        }


        case BATTLE: {

            uart_send_string("Battle initiated! Shake the board to attack.\n\r");
 8002622:	4822      	ldr	r0, [pc, #136]	@ (80026ac <game_state_machine+0x350>)
 8002624:	f002 f8da 	bl	80047dc <uart_send_string>
            DrawString(10, 60, "Shake to attack!", 0x07E0, 0x0000, 2); // Green text, size 2
 8002628:	2302      	movs	r3, #2
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002634:	4a1e      	ldr	r2, [pc, #120]	@ (80026b0 <game_state_machine+0x354>)
 8002636:	213c      	movs	r1, #60	@ 0x3c
 8002638:	200a      	movs	r0, #10
 800263a:	f000 ffe5 	bl	8003608 <DrawString>

            // Countdown before shaking
            for (int countdown = 3; countdown > 0; countdown--) {
 800263e:	2303      	movs	r3, #3
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002644:	e05e      	b.n	8002704 <game_state_machine+0x3a8>
 8002646:	bf00      	nop
 8002648:	200012d4 	.word	0x200012d4
 800264c:	200012d0 	.word	0x200012d0
 8002650:	0800f2bc 	.word	0x0800f2bc
 8002654:	200012d8 	.word	0x200012d8
 8002658:	2000028c 	.word	0x2000028c
 800265c:	200012dc 	.word	0x200012dc
 8002660:	0800f2e8 	.word	0x0800f2e8
 8002664:	0800f300 	.word	0x0800f300
 8002668:	0800f320 	.word	0x0800f320
 800266c:	20000004 	.word	0x20000004
 8002670:	20000054 	.word	0x20000054
 8002674:	2000002c 	.word	0x2000002c
 8002678:	0800f334 	.word	0x0800f334
 800267c:	0800f33c 	.word	0x0800f33c
 8002680:	0800f340 	.word	0x0800f340
 8002684:	0800f34c 	.word	0x0800f34c
 8002688:	0800f354 	.word	0x0800f354
 800268c:	0800f360 	.word	0x0800f360
 8002690:	0800f374 	.word	0x0800f374
 8002694:	0800f384 	.word	0x0800f384
 8002698:	0800f394 	.word	0x0800f394
 800269c:	0800f3d0 	.word	0x0800f3d0
 80026a0:	0800f3e4 	.word	0x0800f3e4
 80026a4:	0800f3f4 	.word	0x0800f3f4
 80026a8:	0800f408 	.word	0x0800f408
 80026ac:	0800f418 	.word	0x0800f418
 80026b0:	0800f448 	.word	0x0800f448
                char buffer[50];
                sprintf(buffer, "Prepare to shake in: %d\n\r", countdown);
 80026b4:	463b      	mov	r3, r7
 80026b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80026ba:	49b9      	ldr	r1, [pc, #740]	@ (80029a0 <game_state_machine+0x644>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a fad3 	bl	800cc68 <siprintf>
                uart_send_string(buffer);
 80026c2:	463b      	mov	r3, r7
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 f889 	bl	80047dc <uart_send_string>

                char lcd_buffer[20];
                sprintf(lcd_buffer, "Shake in: %d", countdown);
 80026ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80026d2:	49b4      	ldr	r1, [pc, #720]	@ (80029a4 <game_state_machine+0x648>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00a fac7 	bl	800cc68 <siprintf>
                DrawString(10, 100, lcd_buffer, 0xFFFF, 0x0000, 2); // White text
 80026da:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80026de:	2302      	movs	r3, #2
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026ea:	2164      	movs	r1, #100	@ 0x64
 80026ec:	200a      	movs	r0, #10
 80026ee:	f000 ff8b 	bl	8003608 <DrawString>
                HAL_Delay(1000); // 1-second delay
 80026f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026f6:	f002 f92d 	bl	8004954 <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 80026fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026fe:	3b01      	subs	r3, #1
 8002700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	2b00      	cmp	r3, #0
 800270a:	dcd3      	bgt.n	80026b4 <game_state_machine+0x358>
            }

            uart_send_string("Shake the board now!\n\r");
 800270c:	48a6      	ldr	r0, [pc, #664]	@ (80029a8 <game_state_machine+0x64c>)
 800270e:	f002 f865 	bl	80047dc <uart_send_string>
            DrawString(10, 150, "Attack Progress:", 0xFFFF, 0x0000, 2); // Display attack progress on LCD
 8002712:	2302      	movs	r3, #2
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2300      	movs	r3, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800271e:	4aa3      	ldr	r2, [pc, #652]	@ (80029ac <game_state_machine+0x650>)
 8002720:	2196      	movs	r1, #150	@ 0x96
 8002722:	200a      	movs	r0, #10
 8002724:	f000 ff70 	bl	8003608 <DrawString>

            const uint32_t duration = 3000; // Duration for shaking (3 seconds)
 8002728:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            const int threshold = 2000;    // Threshold for shake detection
 8002730:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            const int max_shakes = 70;    // Maximum allowed shakes for 100% health
 8002738:	2346      	movs	r3, #70	@ 0x46
 800273a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            uint32_t start_time = HAL_GetTick();
 800273e:	f002 f8fd 	bl	800493c <HAL_GetTick>
 8002742:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
            uint32_t shake_count = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

            // Progress bar and shake detection loop
            while ((HAL_GetTick() - start_time) < duration) {
 800274c:	e038      	b.n	80027c0 <game_state_machine+0x464>
                uint32_t elapsed = HAL_GetTick() - start_time;
 800274e:	f002 f8f5 	bl	800493c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                int percentage = (elapsed * 100) / duration;
 800275e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002762:	2264      	movs	r2, #100	@ 0x64
 8002764:	fb03 f202 	mul.w	r2, r3, r2
 8002768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                // Update progress bar dynamically
                progress_bar(10, 200, 220, 20, 0x07E0, 0x0000, percentage); // Green progress bar
 8002774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2314      	movs	r3, #20
 8002786:	22dc      	movs	r2, #220	@ 0xdc
 8002788:	21c8      	movs	r1, #200	@ 0xc8
 800278a:	200a      	movs	r0, #10
 800278c:	f001 f86a 	bl	8003864 <progress_bar>

                // Detect shakes
                int32_t magnitude = MPU_read();
 8002790:	f000 fbec 	bl	8002f6c <MPU_read>
 8002794:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                if (magnitude > threshold && shake_count < max_shakes) {
 8002798:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800279c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dd0a      	ble.n	80027ba <game_state_machine+0x45e>
 80027a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d204      	bcs.n	80027ba <game_state_machine+0x45e>
                    shake_count++;
 80027b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b4:	3301      	adds	r3, #1
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                }

                HAL_Delay(50); // Small delay for smoother updates
 80027ba:	2032      	movs	r0, #50	@ 0x32
 80027bc:	f002 f8ca 	bl	8004954 <HAL_Delay>
            while ((HAL_GetTick() - start_time) < duration) {
 80027c0:	f002 f8bc 	bl	800493c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8bc      	bhi.n	800274e <game_state_machine+0x3f2>
            }

            // Calculate damage
            int base_damage = 10;
 80027d4:	230a      	movs	r3, #10
 80027d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            int total_damage = shake_count * base_damage;
 80027da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

            // Calculate health percentage
            int max_health = max_shakes * base_damage; // Maximum possible damage
 80027ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            int health_percentage = 100 - ((total_damage * 100) / max_health); // Remaining health
 80027fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027fe:	2264      	movs	r2, #100	@ 0x64
 8002800:	fb03 f202 	mul.w	r2, r3, r2
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002808:	fb92 f3f3 	sdiv	r3, r2, r3
 800280c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            // Determine health bar color based on health percentage
            uint16_t health_color;
            if (health_percentage < 40) {
 8002814:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002818:	2b27      	cmp	r3, #39	@ 0x27
 800281a:	dc04      	bgt.n	8002826 <game_state_machine+0x4ca>
                health_color = 0xF800; // Red for health < 40%
 800281c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002820:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 8002824:	e00c      	b.n	8002840 <game_state_machine+0x4e4>
            } else if (health_percentage < 75) {
 8002826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800282a:	2b4a      	cmp	r3, #74	@ 0x4a
 800282c:	dc04      	bgt.n	8002838 <game_state_machine+0x4dc>
                health_color = 0xFFE0; // Yellow for health between 40% and 75%
 800282e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002832:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 8002836:	e003      	b.n	8002840 <game_state_machine+0x4e4>
            } else {
                health_color = 0x07E0; // Green for health >= 75%
 8002838:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800283c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
            }

            // Clear the screen and move to results
            ILI9341_FillScreen(0x0000); // Clear screen for results display
 8002840:	2000      	movs	r0, #0
 8002842:	f000 fcdf 	bl	8003204 <ILI9341_FillScreen>

            // Display results on the new screen
            uart_send_string("Battle complete! Displaying results...\n\r");
 8002846:	485a      	ldr	r0, [pc, #360]	@ (80029b0 <game_state_machine+0x654>)
 8002848:	f001 ffc8 	bl	80047dc <uart_send_string>
            DrawString(10, 20, "Battle Results:", 0xFFE0, 0x0000, 2); // Yellow text
 800284c:	2302      	movs	r3, #2
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002858:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <game_state_machine+0x658>)
 800285a:	2114      	movs	r1, #20
 800285c:	200a      	movs	r0, #10
 800285e:	f000 fed3 	bl	8003608 <DrawString>

            // Display shake count
            char buffer[50];
            sprintf(buffer, "Shakes: %lu", shake_count);
 8002862:	463b      	mov	r3, r7
 8002864:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002868:	4953      	ldr	r1, [pc, #332]	@ (80029b8 <game_state_machine+0x65c>)
 800286a:	4618      	mov	r0, r3
 800286c:	f00a f9fc 	bl	800cc68 <siprintf>
            DrawString(10, 60, buffer, 0xFFFF, 0x0000, 2); // White text for shake count
 8002870:	463a      	mov	r2, r7
 8002872:	2302      	movs	r3, #2
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2300      	movs	r3, #0
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800287e:	213c      	movs	r1, #60	@ 0x3c
 8002880:	200a      	movs	r0, #10
 8002882:	f000 fec1 	bl	8003608 <DrawString>

            // Display damage on the next line
            sprintf(buffer, "Damage: %d", total_damage);
 8002886:	463b      	mov	r3, r7
 8002888:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800288c:	494b      	ldr	r1, [pc, #300]	@ (80029bc <game_state_machine+0x660>)
 800288e:	4618      	mov	r0, r3
 8002890:	f00a f9ea 	bl	800cc68 <siprintf>
            DrawString(10, 100, buffer, 0xFFFF, 0x0000, 2); // White text for damage
 8002894:	463a      	mov	r2, r7
 8002896:	2302      	movs	r3, #2
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2300      	movs	r3, #0
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a2:	2164      	movs	r1, #100	@ 0x64
 80028a4:	200a      	movs	r0, #10
 80028a6:	f000 feaf 	bl	8003608 <DrawString>

            // Display health bar
            DrawString(10, 140, "Health Bar:", 0xFFFF, 0x0000, 2); // White text for health bar
 80028aa:	2302      	movs	r3, #2
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028b6:	4a42      	ldr	r2, [pc, #264]	@ (80029c0 <game_state_machine+0x664>)
 80028b8:	218c      	movs	r1, #140	@ 0x8c
 80028ba:	200a      	movs	r0, #10
 80028bc:	f000 fea4 	bl	8003608 <DrawString>
            ILI9341_DrawRect(10, 170, 220, 20, 0xFFFF); // Outline of health bar
 80028c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2314      	movs	r3, #20
 80028c8:	22dc      	movs	r2, #220	@ 0xdc
 80028ca:	21aa      	movs	r1, #170	@ 0xaa
 80028cc:	200a      	movs	r0, #10
 80028ce:	f000 ff9f 	bl	8003810 <ILI9341_DrawRect>
            uint16_t health_bar_width = (health_percentage * 220) / 100; // Scale health bar width
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028d6:	22dc      	movs	r2, #220	@ 0xdc
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	4a39      	ldr	r2, [pc, #228]	@ (80029c4 <game_state_machine+0x668>)
 80028de:	fb82 1203 	smull	r1, r2, r2, r3
 80028e2:	1152      	asrs	r2, r2, #5
 80028e4:	17db      	asrs	r3, r3, #31
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            ILI9341_FillRect(10, 170, health_bar_width, 20, health_color); // Fill health bar
 80028ec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80028f0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2314      	movs	r3, #20
 80028f8:	21aa      	movs	r1, #170	@ 0xaa
 80028fa:	200a      	movs	r0, #10
 80028fc:	f000 feb4 	bl	8003668 <ILI9341_FillRect>

            // Display health percentage
            sprintf(buffer, "Health: %d%%", health_percentage);
 8002900:	463b      	mov	r3, r7
 8002902:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002906:	4930      	ldr	r1, [pc, #192]	@ (80029c8 <game_state_machine+0x66c>)
 8002908:	4618      	mov	r0, r3
 800290a:	f00a f9ad 	bl	800cc68 <siprintf>
            DrawString(10, 200, buffer, 0xFFFF, 0x0000, 2); // White text for health percentage
 800290e:	463a      	mov	r2, r7
 8002910:	2302      	movs	r3, #2
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291c:	21c8      	movs	r1, #200	@ 0xc8
 800291e:	200a      	movs	r0, #10
 8002920:	f000 fe72 	bl	8003608 <DrawString>

            // Return to action selection
            uart_send_string("Returning to action selection.\n\r");
 8002924:	4829      	ldr	r0, [pc, #164]	@ (80029cc <game_state_machine+0x670>)
 8002926:	f001 ff59 	bl	80047dc <uart_send_string>
            DrawString(10, 240, "Select Action:", 0x07E0, 0x0000, 1); // Green text
 800292a:	2301      	movs	r3, #1
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002936:	4a26      	ldr	r2, [pc, #152]	@ (80029d0 <game_state_machine+0x674>)
 8002938:	21f0      	movs	r1, #240	@ 0xf0
 800293a:	200a      	movs	r0, #10
 800293c:	f000 fe64 	bl	8003608 <DrawString>
            DrawString(10, 260, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 8002940:	2302      	movs	r3, #2
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800294c:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <game_state_machine+0x678>)
 800294e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002952:	200a      	movs	r0, #10
 8002954:	f000 fe58 	bl	8003608 <DrawString>
            DrawString(10, 280, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 8002958:	2302      	movs	r3, #2
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002964:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <game_state_machine+0x67c>)
 8002966:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800296a:	200a      	movs	r0, #10
 800296c:	f000 fe4c 	bl	8003608 <DrawString>
            Reset_Button_State(); // Reset button state for new selection
 8002970:	f001 fb38 	bl	8003fe4 <Reset_Button_State>
            currentState = SELECT_ACTION; // Return to action selection
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <game_state_machine+0x680>)
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
            break;
 800297a:	e1b4      	b.n	8002ce6 <game_state_machine+0x98a>
        }


        case CAPTURE: {

            uart_send_string("Capture initiated! Apply pressure to capture the Pokemon.\n\r");
 800297c:	4818      	ldr	r0, [pc, #96]	@ (80029e0 <game_state_machine+0x684>)
 800297e:	f001 ff2d 	bl	80047dc <uart_send_string>

            // Countdown before applying pressure
            char buffer[50];
            DrawString(10, 50, "Press in: ", 0xFFFF, 0x0000, 2); // Static part of the countdown message
 8002982:	2302      	movs	r3, #2
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800298e:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <game_state_machine+0x688>)
 8002990:	2132      	movs	r1, #50	@ 0x32
 8002992:	200a      	movs	r0, #10
 8002994:	f000 fe38 	bl	8003608 <DrawString>
            for (int countdown = 3; countdown > 0; countdown--) {
 8002998:	2303      	movs	r3, #3
 800299a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800299e:	e054      	b.n	8002a4a <game_state_machine+0x6ee>
 80029a0:	0800f45c 	.word	0x0800f45c
 80029a4:	0800f478 	.word	0x0800f478
 80029a8:	0800f488 	.word	0x0800f488
 80029ac:	0800f4a0 	.word	0x0800f4a0
 80029b0:	0800f4b4 	.word	0x0800f4b4
 80029b4:	0800f4e0 	.word	0x0800f4e0
 80029b8:	0800f4f0 	.word	0x0800f4f0
 80029bc:	0800f4fc 	.word	0x0800f4fc
 80029c0:	0800f508 	.word	0x0800f508
 80029c4:	51eb851f 	.word	0x51eb851f
 80029c8:	0800f514 	.word	0x0800f514
 80029cc:	0800f524 	.word	0x0800f524
 80029d0:	0800f548 	.word	0x0800f548
 80029d4:	0800f374 	.word	0x0800f374
 80029d8:	0800f384 	.word	0x0800f384
 80029dc:	200012d4 	.word	0x200012d4
 80029e0:	0800f558 	.word	0x0800f558
 80029e4:	0800f594 	.word	0x0800f594
                // Clear only the number area
                ILI9341_FillRect(110, 50, 40, 20, 0x0000); // Clear just the area for the countdown number
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2314      	movs	r3, #20
 80029ee:	2228      	movs	r2, #40	@ 0x28
 80029f0:	2132      	movs	r1, #50	@ 0x32
 80029f2:	206e      	movs	r0, #110	@ 0x6e
 80029f4:	f000 fe38 	bl	8003668 <ILI9341_FillRect>

                // Draw the countdown number
                sprintf(buffer, " %d", countdown);
 80029f8:	463b      	mov	r3, r7
 80029fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80029fe:	49bc      	ldr	r1, [pc, #752]	@ (8002cf0 <game_state_machine+0x994>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00a f931 	bl	800cc68 <siprintf>
                DrawString(110, 50, buffer, 0xFFFF, 0x0000, 2); // White text for the number
 8002a06:	463a      	mov	r2, r7
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a14:	2132      	movs	r1, #50	@ 0x32
 8002a16:	206e      	movs	r0, #110	@ 0x6e
 8002a18:	f000 fdf6 	bl	8003608 <DrawString>

                // Debug output
                sprintf(buffer, "Press in: %d", countdown);
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002a22:	49b4      	ldr	r1, [pc, #720]	@ (8002cf4 <game_state_machine+0x998>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00a f91f 	bl	800cc68 <siprintf>
                uart_send_string(buffer);
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fed5 	bl	80047dc <uart_send_string>
                uart_send_string("\n\r");
 8002a32:	48b1      	ldr	r0, [pc, #708]	@ (8002cf8 <game_state_machine+0x99c>)
 8002a34:	f001 fed2 	bl	80047dc <uart_send_string>

                HAL_Delay(1000); // 1-second delay
 8002a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a3c:	f001 ff8a 	bl	8004954 <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 8002a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a44:	3b01      	subs	r3, #1
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dcca      	bgt.n	80029e8 <game_state_machine+0x68c>
            }

            // Prompt user to apply pressure
            uart_send_string("Apply pressure now for 2 seconds...\n\r");
 8002a52:	48aa      	ldr	r0, [pc, #680]	@ (8002cfc <game_state_machine+0x9a0>)
 8002a54:	f001 fec2 	bl	80047dc <uart_send_string>
            ILI9341_FillRect(10, 100, 300, 40, 0x0000); // Clear prompt area
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2328      	movs	r3, #40	@ 0x28
 8002a5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a62:	2164      	movs	r1, #100	@ 0x64
 8002a64:	200a      	movs	r0, #10
 8002a66:	f000 fdff 	bl	8003668 <ILI9341_FillRect>
            DrawString(10, 100, "Apply pressure now!", 0xFFFF, 0x0000, 2); // White text
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a76:	4aa2      	ldr	r2, [pc, #648]	@ (8002d00 <game_state_machine+0x9a4>)
 8002a78:	2164      	movs	r1, #100	@ 0x64
 8002a7a:	200a      	movs	r0, #10
 8002a7c:	f000 fdc4 	bl	8003608 <DrawString>

            // Measure pressure over 2 seconds with progress bar
            uint32_t start_time = HAL_GetTick();
 8002a80:	f001 ff5c 	bl	800493c <HAL_GetTick>
 8002a84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
            uint32_t total_pressure = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            uint32_t sample_count = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

            uint16_t progress_x = 10;
 8002a94:	230a      	movs	r3, #10
 8002a96:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            uint16_t progress_y = 140;
 8002a9a:	238c      	movs	r3, #140	@ 0x8c
 8002a9c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            uint16_t progress_width = 300;
 8002aa0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002aa4:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
            uint16_t progress_height = 20;
 8002aa8:	2314      	movs	r3, #20
 8002aaa:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
            uint16_t progress_color = 0x07E0; // Green
 8002aae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002ab6:	e041      	b.n	8002b3c <game_state_machine+0x7e0>
                ADC_Read(); // Update global adcValue
 8002ab8:	f000 f9d4 	bl	8002e64 <ADC_Read>
                total_pressure += adcValue;
 8002abc:	4b91      	ldr	r3, [pc, #580]	@ (8002d04 <game_state_machine+0x9a8>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ac8:	4413      	add	r3, r2
 8002aca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                sample_count++;
 8002ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

                // Update progress bar
                uint32_t elapsed_time = HAL_GetTick() - start_time;
 8002ad8:	f001 ff30 	bl	800493c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                uint16_t progress_fill = (elapsed_time * progress_width) / 2000; // Proportional fill
 8002ae8:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8002aec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a84      	ldr	r2, [pc, #528]	@ (8002d08 <game_state_machine+0x9ac>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	09db      	lsrs	r3, r3, #7
 8002afc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
                ILI9341_DrawRect(progress_x, progress_y, progress_width, progress_height, 0xFFFF); // Outline
 8002b00:	f8b7 00c6 	ldrh.w	r0, [r7, #198]	@ 0xc6
 8002b04:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	@ 0xc4
 8002b08:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	@ 0xc2
 8002b0c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8002b10:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002b14:	9400      	str	r4, [sp, #0]
 8002b16:	f000 fe7b 	bl	8003810 <ILI9341_DrawRect>
                ILI9341_FillRect(progress_x, progress_y, progress_fill, progress_height, progress_color); // Fill
 8002b1a:	f8b7 40c0 	ldrh.w	r4, [r7, #192]	@ 0xc0
 8002b1e:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8002b22:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	@ 0xc4
 8002b26:	f8b7 00c6 	ldrh.w	r0, [r7, #198]	@ 0xc6
 8002b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4623      	mov	r3, r4
 8002b32:	f000 fd99 	bl	8003668 <ILI9341_FillRect>

                HAL_Delay(100); // Sampling delay
 8002b36:	2064      	movs	r0, #100	@ 0x64
 8002b38:	f001 ff0c 	bl	8004954 <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002b3c:	f001 fefe 	bl	800493c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b4c:	d3b4      	bcc.n	8002ab8 <game_state_machine+0x75c>
            }

            // Calculate average pressure
            uint32_t avg_pressure = total_pressure / sample_count;
 8002b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

            // Clear screen and display results
            ILI9341_FillScreen(0x0000);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f000 fb50 	bl	8003204 <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for the heading
 8002b64:	231f      	movs	r3, #31
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2328      	movs	r3, #40	@ 0x28
 8002b6a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002b6e:	2100      	movs	r1, #0
 8002b70:	2000      	movs	r0, #0
 8002b72:	f000 fd79 	bl	8003668 <ILI9341_FillRect>
            DrawString(10, 10, "Capture Results:", 0xFFFF, 0x001F, 2); // White text on blue background
 8002b76:	2302      	movs	r3, #2
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b82:	4a62      	ldr	r2, [pc, #392]	@ (8002d0c <game_state_machine+0x9b0>)
 8002b84:	210a      	movs	r1, #10
 8002b86:	200a      	movs	r0, #10
 8002b88:	f000 fd3e 	bl	8003608 <DrawString>

            if (avg_pressure > 200 && avg_pressure < 800) {
 8002b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b90:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b92:	d93e      	bls.n	8002c12 <game_state_machine+0x8b6>
 8002b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b98:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002b9c:	d239      	bcs.n	8002c12 <game_state_machine+0x8b6>
              	sprintf(buffer, "Success!");
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	495b      	ldr	r1, [pc, #364]	@ (8002d10 <game_state_machine+0x9b4>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00a f860 	bl	800cc68 <siprintf>
                	DrawString(10, 50, buffer, 0x07E0, 0x0000, 2); // Red text for failure
 8002ba8:	463a      	mov	r2, r7
 8002baa:	2302      	movs	r3, #2
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bb6:	2132      	movs	r1, #50	@ 0x32
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f000 fd25 	bl	8003608 <DrawString>

                	sprintf(buffer, "Pressure: %lu", avg_pressure);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002bc4:	4953      	ldr	r1, [pc, #332]	@ (8002d14 <game_state_machine+0x9b8>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00a f84e 	bl	800cc68 <siprintf>
                	DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for average pressure
 8002bcc:	463a      	mov	r2, r7
 8002bce:	2302      	movs	r3, #2
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bda:	2178      	movs	r1, #120	@ 0x78
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f000 fd13 	bl	8003608 <DrawString>
                	sprintf(buffer, "Pokemon Captured!");
 8002be2:	463b      	mov	r3, r7
 8002be4:	494c      	ldr	r1, [pc, #304]	@ (8002d18 <game_state_machine+0x9bc>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00a f83e 	bl	800cc68 <siprintf>
                	DrawString(10, 80, buffer, 0x07E0, 0x0000, 2); // Red text for the second line
 8002bec:	463a      	mov	r2, r7
 8002bee:	2302      	movs	r3, #2
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bfa:	2150      	movs	r1, #80	@ 0x50
 8002bfc:	200a      	movs	r0, #10
 8002bfe:	f000 fd03 	bl	8003608 <DrawString>

                HAL_Delay(2000); // Pause for user to view results
 8002c02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c06:	f001 fea5 	bl	8004954 <HAL_Delay>

                currentState = POST_BATTLE; // Transition to POST_BATTLE state after successful capture
 8002c0a:	4b44      	ldr	r3, [pc, #272]	@ (8002d1c <game_state_machine+0x9c0>)
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	701a      	strb	r2, [r3, #0]
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
                Reset_Button_State(); // Reset button state
                currentState = SELECT_ACTION; // Return to action selection
            }
            break;
 8002c10:	e069      	b.n	8002ce6 <game_state_machine+0x98a>
            	sprintf(buffer, "Failed!");
 8002c12:	463b      	mov	r3, r7
 8002c14:	4942      	ldr	r1, [pc, #264]	@ (8002d20 <game_state_machine+0x9c4>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00a f826 	bl	800cc68 <siprintf>
            	DrawString(10, 50, buffer, 0xF800, 0x0000, 2); // Red text for failure
 8002c1c:	463a      	mov	r2, r7
 8002c1e:	2302      	movs	r3, #2
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c2a:	2132      	movs	r1, #50	@ 0x32
 8002c2c:	200a      	movs	r0, #10
 8002c2e:	f000 fceb 	bl	8003608 <DrawString>
            	sprintf(buffer, "Pressure: %lu", avg_pressure);
 8002c32:	463b      	mov	r3, r7
 8002c34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c38:	4936      	ldr	r1, [pc, #216]	@ (8002d14 <game_state_machine+0x9b8>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f00a f814 	bl	800cc68 <siprintf>
            	DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for average pressure
 8002c40:	463a      	mov	r2, r7
 8002c42:	2302      	movs	r3, #2
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c4e:	2178      	movs	r1, #120	@ 0x78
 8002c50:	200a      	movs	r0, #10
 8002c52:	f000 fcd9 	bl	8003608 <DrawString>
            	sprintf(buffer, "Pokemon broke out!");
 8002c56:	463b      	mov	r3, r7
 8002c58:	4932      	ldr	r1, [pc, #200]	@ (8002d24 <game_state_machine+0x9c8>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00a f804 	bl	800cc68 <siprintf>
            	DrawString(10, 80, buffer, 0xF800, 0x0000, 2); // Red text for the second line
 8002c60:	463a      	mov	r2, r7
 8002c62:	2302      	movs	r3, #2
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c6e:	2150      	movs	r1, #80	@ 0x50
 8002c70:	200a      	movs	r0, #10
 8002c72:	f000 fcc9 	bl	8003608 <DrawString>
                HAL_Delay(2000); // Pause for user to view results
 8002c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c7a:	f001 fe6b 	bl	8004954 <HAL_Delay>
                ILI9341_FillScreen(0x0000); // Clear screen
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 fac0 	bl	8003204 <ILI9341_FillScreen>
                DrawString(10, 30, "Select Action:", 0x07E0, 0x0000, 2); // Green text
 8002c84:	2302      	movs	r3, #2
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c90:	4a25      	ldr	r2, [pc, #148]	@ (8002d28 <game_state_machine+0x9cc>)
 8002c92:	211e      	movs	r1, #30
 8002c94:	200a      	movs	r0, #10
 8002c96:	f000 fcb7 	bl	8003608 <DrawString>
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ca6:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <game_state_machine+0x9d0>)
 8002ca8:	215a      	movs	r1, #90	@ 0x5a
 8002caa:	200a      	movs	r0, #10
 8002cac:	f000 fcac 	bl	8003608 <DrawString>
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <game_state_machine+0x9d4>)
 8002cbe:	2178      	movs	r1, #120	@ 0x78
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f000 fca1 	bl	8003608 <DrawString>
                Reset_Button_State(); // Reset button state
 8002cc6:	f001 f98d 	bl	8003fe4 <Reset_Button_State>
                currentState = SELECT_ACTION; // Return to action selection
 8002cca:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <game_state_machine+0x9c0>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	701a      	strb	r2, [r3, #0]
            break;
 8002cd0:	e009      	b.n	8002ce6 <game_state_machine+0x98a>
        }



               case POST_BATTLE:
                   uart_send_string("Pokemon Caught. Returning to the forest.\n\r");
 8002cd2:	4818      	ldr	r0, [pc, #96]	@ (8002d34 <game_state_machine+0x9d8>)
 8002cd4:	f001 fd82 	bl	80047dc <uart_send_string>
                   currentState = IDLE;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <game_state_machine+0x9c0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
                   break;
 8002cde:	e002      	b.n	8002ce6 <game_state_machine+0x98a>
            break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <game_state_machine+0x98a>
            break;
 8002ce4:	bf00      	nop
           }
	}
 8002ce6:	bf00      	nop
 8002ce8:	37ec      	adds	r7, #236	@ 0xec
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	0800f5a0 	.word	0x0800f5a0
 8002cf4:	0800f5a4 	.word	0x0800f5a4
 8002cf8:	0800f2b8 	.word	0x0800f2b8
 8002cfc:	0800f5b4 	.word	0x0800f5b4
 8002d00:	0800f5dc 	.word	0x0800f5dc
 8002d04:	200012e0 	.word	0x200012e0
 8002d08:	10624dd3 	.word	0x10624dd3
 8002d0c:	0800f5f0 	.word	0x0800f5f0
 8002d10:	0800f604 	.word	0x0800f604
 8002d14:	0800f610 	.word	0x0800f610
 8002d18:	0800f620 	.word	0x0800f620
 8002d1c:	200012d4 	.word	0x200012d4
 8002d20:	0800f634 	.word	0x0800f634
 8002d24:	0800f63c 	.word	0x0800f63c
 8002d28:	0800f548 	.word	0x0800f548
 8002d2c:	0800f650 	.word	0x0800f650
 8002d30:	0800f658 	.word	0x0800f658
 8002d34:	0800f664 	.word	0x0800f664

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	@ (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <Pressure_sensor_Init>:

// Global variables
volatile uint16_t adcValue = 0; // ADC result
volatile uint8_t adcConversionComplete = 0; // Flag to indicate conversion complete

void Pressure_sensor_Init(void) {
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <Pressure_sensor_Init+0x34>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <Pressure_sensor_Init+0x34>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB1 as analog
    GPIOB->MODER |= (3U << (1 * 2));  // 2 bits per pin, set to 11 (Analog mode)
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <Pressure_sensor_Init+0x38>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <Pressure_sensor_Init+0x38>)
 8002d8a:	f043 030c 	orr.w	r3, r3, #12
 8002d8e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3U << (1 * 2)); // No pull-up/pull-down
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <Pressure_sensor_Init+0x38>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <Pressure_sensor_Init+0x38>)
 8002d96:	f023 030c 	bic.w	r3, r3, #12
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020400 	.word	0x40020400

08002db0 <ADC_Config>:

void ADC_Config(void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002db4:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <ADC_Config+0x64>)
 8002db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db8:	4a16      	ldr	r2, [pc, #88]	@ (8002e14 <ADC_Config+0x64>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set ADC prescaler to PCLK2/4
    ADC->CCR |= (1U << 16); // Bits 17:16 = 01 for PCLK2/4
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <ADC_Config+0x68>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	@ (8002e18 <ADC_Config+0x68>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dca:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Reset CR2
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <ADC_Config+0x6c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
    ADC1->CR2 |= ADC_CR2_ADON;         // Enable ADC
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <ADC_Config+0x6c>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <ADC_Config+0x6c>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;        // Enable EOC interrupt
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <ADC_Config+0x6c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e1c <ADC_Config+0x6c>)
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_RES;         // 12-bit resolution
 8002dea:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <ADC_Config+0x6c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a0b      	ldr	r2, [pc, #44]	@ (8002e1c <ADC_Config+0x6c>)
 8002df0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002df4:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (3U << (3 * 9));    // Sampling time 56 cycles for channel 9
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <ADC_Config+0x6c>)
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <ADC_Config+0x6c>)
 8002dfc:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8002e00:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 9;                    // Set channel 9 (PB1)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <ADC_Config+0x6c>)
 8002e04:	2209      	movs	r2, #9
 8002e06:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8002e08:	2012      	movs	r0, #18
 8002e0a:	f7ff ff95 	bl	8002d38 <__NVIC_EnableIRQ>
    //NVIC_SetPriority(ADC_IRQn, 1);
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	40012000 	.word	0x40012000

08002e20 <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 8002e24:	bf00      	nop
 8002e26:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <ADC_IRQHandler+0x38>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f9      	beq.n	8002e26 <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <ADC_IRQHandler+0x38>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <ADC_IRQHandler+0x3c>)
 8002e3a:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <ADC_IRQHandler+0x40>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <ADC_IRQHandler+0x38>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <ADC_IRQHandler+0x38>)
 8002e48:	f023 0302 	bic.w	r3, r3, #2
 8002e4c:	6013      	str	r3, [r2, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40012000 	.word	0x40012000
 8002e5c:	200012e0 	.word	0x200012e0
 8002e60:	200012e2 	.word	0x200012e2

08002e64 <ADC_Read>:

void ADC_Read(void) {
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <ADC_Read+0x1c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <ADC_Read+0x1c>)
 8002e6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e72:	6093      	str	r3, [r2, #8]
    // Wait for conversion to complete
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012000 	.word	0x40012000

08002e84 <MPU_init>:
    NVIC_SetPriority(EXTI9_5_IRQn, 2); // Set priority level
    NVIC_EnableIRQ(EXTI9_5_IRQn);      // Enable EXTI9_5 interrupt
}

void MPU_init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af04      	add	r7, sp, #16
HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEV_ADD <<1)+0, 1, 100);
 8002e8a:	2364      	movs	r3, #100	@ 0x64
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	21d0      	movs	r1, #208	@ 0xd0
 8002e90:	4830      	ldr	r0, [pc, #192]	@ (8002f54 <MPU_init+0xd0>)
 8002e92:	f003 f84f 	bl	8005f34 <HAL_I2C_IsDeviceReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <MPU_init+0x24>
  {
	  uart_send_string("ready\n\r");
 8002ea0:	482d      	ldr	r0, [pc, #180]	@ (8002f58 <MPU_init+0xd4>)
 8002ea2:	f001 fc9b 	bl	80047dc <uart_send_string>
 8002ea6:	e002      	b.n	8002eae <MPU_init+0x2a>
  }
  else
	  uart_send_string("not ready\n\r");
 8002ea8:	482c      	ldr	r0, [pc, #176]	@ (8002f5c <MPU_init+0xd8>)
 8002eaa:	f001 fc97 	bl	80047dc <uart_send_string>
  /* USER CODE END 2 */
  uint8_t temp_data = FS_GYRO_500;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8002eb2:	2364      	movs	r3, #100	@ 0x64
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	1dbb      	adds	r3, r7, #6
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	221b      	movs	r2, #27
 8002ec2:	21d0      	movs	r1, #208	@ 0xd0
 8002ec4:	4823      	ldr	r0, [pc, #140]	@ (8002f54 <MPU_init+0xd0>)
 8002ec6:	f002 fd09 	bl	80058dc <HAL_I2C_Mem_Write>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <MPU_init+0x58>
  {
	  uart_send_string("config gyro\n\r");
 8002ed4:	4822      	ldr	r0, [pc, #136]	@ (8002f60 <MPU_init+0xdc>)
 8002ed6:	f001 fc81 	bl	80047dc <uart_send_string>
 8002eda:	e002      	b.n	8002ee2 <MPU_init+0x5e>
  }
  else
	  uart_send_string("not ready\n\r");
 8002edc:	481f      	ldr	r0, [pc, #124]	@ (8002f5c <MPU_init+0xd8>)
 8002ede:	f001 fc7d 	bl	80047dc <uart_send_string>

temp_data = FS_ACC_4G;
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8002ee6:	2364      	movs	r3, #100	@ 0x64
 8002ee8:	9302      	str	r3, [sp, #8]
 8002eea:	2301      	movs	r3, #1
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	1dbb      	adds	r3, r7, #6
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	21d0      	movs	r1, #208	@ 0xd0
 8002ef8:	4816      	ldr	r0, [pc, #88]	@ (8002f54 <MPU_init+0xd0>)
 8002efa:	f002 fcef 	bl	80058dc <HAL_I2C_Mem_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <MPU_init+0x8c>
  {
	  uart_send_string("config acc\n\r");
 8002f08:	4816      	ldr	r0, [pc, #88]	@ (8002f64 <MPU_init+0xe0>)
 8002f0a:	f001 fc67 	bl	80047dc <uart_send_string>
 8002f0e:	e002      	b.n	8002f16 <MPU_init+0x92>
  }
  else
	  uart_send_string("not ready\n\r");
 8002f10:	4812      	ldr	r0, [pc, #72]	@ (8002f5c <MPU_init+0xd8>)
 8002f12:	f001 fc63 	bl	80047dc <uart_send_string>

temp_data = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 8002f1a:	2364      	movs	r3, #100	@ 0x64
 8002f1c:	9302      	str	r3, [sp, #8]
 8002f1e:	2301      	movs	r3, #1
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	1dbb      	adds	r3, r7, #6
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2301      	movs	r3, #1
 8002f28:	226b      	movs	r2, #107	@ 0x6b
 8002f2a:	21d0      	movs	r1, #208	@ 0xd0
 8002f2c:	4809      	ldr	r0, [pc, #36]	@ (8002f54 <MPU_init+0xd0>)
 8002f2e:	f002 fcd5 	bl	80058dc <HAL_I2C_Mem_Write>
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <MPU_init+0xc0>
  {
	  uart_send_string("exit sleep and enable interrupt\n\r");
 8002f3c:	480a      	ldr	r0, [pc, #40]	@ (8002f68 <MPU_init+0xe4>)
 8002f3e:	f001 fc4d 	bl	80047dc <uart_send_string>
  }
  else
	  uart_send_string("not ready\n\r");

}
 8002f42:	e002      	b.n	8002f4a <MPU_init+0xc6>
	  uart_send_string("not ready\n\r");
 8002f44:	4805      	ldr	r0, [pc, #20]	@ (8002f5c <MPU_init+0xd8>)
 8002f46:	f001 fc49 	bl	80047dc <uart_send_string>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200012e4 	.word	0x200012e4
 8002f58:	0800f690 	.word	0x0800f690
 8002f5c:	0800f698 	.word	0x0800f698
 8002f60:	0800f6a4 	.word	0x0800f6a4
 8002f64:	0800f6b4 	.word	0x0800f6b4
 8002f68:	0800f6c4 	.word	0x0800f6c4

08002f6c <MPU_read>:

int16_t read_axis_data(uint8_t high_byte, uint8_t low_byte) {
    return ((int16_t)high_byte << 8) | low_byte;
}

int32_t MPU_read() {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af04      	add	r7, sp, #16
    uint8_t data[2];
    int16_t x_acc;

    // Read 2 bytes of accelerometer data (X-axis only)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (DEV_ADD << 1), REG_DATA, 1, data, 2, 100);
 8002f72:	2364      	movs	r3, #100	@ 0x64
 8002f74:	9302      	str	r3, [sp, #8]
 8002f76:	2302      	movs	r3, #2
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	2301      	movs	r3, #1
 8002f80:	223b      	movs	r2, #59	@ 0x3b
 8002f82:	21d0      	movs	r1, #208	@ 0xd0
 8002f84:	480f      	ldr	r0, [pc, #60]	@ (8002fc4 <MPU_read+0x58>)
 8002f86:	f002 fda3 	bl	8005ad0 <HAL_I2C_Mem_Read>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <MPU_read+0x34>
        uart_send_string("Error: Failed to read accelerometer data\n\r");
 8002f94:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <MPU_read+0x5c>)
 8002f96:	f001 fc21 	bl	80047dc <uart_send_string>
        return -1; // Error reading data
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	e00c      	b.n	8002fba <MPU_read+0x4e>
    }

    // Combine high and low bytes for X-axis
    x_acc = ((int16_t)data[0] << 8) | data[1];
 8002fa0:	783b      	ldrb	r3, [r7, #0]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	b21a      	sxth	r2, r3
 8002fa6:	787b      	ldrb	r3, [r7, #1]
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	80bb      	strh	r3, [r7, #4]

    // Debug: Print raw X-axis value

    // Return the absolute value of X-axis acceleration
    return abs(x_acc);
 8002fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	425b      	neglt	r3, r3
 8002fb8:	b29b      	uxth	r3, r3
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200012e4 	.word	0x200012e4
 8002fc8:	0800f6e8 	.word	0x0800f6e8

08002fcc <ILI9341_SendCommand>:
#define RST_HIGH()  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET)
#define SD_CS_PORT GPIOD
#define SD_CS_PIN GPIO_PIN_9

// Function to send a command
void ILI9341_SendCommand(uint8_t cmd) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <ILI9341_SendCommand+0x44>)
 8002fde:	f002 fb07 	bl	80055f0 <HAL_GPIO_WritePin>
    DC_COMMAND();
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fe8:	4809      	ldr	r0, [pc, #36]	@ (8003010 <ILI9341_SendCommand+0x44>)
 8002fea:	f002 fb01 	bl	80055f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8002fee:	1df9      	adds	r1, r7, #7
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4807      	ldr	r0, [pc, #28]	@ (8003014 <ILI9341_SendCommand+0x48>)
 8002ff8:	f004 f99f 	bl	800733a <HAL_SPI_Transmit>
    CS_HIGH();
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003002:	4803      	ldr	r0, [pc, #12]	@ (8003010 <ILI9341_SendCommand+0x44>)
 8003004:	f002 faf4 	bl	80055f0 <HAL_GPIO_WritePin>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40020400 	.word	0x40020400
 8003014:	20001338 	.word	0x20001338

08003018 <ILI9341_SendData>:

// Function to send data
void ILI9341_SendData(uint8_t *data, uint16_t size) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
    CS_LOW();
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800302a:	480d      	ldr	r0, [pc, #52]	@ (8003060 <ILI9341_SendData+0x48>)
 800302c:	f002 fae0 	bl	80055f0 <HAL_GPIO_WritePin>
    DC_DATA();
 8003030:	2201      	movs	r2, #1
 8003032:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003036:	480a      	ldr	r0, [pc, #40]	@ (8003060 <ILI9341_SendData+0x48>)
 8003038:	f002 fada 	bl	80055f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 800303c:	887a      	ldrh	r2, [r7, #2]
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4807      	ldr	r0, [pc, #28]	@ (8003064 <ILI9341_SendData+0x4c>)
 8003046:	f004 f978 	bl	800733a <HAL_SPI_Transmit>
    CS_HIGH();
 800304a:	2201      	movs	r2, #1
 800304c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003050:	4803      	ldr	r0, [pc, #12]	@ (8003060 <ILI9341_SendData+0x48>)
 8003052:	f002 facd 	bl	80055f0 <HAL_GPIO_WritePin>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40020400 	.word	0x40020400
 8003064:	20001338 	.word	0x20001338

08003068 <ILI9341_Init>:
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
    CS_HIGH();
}

// Initialization sequence for ILI9341
void ILI9341_Init(void) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
    // Reset the display
    RST_LOW();
 800306e:	2200      	movs	r2, #0
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	4863      	ldr	r0, [pc, #396]	@ (8003200 <ILI9341_Init+0x198>)
 8003074:	f002 fabc 	bl	80055f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10ms delay
 8003078:	200a      	movs	r0, #10
 800307a:	f001 fc6b 	bl	8004954 <HAL_Delay>
    RST_HIGH();
 800307e:	2201      	movs	r2, #1
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	485f      	ldr	r0, [pc, #380]	@ (8003200 <ILI9341_Init+0x198>)
 8003084:	f002 fab4 	bl	80055f0 <HAL_GPIO_WritePin>
    HAL_Delay(120); // 120ms delay after reset
 8003088:	2078      	movs	r0, #120	@ 0x78
 800308a:	f001 fc63 	bl	8004954 <HAL_Delay>

    // Initialization commands based on the datasheet
    uint8_t data[15];

    // Power Control A
    ILI9341_SendCommand(0xCB);
 800308e:	20cb      	movs	r0, #203	@ 0xcb
 8003090:	f7ff ff9c 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x39; data[1] = 0x2C; data[2] = 0x00; data[3] = 0x34; data[4] = 0x02;
 8003094:	2339      	movs	r3, #57	@ 0x39
 8003096:	703b      	strb	r3, [r7, #0]
 8003098:	232c      	movs	r3, #44	@ 0x2c
 800309a:	707b      	strb	r3, [r7, #1]
 800309c:	2300      	movs	r3, #0
 800309e:	70bb      	strb	r3, [r7, #2]
 80030a0:	2334      	movs	r3, #52	@ 0x34
 80030a2:	70fb      	strb	r3, [r7, #3]
 80030a4:	2302      	movs	r3, #2
 80030a6:	713b      	strb	r3, [r7, #4]
    ILI9341_SendData(data, 5);
 80030a8:	463b      	mov	r3, r7
 80030aa:	2105      	movs	r1, #5
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ffb3 	bl	8003018 <ILI9341_SendData>

    // Power Control B
    ILI9341_SendCommand(0xCF);
 80030b2:	20cf      	movs	r0, #207	@ 0xcf
 80030b4:	f7ff ff8a 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0xC1; data[2] = 0x30;
 80030b8:	2300      	movs	r3, #0
 80030ba:	703b      	strb	r3, [r7, #0]
 80030bc:	23c1      	movs	r3, #193	@ 0xc1
 80030be:	707b      	strb	r3, [r7, #1]
 80030c0:	2330      	movs	r3, #48	@ 0x30
 80030c2:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 80030c4:	463b      	mov	r3, r7
 80030c6:	2103      	movs	r1, #3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ffa5 	bl	8003018 <ILI9341_SendData>

    // Driver Timing Control A
    ILI9341_SendCommand(0xE8);
 80030ce:	20e8      	movs	r0, #232	@ 0xe8
 80030d0:	f7ff ff7c 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x85; data[1] = 0x00; data[2] = 0x78;
 80030d4:	2385      	movs	r3, #133	@ 0x85
 80030d6:	703b      	strb	r3, [r7, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	707b      	strb	r3, [r7, #1]
 80030dc:	2378      	movs	r3, #120	@ 0x78
 80030de:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 80030e0:	463b      	mov	r3, r7
 80030e2:	2103      	movs	r1, #3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff97 	bl	8003018 <ILI9341_SendData>

    // Driver Timing Control B
    ILI9341_SendCommand(0xEA);
 80030ea:	20ea      	movs	r0, #234	@ 0xea
 80030ec:	f7ff ff6e 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00;
 80030f0:	2300      	movs	r3, #0
 80030f2:	703b      	strb	r3, [r7, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 80030f8:	463b      	mov	r3, r7
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff8b 	bl	8003018 <ILI9341_SendData>

    // Power On Sequence Control
    ILI9341_SendCommand(0xED);
 8003102:	20ed      	movs	r0, #237	@ 0xed
 8003104:	f7ff ff62 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x64; data[1] = 0x03; data[2] = 0x12; data[3] = 0x81;
 8003108:	2364      	movs	r3, #100	@ 0x64
 800310a:	703b      	strb	r3, [r7, #0]
 800310c:	2303      	movs	r3, #3
 800310e:	707b      	strb	r3, [r7, #1]
 8003110:	2312      	movs	r3, #18
 8003112:	70bb      	strb	r3, [r7, #2]
 8003114:	2381      	movs	r3, #129	@ 0x81
 8003116:	70fb      	strb	r3, [r7, #3]
    ILI9341_SendData(data, 4);
 8003118:	463b      	mov	r3, r7
 800311a:	2104      	movs	r1, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff7b 	bl	8003018 <ILI9341_SendData>

    // Pump Ratio Control
    ILI9341_SendCommand(0xF7);
 8003122:	20f7      	movs	r0, #247	@ 0xf7
 8003124:	f7ff ff52 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x20;
 8003128:	2320      	movs	r3, #32
 800312a:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 800312c:	463b      	mov	r3, r7
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff71 	bl	8003018 <ILI9341_SendData>

    // Power Control 1
    ILI9341_SendCommand(0xC0);
 8003136:	20c0      	movs	r0, #192	@ 0xc0
 8003138:	f7ff ff48 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x23;
 800313c:	2323      	movs	r3, #35	@ 0x23
 800313e:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003140:	463b      	mov	r3, r7
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff67 	bl	8003018 <ILI9341_SendData>

    // Power Control 2
    ILI9341_SendCommand(0xC1);
 800314a:	20c1      	movs	r0, #193	@ 0xc1
 800314c:	f7ff ff3e 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x10;
 8003150:	2310      	movs	r3, #16
 8003152:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003154:	463b      	mov	r3, r7
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5d 	bl	8003018 <ILI9341_SendData>

    // VCOM Control 1
    ILI9341_SendCommand(0xC5);
 800315e:	20c5      	movs	r0, #197	@ 0xc5
 8003160:	f7ff ff34 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x3E; data[1] = 0x28;
 8003164:	233e      	movs	r3, #62	@ 0x3e
 8003166:	703b      	strb	r3, [r7, #0]
 8003168:	2328      	movs	r3, #40	@ 0x28
 800316a:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 800316c:	463b      	mov	r3, r7
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff51 	bl	8003018 <ILI9341_SendData>

    // VCOM Control 2
    ILI9341_SendCommand(0xC7);
 8003176:	20c7      	movs	r0, #199	@ 0xc7
 8003178:	f7ff ff28 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x86;
 800317c:	2386      	movs	r3, #134	@ 0x86
 800317e:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003180:	463b      	mov	r3, r7
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff47 	bl	8003018 <ILI9341_SendData>

    // Memory Access Control
    ILI9341_SendCommand(0x36);
 800318a:	2036      	movs	r0, #54	@ 0x36
 800318c:	f7ff ff1e 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x48;
 8003190:	2348      	movs	r3, #72	@ 0x48
 8003192:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003194:	463b      	mov	r3, r7
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff3d 	bl	8003018 <ILI9341_SendData>

    // Pixel Format Set
    ILI9341_SendCommand(0x3A);
 800319e:	203a      	movs	r0, #58	@ 0x3a
 80031a0:	f7ff ff14 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x55;  // 16-bit RGB565
 80031a4:	2355      	movs	r3, #85	@ 0x55
 80031a6:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 80031a8:	463b      	mov	r3, r7
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff33 	bl	8003018 <ILI9341_SendData>

    // Frame Rate Control
    ILI9341_SendCommand(0xB1);
 80031b2:	20b1      	movs	r0, #177	@ 0xb1
 80031b4:	f7ff ff0a 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x18;
 80031b8:	2300      	movs	r3, #0
 80031ba:	703b      	strb	r3, [r7, #0]
 80031bc:	2318      	movs	r3, #24
 80031be:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 80031c0:	463b      	mov	r3, r7
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff27 	bl	8003018 <ILI9341_SendData>

    // Display Function Control
    ILI9341_SendCommand(0xB6);
 80031ca:	20b6      	movs	r0, #182	@ 0xb6
 80031cc:	f7ff fefe 	bl	8002fcc <ILI9341_SendCommand>
    data[0] = 0x08; data[1] = 0x82; data[2] = 0x27;
 80031d0:	2308      	movs	r3, #8
 80031d2:	703b      	strb	r3, [r7, #0]
 80031d4:	2382      	movs	r3, #130	@ 0x82
 80031d6:	707b      	strb	r3, [r7, #1]
 80031d8:	2327      	movs	r3, #39	@ 0x27
 80031da:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 80031dc:	463b      	mov	r3, r7
 80031de:	2103      	movs	r1, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff19 	bl	8003018 <ILI9341_SendData>

    // Exit Sleep Mode
    ILI9341_SendCommand(0x11);
 80031e6:	2011      	movs	r0, #17
 80031e8:	f7ff fef0 	bl	8002fcc <ILI9341_SendCommand>
    HAL_Delay(120);
 80031ec:	2078      	movs	r0, #120	@ 0x78
 80031ee:	f001 fbb1 	bl	8004954 <HAL_Delay>

    // Turn on Display
    ILI9341_SendCommand(0x29);
 80031f2:	2029      	movs	r0, #41	@ 0x29
 80031f4:	f7ff feea 	bl	8002fcc <ILI9341_SendCommand>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40020800 	.word	0x40020800

08003204 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8003204:	b580      	push	{r7, lr}
 8003206:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800320a:	af00      	add	r7, sp, #0
 800320c:	4602      	mov	r2, r0
 800320e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003212:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 8003216:	801a      	strh	r2, [r3, #0]
    // Combine the color bytes to save redundant operations
    uint8_t buffer[512]; // Buffer to send 256 pixels (512 bytes for RGB565)
    uint8_t high_byte = color >> 8;
 8003218:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800321c:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	b29b      	uxth	r3, r3
 8003226:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t low_byte = color & 0xFF;
 800322a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800322e:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

    // Fill the buffer once
    for (uint16_t i = 0; i < 256; i++) {
 8003238:	2300      	movs	r3, #0
 800323a:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 800323e:	e019      	b.n	8003274 <ILI9341_FillScreen+0x70>
        buffer[i * 2] = high_byte;
 8003240:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800324a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800324e:	f897 1217 	ldrb.w	r1, [r7, #535]	@ 0x217
 8003252:	54d1      	strb	r1, [r2, r3]
        buffer[i * 2 + 1] = low_byte;
 8003254:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	3301      	adds	r3, #1
 800325c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003260:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8003264:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 8003268:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < 256; i++) {
 800326a:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 800326e:	3301      	adds	r3, #1
 8003270:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8003274:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003278:	2bff      	cmp	r3, #255	@ 0xff
 800327a:	d9e1      	bls.n	8003240 <ILI9341_FillScreen+0x3c>
    }

    // Set column address (entire width of the display)
    uint8_t col_data[4] = {0x00, 0x00, 0x00, 0xEF}; // Start: 0x0000, End: 239
 800327c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003280:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003284:	f04f 426f 	mov.w	r2, #4009754624	@ 0xef000000
 8003288:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2A); // Column Address Set
 800328a:	202a      	movs	r0, #42	@ 0x2a
 800328c:	f7ff fe9e 	bl	8002fcc <ILI9341_SendCommand>
    ILI9341_SendData(col_data, sizeof(col_data));
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	2104      	movs	r1, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff febe 	bl	8003018 <ILI9341_SendData>

    // Set page address (entire height of the display)
    uint8_t page_data[4] = {0x00, 0x00, 0x01, 0x3F}; // Start: 0x0000, End: 319
 800329c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80032a4:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <ILI9341_FillScreen+0xfc>)
 80032a6:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2B); // Page Address Set
 80032a8:	202b      	movs	r0, #43	@ 0x2b
 80032aa:	f7ff fe8f 	bl	8002fcc <ILI9341_SendCommand>
    ILI9341_SendData(page_data, sizeof(page_data));
 80032ae:	f107 0308 	add.w	r3, r7, #8
 80032b2:	2104      	movs	r1, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff feaf 	bl	8003018 <ILI9341_SendData>

    // Start memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 80032ba:	202c      	movs	r0, #44	@ 0x2c
 80032bc:	f7ff fe86 	bl	8002fcc <ILI9341_SendCommand>

    // Send buffer in chunks
    uint32_t num_chunks = (240 * 320) / 256; // Total pixels divided by buffer size
 80032c0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80032c4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    for (uint32_t i = 0; i < num_chunks; i++) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80032ce:	e00b      	b.n	80032e8 <ILI9341_FillScreen+0xe4>
        ILI9341_SendData(buffer, sizeof(buffer));
 80032d0:	f107 0310 	add.w	r3, r7, #16
 80032d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fe9d 	bl	8003018 <ILI9341_SendData>
    for (uint32_t i = 0; i < num_chunks; i++) {
 80032de:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80032e2:	3301      	adds	r3, #1
 80032e4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80032e8:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80032ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3ed      	bcc.n	80032d0 <ILI9341_FillScreen+0xcc>
    }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	3f010000 	.word	0x3f010000

08003304 <ILI9341_SetAddressWindow>:


void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4623      	mov	r3, r4
 8003314:	80fb      	strh	r3, [r7, #6]
 8003316:	4603      	mov	r3, r0
 8003318:	80bb      	strh	r3, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	807b      	strh	r3, [r7, #2]
 800331e:	4613      	mov	r3, r2
 8003320:	803b      	strh	r3, [r7, #0]
    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 8003322:	202a      	movs	r0, #42	@ 0x2a
 8003324:	f7ff fe52 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t columnData[4] = {
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	733b      	strb	r3, [r7, #12]
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	737b      	strb	r3, [r7, #13]
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	b29b      	uxth	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	73bb      	strb	r3, [r7, #14]
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	73fb      	strb	r3, [r7, #15]
        (x0 >> 8) & 0xFF, x0 & 0xFF, // Start column
        (x1 >> 8) & 0xFF, x1 & 0xFF  // End column
    };
    ILI9341_SendData(columnData, 4);
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	2104      	movs	r1, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fe62 	bl	8003018 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 8003354:	202b      	movs	r0, #43	@ 0x2b
 8003356:	f7ff fe39 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t rowData[4] = {
 800335a:	88bb      	ldrh	r3, [r7, #4]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	b29b      	uxth	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	723b      	strb	r3, [r7, #8]
 8003364:	88bb      	ldrh	r3, [r7, #4]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	727b      	strb	r3, [r7, #9]
 800336a:	883b      	ldrh	r3, [r7, #0]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	b29b      	uxth	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	72bb      	strb	r3, [r7, #10]
 8003374:	883b      	ldrh	r3, [r7, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	72fb      	strb	r3, [r7, #11]
        (y0 >> 8) & 0xFF, y0 & 0xFF, // Start row
        (y1 >> 8) & 0xFF, y1 & 0xFF  // End row
    };
    ILI9341_SendData(rowData, 4);
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	2104      	movs	r1, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fe49 	bl	8003018 <ILI9341_SendData>

    // Prepare for memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 8003386:	202c      	movs	r0, #44	@ 0x2c
 8003388:	f7ff fe20 	bl	8002fcc <ILI9341_SendCommand>
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}

08003394 <ILI9341_DrawPixel>:
#include "lcd_functions.h"
#include "fatfs.h"
#include "gfxfont.h"

bool FadeTextComplete = false;
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
 800339e:	460b      	mov	r3, r1
 80033a0:	80bb      	strh	r3, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	807b      	strh	r3, [r7, #2]
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2bef      	cmp	r3, #239	@ 0xef
 80033aa:	d847      	bhi.n	800343c <ILI9341_DrawPixel+0xa8>
 80033ac:	88bb      	ldrh	r3, [r7, #4]
 80033ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80033b2:	d243      	bcs.n	800343c <ILI9341_DrawPixel+0xa8>

    ILI9341_SendCommand(0x2A); // Column Address Set
 80033b4:	202a      	movs	r0, #42	@ 0x2a
 80033b6:	f7ff fe09 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t data_x[] = {(x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF};
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	b29b      	uxth	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	753b      	strb	r3, [r7, #20]
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	757b      	strb	r3, [r7, #21]
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	75bb      	strb	r3, [r7, #22]
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	75fb      	strb	r3, [r7, #23]
    ILI9341_SendData(data_x, 4);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	2104      	movs	r1, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fe19 	bl	8003018 <ILI9341_SendData>

    ILI9341_SendCommand(0x2B); // Page Address Set
 80033e6:	202b      	movs	r0, #43	@ 0x2b
 80033e8:	f7ff fdf0 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t data_y[] = {(y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF};
 80033ec:	88bb      	ldrh	r3, [r7, #4]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	743b      	strb	r3, [r7, #16]
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	747b      	strb	r3, [r7, #17]
 80033fc:	88bb      	ldrh	r3, [r7, #4]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b29b      	uxth	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	74bb      	strb	r3, [r7, #18]
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(data_y, 4);
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	2104      	movs	r1, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fe00 	bl	8003018 <ILI9341_SendData>

    ILI9341_SendCommand(0x2C); // Memory Write
 8003418:	202c      	movs	r0, #44	@ 0x2c
 800341a:	f7ff fdd7 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t color_data[] = {(color >> 8) & 0xFF, color & 0xFF};
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	b29b      	uxth	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	733b      	strb	r3, [r7, #12]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(color_data, 2);
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fdef 	bl	8003018 <ILI9341_SendData>
 800343a:	e000      	b.n	800343e <ILI9341_DrawPixel+0xaa>
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 800343c:	bf00      	nop
}
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <DrawChar>:
void DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t scale) {
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4623      	mov	r3, r4
 8003454:	80fb      	strh	r3, [r7, #6]
 8003456:	4603      	mov	r3, r0
 8003458:	80bb      	strh	r3, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	70fb      	strb	r3, [r7, #3]
 800345e:	4613      	mov	r3, r2
 8003460:	803b      	strh	r3, [r7, #0]
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f2c0 80c7 	blt.w	80035fa <DrawChar+0x1b6>

    // Map ASCII character to the font array
    const unsigned char *charBitmap = &font[c * 5];
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	4a63      	ldr	r2, [pc, #396]	@ (8003604 <DrawChar+0x1c0>)
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

    // Draw each column of the character
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
 800347e:	e089      	b.n	8003594 <DrawChar+0x150>
        uint8_t columnData = charBitmap[col];
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	72fb      	strb	r3, [r7, #11]
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 800348a:	2300      	movs	r3, #0
 800348c:	75bb      	strb	r3, [r7, #22]
 800348e:	e07b      	b.n	8003588 <DrawChar+0x144>
            if (columnData & (1 << row)) { // Check if pixel is ON
 8003490:	7afa      	ldrb	r2, [r7, #11]
 8003492:	7dbb      	ldrb	r3, [r7, #22]
 8003494:	fa42 f303 	asr.w	r3, r2, r3
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d038      	beq.n	8003512 <DrawChar+0xce>
                // Draw a scaled block for the ON pixel
                for (uint8_t i = 0; i < scale; i++) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	757b      	strb	r3, [r7, #21]
 80034a4:	e02f      	b.n	8003506 <DrawChar+0xc2>
                    for (uint8_t j = 0; j < scale; j++) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	753b      	strb	r3, [r7, #20]
 80034aa:	e024      	b.n	80034f6 <DrawChar+0xb2>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, color);
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	fb12 f303 	smulbb	r3, r2, r3
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4413      	add	r3, r2
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	7d7b      	ldrb	r3, [r7, #21]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	b298      	uxth	r0, r3
 80034ca:	7dbb      	ldrb	r3, [r7, #22]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	fb12 f303 	smulbb	r3, r2, r3
 80034d8:	b29a      	uxth	r2, r3
 80034da:	88bb      	ldrh	r3, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	7d3b      	ldrb	r3, [r7, #20]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	883a      	ldrh	r2, [r7, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff ff52 	bl	8003394 <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 80034f0:	7d3b      	ldrb	r3, [r7, #20]
 80034f2:	3301      	adds	r3, #1
 80034f4:	753b      	strb	r3, [r7, #20]
 80034f6:	7d3a      	ldrb	r2, [r7, #20]
 80034f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d3d5      	bcc.n	80034ac <DrawChar+0x68>
                for (uint8_t i = 0; i < scale; i++) {
 8003500:	7d7b      	ldrb	r3, [r7, #21]
 8003502:	3301      	adds	r3, #1
 8003504:	757b      	strb	r3, [r7, #21]
 8003506:	7d7a      	ldrb	r2, [r7, #21]
 8003508:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800350c:	429a      	cmp	r2, r3
 800350e:	d3ca      	bcc.n	80034a6 <DrawChar+0x62>
 8003510:	e037      	b.n	8003582 <DrawChar+0x13e>
                    }
                }
            } else {
                // Draw a scaled block for the OFF pixel (background)
                for (uint8_t i = 0; i < scale; i++) {
 8003512:	2300      	movs	r3, #0
 8003514:	74fb      	strb	r3, [r7, #19]
 8003516:	e02f      	b.n	8003578 <DrawChar+0x134>
                    for (uint8_t j = 0; j < scale; j++) {
 8003518:	2300      	movs	r3, #0
 800351a:	74bb      	strb	r3, [r7, #18]
 800351c:	e024      	b.n	8003568 <DrawChar+0x124>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, bg);
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	b29a      	uxth	r2, r3
 8003522:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003526:	b29b      	uxth	r3, r3
 8003528:	fb12 f303 	smulbb	r3, r2, r3
 800352c:	b29a      	uxth	r2, r3
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	4413      	add	r3, r2
 8003532:	b29a      	uxth	r2, r3
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	b29b      	uxth	r3, r3
 8003538:	4413      	add	r3, r2
 800353a:	b298      	uxth	r0, r3
 800353c:	7dbb      	ldrb	r3, [r7, #22]
 800353e:	b29a      	uxth	r2, r3
 8003540:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003544:	b29b      	uxth	r3, r3
 8003546:	fb12 f303 	smulbb	r3, r2, r3
 800354a:	b29a      	uxth	r2, r3
 800354c:	88bb      	ldrh	r3, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	b29a      	uxth	r2, r3
 8003552:	7cbb      	ldrb	r3, [r7, #18]
 8003554:	b29b      	uxth	r3, r3
 8003556:	4413      	add	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800355c:	4619      	mov	r1, r3
 800355e:	f7ff ff19 	bl	8003394 <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8003562:	7cbb      	ldrb	r3, [r7, #18]
 8003564:	3301      	adds	r3, #1
 8003566:	74bb      	strb	r3, [r7, #18]
 8003568:	7cba      	ldrb	r2, [r7, #18]
 800356a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800356e:	429a      	cmp	r2, r3
 8003570:	d3d5      	bcc.n	800351e <DrawChar+0xda>
                for (uint8_t i = 0; i < scale; i++) {
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	3301      	adds	r3, #1
 8003576:	74fb      	strb	r3, [r7, #19]
 8003578:	7cfa      	ldrb	r2, [r7, #19]
 800357a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800357e:	429a      	cmp	r2, r3
 8003580:	d3ca      	bcc.n	8003518 <DrawChar+0xd4>
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8003582:	7dbb      	ldrb	r3, [r7, #22]
 8003584:	3301      	adds	r3, #1
 8003586:	75bb      	strb	r3, [r7, #22]
 8003588:	7dbb      	ldrb	r3, [r7, #22]
 800358a:	2b07      	cmp	r3, #7
 800358c:	d980      	bls.n	8003490 <DrawChar+0x4c>
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	3301      	adds	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	2b04      	cmp	r3, #4
 8003598:	f67f af72 	bls.w	8003480 <DrawChar+0x3c>
            }
        }
    }

    // Add scaled spacing after each character
    for (uint8_t row = 0; row < 8 * scale; row++) {
 800359c:	2300      	movs	r3, #0
 800359e:	747b      	strb	r3, [r7, #17]
 80035a0:	e024      	b.n	80035ec <DrawChar+0x1a8>
        for (uint8_t i = 0; i < scale; i++) {
 80035a2:	2300      	movs	r3, #0
 80035a4:	743b      	strb	r3, [r7, #16]
 80035a6:	e019      	b.n	80035dc <DrawChar+0x198>
            ILI9341_DrawPixel(x + 5 * scale + i, y + row, bg);
 80035a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	4413      	add	r3, r2
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	7c3b      	ldrb	r3, [r7, #16]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	b298      	uxth	r0, r3
 80035c4:	7c7b      	ldrb	r3, [r7, #17]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	88bb      	ldrh	r3, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7ff fedf 	bl	8003394 <ILI9341_DrawPixel>
        for (uint8_t i = 0; i < scale; i++) {
 80035d6:	7c3b      	ldrb	r3, [r7, #16]
 80035d8:	3301      	adds	r3, #1
 80035da:	743b      	strb	r3, [r7, #16]
 80035dc:	7c3a      	ldrb	r2, [r7, #16]
 80035de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3e0      	bcc.n	80035a8 <DrawChar+0x164>
    for (uint8_t row = 0; row < 8 * scale; row++) {
 80035e6:	7c7b      	ldrb	r3, [r7, #17]
 80035e8:	3301      	adds	r3, #1
 80035ea:	747b      	strb	r3, [r7, #17]
 80035ec:	7c7a      	ldrb	r2, [r7, #17]
 80035ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	429a      	cmp	r2, r3
 80035f6:	dbd4      	blt.n	80035a2 <DrawChar+0x15e>
 80035f8:	e000      	b.n	80035fc <DrawChar+0x1b8>
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 80035fa:	bf00      	nop
        }
    }
}
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	0800f7a0 	.word	0x0800f7a0

08003608 <DrawString>:


void DrawString(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bg, uint8_t scale) {
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af02      	add	r7, sp, #8
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	81fb      	strh	r3, [r7, #14]
 8003616:	460b      	mov	r3, r1
 8003618:	81bb      	strh	r3, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 800361e:	e01a      	b.n	8003656 <DrawString+0x4e>
        DrawChar(x, y, *str, color, bg, scale);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	88fc      	ldrh	r4, [r7, #6]
 8003626:	89b9      	ldrh	r1, [r7, #12]
 8003628:	89f8      	ldrh	r0, [r7, #14]
 800362a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	8c3b      	ldrh	r3, [r7, #32]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4623      	mov	r3, r4
 8003636:	f7ff ff05 	bl	8003444 <DrawChar>
        x += 6 * scale; // Adjust character spacing based on scale
 800363a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	0052      	lsls	r2, r2, #1
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	4413      	add	r3, r2
 800364e:	81fb      	strh	r3, [r7, #14]
        str++;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e0      	bne.n	8003620 <DrawString+0x18>
    }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}

08003668 <ILI9341_FillRect>:


void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4623      	mov	r3, r4
 8003678:	80fb      	strh	r3, [r7, #6]
 800367a:	4603      	mov	r3, r0
 800367c:	80bb      	strh	r3, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
 8003682:	4613      	mov	r3, r2
 8003684:	803b      	strh	r3, [r7, #0]
    // Ensure the rectangle lies within the screen boundaries
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2bef      	cmp	r3, #239	@ 0xef
 800368a:	d879      	bhi.n	8003780 <ILI9341_FillRect+0x118>
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003692:	d275      	bcs.n	8003780 <ILI9341_FillRect+0x118>

    // Clip width and height if the rectangle extends beyond screen boundaries
    if ((x + width - 1) >= ILI9341_WIDTH) {
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	4413      	add	r3, r2
 800369a:	2bf0      	cmp	r3, #240	@ 0xf0
 800369c:	dd03      	ble.n	80036a6 <ILI9341_FillRect+0x3e>
        width = ILI9341_WIDTH - x;
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80036a4:	807b      	strh	r3, [r7, #2]
    }
    if ((y + height - 1) >= ILI9341_HEIGHT) {
 80036a6:	88ba      	ldrh	r2, [r7, #4]
 80036a8:	883b      	ldrh	r3, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80036b0:	dd03      	ble.n	80036ba <ILI9341_FillRect+0x52>
        height = ILI9341_HEIGHT - y;
 80036b2:	88bb      	ldrh	r3, [r7, #4]
 80036b4:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80036b8:	803b      	strh	r3, [r7, #0]
    }

    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 80036ba:	202a      	movs	r0, #42	@ 0x2a
 80036bc:	f7ff fc86 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t colData[4] = { (x >> 8) & 0xFF, x & 0xFF, ((x + width - 1) >> 8) & 0xFF, (x + width - 1) & 0xFF };
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	743b      	strb	r3, [r7, #16]
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	747b      	strb	r3, [r7, #17]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	4413      	add	r3, r2
 80036d6:	3b01      	subs	r3, #1
 80036d8:	121b      	asrs	r3, r3, #8
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	74bb      	strb	r3, [r7, #18]
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(colData, 4);
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	2104      	movs	r1, #4
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fc8e 	bl	8003018 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 80036fc:	202b      	movs	r0, #43	@ 0x2b
 80036fe:	f7ff fc65 	bl	8002fcc <ILI9341_SendCommand>
    uint8_t rowData[4] = { (y >> 8) & 0xFF, y & 0xFF, ((y + height - 1) >> 8) & 0xFF, (y + height - 1) & 0xFF };
 8003702:	88bb      	ldrh	r3, [r7, #4]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b29b      	uxth	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	733b      	strb	r3, [r7, #12]
 800370c:	88bb      	ldrh	r3, [r7, #4]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	737b      	strb	r3, [r7, #13]
 8003712:	88ba      	ldrh	r2, [r7, #4]
 8003714:	883b      	ldrh	r3, [r7, #0]
 8003716:	4413      	add	r3, r2
 8003718:	3b01      	subs	r3, #1
 800371a:	121b      	asrs	r3, r3, #8
 800371c:	b2db      	uxtb	r3, r3
 800371e:	73bb      	strb	r3, [r7, #14]
 8003720:	88bb      	ldrh	r3, [r7, #4]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	883b      	ldrh	r3, [r7, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4413      	add	r3, r2
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	73fb      	strb	r3, [r7, #15]
    ILI9341_SendData(rowData, 4);
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	2104      	movs	r1, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc6d 	bl	8003018 <ILI9341_SendData>

    // Write memory
    ILI9341_SendCommand(0x2C); // Memory Write
 800373e:	202c      	movs	r0, #44	@ 0x2c
 8003740:	f7ff fc44 	bl	8002fcc <ILI9341_SendCommand>

    // Fill the rectangle with color
    uint16_t pixelCount = width * height;
 8003744:	887a      	ldrh	r2, [r7, #2]
 8003746:	883b      	ldrh	r3, [r7, #0]
 8003748:	fb12 f303 	smulbb	r3, r2, r3
 800374c:	82bb      	strh	r3, [r7, #20]
    uint8_t colorData[2] = { (color >> 8) & 0xFF, color & 0xFF }; // Split color into 2 bytes
 800374e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	723b      	strb	r3, [r7, #8]
 8003758:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800375a:	b2db      	uxtb	r3, r3
 800375c:	727b      	strb	r3, [r7, #9]
    for (uint16_t i = 0; i < pixelCount; i++) {
 800375e:	2300      	movs	r3, #0
 8003760:	82fb      	strh	r3, [r7, #22]
 8003762:	e008      	b.n	8003776 <ILI9341_FillRect+0x10e>
        ILI9341_SendData(colorData, 2);
 8003764:	f107 0308 	add.w	r3, r7, #8
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fc54 	bl	8003018 <ILI9341_SendData>
    for (uint16_t i = 0; i < pixelCount; i++) {
 8003770:	8afb      	ldrh	r3, [r7, #22]
 8003772:	3301      	adds	r3, #1
 8003774:	82fb      	strh	r3, [r7, #22]
 8003776:	8afa      	ldrh	r2, [r7, #22]
 8003778:	8abb      	ldrh	r3, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3f2      	bcc.n	8003764 <ILI9341_FillRect+0xfc>
 800377e:	e000      	b.n	8003782 <ILI9341_FillRect+0x11a>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003780:	bf00      	nop
    }
}
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd90      	pop	{r4, r7, pc}

08003788 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(int x, int y, int length, uint16_t color) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e00e      	b.n	80037ba <ILI9341_DrawVLine+0x32>
        ILI9341_DrawPixel(x, y + i, color);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	b298      	uxth	r0, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	4619      	mov	r1, r3
 80037b0:	f7ff fdf0 	bl	8003394 <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	dbec      	blt.n	800379c <ILI9341_DrawVLine+0x14>
    }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(int x, int y, int length, uint16_t color) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e00e      	b.n	80037fe <ILI9341_DrawHLine+0x32>
        ILI9341_DrawPixel(x + i, y, color);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	b291      	uxth	r1, r2
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fdce 	bl	8003394 <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbec      	blt.n	80037e0 <ILI9341_DrawHLine+0x14>
    }
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <ILI9341_DrawRect>:

void ILI9341_DrawRect(int x, int y, int width, int height, uint16_t color) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
    // Draw top horizontal line
    ILI9341_DrawHLine(x, y, width, color);
 800381e:	8b3b      	ldrh	r3, [r7, #24]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ffd1 	bl	80037cc <ILI9341_DrawHLine>

    // Draw bottom horizontal line
    ILI9341_DrawHLine(x, y + height - 1, width, color);
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4413      	add	r3, r2
 8003830:	1e59      	subs	r1, r3, #1
 8003832:	8b3b      	ldrh	r3, [r7, #24]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f7ff ffc8 	bl	80037cc <ILI9341_DrawHLine>

    // Draw left vertical line
    ILI9341_DrawVLine(x, y, height, color);
 800383c:	8b3b      	ldrh	r3, [r7, #24]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff ffa0 	bl	8003788 <ILI9341_DrawVLine>

    // Draw right vertical line
    ILI9341_DrawVLine(x + width - 1, y, height, color);
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	1e58      	subs	r0, r3, #1
 8003850:	8b3b      	ldrh	r3, [r7, #24]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	f7ff ff97 	bl	8003788 <ILI9341_DrawVLine>
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <progress_bar>:
        DrawString(x, y_pos, text, color, bg_color, 1); // Draw text at new position
        HAL_Delay(50); // Adjust speed of sliding
    }
}

void progress_bar(int x, int y, int width, int height, uint16_t fill_color, uint16_t bg_color, int percentage) {
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
    int progress_width = (width * percentage) / 100;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <progress_bar+0x88>)
 800387c:	fb82 1203 	smull	r1, r2, r2, r3
 8003880:	1152      	asrs	r2, r2, #5
 8003882:	17db      	asrs	r3, r3, #31
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	617b      	str	r3, [r7, #20]

    // Draw only the progress portion
    ILI9341_FillRect(x, y, progress_width, height, fill_color);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	b298      	uxth	r0, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	b299      	uxth	r1, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	b29a      	uxth	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b29c      	uxth	r4, r3
 8003898:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4623      	mov	r3, r4
 800389e:	f7ff fee3 	bl	8003668 <ILI9341_FillRect>

    // Optionally draw the remaining portion (if needed)
    if (percentage < 100) {
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	2b63      	cmp	r3, #99	@ 0x63
 80038a6:	dc14      	bgt.n	80038d2 <progress_bar+0x6e>
        ILI9341_FillRect(x + progress_width, y, width - progress_width, height, bg_color);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	b298      	uxth	r0, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	b299      	uxth	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b29c      	uxth	r4, r3
 80038c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	4623      	mov	r3, r4
 80038ce:	f7ff fecb 	bl	8003668 <ILI9341_FillRect>
    }

    // Draw a border if necessary
    ILI9341_DrawRect(x, y, width, height, 0xFFFF);
 80038d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ff96 	bl	8003810 <ILI9341_DrawRect>
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd90      	pop	{r4, r7, pc}
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <FlashScreen>:
        // Draw the Pokémon name with increasing font size
        DrawString(x, y, pokemon_name, 0xFFFF, 0x0000, size); // White text
        HAL_Delay(100); // Delay between frames for smooth animation
    }
}
void FlashScreen(int flashes, int duration) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < flashes; i++) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e019      	b.n	8003934 <FlashScreen+0x44>
        ILI9341_FillScreen(0xFFFF); // White screen
 8003900:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003904:	f7ff fc7e 	bl	8003204 <ILI9341_FillScreen>
        HAL_Delay(duration-(duration/2));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	0fda      	lsrs	r2, r3, #31
 800390c:	4413      	add	r3, r2
 800390e:	105b      	asrs	r3, r3, #1
 8003910:	425b      	negs	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4413      	add	r3, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f81b 	bl	8004954 <HAL_Delay>
        ILI9341_FillScreen(0xF7BE); // Black screen
 800391e:	f24f 70be 	movw	r0, #63422	@ 0xf7be
 8003922:	f7ff fc6f 	bl	8003204 <ILI9341_FillScreen>
        HAL_Delay(duration);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f813 	bl	8004954 <HAL_Delay>
    for (int i = 0; i < flashes; i++) {
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	dbe1      	blt.n	8003900 <FlashScreen+0x10>
    }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
pin_init();
 800394c:	f000 fee6 	bl	800471c <pin_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003950:	f000 ff8e 	bl	8004870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003954:	f000 f818 	bl	8003988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003958:	f000 f97e 	bl	8003c58 <MX_GPIO_Init>
  MX_DMA_Init();
 800395c:	f000 f936 	bl	8003bcc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003960:	f000 f8e0 	bl	8003b24 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003964:	f000 f8a8 	bl	8003ab8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003968:	f000 f878 	bl	8003a5c <MX_I2C1_Init>
  MX_FATFS_Init();
 800396c:	f005 fa10 	bl	8008d90 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8003970:	f000 f902 	bl	8003b78 <MX_USART2_UART_Init>
  init_game();
 8003974:	f7fe fc9c 	bl	80022b0 <init_game>
  process_SD_card("tiger.bmp");
 8003978:	4802      	ldr	r0, [pc, #8]	@ (8003984 <main+0x3c>)
 800397a:	f7fe f919 	bl	8001bb0 <process_SD_card>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  game_state_machine();
 800397e:	f7fe fced 	bl	800235c <game_state_machine>
 8003982:	e7fc      	b.n	800397e <main+0x36>
 8003984:	0800f714 	.word	0x0800f714

08003988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	@ 0x50
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0320 	add.w	r3, r7, #32
 8003992:	2230      	movs	r2, #48	@ 0x30
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f009 fa5e 	bl	800ce58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	4a27      	ldr	r2, [pc, #156]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80039bc:	4b25      	ldr	r3, [pc, #148]	@ (8003a54 <SystemClock_Config+0xcc>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	2300      	movs	r3, #0
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a21      	ldr	r2, [pc, #132]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <SystemClock_Config+0xd0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039e4:	2302      	movs	r3, #2
 80039e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039e8:	2301      	movs	r3, #1
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ec:	2310      	movs	r3, #16
 80039ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039f0:	2302      	movs	r3, #2
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039f8:	2308      	movs	r3, #8
 80039fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80039fc:	2364      	movs	r3, #100	@ 0x64
 80039fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a00:	2302      	movs	r3, #2
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003a04:	2308      	movs	r3, #8
 8003a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a08:	f107 0320 	add.w	r3, r7, #32
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 ff73 	bl	80068f8 <HAL_RCC_OscConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a18:	f000 fa56 	bl	8003ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a20:	2302      	movs	r3, #2
 8003a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	2103      	movs	r1, #3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f9d4 	bl	8006de8 <HAL_RCC_ClockConfig>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a46:	f000 fa3f 	bl	8003ec8 <Error_Handler>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3750      	adds	r7, #80	@ 0x50
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000

08003a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a60:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <MX_I2C1_Init+0x54>)
 8003a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a66:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a68:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <MX_I2C1_Init+0x58>)
 8003a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a72:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a8c:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a98:	4804      	ldr	r0, [pc, #16]	@ (8003aac <MX_I2C1_Init+0x50>)
 8003a9a:	f001 fddb 	bl	8005654 <HAL_I2C_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003aa4:	f000 fa10 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200012e4 	.word	0x200012e4
 8003ab0:	40005400 	.word	0x40005400
 8003ab4:	000186a0 	.word	0x000186a0

08003ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003abc:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003abe:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <MX_SPI2_Init+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ac2:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003aca:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003adc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003b04:	220a      	movs	r2, #10
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b08:	4804      	ldr	r0, [pc, #16]	@ (8003b1c <MX_SPI2_Init+0x64>)
 8003b0a:	f003 fb8d 	bl	8007228 <HAL_SPI_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b14:	f000 f9d8 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20001338 	.word	0x20001338
 8003b20:	40003800 	.word	0x40003800

08003b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <MX_USART1_UART_Init+0x50>)
 8003b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b2e:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b4a:	220c      	movs	r2, #12
 8003b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003b5a:	4805      	ldr	r0, [pc, #20]	@ (8003b70 <MX_USART1_UART_Init+0x4c>)
 8003b5c:	f004 f918 	bl	8007d90 <HAL_HalfDuplex_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b66:	f000 f9af 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20001450 	.word	0x20001450
 8003b74:	40011000 	.word	0x40011000

08003b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b7e:	4a12      	ldr	r2, [pc, #72]	@ (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003b9e:	220c      	movs	r2, #12
 8003ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bae:	4805      	ldr	r0, [pc, #20]	@ (8003bc4 <MX_USART2_UART_Init+0x4c>)
 8003bb0:	f004 f89e 	bl	8007cf0 <HAL_UART_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003bba:	f000 f985 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20001498 	.word	0x20001498
 8003bc8:	40004400 	.word	0x40004400

08003bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	4a1e      	ldr	r2, [pc, #120]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003bdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003bf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <MX_DMA_Init+0x88>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	200e      	movs	r0, #14
 8003c10:	f000 ff9f 	bl	8004b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003c14:	200e      	movs	r0, #14
 8003c16:	f000 ffb8 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	200f      	movs	r0, #15
 8003c20:	f000 ff97 	bl	8004b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c24:	200f      	movs	r0, #15
 8003c26:	f000 ffb0 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	203a      	movs	r0, #58	@ 0x3a
 8003c30:	f000 ff8f 	bl	8004b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c34:	203a      	movs	r0, #58	@ 0x3a
 8003c36:	f000 ffa8 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	2046      	movs	r0, #70	@ 0x46
 8003c40:	f000 ff87 	bl	8004b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003c44:	2046      	movs	r0, #70	@ 0x46
 8003c46:	f000 ffa0 	bl	8004b8a <HAL_NVIC_EnableIRQ>

}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	@ 0x30
 8003c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 031c 	add.w	r3, r7, #28
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	4b86      	ldr	r3, [pc, #536]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4a85      	ldr	r2, [pc, #532]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7e:	4b83      	ldr	r3, [pc, #524]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a7e      	ldr	r2, [pc, #504]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4a77      	ldr	r2, [pc, #476]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb6:	4b75      	ldr	r3, [pc, #468]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b71      	ldr	r3, [pc, #452]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a70      	ldr	r2, [pc, #448]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a69      	ldr	r2, [pc, #420]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003ce8:	f043 0308 	orr.w	r3, r3, #8
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b67      	ldr	r3, [pc, #412]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	4b63      	ldr	r3, [pc, #396]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4a62      	ldr	r2, [pc, #392]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003d04:	f043 0310 	orr.w	r3, r3, #16
 8003d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0a:	4b60      	ldr	r3, [pc, #384]	@ (8003e8c <MX_GPIO_Init+0x234>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d16:	2201      	movs	r2, #1
 8003d18:	2101      	movs	r1, #1
 8003d1a:	485d      	ldr	r0, [pc, #372]	@ (8003e90 <MX_GPIO_Init+0x238>)
 8003d1c:	f001 fc68 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8003d26:	485b      	ldr	r0, [pc, #364]	@ (8003e94 <MX_GPIO_Init+0x23c>)
 8003d28:	f001 fc62 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f24f 2110 	movw	r1, #61968	@ 0xf210
 8003d32:	4859      	ldr	r0, [pc, #356]	@ (8003e98 <MX_GPIO_Init+0x240>)
 8003d34:	f001 fc5c 	bl	80055f0 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	4854      	ldr	r0, [pc, #336]	@ (8003e90 <MX_GPIO_Init+0x238>)
 8003d3e:	f001 fc57 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003d42:	2200      	movs	r2, #0
 8003d44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d48:	4854      	ldr	r0, [pc, #336]	@ (8003e9c <MX_GPIO_Init+0x244>)
 8003d4a:	f001 fc51 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8003d4e:	2381      	movs	r3, #129	@ 0x81
 8003d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d52:	2301      	movs	r3, #1
 8003d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d5e:	f107 031c 	add.w	r3, r7, #28
 8003d62:	4619      	mov	r1, r3
 8003d64:	484a      	ldr	r0, [pc, #296]	@ (8003e90 <MX_GPIO_Init+0x238>)
 8003d66:	f001 faa7 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	4619      	mov	r1, r3
 8003d84:	4842      	ldr	r0, [pc, #264]	@ (8003e90 <MX_GPIO_Init+0x238>)
 8003d86:	f001 fa97 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003d8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	f107 031c 	add.w	r3, r7, #28
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	483f      	ldr	r0, [pc, #252]	@ (8003e9c <MX_GPIO_Init+0x244>)
 8003da0:	f001 fa8a 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003da4:	2320      	movs	r3, #32
 8003da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	4619      	mov	r1, r3
 8003db6:	4836      	ldr	r0, [pc, #216]	@ (8003e90 <MX_GPIO_Init+0x238>)
 8003db8:	f001 fa7e 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003dbc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	482f      	ldr	r0, [pc, #188]	@ (8003e94 <MX_GPIO_Init+0x23c>)
 8003dd6:	f001 fa6f 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8003dda:	f24f 2310 	movw	r3, #61968	@ 0xf210
 8003dde:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de0:	2301      	movs	r3, #1
 8003de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dec:	f107 031c 	add.w	r3, r7, #28
 8003df0:	4619      	mov	r1, r3
 8003df2:	4829      	ldr	r0, [pc, #164]	@ (8003e98 <MX_GPIO_Init+0x240>)
 8003df4:	f001 fa60 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4823      	ldr	r0, [pc, #140]	@ (8003e9c <MX_GPIO_Init+0x244>)
 8003e0e:	f001 fa53 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	481c      	ldr	r0, [pc, #112]	@ (8003e9c <MX_GPIO_Init+0x244>)
 8003e2c:	f001 fa44 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003e30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e42:	230a      	movs	r3, #10
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4813      	ldr	r0, [pc, #76]	@ (8003e9c <MX_GPIO_Init+0x244>)
 8003e4e:	f001 fa33 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003e52:	2320      	movs	r3, #32
 8003e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	4619      	mov	r1, r3
 8003e64:	480c      	ldr	r0, [pc, #48]	@ (8003e98 <MX_GPIO_Init+0x240>)
 8003e66:	f001 fa27 	bl	80052b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e6e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4808      	ldr	r0, [pc, #32]	@ (8003ea0 <MX_GPIO_Init+0x248>)
 8003e80:	f001 fa1a 	bl	80052b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e84:	bf00      	nop
 8003e86:	3730      	adds	r7, #48	@ 0x30
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020400 	.word	0x40020400
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	40021000 	.word	0x40021000

08003ea4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003eac:	1d39      	adds	r1, r7, #4
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4803      	ldr	r0, [pc, #12]	@ (8003ec4 <__io_putchar+0x20>)
 8003eb6:	f003 ffc3 	bl	8007e40 <HAL_UART_Transmit>
  return ch;
 8003eba:	687b      	ldr	r3, [r7, #4]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20001498 	.word	0x20001498

08003ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ecc:	b672      	cpsid	i
}
 8003ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <Error_Handler+0x8>

08003ed4 <Push_Button_Init>:
// Variables to track button states
volatile uint8_t battle_button_state = 0; // For PC13 (Battle)
volatile uint8_t capture_button_state = 0; // For PC14 (Capture)

// Initialize both buttons: PC13 for Battle, PC14 for Capture
void Push_Button_Init(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]

    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <Push_Button_Init+0x7c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4a17      	ldr	r2, [pc, #92]	@ (8003f50 <Push_Button_Init+0x7c>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef8:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <Push_Button_Init+0x7c>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as input with pull-up resistor (Battle Button)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003f04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f08:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 8003f0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003f0e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f10:	2301      	movs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	480e      	ldr	r0, [pc, #56]	@ (8003f54 <Push_Button_Init+0x80>)
 8003f1a:	f001 f9cd 	bl	80052b8 <HAL_GPIO_Init>

    // Configure PC14 as input with pull-up resistor (Capture Button)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f22:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 8003f24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003f28:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4808      	ldr	r0, [pc, #32]	@ (8003f54 <Push_Button_Init+0x80>)
 8003f34:	f001 f9c0 	bl	80052b8 <HAL_GPIO_Init>

    // Enable and set EXTI Line 15-10 Interrupt to the lowest priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	2028      	movs	r0, #40	@ 0x28
 8003f3e:	f000 fe08 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f42:	2028      	movs	r0, #40	@ 0x28
 8003f44:	f000 fe21 	bl	8004b8a <HAL_NVIC_EnableIRQ>
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40020800 	.word	0x40020800

08003f58 <EXTI15_10_IRQHandler>:

// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8003f5c:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <EXTI15_10_IRQHandler+0x48>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 8003f68:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <EXTI15_10_IRQHandler+0x48>)
 8003f6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f6e:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <EXTI15_10_IRQHandler+0x4c>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 8003f76:	480c      	ldr	r0, [pc, #48]	@ (8003fa8 <EXTI15_10_IRQHandler+0x50>)
 8003f78:	f000 fc30 	bl	80047dc <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <EXTI15_10_IRQHandler+0x48>)
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <EXTI15_10_IRQHandler+0x48>)
 8003f8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f8e:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <EXTI15_10_IRQHandler+0x54>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 8003f96:	4806      	ldr	r0, [pc, #24]	@ (8003fb0 <EXTI15_10_IRQHandler+0x58>)
 8003f98:	f000 fc20 	bl	80047dc <uart_send_string>
    }
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40013c00 	.word	0x40013c00
 8003fa4:	200015a0 	.word	0x200015a0
 8003fa8:	0800f720 	.word	0x0800f720
 8003fac:	200015a1 	.word	0x200015a1
 8003fb0:	0800f73c 	.word	0x0800f73c

08003fb4 <Get_Battle_Button_State>:

// Getter functions for button states
uint8_t Get_Battle_Button_State(void) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
    return battle_button_state;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <Get_Battle_Button_State+0x14>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	200015a0 	.word	0x200015a0

08003fcc <Get_Capture_Button_State>:

uint8_t Get_Capture_Button_State(void) {
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
    return capture_button_state;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	@ (8003fe0 <Get_Capture_Button_State+0x14>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b2db      	uxtb	r3, r3
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	200015a1 	.word	0x200015a1

08003fe4 <Reset_Button_State>:

// Reset both button states
void Reset_Button_State(void) {
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
    battle_button_state = 0;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <Reset_Button_State+0x1c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
    capture_button_state = 0;
 8003fee:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <Reset_Button_State+0x20>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	200015a0 	.word	0x200015a0
 8004004:	200015a1 	.word	0x200015a1

08004008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_MspInit+0x4c>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	4a0f      	ldr	r2, [pc, #60]	@ (8004054 <HAL_MspInit+0x4c>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800401c:	6453      	str	r3, [r2, #68]	@ 0x44
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <HAL_MspInit+0x4c>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_MspInit+0x4c>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <HAL_MspInit+0x4c>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_MspInit+0x4c>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004046:	2007      	movs	r0, #7
 8004048:	f000 fd78 	bl	8004b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_I2C_MspInit+0x84>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12c      	bne.n	80040d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	@ 0x30
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004096:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800409a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800409c:	2312      	movs	r3, #18
 800409e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040a8:	2304      	movs	r3, #4
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4619      	mov	r1, r3
 80040b2:	480c      	ldr	r0, [pc, #48]	@ (80040e4 <HAL_I2C_MspInit+0x8c>)
 80040b4:	f001 f900 	bl	80052b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 80040c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_I2C_MspInit+0x88>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40005400 	.word	0x40005400
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020400 	.word	0x40020400

080040e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a4c      	ldr	r2, [pc, #304]	@ (8004238 <HAL_SPI_MspInit+0x150>)
 8004106:	4293      	cmp	r3, r2
 8004108:	f040 8091 	bne.w	800422e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	4a49      	ldr	r2, [pc, #292]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800411a:	6413      	str	r3, [r2, #64]	@ 0x40
 800411c:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_SPI_MspInit+0x154>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b43      	ldr	r3, [pc, #268]	@ (800423c <HAL_SPI_MspInit+0x154>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	6313      	str	r3, [r2, #48]	@ 0x30
 8004138:	4b40      	ldr	r3, [pc, #256]	@ (800423c <HAL_SPI_MspInit+0x154>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004144:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004156:	2305      	movs	r3, #5
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	4619      	mov	r1, r3
 8004160:	4837      	ldr	r0, [pc, #220]	@ (8004240 <HAL_SPI_MspInit+0x158>)
 8004162:	f001 f8a9 	bl	80052b8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004166:	4b37      	ldr	r3, [pc, #220]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 8004168:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <HAL_SPI_MspInit+0x160>)
 800416a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800416c:	4b35      	ldr	r3, [pc, #212]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004172:	4b34      	ldr	r3, [pc, #208]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 8004174:	2240      	movs	r2, #64	@ 0x40
 8004176:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004178:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 8004180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004184:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004186:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418c:	4b2d      	ldr	r3, [pc, #180]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004192:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 800419a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800419e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a0:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80041a6:	4827      	ldr	r0, [pc, #156]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 80041a8:	f000 fd0a 	bl	8004bc0 <HAL_DMA_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80041b2:	f7ff fe89 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 80041ba:	649a      	str	r2, [r3, #72]	@ 0x48
 80041bc:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <HAL_SPI_MspInit+0x15c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80041c2:	4b22      	ldr	r3, [pc, #136]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041c4:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <HAL_SPI_MspInit+0x168>)
 80041c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80041c8:	4b20      	ldr	r3, [pc, #128]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041da:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041e2:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041e8:	4b18      	ldr	r3, [pc, #96]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80041ee:	4b17      	ldr	r3, [pc, #92]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80041f4:	4b15      	ldr	r3, [pc, #84]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fc:	4b13      	ldr	r3, [pc, #76]	@ (800424c <HAL_SPI_MspInit+0x164>)
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004202:	4812      	ldr	r0, [pc, #72]	@ (800424c <HAL_SPI_MspInit+0x164>)
 8004204:	f000 fcdc 	bl	8004bc0 <HAL_DMA_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800420e:	f7ff fe5b 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a0d      	ldr	r2, [pc, #52]	@ (800424c <HAL_SPI_MspInit+0x164>)
 8004216:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004218:	4a0c      	ldr	r2, [pc, #48]	@ (800424c <HAL_SPI_MspInit+0x164>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	2024      	movs	r0, #36	@ 0x24
 8004224:	f000 fc95 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004228:	2024      	movs	r0, #36	@ 0x24
 800422a:	f000 fcae 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800422e:	bf00      	nop
 8004230:	3728      	adds	r7, #40	@ 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40003800 	.word	0x40003800
 800423c:	40023800 	.word	0x40023800
 8004240:	40020400 	.word	0x40020400
 8004244:	20001390 	.word	0x20001390
 8004248:	40026070 	.word	0x40026070
 800424c:	200013f0 	.word	0x200013f0
 8004250:	40026058 	.word	0x40026058

08004254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	@ 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a65      	ldr	r2, [pc, #404]	@ (8004408 <HAL_UART_MspInit+0x1b4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f040 8092 	bne.w	800439c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	4b63      	ldr	r3, [pc, #396]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	4a62      	ldr	r2, [pc, #392]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 8004282:	f043 0310 	orr.w	r3, r3, #16
 8004286:	6453      	str	r3, [r2, #68]	@ 0x44
 8004288:	4b60      	ldr	r3, [pc, #384]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	4b5c      	ldr	r3, [pc, #368]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	4a5b      	ldr	r2, [pc, #364]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b6:	2312      	movs	r3, #18
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042c2:	2307      	movs	r3, #7
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4619      	mov	r1, r3
 80042cc:	4850      	ldr	r0, [pc, #320]	@ (8004410 <HAL_UART_MspInit+0x1bc>)
 80042ce:	f000 fff3 	bl	80052b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80042d2:	4b50      	ldr	r3, [pc, #320]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042d4:	4a50      	ldr	r2, [pc, #320]	@ (8004418 <HAL_UART_MspInit+0x1c4>)
 80042d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80042d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ec:	4b49      	ldr	r3, [pc, #292]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042f4:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042fa:	4b46      	ldr	r3, [pc, #280]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004300:	4b44      	ldr	r3, [pc, #272]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004306:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800430c:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 800430e:	2200      	movs	r2, #0
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004312:	4840      	ldr	r0, [pc, #256]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 8004314:	f000 fc54 	bl	8004bc0 <HAL_DMA_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800431e:	f7ff fdd3 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a3b      	ldr	r2, [pc, #236]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 8004326:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004328:	4a3a      	ldr	r2, [pc, #232]	@ (8004414 <HAL_UART_MspInit+0x1c0>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800432e:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004330:	4a3b      	ldr	r2, [pc, #236]	@ (8004420 <HAL_UART_MspInit+0x1cc>)
 8004332:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004334:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004336:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800433a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800433c:	4b37      	ldr	r3, [pc, #220]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 800433e:	2240      	movs	r2, #64	@ 0x40
 8004340:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004342:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004348:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 800434a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800434e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004350:	4b32      	ldr	r3, [pc, #200]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004352:	2200      	movs	r2, #0
 8004354:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004356:	4b31      	ldr	r3, [pc, #196]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004358:	2200      	movs	r2, #0
 800435a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800435c:	4b2f      	ldr	r3, [pc, #188]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 800435e:	2200      	movs	r2, #0
 8004360:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004362:	4b2e      	ldr	r3, [pc, #184]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004364:	2200      	movs	r2, #0
 8004366:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004368:	4b2c      	ldr	r3, [pc, #176]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 800436a:	2200      	movs	r2, #0
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800436e:	482b      	ldr	r0, [pc, #172]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004370:	f000 fc26 	bl	8004bc0 <HAL_DMA_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800437a:	f7ff fda5 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a26      	ldr	r2, [pc, #152]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38
 8004384:	4a25      	ldr	r2, [pc, #148]	@ (800441c <HAL_UART_MspInit+0x1c8>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2025      	movs	r0, #37	@ 0x25
 8004390:	f000 fbdf 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004394:	2025      	movs	r0, #37	@ 0x25
 8004396:	f000 fbf8 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800439a:	e030      	b.n	80043fe <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	@ (8004424 <HAL_UART_MspInit+0x1d0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d12b      	bne.n	80043fe <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	4b18      	ldr	r3, [pc, #96]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043b6:	4b15      	ldr	r3, [pc, #84]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b11      	ldr	r3, [pc, #68]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4a10      	ldr	r2, [pc, #64]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_UART_MspInit+0x1b8>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043de:	230c      	movs	r3, #12
 80043e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ea:	2303      	movs	r3, #3
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043ee:	2307      	movs	r3, #7
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f2:	f107 031c 	add.w	r3, r7, #28
 80043f6:	4619      	mov	r1, r3
 80043f8:	4805      	ldr	r0, [pc, #20]	@ (8004410 <HAL_UART_MspInit+0x1bc>)
 80043fa:	f000 ff5d 	bl	80052b8 <HAL_GPIO_Init>
}
 80043fe:	bf00      	nop
 8004400:	3730      	adds	r7, #48	@ 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40011000 	.word	0x40011000
 800440c:	40023800 	.word	0x40023800
 8004410:	40020000 	.word	0x40020000
 8004414:	200014e0 	.word	0x200014e0
 8004418:	40026440 	.word	0x40026440
 800441c:	20001540 	.word	0x20001540
 8004420:	400264b8 	.word	0x400264b8
 8004424:	40004400 	.word	0x40004400

08004428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <NMI_Handler+0x4>

08004430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <HardFault_Handler+0x4>

08004438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <MemManage_Handler+0x4>

08004440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <BusFault_Handler+0x4>

08004448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <UsageFault_Handler+0x4>

08004450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <SysTick_Handler+0x34>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <SysTick_Handler+0x18>
	  Timer1--;
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <SysTick_Handler+0x34>)
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <SysTick_Handler+0x34>)
 8004492:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8004494:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <SysTick_Handler+0x38>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <SysTick_Handler+0x2c>
	  Timer2--;
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <SysTick_Handler+0x38>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <SysTick_Handler+0x38>)
 80044a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a8:	f000 fa34 	bl	8004914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000290 	.word	0x20000290
 80044b4:	20000292 	.word	0x20000292

080044b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80044bc:	4802      	ldr	r0, [pc, #8]	@ (80044c8 <DMA1_Stream3_IRQHandler+0x10>)
 80044be:	f000 fcbf 	bl	8004e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200013f0 	.word	0x200013f0

080044cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80044d0:	4802      	ldr	r0, [pc, #8]	@ (80044dc <DMA1_Stream4_IRQHandler+0x10>)
 80044d2:	f000 fcb5 	bl	8004e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20001390 	.word	0x20001390

080044e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80044e4:	4802      	ldr	r0, [pc, #8]	@ (80044f0 <SPI2_IRQHandler+0x10>)
 80044e6:	f003 fa15 	bl	8007914 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20001338 	.word	0x20001338

080044f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044f8:	4802      	ldr	r0, [pc, #8]	@ (8004504 <USART1_IRQHandler+0x10>)
 80044fa:	f003 fd2d 	bl	8007f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20001450 	.word	0x20001450

08004508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800450c:	4802      	ldr	r0, [pc, #8]	@ (8004518 <DMA2_Stream2_IRQHandler+0x10>)
 800450e:	f000 fc97 	bl	8004e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200014e0 	.word	0x200014e0

0800451c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <DMA2_Stream7_IRQHandler+0x10>)
 8004522:	f000 fc8d 	bl	8004e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20001540 	.word	0x20001540

08004530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_kill>:

int _kill(int pid, int sig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800454a:	f008 fcd7 	bl	800cefc <__errno>
 800454e:	4603      	mov	r3, r0
 8004550:	2216      	movs	r2, #22
 8004552:	601a      	str	r2, [r3, #0]
  return -1;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_exit>:

void _exit (int status)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ffe7 	bl	8004540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <_exit+0x12>

08004576 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e00a      	b.n	800459e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004588:	f3af 8000 	nop.w
 800458c:	4601      	mov	r1, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	60ba      	str	r2, [r7, #8]
 8004594:	b2ca      	uxtb	r2, r1
 8004596:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3301      	adds	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	dbf0      	blt.n	8004588 <_read+0x12>
  }

  return len;
 80045a6:	687b      	ldr	r3, [r7, #4]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e009      	b.n	80045d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	60ba      	str	r2, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fc6a 	bl	8003ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	dbf1      	blt.n	80045c2 <_write+0x12>
  }
  return len;
 80045de:	687b      	ldr	r3, [r7, #4]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_close>:

int _close(int file)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004610:	605a      	str	r2, [r3, #4]
  return 0;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_isatty>:

int _isatty(int file)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <_sbrk+0x5c>)
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <_sbrk+0x60>)
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004664:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <_sbrk+0x64>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <_sbrk+0x64>)
 800466e:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <_sbrk+0x68>)
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004672:	4b10      	ldr	r3, [pc, #64]	@ (80046b4 <_sbrk+0x64>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004680:	f008 fc3c 	bl	800cefc <__errno>
 8004684:	4603      	mov	r3, r0
 8004686:	220c      	movs	r2, #12
 8004688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	e009      	b.n	80046a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004690:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <_sbrk+0x64>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <_sbrk+0x64>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	4a05      	ldr	r2, [pc, #20]	@ (80046b4 <_sbrk+0x64>)
 80046a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20020000 	.word	0x20020000
 80046b0:	00000400 	.word	0x00000400
 80046b4:	200015a4 	.word	0x200015a4
 80046b8:	20001938 	.word	0x20001938

080046bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <SystemInit+0x20>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c6:	4a05      	ldr	r2, [pc, #20]	@ (80046dc <SystemInit+0x20>)
 80046c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <__NVIC_EnableIRQ>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db0b      	blt.n	800470a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	4907      	ldr	r1, [pc, #28]	@ (8004718 <__NVIC_EnableIRQ+0x38>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2001      	movs	r0, #1
 8004702:	fa00 f202 	lsl.w	r2, r0, r2
 8004706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000e100 	.word	0xe000e100

0800471c <pin_init>:
#include "uart_init.h"


void pin_init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
// Enable the USART2 and GPIOA clocks
RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // Enable UART2 clock
 8004720:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <pin_init+0x78>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <pin_init+0x78>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472a:	6413      	str	r3, [r2, #64]	@ 0x40
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;   // Enable GPIOA clock
 800472c:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <pin_init+0x78>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <pin_init+0x78>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6313      	str	r3, [r2, #48]	@ 0x30

// Configure GPIOA pins PA2 and PA3 for USART2 TX and RX functionality
GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2))); // Clear mode for PA2, PA3
 8004738:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <pin_init+0x7c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <pin_init+0x7c>)
 800473e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004742:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));    // Set PA2, PA3 to Alternate Function mode
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <pin_init+0x7c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <pin_init+0x7c>)
 800474a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800474e:	6013      	str	r3, [r2, #0]
GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));   // Set AF7 (UART2) for PA2, PA3
 8004750:	4b11      	ldr	r3, [pc, #68]	@ (8004798 <pin_init+0x7c>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a10      	ldr	r2, [pc, #64]	@ (8004798 <pin_init+0x7c>)
 8004756:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800475a:	6213      	str	r3, [r2, #32]

// Configure USART2 for 9600 baud rate, 8 data bits, no parity, 1 stop bit
USART2->BRR = (24000000 / 9600);                    // Set baud rate (assuming 16 MHz clock)
 800475c:	4b0f      	ldr	r3, [pc, #60]	@ (800479c <pin_init+0x80>)
 800475e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004762:	609a      	str	r2, [r3, #8]
USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;         // Enable USART TX and RX
 8004764:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <pin_init+0x80>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <pin_init+0x80>)
 800476a:	f043 030c 	orr.w	r3, r3, #12
 800476e:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_RXNEIE;                    // Enable RX interrupt
 8004770:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <pin_init+0x80>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a09      	ldr	r2, [pc, #36]	@ (800479c <pin_init+0x80>)
 8004776:	f043 0320 	orr.w	r3, r3, #32
 800477a:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_UE;                        // Enable UART2
 800477c:	4b07      	ldr	r3, [pc, #28]	@ (800479c <pin_init+0x80>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a06      	ldr	r2, [pc, #24]	@ (800479c <pin_init+0x80>)
 8004782:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004786:	60d3      	str	r3, [r2, #12]

// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
 8004788:	2026      	movs	r0, #38	@ 0x26
 800478a:	f7ff ffa9 	bl	80046e0 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40020000 	.word	0x40020000
 800479c:	40004400 	.word	0x40004400

080047a0 <USART2_IRQHandler>:

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 80047a6:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <USART2_IRQHandler+0x38>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <USART2_IRQHandler+0x38>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 80047b8:	bf00      	nop
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <USART2_IRQHandler+0x38>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f9      	beq.n	80047ba <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 80047c6:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <USART2_IRQHandler+0x38>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	6053      	str	r3, [r2, #4]
    }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40004400 	.word	0x40004400

080047dc <uart_send_string>:

void uart_send_string(const char *str) {
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80047e4:	e00c      	b.n	8004800 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 80047e6:	bf00      	nop
 80047e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <uart_send_string+0x3c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f9      	beq.n	80047e8 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <uart_send_string+0x3c>)
 80047fe:	605a      	str	r2, [r3, #4]
    while (*str) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ee      	bne.n	80047e6 <uart_send_string+0xa>
    }
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40004400 	.word	0x40004400

0800481c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800481c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004820:	f7ff ff4c 	bl	80046bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004824:	480c      	ldr	r0, [pc, #48]	@ (8004858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004826:	490d      	ldr	r1, [pc, #52]	@ (800485c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004828:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800482a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800482c:	e002      	b.n	8004834 <LoopCopyDataInit>

0800482e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800482e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004832:	3304      	adds	r3, #4

08004834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004838:	d3f9      	bcc.n	800482e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800483a:	4a0a      	ldr	r2, [pc, #40]	@ (8004864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800483c:	4c0a      	ldr	r4, [pc, #40]	@ (8004868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800483e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004840:	e001      	b.n	8004846 <LoopFillZerobss>

08004842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004844:	3204      	adds	r2, #4

08004846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004848:	d3fb      	bcc.n	8004842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800484a:	f008 fb5d 	bl	800cf08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800484e:	f7ff f87b 	bl	8003948 <main>
  bx  lr    
 8004852:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800485c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8004860:	080104dc 	.word	0x080104dc
  ldr r2, =_sbss
 8004864:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8004868:	20001934 	.word	0x20001934

0800486c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800486c:	e7fe      	b.n	800486c <DMA1_Stream0_IRQHandler>
	...

08004870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004874:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_Init+0x40>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <HAL_Init+0x40>)
 800487a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800487e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_Init+0x40>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <HAL_Init+0x40>)
 8004886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800488a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800488c:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <HAL_Init+0x40>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a07      	ldr	r2, [pc, #28]	@ (80048b0 <HAL_Init+0x40>)
 8004892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004898:	2003      	movs	r0, #3
 800489a:	f000 f94f 	bl	8004b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489e:	2000      	movs	r0, #0
 80048a0:	f000 f808 	bl	80048b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048a4:	f7ff fbb0 	bl	8004008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00

080048b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <HAL_InitTick+0x54>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_InitTick+0x58>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	4619      	mov	r1, r3
 80048c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f967 	bl	8004ba6 <HAL_SYSTICK_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00e      	b.n	8004900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d80a      	bhi.n	80048fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e8:	2200      	movs	r2, #0
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	f000 f92f 	bl	8004b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048f4:	4a06      	ldr	r2, [pc, #24]	@ (8004910 <HAL_InitTick+0x5c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000007c 	.word	0x2000007c
 800490c:	20000084 	.word	0x20000084
 8004910:	20000080 	.word	0x20000080

08004914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004918:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_IncTick+0x20>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_IncTick+0x24>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4413      	add	r3, r2
 8004924:	4a04      	ldr	r2, [pc, #16]	@ (8004938 <HAL_IncTick+0x24>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000084 	.word	0x20000084
 8004938:	200015a8 	.word	0x200015a8

0800493c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return uwTick;
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <HAL_GetTick+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	200015a8 	.word	0x200015a8

08004954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7ff ffee 	bl	800493c <HAL_GetTick>
 8004960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d005      	beq.n	800497a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800496e:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <HAL_Delay+0x44>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800497a:	bf00      	nop
 800497c:	f7ff ffde 	bl	800493c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d8f7      	bhi.n	800497c <HAL_Delay+0x28>
  {
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000084 	.word	0x20000084

0800499c <__NVIC_SetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_GetPriorityGrouping>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4907      	ldr	r1, [pc, #28]	@ (8004a38 <__NVIC_EnableIRQ+0x38>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	@ (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	@ (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	@ 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
         );
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	@ 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b08:	d301      	bcc.n	8004b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e00f      	b.n	8004b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b38 <SysTick_Config+0x40>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b16:	210f      	movs	r1, #15
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f7ff ff8e 	bl	8004a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <SysTick_Config+0x40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <SysTick_Config+0x40>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff29 	bl	800499c <__NVIC_SetPriorityGrouping>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b64:	f7ff ff3e 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff8e 	bl	8004a90 <NVIC_EncodePriority>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5d 	bl	8004a3c <__NVIC_SetPriority>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff31 	bl	8004a00 <__NVIC_EnableIRQ>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ffa2 	bl	8004af8 <SysTick_Config>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7ff feb6 	bl	800493c <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e099      	b.n	8004d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bfc:	e00f      	b.n	8004c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bfe:	f7ff fe9d 	bl	800493c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d908      	bls.n	8004c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2203      	movs	r2, #3
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e078      	b.n	8004d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e8      	bne.n	8004bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <HAL_DMA_Init+0x158>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d107      	bne.n	8004c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	4313      	orrs	r3, r2
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d117      	bne.n	8004ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa7b 	bl	80051c0 <DMA_CheckFifoParam>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2240      	movs	r2, #64	@ 0x40
 8004cd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e016      	b.n	8004d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa32 	bl	8005154 <DMA_CalcBaseAndBitshift>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	223f      	movs	r2, #63	@ 0x3f
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	f010803f 	.word	0xf010803f

08004d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d2a:	f7ff fe07 	bl	800493c <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d008      	beq.n	8004d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2280      	movs	r2, #128	@ 0x80
 8004d40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e052      	b.n	8004df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0216 	bic.w	r2, r2, #22
 8004d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <HAL_DMA_Abort+0x62>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0208 	bic.w	r2, r2, #8
 8004d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9e:	e013      	b.n	8004dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004da0:	f7ff fdcc 	bl	800493c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d90c      	bls.n	8004dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2203      	movs	r2, #3
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e015      	b.n	8004df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e4      	bne.n	8004da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	223f      	movs	r2, #63	@ 0x3f
 8004ddc:	409a      	lsls	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d004      	beq.n	8004e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2280      	movs	r2, #128	@ 0x80
 8004e14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e00c      	b.n	8004e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2205      	movs	r2, #5
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8005088 <HAL_DMA_IRQHandler+0x248>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a8e      	ldr	r2, [pc, #568]	@ (800508c <HAL_DMA_IRQHandler+0x24c>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	0a9b      	lsrs	r3, r3, #10
 8004e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01a      	beq.n	8004eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d013      	beq.n	8004eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	2208      	movs	r2, #8
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f043 0201 	orr.w	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d012      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ece:	2201      	movs	r2, #1
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	f043 0202 	orr.w	r2, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d012      	beq.n	8004f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	2204      	movs	r2, #4
 8004f06:	409a      	lsls	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	f043 0204 	orr.w	r2, r3, #4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d043      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3a:	2210      	movs	r2, #16
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d108      	bne.n	8004f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d024      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
 8004f6e:	e01f      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
 8004f80:	e016      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0208 	bic.w	r2, r2, #8
 8004f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 808f 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8087 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d136      	bne.n	8005058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0216 	bic.w	r2, r2, #22
 8004ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <HAL_DMA_IRQHandler+0x1da>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0208 	bic.w	r2, r2, #8
 8005028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502e:	223f      	movs	r2, #63	@ 0x3f
 8005030:	409a      	lsls	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d07e      	beq.n	800514c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
        }
        return;
 8005056:	e079      	b.n	800514c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01d      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10d      	bne.n	8005090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005078:	2b00      	cmp	r3, #0
 800507a:	d031      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
 8005084:	e02c      	b.n	80050e0 <HAL_DMA_IRQHandler+0x2a0>
 8005086:	bf00      	nop
 8005088:	2000007c 	.word	0x2000007c
 800508c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d023      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e01e      	b.n	80050e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0210 	bic.w	r2, r2, #16
 80050be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d032      	beq.n	800514e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d022      	beq.n	800513a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2205      	movs	r2, #5
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	3301      	adds	r3, #1
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	d307      	bcc.n	8005128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f2      	bne.n	800510c <HAL_DMA_IRQHandler+0x2cc>
 8005126:	e000      	b.n	800512a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
 800514a:	e000      	b.n	800514e <HAL_DMA_IRQHandler+0x30e>
        return;
 800514c:	bf00      	nop
    }
  }
}
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3b10      	subs	r3, #16
 8005164:	4a14      	ldr	r2, [pc, #80]	@ (80051b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800516e:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <DMA_CalcBaseAndBitshift+0x68>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d909      	bls.n	8005196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	659a      	str	r2, [r3, #88]	@ 0x58
 8005194:	e007      	b.n	80051a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	aaaaaaab 	.word	0xaaaaaaab
 80051bc:	0800fcb8 	.word	0x0800fcb8

080051c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11f      	bne.n	800521a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d856      	bhi.n	800528e <DMA_CheckFifoParam+0xce>
 80051e0:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <DMA_CheckFifoParam+0x28>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	0800520b 	.word	0x0800520b
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	0800528f 	.word	0x0800528f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d046      	beq.n	8005292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e043      	b.n	8005292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005212:	d140      	bne.n	8005296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e03d      	b.n	8005296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005222:	d121      	bne.n	8005268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d837      	bhi.n	800529a <DMA_CheckFifoParam+0xda>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <DMA_CheckFifoParam+0x70>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005247 	.word	0x08005247
 8005238:	08005241 	.word	0x08005241
 800523c:	08005259 	.word	0x08005259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	e030      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d025      	beq.n	800529e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005256:	e022      	b.n	800529e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005260:	d11f      	bne.n	80052a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005266:	e01c      	b.n	80052a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d903      	bls.n	8005276 <DMA_CheckFifoParam+0xb6>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d003      	beq.n	800527c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005274:	e018      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      break;
 800527a:	e015      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      break;
 800528c:	e00b      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 800528e:	bf00      	nop
 8005290:	e00a      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005292:	bf00      	nop
 8005294:	e008      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005296:	bf00      	nop
 8005298:	e006      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 800529a:	bf00      	nop
 800529c:	e004      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a6:	bf00      	nop
    }
  } 
  
  return status; 
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	@ 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e159      	b.n	8005588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052d4:	2201      	movs	r2, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	f040 8148 	bne.w	8005582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d005      	beq.n	800530a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005306:	2b02      	cmp	r3, #2
 8005308:	d130      	bne.n	800536c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	2203      	movs	r2, #3
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005340:	2201      	movs	r2, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4013      	ands	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 0201 	and.w	r2, r3, #1
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d017      	beq.n	80053a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	2203      	movs	r2, #3
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d123      	bne.n	80053fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	08da      	lsrs	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3208      	adds	r2, #8
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	220f      	movs	r2, #15
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	08da      	lsrs	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0203 	and.w	r2, r3, #3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a2 	beq.w	8005582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	4b57      	ldr	r3, [pc, #348]	@ (80055a0 <HAL_GPIO_Init+0x2e8>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	4a56      	ldr	r2, [pc, #344]	@ (80055a0 <HAL_GPIO_Init+0x2e8>)
 8005448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800544c:	6453      	str	r3, [r2, #68]	@ 0x44
 800544e:	4b54      	ldr	r3, [pc, #336]	@ (80055a0 <HAL_GPIO_Init+0x2e8>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800545a:	4a52      	ldr	r2, [pc, #328]	@ (80055a4 <HAL_GPIO_Init+0x2ec>)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	3302      	adds	r3, #2
 8005462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4013      	ands	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a49      	ldr	r2, [pc, #292]	@ (80055a8 <HAL_GPIO_Init+0x2f0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d019      	beq.n	80054ba <HAL_GPIO_Init+0x202>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a48      	ldr	r2, [pc, #288]	@ (80055ac <HAL_GPIO_Init+0x2f4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_GPIO_Init+0x1fe>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a47      	ldr	r2, [pc, #284]	@ (80055b0 <HAL_GPIO_Init+0x2f8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00d      	beq.n	80054b2 <HAL_GPIO_Init+0x1fa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a46      	ldr	r2, [pc, #280]	@ (80055b4 <HAL_GPIO_Init+0x2fc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <HAL_GPIO_Init+0x1f6>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a45      	ldr	r2, [pc, #276]	@ (80055b8 <HAL_GPIO_Init+0x300>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <HAL_GPIO_Init+0x1f2>
 80054a6:	2304      	movs	r3, #4
 80054a8:	e008      	b.n	80054bc <HAL_GPIO_Init+0x204>
 80054aa:	2307      	movs	r3, #7
 80054ac:	e006      	b.n	80054bc <HAL_GPIO_Init+0x204>
 80054ae:	2303      	movs	r3, #3
 80054b0:	e004      	b.n	80054bc <HAL_GPIO_Init+0x204>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e002      	b.n	80054bc <HAL_GPIO_Init+0x204>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_GPIO_Init+0x204>
 80054ba:	2300      	movs	r3, #0
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	f002 0203 	and.w	r2, r2, #3
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	4093      	lsls	r3, r2
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054cc:	4935      	ldr	r1, [pc, #212]	@ (80055a4 <HAL_GPIO_Init+0x2ec>)
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	3302      	adds	r3, #2
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054da:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <HAL_GPIO_Init+0x304>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054fe:	4a2f      	ldr	r2, [pc, #188]	@ (80055bc <HAL_GPIO_Init+0x304>)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005504:	4b2d      	ldr	r3, [pc, #180]	@ (80055bc <HAL_GPIO_Init+0x304>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005528:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <HAL_GPIO_Init+0x304>)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800552e:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <HAL_GPIO_Init+0x304>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005552:	4a1a      	ldr	r2, [pc, #104]	@ (80055bc <HAL_GPIO_Init+0x304>)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005558:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <HAL_GPIO_Init+0x304>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800557c:	4a0f      	ldr	r2, [pc, #60]	@ (80055bc <HAL_GPIO_Init+0x304>)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3301      	adds	r3, #1
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	f67f aea2 	bls.w	80052d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	3724      	adds	r7, #36	@ 0x24
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40013800 	.word	0x40013800
 80055a8:	40020000 	.word	0x40020000
 80055ac:	40020400 	.word	0x40020400
 80055b0:	40020800 	.word	0x40020800
 80055b4:	40020c00 	.word	0x40020c00
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40013c00 	.word	0x40013c00

080055c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	887b      	ldrh	r3, [r7, #2]
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
 80055dc:	e001      	b.n	80055e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
 80055fc:	4613      	mov	r3, r2
 80055fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005600:	787b      	ldrb	r3, [r7, #1]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005606:	887a      	ldrh	r2, [r7, #2]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800560c:	e003      	b.n	8005616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	041a      	lsls	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	619a      	str	r2, [r3, #24]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800562e:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800563a:	4a05      	ldr	r2, [pc, #20]	@ (8005650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fe04 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40013c00 	.word	0x40013c00

08005654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e12b      	b.n	80058be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fe fcec 	bl	8004058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2224      	movs	r2, #36	@ 0x24
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056b8:	f001 fd8e 	bl	80071d8 <HAL_RCC_GetPCLK1Freq>
 80056bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4a81      	ldr	r2, [pc, #516]	@ (80058c8 <HAL_I2C_Init+0x274>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d807      	bhi.n	80056d8 <HAL_I2C_Init+0x84>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a80      	ldr	r2, [pc, #512]	@ (80058cc <HAL_I2C_Init+0x278>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	bf94      	ite	ls
 80056d0:	2301      	movls	r3, #1
 80056d2:	2300      	movhi	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e006      	b.n	80056e6 <HAL_I2C_Init+0x92>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4a7d      	ldr	r2, [pc, #500]	@ (80058d0 <HAL_I2C_Init+0x27c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	bf94      	ite	ls
 80056e0:	2301      	movls	r3, #1
 80056e2:	2300      	movhi	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0e7      	b.n	80058be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a78      	ldr	r2, [pc, #480]	@ (80058d4 <HAL_I2C_Init+0x280>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	0c9b      	lsrs	r3, r3, #18
 80056f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a6a      	ldr	r2, [pc, #424]	@ (80058c8 <HAL_I2C_Init+0x274>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d802      	bhi.n	8005728 <HAL_I2C_Init+0xd4>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3301      	adds	r3, #1
 8005726:	e009      	b.n	800573c <HAL_I2C_Init+0xe8>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	4a69      	ldr	r2, [pc, #420]	@ (80058d8 <HAL_I2C_Init+0x284>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	099b      	lsrs	r3, r3, #6
 800573a:	3301      	adds	r3, #1
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	430b      	orrs	r3, r1
 8005742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800574e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	495c      	ldr	r1, [pc, #368]	@ (80058c8 <HAL_I2C_Init+0x274>)
 8005758:	428b      	cmp	r3, r1
 800575a:	d819      	bhi.n	8005790 <HAL_I2C_Init+0x13c>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1e59      	subs	r1, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	fbb1 f3f3 	udiv	r3, r1, r3
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005770:	400b      	ands	r3, r1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_I2C_Init+0x138>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1e59      	subs	r1, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fbb1 f3f3 	udiv	r3, r1, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578a:	e051      	b.n	8005830 <HAL_I2C_Init+0x1dc>
 800578c:	2304      	movs	r3, #4
 800578e:	e04f      	b.n	8005830 <HAL_I2C_Init+0x1dc>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d111      	bne.n	80057bc <HAL_I2C_Init+0x168>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1e58      	subs	r0, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6859      	ldr	r1, [r3, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	440b      	add	r3, r1
 80057a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057aa:	3301      	adds	r3, #1
 80057ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e012      	b.n	80057e2 <HAL_I2C_Init+0x18e>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1e58      	subs	r0, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	0099      	lsls	r1, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d2:	3301      	adds	r3, #1
 80057d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Init+0x196>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e022      	b.n	8005830 <HAL_I2C_Init+0x1dc>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10e      	bne.n	8005810 <HAL_I2C_Init+0x1bc>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1e58      	subs	r0, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	440b      	add	r3, r1
 8005800:	fbb0 f3f3 	udiv	r3, r0, r3
 8005804:	3301      	adds	r3, #1
 8005806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580e:	e00f      	b.n	8005830 <HAL_I2C_Init+0x1dc>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e58      	subs	r0, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	0099      	lsls	r1, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	fbb0 f3f3 	udiv	r3, r0, r3
 8005826:	3301      	adds	r3, #1
 8005828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	6809      	ldr	r1, [r1, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800585e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6911      	ldr	r1, [r2, #16]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68d2      	ldr	r2, [r2, #12]
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	430b      	orrs	r3, r1
 8005872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	000186a0 	.word	0x000186a0
 80058cc:	001e847f 	.word	0x001e847f
 80058d0:	003d08ff 	.word	0x003d08ff
 80058d4:	431bde83 	.word	0x431bde83
 80058d8:	10624dd3 	.word	0x10624dd3

080058dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	461a      	mov	r2, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	817b      	strh	r3, [r7, #10]
 80058ee:	460b      	mov	r3, r1
 80058f0:	813b      	strh	r3, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058f6:	f7ff f821 	bl	800493c <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	f040 80d9 	bne.w	8005abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2319      	movs	r3, #25
 8005910:	2201      	movs	r2, #1
 8005912:	496d      	ldr	r1, [pc, #436]	@ (8005ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fdb9 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
 8005922:	e0cc      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_I2C_Mem_Write+0x56>
 800592e:	2302      	movs	r3, #2
 8005930:	e0c5      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d007      	beq.n	8005958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2221      	movs	r2, #33	@ 0x21
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2240      	movs	r2, #64	@ 0x40
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a4d      	ldr	r2, [pc, #308]	@ (8005acc <HAL_I2C_Mem_Write+0x1f0>)
 8005998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800599a:	88f8      	ldrh	r0, [r7, #6]
 800599c:	893a      	ldrh	r2, [r7, #8]
 800599e:	8979      	ldrh	r1, [r7, #10]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	4603      	mov	r3, r0
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fbf0 	bl	8006190 <I2C_RequestMemoryWrite>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d052      	beq.n	8005a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e081      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fe7e 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d107      	bne.n	80059e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e06b      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d11b      	bne.n	8005a5c <HAL_I2C_Mem_Write+0x180>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1aa      	bne.n	80059ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fe71 	bl	8006750 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d107      	bne.n	8005a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e016      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	00100002 	.word	0x00100002
 8005acc:	ffff0000 	.word	0xffff0000

08005ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08c      	sub	sp, #48	@ 0x30
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	4608      	mov	r0, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	817b      	strh	r3, [r7, #10]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	813b      	strh	r3, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aea:	f7fe ff27 	bl	800493c <HAL_GetTick>
 8005aee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	f040 8214 	bne.w	8005f26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2319      	movs	r3, #25
 8005b04:	2201      	movs	r2, #1
 8005b06:	497b      	ldr	r1, [pc, #492]	@ (8005cf4 <HAL_I2C_Mem_Read+0x224>)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fcbf 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b14:	2302      	movs	r3, #2
 8005b16:	e207      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_Mem_Read+0x56>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e200      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d007      	beq.n	8005b4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2222      	movs	r2, #34	@ 0x22
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2240      	movs	r2, #64	@ 0x40
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf8 <HAL_I2C_Mem_Read+0x228>)
 8005b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b8e:	88f8      	ldrh	r0, [r7, #6]
 8005b90:	893a      	ldrh	r2, [r7, #8]
 8005b92:	8979      	ldrh	r1, [r7, #10]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fb8c 	bl	80062bc <I2C_RequestMemoryRead>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e1bc      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e190      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d11b      	bne.n	8005c1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e170      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d11b      	bne.n	8005c5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	e150      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c74:	e144      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	f200 80f1 	bhi.w	8005e62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d123      	bne.n	8005cd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fda7 	bl	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e145      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cce:	e117      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d14e      	bne.n	8005d76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4906      	ldr	r1, [pc, #24]	@ (8005cfc <HAL_I2C_Mem_Read+0x22c>)
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fbd2 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e11a      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
 8005cf2:	bf00      	nop
 8005cf4:	00100002 	.word	0x00100002
 8005cf8:	ffff0000 	.word	0xffff0000
 8005cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d74:	e0c4      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	496c      	ldr	r1, [pc, #432]	@ (8005f30 <HAL_I2C_Mem_Read+0x460>)
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fb83 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0cb      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4955      	ldr	r1, [pc, #340]	@ (8005f30 <HAL_I2C_Mem_Read+0x460>)
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fb55 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e09d      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e60:	e04e      	b.n	8005f00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fcba 	bl	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e058      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d124      	bne.n	8005f00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ecc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f aeb6 	bne.w	8005c76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e000      	b.n	8005f28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f26:	2302      	movs	r3, #2
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3728      	adds	r7, #40	@ 0x28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	00010004 	.word	0x00010004

08005f34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	460b      	mov	r3, r1
 8005f42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f44:	f7fe fcfa 	bl	800493c <HAL_GetTick>
 8005f48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	f040 8111 	bne.w	800617e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2319      	movs	r3, #25
 8005f62:	2201      	movs	r2, #1
 8005f64:	4988      	ldr	r1, [pc, #544]	@ (8006188 <HAL_I2C_IsDeviceReady+0x254>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fa90 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
 8005f74:	e104      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_I2C_IsDeviceReady+0x50>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0fd      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d007      	beq.n	8005faa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2224      	movs	r2, #36	@ 0x24
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a70      	ldr	r2, [pc, #448]	@ (800618c <HAL_I2C_IsDeviceReady+0x258>)
 8005fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fa4e 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006004:	d103      	bne.n	800600e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800600c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e0b6      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006020:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006022:	f7fe fc8b 	bl	800493c <HAL_GetTick>
 8006026:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006056:	e025      	b.n	80060a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006058:	f7fe fc70 	bl	800493c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <HAL_I2C_IsDeviceReady+0x13a>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	22a0      	movs	r2, #160	@ 0xa0
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80060ae:	d005      	beq.n	80060bc <HAL_I2C_IsDeviceReady+0x188>
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_I2C_IsDeviceReady+0x188>
 80060b6:	7dbb      	ldrb	r3, [r7, #22]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0cd      	beq.n	8006058 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d129      	bne.n	8006126 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e2:	2300      	movs	r3, #0
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2319      	movs	r3, #25
 80060fe:	2201      	movs	r2, #1
 8006100:	4921      	ldr	r1, [pc, #132]	@ (8006188 <HAL_I2C_IsDeviceReady+0x254>)
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f9c2 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e036      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e02c      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006134:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800613e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2319      	movs	r3, #25
 8006146:	2201      	movs	r2, #1
 8006148:	490f      	ldr	r1, [pc, #60]	@ (8006188 <HAL_I2C_IsDeviceReady+0x254>)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f99e 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e012      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	3301      	adds	r3, #1
 800615e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	f4ff af32 	bcc.w	8005fce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800617e:	2302      	movs	r3, #2
  }
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	00100002 	.word	0x00100002
 800618c:	ffff0000 	.word	0xffff0000

08006190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f960 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e0:	d103      	bne.n	80061ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e05f      	b.n	80062ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	6a3a      	ldr	r2, [r7, #32]
 8006202:	492d      	ldr	r1, [pc, #180]	@ (80062b8 <I2C_RequestMemoryWrite+0x128>)
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f9bb 	bl	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e04c      	b.n	80062ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa46 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e02b      	b.n	80062ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800625c:	893b      	ldrh	r3, [r7, #8]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	611a      	str	r2, [r3, #16]
 8006266:	e021      	b.n	80062ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006268:	893b      	ldrh	r3, [r7, #8]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	b29b      	uxth	r3, r3
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006278:	6a39      	ldr	r1, [r7, #32]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fa20 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	2b04      	cmp	r3, #4
 800628c:	d107      	bne.n	800629e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e005      	b.n	80062ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062a2:	893b      	ldrh	r3, [r7, #8]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	00010002 	.word	0x00010002

080062bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	817b      	strh	r3, [r7, #10]
 80062ce:	460b      	mov	r3, r1
 80062d0:	813b      	strh	r3, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8c2 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631c:	d103      	bne.n	8006326 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006324:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e0aa      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	4952      	ldr	r1, [pc, #328]	@ (8006488 <I2C_RequestMemoryRead+0x1cc>)
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f91d 	bl	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e097      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f9a8 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800638c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e076      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d105      	bne.n	80063a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006398:	893b      	ldrh	r3, [r7, #8]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	611a      	str	r2, [r3, #16]
 80063a2:	e021      	b.n	80063e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063a4:	893b      	ldrh	r3, [r7, #8]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b4:	6a39      	ldr	r1, [r7, #32]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f982 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d107      	bne.n	80063da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e050      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063de:	893b      	ldrh	r3, [r7, #8]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ea:	6a39      	ldr	r1, [r7, #32]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f967 	bl	80066c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d107      	bne.n	8006410 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800640e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e035      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006422:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	2200      	movs	r2, #0
 800642c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f82b 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00d      	beq.n	8006458 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800644a:	d103      	bne.n	8006454 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e013      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006458:	897b      	ldrh	r3, [r7, #10]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	4906      	ldr	r1, [pc, #24]	@ (8006488 <I2C_RequestMemoryRead+0x1cc>)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f886 	bl	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	00010002 	.word	0x00010002

0800648c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649c:	e048      	b.n	8006530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d044      	beq.n	8006530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fe fa49 	bl	800493c <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d139      	bne.n	8006530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	0c1b      	lsrs	r3, r3, #16
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10d      	bne.n	80064e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	43da      	mvns	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	e00c      	b.n	80064fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	43da      	mvns	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d116      	bne.n	8006530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e023      	b.n	8006578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	0c1b      	lsrs	r3, r3, #16
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10d      	bne.n	8006556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	43da      	mvns	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4013      	ands	r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	e00c      	b.n	8006570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	43da      	mvns	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4013      	ands	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	429a      	cmp	r2, r3
 8006574:	d093      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800658e:	e071      	b.n	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659e:	d123      	bne.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	f043 0204 	orr.w	r2, r3, #4
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e067      	b.n	80066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d041      	beq.n	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f0:	f7fe f9a4 	bl	800493c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d136      	bne.n	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10c      	bne.n	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	43da      	mvns	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e00b      	b.n	8006642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	43da      	mvns	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4013      	ands	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e021      	b.n	80066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10c      	bne.n	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	43da      	mvns	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	e00b      	b.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	43da      	mvns	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af6d 	bne.w	8006590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066cc:	e034      	b.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f8e3 	bl	800689a <I2C_IsAcknowledgeFailed>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e034      	b.n	8006748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d028      	beq.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e6:	f7fe f929 	bl	800493c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11d      	bne.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b80      	cmp	r3, #128	@ 0x80
 8006708:	d016      	beq.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e007      	b.n	8006748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006742:	2b80      	cmp	r3, #128	@ 0x80
 8006744:	d1c3      	bne.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800675c:	e034      	b.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f89b 	bl	800689a <I2C_IsAcknowledgeFailed>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e034      	b.n	80067d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d028      	beq.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fe f8e1 	bl	800493c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11d      	bne.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d016      	beq.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e007      	b.n	80067d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d1c3      	bne.n	800675e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067ec:	e049      	b.n	8006882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d119      	bne.n	8006830 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0210 	mvn.w	r2, #16
 8006804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e030      	b.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006830:	f7fe f884 	bl	800493c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d302      	bcc.n	8006846 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d11d      	bne.n	8006882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b40      	cmp	r3, #64	@ 0x40
 8006852:	d016      	beq.n	8006882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e007      	b.n	8006892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688c:	2b40      	cmp	r3, #64	@ 0x40
 800688e:	d1ae      	bne.n	80067ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b0:	d11b      	bne.n	80068ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f043 0204 	orr.w	r2, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e267      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d075      	beq.n	8006a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006916:	4b88      	ldr	r3, [pc, #544]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b04      	cmp	r3, #4
 8006920:	d00c      	beq.n	800693c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006922:	4b85      	ldr	r3, [pc, #532]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800692a:	2b08      	cmp	r3, #8
 800692c:	d112      	bne.n	8006954 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800692e:	4b82      	ldr	r3, [pc, #520]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800693a:	d10b      	bne.n	8006954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800693c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d05b      	beq.n	8006a00 <HAL_RCC_OscConfig+0x108>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d157      	bne.n	8006a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e242      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695c:	d106      	bne.n	800696c <HAL_RCC_OscConfig+0x74>
 800695e:	4b76      	ldr	r3, [pc, #472]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a75      	ldr	r2, [pc, #468]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e01d      	b.n	80069a8 <HAL_RCC_OscConfig+0xb0>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006974:	d10c      	bne.n	8006990 <HAL_RCC_OscConfig+0x98>
 8006976:	4b70      	ldr	r3, [pc, #448]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a6f      	ldr	r2, [pc, #444]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 800697c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4b6d      	ldr	r3, [pc, #436]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6c      	ldr	r2, [pc, #432]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e00b      	b.n	80069a8 <HAL_RCC_OscConfig+0xb0>
 8006990:	4b69      	ldr	r3, [pc, #420]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a68      	ldr	r2, [pc, #416]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4b66      	ldr	r3, [pc, #408]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a65      	ldr	r2, [pc, #404]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 80069a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d013      	beq.n	80069d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b0:	f7fd ffc4 	bl	800493c <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b8:	f7fd ffc0 	bl	800493c <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e207      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f0      	beq.n	80069b8 <HAL_RCC_OscConfig+0xc0>
 80069d6:	e014      	b.n	8006a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d8:	f7fd ffb0 	bl	800493c <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e0:	f7fd ffac 	bl	800493c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b64      	cmp	r3, #100	@ 0x64
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e1f3      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f2:	4b51      	ldr	r3, [pc, #324]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0xe8>
 80069fe:	e000      	b.n	8006a02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d063      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1a:	4b47      	ldr	r3, [pc, #284]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d11c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a26:	4b44      	ldr	r3, [pc, #272]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d116      	bne.n	8006a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a32:	4b41      	ldr	r3, [pc, #260]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_RCC_OscConfig+0x152>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d001      	beq.n	8006a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e1c7      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4937      	ldr	r1, [pc, #220]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a5e:	e03a      	b.n	8006ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d020      	beq.n	8006aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a68:	4b34      	ldr	r3, [pc, #208]	@ (8006b3c <HAL_RCC_OscConfig+0x244>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6e:	f7fd ff65 	bl	800493c <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a76:	f7fd ff61 	bl	800493c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e1a8      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a88:	4b2b      	ldr	r3, [pc, #172]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f0      	beq.n	8006a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a94:	4b28      	ldr	r3, [pc, #160]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4925      	ldr	r1, [pc, #148]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]
 8006aa8:	e015      	b.n	8006ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aaa:	4b24      	ldr	r3, [pc, #144]	@ (8006b3c <HAL_RCC_OscConfig+0x244>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fd ff44 	bl	800493c <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab8:	f7fd ff40 	bl	800493c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e187      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d036      	beq.n	8006b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d016      	beq.n	8006b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aea:	4b15      	ldr	r3, [pc, #84]	@ (8006b40 <HAL_RCC_OscConfig+0x248>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af0:	f7fd ff24 	bl	800493c <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af8:	f7fd ff20 	bl	800493c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e167      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCC_OscConfig+0x200>
 8006b16:	e01b      	b.n	8006b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b18:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <HAL_RCC_OscConfig+0x248>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1e:	f7fd ff0d 	bl	800493c <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b24:	e00e      	b.n	8006b44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b26:	f7fd ff09 	bl	800493c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d907      	bls.n	8006b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e150      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	42470000 	.word	0x42470000
 8006b40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b44:	4b88      	ldr	r3, [pc, #544]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1ea      	bne.n	8006b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8097 	beq.w	8006c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b62:	4b81      	ldr	r3, [pc, #516]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10f      	bne.n	8006b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	4b7d      	ldr	r3, [pc, #500]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	4a7c      	ldr	r2, [pc, #496]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8e:	4b77      	ldr	r3, [pc, #476]	@ (8006d6c <HAL_RCC_OscConfig+0x474>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d118      	bne.n	8006bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b9a:	4b74      	ldr	r3, [pc, #464]	@ (8006d6c <HAL_RCC_OscConfig+0x474>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a73      	ldr	r2, [pc, #460]	@ (8006d6c <HAL_RCC_OscConfig+0x474>)
 8006ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba6:	f7fd fec9 	bl	800493c <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bae:	f7fd fec5 	bl	800493c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e10c      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8006d6c <HAL_RCC_OscConfig+0x474>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d106      	bne.n	8006be2 <HAL_RCC_OscConfig+0x2ea>
 8006bd4:	4b64      	ldr	r3, [pc, #400]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd8:	4a63      	ldr	r2, [pc, #396]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be0:	e01c      	b.n	8006c1c <HAL_RCC_OscConfig+0x324>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x30c>
 8006bea:	4b5f      	ldr	r3, [pc, #380]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bee:	4a5e      	ldr	r2, [pc, #376]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	f043 0304 	orr.w	r3, r3, #4
 8006bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c02:	e00b      	b.n	8006c1c <HAL_RCC_OscConfig+0x324>
 8006c04:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c08:	4a57      	ldr	r2, [pc, #348]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c10:	4b55      	ldr	r3, [pc, #340]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c14:	4a54      	ldr	r2, [pc, #336]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c16:	f023 0304 	bic.w	r3, r3, #4
 8006c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d015      	beq.n	8006c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fd fe8a 	bl	800493c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2c:	f7fd fe86 	bl	800493c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e0cb      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c42:	4b49      	ldr	r3, [pc, #292]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ee      	beq.n	8006c2c <HAL_RCC_OscConfig+0x334>
 8006c4e:	e014      	b.n	8006c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c50:	f7fd fe74 	bl	800493c <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c58:	f7fd fe70 	bl	800493c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e0b5      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1ee      	bne.n	8006c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c80:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	4a38      	ldr	r2, [pc, #224]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80a1 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c96:	4b34      	ldr	r3, [pc, #208]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d05c      	beq.n	8006d5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d141      	bne.n	8006d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006caa:	4b31      	ldr	r3, [pc, #196]	@ (8006d70 <HAL_RCC_OscConfig+0x478>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fd fe44 	bl	800493c <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb8:	f7fd fe40 	bl	800493c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e087      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cca:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69da      	ldr	r2, [r3, #28]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce4:	019b      	lsls	r3, r3, #6
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	491b      	ldr	r1, [pc, #108]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d00:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <HAL_RCC_OscConfig+0x478>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d06:	f7fd fe19 	bl	800493c <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0e:	f7fd fe15 	bl	800493c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e05c      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d20:	4b11      	ldr	r3, [pc, #68]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x416>
 8006d2c:	e054      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_RCC_OscConfig+0x478>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d34:	f7fd fe02 	bl	800493c <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d3c:	f7fd fdfe 	bl	800493c <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e045      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4e:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <HAL_RCC_OscConfig+0x470>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x444>
 8006d5a:	e03d      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e038      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d74:	4b1b      	ldr	r3, [pc, #108]	@ (8006de4 <HAL_RCC_OscConfig+0x4ec>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d028      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d121      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d11a      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006da4:	4013      	ands	r3, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d111      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800

08006de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0cc      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b68      	ldr	r3, [pc, #416]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d90c      	bls.n	8006e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b65      	ldr	r3, [pc, #404]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b63      	ldr	r3, [pc, #396]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0b8      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d020      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e3c:	4b59      	ldr	r3, [pc, #356]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a58      	ldr	r2, [pc, #352]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e54:	4b53      	ldr	r3, [pc, #332]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4a52      	ldr	r2, [pc, #328]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e60:	4b50      	ldr	r3, [pc, #320]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	494d      	ldr	r1, [pc, #308]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d044      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d107      	bne.n	8006e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e86:	4b47      	ldr	r3, [pc, #284]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d119      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e07f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e06f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e067      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ec6:	4b37      	ldr	r3, [pc, #220]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f023 0203 	bic.w	r2, r3, #3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4934      	ldr	r1, [pc, #208]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed8:	f7fd fd30 	bl	800493c <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	e00a      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee0:	f7fd fd2c 	bl	800493c <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e04f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 020c 	and.w	r2, r3, #12
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d1eb      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f08:	4b25      	ldr	r3, [pc, #148]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d20c      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e032      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f3c:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4916      	ldr	r1, [pc, #88]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f5a:	4b12      	ldr	r3, [pc, #72]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	490e      	ldr	r1, [pc, #56]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f6e:	f000 f821 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006f72:	4602      	mov	r2, r0
 8006f74:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	091b      	lsrs	r3, r3, #4
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	490a      	ldr	r1, [pc, #40]	@ (8006fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f80:	5ccb      	ldrb	r3, [r1, r3]
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	4a09      	ldr	r2, [pc, #36]	@ (8006fac <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fd fc90 	bl	80048b4 <HAL_InitTick>

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023c00 	.word	0x40023c00
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	0800fca0 	.word	0x0800fca0
 8006fac:	2000007c 	.word	0x2000007c
 8006fb0:	20000080 	.word	0x20000080

08006fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb8:	b094      	sub	sp, #80	@ 0x50
 8006fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fcc:	4b79      	ldr	r3, [pc, #484]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 030c 	and.w	r3, r3, #12
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d00d      	beq.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	f200 80e1 	bhi.w	80071a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d003      	beq.n	8006fee <HAL_RCC_GetSysClockFreq+0x3a>
 8006fe6:	e0db      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fe8:	4b73      	ldr	r3, [pc, #460]	@ (80071b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fec:	e0db      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fee:	4b73      	ldr	r3, [pc, #460]	@ (80071bc <HAL_RCC_GetSysClockFreq+0x208>)
 8006ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ff2:	e0d8      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d063      	beq.n	80070d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700a:	4b6a      	ldr	r3, [pc, #424]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	099b      	lsrs	r3, r3, #6
 8007010:	2200      	movs	r2, #0
 8007012:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007014:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
 800701e:	2300      	movs	r3, #0
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
 8007022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007026:	4622      	mov	r2, r4
 8007028:	462b      	mov	r3, r5
 800702a:	f04f 0000 	mov.w	r0, #0
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	0159      	lsls	r1, r3, #5
 8007034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007038:	0150      	lsls	r0, r2, #5
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4621      	mov	r1, r4
 8007040:	1a51      	subs	r1, r2, r1
 8007042:	6139      	str	r1, [r7, #16]
 8007044:	4629      	mov	r1, r5
 8007046:	eb63 0301 	sbc.w	r3, r3, r1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007058:	4659      	mov	r1, fp
 800705a:	018b      	lsls	r3, r1, #6
 800705c:	4651      	mov	r1, sl
 800705e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007062:	4651      	mov	r1, sl
 8007064:	018a      	lsls	r2, r1, #6
 8007066:	4651      	mov	r1, sl
 8007068:	ebb2 0801 	subs.w	r8, r2, r1
 800706c:	4659      	mov	r1, fp
 800706e:	eb63 0901 	sbc.w	r9, r3, r1
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800707e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007086:	4690      	mov	r8, r2
 8007088:	4699      	mov	r9, r3
 800708a:	4623      	mov	r3, r4
 800708c:	eb18 0303 	adds.w	r3, r8, r3
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	462b      	mov	r3, r5
 8007094:	eb49 0303 	adc.w	r3, r9, r3
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070a6:	4629      	mov	r1, r5
 80070a8:	024b      	lsls	r3, r1, #9
 80070aa:	4621      	mov	r1, r4
 80070ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070b0:	4621      	mov	r1, r4
 80070b2:	024a      	lsls	r2, r1, #9
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ba:	2200      	movs	r2, #0
 80070bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070c4:	f7f9 fd78 	bl	8000bb8 <__aeabi_uldivmod>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4613      	mov	r3, r2
 80070ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070d0:	e058      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d2:	4b38      	ldr	r3, [pc, #224]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	2200      	movs	r2, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	4611      	mov	r1, r2
 80070de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070e2:	623b      	str	r3, [r7, #32]
 80070e4:	2300      	movs	r3, #0
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	f04f 0000 	mov.w	r0, #0
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	0159      	lsls	r1, r3, #5
 80070fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070fe:	0150      	lsls	r0, r2, #5
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4641      	mov	r1, r8
 8007106:	ebb2 0a01 	subs.w	sl, r2, r1
 800710a:	4649      	mov	r1, r9
 800710c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800711c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007124:	ebb2 040a 	subs.w	r4, r2, sl
 8007128:	eb63 050b 	sbc.w	r5, r3, fp
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	00eb      	lsls	r3, r5, #3
 8007136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800713a:	00e2      	lsls	r2, r4, #3
 800713c:	4614      	mov	r4, r2
 800713e:	461d      	mov	r5, r3
 8007140:	4643      	mov	r3, r8
 8007142:	18e3      	adds	r3, r4, r3
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	464b      	mov	r3, r9
 8007148:	eb45 0303 	adc.w	r3, r5, r3
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800715a:	4629      	mov	r1, r5
 800715c:	028b      	lsls	r3, r1, #10
 800715e:	4621      	mov	r1, r4
 8007160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007164:	4621      	mov	r1, r4
 8007166:	028a      	lsls	r2, r1, #10
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716e:	2200      	movs	r2, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	61fa      	str	r2, [r7, #28]
 8007174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007178:	f7f9 fd1e 	bl	8000bb8 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4613      	mov	r3, r2
 8007182:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007184:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	3301      	adds	r3, #1
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800719e:	e002      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071a0:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80071a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3750      	adds	r7, #80	@ 0x50
 80071ac:	46bd      	mov	sp, r7
 80071ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b2:	bf00      	nop
 80071b4:	40023800 	.word	0x40023800
 80071b8:	00f42400 	.word	0x00f42400
 80071bc:	007a1200 	.word	0x007a1200

080071c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c4:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071c6:	681b      	ldr	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000007c 	.word	0x2000007c

080071d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071dc:	f7ff fff0 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	0a9b      	lsrs	r3, r3, #10
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	4903      	ldr	r1, [pc, #12]	@ (80071fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ee:	5ccb      	ldrb	r3, [r1, r3]
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40023800 	.word	0x40023800
 80071fc:	0800fcb0 	.word	0x0800fcb0

08007200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007204:	f7ff ffdc 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8007208:	4602      	mov	r2, r0
 800720a:	4b05      	ldr	r3, [pc, #20]	@ (8007220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	0b5b      	lsrs	r3, r3, #13
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	4903      	ldr	r1, [pc, #12]	@ (8007224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007216:	5ccb      	ldrb	r3, [r1, r3]
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40023800 	.word	0x40023800
 8007224:	0800fcb0 	.word	0x0800fcb0

08007228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e07b      	b.n	8007332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724a:	d009      	beq.n	8007260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	61da      	str	r2, [r3, #28]
 8007252:	e005      	b.n	8007260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fc ff34 	bl	80040e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e4:	ea42 0103 	orr.w	r1, r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	0c1b      	lsrs	r3, r3, #16
 80072fe:	f003 0104 	and.w	r1, r3, #4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	f003 0210 	and.w	r2, r3, #16
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b088      	sub	sp, #32
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800734a:	f7fd faf7 	bl	800493c <HAL_GetTick>
 800734e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007350:	88fb      	ldrh	r3, [r7, #6]
 8007352:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
 8007362:	e12a      	b.n	80075ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_SPI_Transmit+0x36>
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e122      	b.n	80075ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_SPI_Transmit+0x48>
 800737e:	2302      	movs	r3, #2
 8007380:	e11b      	b.n	80075ba <HAL_SPI_Transmit+0x280>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2203      	movs	r2, #3
 800738e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	88fa      	ldrh	r2, [r7, #6]
 80073a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d0:	d10f      	bne.n	80073f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fc:	2b40      	cmp	r3, #64	@ 0x40
 80073fe:	d007      	beq.n	8007410 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007418:	d152      	bne.n	80074c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Transmit+0xee>
 8007422:	8b7b      	ldrh	r3, [r7, #26]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d145      	bne.n	80074b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800744c:	e032      	b.n	80074b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d112      	bne.n	8007482 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007460:	881a      	ldrh	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	1c9a      	adds	r2, r3, #2
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007480:	e018      	b.n	80074b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007482:	f7fd fa5b 	bl	800493c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d803      	bhi.n	800749a <HAL_SPI_Transmit+0x160>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d102      	bne.n	80074a0 <HAL_SPI_Transmit+0x166>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e082      	b.n	80075ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1c7      	bne.n	800744e <HAL_SPI_Transmit+0x114>
 80074be:	e053      	b.n	8007568 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_Transmit+0x194>
 80074c8:	8b7b      	ldrh	r3, [r7, #26]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d147      	bne.n	800755e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074f4:	e033      	b.n	800755e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d113      	bne.n	800752c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	86da      	strh	r2, [r3, #54]	@ 0x36
 800752a:	e018      	b.n	800755e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752c:	f7fd fa06 	bl	800493c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d803      	bhi.n	8007544 <HAL_SPI_Transmit+0x20a>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d102      	bne.n	800754a <HAL_SPI_Transmit+0x210>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e02d      	b.n	80075ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1c6      	bne.n	80074f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fb6b 	bl	8007c48 <SPI_EndRxTxTransaction>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2220      	movs	r2, #32
 800757c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80075b8:	2300      	movs	r3, #0
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08a      	sub	sp, #40	@ 0x28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075d0:	2301      	movs	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d4:	f7fd f9b2 	bl	800493c <HAL_GetTick>
 80075d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ec:	7ffb      	ldrb	r3, [r7, #31]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d00c      	beq.n	800760c <HAL_SPI_TransmitReceive+0x4a>
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f8:	d106      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x46>
 8007602:	7ffb      	ldrb	r3, [r7, #31]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d001      	beq.n	800760c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	e17f      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_SPI_TransmitReceive+0x5c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_TransmitReceive+0x5c>
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e174      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_SPI_TransmitReceive+0x6e>
 800762c:	2302      	movs	r3, #2
 800762e:	e16d      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b04      	cmp	r3, #4
 8007642:	d003      	beq.n	800764c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2205      	movs	r2, #5
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	887a      	ldrh	r2, [r7, #2]
 800766e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	887a      	ldrh	r2, [r7, #2]
 8007674:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768c:	2b40      	cmp	r3, #64	@ 0x40
 800768e:	d007      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800769e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a8:	d17e      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0xf6>
 80076b2:	8afb      	ldrh	r3, [r7, #22]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d16c      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	881a      	ldrh	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c8:	1c9a      	adds	r2, r3, #2
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076dc:	e059      	b.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d11b      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x162>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x162>
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d113      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	1c9a      	adds	r2, r3, #2
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d119      	bne.n	8007766 <HAL_SPI_TransmitReceive+0x1a4>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d014      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	b292      	uxth	r2, r2
 8007748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	1c9a      	adds	r2, r3, #2
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007762:	2301      	movs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007766:	f7fd f8e9 	bl	800493c <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007772:	429a      	cmp	r2, r3
 8007774:	d80d      	bhi.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d009      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e0bc      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1a0      	bne.n	80076de <HAL_SPI_TransmitReceive+0x11c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d19b      	bne.n	80076de <HAL_SPI_TransmitReceive+0x11c>
 80077a6:	e082      	b.n	80078ae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x1f4>
 80077b0:	8afb      	ldrh	r3, [r7, #22]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d171      	bne.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077dc:	e05d      	b.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d11c      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x264>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d017      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x264>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d114      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d119      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x2a6>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d014      	beq.n	8007868 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007864:	2301      	movs	r3, #1
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007868:	f7fd f868 	bl	800493c <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007874:	429a      	cmp	r2, r3
 8007876:	d803      	bhi.n	8007880 <HAL_SPI_TransmitReceive+0x2be>
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d102      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x2c4>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e038      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d19c      	bne.n	80077de <HAL_SPI_TransmitReceive+0x21c>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d197      	bne.n	80077de <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f9c8 	bl	8007c48 <SPI_EndRxTxTransaction>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e01d      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800790a:	2300      	movs	r3, #0
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	@ 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
    return;
 8007952:	e0ce      	b.n	8007af2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <HAL_SPI_IRQHandler+0x5e>
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
    return;
 8007970:	e0bf      	b.n	8007af2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <HAL_SPI_IRQHandler+0x7e>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d105      	bne.n	8007992 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80b0 	beq.w	8007af2 <HAL_SPI_IRQHandler+0x1de>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80aa 	beq.w	8007af2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d023      	beq.n	80079f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d011      	beq.n	80079d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b8:	f043 0204 	orr.w	r2, r3, #4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	e00b      	b.n	80079f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079d8:	2300      	movs	r3, #0
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
        return;
 80079ee:	e080      	b.n	8007af2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	f043 0201 	orr.w	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a32:	f043 0208 	orr.w	r2, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d04f      	beq.n	8007af0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a5e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <HAL_SPI_IRQHandler+0x168>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d034      	beq.n	8007ae6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0203 	bic.w	r2, r2, #3
 8007a8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d011      	beq.n	8007ab8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a98:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <HAL_SPI_IRQHandler+0x1e4>)
 8007a9a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd f9ab 	bl	8004dfc <HAL_DMA_Abort_IT>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d016      	beq.n	8007aee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8007af8 <HAL_SPI_IRQHandler+0x1e4>)
 8007ac6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fd f995 	bl	8004dfc <HAL_DMA_Abort_IT>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007adc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007ae4:	e003      	b.n	8007aee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f808 	bl	8007afc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007aec:	e000      	b.n	8007af0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007aee:	bf00      	nop
    return;
 8007af0:	bf00      	nop
  }
}
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	08007b11 	.word	0x08007b11

08007afc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff ffe6 	bl	8007afc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b48:	f7fc fef8 	bl	800493c <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b58:	f7fc fef0 	bl	800493c <HAL_GetTick>
 8007b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b5e:	4b39      	ldr	r3, [pc, #228]	@ (8007c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	015b      	lsls	r3, r3, #5
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6e:	e054      	b.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d050      	beq.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b78:	f7fc fee0 	bl	800493c <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d13d      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba6:	d111      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bb0:	d004      	beq.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bba:	d107      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd4:	d10f      	bne.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e017      	b.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d19b      	bne.n	8007b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	2000007c 	.word	0x2000007c

08007c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff6a 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e032      	b.n	8007ce0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce8 <SPI_EndRxTxTransaction+0xa0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cec <SPI_EndRxTxTransaction+0xa4>)
 8007c80:	fba2 2303 	umull	r2, r3, r2, r3
 8007c84:	0d5b      	lsrs	r3, r3, #21
 8007c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c98:	d112      	bne.n	8007cc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2180      	movs	r1, #128	@ 0x80
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff ff47 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d016      	beq.n	8007cde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb4:	f043 0220 	orr.w	r2, r3, #32
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e00f      	b.n	8007ce0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd6:	2b80      	cmp	r3, #128	@ 0x80
 8007cd8:	d0f2      	beq.n	8007cc0 <SPI_EndRxTxTransaction+0x78>
 8007cda:	e000      	b.n	8007cde <SPI_EndRxTxTransaction+0x96>
        break;
 8007cdc:	bf00      	nop
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	2000007c 	.word	0x2000007c
 8007cec:	165e9f81 	.word	0x165e9f81

08007cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e042      	b.n	8007d88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fc fa9c 	bl	8004254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2224      	movs	r2, #36	@ 0x24
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fdb7 	bl	80088a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e04a      	b.n	8007e38 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fc fa4c 	bl	8004254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2224      	movs	r2, #36	@ 0x24
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fd67 	bl	80088a8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695a      	ldr	r2, [r3, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8007df8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0208 	orr.w	r2, r2, #8
 8007e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	@ 0x28
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d175      	bne.n	8007f4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_UART_Transmit+0x2c>
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e06e      	b.n	8007f4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2221      	movs	r2, #33	@ 0x21
 8007e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e7e:	f7fc fd5d 	bl	800493c <HAL_GetTick>
 8007e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	88fa      	ldrh	r2, [r7, #6]
 8007e88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e98:	d108      	bne.n	8007eac <HAL_UART_Transmit+0x6c>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	e003      	b.n	8007eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007eb4:	e02e      	b.n	8007f14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2180      	movs	r1, #128	@ 0x80
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fafb 	bl	80084bc <UART_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e03a      	b.n	8007f4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	e007      	b.n	8007f06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3301      	adds	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1cb      	bne.n	8007eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	2140      	movs	r1, #64	@ 0x40
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fac7 	bl	80084bc <UART_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e006      	b.n	8007f4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e000      	b.n	8007f4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007f4c:	2302      	movs	r3, #2
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10f      	bne.n	8007fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <HAL_UART_IRQHandler+0x66>
 8007faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbb8 	bl	800872c <UART_Receive_IT>
      return;
 8007fbc:	e25b      	b.n	8008476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80de 	beq.w	8008184 <HAL_UART_IRQHandler+0x22c>
 8007fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80d1 	beq.w	8008184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xae>
 8007fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffe:	f043 0201 	orr.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <HAL_UART_IRQHandler+0xd2>
 8008012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008022:	f043 0202 	orr.w	r2, r3, #2
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <HAL_UART_IRQHandler+0xf6>
 8008036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008046:	f043 0204 	orr.w	r2, r3, #4
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <HAL_UART_IRQHandler+0x126>
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008076:	f043 0208 	orr.w	r2, r3, #8
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 81f2 	beq.w	800846c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <HAL_UART_IRQHandler+0x14e>
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb43 	bl	800872c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b0:	2b40      	cmp	r3, #64	@ 0x40
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <HAL_UART_IRQHandler+0x17a>
 80080ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d04f      	beq.n	8008172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa4b 	bl	800856e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	d141      	bne.n	800816a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800811e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800812a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d9      	bne.n	80080e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d013      	beq.n	8008162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813e:	4a7e      	ldr	r2, [pc, #504]	@ (8008338 <HAL_UART_IRQHandler+0x3e0>)
 8008140:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008146:	4618      	mov	r0, r3
 8008148:	f7fc fe58 	bl	8004dfc <HAL_DMA_Abort_IT>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d016      	beq.n	8008180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	e00e      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f994 	bl	8008490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e00a      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f990 	bl	8008490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	e006      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f98c 	bl	8008490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800817e:	e175      	b.n	800846c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008180:	bf00      	nop
    return;
 8008182:	e173      	b.n	800846c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008188:	2b01      	cmp	r3, #1
 800818a:	f040 814f 	bne.w	800842c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8148 	beq.w	800842c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8141 	beq.w	800842c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	f040 80b6 	bne.w	800833c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8145 	beq.w	8008470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f080 813e 	bcs.w	8008470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008206:	f000 8088 	beq.w	800831a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008236:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800823a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800824e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1d9      	bne.n	800820a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3314      	adds	r3, #20
 800825c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3314      	adds	r3, #20
 8008276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800827a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800827e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800828c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e1      	bne.n	8008256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3314      	adds	r3, #20
 8008298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3314      	adds	r3, #20
 80082b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e3      	bne.n	8008292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330c      	adds	r3, #12
 80082de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e2:	e853 3f00 	ldrex	r3, [r3]
 80082e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ea:	f023 0310 	bic.w	r3, r3, #16
 80082ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	330c      	adds	r3, #12
 80082f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800830a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e3      	bne.n	80082d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	4618      	mov	r0, r3
 8008316:	f7fc fd01 	bl	8004d1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2202      	movs	r2, #2
 800831e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008328:	b29b      	uxth	r3, r3
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	b29b      	uxth	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f8b7 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008336:	e09b      	b.n	8008470 <HAL_UART_IRQHandler+0x518>
 8008338:	08008635 	.word	0x08008635
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008344:	b29b      	uxth	r3, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 808e 	beq.w	8008474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8089 	beq.w	8008474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	330c      	adds	r3, #12
 8008368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008386:	647a      	str	r2, [r7, #68]	@ 0x44
 8008388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800838c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e3      	bne.n	8008362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3314      	adds	r3, #20
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	623b      	str	r3, [r7, #32]
   return(result);
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3314      	adds	r3, #20
 80083ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083be:	633a      	str	r2, [r7, #48]	@ 0x30
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e3      	bne.n	800839a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0310 	bic.w	r3, r3, #16
 80083f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008404:	61fa      	str	r2, [r7, #28]
 8008406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	69b9      	ldr	r1, [r7, #24]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	617b      	str	r3, [r7, #20]
   return(result);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e3      	bne.n	80083e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800841e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f83d 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800842a:	e023      	b.n	8008474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800842c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <HAL_UART_IRQHandler+0x4f4>
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f909 	bl	800865c <UART_Transmit_IT>
    return;
 800844a:	e014      	b.n	8008476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800844c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <HAL_UART_IRQHandler+0x51e>
 8008458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800845c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d008      	beq.n	8008476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f949 	bl	80086fc <UART_EndTransmit_IT>
    return;
 800846a:	e004      	b.n	8008476 <HAL_UART_IRQHandler+0x51e>
    return;
 800846c:	bf00      	nop
 800846e:	e002      	b.n	8008476 <HAL_UART_IRQHandler+0x51e>
      return;
 8008470:	bf00      	nop
 8008472:	e000      	b.n	8008476 <HAL_UART_IRQHandler+0x51e>
      return;
 8008474:	bf00      	nop
  }
}
 8008476:	37e8      	adds	r7, #232	@ 0xe8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084cc:	e03b      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d037      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d6:	f7fc fa31 	bl	800493c <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	6a3a      	ldr	r2, [r7, #32]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d302      	bcc.n	80084ec <UART_WaitOnFlagUntilTimeout+0x30>
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e03a      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d023      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b80      	cmp	r3, #128	@ 0x80
 8008502:	d020      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b40      	cmp	r3, #64	@ 0x40
 8008508:	d01d      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d116      	bne.n	8008546 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f81d 	bl	800856e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2208      	movs	r2, #8
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e00f      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	4013      	ands	r3, r2
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	bf0c      	ite	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	2300      	movne	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	429a      	cmp	r2, r3
 8008562:	d0b4      	beq.n	80084ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800856e:	b480      	push	{r7}
 8008570:	b095      	sub	sp, #84	@ 0x54
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800858c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008596:	643a      	str	r2, [r7, #64]	@ 0x40
 8008598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800859c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3314      	adds	r3, #20
 80085c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e5      	bne.n	80085aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d119      	bne.n	800861a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f023 0310 	bic.w	r3, r3, #16
 80085fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008606:	61ba      	str	r2, [r7, #24]
 8008608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	613b      	str	r3, [r7, #16]
   return(result);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e5      	bne.n	80085e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008628:	bf00      	nop
 800862a:	3754      	adds	r7, #84	@ 0x54
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff ff1e 	bl	8008490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b21      	cmp	r3, #33	@ 0x21
 800866e:	d13e      	bne.n	80086ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008678:	d114      	bne.n	80086a4 <UART_Transmit_IT+0x48>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d110      	bne.n	80086a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008696:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	1c9a      	adds	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	621a      	str	r2, [r3, #32]
 80086a2:	e008      	b.n	80086b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6211      	str	r1, [r2, #32]
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29b      	uxth	r3, r3
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4619      	mov	r1, r3
 80086c4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10f      	bne.n	80086ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	e000      	b.n	80086f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086ee:	2302      	movs	r3, #2
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008712:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fead 	bl	800847c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08c      	sub	sp, #48	@ 0x30
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b22      	cmp	r3, #34	@ 0x22
 800873e:	f040 80ae 	bne.w	800889e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800874a:	d117      	bne.n	800877c <UART_Receive_IT+0x50>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d113      	bne.n	800877c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008754:	2300      	movs	r3, #0
 8008756:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	b29a      	uxth	r2, r3
 800876c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008774:	1c9a      	adds	r2, r3, #2
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	629a      	str	r2, [r3, #40]	@ 0x28
 800877a:	e026      	b.n	80087ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800878e:	d007      	beq.n	80087a0 <UART_Receive_IT+0x74>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <UART_Receive_IT+0x82>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	e008      	b.n	80087c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	4619      	mov	r1, r3
 80087d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d15d      	bne.n	800889a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0220 	bic.w	r2, r2, #32
 80087ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0201 	bic.w	r2, r2, #1
 800880c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008820:	2b01      	cmp	r3, #1
 8008822:	d135      	bne.n	8008890 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	330c      	adds	r3, #12
 8008830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	613b      	str	r3, [r7, #16]
   return(result);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f023 0310 	bic.w	r3, r3, #16
 8008840:	627b      	str	r3, [r7, #36]	@ 0x24
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	330c      	adds	r3, #12
 8008848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800884a:	623a      	str	r2, [r7, #32]
 800884c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	69f9      	ldr	r1, [r7, #28]
 8008850:	6a3a      	ldr	r2, [r7, #32]
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	61bb      	str	r3, [r7, #24]
   return(result);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b10      	cmp	r3, #16
 800886a:	d10a      	bne.n	8008882 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886c:	2300      	movs	r3, #0
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fe0b 	bl	80084a4 <HAL_UARTEx_RxEventCallback>
 800888e:	e002      	b.n	8008896 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7f8 fc8f 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e002      	b.n	80088a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	e000      	b.n	80088a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800889e:	2302      	movs	r3, #2
  }
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3730      	adds	r7, #48	@ 0x30
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088ac:	b0c0      	sub	sp, #256	@ 0x100
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c4:	68d9      	ldr	r1, [r3, #12]
 80088c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	ea40 0301 	orr.w	r3, r0, r1
 80088d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	431a      	orrs	r2, r3
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008900:	f021 010c 	bic.w	r1, r1, #12
 8008904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800890e:	430b      	orrs	r3, r1
 8008910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008922:	6999      	ldr	r1, [r3, #24]
 8008924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	ea40 0301 	orr.w	r3, r0, r1
 800892e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b8f      	ldr	r3, [pc, #572]	@ (8008b74 <UART_SetConfig+0x2cc>)
 8008938:	429a      	cmp	r2, r3
 800893a:	d005      	beq.n	8008948 <UART_SetConfig+0xa0>
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b8d      	ldr	r3, [pc, #564]	@ (8008b78 <UART_SetConfig+0x2d0>)
 8008944:	429a      	cmp	r2, r3
 8008946:	d104      	bne.n	8008952 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008948:	f7fe fc5a 	bl	8007200 <HAL_RCC_GetPCLK2Freq>
 800894c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008950:	e003      	b.n	800895a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008952:	f7fe fc41 	bl	80071d8 <HAL_RCC_GetPCLK1Freq>
 8008956:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008964:	f040 810c 	bne.w	8008b80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896c:	2200      	movs	r2, #0
 800896e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008972:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008976:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800897a:	4622      	mov	r2, r4
 800897c:	462b      	mov	r3, r5
 800897e:	1891      	adds	r1, r2, r2
 8008980:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008982:	415b      	adcs	r3, r3
 8008984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800898a:	4621      	mov	r1, r4
 800898c:	eb12 0801 	adds.w	r8, r2, r1
 8008990:	4629      	mov	r1, r5
 8008992:	eb43 0901 	adc.w	r9, r3, r1
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089aa:	4690      	mov	r8, r2
 80089ac:	4699      	mov	r9, r3
 80089ae:	4623      	mov	r3, r4
 80089b0:	eb18 0303 	adds.w	r3, r8, r3
 80089b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089b8:	462b      	mov	r3, r5
 80089ba:	eb49 0303 	adc.w	r3, r9, r3
 80089be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80089d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089d6:	460b      	mov	r3, r1
 80089d8:	18db      	adds	r3, r3, r3
 80089da:	653b      	str	r3, [r7, #80]	@ 0x50
 80089dc:	4613      	mov	r3, r2
 80089de:	eb42 0303 	adc.w	r3, r2, r3
 80089e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80089e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089ec:	f7f8 f8e4 	bl	8000bb8 <__aeabi_uldivmod>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4b61      	ldr	r3, [pc, #388]	@ (8008b7c <UART_SetConfig+0x2d4>)
 80089f6:	fba3 2302 	umull	r2, r3, r3, r2
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	011c      	lsls	r4, r3, #4
 80089fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008a0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a10:	4642      	mov	r2, r8
 8008a12:	464b      	mov	r3, r9
 8008a14:	1891      	adds	r1, r2, r2
 8008a16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a18:	415b      	adcs	r3, r3
 8008a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a20:	4641      	mov	r1, r8
 8008a22:	eb12 0a01 	adds.w	sl, r2, r1
 8008a26:	4649      	mov	r1, r9
 8008a28:	eb43 0b01 	adc.w	fp, r3, r1
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	f04f 0300 	mov.w	r3, #0
 8008a34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a40:	4692      	mov	sl, r2
 8008a42:	469b      	mov	fp, r3
 8008a44:	4643      	mov	r3, r8
 8008a46:	eb1a 0303 	adds.w	r3, sl, r3
 8008a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	eb4b 0303 	adc.w	r3, fp, r3
 8008a54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	18db      	adds	r3, r3, r3
 8008a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a72:	4613      	mov	r3, r2
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a82:	f7f8 f899 	bl	8000bb8 <__aeabi_uldivmod>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008b7c <UART_SetConfig+0x2d4>)
 8008a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a92:	095b      	lsrs	r3, r3, #5
 8008a94:	2264      	movs	r2, #100	@ 0x64
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	1acb      	subs	r3, r1, r3
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008aa2:	4b36      	ldr	r3, [pc, #216]	@ (8008b7c <UART_SetConfig+0x2d4>)
 8008aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008ab0:	441c      	add	r4, r3
 8008ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008abc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ac0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	1891      	adds	r1, r2, r2
 8008aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008acc:	415b      	adcs	r3, r3
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	1851      	adds	r1, r2, r1
 8008ad8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ada:	4649      	mov	r1, r9
 8008adc:	414b      	adcs	r3, r1
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008aec:	4659      	mov	r1, fp
 8008aee:	00cb      	lsls	r3, r1, #3
 8008af0:	4651      	mov	r1, sl
 8008af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008af6:	4651      	mov	r1, sl
 8008af8:	00ca      	lsls	r2, r1, #3
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	4603      	mov	r3, r0
 8008b00:	4642      	mov	r2, r8
 8008b02:	189b      	adds	r3, r3, r2
 8008b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b08:	464b      	mov	r3, r9
 8008b0a:	460a      	mov	r2, r1
 8008b0c:	eb42 0303 	adc.w	r3, r2, r3
 8008b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b28:	460b      	mov	r3, r1
 8008b2a:	18db      	adds	r3, r3, r3
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b2e:	4613      	mov	r3, r2
 8008b30:	eb42 0303 	adc.w	r3, r2, r3
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b3e:	f7f8 f83b 	bl	8000bb8 <__aeabi_uldivmod>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <UART_SetConfig+0x2d4>)
 8008b48:	fba3 1302 	umull	r1, r3, r3, r2
 8008b4c:	095b      	lsrs	r3, r3, #5
 8008b4e:	2164      	movs	r1, #100	@ 0x64
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	3332      	adds	r3, #50	@ 0x32
 8008b5a:	4a08      	ldr	r2, [pc, #32]	@ (8008b7c <UART_SetConfig+0x2d4>)
 8008b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b60:	095b      	lsrs	r3, r3, #5
 8008b62:	f003 0207 	and.w	r2, r3, #7
 8008b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4422      	add	r2, r4
 8008b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b70:	e106      	b.n	8008d80 <UART_SetConfig+0x4d8>
 8008b72:	bf00      	nop
 8008b74:	40011000 	.word	0x40011000
 8008b78:	40011400 	.word	0x40011400
 8008b7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	1891      	adds	r1, r2, r2
 8008b98:	6239      	str	r1, [r7, #32]
 8008b9a:	415b      	adcs	r3, r3
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	1854      	adds	r4, r2, r1
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	eb43 0501 	adc.w	r5, r3, r1
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	00eb      	lsls	r3, r5, #3
 8008bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bba:	00e2      	lsls	r2, r4, #3
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	4643      	mov	r3, r8
 8008bc2:	18e3      	adds	r3, r4, r3
 8008bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bc8:	464b      	mov	r3, r9
 8008bca:	eb45 0303 	adc.w	r3, r5, r3
 8008bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bee:	4629      	mov	r1, r5
 8008bf0:	008b      	lsls	r3, r1, #2
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	008a      	lsls	r2, r1, #2
 8008bfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008c00:	f7f7 ffda 	bl	8000bb8 <__aeabi_uldivmod>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4b60      	ldr	r3, [pc, #384]	@ (8008d8c <UART_SetConfig+0x4e4>)
 8008c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	011c      	lsls	r4, r3, #4
 8008c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	1891      	adds	r1, r2, r2
 8008c2a:	61b9      	str	r1, [r7, #24]
 8008c2c:	415b      	adcs	r3, r3
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c34:	4641      	mov	r1, r8
 8008c36:	1851      	adds	r1, r2, r1
 8008c38:	6139      	str	r1, [r7, #16]
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	414b      	adcs	r3, r1
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	f04f 0200 	mov.w	r2, #0
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	00cb      	lsls	r3, r1, #3
 8008c50:	4651      	mov	r1, sl
 8008c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c56:	4651      	mov	r1, sl
 8008c58:	00ca      	lsls	r2, r1, #3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4642      	mov	r2, r8
 8008c62:	189b      	adds	r3, r3, r2
 8008c64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c68:	464b      	mov	r3, r9
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	eb42 0303 	adc.w	r3, r2, r3
 8008c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	008b      	lsls	r3, r1, #2
 8008c90:	4641      	mov	r1, r8
 8008c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c96:	4641      	mov	r1, r8
 8008c98:	008a      	lsls	r2, r1, #2
 8008c9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c9e:	f7f7 ff8b 	bl	8000bb8 <__aeabi_uldivmod>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4b38      	ldr	r3, [pc, #224]	@ (8008d8c <UART_SetConfig+0x4e4>)
 8008caa:	fba3 2301 	umull	r2, r3, r3, r1
 8008cae:	095b      	lsrs	r3, r3, #5
 8008cb0:	2264      	movs	r2, #100	@ 0x64
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	1acb      	subs	r3, r1, r3
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	3332      	adds	r3, #50	@ 0x32
 8008cbc:	4a33      	ldr	r2, [pc, #204]	@ (8008d8c <UART_SetConfig+0x4e4>)
 8008cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cc8:	441c      	add	r4, r3
 8008cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cce:	2200      	movs	r2, #0
 8008cd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008cd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	1891      	adds	r1, r2, r2
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	415b      	adcs	r3, r3
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ce8:	4641      	mov	r1, r8
 8008cea:	1851      	adds	r1, r2, r1
 8008cec:	6039      	str	r1, [r7, #0]
 8008cee:	4649      	mov	r1, r9
 8008cf0:	414b      	adcs	r3, r1
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d00:	4659      	mov	r1, fp
 8008d02:	00cb      	lsls	r3, r1, #3
 8008d04:	4651      	mov	r1, sl
 8008d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d0a:	4651      	mov	r1, sl
 8008d0c:	00ca      	lsls	r2, r1, #3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	4642      	mov	r2, r8
 8008d16:	189b      	adds	r3, r3, r2
 8008d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	460a      	mov	r2, r1
 8008d1e:	eb42 0303 	adc.w	r3, r2, r3
 8008d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	008b      	lsls	r3, r1, #2
 8008d40:	4641      	mov	r1, r8
 8008d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d46:	4641      	mov	r1, r8
 8008d48:	008a      	lsls	r2, r1, #2
 8008d4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d4e:	f7f7 ff33 	bl	8000bb8 <__aeabi_uldivmod>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <UART_SetConfig+0x4e4>)
 8008d58:	fba3 1302 	umull	r1, r3, r3, r2
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	2164      	movs	r1, #100	@ 0x64
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	3332      	adds	r3, #50	@ 0x32
 8008d6a:	4a08      	ldr	r2, [pc, #32]	@ (8008d8c <UART_SetConfig+0x4e4>)
 8008d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	f003 020f 	and.w	r2, r3, #15
 8008d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4422      	add	r2, r4
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d8c:	51eb851f 	.word	0x51eb851f

08008d90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d94:	4904      	ldr	r1, [pc, #16]	@ (8008da8 <MX_FATFS_Init+0x18>)
 8008d96:	4805      	ldr	r0, [pc, #20]	@ (8008dac <MX_FATFS_Init+0x1c>)
 8008d98:	f003 f8c8 	bl	800bf2c <FATFS_LinkDriver>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	4b03      	ldr	r3, [pc, #12]	@ (8008db0 <MX_FATFS_Init+0x20>)
 8008da2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008da4:	bf00      	nop
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200015b0 	.word	0x200015b0
 8008dac:	20000088 	.word	0x20000088
 8008db0:	200015ac 	.word	0x200015ac

08008db4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008db8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f8 fbb7 	bl	8001544 <SD_disk_initialize>
 8008dd6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f8 fc8f 	bl	8001710 <SD_disk_status>
 8008df2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008e0c:	7bf8      	ldrb	r0, [r7, #15]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	f7f8 fc92 	bl	800173c <SD_disk_read>
 8008e18:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8008e32:	7bf8      	ldrb	r0, [r7, #15]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	f7f8 fce9 	bl	8001810 <SD_disk_write>
 8008e3e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	603a      	str	r2, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
 8008e54:	460b      	mov	r3, r1
 8008e56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8008e58:	79b9      	ldrb	r1, [r7, #6]
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f8 fd5a 	bl	8001918 <SD_disk_ioctl>
 8008e64:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	4a08      	ldr	r2, [pc, #32]	@ (8008ea0 <disk_status+0x30>)
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	79fa      	ldrb	r2, [r7, #7]
 8008e88:	4905      	ldr	r1, [pc, #20]	@ (8008ea0 <disk_status+0x30>)
 8008e8a:	440a      	add	r2, r1
 8008e8c:	7a12      	ldrb	r2, [r2, #8]
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4798      	blx	r3
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200017dc 	.word	0x200017dc

08008ea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8008ef0 <disk_initialize+0x4c>)
 8008eb6:	5cd3      	ldrb	r3, [r2, r3]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d114      	bne.n	8008ee6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8008ef0 <disk_initialize+0x4c>)
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	79fa      	ldrb	r2, [r7, #7]
 8008eca:	4909      	ldr	r1, [pc, #36]	@ (8008ef0 <disk_initialize+0x4c>)
 8008ecc:	440a      	add	r2, r1
 8008ece:	7a12      	ldrb	r2, [r2, #8]
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	4a03      	ldr	r2, [pc, #12]	@ (8008ef0 <disk_initialize+0x4c>)
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	200017dc 	.word	0x200017dc

08008ef4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	4a0a      	ldr	r2, [pc, #40]	@ (8008f30 <disk_read+0x3c>)
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	689c      	ldr	r4, [r3, #8]
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	4a07      	ldr	r2, [pc, #28]	@ (8008f30 <disk_read+0x3c>)
 8008f14:	4413      	add	r3, r2
 8008f16:	7a18      	ldrb	r0, [r3, #8]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	47a0      	blx	r4
 8008f20:	4603      	mov	r3, r0
 8008f22:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd90      	pop	{r4, r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200017dc 	.word	0x200017dc

08008f34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	4a0a      	ldr	r2, [pc, #40]	@ (8008f70 <disk_write+0x3c>)
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68dc      	ldr	r4, [r3, #12]
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4a07      	ldr	r2, [pc, #28]	@ (8008f70 <disk_write+0x3c>)
 8008f54:	4413      	add	r3, r2
 8008f56:	7a18      	ldrb	r0, [r3, #8]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	47a0      	blx	r4
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd90      	pop	{r4, r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	200017dc 	.word	0x200017dc

08008f74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	603a      	str	r2, [r7, #0]
 8008f7e:	71fb      	strb	r3, [r7, #7]
 8008f80:	460b      	mov	r3, r1
 8008f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	4a09      	ldr	r2, [pc, #36]	@ (8008fac <disk_ioctl+0x38>)
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	79fa      	ldrb	r2, [r7, #7]
 8008f92:	4906      	ldr	r1, [pc, #24]	@ (8008fac <disk_ioctl+0x38>)
 8008f94:	440a      	add	r2, r1
 8008f96:	7a10      	ldrb	r0, [r2, #8]
 8008f98:	79b9      	ldrb	r1, [r7, #6]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4798      	blx	r3
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200017dc 	.word	0x200017dc

08008fb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	b21a      	sxth	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	b21b      	sxth	r3, r3
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	b21b      	sxth	r3, r3
 8008fd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3303      	adds	r3, #3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	021b      	lsls	r3, r3, #8
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	3202      	adds	r2, #2
 8008ff8:	7812      	ldrb	r2, [r2, #0]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	3201      	adds	r2, #1
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	return rv;
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	887a      	ldrh	r2, [r7, #2]
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	887b      	ldrh	r3, [r7, #2]
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	887a      	ldrh	r2, [r7, #2]
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	701a      	strb	r2, [r3, #0]
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	b2d2      	uxtb	r2, r2
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	0a1b      	lsrs	r3, r3, #8
 8009076:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	b2d2      	uxtb	r2, r2
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00d      	beq.n	80090ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	1c53      	adds	r3, r2, #1
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	1c59      	adds	r1, r3, #1
 80090d8:	6179      	str	r1, [r7, #20]
 80090da:	7812      	ldrb	r2, [r2, #0]
 80090dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f1      	bne.n	80090ce <mem_cpy+0x1a>
	}
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	617a      	str	r2, [r7, #20]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3b01      	subs	r3, #1
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f3      	bne.n	8009106 <mem_set+0x10>
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800912c:	b480      	push	{r7}
 800912e:	b089      	sub	sp, #36	@ 0x24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	61fa      	str	r2, [r7, #28]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	61ba      	str	r2, [r7, #24]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	1acb      	subs	r3, r1, r3
 8009158:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3b01      	subs	r3, #1
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <mem_cmp+0x40>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0eb      	beq.n	8009144 <mem_cmp+0x18>

	return r;
 800916c:	697b      	ldr	r3, [r7, #20]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3724      	adds	r7, #36	@ 0x24
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009184:	e002      	b.n	800918c <chk_chr+0x12>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3301      	adds	r3, #1
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <chk_chr+0x26>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	4293      	cmp	r3, r2
 800919e:	d1f2      	bne.n	8009186 <chk_chr+0xc>
	return *str;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	781b      	ldrb	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80091ba:	2300      	movs	r3, #0
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	e029      	b.n	8009218 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80091c4:	4a27      	ldr	r2, [pc, #156]	@ (8009264 <chk_lock+0xb4>)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	4413      	add	r3, r2
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01d      	beq.n	800920e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091d2:	4a24      	ldr	r2, [pc, #144]	@ (8009264 <chk_lock+0xb4>)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	4413      	add	r3, r2
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d116      	bne.n	8009212 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80091e4:	4a1f      	ldr	r2, [pc, #124]	@ (8009264 <chk_lock+0xb4>)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	4413      	add	r3, r2
 80091ec:	3304      	adds	r3, #4
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d10c      	bne.n	8009212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80091f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009264 <chk_lock+0xb4>)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	4413      	add	r3, r2
 8009200:	3308      	adds	r3, #8
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009208:	429a      	cmp	r2, r3
 800920a:	d102      	bne.n	8009212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800920c:	e007      	b.n	800921e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800920e:	2301      	movs	r3, #1
 8009210:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d9d2      	bls.n	80091c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d109      	bne.n	8009238 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d102      	bne.n	8009230 <chk_lock+0x80>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d101      	bne.n	8009234 <chk_lock+0x84>
 8009230:	2300      	movs	r3, #0
 8009232:	e010      	b.n	8009256 <chk_lock+0xa6>
 8009234:	2312      	movs	r3, #18
 8009236:	e00e      	b.n	8009256 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d108      	bne.n	8009250 <chk_lock+0xa0>
 800923e:	4a09      	ldr	r2, [pc, #36]	@ (8009264 <chk_lock+0xb4>)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	4413      	add	r3, r2
 8009246:	330c      	adds	r3, #12
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800924e:	d101      	bne.n	8009254 <chk_lock+0xa4>
 8009250:	2310      	movs	r3, #16
 8009252:	e000      	b.n	8009256 <chk_lock+0xa6>
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	200015bc 	.word	0x200015bc

08009268 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800926e:	2300      	movs	r3, #0
 8009270:	607b      	str	r3, [r7, #4]
 8009272:	e002      	b.n	800927a <enq_lock+0x12>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3301      	adds	r3, #1
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d806      	bhi.n	800928e <enq_lock+0x26>
 8009280:	4a09      	ldr	r2, [pc, #36]	@ (80092a8 <enq_lock+0x40>)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	4413      	add	r3, r2
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f2      	bne.n	8009274 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b02      	cmp	r3, #2
 8009292:	bf14      	ite	ne
 8009294:	2301      	movne	r3, #1
 8009296:	2300      	moveq	r3, #0
 8009298:	b2db      	uxtb	r3, r3
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	200015bc 	.word	0x200015bc

080092ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	e01f      	b.n	80092fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80092bc:	4a41      	ldr	r2, [pc, #260]	@ (80093c4 <inc_lock+0x118>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	4413      	add	r3, r2
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d113      	bne.n	80092f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80092ce:	4a3d      	ldr	r2, [pc, #244]	@ (80093c4 <inc_lock+0x118>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	4413      	add	r3, r2
 80092d6:	3304      	adds	r3, #4
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80092de:	429a      	cmp	r2, r3
 80092e0:	d109      	bne.n	80092f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80092e2:	4a38      	ldr	r2, [pc, #224]	@ (80093c4 <inc_lock+0x118>)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	4413      	add	r3, r2
 80092ea:	3308      	adds	r3, #8
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d006      	beq.n	8009304 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d9dc      	bls.n	80092bc <inc_lock+0x10>
 8009302:	e000      	b.n	8009306 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009304:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d132      	bne.n	8009372 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e002      	b.n	8009318 <inc_lock+0x6c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d806      	bhi.n	800932c <inc_lock+0x80>
 800931e:	4a29      	ldr	r2, [pc, #164]	@ (80093c4 <inc_lock+0x118>)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	4413      	add	r3, r2
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f2      	bne.n	8009312 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d101      	bne.n	8009336 <inc_lock+0x8a>
 8009332:	2300      	movs	r3, #0
 8009334:	e040      	b.n	80093b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4922      	ldr	r1, [pc, #136]	@ (80093c4 <inc_lock+0x118>)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	440b      	add	r3, r1
 8009342:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	491e      	ldr	r1, [pc, #120]	@ (80093c4 <inc_lock+0x118>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	440b      	add	r3, r1
 8009350:	3304      	adds	r3, #4
 8009352:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	491a      	ldr	r1, [pc, #104]	@ (80093c4 <inc_lock+0x118>)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	440b      	add	r3, r1
 8009360:	3308      	adds	r3, #8
 8009362:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009364:	4a17      	ldr	r2, [pc, #92]	@ (80093c4 <inc_lock+0x118>)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	4413      	add	r3, r2
 800936c:	330c      	adds	r3, #12
 800936e:	2200      	movs	r2, #0
 8009370:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <inc_lock+0xe0>
 8009378:	4a12      	ldr	r2, [pc, #72]	@ (80093c4 <inc_lock+0x118>)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	4413      	add	r3, r2
 8009380:	330c      	adds	r3, #12
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <inc_lock+0xe0>
 8009388:	2300      	movs	r3, #0
 800938a:	e015      	b.n	80093b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d108      	bne.n	80093a4 <inc_lock+0xf8>
 8009392:	4a0c      	ldr	r2, [pc, #48]	@ (80093c4 <inc_lock+0x118>)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	4413      	add	r3, r2
 800939a:	330c      	adds	r3, #12
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	e001      	b.n	80093a8 <inc_lock+0xfc>
 80093a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093a8:	4906      	ldr	r1, [pc, #24]	@ (80093c4 <inc_lock+0x118>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	440b      	add	r3, r1
 80093b0:	330c      	adds	r3, #12
 80093b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3301      	adds	r3, #1
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	200015bc 	.word	0x200015bc

080093c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	607b      	str	r3, [r7, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d825      	bhi.n	8009428 <dec_lock+0x60>
		n = Files[i].ctr;
 80093dc:	4a17      	ldr	r2, [pc, #92]	@ (800943c <dec_lock+0x74>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	4413      	add	r3, r2
 80093e4:	330c      	adds	r3, #12
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f0:	d101      	bne.n	80093f6 <dec_lock+0x2e>
 80093f2:	2300      	movs	r3, #0
 80093f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <dec_lock+0x3a>
 80093fc:	89fb      	ldrh	r3, [r7, #14]
 80093fe:	3b01      	subs	r3, #1
 8009400:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009402:	4a0e      	ldr	r2, [pc, #56]	@ (800943c <dec_lock+0x74>)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	4413      	add	r3, r2
 800940a:	330c      	adds	r3, #12
 800940c:	89fa      	ldrh	r2, [r7, #14]
 800940e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <dec_lock+0x5a>
 8009416:	4a09      	ldr	r2, [pc, #36]	@ (800943c <dec_lock+0x74>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	4413      	add	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	737b      	strb	r3, [r7, #13]
 8009426:	e001      	b.n	800942c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009428:	2302      	movs	r3, #2
 800942a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800942c:	7b7b      	ldrb	r3, [r7, #13]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	200015bc 	.word	0x200015bc

08009440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	e010      	b.n	8009470 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800944e:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <clear_lock+0x44>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	429a      	cmp	r2, r3
 800945c:	d105      	bne.n	800946a <clear_lock+0x2a>
 800945e:	4a09      	ldr	r2, [pc, #36]	@ (8009484 <clear_lock+0x44>)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	4413      	add	r3, r2
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d9eb      	bls.n	800944e <clear_lock+0xe>
	}
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	200015bc 	.word	0x200015bc

08009488 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	78db      	ldrb	r3, [r3, #3]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d034      	beq.n	8009506 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7858      	ldrb	r0, [r3, #1]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80094ac:	2301      	movs	r3, #1
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	f7ff fd40 	bl	8008f34 <disk_write>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e022      	b.n	8009506 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	1ad2      	subs	r2, r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d217      	bcs.n	8009506 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	789b      	ldrb	r3, [r3, #2]
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	e010      	b.n	8009500 <sync_window+0x78>
					wsect += fs->fsize;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7858      	ldrb	r0, [r3, #1]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80094f2:	2301      	movs	r3, #1
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	f7ff fd1d 	bl	8008f34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	613b      	str	r3, [r7, #16]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d8eb      	bhi.n	80094de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d01b      	beq.n	8009560 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ffad 	bl	8009488 <sync_window>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d113      	bne.n	8009560 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7858      	ldrb	r0, [r3, #1]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009542:	2301      	movs	r3, #1
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	f7ff fcd5 	bl	8008ef4 <disk_read>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009550:	f04f 33ff 	mov.w	r3, #4294967295
 8009554:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ff87 	bl	8009488 <sync_window>
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d159      	bne.n	8009638 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d149      	bne.n	8009620 <sync_fs+0xb4>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d145      	bne.n	8009620 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	899b      	ldrh	r3, [r3, #12]
 800959e:	461a      	mov	r2, r3
 80095a0:	2100      	movs	r1, #0
 80095a2:	f7ff fda8 	bl	80090f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3338      	adds	r3, #56	@ 0x38
 80095aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095ae:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fd37 	bl	8009026 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3338      	adds	r3, #56	@ 0x38
 80095bc:	4921      	ldr	r1, [pc, #132]	@ (8009644 <sync_fs+0xd8>)
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fd4c 	bl	800905c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3338      	adds	r3, #56	@ 0x38
 80095c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80095cc:	491e      	ldr	r1, [pc, #120]	@ (8009648 <sync_fs+0xdc>)
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fd44 	bl	800905c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3338      	adds	r3, #56	@ 0x38
 80095d8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	4619      	mov	r1, r3
 80095e2:	4610      	mov	r0, r2
 80095e4:	f7ff fd3a 	bl	800905c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3338      	adds	r3, #56	@ 0x38
 80095ec:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f7ff fd30 	bl	800905c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7858      	ldrb	r0, [r3, #1]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009614:	2301      	movs	r3, #1
 8009616:	f7ff fc8d 	bl	8008f34 <disk_write>
			fs->fsi_flag = 0;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	785b      	ldrb	r3, [r3, #1]
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fca3 	bl	8008f74 <disk_ioctl>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <sync_fs+0xcc>
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	41615252 	.word	0x41615252
 8009648:	61417272 	.word	0x61417272

0800964c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	3b02      	subs	r3, #2
 800965a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	3b02      	subs	r3, #2
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d301      	bcc.n	800966c <clust2sect+0x20>
 8009668:	2300      	movs	r3, #0
 800966a:	e008      	b.n	800967e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	895b      	ldrh	r3, [r3, #10]
 8009670:	461a      	mov	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	fb03 f202 	mul.w	r2, r3, r2
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800967c:	4413      	add	r3, r2
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d904      	bls.n	80096aa <get_fat+0x20>
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d302      	bcc.n	80096b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e0ba      	b.n	8009826 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80096b0:	f04f 33ff 	mov.w	r3, #4294967295
 80096b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	f000 8082 	beq.w	80097c4 <get_fat+0x13a>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	f300 80a6 	bgt.w	8009812 <get_fat+0x188>
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d002      	beq.n	80096d0 <get_fat+0x46>
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d055      	beq.n	800977a <get_fat+0xf0>
 80096ce:	e0a0      	b.n	8009812 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	085b      	lsrs	r3, r3, #1
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	4619      	mov	r1, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80096ee:	4413      	add	r3, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	6938      	ldr	r0, [r7, #16]
 80096f4:	f7ff ff0c 	bl	8009510 <move_window>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f040 808c 	bne.w	8009818 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	60fa      	str	r2, [r7, #12]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	8992      	ldrh	r2, [r2, #12]
 800970a:	fbb3 f1f2 	udiv	r1, r3, r2
 800970e:	fb01 f202 	mul.w	r2, r1, r2
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4413      	add	r3, r2
 8009718:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800971c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	4619      	mov	r1, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	fbb3 f3f1 	udiv	r3, r3, r1
 800972e:	4413      	add	r3, r2
 8009730:	4619      	mov	r1, r3
 8009732:	6938      	ldr	r0, [r7, #16]
 8009734:	f7ff feec 	bl	8009510 <move_window>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d16e      	bne.n	800981c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	899b      	ldrh	r3, [r3, #12]
 8009742:	461a      	mov	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	fbb3 f1f2 	udiv	r1, r3, r2
 800974a:	fb01 f202 	mul.w	r2, r1, r2
 800974e:	1a9b      	subs	r3, r3, r2
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4313      	orrs	r3, r2
 800975e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <get_fat+0xe6>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	091b      	lsrs	r3, r3, #4
 800976e:	e002      	b.n	8009776 <get_fat+0xec>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009776:	617b      	str	r3, [r7, #20]
			break;
 8009778:	e055      	b.n	8009826 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	899b      	ldrh	r3, [r3, #12]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	b29b      	uxth	r3, r3
 8009786:	4619      	mov	r1, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	fbb3 f3f1 	udiv	r3, r3, r1
 800978e:	4413      	add	r3, r2
 8009790:	4619      	mov	r1, r3
 8009792:	6938      	ldr	r0, [r7, #16]
 8009794:	f7ff febc 	bl	8009510 <move_window>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d140      	bne.n	8009820 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	8992      	ldrh	r2, [r2, #12]
 80097ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80097b0:	fb00 f202 	mul.w	r2, r0, r2
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	440b      	add	r3, r1
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff fbf9 	bl	8008fb0 <ld_word>
 80097be:	4603      	mov	r3, r0
 80097c0:	617b      	str	r3, [r7, #20]
			break;
 80097c2:	e030      	b.n	8009826 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	899b      	ldrh	r3, [r3, #12]
 80097cc:	089b      	lsrs	r3, r3, #2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	4619      	mov	r1, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80097d8:	4413      	add	r3, r2
 80097da:	4619      	mov	r1, r3
 80097dc:	6938      	ldr	r0, [r7, #16]
 80097de:	f7ff fe97 	bl	8009510 <move_window>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11d      	bne.n	8009824 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	8992      	ldrh	r2, [r2, #12]
 80097f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80097fa:	fb00 f202 	mul.w	r2, r0, r2
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	440b      	add	r3, r1
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff fbec 	bl	8008fe0 <ld_dword>
 8009808:	4603      	mov	r3, r0
 800980a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800980e:	617b      	str	r3, [r7, #20]
			break;
 8009810:	e009      	b.n	8009826 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009812:	2301      	movs	r3, #1
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e006      	b.n	8009826 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009818:	bf00      	nop
 800981a:	e004      	b.n	8009826 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800981c:	bf00      	nop
 800981e:	e002      	b.n	8009826 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009820:	bf00      	nop
 8009822:	e000      	b.n	8009826 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009824:	bf00      	nop
		}
	}

	return val;
 8009826:	697b      	ldr	r3, [r7, #20]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b089      	sub	sp, #36	@ 0x24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800983c:	2302      	movs	r3, #2
 800983e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b01      	cmp	r3, #1
 8009844:	f240 8109 	bls.w	8009a5a <put_fat+0x22a>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	f080 8103 	bcs.w	8009a5a <put_fat+0x22a>
		switch (fs->fs_type) {
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b03      	cmp	r3, #3
 800985a:	f000 80b6 	beq.w	80099ca <put_fat+0x19a>
 800985e:	2b03      	cmp	r3, #3
 8009860:	f300 80fb 	bgt.w	8009a5a <put_fat+0x22a>
 8009864:	2b01      	cmp	r3, #1
 8009866:	d003      	beq.n	8009870 <put_fat+0x40>
 8009868:	2b02      	cmp	r3, #2
 800986a:	f000 8083 	beq.w	8009974 <put_fat+0x144>
 800986e:	e0f4      	b.n	8009a5a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	085b      	lsrs	r3, r3, #1
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	4413      	add	r3, r2
 800987c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	4619      	mov	r1, r3
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	fbb3 f3f1 	udiv	r3, r3, r1
 800988e:	4413      	add	r3, r2
 8009890:	4619      	mov	r1, r3
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fe3c 	bl	8009510 <move_window>
 8009898:	4603      	mov	r3, r0
 800989a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800989c:	7ffb      	ldrb	r3, [r7, #31]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 80d4 	bne.w	8009a4c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	61ba      	str	r2, [r7, #24]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	8992      	ldrh	r2, [r2, #12]
 80098b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80098b8:	fb00 f202 	mul.w	r2, r0, r2
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	440b      	add	r3, r1
 80098c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00d      	beq.n	80098e8 <put_fat+0xb8>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	b25b      	sxtb	r3, r3
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	b25a      	sxtb	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	b25b      	sxtb	r3, r3
 80098e0:	4313      	orrs	r3, r2
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	e001      	b.n	80098ec <put_fat+0xbc>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	899b      	ldrh	r3, [r3, #12]
 80098fe:	4619      	mov	r1, r3
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	fbb3 f3f1 	udiv	r3, r3, r1
 8009906:	4413      	add	r3, r2
 8009908:	4619      	mov	r1, r3
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fe00 	bl	8009510 <move_window>
 8009910:	4603      	mov	r3, r0
 8009912:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009914:	7ffb      	ldrb	r3, [r7, #31]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f040 809a 	bne.w	8009a50 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	899b      	ldrh	r3, [r3, #12]
 8009926:	461a      	mov	r2, r3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	fbb3 f0f2 	udiv	r0, r3, r2
 800992e:	fb00 f202 	mul.w	r2, r0, r2
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	440b      	add	r3, r1
 8009936:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <put_fat+0x11a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	091b      	lsrs	r3, r3, #4
 8009946:	b2db      	uxtb	r3, r3
 8009948:	e00e      	b.n	8009968 <put_fat+0x138>
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b25b      	sxtb	r3, r3
 8009950:	f023 030f 	bic.w	r3, r3, #15
 8009954:	b25a      	sxtb	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	0a1b      	lsrs	r3, r3, #8
 800995a:	b25b      	sxtb	r3, r3
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	b25b      	sxtb	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b25b      	sxtb	r3, r3
 8009966:	b2db      	uxtb	r3, r3
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	70da      	strb	r2, [r3, #3]
			break;
 8009972:	e072      	b.n	8009a5a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	899b      	ldrh	r3, [r3, #12]
 800997c:	085b      	lsrs	r3, r3, #1
 800997e:	b29b      	uxth	r3, r3
 8009980:	4619      	mov	r1, r3
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	fbb3 f3f1 	udiv	r3, r3, r1
 8009988:	4413      	add	r3, r2
 800998a:	4619      	mov	r1, r3
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff fdbf 	bl	8009510 <move_window>
 8009992:	4603      	mov	r3, r0
 8009994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009996:	7ffb      	ldrb	r3, [r7, #31]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d15b      	bne.n	8009a54 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	8992      	ldrh	r2, [r2, #12]
 80099aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80099ae:	fb00 f202 	mul.w	r2, r0, r2
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	440b      	add	r3, r1
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	b292      	uxth	r2, r2
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fb32 	bl	8009026 <st_word>
			fs->wflag = 1;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	70da      	strb	r2, [r3, #3]
			break;
 80099c8:	e047      	b.n	8009a5a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	899b      	ldrh	r3, [r3, #12]
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4619      	mov	r1, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	fbb3 f3f1 	udiv	r3, r3, r1
 80099de:	4413      	add	r3, r2
 80099e0:	4619      	mov	r1, r3
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fd94 	bl	8009510 <move_window>
 80099e8:	4603      	mov	r3, r0
 80099ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099ec:	7ffb      	ldrb	r3, [r7, #31]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d132      	bne.n	8009a58 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	8992      	ldrh	r2, [r2, #12]
 8009a06:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a0a:	fb00 f202 	mul.w	r2, r0, r2
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	440b      	add	r3, r1
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fae4 	bl	8008fe0 <ld_dword>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a1e:	4323      	orrs	r3, r4
 8009a20:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	8992      	ldrh	r2, [r2, #12]
 8009a30:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a34:	fb00 f202 	mul.w	r2, r0, r2
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fb0c 	bl	800905c <st_dword>
			fs->wflag = 1;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	70da      	strb	r2, [r3, #3]
			break;
 8009a4a:	e006      	b.n	8009a5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009a4c:	bf00      	nop
 8009a4e:	e004      	b.n	8009a5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009a50:	bf00      	nop
 8009a52:	e002      	b.n	8009a5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009a58:	bf00      	nop
		}
	}
	return res;
 8009a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3724      	adds	r7, #36	@ 0x24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd90      	pop	{r4, r7, pc}

08009a64 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d904      	bls.n	8009a8a <remove_chain+0x26>
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d301      	bcc.n	8009a8e <remove_chain+0x2a>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e04b      	b.n	8009b26 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00c      	beq.n	8009aae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009a94:	f04f 32ff 	mov.w	r2, #4294967295
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	69b8      	ldr	r0, [r7, #24]
 8009a9c:	f7ff fec8 	bl	8009830 <put_fat>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009aa4:	7ffb      	ldrb	r3, [r7, #31]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <remove_chain+0x4a>
 8009aaa:	7ffb      	ldrb	r3, [r7, #31]
 8009aac:	e03b      	b.n	8009b26 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fdea 	bl	800968a <get_fat>
 8009ab6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d031      	beq.n	8009b22 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <remove_chain+0x64>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e02e      	b.n	8009b26 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ace:	d101      	bne.n	8009ad4 <remove_chain+0x70>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e028      	b.n	8009b26 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	69b8      	ldr	r0, [r7, #24]
 8009ada:	f7ff fea9 	bl	8009830 <put_fat>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009ae2:	7ffb      	ldrb	r3, [r7, #31]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <remove_chain+0x88>
 8009ae8:	7ffb      	ldrb	r3, [r7, #31]
 8009aea:	e01c      	b.n	8009b26 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	3b02      	subs	r3, #2
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d20b      	bcs.n	8009b12 <remove_chain+0xae>
			fs->free_clst++;
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	791b      	ldrb	r3, [r3, #4]
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d3c6      	bcc.n	8009aae <remove_chain+0x4a>
 8009b20:	e000      	b.n	8009b24 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b22:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b088      	sub	sp, #32
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10d      	bne.n	8009b60 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <create_chain+0x2c>
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d31b      	bcc.n	8009b92 <create_chain+0x64>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	e018      	b.n	8009b92 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fd91 	bl	800968a <get_fat>
 8009b68:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d801      	bhi.n	8009b74 <create_chain+0x46>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e070      	b.n	8009c56 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d101      	bne.n	8009b80 <create_chain+0x52>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	e06a      	b.n	8009c56 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d201      	bcs.n	8009b8e <create_chain+0x60>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	e063      	b.n	8009c56 <create_chain+0x128>
		scl = clst;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d307      	bcc.n	8009bb6 <create_chain+0x88>
				ncl = 2;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d901      	bls.n	8009bb6 <create_chain+0x88>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e04f      	b.n	8009c56 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009bb6:	69f9      	ldr	r1, [r7, #28]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff fd66 	bl	800968a <get_fat>
 8009bbe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00e      	beq.n	8009be4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d003      	beq.n	8009bd4 <create_chain+0xa6>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d101      	bne.n	8009bd8 <create_chain+0xaa>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	e03e      	b.n	8009c56 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d1da      	bne.n	8009b96 <create_chain+0x68>
 8009be0:	2300      	movs	r3, #0
 8009be2:	e038      	b.n	8009c56 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009be4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	69f9      	ldr	r1, [r7, #28]
 8009bec:	6938      	ldr	r0, [r7, #16]
 8009bee:	f7ff fe1f 	bl	8009830 <put_fat>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d109      	bne.n	8009c10 <create_chain+0xe2>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6938      	ldr	r0, [r7, #16]
 8009c08:	f7ff fe12 	bl	8009830 <put_fat>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d116      	bne.n	8009c44 <create_chain+0x116>
		fs->last_clst = ncl;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	699a      	ldr	r2, [r3, #24]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	3b02      	subs	r3, #2
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d804      	bhi.n	8009c34 <create_chain+0x106>
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	1e5a      	subs	r2, r3, #1
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	791b      	ldrb	r3, [r3, #4]
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	711a      	strb	r2, [r3, #4]
 8009c42:	e007      	b.n	8009c54 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d102      	bne.n	8009c50 <create_chain+0x122>
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	e000      	b.n	8009c52 <create_chain+0x124>
 8009c50:	2301      	movs	r3, #1
 8009c52:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009c54:	69fb      	ldr	r3, [r7, #28]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b087      	sub	sp, #28
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c72:	3304      	adds	r3, #4
 8009c74:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	899b      	ldrh	r3, [r3, #12]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	8952      	ldrh	r2, [r2, #10]
 8009c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	1d1a      	adds	r2, r3, #4
 8009c90:	613a      	str	r2, [r7, #16]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <clmt_clust+0x42>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e010      	b.n	8009cc2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d307      	bcc.n	8009cb8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cb6:	e7e9      	b.n	8009c8c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009cb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	4413      	add	r3, r2
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ce4:	d204      	bcs.n	8009cf0 <dir_sdi+0x22>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	f003 031f 	and.w	r3, r3, #31
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e071      	b.n	8009dd8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <dir_sdi+0x46>
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d902      	bls.n	8009d14 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10c      	bne.n	8009d34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	8912      	ldrh	r2, [r2, #8]
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d301      	bcc.n	8009d2a <dir_sdi+0x5c>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e056      	b.n	8009dd8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	61da      	str	r2, [r3, #28]
 8009d32:	e02d      	b.n	8009d90 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	895b      	ldrh	r3, [r3, #10]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	899b      	ldrh	r3, [r3, #12]
 8009d3e:	fb02 f303 	mul.w	r3, r2, r3
 8009d42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d44:	e019      	b.n	8009d7a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6979      	ldr	r1, [r7, #20]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fc9d 	bl	800968a <get_fat>
 8009d50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d101      	bne.n	8009d5e <dir_sdi+0x90>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e03c      	b.n	8009dd8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d904      	bls.n	8009d6e <dir_sdi+0xa0>
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d301      	bcc.n	8009d72 <dir_sdi+0xa4>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e032      	b.n	8009dd8 <dir_sdi+0x10a>
			ofs -= csz;
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d2e1      	bcs.n	8009d46 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009d82:	6979      	ldr	r1, [r7, #20]
 8009d84:	6938      	ldr	r0, [r7, #16]
 8009d86:	f7ff fc61 	bl	800964c <clust2sect>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <dir_sdi+0xd4>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e01a      	b.n	8009dd8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69da      	ldr	r2, [r3, #28]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	899b      	ldrh	r3, [r3, #12]
 8009daa:	4619      	mov	r1, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009db2:	441a      	add	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	899b      	ldrh	r3, [r3, #12]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dca:	fb00 f202 	mul.w	r2, r0, r2
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	18ca      	adds	r2, r1, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	3320      	adds	r3, #32
 8009df6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <dir_next+0x28>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e06:	d301      	bcc.n	8009e0c <dir_next+0x2c>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	e0bb      	b.n	8009f84 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	899b      	ldrh	r3, [r3, #12]
 8009e10:	461a      	mov	r2, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e18:	fb01 f202 	mul.w	r2, r1, r2
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 809d 	bne.w	8009f5e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10b      	bne.n	8009e4e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	095b      	lsrs	r3, r3, #5
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	8912      	ldrh	r2, [r2, #8]
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	f0c0 808d 	bcc.w	8009f5e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	61da      	str	r2, [r3, #28]
 8009e4a:	2304      	movs	r3, #4
 8009e4c:	e09a      	b.n	8009f84 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	899b      	ldrh	r3, [r3, #12]
 8009e52:	461a      	mov	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	8952      	ldrh	r2, [r2, #10]
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	4013      	ands	r3, r2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d17b      	bne.n	8009f5e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7ff fc0b 	bl	800968a <get_fat>
 8009e74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d801      	bhi.n	8009e80 <dir_next+0xa0>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	e081      	b.n	8009f84 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e86:	d101      	bne.n	8009e8c <dir_next+0xac>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e07b      	b.n	8009f84 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d359      	bcc.n	8009f4a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	61da      	str	r2, [r3, #28]
 8009ea2:	2304      	movs	r3, #4
 8009ea4:	e06e      	b.n	8009f84 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7ff fe3d 	bl	8009b2e <create_chain>
 8009eb4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <dir_next+0xe0>
 8009ebc:	2307      	movs	r3, #7
 8009ebe:	e061      	b.n	8009f84 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <dir_next+0xea>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e05c      	b.n	8009f84 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d101      	bne.n	8009ed6 <dir_next+0xf6>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e056      	b.n	8009f84 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff fad6 	bl	8009488 <sync_window>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <dir_next+0x106>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e04e      	b.n	8009f84 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	899b      	ldrh	r3, [r3, #12]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	f7ff f8ff 	bl	80090f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ef8:	2300      	movs	r3, #0
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	6979      	ldr	r1, [r7, #20]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fba4 	bl	800964c <clust2sect>
 8009f04:	4602      	mov	r2, r0
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8009f0a:	e012      	b.n	8009f32 <dir_next+0x152>
						fs->wflag = 1;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fab8 	bl	8009488 <sync_window>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <dir_next+0x142>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e030      	b.n	8009f84 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3301      	adds	r3, #1
 8009f26:	613b      	str	r3, [r7, #16]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	895b      	ldrh	r3, [r3, #10]
 8009f36:	461a      	mov	r2, r3
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d3e6      	bcc.n	8009f0c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	1ad2      	subs	r2, r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009f50:	6979      	ldr	r1, [r7, #20]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7ff fb7a 	bl	800964c <clust2sect>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	899b      	ldrh	r3, [r3, #12]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f76:	fb00 f202 	mul.w	r2, r0, r2
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	18ca      	adds	r2, r1, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fe95 	bl	8009cce <dir_sdi>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d12b      	bne.n	800a006 <dir_alloc+0x7a>
		n = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff faa9 	bl	8009510 <move_window>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11d      	bne.n	800a004 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2be5      	cmp	r3, #229	@ 0xe5
 8009fd0:	d004      	beq.n	8009fdc <dir_alloc+0x50>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d107      	bne.n	8009fec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d102      	bne.n	8009ff0 <dir_alloc+0x64>
 8009fea:	e00c      	b.n	800a006 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff fef4 	bl	8009de0 <dir_next>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0d7      	beq.n	8009fb2 <dir_alloc+0x26>
 800a002:	e000      	b.n	800a006 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a004:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d101      	bne.n	800a010 <dir_alloc+0x84>
 800a00c:	2307      	movs	r3, #7
 800a00e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	331a      	adds	r3, #26
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe ffc1 	bl	8008fb0 <ld_word>
 800a02e:	4603      	mov	r3, r0
 800a030:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b03      	cmp	r3, #3
 800a038:	d109      	bne.n	800a04e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	3314      	adds	r3, #20
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe ffb6 	bl	8008fb0 <ld_word>
 800a044:	4603      	mov	r3, r0
 800a046:	041b      	lsls	r3, r3, #16
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	331a      	adds	r3, #26
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	b292      	uxth	r2, r2
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe ffd9 	bl	8009026 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d109      	bne.n	800a090 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f103 0214 	add.w	r2, r3, #20
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	0c1b      	lsrs	r3, r3, #16
 800a086:	b29b      	uxth	r3, r3
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f7fe ffcb 	bl	8009026 <st_word>
	}
}
 800a090:	bf00      	nop
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	331a      	adds	r3, #26
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe ff82 	bl	8008fb0 <ld_word>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <cmp_lfn+0x1e>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e059      	b.n	800a16a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	81fb      	strh	r3, [r7, #14]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	e033      	b.n	800a13e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a0d6:	4a27      	ldr	r2, [pc, #156]	@ (800a174 <cmp_lfn+0xdc>)
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	4413      	add	r3, r2
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe ff63 	bl	8008fb0 <ld_word>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01a      	beq.n	800a12a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a0f8:	d812      	bhi.n	800a120 <cmp_lfn+0x88>
 800a0fa:	89bb      	ldrh	r3, [r7, #12]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 ff61 	bl	800bfc4 <ff_wtoupper>
 800a102:	4603      	mov	r3, r0
 800a104:	461c      	mov	r4, r3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	617a      	str	r2, [r7, #20]
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	4618      	mov	r0, r3
 800a116:	f001 ff55 	bl	800bfc4 <ff_wtoupper>
 800a11a:	4603      	mov	r3, r0
 800a11c:	429c      	cmp	r4, r3
 800a11e:	d001      	beq.n	800a124 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a120:	2300      	movs	r3, #0
 800a122:	e022      	b.n	800a16a <cmp_lfn+0xd2>
			}
			wc = uc;
 800a124:	89bb      	ldrh	r3, [r7, #12]
 800a126:	81fb      	strh	r3, [r7, #14]
 800a128:	e006      	b.n	800a138 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a12a:	89bb      	ldrh	r3, [r7, #12]
 800a12c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a130:	4293      	cmp	r3, r2
 800a132:	d001      	beq.n	800a138 <cmp_lfn+0xa0>
 800a134:	2300      	movs	r3, #0
 800a136:	e018      	b.n	800a16a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	3301      	adds	r3, #1
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b0c      	cmp	r3, #12
 800a142:	d9c8      	bls.n	800a0d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <cmp_lfn+0xd0>
 800a150:	89fb      	ldrh	r3, [r7, #14]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d008      	beq.n	800a168 <cmp_lfn+0xd0>
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <cmp_lfn+0xd0>
 800a164:	2300      	movs	r3, #0
 800a166:	e000      	b.n	800a16a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a168:	2301      	movs	r3, #1
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd90      	pop	{r4, r7, pc}
 800a172:	bf00      	nop
 800a174:	0800fd40 	.word	0x0800fd40

0800a178 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4611      	mov	r1, r2
 800a184:	461a      	mov	r2, r3
 800a186:	460b      	mov	r3, r1
 800a188:	71fb      	strb	r3, [r7, #7]
 800a18a:	4613      	mov	r3, r2
 800a18c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	330d      	adds	r3, #13
 800a192:	79ba      	ldrb	r2, [r7, #6]
 800a194:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	330b      	adds	r3, #11
 800a19a:	220f      	movs	r2, #15
 800a19c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	331a      	adds	r3, #26
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe ff3a 	bl	8009026 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	82fb      	strh	r3, [r7, #22]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a1ca:	8afb      	ldrh	r3, [r7, #22]
 800a1cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d007      	beq.n	800a1e4 <put_lfn+0x6c>
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	61fa      	str	r2, [r7, #28]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a1e4:	4a17      	ldr	r2, [pc, #92]	@ (800a244 <put_lfn+0xcc>)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe ff15 	bl	8009026 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a1fc:	8afb      	ldrh	r3, [r7, #22]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <put_lfn+0x90>
 800a202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a206:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	3301      	adds	r3, #1
 800a20c:	61bb      	str	r3, [r7, #24]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d9da      	bls.n	800a1ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a214:	8afb      	ldrh	r3, [r7, #22]
 800a216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d006      	beq.n	800a22c <put_lfn+0xb4>
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d103      	bne.n	800a234 <put_lfn+0xbc>
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a232:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	79fa      	ldrb	r2, [r7, #7]
 800a238:	701a      	strb	r2, [r3, #0]
}
 800a23a:	bf00      	nop
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	0800fd40 	.word	0x0800fd40

0800a248 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08c      	sub	sp, #48	@ 0x30
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a256:	220b      	movs	r2, #11
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7fe ff2a 	bl	80090b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b05      	cmp	r3, #5
 800a264:	d92b      	bls.n	800a2be <gen_numname+0x76>
		sr = seq;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a26a:	e022      	b.n	800a2b2 <gen_numname+0x6a>
			wc = *lfn++;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	1c9a      	adds	r2, r3, #2
 800a270:	607a      	str	r2, [r7, #4]
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a276:	2300      	movs	r3, #0
 800a278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a27a:	e017      	b.n	800a2ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	005a      	lsls	r2, r3, #1
 800a280:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a28a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a28c:	085b      	lsrs	r3, r3, #1
 800a28e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <gen_numname+0x5e>
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a2a0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a2a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	2b0f      	cmp	r3, #15
 800a2b0:	d9e4      	bls.n	800a27c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1d8      	bne.n	800a26c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a2be:	2307      	movs	r3, #7
 800a2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	3330      	adds	r3, #48	@ 0x30
 800a2ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2d6:	2b39      	cmp	r3, #57	@ 0x39
 800a2d8:	d904      	bls.n	800a2e4 <gen_numname+0x9c>
 800a2da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2de:	3307      	adds	r3, #7
 800a2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a2ea:	3330      	adds	r3, #48	@ 0x30
 800a2ec:	443b      	add	r3, r7
 800a2ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a2f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	091b      	lsrs	r3, r3, #4
 800a2fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1df      	bne.n	800a2c2 <gen_numname+0x7a>
	ns[i] = '~';
 800a302:	f107 0214 	add.w	r2, r7, #20
 800a306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a308:	4413      	add	r3, r2
 800a30a:	227e      	movs	r2, #126	@ 0x7e
 800a30c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a30e:	2300      	movs	r3, #0
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
 800a312:	e002      	b.n	800a31a <gen_numname+0xd2>
 800a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a316:	3301      	adds	r3, #1
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24
 800a31a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31e:	429a      	cmp	r2, r3
 800a320:	d205      	bcs.n	800a32e <gen_numname+0xe6>
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	4413      	add	r3, r2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	d1f2      	bne.n	800a314 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	2b07      	cmp	r3, #7
 800a332:	d807      	bhi.n	800a344 <gen_numname+0xfc>
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a33a:	3330      	adds	r3, #48	@ 0x30
 800a33c:	443b      	add	r3, r7
 800a33e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a342:	e000      	b.n	800a346 <gen_numname+0xfe>
 800a344:	2120      	movs	r1, #32
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	460a      	mov	r2, r1
 800a352:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	2b07      	cmp	r3, #7
 800a358:	d9e9      	bls.n	800a32e <gen_numname+0xe6>
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	3730      	adds	r7, #48	@ 0x30
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a370:	230b      	movs	r3, #11
 800a372:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	b2da      	uxtb	r2, r3
 800a378:	0852      	lsrs	r2, r2, #1
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	4313      	orrs	r3, r2
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	1c59      	adds	r1, r3, #1
 800a384:	6079      	str	r1, [r7, #4]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	4413      	add	r3, r2
 800a38a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	3b01      	subs	r3, #1
 800a390:	60bb      	str	r3, [r7, #8]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1ed      	bne.n	800a374 <sum_sfn+0x10>
	return sum;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fc89 	bl	8009cce <dir_sdi>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <dir_find+0x24>
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	e0a9      	b.n	800a51e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a3ca:	23ff      	movs	r3, #255	@ 0xff
 800a3cc:	753b      	strb	r3, [r7, #20]
 800a3ce:	7d3b      	ldrb	r3, [r7, #20]
 800a3d0:	757b      	strb	r3, [r7, #21]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6938      	ldr	r0, [r7, #16]
 800a3e2:	f7ff f895 	bl	8009510 <move_window>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 8090 	bne.w	800a512 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a3fa:	7dbb      	ldrb	r3, [r7, #22]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <dir_find+0x60>
 800a400:	2304      	movs	r3, #4
 800a402:	75fb      	strb	r3, [r7, #23]
 800a404:	e08a      	b.n	800a51c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	330b      	adds	r3, #11
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7bfa      	ldrb	r2, [r7, #15]
 800a418:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a41a:	7dbb      	ldrb	r3, [r7, #22]
 800a41c:	2be5      	cmp	r3, #229	@ 0xe5
 800a41e:	d007      	beq.n	800a430 <dir_find+0x8a>
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	f003 0308 	and.w	r3, r3, #8
 800a426:	2b00      	cmp	r3, #0
 800a428:	d009      	beq.n	800a43e <dir_find+0x98>
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	2b0f      	cmp	r3, #15
 800a42e:	d006      	beq.n	800a43e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a430:	23ff      	movs	r3, #255	@ 0xff
 800a432:	757b      	strb	r3, [r7, #21]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f04f 32ff 	mov.w	r2, #4294967295
 800a43a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a43c:	e05e      	b.n	800a4fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	2b0f      	cmp	r3, #15
 800a442:	d136      	bne.n	800a4b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d154      	bne.n	800a4fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a452:	7dbb      	ldrb	r3, [r7, #22]
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00d      	beq.n	800a478 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	7b5b      	ldrb	r3, [r3, #13]
 800a462:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a464:	7dbb      	ldrb	r3, [r7, #22]
 800a466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a46a:	75bb      	strb	r3, [r7, #22]
 800a46c:	7dbb      	ldrb	r3, [r7, #22]
 800a46e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	695a      	ldr	r2, [r3, #20]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a478:	7dba      	ldrb	r2, [r7, #22]
 800a47a:	7d7b      	ldrb	r3, [r7, #21]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d115      	bne.n	800a4ac <dir_find+0x106>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	330d      	adds	r3, #13
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	7d3a      	ldrb	r2, [r7, #20]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d10e      	bne.n	800a4ac <dir_find+0x106>
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	691a      	ldr	r2, [r3, #16]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7ff fdfd 	bl	800a098 <cmp_lfn>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <dir_find+0x106>
 800a4a4:	7d7b      	ldrb	r3, [r7, #21]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	e000      	b.n	800a4ae <dir_find+0x108>
 800a4ac:	23ff      	movs	r3, #255	@ 0xff
 800a4ae:	757b      	strb	r3, [r7, #21]
 800a4b0:	e024      	b.n	800a4fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a4b2:	7d7b      	ldrb	r3, [r7, #21]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d109      	bne.n	800a4cc <dir_find+0x126>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff ff51 	bl	800a364 <sum_sfn>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	7d3b      	ldrb	r3, [r7, #20]
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d024      	beq.n	800a516 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10a      	bne.n	800a4f0 <dir_find+0x14a>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a18      	ldr	r0, [r3, #32]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3324      	adds	r3, #36	@ 0x24
 800a4e2:	220b      	movs	r2, #11
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f7fe fe21 	bl	800912c <mem_cmp>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d014      	beq.n	800a51a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a4f0:	23ff      	movs	r3, #255	@ 0xff
 800a4f2:	757b      	strb	r3, [r7, #21]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fc6e 	bl	8009de0 <dir_next>
 800a504:	4603      	mov	r3, r0
 800a506:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f43f af65 	beq.w	800a3da <dir_find+0x34>
 800a510:	e004      	b.n	800a51c <dir_find+0x176>
		if (res != FR_OK) break;
 800a512:	bf00      	nop
 800a514:	e002      	b.n	800a51c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a51a:	bf00      	nop

	return res;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08c      	sub	sp, #48	@ 0x30
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a53c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <dir_register+0x20>
 800a544:	2306      	movs	r3, #6
 800a546:	e0e0      	b.n	800a70a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a548:	2300      	movs	r3, #0
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54c:	e002      	b.n	800a554 <dir_register+0x2c>
 800a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a550:	3301      	adds	r3, #1
 800a552:	627b      	str	r3, [r7, #36]	@ 0x24
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	4413      	add	r3, r2
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1f4      	bne.n	800a54e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a56a:	f107 030c 	add.w	r3, r7, #12
 800a56e:	220c      	movs	r2, #12
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fd9f 	bl	80090b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d032      	beq.n	800a5e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2240      	movs	r2, #64	@ 0x40
 800a584:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800a588:	2301      	movs	r3, #1
 800a58a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a58c:	e016      	b.n	800a5bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	f107 010c 	add.w	r1, r7, #12
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	f7ff fe53 	bl	800a248 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff feff 	bl	800a3a6 <dir_find>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800a5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	2b63      	cmp	r3, #99	@ 0x63
 800a5c0:	d9e5      	bls.n	800a58e <dir_register+0x66>
 800a5c2:	e000      	b.n	800a5c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a5c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	2b64      	cmp	r3, #100	@ 0x64
 800a5ca:	d101      	bne.n	800a5d0 <dir_register+0xa8>
 800a5cc:	2307      	movs	r3, #7
 800a5ce:	e09c      	b.n	800a70a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a5d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d002      	beq.n	800a5de <dir_register+0xb6>
 800a5d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5dc:	e095      	b.n	800a70a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a5de:	7dfa      	ldrb	r2, [r7, #23]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <dir_register+0xd8>
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	4a47      	ldr	r2, [pc, #284]	@ (800a714 <dir_register+0x1ec>)
 800a5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fa:	089b      	lsrs	r3, r3, #2
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	e000      	b.n	800a602 <dir_register+0xda>
 800a600:	2301      	movs	r3, #1
 800a602:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a604:	6a39      	ldr	r1, [r7, #32]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff fcc0 	bl	8009f8c <dir_alloc>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a616:	2b00      	cmp	r3, #0
 800a618:	d148      	bne.n	800a6ac <dir_register+0x184>
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	623b      	str	r3, [r7, #32]
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d042      	beq.n	800a6ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	695a      	ldr	r2, [r3, #20]
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	015b      	lsls	r3, r3, #5
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fb4b 	bl	8009cce <dir_sdi>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a63e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a642:	2b00      	cmp	r3, #0
 800a644:	d132      	bne.n	800a6ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3324      	adds	r3, #36	@ 0x24
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fe8a 	bl	800a364 <sum_sfn>
 800a650:	4603      	mov	r3, r0
 800a652:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	4619      	mov	r1, r3
 800a65a:	69f8      	ldr	r0, [r7, #28]
 800a65c:	f7fe ff58 	bl	8009510 <move_window>
 800a660:	4603      	mov	r3, r0
 800a662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800a666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d11d      	bne.n	800a6aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	6918      	ldr	r0, [r3, #16]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a19      	ldr	r1, [r3, #32]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	7efb      	ldrb	r3, [r7, #27]
 800a67c:	f7ff fd7c 	bl	800a178 <put_lfn>
				fs->wflag = 1;
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2201      	movs	r2, #1
 800a684:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a686:	2100      	movs	r1, #0
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff fba9 	bl	8009de0 <dir_next>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800a694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d107      	bne.n	800a6ac <dir_register+0x184>
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	623b      	str	r3, [r7, #32]
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1d5      	bne.n	800a654 <dir_register+0x12c>
 800a6a8:	e000      	b.n	800a6ac <dir_register+0x184>
				if (res != FR_OK) break;
 800a6aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a6ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d128      	bne.n	800a706 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	69f8      	ldr	r0, [r7, #28]
 800a6bc:	f7fe ff28 	bl	8009510 <move_window>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a6c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d11b      	bne.n	800a706 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fd0d 	bl	80090f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a18      	ldr	r0, [r3, #32]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3324      	adds	r3, #36	@ 0x24
 800a6e4:	220b      	movs	r2, #11
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	f7fe fce4 	bl	80090b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	f002 0218 	and.w	r2, r2, #24
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2201      	movs	r2, #1
 800a704:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3730      	adds	r7, #48	@ 0x30
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	4ec4ec4f 	.word	0x4ec4ec4f

0800a718 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	@ 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	61ba      	str	r2, [r7, #24]
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	4413      	add	r3, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a748:	2b1f      	cmp	r3, #31
 800a74a:	d940      	bls.n	800a7ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a74e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a750:	d006      	beq.n	800a760 <create_name+0x48>
 800a752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a754:	2b5c      	cmp	r3, #92	@ 0x5c
 800a756:	d110      	bne.n	800a77a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a758:	e002      	b.n	800a760 <create_name+0x48>
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	3301      	adds	r3, #1
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	4413      	add	r3, r2
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b2f      	cmp	r3, #47	@ 0x2f
 800a76a:	d0f6      	beq.n	800a75a <create_name+0x42>
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	4413      	add	r3, r2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b5c      	cmp	r3, #92	@ 0x5c
 800a776:	d0f0      	beq.n	800a75a <create_name+0x42>
			break;
 800a778:	e02a      	b.n	800a7d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2bfe      	cmp	r3, #254	@ 0xfe
 800a77e:	d901      	bls.n	800a784 <create_name+0x6c>
 800a780:	2306      	movs	r3, #6
 800a782:	e17d      	b.n	800aa80 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a786:	b2db      	uxtb	r3, r3
 800a788:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a78a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a78c:	2101      	movs	r1, #1
 800a78e:	4618      	mov	r0, r3
 800a790:	f001 fbdc 	bl	800bf4c <ff_convert>
 800a794:	4603      	mov	r3, r0
 800a796:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <create_name+0x8a>
 800a79e:	2306      	movs	r3, #6
 800a7a0:	e16e      	b.n	800aa80 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a7a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7a6:	d809      	bhi.n	800a7bc <create_name+0xa4>
 800a7a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	488d      	ldr	r0, [pc, #564]	@ (800a9e4 <create_name+0x2cc>)
 800a7ae:	f7fe fce4 	bl	800917a <chk_chr>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <create_name+0xa4>
 800a7b8:	2306      	movs	r3, #6
 800a7ba:	e161      	b.n	800aa80 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	617a      	str	r2, [r7, #20]
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a7ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a7cc:	e7b4      	b.n	800a738 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a7ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a7da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7dc:	2b1f      	cmp	r3, #31
 800a7de:	d801      	bhi.n	800a7e4 <create_name+0xcc>
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	e000      	b.n	800a7e6 <create_name+0xce>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a7ea:	e011      	b.n	800a810 <create_name+0xf8>
		w = lfn[di - 1];
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a800:	2b20      	cmp	r3, #32
 800a802:	d002      	beq.n	800a80a <create_name+0xf2>
 800a804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a806:	2b2e      	cmp	r3, #46	@ 0x2e
 800a808:	d106      	bne.n	800a818 <create_name+0x100>
		di--;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1ea      	bne.n	800a7ec <create_name+0xd4>
 800a816:	e000      	b.n	800a81a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a818:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	4413      	add	r3, r2
 800a822:	2200      	movs	r2, #0
 800a824:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <create_name+0x118>
 800a82c:	2306      	movs	r3, #6
 800a82e:	e127      	b.n	800aa80 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3324      	adds	r3, #36	@ 0x24
 800a834:	220b      	movs	r2, #11
 800a836:	2120      	movs	r1, #32
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fc5c 	bl	80090f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a83e:	2300      	movs	r3, #0
 800a840:	61bb      	str	r3, [r7, #24]
 800a842:	e002      	b.n	800a84a <create_name+0x132>
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	3301      	adds	r3, #1
 800a848:	61bb      	str	r3, [r7, #24]
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4413      	add	r3, r2
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	2b20      	cmp	r3, #32
 800a856:	d0f5      	beq.n	800a844 <create_name+0x12c>
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	2b2e      	cmp	r3, #46	@ 0x2e
 800a864:	d0ee      	beq.n	800a844 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d009      	beq.n	800a880 <create_name+0x168>
 800a86c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a870:	f043 0303 	orr.w	r3, r3, #3
 800a874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a878:	e002      	b.n	800a880 <create_name+0x168>
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d009      	beq.n	800a89a <create_name+0x182>
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a88c:	3b01      	subs	r3, #1
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	2b2e      	cmp	r3, #46	@ 0x2e
 800a898:	d1ef      	bne.n	800a87a <create_name+0x162>

	i = b = 0; ni = 8;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	623b      	str	r3, [r7, #32]
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	61ba      	str	r2, [r7, #24]
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a8b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 8090 	beq.w	800a9e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a8c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8c2:	2b20      	cmp	r3, #32
 800a8c4:	d006      	beq.n	800a8d4 <create_name+0x1bc>
 800a8c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ca:	d10a      	bne.n	800a8e2 <create_name+0x1ca>
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d006      	beq.n	800a8e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8d8:	f043 0303 	orr.w	r3, r3, #3
 800a8dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a8e0:	e07d      	b.n	800a9de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a8e2:	6a3a      	ldr	r2, [r7, #32]
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d203      	bcs.n	800a8f2 <create_name+0x1da>
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d123      	bne.n	800a93a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	2b0b      	cmp	r3, #11
 800a8f6:	d106      	bne.n	800a906 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8fc:	f043 0303 	orr.w	r3, r3, #3
 800a900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a904:	e075      	b.n	800a9f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d005      	beq.n	800a91a <create_name+0x202>
 800a90e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a912:	f043 0303 	orr.w	r3, r3, #3
 800a916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d866      	bhi.n	800a9f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	2308      	movs	r3, #8
 800a928:	623b      	str	r3, [r7, #32]
 800a92a:	230b      	movs	r3, #11
 800a92c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a92e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a938:	e051      	b.n	800a9de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a93c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a93e:	d914      	bls.n	800a96a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fb01 	bl	800bf4c <ff_convert>
 800a94a:	4603      	mov	r3, r0
 800a94c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a94e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <create_name+0x246>
 800a954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a956:	3b80      	subs	r3, #128	@ 0x80
 800a958:	4a23      	ldr	r2, [pc, #140]	@ (800a9e8 <create_name+0x2d0>)
 800a95a:	5cd3      	ldrb	r3, [r2, r3]
 800a95c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a95e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a962:	f043 0302 	orr.w	r3, r3, #2
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a96a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <create_name+0x268>
 800a970:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a972:	4619      	mov	r1, r3
 800a974:	481d      	ldr	r0, [pc, #116]	@ (800a9ec <create_name+0x2d4>)
 800a976:	f7fe fc00 	bl	800917a <chk_chr>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d008      	beq.n	800a992 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a980:	235f      	movs	r3, #95	@ 0x5f
 800a982:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a988:	f043 0303 	orr.w	r3, r3, #3
 800a98c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a990:	e01b      	b.n	800a9ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a994:	2b40      	cmp	r3, #64	@ 0x40
 800a996:	d909      	bls.n	800a9ac <create_name+0x294>
 800a998:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a99a:	2b5a      	cmp	r3, #90	@ 0x5a
 800a99c:	d806      	bhi.n	800a9ac <create_name+0x294>
					b |= 2;
 800a99e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9a2:	f043 0302 	orr.w	r3, r3, #2
 800a9a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a9aa:	e00e      	b.n	800a9ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a9ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9ae:	2b60      	cmp	r3, #96	@ 0x60
 800a9b0:	d90b      	bls.n	800a9ca <create_name+0x2b2>
 800a9b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9b4:	2b7a      	cmp	r3, #122	@ 0x7a
 800a9b6:	d808      	bhi.n	800a9ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a9b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9bc:	f043 0301 	orr.w	r3, r3, #1
 800a9c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a9c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9c6:	3b20      	subs	r3, #32
 800a9c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	623a      	str	r2, [r7, #32]
 800a9d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9d2:	b2d1      	uxtb	r1, r2
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	460a      	mov	r2, r1
 800a9da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a9de:	e763      	b.n	800a8a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a9e0:	bf00      	nop
 800a9e2:	e006      	b.n	800a9f2 <create_name+0x2da>
 800a9e4:	0800f758 	.word	0x0800f758
 800a9e8:	0800fcc0 	.word	0x0800fcc0
 800a9ec:	0800f764 	.word	0x0800f764
			if (si > di) break;			/* No extension */
 800a9f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a9f8:	2be5      	cmp	r3, #229	@ 0xe5
 800a9fa:	d103      	bne.n	800aa04 <create_name+0x2ec>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2205      	movs	r2, #5
 800aa00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	2b08      	cmp	r3, #8
 800aa08:	d104      	bne.n	800aa14 <create_name+0x2fc>
 800aa0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aa14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa18:	f003 030c 	and.w	r3, r3, #12
 800aa1c:	2b0c      	cmp	r3, #12
 800aa1e:	d005      	beq.n	800aa2c <create_name+0x314>
 800aa20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d105      	bne.n	800aa38 <create_name+0x320>
 800aa2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa30:	f043 0302 	orr.w	r3, r3, #2
 800aa34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aa38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d117      	bne.n	800aa74 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aa44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d105      	bne.n	800aa5c <create_name+0x344>
 800aa50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa54:	f043 0310 	orr.w	r3, r3, #16
 800aa58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aa5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa60:	f003 030c 	and.w	r3, r3, #12
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d105      	bne.n	800aa74 <create_name+0x35c>
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6c:	f043 0308 	orr.w	r3, r3, #8
 800aa70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aa7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800aa7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3728      	adds	r7, #40	@ 0x28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa9c:	e002      	b.n	800aaa4 <follow_path+0x1c>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b2f      	cmp	r3, #47	@ 0x2f
 800aaaa:	d0f8      	beq.n	800aa9e <follow_path+0x16>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b5c      	cmp	r3, #92	@ 0x5c
 800aab2:	d0f4      	beq.n	800aa9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2200      	movs	r2, #0
 800aab8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b1f      	cmp	r3, #31
 800aac0:	d80a      	bhi.n	800aad8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2280      	movs	r2, #128	@ 0x80
 800aac6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aaca:	2100      	movs	r1, #0
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff f8fe 	bl	8009cce <dir_sdi>
 800aad2:	4603      	mov	r3, r0
 800aad4:	75fb      	strb	r3, [r7, #23]
 800aad6:	e048      	b.n	800ab6a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aad8:	463b      	mov	r3, r7
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fe1b 	bl	800a718 <create_name>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d139      	bne.n	800ab60 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff fc5a 	bl	800a3a6 <dir_find>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aafc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d12c      	bne.n	800ab64 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab0a:	7afb      	ldrb	r3, [r7, #11]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d127      	bne.n	800ab64 <follow_path+0xdc>
 800ab14:	2305      	movs	r3, #5
 800ab16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab18:	e024      	b.n	800ab64 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d121      	bne.n	800ab68 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	799b      	ldrb	r3, [r3, #6]
 800ab28:	f003 0310 	and.w	r3, r3, #16
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab30:	2305      	movs	r3, #5
 800ab32:	75fb      	strb	r3, [r7, #23]
 800ab34:	e019      	b.n	800ab6a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	8992      	ldrh	r2, [r2, #12]
 800ab44:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab48:	fb00 f202 	mul.w	r2, r0, r2
 800ab4c:	1a9b      	subs	r3, r3, r2
 800ab4e:	440b      	add	r3, r1
 800ab50:	4619      	mov	r1, r3
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fa61 	bl	800a01a <ld_clust>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab5e:	e7bb      	b.n	800aad8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <follow_path+0xe2>
				break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab68:	bf00      	nop
			}
		}
	}

	return res;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d031      	beq.n	800abee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	e002      	b.n	800ab98 <get_ldnumber+0x24>
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	3301      	adds	r3, #1
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b1f      	cmp	r3, #31
 800ab9e:	d903      	bls.n	800aba8 <get_ldnumber+0x34>
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b3a      	cmp	r3, #58	@ 0x3a
 800aba6:	d1f4      	bne.n	800ab92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b3a      	cmp	r3, #58	@ 0x3a
 800abae:	d11c      	bne.n	800abea <get_ldnumber+0x76>
			tp = *path;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	60fa      	str	r2, [r7, #12]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	3b30      	subs	r3, #48	@ 0x30
 800abc0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	d80e      	bhi.n	800abe6 <get_ldnumber+0x72>
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d10a      	bne.n	800abe6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d107      	bne.n	800abe6 <get_ldnumber+0x72>
					vol = (int)i;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	3301      	adds	r3, #1
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	e002      	b.n	800abf0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800abea:	2300      	movs	r3, #0
 800abec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800abee:	693b      	ldr	r3, [r7, #16]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	70da      	strb	r2, [r3, #3]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac12:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7fe fc7a 	bl	8009510 <move_window>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <check_fs+0x2a>
 800ac22:	2304      	movs	r3, #4
 800ac24:	e038      	b.n	800ac98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3338      	adds	r3, #56	@ 0x38
 800ac2a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe f9be 	bl	8008fb0 <ld_word>
 800ac34:	4603      	mov	r3, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d001      	beq.n	800ac44 <check_fs+0x48>
 800ac40:	2303      	movs	r3, #3
 800ac42:	e029      	b.n	800ac98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac4a:	2be9      	cmp	r3, #233	@ 0xe9
 800ac4c:	d009      	beq.n	800ac62 <check_fs+0x66>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac54:	2beb      	cmp	r3, #235	@ 0xeb
 800ac56:	d11e      	bne.n	800ac96 <check_fs+0x9a>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ac5e:	2b90      	cmp	r3, #144	@ 0x90
 800ac60:	d119      	bne.n	800ac96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3338      	adds	r3, #56	@ 0x38
 800ac66:	3336      	adds	r3, #54	@ 0x36
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe f9b9 	bl	8008fe0 <ld_dword>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ac74:	4a0a      	ldr	r2, [pc, #40]	@ (800aca0 <check_fs+0xa4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d101      	bne.n	800ac7e <check_fs+0x82>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e00c      	b.n	800ac98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3338      	adds	r3, #56	@ 0x38
 800ac82:	3352      	adds	r3, #82	@ 0x52
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe f9ab 	bl	8008fe0 <ld_dword>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4a05      	ldr	r2, [pc, #20]	@ (800aca4 <check_fs+0xa8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d101      	bne.n	800ac96 <check_fs+0x9a>
 800ac92:	2300      	movs	r3, #0
 800ac94:	e000      	b.n	800ac98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac96:	2302      	movs	r3, #2
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	00544146 	.word	0x00544146
 800aca4:	33544146 	.word	0x33544146

0800aca8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b096      	sub	sp, #88	@ 0x58
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	4613      	mov	r3, r2
 800acb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2200      	movs	r2, #0
 800acba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff59 	bl	800ab74 <get_ldnumber>
 800acc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800acc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da01      	bge.n	800acce <find_volume+0x26>
 800acca:	230b      	movs	r3, #11
 800accc:	e265      	b.n	800b19a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acce:	4a9f      	ldr	r2, [pc, #636]	@ (800af4c <find_volume+0x2a4>)
 800acd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800acd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <find_volume+0x3a>
 800acde:	230c      	movs	r3, #12
 800ace0:	e25b      	b.n	800b19a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ace6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	f023 0301 	bic.w	r3, r3, #1
 800acee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800acf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01a      	beq.n	800ad2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800acf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfa:	785b      	ldrb	r3, [r3, #1]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe f8b7 	bl	8008e70 <disk_status>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10c      	bne.n	800ad2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <find_volume+0x82>
 800ad1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad26:	230a      	movs	r3, #10
 800ad28:	e237      	b.n	800b19a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e235      	b.n	800b19a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	2200      	movs	r2, #0
 800ad32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe f8af 	bl	8008ea4 <disk_initialize>
 800ad46:	4603      	mov	r3, r0
 800ad48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e21e      	b.n	800b19a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <find_volume+0xca>
 800ad62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad6e:	230a      	movs	r3, #10
 800ad70:	e213      	b.n	800b19a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ad72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad74:	7858      	ldrb	r0, [r3, #1]
 800ad76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad78:	330c      	adds	r3, #12
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	2102      	movs	r1, #2
 800ad7e:	f7fe f8f9 	bl	8008f74 <disk_ioctl>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <find_volume+0xe4>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e206      	b.n	800b19a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	899b      	ldrh	r3, [r3, #12]
 800ad90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad94:	d80d      	bhi.n	800adb2 <find_volume+0x10a>
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	899b      	ldrh	r3, [r3, #12]
 800ad9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad9e:	d308      	bcc.n	800adb2 <find_volume+0x10a>
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	899b      	ldrh	r3, [r3, #12]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada8:	899b      	ldrh	r3, [r3, #12]
 800adaa:	3b01      	subs	r3, #1
 800adac:	4013      	ands	r3, r2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <find_volume+0x10e>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e1f1      	b.n	800b19a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800adba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800adbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800adbe:	f7ff ff1d 	bl	800abfc <check_fs>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800adc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d149      	bne.n	800ae64 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800add0:	2300      	movs	r3, #0
 800add2:	643b      	str	r3, [r7, #64]	@ 0x40
 800add4:	e01e      	b.n	800ae14 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800add6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800addc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ade4:	4413      	add	r3, r2
 800ade6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adea:	3304      	adds	r3, #4
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d006      	beq.n	800ae00 <find_volume+0x158>
 800adf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf4:	3308      	adds	r3, #8
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe f8f2 	bl	8008fe0 <ld_dword>
 800adfc:	4602      	mov	r2, r0
 800adfe:	e000      	b.n	800ae02 <find_volume+0x15a>
 800ae00:	2200      	movs	r2, #0
 800ae02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	3358      	adds	r3, #88	@ 0x58
 800ae08:	443b      	add	r3, r7
 800ae0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae10:	3301      	adds	r3, #1
 800ae12:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d9dd      	bls.n	800add6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ae1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <find_volume+0x182>
 800ae24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae26:	3b01      	subs	r3, #1
 800ae28:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	3358      	adds	r3, #88	@ 0x58
 800ae30:	443b      	add	r3, r7
 800ae32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae36:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d005      	beq.n	800ae4a <find_volume+0x1a2>
 800ae3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae42:	f7ff fedb 	bl	800abfc <check_fs>
 800ae46:	4603      	mov	r3, r0
 800ae48:	e000      	b.n	800ae4c <find_volume+0x1a4>
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d905      	bls.n	800ae64 <find_volume+0x1bc>
 800ae58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae60:	2b03      	cmp	r3, #3
 800ae62:	d9e2      	bls.n	800ae2a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d101      	bne.n	800ae70 <find_volume+0x1c8>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e194      	b.n	800b19a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d901      	bls.n	800ae7c <find_volume+0x1d4>
 800ae78:	230d      	movs	r3, #13
 800ae7a:	e18e      	b.n	800b19a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7e:	3338      	adds	r3, #56	@ 0x38
 800ae80:	330b      	adds	r3, #11
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe f894 	bl	8008fb0 <ld_word>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	899b      	ldrh	r3, [r3, #12]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d001      	beq.n	800ae98 <find_volume+0x1f0>
 800ae94:	230d      	movs	r3, #13
 800ae96:	e180      	b.n	800b19a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9a:	3338      	adds	r3, #56	@ 0x38
 800ae9c:	3316      	adds	r3, #22
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe f886 	bl	8008fb0 <ld_word>
 800aea4:	4603      	mov	r3, r0
 800aea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800aea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <find_volume+0x214>
 800aeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb0:	3338      	adds	r3, #56	@ 0x38
 800aeb2:	3324      	adds	r3, #36	@ 0x24
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe f893 	bl	8008fe0 <ld_dword>
 800aeba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800aebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aec0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aece:	789b      	ldrb	r3, [r3, #2]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d005      	beq.n	800aee0 <find_volume+0x238>
 800aed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed6:	789b      	ldrb	r3, [r3, #2]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d001      	beq.n	800aee0 <find_volume+0x238>
 800aedc:	230d      	movs	r3, #13
 800aede:	e15c      	b.n	800b19a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee2:	789b      	ldrb	r3, [r3, #2]
 800aee4:	461a      	mov	r2, r3
 800aee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aef4:	461a      	mov	r2, r3
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	895b      	ldrh	r3, [r3, #10]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d008      	beq.n	800af14 <find_volume+0x26c>
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	895b      	ldrh	r3, [r3, #10]
 800af06:	461a      	mov	r2, r3
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	895b      	ldrh	r3, [r3, #10]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <find_volume+0x270>
 800af14:	230d      	movs	r3, #13
 800af16:	e140      	b.n	800b19a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	3338      	adds	r3, #56	@ 0x38
 800af1c:	3311      	adds	r3, #17
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe f846 	bl	8008fb0 <ld_word>
 800af24:	4603      	mov	r3, r0
 800af26:	461a      	mov	r2, r3
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	891b      	ldrh	r3, [r3, #8]
 800af30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af32:	8992      	ldrh	r2, [r2, #12]
 800af34:	0952      	lsrs	r2, r2, #5
 800af36:	b292      	uxth	r2, r2
 800af38:	fbb3 f1f2 	udiv	r1, r3, r2
 800af3c:	fb01 f202 	mul.w	r2, r1, r2
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	b29b      	uxth	r3, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <find_volume+0x2a8>
 800af48:	230d      	movs	r3, #13
 800af4a:	e126      	b.n	800b19a <find_volume+0x4f2>
 800af4c:	200015b4 	.word	0x200015b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af52:	3338      	adds	r3, #56	@ 0x38
 800af54:	3313      	adds	r3, #19
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe f82a 	bl	8008fb0 <ld_word>
 800af5c:	4603      	mov	r3, r0
 800af5e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af62:	2b00      	cmp	r3, #0
 800af64:	d106      	bne.n	800af74 <find_volume+0x2cc>
 800af66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af68:	3338      	adds	r3, #56	@ 0x38
 800af6a:	3320      	adds	r3, #32
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe f837 	bl	8008fe0 <ld_dword>
 800af72:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af76:	3338      	adds	r3, #56	@ 0x38
 800af78:	330e      	adds	r3, #14
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe f818 	bl	8008fb0 <ld_word>
 800af80:	4603      	mov	r3, r0
 800af82:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <find_volume+0x2e6>
 800af8a:	230d      	movs	r3, #13
 800af8c:	e105      	b.n	800b19a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af92:	4413      	add	r3, r2
 800af94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af96:	8911      	ldrh	r1, [r2, #8]
 800af98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af9a:	8992      	ldrh	r2, [r2, #12]
 800af9c:	0952      	lsrs	r2, r2, #5
 800af9e:	b292      	uxth	r2, r2
 800afa0:	fbb1 f2f2 	udiv	r2, r1, r2
 800afa4:	b292      	uxth	r2, r2
 800afa6:	4413      	add	r3, r2
 800afa8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800afaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	429a      	cmp	r2, r3
 800afb0:	d201      	bcs.n	800afb6 <find_volume+0x30e>
 800afb2:	230d      	movs	r3, #13
 800afb4:	e0f1      	b.n	800b19a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800afb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afbe:	8952      	ldrh	r2, [r2, #10]
 800afc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afc4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <find_volume+0x328>
 800afcc:	230d      	movs	r3, #13
 800afce:	e0e4      	b.n	800b19a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800afd0:	2303      	movs	r3, #3
 800afd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800afdc:	4293      	cmp	r3, r2
 800afde:	d802      	bhi.n	800afe6 <find_volume+0x33e>
 800afe0:	2302      	movs	r3, #2
 800afe2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800afec:	4293      	cmp	r3, r2
 800afee:	d802      	bhi.n	800aff6 <find_volume+0x34e>
 800aff0:	2301      	movs	r3, #1
 800aff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	1c9a      	adds	r2, r3, #2
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800affe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b000:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b002:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b004:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b008:	441a      	add	r2, r3
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b00e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b012:	441a      	add	r2, r3
 800b014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b016:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b018:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d11e      	bne.n	800b05e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b022:	3338      	adds	r3, #56	@ 0x38
 800b024:	332a      	adds	r3, #42	@ 0x2a
 800b026:	4618      	mov	r0, r3
 800b028:	f7fd ffc2 	bl	8008fb0 <ld_word>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <find_volume+0x38e>
 800b032:	230d      	movs	r3, #13
 800b034:	e0b1      	b.n	800b19a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	891b      	ldrh	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <find_volume+0x39a>
 800b03e:	230d      	movs	r3, #13
 800b040:	e0ab      	b.n	800b19a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	3338      	adds	r3, #56	@ 0x38
 800b046:	332c      	adds	r3, #44	@ 0x2c
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fd ffc9 	bl	8008fe0 <ld_dword>
 800b04e:	4602      	mov	r2, r0
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b05c:	e01f      	b.n	800b09e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	891b      	ldrh	r3, [r3, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <find_volume+0x3c2>
 800b066:	230d      	movs	r3, #13
 800b068:	e097      	b.n	800b19a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b06e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b070:	441a      	add	r2, r3
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b076:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d103      	bne.n	800b086 <find_volume+0x3de>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	e00a      	b.n	800b09c <find_volume+0x3f4>
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	69da      	ldr	r2, [r3, #28]
 800b08a:	4613      	mov	r3, r2
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	4413      	add	r3, r2
 800b090:	085a      	lsrs	r2, r3, #1
 800b092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b09c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	6a1a      	ldr	r2, [r3, #32]
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	899b      	ldrh	r3, [r3, #12]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0aa:	440b      	add	r3, r1
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0b0:	8989      	ldrh	r1, [r1, #12]
 800b0b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d201      	bcs.n	800b0be <find_volume+0x416>
 800b0ba:	230d      	movs	r3, #13
 800b0bc:	e06d      	b.n	800b19a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	619a      	str	r2, [r3, #24]
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	699a      	ldr	r2, [r3, #24]
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	2280      	movs	r2, #128	@ 0x80
 800b0d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d149      	bne.n	800b170 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	3338      	adds	r3, #56	@ 0x38
 800b0e0:	3330      	adds	r3, #48	@ 0x30
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fd ff64 	bl	8008fb0 <ld_word>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d140      	bne.n	800b170 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0f6:	f7fe fa0b 	bl	8009510 <move_window>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d137      	bne.n	800b170 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	2200      	movs	r2, #0
 800b104:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b108:	3338      	adds	r3, #56	@ 0x38
 800b10a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fd ff4e 	bl	8008fb0 <ld_word>
 800b114:	4603      	mov	r3, r0
 800b116:	461a      	mov	r2, r3
 800b118:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d127      	bne.n	800b170 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b122:	3338      	adds	r3, #56	@ 0x38
 800b124:	4618      	mov	r0, r3
 800b126:	f7fd ff5b 	bl	8008fe0 <ld_dword>
 800b12a:	4603      	mov	r3, r0
 800b12c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a4 <find_volume+0x4fc>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d11e      	bne.n	800b170 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b134:	3338      	adds	r3, #56	@ 0x38
 800b136:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fd ff50 	bl	8008fe0 <ld_dword>
 800b140:	4603      	mov	r3, r0
 800b142:	4a19      	ldr	r2, [pc, #100]	@ (800b1a8 <find_volume+0x500>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d113      	bne.n	800b170 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	3338      	adds	r3, #56	@ 0x38
 800b14c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b150:	4618      	mov	r0, r3
 800b152:	f7fd ff45 	bl	8008fe0 <ld_dword>
 800b156:	4602      	mov	r2, r0
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	3338      	adds	r3, #56	@ 0x38
 800b160:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b164:	4618      	mov	r0, r3
 800b166:	f7fd ff3b 	bl	8008fe0 <ld_dword>
 800b16a:	4602      	mov	r2, r0
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b176:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b178:	4b0c      	ldr	r3, [pc, #48]	@ (800b1ac <find_volume+0x504>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	3301      	adds	r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	4b0a      	ldr	r3, [pc, #40]	@ (800b1ac <find_volume+0x504>)
 800b182:	801a      	strh	r2, [r3, #0]
 800b184:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <find_volume+0x504>)
 800b186:	881a      	ldrh	r2, [r3, #0]
 800b188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18e:	4a08      	ldr	r2, [pc, #32]	@ (800b1b0 <find_volume+0x508>)
 800b190:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b192:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b194:	f7fe f954 	bl	8009440 <clear_lock>
#endif
	return FR_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3758      	adds	r7, #88	@ 0x58
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	41615252 	.word	0x41615252
 800b1a8:	61417272 	.word	0x61417272
 800b1ac:	200015b8 	.word	0x200015b8
 800b1b0:	200015dc 	.word	0x200015dc

0800b1b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b1be:	2309      	movs	r3, #9
 800b1c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01c      	beq.n	800b202 <validate+0x4e>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d018      	beq.n	800b202 <validate+0x4e>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d013      	beq.n	800b202 <validate+0x4e>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	889a      	ldrh	r2, [r3, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	88db      	ldrh	r3, [r3, #6]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d10c      	bne.n	800b202 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	785b      	ldrb	r3, [r3, #1]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fd fe3e 	bl	8008e70 <disk_status>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <validate+0x4e>
			res = FR_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <validate+0x5a>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	e000      	b.n	800b210 <validate+0x5c>
 800b20e:	2300      	movs	r3, #0
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	6013      	str	r3, [r2, #0]
	return res;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b232:	f107 0310 	add.w	r3, r7, #16
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fc9c 	bl	800ab74 <get_ldnumber>
 800b23c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	2b00      	cmp	r3, #0
 800b242:	da01      	bge.n	800b248 <f_mount+0x28>
 800b244:	230b      	movs	r3, #11
 800b246:	e02b      	b.n	800b2a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b248:	4a17      	ldr	r2, [pc, #92]	@ (800b2a8 <f_mount+0x88>)
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b250:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b258:	69b8      	ldr	r0, [r7, #24]
 800b25a:	f7fe f8f1 	bl	8009440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	490d      	ldr	r1, [pc, #52]	@ (800b2a8 <f_mount+0x88>)
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <f_mount+0x66>
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d001      	beq.n	800b28a <f_mount+0x6a>
 800b286:	2300      	movs	r3, #0
 800b288:	e00a      	b.n	800b2a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b28a:	f107 010c 	add.w	r1, r7, #12
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	2200      	movs	r2, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fd07 	bl	800aca8 <find_volume>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	200015b4 	.word	0x200015b4

0800b2ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b09a      	sub	sp, #104	@ 0x68
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <f_open+0x18>
 800b2c0:	2309      	movs	r3, #9
 800b2c2:	e1b7      	b.n	800b634 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b2c4:	79fb      	ldrb	r3, [r7, #7]
 800b2c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b2cc:	79fa      	ldrb	r2, [r7, #7]
 800b2ce:	f107 0114 	add.w	r1, r7, #20
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fce6 	bl	800aca8 <find_volume>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b2e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f040 819b 	bne.w	800b622 <f_open+0x376>
		dj.obj.fs = fs;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	f107 0318 	add.w	r3, r7, #24
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7ff fbc5 	bl	800aa88 <follow_path>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b304:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d118      	bne.n	800b33e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b30c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b310:	b25b      	sxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	da03      	bge.n	800b31e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b316:	2306      	movs	r3, #6
 800b318:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b31c:	e00f      	b.n	800b33e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	2b01      	cmp	r3, #1
 800b322:	bf8c      	ite	hi
 800b324:	2301      	movhi	r3, #1
 800b326:	2300      	movls	r3, #0
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	f107 0318 	add.w	r3, r7, #24
 800b330:	4611      	mov	r1, r2
 800b332:	4618      	mov	r0, r3
 800b334:	f7fd ff3c 	bl	80091b0 <chk_lock>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	f003 031c 	and.w	r3, r3, #28
 800b344:	2b00      	cmp	r3, #0
 800b346:	d07f      	beq.n	800b448 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b348:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d017      	beq.n	800b380 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b350:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b354:	2b04      	cmp	r3, #4
 800b356:	d10e      	bne.n	800b376 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b358:	f7fd ff86 	bl	8009268 <enq_lock>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d006      	beq.n	800b370 <f_open+0xc4>
 800b362:	f107 0318 	add.w	r3, r7, #24
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff f8de 	bl	800a528 <dir_register>
 800b36c:	4603      	mov	r3, r0
 800b36e:	e000      	b.n	800b372 <f_open+0xc6>
 800b370:	2312      	movs	r3, #18
 800b372:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	f043 0308 	orr.w	r3, r3, #8
 800b37c:	71fb      	strb	r3, [r7, #7]
 800b37e:	e010      	b.n	800b3a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b380:	7fbb      	ldrb	r3, [r7, #30]
 800b382:	f003 0311 	and.w	r3, r3, #17
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <f_open+0xe6>
					res = FR_DENIED;
 800b38a:	2307      	movs	r3, #7
 800b38c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b390:	e007      	b.n	800b3a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <f_open+0xf6>
 800b39c:	2308      	movs	r3, #8
 800b39e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b3a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d168      	bne.n	800b47c <f_open+0x1d0>
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d063      	beq.n	800b47c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b3b4:	f7fd fcfe 	bl	8008db4 <get_fattime>
 800b3b8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	330e      	adds	r3, #14
 800b3be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fd fe4b 	bl	800905c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c8:	3316      	adds	r3, #22
 800b3ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fd fe45 	bl	800905c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	330b      	adds	r3, #11
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fe1a 	bl	800a01a <ld_clust>
 800b3e6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe fe32 	bl	800a058 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	331c      	adds	r3, #28
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fd fe2e 	bl	800905c <st_dword>
					fs->wflag = 1;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2201      	movs	r2, #1
 800b404:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d037      	beq.n	800b47c <f_open+0x1d0>
						dw = fs->winsect;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b410:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b412:	f107 0318 	add.w	r3, r7, #24
 800b416:	2200      	movs	r2, #0
 800b418:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fb22 	bl	8009a64 <remove_chain>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b426:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d126      	bne.n	800b47c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe f86c 	bl	8009510 <move_window>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b442:	3a01      	subs	r2, #1
 800b444:	615a      	str	r2, [r3, #20]
 800b446:	e019      	b.n	800b47c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b448:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d115      	bne.n	800b47c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b450:	7fbb      	ldrb	r3, [r7, #30]
 800b452:	f003 0310 	and.w	r3, r3, #16
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b45a:	2304      	movs	r3, #4
 800b45c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b460:	e00c      	b.n	800b47c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d007      	beq.n	800b47c <f_open+0x1d0>
 800b46c:	7fbb      	ldrb	r3, [r7, #30]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <f_open+0x1d0>
						res = FR_DENIED;
 800b476:	2307      	movs	r3, #7
 800b478:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b47c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b480:	2b00      	cmp	r3, #0
 800b482:	d126      	bne.n	800b4d2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	f003 0308 	and.w	r3, r3, #8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b494:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b49e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	bf8c      	ite	hi
 800b4aa:	2301      	movhi	r3, #1
 800b4ac:	2300      	movls	r3, #0
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f107 0318 	add.w	r3, r7, #24
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fd fef7 	bl	80092ac <inc_lock>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <f_open+0x226>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b4d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f040 80a3 	bne.w	800b622 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fd99 	bl	800a01a <ld_clust>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f0:	331c      	adds	r3, #28
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd fd74 	bl	8008fe0 <ld_dword>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	88da      	ldrh	r2, [r3, #6]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	79fa      	ldrb	r2, [r7, #7]
 800b516:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3330      	adds	r3, #48	@ 0x30
 800b52e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd fdde 	bl	80090f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	f003 0320 	and.w	r3, r3, #32
 800b540:	2b00      	cmp	r3, #0
 800b542:	d06e      	beq.n	800b622 <f_open+0x376>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d06a      	beq.n	800b622 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	895b      	ldrh	r3, [r3, #10]
 800b558:	461a      	mov	r2, r3
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	fb02 f303 	mul.w	r3, r2, r3
 800b562:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b570:	e016      	b.n	800b5a0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe f887 	bl	800968a <get_fat>
 800b57c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b580:	2b01      	cmp	r3, #1
 800b582:	d802      	bhi.n	800b58a <f_open+0x2de>
 800b584:	2302      	movs	r3, #2
 800b586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b58a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d102      	bne.n	800b598 <f_open+0x2ec>
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b598:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d103      	bne.n	800b5b0 <f_open+0x304>
 800b5a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d8e0      	bhi.n	800b572 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d131      	bne.n	800b622 <f_open+0x376>
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	899b      	ldrh	r3, [r3, #12]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5ca:	fb01 f202 	mul.w	r2, r1, r2
 800b5ce:	1a9b      	subs	r3, r3, r2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d026      	beq.n	800b622 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe f837 	bl	800964c <clust2sect>
 800b5de:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d103      	bne.n	800b5ee <f_open+0x342>
						res = FR_INT_ERR;
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b5ec:	e019      	b.n	800b622 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	899b      	ldrh	r3, [r3, #12]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5fc:	441a      	add	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	7858      	ldrb	r0, [r3, #1]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	2301      	movs	r3, #1
 800b612:	f7fd fc6f 	bl	8008ef4 <disk_read>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <f_open+0x376>
 800b61c:	2301      	movs	r3, #1
 800b61e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b622:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b626:	2b00      	cmp	r3, #0
 800b628:	d002      	beq.n	800b630 <f_open+0x384>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b630:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800b634:	4618      	mov	r0, r3
 800b636:	3768      	adds	r7, #104	@ 0x68
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b08e      	sub	sp, #56	@ 0x38
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f107 0214 	add.w	r2, r7, #20
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fda9 	bl	800b1b4 <validate>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d107      	bne.n	800b680 <f_read+0x44>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	7d5b      	ldrb	r3, [r3, #21]
 800b674:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <f_read+0x4a>
 800b680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b684:	e135      	b.n	800b8f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	7d1b      	ldrb	r3, [r3, #20]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <f_read+0x5a>
 800b692:	2307      	movs	r3, #7
 800b694:	e12d      	b.n	800b8f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	f240 811e 	bls.w	800b8e8 <f_read+0x2ac>
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b6b0:	e11a      	b.n	800b8e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	8992      	ldrh	r2, [r2, #12]
 800b6ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6be:	fb01 f202 	mul.w	r2, r1, r2
 800b6c2:	1a9b      	subs	r3, r3, r2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 80d5 	bne.w	800b874 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	8992      	ldrh	r2, [r2, #12]
 800b6d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	8952      	ldrh	r2, [r2, #10]
 800b6da:	3a01      	subs	r2, #1
 800b6dc:	4013      	ands	r3, r2
 800b6de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d12f      	bne.n	800b746 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d103      	bne.n	800b6f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f4:	e013      	b.n	800b71e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	4619      	mov	r1, r3
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f7fe faaa 	bl	8009c5e <clmt_clust>
 800b70a:	6338      	str	r0, [r7, #48]	@ 0x30
 800b70c:	e007      	b.n	800b71e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7fd ffb7 	bl	800968a <get_fat>
 800b71c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	2b01      	cmp	r3, #1
 800b722:	d804      	bhi.n	800b72e <f_read+0xf2>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2202      	movs	r2, #2
 800b728:	755a      	strb	r2, [r3, #21]
 800b72a:	2302      	movs	r3, #2
 800b72c:	e0e1      	b.n	800b8f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b734:	d104      	bne.n	800b740 <f_read+0x104>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	755a      	strb	r2, [r3, #21]
 800b73c:	2301      	movs	r3, #1
 800b73e:	e0d8      	b.n	800b8f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b744:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	4619      	mov	r1, r3
 800b74e:	4610      	mov	r0, r2
 800b750:	f7fd ff7c 	bl	800964c <clust2sect>
 800b754:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <f_read+0x12a>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2202      	movs	r2, #2
 800b760:	755a      	strb	r2, [r3, #21]
 800b762:	2302      	movs	r3, #2
 800b764:	e0c5      	b.n	800b8f2 <f_read+0x2b6>
			sect += csect;
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	4413      	add	r3, r2
 800b76c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	899b      	ldrh	r3, [r3, #12]
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	fbb3 f3f2 	udiv	r3, r3, r2
 800b77a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d041      	beq.n	800b806 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b786:	4413      	add	r3, r2
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	8952      	ldrh	r2, [r2, #10]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d905      	bls.n	800b79c <f_read+0x160>
					cc = fs->csize - csect;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	895b      	ldrh	r3, [r3, #10]
 800b794:	461a      	mov	r2, r3
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	7858      	ldrb	r0, [r3, #1]
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7a6:	f7fd fba5 	bl	8008ef4 <disk_read>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <f_read+0x17e>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	755a      	strb	r2, [r3, #21]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e09b      	b.n	800b8f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7d1b      	ldrb	r3, [r3, #20]
 800b7be:	b25b      	sxtb	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	da18      	bge.n	800b7f6 <f_read+0x1ba>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6a1a      	ldr	r2, [r3, #32]
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d911      	bls.n	800b7f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a1a      	ldr	r2, [r3, #32]
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	8992      	ldrh	r2, [r2, #12]
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e4:	18d0      	adds	r0, r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	899b      	ldrh	r3, [r3, #12]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f7fd fc5f 	bl	80090b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fe:	fb02 f303 	mul.w	r3, r2, r3
 800b802:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b804:	e05c      	b.n	800b8c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d02e      	beq.n	800b86e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	7d1b      	ldrb	r3, [r3, #20]
 800b814:	b25b      	sxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	da18      	bge.n	800b84c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	7858      	ldrb	r0, [r3, #1]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1a      	ldr	r2, [r3, #32]
 800b828:	2301      	movs	r3, #1
 800b82a:	f7fd fb83 	bl	8008f34 <disk_write>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <f_read+0x202>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	755a      	strb	r2, [r3, #21]
 800b83a:	2301      	movs	r3, #1
 800b83c:	e059      	b.n	800b8f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	7d1b      	ldrb	r3, [r3, #20]
 800b842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b846:	b2da      	uxtb	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	7858      	ldrb	r0, [r3, #1]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b856:	2301      	movs	r3, #1
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	f7fd fb4b 	bl	8008ef4 <disk_read>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d004      	beq.n	800b86e <f_read+0x232>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	755a      	strb	r2, [r3, #21]
 800b86a:	2301      	movs	r3, #1
 800b86c:	e041      	b.n	800b8f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	899b      	ldrh	r3, [r3, #12]
 800b878:	4618      	mov	r0, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	8992      	ldrh	r2, [r2, #12]
 800b882:	fbb3 f1f2 	udiv	r1, r3, r2
 800b886:	fb01 f202 	mul.w	r2, r1, r2
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	1ac3      	subs	r3, r0, r3
 800b88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d901      	bls.n	800b89c <f_read+0x260>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	8992      	ldrh	r2, [r2, #12]
 800b8aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8ae:	fb00 f202 	mul.w	r2, r0, r2
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	440b      	add	r3, r1
 800b8b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8bc:	f7fd fbfa 	bl	80090b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c4:	4413      	add	r3, r2
 800b8c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	699a      	ldr	r2, [r3, #24]
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	441a      	add	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	619a      	str	r2, [r3, #24]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8da:	441a      	add	r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f47f aee1 	bne.w	800b6b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3738      	adds	r7, #56	@ 0x38
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b086      	sub	sp, #24
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f107 0208 	add.w	r2, r7, #8
 800b908:	4611      	mov	r1, r2
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7ff fc52 	bl	800b1b4 <validate>
 800b910:	4603      	mov	r3, r0
 800b912:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d168      	bne.n	800b9ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7d1b      	ldrb	r3, [r3, #20]
 800b91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d062      	beq.n	800b9ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	b25b      	sxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	da15      	bge.n	800b95c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	7858      	ldrb	r0, [r3, #1]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1a      	ldr	r2, [r3, #32]
 800b93e:	2301      	movs	r3, #1
 800b940:	f7fd faf8 	bl	8008f34 <disk_write>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <f_sync+0x54>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e04f      	b.n	800b9ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7d1b      	ldrb	r3, [r3, #20]
 800b952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b956:	b2da      	uxtb	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b95c:	f7fd fa2a 	bl	8008db4 <get_fattime>
 800b960:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fd fdd0 	bl	8009510 <move_window>
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d138      	bne.n	800b9ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	330b      	adds	r3, #11
 800b984:	781a      	ldrb	r2, [r3, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	330b      	adds	r3, #11
 800b98a:	f042 0220 	orr.w	r2, r2, #32
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	461a      	mov	r2, r3
 800b99c:	68f9      	ldr	r1, [r7, #12]
 800b99e:	f7fe fb5b 	bl	800a058 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f103 021c 	add.w	r2, r3, #28
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fd fb54 	bl	800905c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3316      	adds	r3, #22
 800b9b8:	6939      	ldr	r1, [r7, #16]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fd fb4e 	bl	800905c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3312      	adds	r3, #18
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fd fb2d 	bl	8009026 <st_word>
					fs->wflag = 1;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fd fdc9 	bl	800956c <sync_fs>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7d1b      	ldrb	r3, [r3, #20]
 800b9e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff ff7b 	bl	800b8fa <f_sync>
 800ba04:	4603      	mov	r3, r0
 800ba06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d118      	bne.n	800ba40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f107 0208 	add.w	r2, r7, #8
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fbcc 	bl	800b1b4 <validate>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10c      	bne.n	800ba40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fd fccc 	bl	80093c8 <dec_lock>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b090      	sub	sp, #64	@ 0x40
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f107 0208 	add.w	r2, r7, #8
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fba9 	bl	800b1b4 <validate>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ba68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d103      	bne.n	800ba78 <f_lseek+0x2e>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7d5b      	ldrb	r3, [r3, #21]
 800ba74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ba78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <f_lseek+0x3c>
 800ba80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba84:	e201      	b.n	800be8a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80d9 	beq.w	800bc42 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba96:	d15a      	bne.n	800bb4e <f_lseek+0x104>
			tbl = fp->cltbl;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	1d1a      	adds	r2, r3, #4
 800baa2:	627a      	str	r2, [r7, #36]	@ 0x24
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	617b      	str	r3, [r7, #20]
 800baa8:	2302      	movs	r3, #2
 800baaa:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d03a      	beq.n	800bb2e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	2300      	movs	r3, #0
 800babe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac2:	3302      	adds	r3, #2
 800bac4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bacc:	3301      	adds	r3, #1
 800bace:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fd fdd8 	bl	800968a <get_fat>
 800bada:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800badc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d804      	bhi.n	800baec <f_lseek+0xa2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2202      	movs	r2, #2
 800bae6:	755a      	strb	r2, [r3, #21]
 800bae8:	2302      	movs	r3, #2
 800baea:	e1ce      	b.n	800be8a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800baec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf2:	d104      	bne.n	800bafe <f_lseek+0xb4>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	755a      	strb	r2, [r3, #21]
 800bafa:	2301      	movs	r3, #1
 800bafc:	e1c5      	b.n	800be8a <f_lseek+0x440>
					} while (cl == pcl + 1);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3301      	adds	r3, #1
 800bb02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d0de      	beq.n	800bac6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bb08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d809      	bhi.n	800bb24 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb12:	1d1a      	adds	r2, r3, #4
 800bb14:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	1d1a      	adds	r2, r3, #4
 800bb1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d3c4      	bcc.n	800bab8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb34:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bb36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d803      	bhi.n	800bb46 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e19f      	b.n	800be86 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bb46:	2311      	movs	r3, #17
 800bb48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bb4c:	e19b      	b.n	800be86 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d902      	bls.n	800bb5e <f_lseek+0x114>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 818d 	beq.w	800be86 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fe f873 	bl	8009c5e <clmt_clust>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	f7fd fd60 	bl	800964c <clust2sect>
 800bb8c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <f_lseek+0x154>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	755a      	strb	r2, [r3, #21]
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e175      	b.n	800be8a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	8992      	ldrh	r2, [r2, #12]
 800bba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	8952      	ldrh	r2, [r2, #10]
 800bbae:	3a01      	subs	r2, #1
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	8992      	ldrh	r2, [r2, #12]
 800bbc0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbc4:	fb01 f202 	mul.w	r2, r1, r2
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 815b 	beq.w	800be86 <f_lseek+0x43c>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	f000 8155 	beq.w	800be86 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7d1b      	ldrb	r3, [r3, #20]
 800bbe0:	b25b      	sxtb	r3, r3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	da18      	bge.n	800bc18 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	7858      	ldrb	r0, [r3, #1]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1a      	ldr	r2, [r3, #32]
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f7fd f99d 	bl	8008f34 <disk_write>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <f_lseek+0x1c0>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	755a      	strb	r2, [r3, #21]
 800bc06:	2301      	movs	r3, #1
 800bc08:	e13f      	b.n	800be8a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7d1b      	ldrb	r3, [r3, #20]
 800bc0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	7858      	ldrb	r0, [r3, #1]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc22:	2301      	movs	r3, #1
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	f7fd f965 	bl	8008ef4 <disk_read>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <f_lseek+0x1f0>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	755a      	strb	r2, [r3, #21]
 800bc36:	2301      	movs	r3, #1
 800bc38:	e127      	b.n	800be8a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	621a      	str	r2, [r3, #32]
 800bc40:	e121      	b.n	800be86 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d908      	bls.n	800bc5e <f_lseek+0x214>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc6c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 80b5 	beq.w	800bde0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	895b      	ldrh	r3, [r3, #10]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	899b      	ldrh	r3, [r3, #12]
 800bc80:	fb02 f303 	mul.w	r3, r2, r3
 800bc84:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01b      	beq.n	800bcc4 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	1e5a      	subs	r2, r3, #1
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	1e59      	subs	r1, r3, #1
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d30f      	bcc.n	800bcc4 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	1e5a      	subs	r2, r3, #1
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	425b      	negs	r3, r3
 800bcac:	401a      	ands	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	69db      	ldr	r3, [r3, #28]
 800bcc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcc2:	e022      	b.n	800bd0a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d119      	bne.n	800bd04 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fd ff2a 	bl	8009b2e <create_chain>
 800bcda:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d104      	bne.n	800bcec <f_lseek+0x2a2>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2202      	movs	r2, #2
 800bce6:	755a      	strb	r2, [r3, #21]
 800bce8:	2302      	movs	r3, #2
 800bcea:	e0ce      	b.n	800be8a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf2:	d104      	bne.n	800bcfe <f_lseek+0x2b4>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	755a      	strb	r2, [r3, #21]
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e0c5      	b.n	800be8a <f_lseek+0x440>
					fp->obj.sclust = clst;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd02:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd08:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d067      	beq.n	800bde0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800bd10:	e03a      	b.n	800bd88 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	603b      	str	r3, [r7, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	441a      	add	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7d1b      	ldrb	r3, [r3, #20]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fd fef9 	bl	8009b2e <create_chain>
 800bd3c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d108      	bne.n	800bd56 <f_lseek+0x30c>
							ofs = 0; break;
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	e022      	b.n	800bd90 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fd fc9b 	bl	800968a <get_fat>
 800bd54:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d104      	bne.n	800bd68 <f_lseek+0x31e>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	755a      	strb	r2, [r3, #21]
 800bd64:	2301      	movs	r3, #1
 800bd66:	e090      	b.n	800be8a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d904      	bls.n	800bd78 <f_lseek+0x32e>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d304      	bcc.n	800bd82 <f_lseek+0x338>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	755a      	strb	r2, [r3, #21]
 800bd7e:	2302      	movs	r3, #2
 800bd80:	e083      	b.n	800be8a <f_lseek+0x440>
					fp->clust = clst;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd86:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d8c0      	bhi.n	800bd12 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	441a      	add	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	899b      	ldrh	r3, [r3, #12]
 800bda0:	461a      	mov	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bda8:	fb01 f202 	mul.w	r2, r1, r2
 800bdac:	1a9b      	subs	r3, r3, r2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d016      	beq.n	800bde0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fd fc48 	bl	800964c <clust2sect>
 800bdbc:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d104      	bne.n	800bdce <f_lseek+0x384>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	755a      	strb	r2, [r3, #21]
 800bdca:	2302      	movs	r3, #2
 800bdcc:	e05d      	b.n	800be8a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	899b      	ldrh	r3, [r3, #12]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bddc:	4413      	add	r3, r2
 800bdde:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699a      	ldr	r2, [r3, #24]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d90a      	bls.n	800be02 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	699a      	ldr	r2, [r3, #24]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7d1b      	ldrb	r3, [r3, #20]
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	8992      	ldrh	r2, [r2, #12]
 800be0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800be0e:	fb01 f202 	mul.w	r2, r1, r2
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d036      	beq.n	800be86 <f_lseek+0x43c>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
 800be1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be1e:	429a      	cmp	r2, r3
 800be20:	d031      	beq.n	800be86 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7d1b      	ldrb	r3, [r3, #20]
 800be26:	b25b      	sxtb	r3, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da18      	bge.n	800be5e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	7858      	ldrb	r0, [r3, #1]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1a      	ldr	r2, [r3, #32]
 800be3a:	2301      	movs	r3, #1
 800be3c:	f7fd f87a 	bl	8008f34 <disk_write>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <f_lseek+0x406>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	755a      	strb	r2, [r3, #21]
 800be4c:	2301      	movs	r3, #1
 800be4e:	e01c      	b.n	800be8a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	7d1b      	ldrb	r3, [r3, #20]
 800be54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	7858      	ldrb	r0, [r3, #1]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be68:	2301      	movs	r3, #1
 800be6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be6c:	f7fd f842 	bl	8008ef4 <disk_read>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <f_lseek+0x436>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	755a      	strb	r2, [r3, #21]
 800be7c:	2301      	movs	r3, #1
 800be7e:	e004      	b.n	800be8a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be84:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800be86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3740      	adds	r7, #64	@ 0x40
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bea2:	2301      	movs	r3, #1
 800bea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800beaa:	4b1f      	ldr	r3, [pc, #124]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800beac:	7a5b      	ldrb	r3, [r3, #9]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d131      	bne.n	800bf18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800beb4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800beb6:	7a5b      	ldrb	r3, [r3, #9]
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	461a      	mov	r2, r3
 800bebc:	4b1a      	ldr	r3, [pc, #104]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800bebe:	2100      	movs	r1, #0
 800bec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bec2:	4b19      	ldr	r3, [pc, #100]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800bec4:	7a5b      	ldrb	r3, [r3, #9]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4a17      	ldr	r2, [pc, #92]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bed2:	4b15      	ldr	r3, [pc, #84]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800bed4:	7a5b      	ldrb	r3, [r3, #9]
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	461a      	mov	r2, r3
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800bedc:	4413      	add	r3, r2
 800bede:	79fa      	ldrb	r2, [r7, #7]
 800bee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bee2:	4b11      	ldr	r3, [pc, #68]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800bee4:	7a5b      	ldrb	r3, [r3, #9]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	b2d1      	uxtb	r1, r2
 800beec:	4a0e      	ldr	r2, [pc, #56]	@ (800bf28 <FATFS_LinkDriverEx+0x94>)
 800beee:	7251      	strb	r1, [r2, #9]
 800bef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bef2:	7dbb      	ldrb	r3, [r7, #22]
 800bef4:	3330      	adds	r3, #48	@ 0x30
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	3301      	adds	r3, #1
 800bf00:	223a      	movs	r2, #58	@ 0x3a
 800bf02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3302      	adds	r3, #2
 800bf08:	222f      	movs	r2, #47	@ 0x2f
 800bf0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3303      	adds	r3, #3
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	371c      	adds	r7, #28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	200017dc 	.word	0x200017dc

0800bf2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf36:	2200      	movs	r2, #0
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff ffaa 	bl	800be94 <FATFS_LinkDriverEx>
 800bf40:	4603      	mov	r3, r0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	6039      	str	r1, [r7, #0]
 800bf56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bf58:	88fb      	ldrh	r3, [r7, #6]
 800bf5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf5c:	d802      	bhi.n	800bf64 <ff_convert+0x18>
		c = chr;
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	81fb      	strh	r3, [r7, #14]
 800bf62:	e025      	b.n	800bfb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00b      	beq.n	800bf82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	2bff      	cmp	r3, #255	@ 0xff
 800bf6e:	d805      	bhi.n	800bf7c <ff_convert+0x30>
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	3b80      	subs	r3, #128	@ 0x80
 800bf74:	4a12      	ldr	r2, [pc, #72]	@ (800bfc0 <ff_convert+0x74>)
 800bf76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf7a:	e000      	b.n	800bf7e <ff_convert+0x32>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	81fb      	strh	r3, [r7, #14]
 800bf80:	e016      	b.n	800bfb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bf82:	2300      	movs	r3, #0
 800bf84:	81fb      	strh	r3, [r7, #14]
 800bf86:	e009      	b.n	800bf9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bf88:	89fb      	ldrh	r3, [r7, #14]
 800bf8a:	4a0d      	ldr	r2, [pc, #52]	@ (800bfc0 <ff_convert+0x74>)
 800bf8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf90:	88fa      	ldrh	r2, [r7, #6]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d006      	beq.n	800bfa4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bf96:	89fb      	ldrh	r3, [r7, #14]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	81fb      	strh	r3, [r7, #14]
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
 800bf9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfa0:	d9f2      	bls.n	800bf88 <ff_convert+0x3c>
 800bfa2:	e000      	b.n	800bfa6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bfa4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bfa6:	89fb      	ldrh	r3, [r7, #14]
 800bfa8:	3380      	adds	r3, #128	@ 0x80
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	0800fd50 	.word	0x0800fd50

0800bfc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bfce:	88fb      	ldrh	r3, [r7, #6]
 800bfd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfd4:	d201      	bcs.n	800bfda <ff_wtoupper+0x16>
 800bfd6:	4b3e      	ldr	r3, [pc, #248]	@ (800c0d0 <ff_wtoupper+0x10c>)
 800bfd8:	e000      	b.n	800bfdc <ff_wtoupper+0x18>
 800bfda:	4b3e      	ldr	r3, [pc, #248]	@ (800c0d4 <ff_wtoupper+0x110>)
 800bfdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	1c9a      	adds	r2, r3, #2
 800bfe2:	617a      	str	r2, [r7, #20]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bfe8:	8a7b      	ldrh	r3, [r7, #18]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d068      	beq.n	800c0c0 <ff_wtoupper+0xfc>
 800bfee:	88fa      	ldrh	r2, [r7, #6]
 800bff0:	8a7b      	ldrh	r3, [r7, #18]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d364      	bcc.n	800c0c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	1c9a      	adds	r2, r3, #2
 800bffa:	617a      	str	r2, [r7, #20]
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	823b      	strh	r3, [r7, #16]
 800c000:	8a3b      	ldrh	r3, [r7, #16]
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	81fb      	strh	r3, [r7, #14]
 800c006:	8a3b      	ldrh	r3, [r7, #16]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c00c:	88fa      	ldrh	r2, [r7, #6]
 800c00e:	8a79      	ldrh	r1, [r7, #18]
 800c010:	8a3b      	ldrh	r3, [r7, #16]
 800c012:	440b      	add	r3, r1
 800c014:	429a      	cmp	r2, r3
 800c016:	da49      	bge.n	800c0ac <ff_wtoupper+0xe8>
			switch (cmd) {
 800c018:	89fb      	ldrh	r3, [r7, #14]
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	d84f      	bhi.n	800c0be <ff_wtoupper+0xfa>
 800c01e:	a201      	add	r2, pc, #4	@ (adr r2, 800c024 <ff_wtoupper+0x60>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c05b 	.word	0x0800c05b
 800c02c:	0800c071 	.word	0x0800c071
 800c030:	0800c079 	.word	0x0800c079
 800c034:	0800c081 	.word	0x0800c081
 800c038:	0800c089 	.word	0x0800c089
 800c03c:	0800c091 	.word	0x0800c091
 800c040:	0800c099 	.word	0x0800c099
 800c044:	0800c0a1 	.word	0x0800c0a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c048:	88fa      	ldrh	r2, [r7, #6]
 800c04a:	8a7b      	ldrh	r3, [r7, #18]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	4413      	add	r3, r2
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	80fb      	strh	r3, [r7, #6]
 800c058:	e027      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c05a:	88fa      	ldrh	r2, [r7, #6]
 800c05c:	8a7b      	ldrh	r3, [r7, #18]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	b29b      	uxth	r3, r3
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	b29b      	uxth	r3, r3
 800c068:	88fa      	ldrh	r2, [r7, #6]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	80fb      	strh	r3, [r7, #6]
 800c06e:	e01c      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c070:	88fb      	ldrh	r3, [r7, #6]
 800c072:	3b10      	subs	r3, #16
 800c074:	80fb      	strh	r3, [r7, #6]
 800c076:	e018      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	3b20      	subs	r3, #32
 800c07c:	80fb      	strh	r3, [r7, #6]
 800c07e:	e014      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	3b30      	subs	r3, #48	@ 0x30
 800c084:	80fb      	strh	r3, [r7, #6]
 800c086:	e010      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c088:	88fb      	ldrh	r3, [r7, #6]
 800c08a:	3b1a      	subs	r3, #26
 800c08c:	80fb      	strh	r3, [r7, #6]
 800c08e:	e00c      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c090:	88fb      	ldrh	r3, [r7, #6]
 800c092:	3308      	adds	r3, #8
 800c094:	80fb      	strh	r3, [r7, #6]
 800c096:	e008      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c098:	88fb      	ldrh	r3, [r7, #6]
 800c09a:	3b50      	subs	r3, #80	@ 0x50
 800c09c:	80fb      	strh	r3, [r7, #6]
 800c09e:	e004      	b.n	800c0aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c0a6:	80fb      	strh	r3, [r7, #6]
 800c0a8:	bf00      	nop
			}
			break;
 800c0aa:	e008      	b.n	800c0be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d195      	bne.n	800bfde <ff_wtoupper+0x1a>
 800c0b2:	8a3b      	ldrh	r3, [r7, #16]
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c0bc:	e78f      	b.n	800bfde <ff_wtoupper+0x1a>
			break;
 800c0be:	bf00      	nop
	}

	return chr;
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	371c      	adds	r7, #28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	0800fe50 	.word	0x0800fe50
 800c0d4:	08010044 	.word	0x08010044

0800c0d8 <rand>:
 800c0d8:	4b16      	ldr	r3, [pc, #88]	@ (800c134 <rand+0x5c>)
 800c0da:	b510      	push	{r4, lr}
 800c0dc:	681c      	ldr	r4, [r3, #0]
 800c0de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c0e0:	b9b3      	cbnz	r3, 800c110 <rand+0x38>
 800c0e2:	2018      	movs	r0, #24
 800c0e4:	f001 fdee 	bl	800dcc4 <malloc>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6320      	str	r0, [r4, #48]	@ 0x30
 800c0ec:	b920      	cbnz	r0, 800c0f8 <rand+0x20>
 800c0ee:	4b12      	ldr	r3, [pc, #72]	@ (800c138 <rand+0x60>)
 800c0f0:	4812      	ldr	r0, [pc, #72]	@ (800c13c <rand+0x64>)
 800c0f2:	2152      	movs	r1, #82	@ 0x52
 800c0f4:	f000 ff30 	bl	800cf58 <__assert_func>
 800c0f8:	4911      	ldr	r1, [pc, #68]	@ (800c140 <rand+0x68>)
 800c0fa:	4b12      	ldr	r3, [pc, #72]	@ (800c144 <rand+0x6c>)
 800c0fc:	e9c0 1300 	strd	r1, r3, [r0]
 800c100:	4b11      	ldr	r3, [pc, #68]	@ (800c148 <rand+0x70>)
 800c102:	6083      	str	r3, [r0, #8]
 800c104:	230b      	movs	r3, #11
 800c106:	8183      	strh	r3, [r0, #12]
 800c108:	2100      	movs	r1, #0
 800c10a:	2001      	movs	r0, #1
 800c10c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c110:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c112:	480e      	ldr	r0, [pc, #56]	@ (800c14c <rand+0x74>)
 800c114:	690b      	ldr	r3, [r1, #16]
 800c116:	694c      	ldr	r4, [r1, #20]
 800c118:	4a0d      	ldr	r2, [pc, #52]	@ (800c150 <rand+0x78>)
 800c11a:	4358      	muls	r0, r3
 800c11c:	fb02 0004 	mla	r0, r2, r4, r0
 800c120:	fba3 3202 	umull	r3, r2, r3, r2
 800c124:	3301      	adds	r3, #1
 800c126:	eb40 0002 	adc.w	r0, r0, r2
 800c12a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c12e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c132:	bd10      	pop	{r4, pc}
 800c134:	200000a8 	.word	0x200000a8
 800c138:	08010100 	.word	0x08010100
 800c13c:	08010117 	.word	0x08010117
 800c140:	abcd330e 	.word	0xabcd330e
 800c144:	e66d1234 	.word	0xe66d1234
 800c148:	0005deec 	.word	0x0005deec
 800c14c:	5851f42d 	.word	0x5851f42d
 800c150:	4c957f2d 	.word	0x4c957f2d

0800c154 <__cvt>:
 800c154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	ec57 6b10 	vmov	r6, r7, d0
 800c15c:	2f00      	cmp	r7, #0
 800c15e:	460c      	mov	r4, r1
 800c160:	4619      	mov	r1, r3
 800c162:	463b      	mov	r3, r7
 800c164:	bfbb      	ittet	lt
 800c166:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c16a:	461f      	movlt	r7, r3
 800c16c:	2300      	movge	r3, #0
 800c16e:	232d      	movlt	r3, #45	@ 0x2d
 800c170:	700b      	strb	r3, [r1, #0]
 800c172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c174:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c178:	4691      	mov	r9, r2
 800c17a:	f023 0820 	bic.w	r8, r3, #32
 800c17e:	bfbc      	itt	lt
 800c180:	4632      	movlt	r2, r6
 800c182:	4616      	movlt	r6, r2
 800c184:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c188:	d005      	beq.n	800c196 <__cvt+0x42>
 800c18a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c18e:	d100      	bne.n	800c192 <__cvt+0x3e>
 800c190:	3401      	adds	r4, #1
 800c192:	2102      	movs	r1, #2
 800c194:	e000      	b.n	800c198 <__cvt+0x44>
 800c196:	2103      	movs	r1, #3
 800c198:	ab03      	add	r3, sp, #12
 800c19a:	9301      	str	r3, [sp, #4]
 800c19c:	ab02      	add	r3, sp, #8
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	ec47 6b10 	vmov	d0, r6, r7
 800c1a4:	4653      	mov	r3, sl
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	f000 ff7e 	bl	800d0a8 <_dtoa_r>
 800c1ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	d119      	bne.n	800c1e8 <__cvt+0x94>
 800c1b4:	f019 0f01 	tst.w	r9, #1
 800c1b8:	d00e      	beq.n	800c1d8 <__cvt+0x84>
 800c1ba:	eb00 0904 	add.w	r9, r0, r4
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 fc87 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1ca:	b108      	cbz	r0, 800c1d0 <__cvt+0x7c>
 800c1cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1d0:	2230      	movs	r2, #48	@ 0x30
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	454b      	cmp	r3, r9
 800c1d6:	d31e      	bcc.n	800c216 <__cvt+0xc2>
 800c1d8:	9b03      	ldr	r3, [sp, #12]
 800c1da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1dc:	1b5b      	subs	r3, r3, r5
 800c1de:	4628      	mov	r0, r5
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	b004      	add	sp, #16
 800c1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1ec:	eb00 0904 	add.w	r9, r0, r4
 800c1f0:	d1e5      	bne.n	800c1be <__cvt+0x6a>
 800c1f2:	7803      	ldrb	r3, [r0, #0]
 800c1f4:	2b30      	cmp	r3, #48	@ 0x30
 800c1f6:	d10a      	bne.n	800c20e <__cvt+0xba>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c204:	b918      	cbnz	r0, 800c20e <__cvt+0xba>
 800c206:	f1c4 0401 	rsb	r4, r4, #1
 800c20a:	f8ca 4000 	str.w	r4, [sl]
 800c20e:	f8da 3000 	ldr.w	r3, [sl]
 800c212:	4499      	add	r9, r3
 800c214:	e7d3      	b.n	800c1be <__cvt+0x6a>
 800c216:	1c59      	adds	r1, r3, #1
 800c218:	9103      	str	r1, [sp, #12]
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	e7d9      	b.n	800c1d2 <__cvt+0x7e>

0800c21e <__exponent>:
 800c21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c220:	2900      	cmp	r1, #0
 800c222:	bfba      	itte	lt
 800c224:	4249      	neglt	r1, r1
 800c226:	232d      	movlt	r3, #45	@ 0x2d
 800c228:	232b      	movge	r3, #43	@ 0x2b
 800c22a:	2909      	cmp	r1, #9
 800c22c:	7002      	strb	r2, [r0, #0]
 800c22e:	7043      	strb	r3, [r0, #1]
 800c230:	dd29      	ble.n	800c286 <__exponent+0x68>
 800c232:	f10d 0307 	add.w	r3, sp, #7
 800c236:	461d      	mov	r5, r3
 800c238:	270a      	movs	r7, #10
 800c23a:	461a      	mov	r2, r3
 800c23c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c240:	fb07 1416 	mls	r4, r7, r6, r1
 800c244:	3430      	adds	r4, #48	@ 0x30
 800c246:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c24a:	460c      	mov	r4, r1
 800c24c:	2c63      	cmp	r4, #99	@ 0x63
 800c24e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c252:	4631      	mov	r1, r6
 800c254:	dcf1      	bgt.n	800c23a <__exponent+0x1c>
 800c256:	3130      	adds	r1, #48	@ 0x30
 800c258:	1e94      	subs	r4, r2, #2
 800c25a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c25e:	1c41      	adds	r1, r0, #1
 800c260:	4623      	mov	r3, r4
 800c262:	42ab      	cmp	r3, r5
 800c264:	d30a      	bcc.n	800c27c <__exponent+0x5e>
 800c266:	f10d 0309 	add.w	r3, sp, #9
 800c26a:	1a9b      	subs	r3, r3, r2
 800c26c:	42ac      	cmp	r4, r5
 800c26e:	bf88      	it	hi
 800c270:	2300      	movhi	r3, #0
 800c272:	3302      	adds	r3, #2
 800c274:	4403      	add	r3, r0
 800c276:	1a18      	subs	r0, r3, r0
 800c278:	b003      	add	sp, #12
 800c27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c27c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c280:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c284:	e7ed      	b.n	800c262 <__exponent+0x44>
 800c286:	2330      	movs	r3, #48	@ 0x30
 800c288:	3130      	adds	r1, #48	@ 0x30
 800c28a:	7083      	strb	r3, [r0, #2]
 800c28c:	70c1      	strb	r1, [r0, #3]
 800c28e:	1d03      	adds	r3, r0, #4
 800c290:	e7f1      	b.n	800c276 <__exponent+0x58>
	...

0800c294 <_printf_float>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	b08d      	sub	sp, #52	@ 0x34
 800c29a:	460c      	mov	r4, r1
 800c29c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2a0:	4616      	mov	r6, r2
 800c2a2:	461f      	mov	r7, r3
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	f000 fddf 	bl	800ce68 <_localeconv_r>
 800c2aa:	6803      	ldr	r3, [r0, #0]
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f3 ffe6 	bl	8000280 <strlen>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2bc:	9005      	str	r0, [sp, #20]
 800c2be:	3307      	adds	r3, #7
 800c2c0:	f023 0307 	bic.w	r3, r3, #7
 800c2c4:	f103 0208 	add.w	r2, r3, #8
 800c2c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2cc:	f8d4 b000 	ldr.w	fp, [r4]
 800c2d0:	f8c8 2000 	str.w	r2, [r8]
 800c2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2dc:	9307      	str	r3, [sp, #28]
 800c2de:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ea:	4b9c      	ldr	r3, [pc, #624]	@ (800c55c <_printf_float+0x2c8>)
 800c2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f0:	f7f4 fc24 	bl	8000b3c <__aeabi_dcmpun>
 800c2f4:	bb70      	cbnz	r0, 800c354 <_printf_float+0xc0>
 800c2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fa:	4b98      	ldr	r3, [pc, #608]	@ (800c55c <_printf_float+0x2c8>)
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c300:	f7f4 fbfe 	bl	8000b00 <__aeabi_dcmple>
 800c304:	bb30      	cbnz	r0, 800c354 <_printf_float+0xc0>
 800c306:	2200      	movs	r2, #0
 800c308:	2300      	movs	r3, #0
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	f7f4 fbed 	bl	8000aec <__aeabi_dcmplt>
 800c312:	b110      	cbz	r0, 800c31a <_printf_float+0x86>
 800c314:	232d      	movs	r3, #45	@ 0x2d
 800c316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c31a:	4a91      	ldr	r2, [pc, #580]	@ (800c560 <_printf_float+0x2cc>)
 800c31c:	4b91      	ldr	r3, [pc, #580]	@ (800c564 <_printf_float+0x2d0>)
 800c31e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c322:	bf94      	ite	ls
 800c324:	4690      	movls	r8, r2
 800c326:	4698      	movhi	r8, r3
 800c328:	2303      	movs	r3, #3
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	f02b 0304 	bic.w	r3, fp, #4
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	f04f 0900 	mov.w	r9, #0
 800c336:	9700      	str	r7, [sp, #0]
 800c338:	4633      	mov	r3, r6
 800c33a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c33c:	4621      	mov	r1, r4
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f9d2 	bl	800c6e8 <_printf_common>
 800c344:	3001      	adds	r0, #1
 800c346:	f040 808d 	bne.w	800c464 <_printf_float+0x1d0>
 800c34a:	f04f 30ff 	mov.w	r0, #4294967295
 800c34e:	b00d      	add	sp, #52	@ 0x34
 800c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c354:	4642      	mov	r2, r8
 800c356:	464b      	mov	r3, r9
 800c358:	4640      	mov	r0, r8
 800c35a:	4649      	mov	r1, r9
 800c35c:	f7f4 fbee 	bl	8000b3c <__aeabi_dcmpun>
 800c360:	b140      	cbz	r0, 800c374 <_printf_float+0xe0>
 800c362:	464b      	mov	r3, r9
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfbc      	itt	lt
 800c368:	232d      	movlt	r3, #45	@ 0x2d
 800c36a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c36e:	4a7e      	ldr	r2, [pc, #504]	@ (800c568 <_printf_float+0x2d4>)
 800c370:	4b7e      	ldr	r3, [pc, #504]	@ (800c56c <_printf_float+0x2d8>)
 800c372:	e7d4      	b.n	800c31e <_printf_float+0x8a>
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c37a:	9206      	str	r2, [sp, #24]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	d13b      	bne.n	800c3f8 <_printf_float+0x164>
 800c380:	2306      	movs	r3, #6
 800c382:	6063      	str	r3, [r4, #4]
 800c384:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c388:	2300      	movs	r3, #0
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c390:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c394:	ab09      	add	r3, sp, #36	@ 0x24
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	6861      	ldr	r1, [r4, #4]
 800c39a:	ec49 8b10 	vmov	d0, r8, r9
 800c39e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7ff fed6 	bl	800c154 <__cvt>
 800c3a8:	9b06      	ldr	r3, [sp, #24]
 800c3aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3ac:	2b47      	cmp	r3, #71	@ 0x47
 800c3ae:	4680      	mov	r8, r0
 800c3b0:	d129      	bne.n	800c406 <_printf_float+0x172>
 800c3b2:	1cc8      	adds	r0, r1, #3
 800c3b4:	db02      	blt.n	800c3bc <_printf_float+0x128>
 800c3b6:	6863      	ldr	r3, [r4, #4]
 800c3b8:	4299      	cmp	r1, r3
 800c3ba:	dd41      	ble.n	800c440 <_printf_float+0x1ac>
 800c3bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3c0:	fa5f fa8a 	uxtb.w	sl, sl
 800c3c4:	3901      	subs	r1, #1
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3ce:	f7ff ff26 	bl	800c21e <__exponent>
 800c3d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3d4:	1813      	adds	r3, r2, r0
 800c3d6:	2a01      	cmp	r2, #1
 800c3d8:	4681      	mov	r9, r0
 800c3da:	6123      	str	r3, [r4, #16]
 800c3dc:	dc02      	bgt.n	800c3e4 <_printf_float+0x150>
 800c3de:	6822      	ldr	r2, [r4, #0]
 800c3e0:	07d2      	lsls	r2, r2, #31
 800c3e2:	d501      	bpl.n	800c3e8 <_printf_float+0x154>
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	6123      	str	r3, [r4, #16]
 800c3e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0a2      	beq.n	800c336 <_printf_float+0xa2>
 800c3f0:	232d      	movs	r3, #45	@ 0x2d
 800c3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f6:	e79e      	b.n	800c336 <_printf_float+0xa2>
 800c3f8:	9a06      	ldr	r2, [sp, #24]
 800c3fa:	2a47      	cmp	r2, #71	@ 0x47
 800c3fc:	d1c2      	bne.n	800c384 <_printf_float+0xf0>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1c0      	bne.n	800c384 <_printf_float+0xf0>
 800c402:	2301      	movs	r3, #1
 800c404:	e7bd      	b.n	800c382 <_printf_float+0xee>
 800c406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c40a:	d9db      	bls.n	800c3c4 <_printf_float+0x130>
 800c40c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c410:	d118      	bne.n	800c444 <_printf_float+0x1b0>
 800c412:	2900      	cmp	r1, #0
 800c414:	6863      	ldr	r3, [r4, #4]
 800c416:	dd0b      	ble.n	800c430 <_printf_float+0x19c>
 800c418:	6121      	str	r1, [r4, #16]
 800c41a:	b913      	cbnz	r3, 800c422 <_printf_float+0x18e>
 800c41c:	6822      	ldr	r2, [r4, #0]
 800c41e:	07d0      	lsls	r0, r2, #31
 800c420:	d502      	bpl.n	800c428 <_printf_float+0x194>
 800c422:	3301      	adds	r3, #1
 800c424:	440b      	add	r3, r1
 800c426:	6123      	str	r3, [r4, #16]
 800c428:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c42a:	f04f 0900 	mov.w	r9, #0
 800c42e:	e7db      	b.n	800c3e8 <_printf_float+0x154>
 800c430:	b913      	cbnz	r3, 800c438 <_printf_float+0x1a4>
 800c432:	6822      	ldr	r2, [r4, #0]
 800c434:	07d2      	lsls	r2, r2, #31
 800c436:	d501      	bpl.n	800c43c <_printf_float+0x1a8>
 800c438:	3302      	adds	r3, #2
 800c43a:	e7f4      	b.n	800c426 <_printf_float+0x192>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e7f2      	b.n	800c426 <_printf_float+0x192>
 800c440:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c446:	4299      	cmp	r1, r3
 800c448:	db05      	blt.n	800c456 <_printf_float+0x1c2>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	6121      	str	r1, [r4, #16]
 800c44e:	07d8      	lsls	r0, r3, #31
 800c450:	d5ea      	bpl.n	800c428 <_printf_float+0x194>
 800c452:	1c4b      	adds	r3, r1, #1
 800c454:	e7e7      	b.n	800c426 <_printf_float+0x192>
 800c456:	2900      	cmp	r1, #0
 800c458:	bfd4      	ite	le
 800c45a:	f1c1 0202 	rsble	r2, r1, #2
 800c45e:	2201      	movgt	r2, #1
 800c460:	4413      	add	r3, r2
 800c462:	e7e0      	b.n	800c426 <_printf_float+0x192>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	055a      	lsls	r2, r3, #21
 800c468:	d407      	bmi.n	800c47a <_printf_float+0x1e6>
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	4642      	mov	r2, r8
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	47b8      	blx	r7
 800c474:	3001      	adds	r0, #1
 800c476:	d12b      	bne.n	800c4d0 <_printf_float+0x23c>
 800c478:	e767      	b.n	800c34a <_printf_float+0xb6>
 800c47a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c47e:	f240 80dd 	bls.w	800c63c <_printf_float+0x3a8>
 800c482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c486:	2200      	movs	r2, #0
 800c488:	2300      	movs	r3, #0
 800c48a:	f7f4 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d033      	beq.n	800c4fa <_printf_float+0x266>
 800c492:	4a37      	ldr	r2, [pc, #220]	@ (800c570 <_printf_float+0x2dc>)
 800c494:	2301      	movs	r3, #1
 800c496:	4631      	mov	r1, r6
 800c498:	4628      	mov	r0, r5
 800c49a:	47b8      	blx	r7
 800c49c:	3001      	adds	r0, #1
 800c49e:	f43f af54 	beq.w	800c34a <_printf_float+0xb6>
 800c4a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4a6:	4543      	cmp	r3, r8
 800c4a8:	db02      	blt.n	800c4b0 <_printf_float+0x21c>
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	07d8      	lsls	r0, r3, #31
 800c4ae:	d50f      	bpl.n	800c4d0 <_printf_float+0x23c>
 800c4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	47b8      	blx	r7
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	f43f af45 	beq.w	800c34a <_printf_float+0xb6>
 800c4c0:	f04f 0900 	mov.w	r9, #0
 800c4c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4c8:	f104 0a1a 	add.w	sl, r4, #26
 800c4cc:	45c8      	cmp	r8, r9
 800c4ce:	dc09      	bgt.n	800c4e4 <_printf_float+0x250>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	079b      	lsls	r3, r3, #30
 800c4d4:	f100 8103 	bmi.w	800c6de <_printf_float+0x44a>
 800c4d8:	68e0      	ldr	r0, [r4, #12]
 800c4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4dc:	4298      	cmp	r0, r3
 800c4de:	bfb8      	it	lt
 800c4e0:	4618      	movlt	r0, r3
 800c4e2:	e734      	b.n	800c34e <_printf_float+0xba>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	4652      	mov	r2, sl
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b8      	blx	r7
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	f43f af2b 	beq.w	800c34a <_printf_float+0xb6>
 800c4f4:	f109 0901 	add.w	r9, r9, #1
 800c4f8:	e7e8      	b.n	800c4cc <_printf_float+0x238>
 800c4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dc39      	bgt.n	800c574 <_printf_float+0x2e0>
 800c500:	4a1b      	ldr	r2, [pc, #108]	@ (800c570 <_printf_float+0x2dc>)
 800c502:	2301      	movs	r3, #1
 800c504:	4631      	mov	r1, r6
 800c506:	4628      	mov	r0, r5
 800c508:	47b8      	blx	r7
 800c50a:	3001      	adds	r0, #1
 800c50c:	f43f af1d 	beq.w	800c34a <_printf_float+0xb6>
 800c510:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c514:	ea59 0303 	orrs.w	r3, r9, r3
 800c518:	d102      	bne.n	800c520 <_printf_float+0x28c>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	07d9      	lsls	r1, r3, #31
 800c51e:	d5d7      	bpl.n	800c4d0 <_printf_float+0x23c>
 800c520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	47b8      	blx	r7
 800c52a:	3001      	adds	r0, #1
 800c52c:	f43f af0d 	beq.w	800c34a <_printf_float+0xb6>
 800c530:	f04f 0a00 	mov.w	sl, #0
 800c534:	f104 0b1a 	add.w	fp, r4, #26
 800c538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c53a:	425b      	negs	r3, r3
 800c53c:	4553      	cmp	r3, sl
 800c53e:	dc01      	bgt.n	800c544 <_printf_float+0x2b0>
 800c540:	464b      	mov	r3, r9
 800c542:	e793      	b.n	800c46c <_printf_float+0x1d8>
 800c544:	2301      	movs	r3, #1
 800c546:	465a      	mov	r2, fp
 800c548:	4631      	mov	r1, r6
 800c54a:	4628      	mov	r0, r5
 800c54c:	47b8      	blx	r7
 800c54e:	3001      	adds	r0, #1
 800c550:	f43f aefb 	beq.w	800c34a <_printf_float+0xb6>
 800c554:	f10a 0a01 	add.w	sl, sl, #1
 800c558:	e7ee      	b.n	800c538 <_printf_float+0x2a4>
 800c55a:	bf00      	nop
 800c55c:	7fefffff 	.word	0x7fefffff
 800c560:	0801016f 	.word	0x0801016f
 800c564:	08010173 	.word	0x08010173
 800c568:	08010177 	.word	0x08010177
 800c56c:	0801017b 	.word	0x0801017b
 800c570:	0801017f 	.word	0x0801017f
 800c574:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c57a:	4553      	cmp	r3, sl
 800c57c:	bfa8      	it	ge
 800c57e:	4653      	movge	r3, sl
 800c580:	2b00      	cmp	r3, #0
 800c582:	4699      	mov	r9, r3
 800c584:	dc36      	bgt.n	800c5f4 <_printf_float+0x360>
 800c586:	f04f 0b00 	mov.w	fp, #0
 800c58a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c58e:	f104 021a 	add.w	r2, r4, #26
 800c592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c594:	9306      	str	r3, [sp, #24]
 800c596:	eba3 0309 	sub.w	r3, r3, r9
 800c59a:	455b      	cmp	r3, fp
 800c59c:	dc31      	bgt.n	800c602 <_printf_float+0x36e>
 800c59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a0:	459a      	cmp	sl, r3
 800c5a2:	dc3a      	bgt.n	800c61a <_printf_float+0x386>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	07da      	lsls	r2, r3, #31
 800c5a8:	d437      	bmi.n	800c61a <_printf_float+0x386>
 800c5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ac:	ebaa 0903 	sub.w	r9, sl, r3
 800c5b0:	9b06      	ldr	r3, [sp, #24]
 800c5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800c5b6:	4599      	cmp	r9, r3
 800c5b8:	bfa8      	it	ge
 800c5ba:	4699      	movge	r9, r3
 800c5bc:	f1b9 0f00 	cmp.w	r9, #0
 800c5c0:	dc33      	bgt.n	800c62a <_printf_float+0x396>
 800c5c2:	f04f 0800 	mov.w	r8, #0
 800c5c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5ca:	f104 0b1a 	add.w	fp, r4, #26
 800c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5d4:	eba3 0309 	sub.w	r3, r3, r9
 800c5d8:	4543      	cmp	r3, r8
 800c5da:	f77f af79 	ble.w	800c4d0 <_printf_float+0x23c>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	465a      	mov	r2, fp
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	47b8      	blx	r7
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	f43f aeae 	beq.w	800c34a <_printf_float+0xb6>
 800c5ee:	f108 0801 	add.w	r8, r8, #1
 800c5f2:	e7ec      	b.n	800c5ce <_printf_float+0x33a>
 800c5f4:	4642      	mov	r2, r8
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	47b8      	blx	r7
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d1c2      	bne.n	800c586 <_printf_float+0x2f2>
 800c600:	e6a3      	b.n	800c34a <_printf_float+0xb6>
 800c602:	2301      	movs	r3, #1
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	9206      	str	r2, [sp, #24]
 800c60a:	47b8      	blx	r7
 800c60c:	3001      	adds	r0, #1
 800c60e:	f43f ae9c 	beq.w	800c34a <_printf_float+0xb6>
 800c612:	9a06      	ldr	r2, [sp, #24]
 800c614:	f10b 0b01 	add.w	fp, fp, #1
 800c618:	e7bb      	b.n	800c592 <_printf_float+0x2fe>
 800c61a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	47b8      	blx	r7
 800c624:	3001      	adds	r0, #1
 800c626:	d1c0      	bne.n	800c5aa <_printf_float+0x316>
 800c628:	e68f      	b.n	800c34a <_printf_float+0xb6>
 800c62a:	9a06      	ldr	r2, [sp, #24]
 800c62c:	464b      	mov	r3, r9
 800c62e:	4442      	add	r2, r8
 800c630:	4631      	mov	r1, r6
 800c632:	4628      	mov	r0, r5
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	d1c3      	bne.n	800c5c2 <_printf_float+0x32e>
 800c63a:	e686      	b.n	800c34a <_printf_float+0xb6>
 800c63c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c640:	f1ba 0f01 	cmp.w	sl, #1
 800c644:	dc01      	bgt.n	800c64a <_printf_float+0x3b6>
 800c646:	07db      	lsls	r3, r3, #31
 800c648:	d536      	bpl.n	800c6b8 <_printf_float+0x424>
 800c64a:	2301      	movs	r3, #1
 800c64c:	4642      	mov	r2, r8
 800c64e:	4631      	mov	r1, r6
 800c650:	4628      	mov	r0, r5
 800c652:	47b8      	blx	r7
 800c654:	3001      	adds	r0, #1
 800c656:	f43f ae78 	beq.w	800c34a <_printf_float+0xb6>
 800c65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c65e:	4631      	mov	r1, r6
 800c660:	4628      	mov	r0, r5
 800c662:	47b8      	blx	r7
 800c664:	3001      	adds	r0, #1
 800c666:	f43f ae70 	beq.w	800c34a <_printf_float+0xb6>
 800c66a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c676:	f7f4 fa2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c67a:	b9c0      	cbnz	r0, 800c6ae <_printf_float+0x41a>
 800c67c:	4653      	mov	r3, sl
 800c67e:	f108 0201 	add.w	r2, r8, #1
 800c682:	4631      	mov	r1, r6
 800c684:	4628      	mov	r0, r5
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	d10c      	bne.n	800c6a6 <_printf_float+0x412>
 800c68c:	e65d      	b.n	800c34a <_printf_float+0xb6>
 800c68e:	2301      	movs	r3, #1
 800c690:	465a      	mov	r2, fp
 800c692:	4631      	mov	r1, r6
 800c694:	4628      	mov	r0, r5
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	f43f ae56 	beq.w	800c34a <_printf_float+0xb6>
 800c69e:	f108 0801 	add.w	r8, r8, #1
 800c6a2:	45d0      	cmp	r8, sl
 800c6a4:	dbf3      	blt.n	800c68e <_printf_float+0x3fa>
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c6ac:	e6df      	b.n	800c46e <_printf_float+0x1da>
 800c6ae:	f04f 0800 	mov.w	r8, #0
 800c6b2:	f104 0b1a 	add.w	fp, r4, #26
 800c6b6:	e7f4      	b.n	800c6a2 <_printf_float+0x40e>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	4642      	mov	r2, r8
 800c6bc:	e7e1      	b.n	800c682 <_printf_float+0x3ee>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	464a      	mov	r2, r9
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	f43f ae3e 	beq.w	800c34a <_printf_float+0xb6>
 800c6ce:	f108 0801 	add.w	r8, r8, #1
 800c6d2:	68e3      	ldr	r3, [r4, #12]
 800c6d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6d6:	1a5b      	subs	r3, r3, r1
 800c6d8:	4543      	cmp	r3, r8
 800c6da:	dcf0      	bgt.n	800c6be <_printf_float+0x42a>
 800c6dc:	e6fc      	b.n	800c4d8 <_printf_float+0x244>
 800c6de:	f04f 0800 	mov.w	r8, #0
 800c6e2:	f104 0919 	add.w	r9, r4, #25
 800c6e6:	e7f4      	b.n	800c6d2 <_printf_float+0x43e>

0800c6e8 <_printf_common>:
 800c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	4698      	mov	r8, r3
 800c6f0:	688a      	ldr	r2, [r1, #8]
 800c6f2:	690b      	ldr	r3, [r1, #16]
 800c6f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	bfb8      	it	lt
 800c6fc:	4613      	movlt	r3, r2
 800c6fe:	6033      	str	r3, [r6, #0]
 800c700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c704:	4607      	mov	r7, r0
 800c706:	460c      	mov	r4, r1
 800c708:	b10a      	cbz	r2, 800c70e <_printf_common+0x26>
 800c70a:	3301      	adds	r3, #1
 800c70c:	6033      	str	r3, [r6, #0]
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	0699      	lsls	r1, r3, #26
 800c712:	bf42      	ittt	mi
 800c714:	6833      	ldrmi	r3, [r6, #0]
 800c716:	3302      	addmi	r3, #2
 800c718:	6033      	strmi	r3, [r6, #0]
 800c71a:	6825      	ldr	r5, [r4, #0]
 800c71c:	f015 0506 	ands.w	r5, r5, #6
 800c720:	d106      	bne.n	800c730 <_printf_common+0x48>
 800c722:	f104 0a19 	add.w	sl, r4, #25
 800c726:	68e3      	ldr	r3, [r4, #12]
 800c728:	6832      	ldr	r2, [r6, #0]
 800c72a:	1a9b      	subs	r3, r3, r2
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	dc26      	bgt.n	800c77e <_printf_common+0x96>
 800c730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c734:	6822      	ldr	r2, [r4, #0]
 800c736:	3b00      	subs	r3, #0
 800c738:	bf18      	it	ne
 800c73a:	2301      	movne	r3, #1
 800c73c:	0692      	lsls	r2, r2, #26
 800c73e:	d42b      	bmi.n	800c798 <_printf_common+0xb0>
 800c740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c744:	4641      	mov	r1, r8
 800c746:	4638      	mov	r0, r7
 800c748:	47c8      	blx	r9
 800c74a:	3001      	adds	r0, #1
 800c74c:	d01e      	beq.n	800c78c <_printf_common+0xa4>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	f003 0306 	and.w	r3, r3, #6
 800c756:	2b04      	cmp	r3, #4
 800c758:	bf02      	ittt	eq
 800c75a:	68e5      	ldreq	r5, [r4, #12]
 800c75c:	6833      	ldreq	r3, [r6, #0]
 800c75e:	1aed      	subeq	r5, r5, r3
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	bf0c      	ite	eq
 800c764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c768:	2500      	movne	r5, #0
 800c76a:	4293      	cmp	r3, r2
 800c76c:	bfc4      	itt	gt
 800c76e:	1a9b      	subgt	r3, r3, r2
 800c770:	18ed      	addgt	r5, r5, r3
 800c772:	2600      	movs	r6, #0
 800c774:	341a      	adds	r4, #26
 800c776:	42b5      	cmp	r5, r6
 800c778:	d11a      	bne.n	800c7b0 <_printf_common+0xc8>
 800c77a:	2000      	movs	r0, #0
 800c77c:	e008      	b.n	800c790 <_printf_common+0xa8>
 800c77e:	2301      	movs	r3, #1
 800c780:	4652      	mov	r2, sl
 800c782:	4641      	mov	r1, r8
 800c784:	4638      	mov	r0, r7
 800c786:	47c8      	blx	r9
 800c788:	3001      	adds	r0, #1
 800c78a:	d103      	bne.n	800c794 <_printf_common+0xac>
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c794:	3501      	adds	r5, #1
 800c796:	e7c6      	b.n	800c726 <_printf_common+0x3e>
 800c798:	18e1      	adds	r1, r4, r3
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	2030      	movs	r0, #48	@ 0x30
 800c79e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7a2:	4422      	add	r2, r4
 800c7a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7ac:	3302      	adds	r3, #2
 800c7ae:	e7c7      	b.n	800c740 <_printf_common+0x58>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	47c8      	blx	r9
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	d0e6      	beq.n	800c78c <_printf_common+0xa4>
 800c7be:	3601      	adds	r6, #1
 800c7c0:	e7d9      	b.n	800c776 <_printf_common+0x8e>
	...

0800c7c4 <_printf_i>:
 800c7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	7e0f      	ldrb	r7, [r1, #24]
 800c7ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7cc:	2f78      	cmp	r7, #120	@ 0x78
 800c7ce:	4691      	mov	r9, r2
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	469a      	mov	sl, r3
 800c7d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7da:	d807      	bhi.n	800c7ec <_printf_i+0x28>
 800c7dc:	2f62      	cmp	r7, #98	@ 0x62
 800c7de:	d80a      	bhi.n	800c7f6 <_printf_i+0x32>
 800c7e0:	2f00      	cmp	r7, #0
 800c7e2:	f000 80d2 	beq.w	800c98a <_printf_i+0x1c6>
 800c7e6:	2f58      	cmp	r7, #88	@ 0x58
 800c7e8:	f000 80b9 	beq.w	800c95e <_printf_i+0x19a>
 800c7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7f4:	e03a      	b.n	800c86c <_printf_i+0xa8>
 800c7f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7fa:	2b15      	cmp	r3, #21
 800c7fc:	d8f6      	bhi.n	800c7ec <_printf_i+0x28>
 800c7fe:	a101      	add	r1, pc, #4	@ (adr r1, 800c804 <_printf_i+0x40>)
 800c800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c804:	0800c85d 	.word	0x0800c85d
 800c808:	0800c871 	.word	0x0800c871
 800c80c:	0800c7ed 	.word	0x0800c7ed
 800c810:	0800c7ed 	.word	0x0800c7ed
 800c814:	0800c7ed 	.word	0x0800c7ed
 800c818:	0800c7ed 	.word	0x0800c7ed
 800c81c:	0800c871 	.word	0x0800c871
 800c820:	0800c7ed 	.word	0x0800c7ed
 800c824:	0800c7ed 	.word	0x0800c7ed
 800c828:	0800c7ed 	.word	0x0800c7ed
 800c82c:	0800c7ed 	.word	0x0800c7ed
 800c830:	0800c971 	.word	0x0800c971
 800c834:	0800c89b 	.word	0x0800c89b
 800c838:	0800c92b 	.word	0x0800c92b
 800c83c:	0800c7ed 	.word	0x0800c7ed
 800c840:	0800c7ed 	.word	0x0800c7ed
 800c844:	0800c993 	.word	0x0800c993
 800c848:	0800c7ed 	.word	0x0800c7ed
 800c84c:	0800c89b 	.word	0x0800c89b
 800c850:	0800c7ed 	.word	0x0800c7ed
 800c854:	0800c7ed 	.word	0x0800c7ed
 800c858:	0800c933 	.word	0x0800c933
 800c85c:	6833      	ldr	r3, [r6, #0]
 800c85e:	1d1a      	adds	r2, r3, #4
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6032      	str	r2, [r6, #0]
 800c864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c86c:	2301      	movs	r3, #1
 800c86e:	e09d      	b.n	800c9ac <_printf_i+0x1e8>
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	6820      	ldr	r0, [r4, #0]
 800c874:	1d19      	adds	r1, r3, #4
 800c876:	6031      	str	r1, [r6, #0]
 800c878:	0606      	lsls	r6, r0, #24
 800c87a:	d501      	bpl.n	800c880 <_printf_i+0xbc>
 800c87c:	681d      	ldr	r5, [r3, #0]
 800c87e:	e003      	b.n	800c888 <_printf_i+0xc4>
 800c880:	0645      	lsls	r5, r0, #25
 800c882:	d5fb      	bpl.n	800c87c <_printf_i+0xb8>
 800c884:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c888:	2d00      	cmp	r5, #0
 800c88a:	da03      	bge.n	800c894 <_printf_i+0xd0>
 800c88c:	232d      	movs	r3, #45	@ 0x2d
 800c88e:	426d      	negs	r5, r5
 800c890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c894:	4859      	ldr	r0, [pc, #356]	@ (800c9fc <_printf_i+0x238>)
 800c896:	230a      	movs	r3, #10
 800c898:	e011      	b.n	800c8be <_printf_i+0xfa>
 800c89a:	6821      	ldr	r1, [r4, #0]
 800c89c:	6833      	ldr	r3, [r6, #0]
 800c89e:	0608      	lsls	r0, r1, #24
 800c8a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8a4:	d402      	bmi.n	800c8ac <_printf_i+0xe8>
 800c8a6:	0649      	lsls	r1, r1, #25
 800c8a8:	bf48      	it	mi
 800c8aa:	b2ad      	uxthmi	r5, r5
 800c8ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8ae:	4853      	ldr	r0, [pc, #332]	@ (800c9fc <_printf_i+0x238>)
 800c8b0:	6033      	str	r3, [r6, #0]
 800c8b2:	bf14      	ite	ne
 800c8b4:	230a      	movne	r3, #10
 800c8b6:	2308      	moveq	r3, #8
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8be:	6866      	ldr	r6, [r4, #4]
 800c8c0:	60a6      	str	r6, [r4, #8]
 800c8c2:	2e00      	cmp	r6, #0
 800c8c4:	bfa2      	ittt	ge
 800c8c6:	6821      	ldrge	r1, [r4, #0]
 800c8c8:	f021 0104 	bicge.w	r1, r1, #4
 800c8cc:	6021      	strge	r1, [r4, #0]
 800c8ce:	b90d      	cbnz	r5, 800c8d4 <_printf_i+0x110>
 800c8d0:	2e00      	cmp	r6, #0
 800c8d2:	d04b      	beq.n	800c96c <_printf_i+0x1a8>
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8da:	fb03 5711 	mls	r7, r3, r1, r5
 800c8de:	5dc7      	ldrb	r7, [r0, r7]
 800c8e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8e4:	462f      	mov	r7, r5
 800c8e6:	42bb      	cmp	r3, r7
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	d9f4      	bls.n	800c8d6 <_printf_i+0x112>
 800c8ec:	2b08      	cmp	r3, #8
 800c8ee:	d10b      	bne.n	800c908 <_printf_i+0x144>
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	07df      	lsls	r7, r3, #31
 800c8f4:	d508      	bpl.n	800c908 <_printf_i+0x144>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	6861      	ldr	r1, [r4, #4]
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	bfde      	ittt	le
 800c8fe:	2330      	movle	r3, #48	@ 0x30
 800c900:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c904:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c908:	1b92      	subs	r2, r2, r6
 800c90a:	6122      	str	r2, [r4, #16]
 800c90c:	f8cd a000 	str.w	sl, [sp]
 800c910:	464b      	mov	r3, r9
 800c912:	aa03      	add	r2, sp, #12
 800c914:	4621      	mov	r1, r4
 800c916:	4640      	mov	r0, r8
 800c918:	f7ff fee6 	bl	800c6e8 <_printf_common>
 800c91c:	3001      	adds	r0, #1
 800c91e:	d14a      	bne.n	800c9b6 <_printf_i+0x1f2>
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	b004      	add	sp, #16
 800c926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	f043 0320 	orr.w	r3, r3, #32
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	4833      	ldr	r0, [pc, #204]	@ (800ca00 <_printf_i+0x23c>)
 800c934:	2778      	movs	r7, #120	@ 0x78
 800c936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	6831      	ldr	r1, [r6, #0]
 800c93e:	061f      	lsls	r7, r3, #24
 800c940:	f851 5b04 	ldr.w	r5, [r1], #4
 800c944:	d402      	bmi.n	800c94c <_printf_i+0x188>
 800c946:	065f      	lsls	r7, r3, #25
 800c948:	bf48      	it	mi
 800c94a:	b2ad      	uxthmi	r5, r5
 800c94c:	6031      	str	r1, [r6, #0]
 800c94e:	07d9      	lsls	r1, r3, #31
 800c950:	bf44      	itt	mi
 800c952:	f043 0320 	orrmi.w	r3, r3, #32
 800c956:	6023      	strmi	r3, [r4, #0]
 800c958:	b11d      	cbz	r5, 800c962 <_printf_i+0x19e>
 800c95a:	2310      	movs	r3, #16
 800c95c:	e7ac      	b.n	800c8b8 <_printf_i+0xf4>
 800c95e:	4827      	ldr	r0, [pc, #156]	@ (800c9fc <_printf_i+0x238>)
 800c960:	e7e9      	b.n	800c936 <_printf_i+0x172>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	f023 0320 	bic.w	r3, r3, #32
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	e7f6      	b.n	800c95a <_printf_i+0x196>
 800c96c:	4616      	mov	r6, r2
 800c96e:	e7bd      	b.n	800c8ec <_printf_i+0x128>
 800c970:	6833      	ldr	r3, [r6, #0]
 800c972:	6825      	ldr	r5, [r4, #0]
 800c974:	6961      	ldr	r1, [r4, #20]
 800c976:	1d18      	adds	r0, r3, #4
 800c978:	6030      	str	r0, [r6, #0]
 800c97a:	062e      	lsls	r6, r5, #24
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	d501      	bpl.n	800c984 <_printf_i+0x1c0>
 800c980:	6019      	str	r1, [r3, #0]
 800c982:	e002      	b.n	800c98a <_printf_i+0x1c6>
 800c984:	0668      	lsls	r0, r5, #25
 800c986:	d5fb      	bpl.n	800c980 <_printf_i+0x1bc>
 800c988:	8019      	strh	r1, [r3, #0]
 800c98a:	2300      	movs	r3, #0
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	4616      	mov	r6, r2
 800c990:	e7bc      	b.n	800c90c <_printf_i+0x148>
 800c992:	6833      	ldr	r3, [r6, #0]
 800c994:	1d1a      	adds	r2, r3, #4
 800c996:	6032      	str	r2, [r6, #0]
 800c998:	681e      	ldr	r6, [r3, #0]
 800c99a:	6862      	ldr	r2, [r4, #4]
 800c99c:	2100      	movs	r1, #0
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7f3 fc1e 	bl	80001e0 <memchr>
 800c9a4:	b108      	cbz	r0, 800c9aa <_printf_i+0x1e6>
 800c9a6:	1b80      	subs	r0, r0, r6
 800c9a8:	6060      	str	r0, [r4, #4]
 800c9aa:	6863      	ldr	r3, [r4, #4]
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9b4:	e7aa      	b.n	800c90c <_printf_i+0x148>
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	4640      	mov	r0, r8
 800c9be:	47d0      	blx	sl
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	d0ad      	beq.n	800c920 <_printf_i+0x15c>
 800c9c4:	6823      	ldr	r3, [r4, #0]
 800c9c6:	079b      	lsls	r3, r3, #30
 800c9c8:	d413      	bmi.n	800c9f2 <_printf_i+0x22e>
 800c9ca:	68e0      	ldr	r0, [r4, #12]
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	4298      	cmp	r0, r3
 800c9d0:	bfb8      	it	lt
 800c9d2:	4618      	movlt	r0, r3
 800c9d4:	e7a6      	b.n	800c924 <_printf_i+0x160>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	4632      	mov	r2, r6
 800c9da:	4649      	mov	r1, r9
 800c9dc:	4640      	mov	r0, r8
 800c9de:	47d0      	blx	sl
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d09d      	beq.n	800c920 <_printf_i+0x15c>
 800c9e4:	3501      	adds	r5, #1
 800c9e6:	68e3      	ldr	r3, [r4, #12]
 800c9e8:	9903      	ldr	r1, [sp, #12]
 800c9ea:	1a5b      	subs	r3, r3, r1
 800c9ec:	42ab      	cmp	r3, r5
 800c9ee:	dcf2      	bgt.n	800c9d6 <_printf_i+0x212>
 800c9f0:	e7eb      	b.n	800c9ca <_printf_i+0x206>
 800c9f2:	2500      	movs	r5, #0
 800c9f4:	f104 0619 	add.w	r6, r4, #25
 800c9f8:	e7f5      	b.n	800c9e6 <_printf_i+0x222>
 800c9fa:	bf00      	nop
 800c9fc:	08010181 	.word	0x08010181
 800ca00:	08010192 	.word	0x08010192

0800ca04 <std>:
 800ca04:	2300      	movs	r3, #0
 800ca06:	b510      	push	{r4, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca12:	6083      	str	r3, [r0, #8]
 800ca14:	8181      	strh	r1, [r0, #12]
 800ca16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca18:	81c2      	strh	r2, [r0, #14]
 800ca1a:	6183      	str	r3, [r0, #24]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	2208      	movs	r2, #8
 800ca20:	305c      	adds	r0, #92	@ 0x5c
 800ca22:	f000 fa19 	bl	800ce58 <memset>
 800ca26:	4b0d      	ldr	r3, [pc, #52]	@ (800ca5c <std+0x58>)
 800ca28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca60 <std+0x5c>)
 800ca2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca64 <std+0x60>)
 800ca30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca32:	4b0d      	ldr	r3, [pc, #52]	@ (800ca68 <std+0x64>)
 800ca34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca36:	4b0d      	ldr	r3, [pc, #52]	@ (800ca6c <std+0x68>)
 800ca38:	6224      	str	r4, [r4, #32]
 800ca3a:	429c      	cmp	r4, r3
 800ca3c:	d006      	beq.n	800ca4c <std+0x48>
 800ca3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca42:	4294      	cmp	r4, r2
 800ca44:	d002      	beq.n	800ca4c <std+0x48>
 800ca46:	33d0      	adds	r3, #208	@ 0xd0
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d105      	bne.n	800ca58 <std+0x54>
 800ca4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca54:	f000 ba7c 	b.w	800cf50 <__retarget_lock_init_recursive>
 800ca58:	bd10      	pop	{r4, pc}
 800ca5a:	bf00      	nop
 800ca5c:	0800cca9 	.word	0x0800cca9
 800ca60:	0800cccb 	.word	0x0800cccb
 800ca64:	0800cd03 	.word	0x0800cd03
 800ca68:	0800cd27 	.word	0x0800cd27
 800ca6c:	200017e8 	.word	0x200017e8

0800ca70 <stdio_exit_handler>:
 800ca70:	4a02      	ldr	r2, [pc, #8]	@ (800ca7c <stdio_exit_handler+0xc>)
 800ca72:	4903      	ldr	r1, [pc, #12]	@ (800ca80 <stdio_exit_handler+0x10>)
 800ca74:	4803      	ldr	r0, [pc, #12]	@ (800ca84 <stdio_exit_handler+0x14>)
 800ca76:	f000 b869 	b.w	800cb4c <_fwalk_sglue>
 800ca7a:	bf00      	nop
 800ca7c:	2000009c 	.word	0x2000009c
 800ca80:	0800eb71 	.word	0x0800eb71
 800ca84:	200000ac 	.word	0x200000ac

0800ca88 <cleanup_stdio>:
 800ca88:	6841      	ldr	r1, [r0, #4]
 800ca8a:	4b0c      	ldr	r3, [pc, #48]	@ (800cabc <cleanup_stdio+0x34>)
 800ca8c:	4299      	cmp	r1, r3
 800ca8e:	b510      	push	{r4, lr}
 800ca90:	4604      	mov	r4, r0
 800ca92:	d001      	beq.n	800ca98 <cleanup_stdio+0x10>
 800ca94:	f002 f86c 	bl	800eb70 <_fflush_r>
 800ca98:	68a1      	ldr	r1, [r4, #8]
 800ca9a:	4b09      	ldr	r3, [pc, #36]	@ (800cac0 <cleanup_stdio+0x38>)
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	d002      	beq.n	800caa6 <cleanup_stdio+0x1e>
 800caa0:	4620      	mov	r0, r4
 800caa2:	f002 f865 	bl	800eb70 <_fflush_r>
 800caa6:	68e1      	ldr	r1, [r4, #12]
 800caa8:	4b06      	ldr	r3, [pc, #24]	@ (800cac4 <cleanup_stdio+0x3c>)
 800caaa:	4299      	cmp	r1, r3
 800caac:	d004      	beq.n	800cab8 <cleanup_stdio+0x30>
 800caae:	4620      	mov	r0, r4
 800cab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cab4:	f002 b85c 	b.w	800eb70 <_fflush_r>
 800cab8:	bd10      	pop	{r4, pc}
 800caba:	bf00      	nop
 800cabc:	200017e8 	.word	0x200017e8
 800cac0:	20001850 	.word	0x20001850
 800cac4:	200018b8 	.word	0x200018b8

0800cac8 <global_stdio_init.part.0>:
 800cac8:	b510      	push	{r4, lr}
 800caca:	4b0b      	ldr	r3, [pc, #44]	@ (800caf8 <global_stdio_init.part.0+0x30>)
 800cacc:	4c0b      	ldr	r4, [pc, #44]	@ (800cafc <global_stdio_init.part.0+0x34>)
 800cace:	4a0c      	ldr	r2, [pc, #48]	@ (800cb00 <global_stdio_init.part.0+0x38>)
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	4620      	mov	r0, r4
 800cad4:	2200      	movs	r2, #0
 800cad6:	2104      	movs	r1, #4
 800cad8:	f7ff ff94 	bl	800ca04 <std>
 800cadc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cae0:	2201      	movs	r2, #1
 800cae2:	2109      	movs	r1, #9
 800cae4:	f7ff ff8e 	bl	800ca04 <std>
 800cae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800caec:	2202      	movs	r2, #2
 800caee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caf2:	2112      	movs	r1, #18
 800caf4:	f7ff bf86 	b.w	800ca04 <std>
 800caf8:	20001920 	.word	0x20001920
 800cafc:	200017e8 	.word	0x200017e8
 800cb00:	0800ca71 	.word	0x0800ca71

0800cb04 <__sfp_lock_acquire>:
 800cb04:	4801      	ldr	r0, [pc, #4]	@ (800cb0c <__sfp_lock_acquire+0x8>)
 800cb06:	f000 ba24 	b.w	800cf52 <__retarget_lock_acquire_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	20001929 	.word	0x20001929

0800cb10 <__sfp_lock_release>:
 800cb10:	4801      	ldr	r0, [pc, #4]	@ (800cb18 <__sfp_lock_release+0x8>)
 800cb12:	f000 ba1f 	b.w	800cf54 <__retarget_lock_release_recursive>
 800cb16:	bf00      	nop
 800cb18:	20001929 	.word	0x20001929

0800cb1c <__sinit>:
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	f7ff fff0 	bl	800cb04 <__sfp_lock_acquire>
 800cb24:	6a23      	ldr	r3, [r4, #32]
 800cb26:	b11b      	cbz	r3, 800cb30 <__sinit+0x14>
 800cb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb2c:	f7ff bff0 	b.w	800cb10 <__sfp_lock_release>
 800cb30:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <__sinit+0x28>)
 800cb32:	6223      	str	r3, [r4, #32]
 800cb34:	4b04      	ldr	r3, [pc, #16]	@ (800cb48 <__sinit+0x2c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1f5      	bne.n	800cb28 <__sinit+0xc>
 800cb3c:	f7ff ffc4 	bl	800cac8 <global_stdio_init.part.0>
 800cb40:	e7f2      	b.n	800cb28 <__sinit+0xc>
 800cb42:	bf00      	nop
 800cb44:	0800ca89 	.word	0x0800ca89
 800cb48:	20001920 	.word	0x20001920

0800cb4c <_fwalk_sglue>:
 800cb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	4607      	mov	r7, r0
 800cb52:	4688      	mov	r8, r1
 800cb54:	4614      	mov	r4, r2
 800cb56:	2600      	movs	r6, #0
 800cb58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb5c:	f1b9 0901 	subs.w	r9, r9, #1
 800cb60:	d505      	bpl.n	800cb6e <_fwalk_sglue+0x22>
 800cb62:	6824      	ldr	r4, [r4, #0]
 800cb64:	2c00      	cmp	r4, #0
 800cb66:	d1f7      	bne.n	800cb58 <_fwalk_sglue+0xc>
 800cb68:	4630      	mov	r0, r6
 800cb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	89ab      	ldrh	r3, [r5, #12]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d907      	bls.n	800cb84 <_fwalk_sglue+0x38>
 800cb74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	d003      	beq.n	800cb84 <_fwalk_sglue+0x38>
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4638      	mov	r0, r7
 800cb80:	47c0      	blx	r8
 800cb82:	4306      	orrs	r6, r0
 800cb84:	3568      	adds	r5, #104	@ 0x68
 800cb86:	e7e9      	b.n	800cb5c <_fwalk_sglue+0x10>

0800cb88 <iprintf>:
 800cb88:	b40f      	push	{r0, r1, r2, r3}
 800cb8a:	b507      	push	{r0, r1, r2, lr}
 800cb8c:	4906      	ldr	r1, [pc, #24]	@ (800cba8 <iprintf+0x20>)
 800cb8e:	ab04      	add	r3, sp, #16
 800cb90:	6808      	ldr	r0, [r1, #0]
 800cb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb96:	6881      	ldr	r1, [r0, #8]
 800cb98:	9301      	str	r3, [sp, #4]
 800cb9a:	f001 fe4d 	bl	800e838 <_vfiprintf_r>
 800cb9e:	b003      	add	sp, #12
 800cba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba4:	b004      	add	sp, #16
 800cba6:	4770      	bx	lr
 800cba8:	200000a8 	.word	0x200000a8

0800cbac <_puts_r>:
 800cbac:	6a03      	ldr	r3, [r0, #32]
 800cbae:	b570      	push	{r4, r5, r6, lr}
 800cbb0:	6884      	ldr	r4, [r0, #8]
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	b90b      	cbnz	r3, 800cbbc <_puts_r+0x10>
 800cbb8:	f7ff ffb0 	bl	800cb1c <__sinit>
 800cbbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbbe:	07db      	lsls	r3, r3, #31
 800cbc0:	d405      	bmi.n	800cbce <_puts_r+0x22>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	0598      	lsls	r0, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_puts_r+0x22>
 800cbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbca:	f000 f9c2 	bl	800cf52 <__retarget_lock_acquire_recursive>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	0719      	lsls	r1, r3, #28
 800cbd2:	d502      	bpl.n	800cbda <_puts_r+0x2e>
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d135      	bne.n	800cc46 <_puts_r+0x9a>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f000 f8e5 	bl	800cdac <__swsetup_r>
 800cbe2:	b380      	cbz	r0, 800cc46 <_puts_r+0x9a>
 800cbe4:	f04f 35ff 	mov.w	r5, #4294967295
 800cbe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbea:	07da      	lsls	r2, r3, #31
 800cbec:	d405      	bmi.n	800cbfa <_puts_r+0x4e>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	059b      	lsls	r3, r3, #22
 800cbf2:	d402      	bmi.n	800cbfa <_puts_r+0x4e>
 800cbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbf6:	f000 f9ad 	bl	800cf54 <__retarget_lock_release_recursive>
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	bd70      	pop	{r4, r5, r6, pc}
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	da04      	bge.n	800cc0c <_puts_r+0x60>
 800cc02:	69a2      	ldr	r2, [r4, #24]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	dc17      	bgt.n	800cc38 <_puts_r+0x8c>
 800cc08:	290a      	cmp	r1, #10
 800cc0a:	d015      	beq.n	800cc38 <_puts_r+0x8c>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	6022      	str	r2, [r4, #0]
 800cc12:	7019      	strb	r1, [r3, #0]
 800cc14:	68a3      	ldr	r3, [r4, #8]
 800cc16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	60a3      	str	r3, [r4, #8]
 800cc1e:	2900      	cmp	r1, #0
 800cc20:	d1ed      	bne.n	800cbfe <_puts_r+0x52>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	da11      	bge.n	800cc4a <_puts_r+0x9e>
 800cc26:	4622      	mov	r2, r4
 800cc28:	210a      	movs	r1, #10
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f000 f87f 	bl	800cd2e <__swbuf_r>
 800cc30:	3001      	adds	r0, #1
 800cc32:	d0d7      	beq.n	800cbe4 <_puts_r+0x38>
 800cc34:	250a      	movs	r5, #10
 800cc36:	e7d7      	b.n	800cbe8 <_puts_r+0x3c>
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f000 f877 	bl	800cd2e <__swbuf_r>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d1e7      	bne.n	800cc14 <_puts_r+0x68>
 800cc44:	e7ce      	b.n	800cbe4 <_puts_r+0x38>
 800cc46:	3e01      	subs	r6, #1
 800cc48:	e7e4      	b.n	800cc14 <_puts_r+0x68>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	220a      	movs	r2, #10
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	e7ee      	b.n	800cc34 <_puts_r+0x88>
	...

0800cc58 <puts>:
 800cc58:	4b02      	ldr	r3, [pc, #8]	@ (800cc64 <puts+0xc>)
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f7ff bfa5 	b.w	800cbac <_puts_r>
 800cc62:	bf00      	nop
 800cc64:	200000a8 	.word	0x200000a8

0800cc68 <siprintf>:
 800cc68:	b40e      	push	{r1, r2, r3}
 800cc6a:	b500      	push	{lr}
 800cc6c:	b09c      	sub	sp, #112	@ 0x70
 800cc6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cc70:	9002      	str	r0, [sp, #8]
 800cc72:	9006      	str	r0, [sp, #24]
 800cc74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cc78:	4809      	ldr	r0, [pc, #36]	@ (800cca0 <siprintf+0x38>)
 800cc7a:	9107      	str	r1, [sp, #28]
 800cc7c:	9104      	str	r1, [sp, #16]
 800cc7e:	4909      	ldr	r1, [pc, #36]	@ (800cca4 <siprintf+0x3c>)
 800cc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc84:	9105      	str	r1, [sp, #20]
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	a902      	add	r1, sp, #8
 800cc8c:	f001 fcae 	bl	800e5ec <_svfiprintf_r>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	2200      	movs	r2, #0
 800cc94:	701a      	strb	r2, [r3, #0]
 800cc96:	b01c      	add	sp, #112	@ 0x70
 800cc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc9c:	b003      	add	sp, #12
 800cc9e:	4770      	bx	lr
 800cca0:	200000a8 	.word	0x200000a8
 800cca4:	ffff0208 	.word	0xffff0208

0800cca8 <__sread>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb0:	f000 f900 	bl	800ceb4 <_read_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	bfab      	itete	ge
 800ccb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccba:	89a3      	ldrhlt	r3, [r4, #12]
 800ccbc:	181b      	addge	r3, r3, r0
 800ccbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccc2:	bfac      	ite	ge
 800ccc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccc6:	81a3      	strhlt	r3, [r4, #12]
 800ccc8:	bd10      	pop	{r4, pc}

0800ccca <__swrite>:
 800ccca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccce:	461f      	mov	r7, r3
 800ccd0:	898b      	ldrh	r3, [r1, #12]
 800ccd2:	05db      	lsls	r3, r3, #23
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	4616      	mov	r6, r2
 800ccda:	d505      	bpl.n	800cce8 <__swrite+0x1e>
 800ccdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce0:	2302      	movs	r3, #2
 800cce2:	2200      	movs	r2, #0
 800cce4:	f000 f8d4 	bl	800ce90 <_lseek_r>
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccf2:	81a3      	strh	r3, [r4, #12]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	463b      	mov	r3, r7
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	f000 b8eb 	b.w	800ced8 <_write_r>

0800cd02 <__sseek>:
 800cd02:	b510      	push	{r4, lr}
 800cd04:	460c      	mov	r4, r1
 800cd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0a:	f000 f8c1 	bl	800ce90 <_lseek_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	bf15      	itete	ne
 800cd14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd1e:	81a3      	strheq	r3, [r4, #12]
 800cd20:	bf18      	it	ne
 800cd22:	81a3      	strhne	r3, [r4, #12]
 800cd24:	bd10      	pop	{r4, pc}

0800cd26 <__sclose>:
 800cd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2a:	f000 b8a1 	b.w	800ce70 <_close_r>

0800cd2e <__swbuf_r>:
 800cd2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd30:	460e      	mov	r6, r1
 800cd32:	4614      	mov	r4, r2
 800cd34:	4605      	mov	r5, r0
 800cd36:	b118      	cbz	r0, 800cd40 <__swbuf_r+0x12>
 800cd38:	6a03      	ldr	r3, [r0, #32]
 800cd3a:	b90b      	cbnz	r3, 800cd40 <__swbuf_r+0x12>
 800cd3c:	f7ff feee 	bl	800cb1c <__sinit>
 800cd40:	69a3      	ldr	r3, [r4, #24]
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	071a      	lsls	r2, r3, #28
 800cd48:	d501      	bpl.n	800cd4e <__swbuf_r+0x20>
 800cd4a:	6923      	ldr	r3, [r4, #16]
 800cd4c:	b943      	cbnz	r3, 800cd60 <__swbuf_r+0x32>
 800cd4e:	4621      	mov	r1, r4
 800cd50:	4628      	mov	r0, r5
 800cd52:	f000 f82b 	bl	800cdac <__swsetup_r>
 800cd56:	b118      	cbz	r0, 800cd60 <__swbuf_r+0x32>
 800cd58:	f04f 37ff 	mov.w	r7, #4294967295
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	6922      	ldr	r2, [r4, #16]
 800cd64:	1a98      	subs	r0, r3, r2
 800cd66:	6963      	ldr	r3, [r4, #20]
 800cd68:	b2f6      	uxtb	r6, r6
 800cd6a:	4283      	cmp	r3, r0
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	dc05      	bgt.n	800cd7c <__swbuf_r+0x4e>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f001 fefc 	bl	800eb70 <_fflush_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d1ed      	bne.n	800cd58 <__swbuf_r+0x2a>
 800cd7c:	68a3      	ldr	r3, [r4, #8]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	60a3      	str	r3, [r4, #8]
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	701e      	strb	r6, [r3, #0]
 800cd8a:	6962      	ldr	r2, [r4, #20]
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d004      	beq.n	800cd9c <__swbuf_r+0x6e>
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	07db      	lsls	r3, r3, #31
 800cd96:	d5e1      	bpl.n	800cd5c <__swbuf_r+0x2e>
 800cd98:	2e0a      	cmp	r6, #10
 800cd9a:	d1df      	bne.n	800cd5c <__swbuf_r+0x2e>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f001 fee6 	bl	800eb70 <_fflush_r>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d0d9      	beq.n	800cd5c <__swbuf_r+0x2e>
 800cda8:	e7d6      	b.n	800cd58 <__swbuf_r+0x2a>
	...

0800cdac <__swsetup_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4b29      	ldr	r3, [pc, #164]	@ (800ce54 <__swsetup_r+0xa8>)
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	b118      	cbz	r0, 800cdc0 <__swsetup_r+0x14>
 800cdb8:	6a03      	ldr	r3, [r0, #32]
 800cdba:	b90b      	cbnz	r3, 800cdc0 <__swsetup_r+0x14>
 800cdbc:	f7ff feae 	bl	800cb1c <__sinit>
 800cdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc4:	0719      	lsls	r1, r3, #28
 800cdc6:	d422      	bmi.n	800ce0e <__swsetup_r+0x62>
 800cdc8:	06da      	lsls	r2, r3, #27
 800cdca:	d407      	bmi.n	800cddc <__swsetup_r+0x30>
 800cdcc:	2209      	movs	r2, #9
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdda:	e033      	b.n	800ce44 <__swsetup_r+0x98>
 800cddc:	0758      	lsls	r0, r3, #29
 800cdde:	d512      	bpl.n	800ce06 <__swsetup_r+0x5a>
 800cde0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cde2:	b141      	cbz	r1, 800cdf6 <__swsetup_r+0x4a>
 800cde4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cde8:	4299      	cmp	r1, r3
 800cdea:	d002      	beq.n	800cdf2 <__swsetup_r+0x46>
 800cdec:	4628      	mov	r0, r5
 800cdee:	f000 ff1f 	bl	800dc30 <_free_r>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6063      	str	r3, [r4, #4]
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	f043 0308 	orr.w	r3, r3, #8
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	b94b      	cbnz	r3, 800ce26 <__swsetup_r+0x7a>
 800ce12:	89a3      	ldrh	r3, [r4, #12]
 800ce14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1c:	d003      	beq.n	800ce26 <__swsetup_r+0x7a>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f001 ff05 	bl	800ec30 <__smakebuf_r>
 800ce26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2a:	f013 0201 	ands.w	r2, r3, #1
 800ce2e:	d00a      	beq.n	800ce46 <__swsetup_r+0x9a>
 800ce30:	2200      	movs	r2, #0
 800ce32:	60a2      	str	r2, [r4, #8]
 800ce34:	6962      	ldr	r2, [r4, #20]
 800ce36:	4252      	negs	r2, r2
 800ce38:	61a2      	str	r2, [r4, #24]
 800ce3a:	6922      	ldr	r2, [r4, #16]
 800ce3c:	b942      	cbnz	r2, 800ce50 <__swsetup_r+0xa4>
 800ce3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce42:	d1c5      	bne.n	800cdd0 <__swsetup_r+0x24>
 800ce44:	bd38      	pop	{r3, r4, r5, pc}
 800ce46:	0799      	lsls	r1, r3, #30
 800ce48:	bf58      	it	pl
 800ce4a:	6962      	ldrpl	r2, [r4, #20]
 800ce4c:	60a2      	str	r2, [r4, #8]
 800ce4e:	e7f4      	b.n	800ce3a <__swsetup_r+0x8e>
 800ce50:	2000      	movs	r0, #0
 800ce52:	e7f7      	b.n	800ce44 <__swsetup_r+0x98>
 800ce54:	200000a8 	.word	0x200000a8

0800ce58 <memset>:
 800ce58:	4402      	add	r2, r0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d100      	bne.n	800ce62 <memset+0xa>
 800ce60:	4770      	bx	lr
 800ce62:	f803 1b01 	strb.w	r1, [r3], #1
 800ce66:	e7f9      	b.n	800ce5c <memset+0x4>

0800ce68 <_localeconv_r>:
 800ce68:	4800      	ldr	r0, [pc, #0]	@ (800ce6c <_localeconv_r+0x4>)
 800ce6a:	4770      	bx	lr
 800ce6c:	200001e8 	.word	0x200001e8

0800ce70 <_close_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d06      	ldr	r5, [pc, #24]	@ (800ce8c <_close_r+0x1c>)
 800ce74:	2300      	movs	r3, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	f7f7 fbb4 	bl	80045e8 <_close>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	d102      	bne.n	800ce8a <_close_r+0x1a>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	b103      	cbz	r3, 800ce8a <_close_r+0x1a>
 800ce88:	6023      	str	r3, [r4, #0]
 800ce8a:	bd38      	pop	{r3, r4, r5, pc}
 800ce8c:	20001924 	.word	0x20001924

0800ce90 <_lseek_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d07      	ldr	r5, [pc, #28]	@ (800ceb0 <_lseek_r+0x20>)
 800ce94:	4604      	mov	r4, r0
 800ce96:	4608      	mov	r0, r1
 800ce98:	4611      	mov	r1, r2
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	602a      	str	r2, [r5, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	f7f7 fbc9 	bl	8004636 <_lseek>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_lseek_r+0x1e>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_lseek_r+0x1e>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	20001924 	.word	0x20001924

0800ceb4 <_read_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d07      	ldr	r5, [pc, #28]	@ (800ced4 <_read_r+0x20>)
 800ceb8:	4604      	mov	r4, r0
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	602a      	str	r2, [r5, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f7f7 fb57 	bl	8004576 <_read>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_read_r+0x1e>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_read_r+0x1e>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20001924 	.word	0x20001924

0800ced8 <_write_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d07      	ldr	r5, [pc, #28]	@ (800cef8 <_write_r+0x20>)
 800cedc:	4604      	mov	r4, r0
 800cede:	4608      	mov	r0, r1
 800cee0:	4611      	mov	r1, r2
 800cee2:	2200      	movs	r2, #0
 800cee4:	602a      	str	r2, [r5, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f7f7 fb62 	bl	80045b0 <_write>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_write_r+0x1e>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_write_r+0x1e>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	20001924 	.word	0x20001924

0800cefc <__errno>:
 800cefc:	4b01      	ldr	r3, [pc, #4]	@ (800cf04 <__errno+0x8>)
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	200000a8 	.word	0x200000a8

0800cf08 <__libc_init_array>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	4d0d      	ldr	r5, [pc, #52]	@ (800cf40 <__libc_init_array+0x38>)
 800cf0c:	4c0d      	ldr	r4, [pc, #52]	@ (800cf44 <__libc_init_array+0x3c>)
 800cf0e:	1b64      	subs	r4, r4, r5
 800cf10:	10a4      	asrs	r4, r4, #2
 800cf12:	2600      	movs	r6, #0
 800cf14:	42a6      	cmp	r6, r4
 800cf16:	d109      	bne.n	800cf2c <__libc_init_array+0x24>
 800cf18:	4d0b      	ldr	r5, [pc, #44]	@ (800cf48 <__libc_init_array+0x40>)
 800cf1a:	4c0c      	ldr	r4, [pc, #48]	@ (800cf4c <__libc_init_array+0x44>)
 800cf1c:	f001 ffd2 	bl	800eec4 <_init>
 800cf20:	1b64      	subs	r4, r4, r5
 800cf22:	10a4      	asrs	r4, r4, #2
 800cf24:	2600      	movs	r6, #0
 800cf26:	42a6      	cmp	r6, r4
 800cf28:	d105      	bne.n	800cf36 <__libc_init_array+0x2e>
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf30:	4798      	blx	r3
 800cf32:	3601      	adds	r6, #1
 800cf34:	e7ee      	b.n	800cf14 <__libc_init_array+0xc>
 800cf36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf3a:	4798      	blx	r3
 800cf3c:	3601      	adds	r6, #1
 800cf3e:	e7f2      	b.n	800cf26 <__libc_init_array+0x1e>
 800cf40:	080104d4 	.word	0x080104d4
 800cf44:	080104d4 	.word	0x080104d4
 800cf48:	080104d4 	.word	0x080104d4
 800cf4c:	080104d8 	.word	0x080104d8

0800cf50 <__retarget_lock_init_recursive>:
 800cf50:	4770      	bx	lr

0800cf52 <__retarget_lock_acquire_recursive>:
 800cf52:	4770      	bx	lr

0800cf54 <__retarget_lock_release_recursive>:
 800cf54:	4770      	bx	lr
	...

0800cf58 <__assert_func>:
 800cf58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf5a:	4614      	mov	r4, r2
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <__assert_func+0x2c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4605      	mov	r5, r0
 800cf64:	68d8      	ldr	r0, [r3, #12]
 800cf66:	b954      	cbnz	r4, 800cf7e <__assert_func+0x26>
 800cf68:	4b07      	ldr	r3, [pc, #28]	@ (800cf88 <__assert_func+0x30>)
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf70:	9100      	str	r1, [sp, #0]
 800cf72:	462b      	mov	r3, r5
 800cf74:	4905      	ldr	r1, [pc, #20]	@ (800cf8c <__assert_func+0x34>)
 800cf76:	f001 fe23 	bl	800ebc0 <fiprintf>
 800cf7a:	f001 feef 	bl	800ed5c <abort>
 800cf7e:	4b04      	ldr	r3, [pc, #16]	@ (800cf90 <__assert_func+0x38>)
 800cf80:	e7f4      	b.n	800cf6c <__assert_func+0x14>
 800cf82:	bf00      	nop
 800cf84:	200000a8 	.word	0x200000a8
 800cf88:	080101de 	.word	0x080101de
 800cf8c:	080101b0 	.word	0x080101b0
 800cf90:	080101a3 	.word	0x080101a3

0800cf94 <quorem>:
 800cf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	6903      	ldr	r3, [r0, #16]
 800cf9a:	690c      	ldr	r4, [r1, #16]
 800cf9c:	42a3      	cmp	r3, r4
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	db7e      	blt.n	800d0a0 <quorem+0x10c>
 800cfa2:	3c01      	subs	r4, #1
 800cfa4:	f101 0814 	add.w	r8, r1, #20
 800cfa8:	00a3      	lsls	r3, r4, #2
 800cfaa:	f100 0514 	add.w	r5, r0, #20
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfc6:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfca:	d32e      	bcc.n	800d02a <quorem+0x96>
 800cfcc:	f04f 0a00 	mov.w	sl, #0
 800cfd0:	46c4      	mov	ip, r8
 800cfd2:	46ae      	mov	lr, r5
 800cfd4:	46d3      	mov	fp, sl
 800cfd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfda:	b298      	uxth	r0, r3
 800cfdc:	fb06 a000 	mla	r0, r6, r0, sl
 800cfe0:	0c02      	lsrs	r2, r0, #16
 800cfe2:	0c1b      	lsrs	r3, r3, #16
 800cfe4:	fb06 2303 	mla	r3, r6, r3, r2
 800cfe8:	f8de 2000 	ldr.w	r2, [lr]
 800cfec:	b280      	uxth	r0, r0
 800cfee:	b292      	uxth	r2, r2
 800cff0:	1a12      	subs	r2, r2, r0
 800cff2:	445a      	add	r2, fp
 800cff4:	f8de 0000 	ldr.w	r0, [lr]
 800cff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d002:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d006:	b292      	uxth	r2, r2
 800d008:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d00c:	45e1      	cmp	r9, ip
 800d00e:	f84e 2b04 	str.w	r2, [lr], #4
 800d012:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d016:	d2de      	bcs.n	800cfd6 <quorem+0x42>
 800d018:	9b00      	ldr	r3, [sp, #0]
 800d01a:	58eb      	ldr	r3, [r5, r3]
 800d01c:	b92b      	cbnz	r3, 800d02a <quorem+0x96>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	3b04      	subs	r3, #4
 800d022:	429d      	cmp	r5, r3
 800d024:	461a      	mov	r2, r3
 800d026:	d32f      	bcc.n	800d088 <quorem+0xf4>
 800d028:	613c      	str	r4, [r7, #16]
 800d02a:	4638      	mov	r0, r7
 800d02c:	f001 f97a 	bl	800e324 <__mcmp>
 800d030:	2800      	cmp	r0, #0
 800d032:	db25      	blt.n	800d080 <quorem+0xec>
 800d034:	4629      	mov	r1, r5
 800d036:	2000      	movs	r0, #0
 800d038:	f858 2b04 	ldr.w	r2, [r8], #4
 800d03c:	f8d1 c000 	ldr.w	ip, [r1]
 800d040:	fa1f fe82 	uxth.w	lr, r2
 800d044:	fa1f f38c 	uxth.w	r3, ip
 800d048:	eba3 030e 	sub.w	r3, r3, lr
 800d04c:	4403      	add	r3, r0
 800d04e:	0c12      	lsrs	r2, r2, #16
 800d050:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d054:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d058:	b29b      	uxth	r3, r3
 800d05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d05e:	45c1      	cmp	r9, r8
 800d060:	f841 3b04 	str.w	r3, [r1], #4
 800d064:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d068:	d2e6      	bcs.n	800d038 <quorem+0xa4>
 800d06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d06e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d072:	b922      	cbnz	r2, 800d07e <quorem+0xea>
 800d074:	3b04      	subs	r3, #4
 800d076:	429d      	cmp	r5, r3
 800d078:	461a      	mov	r2, r3
 800d07a:	d30b      	bcc.n	800d094 <quorem+0x100>
 800d07c:	613c      	str	r4, [r7, #16]
 800d07e:	3601      	adds	r6, #1
 800d080:	4630      	mov	r0, r6
 800d082:	b003      	add	sp, #12
 800d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	6812      	ldr	r2, [r2, #0]
 800d08a:	3b04      	subs	r3, #4
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	d1cb      	bne.n	800d028 <quorem+0x94>
 800d090:	3c01      	subs	r4, #1
 800d092:	e7c6      	b.n	800d022 <quorem+0x8e>
 800d094:	6812      	ldr	r2, [r2, #0]
 800d096:	3b04      	subs	r3, #4
 800d098:	2a00      	cmp	r2, #0
 800d09a:	d1ef      	bne.n	800d07c <quorem+0xe8>
 800d09c:	3c01      	subs	r4, #1
 800d09e:	e7ea      	b.n	800d076 <quorem+0xe2>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e7ee      	b.n	800d082 <quorem+0xee>
 800d0a4:	0000      	movs	r0, r0
	...

0800d0a8 <_dtoa_r>:
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	69c7      	ldr	r7, [r0, #28]
 800d0ae:	b099      	sub	sp, #100	@ 0x64
 800d0b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0b4:	ec55 4b10 	vmov	r4, r5, d0
 800d0b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d0ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0bc:	4683      	mov	fp, r0
 800d0be:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0c2:	b97f      	cbnz	r7, 800d0e4 <_dtoa_r+0x3c>
 800d0c4:	2010      	movs	r0, #16
 800d0c6:	f000 fdfd 	bl	800dcc4 <malloc>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d0d0:	b920      	cbnz	r0, 800d0dc <_dtoa_r+0x34>
 800d0d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d370 <_dtoa_r+0x2c8>)
 800d0d4:	21ef      	movs	r1, #239	@ 0xef
 800d0d6:	48a7      	ldr	r0, [pc, #668]	@ (800d374 <_dtoa_r+0x2cc>)
 800d0d8:	f7ff ff3e 	bl	800cf58 <__assert_func>
 800d0dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d0e0:	6007      	str	r7, [r0, #0]
 800d0e2:	60c7      	str	r7, [r0, #12]
 800d0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0e8:	6819      	ldr	r1, [r3, #0]
 800d0ea:	b159      	cbz	r1, 800d104 <_dtoa_r+0x5c>
 800d0ec:	685a      	ldr	r2, [r3, #4]
 800d0ee:	604a      	str	r2, [r1, #4]
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	4093      	lsls	r3, r2
 800d0f4:	608b      	str	r3, [r1, #8]
 800d0f6:	4658      	mov	r0, fp
 800d0f8:	f000 feda 	bl	800deb0 <_Bfree>
 800d0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	1e2b      	subs	r3, r5, #0
 800d106:	bfb9      	ittee	lt
 800d108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d10c:	9303      	strlt	r3, [sp, #12]
 800d10e:	2300      	movge	r3, #0
 800d110:	6033      	strge	r3, [r6, #0]
 800d112:	9f03      	ldr	r7, [sp, #12]
 800d114:	4b98      	ldr	r3, [pc, #608]	@ (800d378 <_dtoa_r+0x2d0>)
 800d116:	bfbc      	itt	lt
 800d118:	2201      	movlt	r2, #1
 800d11a:	6032      	strlt	r2, [r6, #0]
 800d11c:	43bb      	bics	r3, r7
 800d11e:	d112      	bne.n	800d146 <_dtoa_r+0x9e>
 800d120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d122:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d12c:	4323      	orrs	r3, r4
 800d12e:	f000 854d 	beq.w	800dbcc <_dtoa_r+0xb24>
 800d132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d38c <_dtoa_r+0x2e4>
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 854f 	beq.w	800dbdc <_dtoa_r+0xb34>
 800d13e:	f10a 0303 	add.w	r3, sl, #3
 800d142:	f000 bd49 	b.w	800dbd8 <_dtoa_r+0xb30>
 800d146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d14a:	2200      	movs	r2, #0
 800d14c:	ec51 0b17 	vmov	r0, r1, d7
 800d150:	2300      	movs	r3, #0
 800d152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d156:	f7f3 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800d15a:	4680      	mov	r8, r0
 800d15c:	b158      	cbz	r0, 800d176 <_dtoa_r+0xce>
 800d15e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d160:	2301      	movs	r3, #1
 800d162:	6013      	str	r3, [r2, #0]
 800d164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d166:	b113      	cbz	r3, 800d16e <_dtoa_r+0xc6>
 800d168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d16a:	4b84      	ldr	r3, [pc, #528]	@ (800d37c <_dtoa_r+0x2d4>)
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d390 <_dtoa_r+0x2e8>
 800d172:	f000 bd33 	b.w	800dbdc <_dtoa_r+0xb34>
 800d176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d17a:	aa16      	add	r2, sp, #88	@ 0x58
 800d17c:	a917      	add	r1, sp, #92	@ 0x5c
 800d17e:	4658      	mov	r0, fp
 800d180:	f001 f980 	bl	800e484 <__d2b>
 800d184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d188:	4681      	mov	r9, r0
 800d18a:	2e00      	cmp	r6, #0
 800d18c:	d077      	beq.n	800d27e <_dtoa_r+0x1d6>
 800d18e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d19c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d1a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d1a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4b74      	ldr	r3, [pc, #464]	@ (800d380 <_dtoa_r+0x2d8>)
 800d1ae:	f7f3 f873 	bl	8000298 <__aeabi_dsub>
 800d1b2:	a369      	add	r3, pc, #420	@ (adr r3, 800d358 <_dtoa_r+0x2b0>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 fa26 	bl	8000608 <__aeabi_dmul>
 800d1bc:	a368      	add	r3, pc, #416	@ (adr r3, 800d360 <_dtoa_r+0x2b8>)
 800d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c2:	f7f3 f86b 	bl	800029c <__adddf3>
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	f7f3 f9b2 	bl	8000534 <__aeabi_i2d>
 800d1d0:	a365      	add	r3, pc, #404	@ (adr r3, 800d368 <_dtoa_r+0x2c0>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fa17 	bl	8000608 <__aeabi_dmul>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 f85b 	bl	800029c <__adddf3>
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	f7f3 fcbd 	bl	8000b68 <__aeabi_d2iz>
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	4607      	mov	r7, r0
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 fc78 	bl	8000aec <__aeabi_dcmplt>
 800d1fc:	b140      	cbz	r0, 800d210 <_dtoa_r+0x168>
 800d1fe:	4638      	mov	r0, r7
 800d200:	f7f3 f998 	bl	8000534 <__aeabi_i2d>
 800d204:	4622      	mov	r2, r4
 800d206:	462b      	mov	r3, r5
 800d208:	f7f3 fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800d20c:	b900      	cbnz	r0, 800d210 <_dtoa_r+0x168>
 800d20e:	3f01      	subs	r7, #1
 800d210:	2f16      	cmp	r7, #22
 800d212:	d851      	bhi.n	800d2b8 <_dtoa_r+0x210>
 800d214:	4b5b      	ldr	r3, [pc, #364]	@ (800d384 <_dtoa_r+0x2dc>)
 800d216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d222:	f7f3 fc63 	bl	8000aec <__aeabi_dcmplt>
 800d226:	2800      	cmp	r0, #0
 800d228:	d048      	beq.n	800d2bc <_dtoa_r+0x214>
 800d22a:	3f01      	subs	r7, #1
 800d22c:	2300      	movs	r3, #0
 800d22e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d232:	1b9b      	subs	r3, r3, r6
 800d234:	1e5a      	subs	r2, r3, #1
 800d236:	bf44      	itt	mi
 800d238:	f1c3 0801 	rsbmi	r8, r3, #1
 800d23c:	2300      	movmi	r3, #0
 800d23e:	9208      	str	r2, [sp, #32]
 800d240:	bf54      	ite	pl
 800d242:	f04f 0800 	movpl.w	r8, #0
 800d246:	9308      	strmi	r3, [sp, #32]
 800d248:	2f00      	cmp	r7, #0
 800d24a:	db39      	blt.n	800d2c0 <_dtoa_r+0x218>
 800d24c:	9b08      	ldr	r3, [sp, #32]
 800d24e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d250:	443b      	add	r3, r7
 800d252:	9308      	str	r3, [sp, #32]
 800d254:	2300      	movs	r3, #0
 800d256:	930a      	str	r3, [sp, #40]	@ 0x28
 800d258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d25a:	2b09      	cmp	r3, #9
 800d25c:	d864      	bhi.n	800d328 <_dtoa_r+0x280>
 800d25e:	2b05      	cmp	r3, #5
 800d260:	bfc4      	itt	gt
 800d262:	3b04      	subgt	r3, #4
 800d264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d268:	f1a3 0302 	sub.w	r3, r3, #2
 800d26c:	bfcc      	ite	gt
 800d26e:	2400      	movgt	r4, #0
 800d270:	2401      	movle	r4, #1
 800d272:	2b03      	cmp	r3, #3
 800d274:	d863      	bhi.n	800d33e <_dtoa_r+0x296>
 800d276:	e8df f003 	tbb	[pc, r3]
 800d27a:	372a      	.short	0x372a
 800d27c:	5535      	.short	0x5535
 800d27e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d282:	441e      	add	r6, r3
 800d284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d288:	2b20      	cmp	r3, #32
 800d28a:	bfc1      	itttt	gt
 800d28c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d290:	409f      	lslgt	r7, r3
 800d292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d296:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d29a:	bfd6      	itet	le
 800d29c:	f1c3 0320 	rsble	r3, r3, #32
 800d2a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d2a4:	fa04 f003 	lslle.w	r0, r4, r3
 800d2a8:	f7f3 f934 	bl	8000514 <__aeabi_ui2d>
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d2b2:	3e01      	subs	r6, #1
 800d2b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d2b6:	e777      	b.n	800d1a8 <_dtoa_r+0x100>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e7b8      	b.n	800d22e <_dtoa_r+0x186>
 800d2bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d2be:	e7b7      	b.n	800d230 <_dtoa_r+0x188>
 800d2c0:	427b      	negs	r3, r7
 800d2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	eba8 0807 	sub.w	r8, r8, r7
 800d2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2cc:	e7c4      	b.n	800d258 <_dtoa_r+0x1b0>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	dc35      	bgt.n	800d344 <_dtoa_r+0x29c>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	9307      	str	r3, [sp, #28]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2e2:	e00b      	b.n	800d2fc <_dtoa_r+0x254>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e7f3      	b.n	800d2d0 <_dtoa_r+0x228>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ee:	18fb      	adds	r3, r7, r3
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	9307      	str	r3, [sp, #28]
 800d2f8:	bfb8      	it	lt
 800d2fa:	2301      	movlt	r3, #1
 800d2fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d300:	2100      	movs	r1, #0
 800d302:	2204      	movs	r2, #4
 800d304:	f102 0514 	add.w	r5, r2, #20
 800d308:	429d      	cmp	r5, r3
 800d30a:	d91f      	bls.n	800d34c <_dtoa_r+0x2a4>
 800d30c:	6041      	str	r1, [r0, #4]
 800d30e:	4658      	mov	r0, fp
 800d310:	f000 fd8e 	bl	800de30 <_Balloc>
 800d314:	4682      	mov	sl, r0
 800d316:	2800      	cmp	r0, #0
 800d318:	d13c      	bne.n	800d394 <_dtoa_r+0x2ec>
 800d31a:	4b1b      	ldr	r3, [pc, #108]	@ (800d388 <_dtoa_r+0x2e0>)
 800d31c:	4602      	mov	r2, r0
 800d31e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d322:	e6d8      	b.n	800d0d6 <_dtoa_r+0x2e>
 800d324:	2301      	movs	r3, #1
 800d326:	e7e0      	b.n	800d2ea <_dtoa_r+0x242>
 800d328:	2401      	movs	r4, #1
 800d32a:	2300      	movs	r3, #0
 800d32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d32e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	9307      	str	r3, [sp, #28]
 800d338:	2200      	movs	r2, #0
 800d33a:	2312      	movs	r3, #18
 800d33c:	e7d0      	b.n	800d2e0 <_dtoa_r+0x238>
 800d33e:	2301      	movs	r3, #1
 800d340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d342:	e7f5      	b.n	800d330 <_dtoa_r+0x288>
 800d344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	9307      	str	r3, [sp, #28]
 800d34a:	e7d7      	b.n	800d2fc <_dtoa_r+0x254>
 800d34c:	3101      	adds	r1, #1
 800d34e:	0052      	lsls	r2, r2, #1
 800d350:	e7d8      	b.n	800d304 <_dtoa_r+0x25c>
 800d352:	bf00      	nop
 800d354:	f3af 8000 	nop.w
 800d358:	636f4361 	.word	0x636f4361
 800d35c:	3fd287a7 	.word	0x3fd287a7
 800d360:	8b60c8b3 	.word	0x8b60c8b3
 800d364:	3fc68a28 	.word	0x3fc68a28
 800d368:	509f79fb 	.word	0x509f79fb
 800d36c:	3fd34413 	.word	0x3fd34413
 800d370:	08010100 	.word	0x08010100
 800d374:	080101ec 	.word	0x080101ec
 800d378:	7ff00000 	.word	0x7ff00000
 800d37c:	08010180 	.word	0x08010180
 800d380:	3ff80000 	.word	0x3ff80000
 800d384:	080102e8 	.word	0x080102e8
 800d388:	08010244 	.word	0x08010244
 800d38c:	080101e8 	.word	0x080101e8
 800d390:	0801017f 	.word	0x0801017f
 800d394:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d398:	6018      	str	r0, [r3, #0]
 800d39a:	9b07      	ldr	r3, [sp, #28]
 800d39c:	2b0e      	cmp	r3, #14
 800d39e:	f200 80a4 	bhi.w	800d4ea <_dtoa_r+0x442>
 800d3a2:	2c00      	cmp	r4, #0
 800d3a4:	f000 80a1 	beq.w	800d4ea <_dtoa_r+0x442>
 800d3a8:	2f00      	cmp	r7, #0
 800d3aa:	dd33      	ble.n	800d414 <_dtoa_r+0x36c>
 800d3ac:	4bad      	ldr	r3, [pc, #692]	@ (800d664 <_dtoa_r+0x5bc>)
 800d3ae:	f007 020f 	and.w	r2, r7, #15
 800d3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3b6:	ed93 7b00 	vldr	d7, [r3]
 800d3ba:	05f8      	lsls	r0, r7, #23
 800d3bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d3c4:	d516      	bpl.n	800d3f4 <_dtoa_r+0x34c>
 800d3c6:	4ba8      	ldr	r3, [pc, #672]	@ (800d668 <_dtoa_r+0x5c0>)
 800d3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3d0:	f7f3 fa44 	bl	800085c <__aeabi_ddiv>
 800d3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3d8:	f004 040f 	and.w	r4, r4, #15
 800d3dc:	2603      	movs	r6, #3
 800d3de:	4da2      	ldr	r5, [pc, #648]	@ (800d668 <_dtoa_r+0x5c0>)
 800d3e0:	b954      	cbnz	r4, 800d3f8 <_dtoa_r+0x350>
 800d3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ea:	f7f3 fa37 	bl	800085c <__aeabi_ddiv>
 800d3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3f2:	e028      	b.n	800d446 <_dtoa_r+0x39e>
 800d3f4:	2602      	movs	r6, #2
 800d3f6:	e7f2      	b.n	800d3de <_dtoa_r+0x336>
 800d3f8:	07e1      	lsls	r1, r4, #31
 800d3fa:	d508      	bpl.n	800d40e <_dtoa_r+0x366>
 800d3fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d400:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d404:	f7f3 f900 	bl	8000608 <__aeabi_dmul>
 800d408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d40c:	3601      	adds	r6, #1
 800d40e:	1064      	asrs	r4, r4, #1
 800d410:	3508      	adds	r5, #8
 800d412:	e7e5      	b.n	800d3e0 <_dtoa_r+0x338>
 800d414:	f000 80d2 	beq.w	800d5bc <_dtoa_r+0x514>
 800d418:	427c      	negs	r4, r7
 800d41a:	4b92      	ldr	r3, [pc, #584]	@ (800d664 <_dtoa_r+0x5bc>)
 800d41c:	4d92      	ldr	r5, [pc, #584]	@ (800d668 <_dtoa_r+0x5c0>)
 800d41e:	f004 020f 	and.w	r2, r4, #15
 800d422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d42e:	f7f3 f8eb 	bl	8000608 <__aeabi_dmul>
 800d432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d436:	1124      	asrs	r4, r4, #4
 800d438:	2300      	movs	r3, #0
 800d43a:	2602      	movs	r6, #2
 800d43c:	2c00      	cmp	r4, #0
 800d43e:	f040 80b2 	bne.w	800d5a6 <_dtoa_r+0x4fe>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1d3      	bne.n	800d3ee <_dtoa_r+0x346>
 800d446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 80b7 	beq.w	800d5c0 <_dtoa_r+0x518>
 800d452:	4b86      	ldr	r3, [pc, #536]	@ (800d66c <_dtoa_r+0x5c4>)
 800d454:	2200      	movs	r2, #0
 800d456:	4620      	mov	r0, r4
 800d458:	4629      	mov	r1, r5
 800d45a:	f7f3 fb47 	bl	8000aec <__aeabi_dcmplt>
 800d45e:	2800      	cmp	r0, #0
 800d460:	f000 80ae 	beq.w	800d5c0 <_dtoa_r+0x518>
 800d464:	9b07      	ldr	r3, [sp, #28]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80aa 	beq.w	800d5c0 <_dtoa_r+0x518>
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd37      	ble.n	800d4e2 <_dtoa_r+0x43a>
 800d472:	1e7b      	subs	r3, r7, #1
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	4620      	mov	r0, r4
 800d478:	4b7d      	ldr	r3, [pc, #500]	@ (800d670 <_dtoa_r+0x5c8>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	4629      	mov	r1, r5
 800d47e:	f7f3 f8c3 	bl	8000608 <__aeabi_dmul>
 800d482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d486:	9c00      	ldr	r4, [sp, #0]
 800d488:	3601      	adds	r6, #1
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7f3 f852 	bl	8000534 <__aeabi_i2d>
 800d490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d494:	f7f3 f8b8 	bl	8000608 <__aeabi_dmul>
 800d498:	4b76      	ldr	r3, [pc, #472]	@ (800d674 <_dtoa_r+0x5cc>)
 800d49a:	2200      	movs	r2, #0
 800d49c:	f7f2 fefe 	bl	800029c <__adddf3>
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d4a6:	2c00      	cmp	r4, #0
 800d4a8:	f040 808d 	bne.w	800d5c6 <_dtoa_r+0x51e>
 800d4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4b0:	4b71      	ldr	r3, [pc, #452]	@ (800d678 <_dtoa_r+0x5d0>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f7f2 fef0 	bl	8000298 <__aeabi_dsub>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	4633      	mov	r3, r6
 800d4c4:	f7f3 fb30 	bl	8000b28 <__aeabi_dcmpgt>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	f040 828b 	bne.w	800d9e4 <_dtoa_r+0x93c>
 800d4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4d2:	462a      	mov	r2, r5
 800d4d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d4d8:	f7f3 fb08 	bl	8000aec <__aeabi_dcmplt>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	f040 8128 	bne.w	800d732 <_dtoa_r+0x68a>
 800d4e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d4e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d4ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f2c0 815a 	blt.w	800d7a6 <_dtoa_r+0x6fe>
 800d4f2:	2f0e      	cmp	r7, #14
 800d4f4:	f300 8157 	bgt.w	800d7a6 <_dtoa_r+0x6fe>
 800d4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d664 <_dtoa_r+0x5bc>)
 800d4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4fe:	ed93 7b00 	vldr	d7, [r3]
 800d502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	ed8d 7b00 	vstr	d7, [sp]
 800d50a:	da03      	bge.n	800d514 <_dtoa_r+0x46c>
 800d50c:	9b07      	ldr	r3, [sp, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f340 8101 	ble.w	800d716 <_dtoa_r+0x66e>
 800d514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d518:	4656      	mov	r6, sl
 800d51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 f99b 	bl	800085c <__aeabi_ddiv>
 800d526:	f7f3 fb1f 	bl	8000b68 <__aeabi_d2iz>
 800d52a:	4680      	mov	r8, r0
 800d52c:	f7f3 f802 	bl	8000534 <__aeabi_i2d>
 800d530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d534:	f7f3 f868 	bl	8000608 <__aeabi_dmul>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d544:	f7f2 fea8 	bl	8000298 <__aeabi_dsub>
 800d548:	f806 4b01 	strb.w	r4, [r6], #1
 800d54c:	9d07      	ldr	r5, [sp, #28]
 800d54e:	eba6 040a 	sub.w	r4, r6, sl
 800d552:	42a5      	cmp	r5, r4
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	f040 8117 	bne.w	800d78a <_dtoa_r+0x6e2>
 800d55c:	f7f2 fe9e 	bl	800029c <__adddf3>
 800d560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	f7f3 fade 	bl	8000b28 <__aeabi_dcmpgt>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f040 80f9 	bne.w	800d764 <_dtoa_r+0x6bc>
 800d572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d576:	4620      	mov	r0, r4
 800d578:	4629      	mov	r1, r5
 800d57a:	f7f3 faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800d57e:	b118      	cbz	r0, 800d588 <_dtoa_r+0x4e0>
 800d580:	f018 0f01 	tst.w	r8, #1
 800d584:	f040 80ee 	bne.w	800d764 <_dtoa_r+0x6bc>
 800d588:	4649      	mov	r1, r9
 800d58a:	4658      	mov	r0, fp
 800d58c:	f000 fc90 	bl	800deb0 <_Bfree>
 800d590:	2300      	movs	r3, #0
 800d592:	7033      	strb	r3, [r6, #0]
 800d594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d596:	3701      	adds	r7, #1
 800d598:	601f      	str	r7, [r3, #0]
 800d59a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 831d 	beq.w	800dbdc <_dtoa_r+0xb34>
 800d5a2:	601e      	str	r6, [r3, #0]
 800d5a4:	e31a      	b.n	800dbdc <_dtoa_r+0xb34>
 800d5a6:	07e2      	lsls	r2, r4, #31
 800d5a8:	d505      	bpl.n	800d5b6 <_dtoa_r+0x50e>
 800d5aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5ae:	f7f3 f82b 	bl	8000608 <__aeabi_dmul>
 800d5b2:	3601      	adds	r6, #1
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	1064      	asrs	r4, r4, #1
 800d5b8:	3508      	adds	r5, #8
 800d5ba:	e73f      	b.n	800d43c <_dtoa_r+0x394>
 800d5bc:	2602      	movs	r6, #2
 800d5be:	e742      	b.n	800d446 <_dtoa_r+0x39e>
 800d5c0:	9c07      	ldr	r4, [sp, #28]
 800d5c2:	9704      	str	r7, [sp, #16]
 800d5c4:	e761      	b.n	800d48a <_dtoa_r+0x3e2>
 800d5c6:	4b27      	ldr	r3, [pc, #156]	@ (800d664 <_dtoa_r+0x5bc>)
 800d5c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5d2:	4454      	add	r4, sl
 800d5d4:	2900      	cmp	r1, #0
 800d5d6:	d053      	beq.n	800d680 <_dtoa_r+0x5d8>
 800d5d8:	4928      	ldr	r1, [pc, #160]	@ (800d67c <_dtoa_r+0x5d4>)
 800d5da:	2000      	movs	r0, #0
 800d5dc:	f7f3 f93e 	bl	800085c <__aeabi_ddiv>
 800d5e0:	4633      	mov	r3, r6
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	f7f2 fe58 	bl	8000298 <__aeabi_dsub>
 800d5e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5ec:	4656      	mov	r6, sl
 800d5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5f2:	f7f3 fab9 	bl	8000b68 <__aeabi_d2iz>
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	f7f2 ff9c 	bl	8000534 <__aeabi_i2d>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d604:	f7f2 fe48 	bl	8000298 <__aeabi_dsub>
 800d608:	3530      	adds	r5, #48	@ 0x30
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d612:	f806 5b01 	strb.w	r5, [r6], #1
 800d616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d61a:	f7f3 fa67 	bl	8000aec <__aeabi_dcmplt>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d171      	bne.n	800d706 <_dtoa_r+0x65e>
 800d622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d626:	4911      	ldr	r1, [pc, #68]	@ (800d66c <_dtoa_r+0x5c4>)
 800d628:	2000      	movs	r0, #0
 800d62a:	f7f2 fe35 	bl	8000298 <__aeabi_dsub>
 800d62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d632:	f7f3 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800d636:	2800      	cmp	r0, #0
 800d638:	f040 8095 	bne.w	800d766 <_dtoa_r+0x6be>
 800d63c:	42a6      	cmp	r6, r4
 800d63e:	f43f af50 	beq.w	800d4e2 <_dtoa_r+0x43a>
 800d642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d646:	4b0a      	ldr	r3, [pc, #40]	@ (800d670 <_dtoa_r+0x5c8>)
 800d648:	2200      	movs	r2, #0
 800d64a:	f7f2 ffdd 	bl	8000608 <__aeabi_dmul>
 800d64e:	4b08      	ldr	r3, [pc, #32]	@ (800d670 <_dtoa_r+0x5c8>)
 800d650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d654:	2200      	movs	r2, #0
 800d656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d65a:	f7f2 ffd5 	bl	8000608 <__aeabi_dmul>
 800d65e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d662:	e7c4      	b.n	800d5ee <_dtoa_r+0x546>
 800d664:	080102e8 	.word	0x080102e8
 800d668:	080102c0 	.word	0x080102c0
 800d66c:	3ff00000 	.word	0x3ff00000
 800d670:	40240000 	.word	0x40240000
 800d674:	401c0000 	.word	0x401c0000
 800d678:	40140000 	.word	0x40140000
 800d67c:	3fe00000 	.word	0x3fe00000
 800d680:	4631      	mov	r1, r6
 800d682:	4628      	mov	r0, r5
 800d684:	f7f2 ffc0 	bl	8000608 <__aeabi_dmul>
 800d688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d68c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d68e:	4656      	mov	r6, sl
 800d690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d694:	f7f3 fa68 	bl	8000b68 <__aeabi_d2iz>
 800d698:	4605      	mov	r5, r0
 800d69a:	f7f2 ff4b 	bl	8000534 <__aeabi_i2d>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a6:	f7f2 fdf7 	bl	8000298 <__aeabi_dsub>
 800d6aa:	3530      	adds	r5, #48	@ 0x30
 800d6ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	42a6      	cmp	r6, r4
 800d6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6ba:	f04f 0200 	mov.w	r2, #0
 800d6be:	d124      	bne.n	800d70a <_dtoa_r+0x662>
 800d6c0:	4bac      	ldr	r3, [pc, #688]	@ (800d974 <_dtoa_r+0x8cc>)
 800d6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6c6:	f7f2 fde9 	bl	800029c <__adddf3>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6d2:	f7f3 fa29 	bl	8000b28 <__aeabi_dcmpgt>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d145      	bne.n	800d766 <_dtoa_r+0x6be>
 800d6da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6de:	49a5      	ldr	r1, [pc, #660]	@ (800d974 <_dtoa_r+0x8cc>)
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	f7f2 fdd9 	bl	8000298 <__aeabi_dsub>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ee:	f7f3 f9fd 	bl	8000aec <__aeabi_dcmplt>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f43f aef5 	beq.w	800d4e2 <_dtoa_r+0x43a>
 800d6f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d6fa:	1e73      	subs	r3, r6, #1
 800d6fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d6fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d702:	2b30      	cmp	r3, #48	@ 0x30
 800d704:	d0f8      	beq.n	800d6f8 <_dtoa_r+0x650>
 800d706:	9f04      	ldr	r7, [sp, #16]
 800d708:	e73e      	b.n	800d588 <_dtoa_r+0x4e0>
 800d70a:	4b9b      	ldr	r3, [pc, #620]	@ (800d978 <_dtoa_r+0x8d0>)
 800d70c:	f7f2 ff7c 	bl	8000608 <__aeabi_dmul>
 800d710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d714:	e7bc      	b.n	800d690 <_dtoa_r+0x5e8>
 800d716:	d10c      	bne.n	800d732 <_dtoa_r+0x68a>
 800d718:	4b98      	ldr	r3, [pc, #608]	@ (800d97c <_dtoa_r+0x8d4>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d728:	f7f3 f9f4 	bl	8000b14 <__aeabi_dcmpge>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	f000 8157 	beq.w	800d9e0 <_dtoa_r+0x938>
 800d732:	2400      	movs	r4, #0
 800d734:	4625      	mov	r5, r4
 800d736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d738:	43db      	mvns	r3, r3
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	4656      	mov	r6, sl
 800d73e:	2700      	movs	r7, #0
 800d740:	4621      	mov	r1, r4
 800d742:	4658      	mov	r0, fp
 800d744:	f000 fbb4 	bl	800deb0 <_Bfree>
 800d748:	2d00      	cmp	r5, #0
 800d74a:	d0dc      	beq.n	800d706 <_dtoa_r+0x65e>
 800d74c:	b12f      	cbz	r7, 800d75a <_dtoa_r+0x6b2>
 800d74e:	42af      	cmp	r7, r5
 800d750:	d003      	beq.n	800d75a <_dtoa_r+0x6b2>
 800d752:	4639      	mov	r1, r7
 800d754:	4658      	mov	r0, fp
 800d756:	f000 fbab 	bl	800deb0 <_Bfree>
 800d75a:	4629      	mov	r1, r5
 800d75c:	4658      	mov	r0, fp
 800d75e:	f000 fba7 	bl	800deb0 <_Bfree>
 800d762:	e7d0      	b.n	800d706 <_dtoa_r+0x65e>
 800d764:	9704      	str	r7, [sp, #16]
 800d766:	4633      	mov	r3, r6
 800d768:	461e      	mov	r6, r3
 800d76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d76e:	2a39      	cmp	r2, #57	@ 0x39
 800d770:	d107      	bne.n	800d782 <_dtoa_r+0x6da>
 800d772:	459a      	cmp	sl, r3
 800d774:	d1f8      	bne.n	800d768 <_dtoa_r+0x6c0>
 800d776:	9a04      	ldr	r2, [sp, #16]
 800d778:	3201      	adds	r2, #1
 800d77a:	9204      	str	r2, [sp, #16]
 800d77c:	2230      	movs	r2, #48	@ 0x30
 800d77e:	f88a 2000 	strb.w	r2, [sl]
 800d782:	781a      	ldrb	r2, [r3, #0]
 800d784:	3201      	adds	r2, #1
 800d786:	701a      	strb	r2, [r3, #0]
 800d788:	e7bd      	b.n	800d706 <_dtoa_r+0x65e>
 800d78a:	4b7b      	ldr	r3, [pc, #492]	@ (800d978 <_dtoa_r+0x8d0>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	f7f2 ff3b 	bl	8000608 <__aeabi_dmul>
 800d792:	2200      	movs	r2, #0
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	460d      	mov	r5, r1
 800d79a:	f7f3 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	f43f aebb 	beq.w	800d51a <_dtoa_r+0x472>
 800d7a4:	e6f0      	b.n	800d588 <_dtoa_r+0x4e0>
 800d7a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	f000 80db 	beq.w	800d964 <_dtoa_r+0x8bc>
 800d7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7b0:	2a01      	cmp	r2, #1
 800d7b2:	f300 80bf 	bgt.w	800d934 <_dtoa_r+0x88c>
 800d7b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d7b8:	2a00      	cmp	r2, #0
 800d7ba:	f000 80b7 	beq.w	800d92c <_dtoa_r+0x884>
 800d7be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d7c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7c4:	4646      	mov	r6, r8
 800d7c6:	9a08      	ldr	r2, [sp, #32]
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	441a      	add	r2, r3
 800d7cc:	4658      	mov	r0, fp
 800d7ce:	4498      	add	r8, r3
 800d7d0:	9208      	str	r2, [sp, #32]
 800d7d2:	f000 fc21 	bl	800e018 <__i2b>
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b15e      	cbz	r6, 800d7f2 <_dtoa_r+0x74a>
 800d7da:	9b08      	ldr	r3, [sp, #32]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dd08      	ble.n	800d7f2 <_dtoa_r+0x74a>
 800d7e0:	42b3      	cmp	r3, r6
 800d7e2:	9a08      	ldr	r2, [sp, #32]
 800d7e4:	bfa8      	it	ge
 800d7e6:	4633      	movge	r3, r6
 800d7e8:	eba8 0803 	sub.w	r8, r8, r3
 800d7ec:	1af6      	subs	r6, r6, r3
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	9308      	str	r3, [sp, #32]
 800d7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7f4:	b1f3      	cbz	r3, 800d834 <_dtoa_r+0x78c>
 800d7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 80b7 	beq.w	800d96c <_dtoa_r+0x8c4>
 800d7fe:	b18c      	cbz	r4, 800d824 <_dtoa_r+0x77c>
 800d800:	4629      	mov	r1, r5
 800d802:	4622      	mov	r2, r4
 800d804:	4658      	mov	r0, fp
 800d806:	f000 fcc7 	bl	800e198 <__pow5mult>
 800d80a:	464a      	mov	r2, r9
 800d80c:	4601      	mov	r1, r0
 800d80e:	4605      	mov	r5, r0
 800d810:	4658      	mov	r0, fp
 800d812:	f000 fc17 	bl	800e044 <__multiply>
 800d816:	4649      	mov	r1, r9
 800d818:	9004      	str	r0, [sp, #16]
 800d81a:	4658      	mov	r0, fp
 800d81c:	f000 fb48 	bl	800deb0 <_Bfree>
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	4699      	mov	r9, r3
 800d824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d826:	1b1a      	subs	r2, r3, r4
 800d828:	d004      	beq.n	800d834 <_dtoa_r+0x78c>
 800d82a:	4649      	mov	r1, r9
 800d82c:	4658      	mov	r0, fp
 800d82e:	f000 fcb3 	bl	800e198 <__pow5mult>
 800d832:	4681      	mov	r9, r0
 800d834:	2101      	movs	r1, #1
 800d836:	4658      	mov	r0, fp
 800d838:	f000 fbee 	bl	800e018 <__i2b>
 800d83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d83e:	4604      	mov	r4, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 81cf 	beq.w	800dbe4 <_dtoa_r+0xb3c>
 800d846:	461a      	mov	r2, r3
 800d848:	4601      	mov	r1, r0
 800d84a:	4658      	mov	r0, fp
 800d84c:	f000 fca4 	bl	800e198 <__pow5mult>
 800d850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d852:	2b01      	cmp	r3, #1
 800d854:	4604      	mov	r4, r0
 800d856:	f300 8095 	bgt.w	800d984 <_dtoa_r+0x8dc>
 800d85a:	9b02      	ldr	r3, [sp, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 8087 	bne.w	800d970 <_dtoa_r+0x8c8>
 800d862:	9b03      	ldr	r3, [sp, #12]
 800d864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f040 8089 	bne.w	800d980 <_dtoa_r+0x8d8>
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d874:	0d1b      	lsrs	r3, r3, #20
 800d876:	051b      	lsls	r3, r3, #20
 800d878:	b12b      	cbz	r3, 800d886 <_dtoa_r+0x7de>
 800d87a:	9b08      	ldr	r3, [sp, #32]
 800d87c:	3301      	adds	r3, #1
 800d87e:	9308      	str	r3, [sp, #32]
 800d880:	f108 0801 	add.w	r8, r8, #1
 800d884:	2301      	movs	r3, #1
 800d886:	930a      	str	r3, [sp, #40]	@ 0x28
 800d888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 81b0 	beq.w	800dbf0 <_dtoa_r+0xb48>
 800d890:	6923      	ldr	r3, [r4, #16]
 800d892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d896:	6918      	ldr	r0, [r3, #16]
 800d898:	f000 fb72 	bl	800df80 <__hi0bits>
 800d89c:	f1c0 0020 	rsb	r0, r0, #32
 800d8a0:	9b08      	ldr	r3, [sp, #32]
 800d8a2:	4418      	add	r0, r3
 800d8a4:	f010 001f 	ands.w	r0, r0, #31
 800d8a8:	d077      	beq.n	800d99a <_dtoa_r+0x8f2>
 800d8aa:	f1c0 0320 	rsb	r3, r0, #32
 800d8ae:	2b04      	cmp	r3, #4
 800d8b0:	dd6b      	ble.n	800d98a <_dtoa_r+0x8e2>
 800d8b2:	9b08      	ldr	r3, [sp, #32]
 800d8b4:	f1c0 001c 	rsb	r0, r0, #28
 800d8b8:	4403      	add	r3, r0
 800d8ba:	4480      	add	r8, r0
 800d8bc:	4406      	add	r6, r0
 800d8be:	9308      	str	r3, [sp, #32]
 800d8c0:	f1b8 0f00 	cmp.w	r8, #0
 800d8c4:	dd05      	ble.n	800d8d2 <_dtoa_r+0x82a>
 800d8c6:	4649      	mov	r1, r9
 800d8c8:	4642      	mov	r2, r8
 800d8ca:	4658      	mov	r0, fp
 800d8cc:	f000 fcbe 	bl	800e24c <__lshift>
 800d8d0:	4681      	mov	r9, r0
 800d8d2:	9b08      	ldr	r3, [sp, #32]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	dd05      	ble.n	800d8e4 <_dtoa_r+0x83c>
 800d8d8:	4621      	mov	r1, r4
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4658      	mov	r0, fp
 800d8de:	f000 fcb5 	bl	800e24c <__lshift>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d059      	beq.n	800d99e <_dtoa_r+0x8f6>
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	4648      	mov	r0, r9
 800d8ee:	f000 fd19 	bl	800e324 <__mcmp>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	da53      	bge.n	800d99e <_dtoa_r+0x8f6>
 800d8f6:	1e7b      	subs	r3, r7, #1
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	4649      	mov	r1, r9
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	220a      	movs	r2, #10
 800d900:	4658      	mov	r0, fp
 800d902:	f000 faf7 	bl	800def4 <__multadd>
 800d906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d908:	4681      	mov	r9, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 8172 	beq.w	800dbf4 <_dtoa_r+0xb4c>
 800d910:	2300      	movs	r3, #0
 800d912:	4629      	mov	r1, r5
 800d914:	220a      	movs	r2, #10
 800d916:	4658      	mov	r0, fp
 800d918:	f000 faec 	bl	800def4 <__multadd>
 800d91c:	9b00      	ldr	r3, [sp, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	4605      	mov	r5, r0
 800d922:	dc67      	bgt.n	800d9f4 <_dtoa_r+0x94c>
 800d924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d926:	2b02      	cmp	r3, #2
 800d928:	dc41      	bgt.n	800d9ae <_dtoa_r+0x906>
 800d92a:	e063      	b.n	800d9f4 <_dtoa_r+0x94c>
 800d92c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d92e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d932:	e746      	b.n	800d7c2 <_dtoa_r+0x71a>
 800d934:	9b07      	ldr	r3, [sp, #28]
 800d936:	1e5c      	subs	r4, r3, #1
 800d938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d93a:	42a3      	cmp	r3, r4
 800d93c:	bfbf      	itttt	lt
 800d93e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d944:	1ae3      	sublt	r3, r4, r3
 800d946:	bfb4      	ite	lt
 800d948:	18d2      	addlt	r2, r2, r3
 800d94a:	1b1c      	subge	r4, r3, r4
 800d94c:	9b07      	ldr	r3, [sp, #28]
 800d94e:	bfbc      	itt	lt
 800d950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d952:	2400      	movlt	r4, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	bfb5      	itete	lt
 800d958:	eba8 0603 	sublt.w	r6, r8, r3
 800d95c:	9b07      	ldrge	r3, [sp, #28]
 800d95e:	2300      	movlt	r3, #0
 800d960:	4646      	movge	r6, r8
 800d962:	e730      	b.n	800d7c6 <_dtoa_r+0x71e>
 800d964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d968:	4646      	mov	r6, r8
 800d96a:	e735      	b.n	800d7d8 <_dtoa_r+0x730>
 800d96c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d96e:	e75c      	b.n	800d82a <_dtoa_r+0x782>
 800d970:	2300      	movs	r3, #0
 800d972:	e788      	b.n	800d886 <_dtoa_r+0x7de>
 800d974:	3fe00000 	.word	0x3fe00000
 800d978:	40240000 	.word	0x40240000
 800d97c:	40140000 	.word	0x40140000
 800d980:	9b02      	ldr	r3, [sp, #8]
 800d982:	e780      	b.n	800d886 <_dtoa_r+0x7de>
 800d984:	2300      	movs	r3, #0
 800d986:	930a      	str	r3, [sp, #40]	@ 0x28
 800d988:	e782      	b.n	800d890 <_dtoa_r+0x7e8>
 800d98a:	d099      	beq.n	800d8c0 <_dtoa_r+0x818>
 800d98c:	9a08      	ldr	r2, [sp, #32]
 800d98e:	331c      	adds	r3, #28
 800d990:	441a      	add	r2, r3
 800d992:	4498      	add	r8, r3
 800d994:	441e      	add	r6, r3
 800d996:	9208      	str	r2, [sp, #32]
 800d998:	e792      	b.n	800d8c0 <_dtoa_r+0x818>
 800d99a:	4603      	mov	r3, r0
 800d99c:	e7f6      	b.n	800d98c <_dtoa_r+0x8e4>
 800d99e:	9b07      	ldr	r3, [sp, #28]
 800d9a0:	9704      	str	r7, [sp, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dc20      	bgt.n	800d9e8 <_dtoa_r+0x940>
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	dd1e      	ble.n	800d9ec <_dtoa_r+0x944>
 800d9ae:	9b00      	ldr	r3, [sp, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f47f aec0 	bne.w	800d736 <_dtoa_r+0x68e>
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	2205      	movs	r2, #5
 800d9ba:	4658      	mov	r0, fp
 800d9bc:	f000 fa9a 	bl	800def4 <__multadd>
 800d9c0:	4601      	mov	r1, r0
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	4648      	mov	r0, r9
 800d9c6:	f000 fcad 	bl	800e324 <__mcmp>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	f77f aeb3 	ble.w	800d736 <_dtoa_r+0x68e>
 800d9d0:	4656      	mov	r6, sl
 800d9d2:	2331      	movs	r3, #49	@ 0x31
 800d9d4:	f806 3b01 	strb.w	r3, [r6], #1
 800d9d8:	9b04      	ldr	r3, [sp, #16]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	9304      	str	r3, [sp, #16]
 800d9de:	e6ae      	b.n	800d73e <_dtoa_r+0x696>
 800d9e0:	9c07      	ldr	r4, [sp, #28]
 800d9e2:	9704      	str	r7, [sp, #16]
 800d9e4:	4625      	mov	r5, r4
 800d9e6:	e7f3      	b.n	800d9d0 <_dtoa_r+0x928>
 800d9e8:	9b07      	ldr	r3, [sp, #28]
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f000 8104 	beq.w	800dbfc <_dtoa_r+0xb54>
 800d9f4:	2e00      	cmp	r6, #0
 800d9f6:	dd05      	ble.n	800da04 <_dtoa_r+0x95c>
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4632      	mov	r2, r6
 800d9fc:	4658      	mov	r0, fp
 800d9fe:	f000 fc25 	bl	800e24c <__lshift>
 800da02:	4605      	mov	r5, r0
 800da04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da06:	2b00      	cmp	r3, #0
 800da08:	d05a      	beq.n	800dac0 <_dtoa_r+0xa18>
 800da0a:	6869      	ldr	r1, [r5, #4]
 800da0c:	4658      	mov	r0, fp
 800da0e:	f000 fa0f 	bl	800de30 <_Balloc>
 800da12:	4606      	mov	r6, r0
 800da14:	b928      	cbnz	r0, 800da22 <_dtoa_r+0x97a>
 800da16:	4b84      	ldr	r3, [pc, #528]	@ (800dc28 <_dtoa_r+0xb80>)
 800da18:	4602      	mov	r2, r0
 800da1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800da1e:	f7ff bb5a 	b.w	800d0d6 <_dtoa_r+0x2e>
 800da22:	692a      	ldr	r2, [r5, #16]
 800da24:	3202      	adds	r2, #2
 800da26:	0092      	lsls	r2, r2, #2
 800da28:	f105 010c 	add.w	r1, r5, #12
 800da2c:	300c      	adds	r0, #12
 800da2e:	f001 f987 	bl	800ed40 <memcpy>
 800da32:	2201      	movs	r2, #1
 800da34:	4631      	mov	r1, r6
 800da36:	4658      	mov	r0, fp
 800da38:	f000 fc08 	bl	800e24c <__lshift>
 800da3c:	f10a 0301 	add.w	r3, sl, #1
 800da40:	9307      	str	r3, [sp, #28]
 800da42:	9b00      	ldr	r3, [sp, #0]
 800da44:	4453      	add	r3, sl
 800da46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da48:	9b02      	ldr	r3, [sp, #8]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	462f      	mov	r7, r5
 800da50:	930a      	str	r3, [sp, #40]	@ 0x28
 800da52:	4605      	mov	r5, r0
 800da54:	9b07      	ldr	r3, [sp, #28]
 800da56:	4621      	mov	r1, r4
 800da58:	3b01      	subs	r3, #1
 800da5a:	4648      	mov	r0, r9
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	f7ff fa99 	bl	800cf94 <quorem>
 800da62:	4639      	mov	r1, r7
 800da64:	9002      	str	r0, [sp, #8]
 800da66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da6a:	4648      	mov	r0, r9
 800da6c:	f000 fc5a 	bl	800e324 <__mcmp>
 800da70:	462a      	mov	r2, r5
 800da72:	9008      	str	r0, [sp, #32]
 800da74:	4621      	mov	r1, r4
 800da76:	4658      	mov	r0, fp
 800da78:	f000 fc70 	bl	800e35c <__mdiff>
 800da7c:	68c2      	ldr	r2, [r0, #12]
 800da7e:	4606      	mov	r6, r0
 800da80:	bb02      	cbnz	r2, 800dac4 <_dtoa_r+0xa1c>
 800da82:	4601      	mov	r1, r0
 800da84:	4648      	mov	r0, r9
 800da86:	f000 fc4d 	bl	800e324 <__mcmp>
 800da8a:	4602      	mov	r2, r0
 800da8c:	4631      	mov	r1, r6
 800da8e:	4658      	mov	r0, fp
 800da90:	920e      	str	r2, [sp, #56]	@ 0x38
 800da92:	f000 fa0d 	bl	800deb0 <_Bfree>
 800da96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da9a:	9e07      	ldr	r6, [sp, #28]
 800da9c:	ea43 0102 	orr.w	r1, r3, r2
 800daa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daa2:	4319      	orrs	r1, r3
 800daa4:	d110      	bne.n	800dac8 <_dtoa_r+0xa20>
 800daa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800daaa:	d029      	beq.n	800db00 <_dtoa_r+0xa58>
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	dd02      	ble.n	800dab8 <_dtoa_r+0xa10>
 800dab2:	9b02      	ldr	r3, [sp, #8]
 800dab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dab8:	9b00      	ldr	r3, [sp, #0]
 800daba:	f883 8000 	strb.w	r8, [r3]
 800dabe:	e63f      	b.n	800d740 <_dtoa_r+0x698>
 800dac0:	4628      	mov	r0, r5
 800dac2:	e7bb      	b.n	800da3c <_dtoa_r+0x994>
 800dac4:	2201      	movs	r2, #1
 800dac6:	e7e1      	b.n	800da8c <_dtoa_r+0x9e4>
 800dac8:	9b08      	ldr	r3, [sp, #32]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	db04      	blt.n	800dad8 <_dtoa_r+0xa30>
 800dace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dad0:	430b      	orrs	r3, r1
 800dad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dad4:	430b      	orrs	r3, r1
 800dad6:	d120      	bne.n	800db1a <_dtoa_r+0xa72>
 800dad8:	2a00      	cmp	r2, #0
 800dada:	dded      	ble.n	800dab8 <_dtoa_r+0xa10>
 800dadc:	4649      	mov	r1, r9
 800dade:	2201      	movs	r2, #1
 800dae0:	4658      	mov	r0, fp
 800dae2:	f000 fbb3 	bl	800e24c <__lshift>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4681      	mov	r9, r0
 800daea:	f000 fc1b 	bl	800e324 <__mcmp>
 800daee:	2800      	cmp	r0, #0
 800daf0:	dc03      	bgt.n	800dafa <_dtoa_r+0xa52>
 800daf2:	d1e1      	bne.n	800dab8 <_dtoa_r+0xa10>
 800daf4:	f018 0f01 	tst.w	r8, #1
 800daf8:	d0de      	beq.n	800dab8 <_dtoa_r+0xa10>
 800dafa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dafe:	d1d8      	bne.n	800dab2 <_dtoa_r+0xa0a>
 800db00:	9a00      	ldr	r2, [sp, #0]
 800db02:	2339      	movs	r3, #57	@ 0x39
 800db04:	7013      	strb	r3, [r2, #0]
 800db06:	4633      	mov	r3, r6
 800db08:	461e      	mov	r6, r3
 800db0a:	3b01      	subs	r3, #1
 800db0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800db10:	2a39      	cmp	r2, #57	@ 0x39
 800db12:	d052      	beq.n	800dbba <_dtoa_r+0xb12>
 800db14:	3201      	adds	r2, #1
 800db16:	701a      	strb	r2, [r3, #0]
 800db18:	e612      	b.n	800d740 <_dtoa_r+0x698>
 800db1a:	2a00      	cmp	r2, #0
 800db1c:	dd07      	ble.n	800db2e <_dtoa_r+0xa86>
 800db1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db22:	d0ed      	beq.n	800db00 <_dtoa_r+0xa58>
 800db24:	9a00      	ldr	r2, [sp, #0]
 800db26:	f108 0301 	add.w	r3, r8, #1
 800db2a:	7013      	strb	r3, [r2, #0]
 800db2c:	e608      	b.n	800d740 <_dtoa_r+0x698>
 800db2e:	9b07      	ldr	r3, [sp, #28]
 800db30:	9a07      	ldr	r2, [sp, #28]
 800db32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db38:	4293      	cmp	r3, r2
 800db3a:	d028      	beq.n	800db8e <_dtoa_r+0xae6>
 800db3c:	4649      	mov	r1, r9
 800db3e:	2300      	movs	r3, #0
 800db40:	220a      	movs	r2, #10
 800db42:	4658      	mov	r0, fp
 800db44:	f000 f9d6 	bl	800def4 <__multadd>
 800db48:	42af      	cmp	r7, r5
 800db4a:	4681      	mov	r9, r0
 800db4c:	f04f 0300 	mov.w	r3, #0
 800db50:	f04f 020a 	mov.w	r2, #10
 800db54:	4639      	mov	r1, r7
 800db56:	4658      	mov	r0, fp
 800db58:	d107      	bne.n	800db6a <_dtoa_r+0xac2>
 800db5a:	f000 f9cb 	bl	800def4 <__multadd>
 800db5e:	4607      	mov	r7, r0
 800db60:	4605      	mov	r5, r0
 800db62:	9b07      	ldr	r3, [sp, #28]
 800db64:	3301      	adds	r3, #1
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	e774      	b.n	800da54 <_dtoa_r+0x9ac>
 800db6a:	f000 f9c3 	bl	800def4 <__multadd>
 800db6e:	4629      	mov	r1, r5
 800db70:	4607      	mov	r7, r0
 800db72:	2300      	movs	r3, #0
 800db74:	220a      	movs	r2, #10
 800db76:	4658      	mov	r0, fp
 800db78:	f000 f9bc 	bl	800def4 <__multadd>
 800db7c:	4605      	mov	r5, r0
 800db7e:	e7f0      	b.n	800db62 <_dtoa_r+0xaba>
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfcc      	ite	gt
 800db86:	461e      	movgt	r6, r3
 800db88:	2601      	movle	r6, #1
 800db8a:	4456      	add	r6, sl
 800db8c:	2700      	movs	r7, #0
 800db8e:	4649      	mov	r1, r9
 800db90:	2201      	movs	r2, #1
 800db92:	4658      	mov	r0, fp
 800db94:	f000 fb5a 	bl	800e24c <__lshift>
 800db98:	4621      	mov	r1, r4
 800db9a:	4681      	mov	r9, r0
 800db9c:	f000 fbc2 	bl	800e324 <__mcmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dcb0      	bgt.n	800db06 <_dtoa_r+0xa5e>
 800dba4:	d102      	bne.n	800dbac <_dtoa_r+0xb04>
 800dba6:	f018 0f01 	tst.w	r8, #1
 800dbaa:	d1ac      	bne.n	800db06 <_dtoa_r+0xa5e>
 800dbac:	4633      	mov	r3, r6
 800dbae:	461e      	mov	r6, r3
 800dbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb4:	2a30      	cmp	r2, #48	@ 0x30
 800dbb6:	d0fa      	beq.n	800dbae <_dtoa_r+0xb06>
 800dbb8:	e5c2      	b.n	800d740 <_dtoa_r+0x698>
 800dbba:	459a      	cmp	sl, r3
 800dbbc:	d1a4      	bne.n	800db08 <_dtoa_r+0xa60>
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	2331      	movs	r3, #49	@ 0x31
 800dbc6:	f88a 3000 	strb.w	r3, [sl]
 800dbca:	e5b9      	b.n	800d740 <_dtoa_r+0x698>
 800dbcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc2c <_dtoa_r+0xb84>
 800dbd2:	b11b      	cbz	r3, 800dbdc <_dtoa_r+0xb34>
 800dbd4:	f10a 0308 	add.w	r3, sl, #8
 800dbd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbda:	6013      	str	r3, [r2, #0]
 800dbdc:	4650      	mov	r0, sl
 800dbde:	b019      	add	sp, #100	@ 0x64
 800dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	f77f ae37 	ble.w	800d85a <_dtoa_r+0x7b2>
 800dbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbee:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf0:	2001      	movs	r0, #1
 800dbf2:	e655      	b.n	800d8a0 <_dtoa_r+0x7f8>
 800dbf4:	9b00      	ldr	r3, [sp, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f77f aed6 	ble.w	800d9a8 <_dtoa_r+0x900>
 800dbfc:	4656      	mov	r6, sl
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4648      	mov	r0, r9
 800dc02:	f7ff f9c7 	bl	800cf94 <quorem>
 800dc06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc0a:	f806 8b01 	strb.w	r8, [r6], #1
 800dc0e:	9b00      	ldr	r3, [sp, #0]
 800dc10:	eba6 020a 	sub.w	r2, r6, sl
 800dc14:	4293      	cmp	r3, r2
 800dc16:	ddb3      	ble.n	800db80 <_dtoa_r+0xad8>
 800dc18:	4649      	mov	r1, r9
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	220a      	movs	r2, #10
 800dc1e:	4658      	mov	r0, fp
 800dc20:	f000 f968 	bl	800def4 <__multadd>
 800dc24:	4681      	mov	r9, r0
 800dc26:	e7ea      	b.n	800dbfe <_dtoa_r+0xb56>
 800dc28:	08010244 	.word	0x08010244
 800dc2c:	080101df 	.word	0x080101df

0800dc30 <_free_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4605      	mov	r5, r0
 800dc34:	2900      	cmp	r1, #0
 800dc36:	d041      	beq.n	800dcbc <_free_r+0x8c>
 800dc38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3c:	1f0c      	subs	r4, r1, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bfb8      	it	lt
 800dc42:	18e4      	addlt	r4, r4, r3
 800dc44:	f000 f8e8 	bl	800de18 <__malloc_lock>
 800dc48:	4a1d      	ldr	r2, [pc, #116]	@ (800dcc0 <_free_r+0x90>)
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	b933      	cbnz	r3, 800dc5c <_free_r+0x2c>
 800dc4e:	6063      	str	r3, [r4, #4]
 800dc50:	6014      	str	r4, [r2, #0]
 800dc52:	4628      	mov	r0, r5
 800dc54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc58:	f000 b8e4 	b.w	800de24 <__malloc_unlock>
 800dc5c:	42a3      	cmp	r3, r4
 800dc5e:	d908      	bls.n	800dc72 <_free_r+0x42>
 800dc60:	6820      	ldr	r0, [r4, #0]
 800dc62:	1821      	adds	r1, r4, r0
 800dc64:	428b      	cmp	r3, r1
 800dc66:	bf01      	itttt	eq
 800dc68:	6819      	ldreq	r1, [r3, #0]
 800dc6a:	685b      	ldreq	r3, [r3, #4]
 800dc6c:	1809      	addeq	r1, r1, r0
 800dc6e:	6021      	streq	r1, [r4, #0]
 800dc70:	e7ed      	b.n	800dc4e <_free_r+0x1e>
 800dc72:	461a      	mov	r2, r3
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	b10b      	cbz	r3, 800dc7c <_free_r+0x4c>
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	d9fa      	bls.n	800dc72 <_free_r+0x42>
 800dc7c:	6811      	ldr	r1, [r2, #0]
 800dc7e:	1850      	adds	r0, r2, r1
 800dc80:	42a0      	cmp	r0, r4
 800dc82:	d10b      	bne.n	800dc9c <_free_r+0x6c>
 800dc84:	6820      	ldr	r0, [r4, #0]
 800dc86:	4401      	add	r1, r0
 800dc88:	1850      	adds	r0, r2, r1
 800dc8a:	4283      	cmp	r3, r0
 800dc8c:	6011      	str	r1, [r2, #0]
 800dc8e:	d1e0      	bne.n	800dc52 <_free_r+0x22>
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	6053      	str	r3, [r2, #4]
 800dc96:	4408      	add	r0, r1
 800dc98:	6010      	str	r0, [r2, #0]
 800dc9a:	e7da      	b.n	800dc52 <_free_r+0x22>
 800dc9c:	d902      	bls.n	800dca4 <_free_r+0x74>
 800dc9e:	230c      	movs	r3, #12
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	e7d6      	b.n	800dc52 <_free_r+0x22>
 800dca4:	6820      	ldr	r0, [r4, #0]
 800dca6:	1821      	adds	r1, r4, r0
 800dca8:	428b      	cmp	r3, r1
 800dcaa:	bf04      	itt	eq
 800dcac:	6819      	ldreq	r1, [r3, #0]
 800dcae:	685b      	ldreq	r3, [r3, #4]
 800dcb0:	6063      	str	r3, [r4, #4]
 800dcb2:	bf04      	itt	eq
 800dcb4:	1809      	addeq	r1, r1, r0
 800dcb6:	6021      	streq	r1, [r4, #0]
 800dcb8:	6054      	str	r4, [r2, #4]
 800dcba:	e7ca      	b.n	800dc52 <_free_r+0x22>
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20001930 	.word	0x20001930

0800dcc4 <malloc>:
 800dcc4:	4b02      	ldr	r3, [pc, #8]	@ (800dcd0 <malloc+0xc>)
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	f000 b825 	b.w	800dd18 <_malloc_r>
 800dcce:	bf00      	nop
 800dcd0:	200000a8 	.word	0x200000a8

0800dcd4 <sbrk_aligned>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4e0f      	ldr	r6, [pc, #60]	@ (800dd14 <sbrk_aligned+0x40>)
 800dcd8:	460c      	mov	r4, r1
 800dcda:	6831      	ldr	r1, [r6, #0]
 800dcdc:	4605      	mov	r5, r0
 800dcde:	b911      	cbnz	r1, 800dce6 <sbrk_aligned+0x12>
 800dce0:	f001 f81e 	bl	800ed20 <_sbrk_r>
 800dce4:	6030      	str	r0, [r6, #0]
 800dce6:	4621      	mov	r1, r4
 800dce8:	4628      	mov	r0, r5
 800dcea:	f001 f819 	bl	800ed20 <_sbrk_r>
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	d103      	bne.n	800dcfa <sbrk_aligned+0x26>
 800dcf2:	f04f 34ff 	mov.w	r4, #4294967295
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	bd70      	pop	{r4, r5, r6, pc}
 800dcfa:	1cc4      	adds	r4, r0, #3
 800dcfc:	f024 0403 	bic.w	r4, r4, #3
 800dd00:	42a0      	cmp	r0, r4
 800dd02:	d0f8      	beq.n	800dcf6 <sbrk_aligned+0x22>
 800dd04:	1a21      	subs	r1, r4, r0
 800dd06:	4628      	mov	r0, r5
 800dd08:	f001 f80a 	bl	800ed20 <_sbrk_r>
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	d1f2      	bne.n	800dcf6 <sbrk_aligned+0x22>
 800dd10:	e7ef      	b.n	800dcf2 <sbrk_aligned+0x1e>
 800dd12:	bf00      	nop
 800dd14:	2000192c 	.word	0x2000192c

0800dd18 <_malloc_r>:
 800dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd1c:	1ccd      	adds	r5, r1, #3
 800dd1e:	f025 0503 	bic.w	r5, r5, #3
 800dd22:	3508      	adds	r5, #8
 800dd24:	2d0c      	cmp	r5, #12
 800dd26:	bf38      	it	cc
 800dd28:	250c      	movcc	r5, #12
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	db01      	blt.n	800dd34 <_malloc_r+0x1c>
 800dd30:	42a9      	cmp	r1, r5
 800dd32:	d904      	bls.n	800dd3e <_malloc_r+0x26>
 800dd34:	230c      	movs	r3, #12
 800dd36:	6033      	str	r3, [r6, #0]
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de14 <_malloc_r+0xfc>
 800dd42:	f000 f869 	bl	800de18 <__malloc_lock>
 800dd46:	f8d8 3000 	ldr.w	r3, [r8]
 800dd4a:	461c      	mov	r4, r3
 800dd4c:	bb44      	cbnz	r4, 800dda0 <_malloc_r+0x88>
 800dd4e:	4629      	mov	r1, r5
 800dd50:	4630      	mov	r0, r6
 800dd52:	f7ff ffbf 	bl	800dcd4 <sbrk_aligned>
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	4604      	mov	r4, r0
 800dd5a:	d158      	bne.n	800de0e <_malloc_r+0xf6>
 800dd5c:	f8d8 4000 	ldr.w	r4, [r8]
 800dd60:	4627      	mov	r7, r4
 800dd62:	2f00      	cmp	r7, #0
 800dd64:	d143      	bne.n	800ddee <_malloc_r+0xd6>
 800dd66:	2c00      	cmp	r4, #0
 800dd68:	d04b      	beq.n	800de02 <_malloc_r+0xea>
 800dd6a:	6823      	ldr	r3, [r4, #0]
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	4630      	mov	r0, r6
 800dd70:	eb04 0903 	add.w	r9, r4, r3
 800dd74:	f000 ffd4 	bl	800ed20 <_sbrk_r>
 800dd78:	4581      	cmp	r9, r0
 800dd7a:	d142      	bne.n	800de02 <_malloc_r+0xea>
 800dd7c:	6821      	ldr	r1, [r4, #0]
 800dd7e:	1a6d      	subs	r5, r5, r1
 800dd80:	4629      	mov	r1, r5
 800dd82:	4630      	mov	r0, r6
 800dd84:	f7ff ffa6 	bl	800dcd4 <sbrk_aligned>
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d03a      	beq.n	800de02 <_malloc_r+0xea>
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	442b      	add	r3, r5
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	f8d8 3000 	ldr.w	r3, [r8]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	bb62      	cbnz	r2, 800ddf4 <_malloc_r+0xdc>
 800dd9a:	f8c8 7000 	str.w	r7, [r8]
 800dd9e:	e00f      	b.n	800ddc0 <_malloc_r+0xa8>
 800dda0:	6822      	ldr	r2, [r4, #0]
 800dda2:	1b52      	subs	r2, r2, r5
 800dda4:	d420      	bmi.n	800dde8 <_malloc_r+0xd0>
 800dda6:	2a0b      	cmp	r2, #11
 800dda8:	d917      	bls.n	800ddda <_malloc_r+0xc2>
 800ddaa:	1961      	adds	r1, r4, r5
 800ddac:	42a3      	cmp	r3, r4
 800ddae:	6025      	str	r5, [r4, #0]
 800ddb0:	bf18      	it	ne
 800ddb2:	6059      	strne	r1, [r3, #4]
 800ddb4:	6863      	ldr	r3, [r4, #4]
 800ddb6:	bf08      	it	eq
 800ddb8:	f8c8 1000 	streq.w	r1, [r8]
 800ddbc:	5162      	str	r2, [r4, r5]
 800ddbe:	604b      	str	r3, [r1, #4]
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f000 f82f 	bl	800de24 <__malloc_unlock>
 800ddc6:	f104 000b 	add.w	r0, r4, #11
 800ddca:	1d23      	adds	r3, r4, #4
 800ddcc:	f020 0007 	bic.w	r0, r0, #7
 800ddd0:	1ac2      	subs	r2, r0, r3
 800ddd2:	bf1c      	itt	ne
 800ddd4:	1a1b      	subne	r3, r3, r0
 800ddd6:	50a3      	strne	r3, [r4, r2]
 800ddd8:	e7af      	b.n	800dd3a <_malloc_r+0x22>
 800ddda:	6862      	ldr	r2, [r4, #4]
 800dddc:	42a3      	cmp	r3, r4
 800ddde:	bf0c      	ite	eq
 800dde0:	f8c8 2000 	streq.w	r2, [r8]
 800dde4:	605a      	strne	r2, [r3, #4]
 800dde6:	e7eb      	b.n	800ddc0 <_malloc_r+0xa8>
 800dde8:	4623      	mov	r3, r4
 800ddea:	6864      	ldr	r4, [r4, #4]
 800ddec:	e7ae      	b.n	800dd4c <_malloc_r+0x34>
 800ddee:	463c      	mov	r4, r7
 800ddf0:	687f      	ldr	r7, [r7, #4]
 800ddf2:	e7b6      	b.n	800dd62 <_malloc_r+0x4a>
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	42a3      	cmp	r3, r4
 800ddfa:	d1fb      	bne.n	800ddf4 <_malloc_r+0xdc>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	6053      	str	r3, [r2, #4]
 800de00:	e7de      	b.n	800ddc0 <_malloc_r+0xa8>
 800de02:	230c      	movs	r3, #12
 800de04:	6033      	str	r3, [r6, #0]
 800de06:	4630      	mov	r0, r6
 800de08:	f000 f80c 	bl	800de24 <__malloc_unlock>
 800de0c:	e794      	b.n	800dd38 <_malloc_r+0x20>
 800de0e:	6005      	str	r5, [r0, #0]
 800de10:	e7d6      	b.n	800ddc0 <_malloc_r+0xa8>
 800de12:	bf00      	nop
 800de14:	20001930 	.word	0x20001930

0800de18 <__malloc_lock>:
 800de18:	4801      	ldr	r0, [pc, #4]	@ (800de20 <__malloc_lock+0x8>)
 800de1a:	f7ff b89a 	b.w	800cf52 <__retarget_lock_acquire_recursive>
 800de1e:	bf00      	nop
 800de20:	20001928 	.word	0x20001928

0800de24 <__malloc_unlock>:
 800de24:	4801      	ldr	r0, [pc, #4]	@ (800de2c <__malloc_unlock+0x8>)
 800de26:	f7ff b895 	b.w	800cf54 <__retarget_lock_release_recursive>
 800de2a:	bf00      	nop
 800de2c:	20001928 	.word	0x20001928

0800de30 <_Balloc>:
 800de30:	b570      	push	{r4, r5, r6, lr}
 800de32:	69c6      	ldr	r6, [r0, #28]
 800de34:	4604      	mov	r4, r0
 800de36:	460d      	mov	r5, r1
 800de38:	b976      	cbnz	r6, 800de58 <_Balloc+0x28>
 800de3a:	2010      	movs	r0, #16
 800de3c:	f7ff ff42 	bl	800dcc4 <malloc>
 800de40:	4602      	mov	r2, r0
 800de42:	61e0      	str	r0, [r4, #28]
 800de44:	b920      	cbnz	r0, 800de50 <_Balloc+0x20>
 800de46:	4b18      	ldr	r3, [pc, #96]	@ (800dea8 <_Balloc+0x78>)
 800de48:	4818      	ldr	r0, [pc, #96]	@ (800deac <_Balloc+0x7c>)
 800de4a:	216b      	movs	r1, #107	@ 0x6b
 800de4c:	f7ff f884 	bl	800cf58 <__assert_func>
 800de50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de54:	6006      	str	r6, [r0, #0]
 800de56:	60c6      	str	r6, [r0, #12]
 800de58:	69e6      	ldr	r6, [r4, #28]
 800de5a:	68f3      	ldr	r3, [r6, #12]
 800de5c:	b183      	cbz	r3, 800de80 <_Balloc+0x50>
 800de5e:	69e3      	ldr	r3, [r4, #28]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de66:	b9b8      	cbnz	r0, 800de98 <_Balloc+0x68>
 800de68:	2101      	movs	r1, #1
 800de6a:	fa01 f605 	lsl.w	r6, r1, r5
 800de6e:	1d72      	adds	r2, r6, #5
 800de70:	0092      	lsls	r2, r2, #2
 800de72:	4620      	mov	r0, r4
 800de74:	f000 ff79 	bl	800ed6a <_calloc_r>
 800de78:	b160      	cbz	r0, 800de94 <_Balloc+0x64>
 800de7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de7e:	e00e      	b.n	800de9e <_Balloc+0x6e>
 800de80:	2221      	movs	r2, #33	@ 0x21
 800de82:	2104      	movs	r1, #4
 800de84:	4620      	mov	r0, r4
 800de86:	f000 ff70 	bl	800ed6a <_calloc_r>
 800de8a:	69e3      	ldr	r3, [r4, #28]
 800de8c:	60f0      	str	r0, [r6, #12]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1e4      	bne.n	800de5e <_Balloc+0x2e>
 800de94:	2000      	movs	r0, #0
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	6802      	ldr	r2, [r0, #0]
 800de9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de9e:	2300      	movs	r3, #0
 800dea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dea4:	e7f7      	b.n	800de96 <_Balloc+0x66>
 800dea6:	bf00      	nop
 800dea8:	08010100 	.word	0x08010100
 800deac:	08010255 	.word	0x08010255

0800deb0 <_Bfree>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	69c6      	ldr	r6, [r0, #28]
 800deb4:	4605      	mov	r5, r0
 800deb6:	460c      	mov	r4, r1
 800deb8:	b976      	cbnz	r6, 800ded8 <_Bfree+0x28>
 800deba:	2010      	movs	r0, #16
 800debc:	f7ff ff02 	bl	800dcc4 <malloc>
 800dec0:	4602      	mov	r2, r0
 800dec2:	61e8      	str	r0, [r5, #28]
 800dec4:	b920      	cbnz	r0, 800ded0 <_Bfree+0x20>
 800dec6:	4b09      	ldr	r3, [pc, #36]	@ (800deec <_Bfree+0x3c>)
 800dec8:	4809      	ldr	r0, [pc, #36]	@ (800def0 <_Bfree+0x40>)
 800deca:	218f      	movs	r1, #143	@ 0x8f
 800decc:	f7ff f844 	bl	800cf58 <__assert_func>
 800ded0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ded4:	6006      	str	r6, [r0, #0]
 800ded6:	60c6      	str	r6, [r0, #12]
 800ded8:	b13c      	cbz	r4, 800deea <_Bfree+0x3a>
 800deda:	69eb      	ldr	r3, [r5, #28]
 800dedc:	6862      	ldr	r2, [r4, #4]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dee4:	6021      	str	r1, [r4, #0]
 800dee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	08010100 	.word	0x08010100
 800def0:	08010255 	.word	0x08010255

0800def4 <__multadd>:
 800def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def8:	690d      	ldr	r5, [r1, #16]
 800defa:	4607      	mov	r7, r0
 800defc:	460c      	mov	r4, r1
 800defe:	461e      	mov	r6, r3
 800df00:	f101 0c14 	add.w	ip, r1, #20
 800df04:	2000      	movs	r0, #0
 800df06:	f8dc 3000 	ldr.w	r3, [ip]
 800df0a:	b299      	uxth	r1, r3
 800df0c:	fb02 6101 	mla	r1, r2, r1, r6
 800df10:	0c1e      	lsrs	r6, r3, #16
 800df12:	0c0b      	lsrs	r3, r1, #16
 800df14:	fb02 3306 	mla	r3, r2, r6, r3
 800df18:	b289      	uxth	r1, r1
 800df1a:	3001      	adds	r0, #1
 800df1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df20:	4285      	cmp	r5, r0
 800df22:	f84c 1b04 	str.w	r1, [ip], #4
 800df26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df2a:	dcec      	bgt.n	800df06 <__multadd+0x12>
 800df2c:	b30e      	cbz	r6, 800df72 <__multadd+0x7e>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	42ab      	cmp	r3, r5
 800df32:	dc19      	bgt.n	800df68 <__multadd+0x74>
 800df34:	6861      	ldr	r1, [r4, #4]
 800df36:	4638      	mov	r0, r7
 800df38:	3101      	adds	r1, #1
 800df3a:	f7ff ff79 	bl	800de30 <_Balloc>
 800df3e:	4680      	mov	r8, r0
 800df40:	b928      	cbnz	r0, 800df4e <__multadd+0x5a>
 800df42:	4602      	mov	r2, r0
 800df44:	4b0c      	ldr	r3, [pc, #48]	@ (800df78 <__multadd+0x84>)
 800df46:	480d      	ldr	r0, [pc, #52]	@ (800df7c <__multadd+0x88>)
 800df48:	21ba      	movs	r1, #186	@ 0xba
 800df4a:	f7ff f805 	bl	800cf58 <__assert_func>
 800df4e:	6922      	ldr	r2, [r4, #16]
 800df50:	3202      	adds	r2, #2
 800df52:	f104 010c 	add.w	r1, r4, #12
 800df56:	0092      	lsls	r2, r2, #2
 800df58:	300c      	adds	r0, #12
 800df5a:	f000 fef1 	bl	800ed40 <memcpy>
 800df5e:	4621      	mov	r1, r4
 800df60:	4638      	mov	r0, r7
 800df62:	f7ff ffa5 	bl	800deb0 <_Bfree>
 800df66:	4644      	mov	r4, r8
 800df68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df6c:	3501      	adds	r5, #1
 800df6e:	615e      	str	r6, [r3, #20]
 800df70:	6125      	str	r5, [r4, #16]
 800df72:	4620      	mov	r0, r4
 800df74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df78:	08010244 	.word	0x08010244
 800df7c:	08010255 	.word	0x08010255

0800df80 <__hi0bits>:
 800df80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df84:	4603      	mov	r3, r0
 800df86:	bf36      	itet	cc
 800df88:	0403      	lslcc	r3, r0, #16
 800df8a:	2000      	movcs	r0, #0
 800df8c:	2010      	movcc	r0, #16
 800df8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df92:	bf3c      	itt	cc
 800df94:	021b      	lslcc	r3, r3, #8
 800df96:	3008      	addcc	r0, #8
 800df98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df9c:	bf3c      	itt	cc
 800df9e:	011b      	lslcc	r3, r3, #4
 800dfa0:	3004      	addcc	r0, #4
 800dfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfa6:	bf3c      	itt	cc
 800dfa8:	009b      	lslcc	r3, r3, #2
 800dfaa:	3002      	addcc	r0, #2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	db05      	blt.n	800dfbc <__hi0bits+0x3c>
 800dfb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfb4:	f100 0001 	add.w	r0, r0, #1
 800dfb8:	bf08      	it	eq
 800dfba:	2020      	moveq	r0, #32
 800dfbc:	4770      	bx	lr

0800dfbe <__lo0bits>:
 800dfbe:	6803      	ldr	r3, [r0, #0]
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	f013 0007 	ands.w	r0, r3, #7
 800dfc6:	d00b      	beq.n	800dfe0 <__lo0bits+0x22>
 800dfc8:	07d9      	lsls	r1, r3, #31
 800dfca:	d421      	bmi.n	800e010 <__lo0bits+0x52>
 800dfcc:	0798      	lsls	r0, r3, #30
 800dfce:	bf49      	itett	mi
 800dfd0:	085b      	lsrmi	r3, r3, #1
 800dfd2:	089b      	lsrpl	r3, r3, #2
 800dfd4:	2001      	movmi	r0, #1
 800dfd6:	6013      	strmi	r3, [r2, #0]
 800dfd8:	bf5c      	itt	pl
 800dfda:	6013      	strpl	r3, [r2, #0]
 800dfdc:	2002      	movpl	r0, #2
 800dfde:	4770      	bx	lr
 800dfe0:	b299      	uxth	r1, r3
 800dfe2:	b909      	cbnz	r1, 800dfe8 <__lo0bits+0x2a>
 800dfe4:	0c1b      	lsrs	r3, r3, #16
 800dfe6:	2010      	movs	r0, #16
 800dfe8:	b2d9      	uxtb	r1, r3
 800dfea:	b909      	cbnz	r1, 800dff0 <__lo0bits+0x32>
 800dfec:	3008      	adds	r0, #8
 800dfee:	0a1b      	lsrs	r3, r3, #8
 800dff0:	0719      	lsls	r1, r3, #28
 800dff2:	bf04      	itt	eq
 800dff4:	091b      	lsreq	r3, r3, #4
 800dff6:	3004      	addeq	r0, #4
 800dff8:	0799      	lsls	r1, r3, #30
 800dffa:	bf04      	itt	eq
 800dffc:	089b      	lsreq	r3, r3, #2
 800dffe:	3002      	addeq	r0, #2
 800e000:	07d9      	lsls	r1, r3, #31
 800e002:	d403      	bmi.n	800e00c <__lo0bits+0x4e>
 800e004:	085b      	lsrs	r3, r3, #1
 800e006:	f100 0001 	add.w	r0, r0, #1
 800e00a:	d003      	beq.n	800e014 <__lo0bits+0x56>
 800e00c:	6013      	str	r3, [r2, #0]
 800e00e:	4770      	bx	lr
 800e010:	2000      	movs	r0, #0
 800e012:	4770      	bx	lr
 800e014:	2020      	movs	r0, #32
 800e016:	4770      	bx	lr

0800e018 <__i2b>:
 800e018:	b510      	push	{r4, lr}
 800e01a:	460c      	mov	r4, r1
 800e01c:	2101      	movs	r1, #1
 800e01e:	f7ff ff07 	bl	800de30 <_Balloc>
 800e022:	4602      	mov	r2, r0
 800e024:	b928      	cbnz	r0, 800e032 <__i2b+0x1a>
 800e026:	4b05      	ldr	r3, [pc, #20]	@ (800e03c <__i2b+0x24>)
 800e028:	4805      	ldr	r0, [pc, #20]	@ (800e040 <__i2b+0x28>)
 800e02a:	f240 1145 	movw	r1, #325	@ 0x145
 800e02e:	f7fe ff93 	bl	800cf58 <__assert_func>
 800e032:	2301      	movs	r3, #1
 800e034:	6144      	str	r4, [r0, #20]
 800e036:	6103      	str	r3, [r0, #16]
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	bf00      	nop
 800e03c:	08010244 	.word	0x08010244
 800e040:	08010255 	.word	0x08010255

0800e044 <__multiply>:
 800e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	4614      	mov	r4, r2
 800e04a:	690a      	ldr	r2, [r1, #16]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	429a      	cmp	r2, r3
 800e050:	bfa8      	it	ge
 800e052:	4623      	movge	r3, r4
 800e054:	460f      	mov	r7, r1
 800e056:	bfa4      	itt	ge
 800e058:	460c      	movge	r4, r1
 800e05a:	461f      	movge	r7, r3
 800e05c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e060:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	6861      	ldr	r1, [r4, #4]
 800e068:	eb0a 0609 	add.w	r6, sl, r9
 800e06c:	42b3      	cmp	r3, r6
 800e06e:	b085      	sub	sp, #20
 800e070:	bfb8      	it	lt
 800e072:	3101      	addlt	r1, #1
 800e074:	f7ff fedc 	bl	800de30 <_Balloc>
 800e078:	b930      	cbnz	r0, 800e088 <__multiply+0x44>
 800e07a:	4602      	mov	r2, r0
 800e07c:	4b44      	ldr	r3, [pc, #272]	@ (800e190 <__multiply+0x14c>)
 800e07e:	4845      	ldr	r0, [pc, #276]	@ (800e194 <__multiply+0x150>)
 800e080:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e084:	f7fe ff68 	bl	800cf58 <__assert_func>
 800e088:	f100 0514 	add.w	r5, r0, #20
 800e08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e090:	462b      	mov	r3, r5
 800e092:	2200      	movs	r2, #0
 800e094:	4543      	cmp	r3, r8
 800e096:	d321      	bcc.n	800e0dc <__multiply+0x98>
 800e098:	f107 0114 	add.w	r1, r7, #20
 800e09c:	f104 0214 	add.w	r2, r4, #20
 800e0a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e0a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0a8:	9302      	str	r3, [sp, #8]
 800e0aa:	1b13      	subs	r3, r2, r4
 800e0ac:	3b15      	subs	r3, #21
 800e0ae:	f023 0303 	bic.w	r3, r3, #3
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	f104 0715 	add.w	r7, r4, #21
 800e0b8:	42ba      	cmp	r2, r7
 800e0ba:	bf38      	it	cc
 800e0bc:	2304      	movcc	r3, #4
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	9b02      	ldr	r3, [sp, #8]
 800e0c2:	9103      	str	r1, [sp, #12]
 800e0c4:	428b      	cmp	r3, r1
 800e0c6:	d80c      	bhi.n	800e0e2 <__multiply+0x9e>
 800e0c8:	2e00      	cmp	r6, #0
 800e0ca:	dd03      	ble.n	800e0d4 <__multiply+0x90>
 800e0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d05b      	beq.n	800e18c <__multiply+0x148>
 800e0d4:	6106      	str	r6, [r0, #16]
 800e0d6:	b005      	add	sp, #20
 800e0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0dc:	f843 2b04 	str.w	r2, [r3], #4
 800e0e0:	e7d8      	b.n	800e094 <__multiply+0x50>
 800e0e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0e6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ea:	d024      	beq.n	800e136 <__multiply+0xf2>
 800e0ec:	f104 0e14 	add.w	lr, r4, #20
 800e0f0:	46a9      	mov	r9, r5
 800e0f2:	f04f 0c00 	mov.w	ip, #0
 800e0f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0fa:	f8d9 3000 	ldr.w	r3, [r9]
 800e0fe:	fa1f fb87 	uxth.w	fp, r7
 800e102:	b29b      	uxth	r3, r3
 800e104:	fb0a 330b 	mla	r3, sl, fp, r3
 800e108:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e10c:	f8d9 7000 	ldr.w	r7, [r9]
 800e110:	4463      	add	r3, ip
 800e112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e116:	fb0a c70b 	mla	r7, sl, fp, ip
 800e11a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e11e:	b29b      	uxth	r3, r3
 800e120:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e124:	4572      	cmp	r2, lr
 800e126:	f849 3b04 	str.w	r3, [r9], #4
 800e12a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e12e:	d8e2      	bhi.n	800e0f6 <__multiply+0xb2>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	f845 c003 	str.w	ip, [r5, r3]
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e13c:	3104      	adds	r1, #4
 800e13e:	f1b9 0f00 	cmp.w	r9, #0
 800e142:	d021      	beq.n	800e188 <__multiply+0x144>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	f104 0c14 	add.w	ip, r4, #20
 800e14a:	46ae      	mov	lr, r5
 800e14c:	f04f 0a00 	mov.w	sl, #0
 800e150:	f8bc b000 	ldrh.w	fp, [ip]
 800e154:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e158:	fb09 770b 	mla	r7, r9, fp, r7
 800e15c:	4457      	add	r7, sl
 800e15e:	b29b      	uxth	r3, r3
 800e160:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e164:	f84e 3b04 	str.w	r3, [lr], #4
 800e168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e16c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e170:	f8be 3000 	ldrh.w	r3, [lr]
 800e174:	fb09 330a 	mla	r3, r9, sl, r3
 800e178:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e17c:	4562      	cmp	r2, ip
 800e17e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e182:	d8e5      	bhi.n	800e150 <__multiply+0x10c>
 800e184:	9f01      	ldr	r7, [sp, #4]
 800e186:	51eb      	str	r3, [r5, r7]
 800e188:	3504      	adds	r5, #4
 800e18a:	e799      	b.n	800e0c0 <__multiply+0x7c>
 800e18c:	3e01      	subs	r6, #1
 800e18e:	e79b      	b.n	800e0c8 <__multiply+0x84>
 800e190:	08010244 	.word	0x08010244
 800e194:	08010255 	.word	0x08010255

0800e198 <__pow5mult>:
 800e198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	4615      	mov	r5, r2
 800e19e:	f012 0203 	ands.w	r2, r2, #3
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	460e      	mov	r6, r1
 800e1a6:	d007      	beq.n	800e1b8 <__pow5mult+0x20>
 800e1a8:	4c25      	ldr	r4, [pc, #148]	@ (800e240 <__pow5mult+0xa8>)
 800e1aa:	3a01      	subs	r2, #1
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1b2:	f7ff fe9f 	bl	800def4 <__multadd>
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	10ad      	asrs	r5, r5, #2
 800e1ba:	d03d      	beq.n	800e238 <__pow5mult+0xa0>
 800e1bc:	69fc      	ldr	r4, [r7, #28]
 800e1be:	b97c      	cbnz	r4, 800e1e0 <__pow5mult+0x48>
 800e1c0:	2010      	movs	r0, #16
 800e1c2:	f7ff fd7f 	bl	800dcc4 <malloc>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	61f8      	str	r0, [r7, #28]
 800e1ca:	b928      	cbnz	r0, 800e1d8 <__pow5mult+0x40>
 800e1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e244 <__pow5mult+0xac>)
 800e1ce:	481e      	ldr	r0, [pc, #120]	@ (800e248 <__pow5mult+0xb0>)
 800e1d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1d4:	f7fe fec0 	bl	800cf58 <__assert_func>
 800e1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1dc:	6004      	str	r4, [r0, #0]
 800e1de:	60c4      	str	r4, [r0, #12]
 800e1e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1e8:	b94c      	cbnz	r4, 800e1fe <__pow5mult+0x66>
 800e1ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	f7ff ff12 	bl	800e018 <__i2b>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	6003      	str	r3, [r0, #0]
 800e1fe:	f04f 0900 	mov.w	r9, #0
 800e202:	07eb      	lsls	r3, r5, #31
 800e204:	d50a      	bpl.n	800e21c <__pow5mult+0x84>
 800e206:	4631      	mov	r1, r6
 800e208:	4622      	mov	r2, r4
 800e20a:	4638      	mov	r0, r7
 800e20c:	f7ff ff1a 	bl	800e044 <__multiply>
 800e210:	4631      	mov	r1, r6
 800e212:	4680      	mov	r8, r0
 800e214:	4638      	mov	r0, r7
 800e216:	f7ff fe4b 	bl	800deb0 <_Bfree>
 800e21a:	4646      	mov	r6, r8
 800e21c:	106d      	asrs	r5, r5, #1
 800e21e:	d00b      	beq.n	800e238 <__pow5mult+0xa0>
 800e220:	6820      	ldr	r0, [r4, #0]
 800e222:	b938      	cbnz	r0, 800e234 <__pow5mult+0x9c>
 800e224:	4622      	mov	r2, r4
 800e226:	4621      	mov	r1, r4
 800e228:	4638      	mov	r0, r7
 800e22a:	f7ff ff0b 	bl	800e044 <__multiply>
 800e22e:	6020      	str	r0, [r4, #0]
 800e230:	f8c0 9000 	str.w	r9, [r0]
 800e234:	4604      	mov	r4, r0
 800e236:	e7e4      	b.n	800e202 <__pow5mult+0x6a>
 800e238:	4630      	mov	r0, r6
 800e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23e:	bf00      	nop
 800e240:	080102b0 	.word	0x080102b0
 800e244:	08010100 	.word	0x08010100
 800e248:	08010255 	.word	0x08010255

0800e24c <__lshift>:
 800e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	460c      	mov	r4, r1
 800e252:	6849      	ldr	r1, [r1, #4]
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	4607      	mov	r7, r0
 800e25e:	4691      	mov	r9, r2
 800e260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e264:	f108 0601 	add.w	r6, r8, #1
 800e268:	42b3      	cmp	r3, r6
 800e26a:	db0b      	blt.n	800e284 <__lshift+0x38>
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7ff fddf 	bl	800de30 <_Balloc>
 800e272:	4605      	mov	r5, r0
 800e274:	b948      	cbnz	r0, 800e28a <__lshift+0x3e>
 800e276:	4602      	mov	r2, r0
 800e278:	4b28      	ldr	r3, [pc, #160]	@ (800e31c <__lshift+0xd0>)
 800e27a:	4829      	ldr	r0, [pc, #164]	@ (800e320 <__lshift+0xd4>)
 800e27c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e280:	f7fe fe6a 	bl	800cf58 <__assert_func>
 800e284:	3101      	adds	r1, #1
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	e7ee      	b.n	800e268 <__lshift+0x1c>
 800e28a:	2300      	movs	r3, #0
 800e28c:	f100 0114 	add.w	r1, r0, #20
 800e290:	f100 0210 	add.w	r2, r0, #16
 800e294:	4618      	mov	r0, r3
 800e296:	4553      	cmp	r3, sl
 800e298:	db33      	blt.n	800e302 <__lshift+0xb6>
 800e29a:	6920      	ldr	r0, [r4, #16]
 800e29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2a0:	f104 0314 	add.w	r3, r4, #20
 800e2a4:	f019 091f 	ands.w	r9, r9, #31
 800e2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2b0:	d02b      	beq.n	800e30a <__lshift+0xbe>
 800e2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e2b6:	468a      	mov	sl, r1
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	6818      	ldr	r0, [r3, #0]
 800e2bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e2c0:	4310      	orrs	r0, r2
 800e2c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ca:	459c      	cmp	ip, r3
 800e2cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2d0:	d8f3      	bhi.n	800e2ba <__lshift+0x6e>
 800e2d2:	ebac 0304 	sub.w	r3, ip, r4
 800e2d6:	3b15      	subs	r3, #21
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	3304      	adds	r3, #4
 800e2de:	f104 0015 	add.w	r0, r4, #21
 800e2e2:	4584      	cmp	ip, r0
 800e2e4:	bf38      	it	cc
 800e2e6:	2304      	movcc	r3, #4
 800e2e8:	50ca      	str	r2, [r1, r3]
 800e2ea:	b10a      	cbz	r2, 800e2f0 <__lshift+0xa4>
 800e2ec:	f108 0602 	add.w	r6, r8, #2
 800e2f0:	3e01      	subs	r6, #1
 800e2f2:	4638      	mov	r0, r7
 800e2f4:	612e      	str	r6, [r5, #16]
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	f7ff fdda 	bl	800deb0 <_Bfree>
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e302:	f842 0f04 	str.w	r0, [r2, #4]!
 800e306:	3301      	adds	r3, #1
 800e308:	e7c5      	b.n	800e296 <__lshift+0x4a>
 800e30a:	3904      	subs	r1, #4
 800e30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e310:	f841 2f04 	str.w	r2, [r1, #4]!
 800e314:	459c      	cmp	ip, r3
 800e316:	d8f9      	bhi.n	800e30c <__lshift+0xc0>
 800e318:	e7ea      	b.n	800e2f0 <__lshift+0xa4>
 800e31a:	bf00      	nop
 800e31c:	08010244 	.word	0x08010244
 800e320:	08010255 	.word	0x08010255

0800e324 <__mcmp>:
 800e324:	690a      	ldr	r2, [r1, #16]
 800e326:	4603      	mov	r3, r0
 800e328:	6900      	ldr	r0, [r0, #16]
 800e32a:	1a80      	subs	r0, r0, r2
 800e32c:	b530      	push	{r4, r5, lr}
 800e32e:	d10e      	bne.n	800e34e <__mcmp+0x2a>
 800e330:	3314      	adds	r3, #20
 800e332:	3114      	adds	r1, #20
 800e334:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e338:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e33c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e344:	4295      	cmp	r5, r2
 800e346:	d003      	beq.n	800e350 <__mcmp+0x2c>
 800e348:	d205      	bcs.n	800e356 <__mcmp+0x32>
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	bd30      	pop	{r4, r5, pc}
 800e350:	42a3      	cmp	r3, r4
 800e352:	d3f3      	bcc.n	800e33c <__mcmp+0x18>
 800e354:	e7fb      	b.n	800e34e <__mcmp+0x2a>
 800e356:	2001      	movs	r0, #1
 800e358:	e7f9      	b.n	800e34e <__mcmp+0x2a>
	...

0800e35c <__mdiff>:
 800e35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	4689      	mov	r9, r1
 800e362:	4606      	mov	r6, r0
 800e364:	4611      	mov	r1, r2
 800e366:	4648      	mov	r0, r9
 800e368:	4614      	mov	r4, r2
 800e36a:	f7ff ffdb 	bl	800e324 <__mcmp>
 800e36e:	1e05      	subs	r5, r0, #0
 800e370:	d112      	bne.n	800e398 <__mdiff+0x3c>
 800e372:	4629      	mov	r1, r5
 800e374:	4630      	mov	r0, r6
 800e376:	f7ff fd5b 	bl	800de30 <_Balloc>
 800e37a:	4602      	mov	r2, r0
 800e37c:	b928      	cbnz	r0, 800e38a <__mdiff+0x2e>
 800e37e:	4b3f      	ldr	r3, [pc, #252]	@ (800e47c <__mdiff+0x120>)
 800e380:	f240 2137 	movw	r1, #567	@ 0x237
 800e384:	483e      	ldr	r0, [pc, #248]	@ (800e480 <__mdiff+0x124>)
 800e386:	f7fe fde7 	bl	800cf58 <__assert_func>
 800e38a:	2301      	movs	r3, #1
 800e38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e390:	4610      	mov	r0, r2
 800e392:	b003      	add	sp, #12
 800e394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e398:	bfbc      	itt	lt
 800e39a:	464b      	movlt	r3, r9
 800e39c:	46a1      	movlt	r9, r4
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3a4:	bfba      	itte	lt
 800e3a6:	461c      	movlt	r4, r3
 800e3a8:	2501      	movlt	r5, #1
 800e3aa:	2500      	movge	r5, #0
 800e3ac:	f7ff fd40 	bl	800de30 <_Balloc>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	b918      	cbnz	r0, 800e3bc <__mdiff+0x60>
 800e3b4:	4b31      	ldr	r3, [pc, #196]	@ (800e47c <__mdiff+0x120>)
 800e3b6:	f240 2145 	movw	r1, #581	@ 0x245
 800e3ba:	e7e3      	b.n	800e384 <__mdiff+0x28>
 800e3bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3c0:	6926      	ldr	r6, [r4, #16]
 800e3c2:	60c5      	str	r5, [r0, #12]
 800e3c4:	f109 0310 	add.w	r3, r9, #16
 800e3c8:	f109 0514 	add.w	r5, r9, #20
 800e3cc:	f104 0e14 	add.w	lr, r4, #20
 800e3d0:	f100 0b14 	add.w	fp, r0, #20
 800e3d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	46d9      	mov	r9, fp
 800e3e0:	f04f 0c00 	mov.w	ip, #0
 800e3e4:	9b01      	ldr	r3, [sp, #4]
 800e3e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	fa1f f38a 	uxth.w	r3, sl
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	b283      	uxth	r3, r0
 800e3f8:	1acb      	subs	r3, r1, r3
 800e3fa:	0c00      	lsrs	r0, r0, #16
 800e3fc:	4463      	add	r3, ip
 800e3fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e402:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e406:	b29b      	uxth	r3, r3
 800e408:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e40c:	4576      	cmp	r6, lr
 800e40e:	f849 3b04 	str.w	r3, [r9], #4
 800e412:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e416:	d8e5      	bhi.n	800e3e4 <__mdiff+0x88>
 800e418:	1b33      	subs	r3, r6, r4
 800e41a:	3b15      	subs	r3, #21
 800e41c:	f023 0303 	bic.w	r3, r3, #3
 800e420:	3415      	adds	r4, #21
 800e422:	3304      	adds	r3, #4
 800e424:	42a6      	cmp	r6, r4
 800e426:	bf38      	it	cc
 800e428:	2304      	movcc	r3, #4
 800e42a:	441d      	add	r5, r3
 800e42c:	445b      	add	r3, fp
 800e42e:	461e      	mov	r6, r3
 800e430:	462c      	mov	r4, r5
 800e432:	4544      	cmp	r4, r8
 800e434:	d30e      	bcc.n	800e454 <__mdiff+0xf8>
 800e436:	f108 0103 	add.w	r1, r8, #3
 800e43a:	1b49      	subs	r1, r1, r5
 800e43c:	f021 0103 	bic.w	r1, r1, #3
 800e440:	3d03      	subs	r5, #3
 800e442:	45a8      	cmp	r8, r5
 800e444:	bf38      	it	cc
 800e446:	2100      	movcc	r1, #0
 800e448:	440b      	add	r3, r1
 800e44a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e44e:	b191      	cbz	r1, 800e476 <__mdiff+0x11a>
 800e450:	6117      	str	r7, [r2, #16]
 800e452:	e79d      	b.n	800e390 <__mdiff+0x34>
 800e454:	f854 1b04 	ldr.w	r1, [r4], #4
 800e458:	46e6      	mov	lr, ip
 800e45a:	0c08      	lsrs	r0, r1, #16
 800e45c:	fa1c fc81 	uxtah	ip, ip, r1
 800e460:	4471      	add	r1, lr
 800e462:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e466:	b289      	uxth	r1, r1
 800e468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e46c:	f846 1b04 	str.w	r1, [r6], #4
 800e470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e474:	e7dd      	b.n	800e432 <__mdiff+0xd6>
 800e476:	3f01      	subs	r7, #1
 800e478:	e7e7      	b.n	800e44a <__mdiff+0xee>
 800e47a:	bf00      	nop
 800e47c:	08010244 	.word	0x08010244
 800e480:	08010255 	.word	0x08010255

0800e484 <__d2b>:
 800e484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e488:	460f      	mov	r7, r1
 800e48a:	2101      	movs	r1, #1
 800e48c:	ec59 8b10 	vmov	r8, r9, d0
 800e490:	4616      	mov	r6, r2
 800e492:	f7ff fccd 	bl	800de30 <_Balloc>
 800e496:	4604      	mov	r4, r0
 800e498:	b930      	cbnz	r0, 800e4a8 <__d2b+0x24>
 800e49a:	4602      	mov	r2, r0
 800e49c:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <__d2b+0xa8>)
 800e49e:	4824      	ldr	r0, [pc, #144]	@ (800e530 <__d2b+0xac>)
 800e4a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e4a4:	f7fe fd58 	bl	800cf58 <__assert_func>
 800e4a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4b0:	b10d      	cbz	r5, 800e4b6 <__d2b+0x32>
 800e4b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4b6:	9301      	str	r3, [sp, #4]
 800e4b8:	f1b8 0300 	subs.w	r3, r8, #0
 800e4bc:	d023      	beq.n	800e506 <__d2b+0x82>
 800e4be:	4668      	mov	r0, sp
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	f7ff fd7c 	bl	800dfbe <__lo0bits>
 800e4c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4ca:	b1d0      	cbz	r0, 800e502 <__d2b+0x7e>
 800e4cc:	f1c0 0320 	rsb	r3, r0, #32
 800e4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d4:	430b      	orrs	r3, r1
 800e4d6:	40c2      	lsrs	r2, r0
 800e4d8:	6163      	str	r3, [r4, #20]
 800e4da:	9201      	str	r2, [sp, #4]
 800e4dc:	9b01      	ldr	r3, [sp, #4]
 800e4de:	61a3      	str	r3, [r4, #24]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	bf0c      	ite	eq
 800e4e4:	2201      	moveq	r2, #1
 800e4e6:	2202      	movne	r2, #2
 800e4e8:	6122      	str	r2, [r4, #16]
 800e4ea:	b1a5      	cbz	r5, 800e516 <__d2b+0x92>
 800e4ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4f0:	4405      	add	r5, r0
 800e4f2:	603d      	str	r5, [r7, #0]
 800e4f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4f8:	6030      	str	r0, [r6, #0]
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	b003      	add	sp, #12
 800e4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e502:	6161      	str	r1, [r4, #20]
 800e504:	e7ea      	b.n	800e4dc <__d2b+0x58>
 800e506:	a801      	add	r0, sp, #4
 800e508:	f7ff fd59 	bl	800dfbe <__lo0bits>
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	6163      	str	r3, [r4, #20]
 800e510:	3020      	adds	r0, #32
 800e512:	2201      	movs	r2, #1
 800e514:	e7e8      	b.n	800e4e8 <__d2b+0x64>
 800e516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e51a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e51e:	6038      	str	r0, [r7, #0]
 800e520:	6918      	ldr	r0, [r3, #16]
 800e522:	f7ff fd2d 	bl	800df80 <__hi0bits>
 800e526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e52a:	e7e5      	b.n	800e4f8 <__d2b+0x74>
 800e52c:	08010244 	.word	0x08010244
 800e530:	08010255 	.word	0x08010255

0800e534 <__ssputs_r>:
 800e534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e538:	688e      	ldr	r6, [r1, #8]
 800e53a:	461f      	mov	r7, r3
 800e53c:	42be      	cmp	r6, r7
 800e53e:	680b      	ldr	r3, [r1, #0]
 800e540:	4682      	mov	sl, r0
 800e542:	460c      	mov	r4, r1
 800e544:	4690      	mov	r8, r2
 800e546:	d82d      	bhi.n	800e5a4 <__ssputs_r+0x70>
 800e548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e54c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e550:	d026      	beq.n	800e5a0 <__ssputs_r+0x6c>
 800e552:	6965      	ldr	r5, [r4, #20]
 800e554:	6909      	ldr	r1, [r1, #16]
 800e556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e55a:	eba3 0901 	sub.w	r9, r3, r1
 800e55e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e562:	1c7b      	adds	r3, r7, #1
 800e564:	444b      	add	r3, r9
 800e566:	106d      	asrs	r5, r5, #1
 800e568:	429d      	cmp	r5, r3
 800e56a:	bf38      	it	cc
 800e56c:	461d      	movcc	r5, r3
 800e56e:	0553      	lsls	r3, r2, #21
 800e570:	d527      	bpl.n	800e5c2 <__ssputs_r+0x8e>
 800e572:	4629      	mov	r1, r5
 800e574:	f7ff fbd0 	bl	800dd18 <_malloc_r>
 800e578:	4606      	mov	r6, r0
 800e57a:	b360      	cbz	r0, 800e5d6 <__ssputs_r+0xa2>
 800e57c:	6921      	ldr	r1, [r4, #16]
 800e57e:	464a      	mov	r2, r9
 800e580:	f000 fbde 	bl	800ed40 <memcpy>
 800e584:	89a3      	ldrh	r3, [r4, #12]
 800e586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e58e:	81a3      	strh	r3, [r4, #12]
 800e590:	6126      	str	r6, [r4, #16]
 800e592:	6165      	str	r5, [r4, #20]
 800e594:	444e      	add	r6, r9
 800e596:	eba5 0509 	sub.w	r5, r5, r9
 800e59a:	6026      	str	r6, [r4, #0]
 800e59c:	60a5      	str	r5, [r4, #8]
 800e59e:	463e      	mov	r6, r7
 800e5a0:	42be      	cmp	r6, r7
 800e5a2:	d900      	bls.n	800e5a6 <__ssputs_r+0x72>
 800e5a4:	463e      	mov	r6, r7
 800e5a6:	6820      	ldr	r0, [r4, #0]
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4641      	mov	r1, r8
 800e5ac:	f000 fb7c 	bl	800eca8 <memmove>
 800e5b0:	68a3      	ldr	r3, [r4, #8]
 800e5b2:	1b9b      	subs	r3, r3, r6
 800e5b4:	60a3      	str	r3, [r4, #8]
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	4433      	add	r3, r6
 800e5ba:	6023      	str	r3, [r4, #0]
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	f000 fbf7 	bl	800edb6 <_realloc_r>
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d1e0      	bne.n	800e590 <__ssputs_r+0x5c>
 800e5ce:	6921      	ldr	r1, [r4, #16]
 800e5d0:	4650      	mov	r0, sl
 800e5d2:	f7ff fb2d 	bl	800dc30 <_free_r>
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	f8ca 3000 	str.w	r3, [sl]
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5e2:	81a3      	strh	r3, [r4, #12]
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e8:	e7e9      	b.n	800e5be <__ssputs_r+0x8a>
	...

0800e5ec <_svfiprintf_r>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	4698      	mov	r8, r3
 800e5f2:	898b      	ldrh	r3, [r1, #12]
 800e5f4:	061b      	lsls	r3, r3, #24
 800e5f6:	b09d      	sub	sp, #116	@ 0x74
 800e5f8:	4607      	mov	r7, r0
 800e5fa:	460d      	mov	r5, r1
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	d510      	bpl.n	800e622 <_svfiprintf_r+0x36>
 800e600:	690b      	ldr	r3, [r1, #16]
 800e602:	b973      	cbnz	r3, 800e622 <_svfiprintf_r+0x36>
 800e604:	2140      	movs	r1, #64	@ 0x40
 800e606:	f7ff fb87 	bl	800dd18 <_malloc_r>
 800e60a:	6028      	str	r0, [r5, #0]
 800e60c:	6128      	str	r0, [r5, #16]
 800e60e:	b930      	cbnz	r0, 800e61e <_svfiprintf_r+0x32>
 800e610:	230c      	movs	r3, #12
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	f04f 30ff 	mov.w	r0, #4294967295
 800e618:	b01d      	add	sp, #116	@ 0x74
 800e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61e:	2340      	movs	r3, #64	@ 0x40
 800e620:	616b      	str	r3, [r5, #20]
 800e622:	2300      	movs	r3, #0
 800e624:	9309      	str	r3, [sp, #36]	@ 0x24
 800e626:	2320      	movs	r3, #32
 800e628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e630:	2330      	movs	r3, #48	@ 0x30
 800e632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7d0 <_svfiprintf_r+0x1e4>
 800e636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e63a:	f04f 0901 	mov.w	r9, #1
 800e63e:	4623      	mov	r3, r4
 800e640:	469a      	mov	sl, r3
 800e642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e646:	b10a      	cbz	r2, 800e64c <_svfiprintf_r+0x60>
 800e648:	2a25      	cmp	r2, #37	@ 0x25
 800e64a:	d1f9      	bne.n	800e640 <_svfiprintf_r+0x54>
 800e64c:	ebba 0b04 	subs.w	fp, sl, r4
 800e650:	d00b      	beq.n	800e66a <_svfiprintf_r+0x7e>
 800e652:	465b      	mov	r3, fp
 800e654:	4622      	mov	r2, r4
 800e656:	4629      	mov	r1, r5
 800e658:	4638      	mov	r0, r7
 800e65a:	f7ff ff6b 	bl	800e534 <__ssputs_r>
 800e65e:	3001      	adds	r0, #1
 800e660:	f000 80a7 	beq.w	800e7b2 <_svfiprintf_r+0x1c6>
 800e664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e666:	445a      	add	r2, fp
 800e668:	9209      	str	r2, [sp, #36]	@ 0x24
 800e66a:	f89a 3000 	ldrb.w	r3, [sl]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f000 809f 	beq.w	800e7b2 <_svfiprintf_r+0x1c6>
 800e674:	2300      	movs	r3, #0
 800e676:	f04f 32ff 	mov.w	r2, #4294967295
 800e67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e67e:	f10a 0a01 	add.w	sl, sl, #1
 800e682:	9304      	str	r3, [sp, #16]
 800e684:	9307      	str	r3, [sp, #28]
 800e686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e68a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e68c:	4654      	mov	r4, sl
 800e68e:	2205      	movs	r2, #5
 800e690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e694:	484e      	ldr	r0, [pc, #312]	@ (800e7d0 <_svfiprintf_r+0x1e4>)
 800e696:	f7f1 fda3 	bl	80001e0 <memchr>
 800e69a:	9a04      	ldr	r2, [sp, #16]
 800e69c:	b9d8      	cbnz	r0, 800e6d6 <_svfiprintf_r+0xea>
 800e69e:	06d0      	lsls	r0, r2, #27
 800e6a0:	bf44      	itt	mi
 800e6a2:	2320      	movmi	r3, #32
 800e6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6a8:	0711      	lsls	r1, r2, #28
 800e6aa:	bf44      	itt	mi
 800e6ac:	232b      	movmi	r3, #43	@ 0x2b
 800e6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6b8:	d015      	beq.n	800e6e6 <_svfiprintf_r+0xfa>
 800e6ba:	9a07      	ldr	r2, [sp, #28]
 800e6bc:	4654      	mov	r4, sl
 800e6be:	2000      	movs	r0, #0
 800e6c0:	f04f 0c0a 	mov.w	ip, #10
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ca:	3b30      	subs	r3, #48	@ 0x30
 800e6cc:	2b09      	cmp	r3, #9
 800e6ce:	d94b      	bls.n	800e768 <_svfiprintf_r+0x17c>
 800e6d0:	b1b0      	cbz	r0, 800e700 <_svfiprintf_r+0x114>
 800e6d2:	9207      	str	r2, [sp, #28]
 800e6d4:	e014      	b.n	800e700 <_svfiprintf_r+0x114>
 800e6d6:	eba0 0308 	sub.w	r3, r0, r8
 800e6da:	fa09 f303 	lsl.w	r3, r9, r3
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	9304      	str	r3, [sp, #16]
 800e6e2:	46a2      	mov	sl, r4
 800e6e4:	e7d2      	b.n	800e68c <_svfiprintf_r+0xa0>
 800e6e6:	9b03      	ldr	r3, [sp, #12]
 800e6e8:	1d19      	adds	r1, r3, #4
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	9103      	str	r1, [sp, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	bfbb      	ittet	lt
 800e6f2:	425b      	neglt	r3, r3
 800e6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e6f8:	9307      	strge	r3, [sp, #28]
 800e6fa:	9307      	strlt	r3, [sp, #28]
 800e6fc:	bfb8      	it	lt
 800e6fe:	9204      	strlt	r2, [sp, #16]
 800e700:	7823      	ldrb	r3, [r4, #0]
 800e702:	2b2e      	cmp	r3, #46	@ 0x2e
 800e704:	d10a      	bne.n	800e71c <_svfiprintf_r+0x130>
 800e706:	7863      	ldrb	r3, [r4, #1]
 800e708:	2b2a      	cmp	r3, #42	@ 0x2a
 800e70a:	d132      	bne.n	800e772 <_svfiprintf_r+0x186>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1d1a      	adds	r2, r3, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	9203      	str	r2, [sp, #12]
 800e714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e718:	3402      	adds	r4, #2
 800e71a:	9305      	str	r3, [sp, #20]
 800e71c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7e0 <_svfiprintf_r+0x1f4>
 800e720:	7821      	ldrb	r1, [r4, #0]
 800e722:	2203      	movs	r2, #3
 800e724:	4650      	mov	r0, sl
 800e726:	f7f1 fd5b 	bl	80001e0 <memchr>
 800e72a:	b138      	cbz	r0, 800e73c <_svfiprintf_r+0x150>
 800e72c:	9b04      	ldr	r3, [sp, #16]
 800e72e:	eba0 000a 	sub.w	r0, r0, sl
 800e732:	2240      	movs	r2, #64	@ 0x40
 800e734:	4082      	lsls	r2, r0
 800e736:	4313      	orrs	r3, r2
 800e738:	3401      	adds	r4, #1
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e740:	4824      	ldr	r0, [pc, #144]	@ (800e7d4 <_svfiprintf_r+0x1e8>)
 800e742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e746:	2206      	movs	r2, #6
 800e748:	f7f1 fd4a 	bl	80001e0 <memchr>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d036      	beq.n	800e7be <_svfiprintf_r+0x1d2>
 800e750:	4b21      	ldr	r3, [pc, #132]	@ (800e7d8 <_svfiprintf_r+0x1ec>)
 800e752:	bb1b      	cbnz	r3, 800e79c <_svfiprintf_r+0x1b0>
 800e754:	9b03      	ldr	r3, [sp, #12]
 800e756:	3307      	adds	r3, #7
 800e758:	f023 0307 	bic.w	r3, r3, #7
 800e75c:	3308      	adds	r3, #8
 800e75e:	9303      	str	r3, [sp, #12]
 800e760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e762:	4433      	add	r3, r6
 800e764:	9309      	str	r3, [sp, #36]	@ 0x24
 800e766:	e76a      	b.n	800e63e <_svfiprintf_r+0x52>
 800e768:	fb0c 3202 	mla	r2, ip, r2, r3
 800e76c:	460c      	mov	r4, r1
 800e76e:	2001      	movs	r0, #1
 800e770:	e7a8      	b.n	800e6c4 <_svfiprintf_r+0xd8>
 800e772:	2300      	movs	r3, #0
 800e774:	3401      	adds	r4, #1
 800e776:	9305      	str	r3, [sp, #20]
 800e778:	4619      	mov	r1, r3
 800e77a:	f04f 0c0a 	mov.w	ip, #10
 800e77e:	4620      	mov	r0, r4
 800e780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e784:	3a30      	subs	r2, #48	@ 0x30
 800e786:	2a09      	cmp	r2, #9
 800e788:	d903      	bls.n	800e792 <_svfiprintf_r+0x1a6>
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0c6      	beq.n	800e71c <_svfiprintf_r+0x130>
 800e78e:	9105      	str	r1, [sp, #20]
 800e790:	e7c4      	b.n	800e71c <_svfiprintf_r+0x130>
 800e792:	fb0c 2101 	mla	r1, ip, r1, r2
 800e796:	4604      	mov	r4, r0
 800e798:	2301      	movs	r3, #1
 800e79a:	e7f0      	b.n	800e77e <_svfiprintf_r+0x192>
 800e79c:	ab03      	add	r3, sp, #12
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e7dc <_svfiprintf_r+0x1f0>)
 800e7a4:	a904      	add	r1, sp, #16
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f7fd fd74 	bl	800c294 <_printf_float>
 800e7ac:	1c42      	adds	r2, r0, #1
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	d1d6      	bne.n	800e760 <_svfiprintf_r+0x174>
 800e7b2:	89ab      	ldrh	r3, [r5, #12]
 800e7b4:	065b      	lsls	r3, r3, #25
 800e7b6:	f53f af2d 	bmi.w	800e614 <_svfiprintf_r+0x28>
 800e7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7bc:	e72c      	b.n	800e618 <_svfiprintf_r+0x2c>
 800e7be:	ab03      	add	r3, sp, #12
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	462a      	mov	r2, r5
 800e7c4:	4b05      	ldr	r3, [pc, #20]	@ (800e7dc <_svfiprintf_r+0x1f0>)
 800e7c6:	a904      	add	r1, sp, #16
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	f7fd fffb 	bl	800c7c4 <_printf_i>
 800e7ce:	e7ed      	b.n	800e7ac <_svfiprintf_r+0x1c0>
 800e7d0:	080103b0 	.word	0x080103b0
 800e7d4:	080103ba 	.word	0x080103ba
 800e7d8:	0800c295 	.word	0x0800c295
 800e7dc:	0800e535 	.word	0x0800e535
 800e7e0:	080103b6 	.word	0x080103b6

0800e7e4 <__sfputc_r>:
 800e7e4:	6893      	ldr	r3, [r2, #8]
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	b410      	push	{r4}
 800e7ec:	6093      	str	r3, [r2, #8]
 800e7ee:	da08      	bge.n	800e802 <__sfputc_r+0x1e>
 800e7f0:	6994      	ldr	r4, [r2, #24]
 800e7f2:	42a3      	cmp	r3, r4
 800e7f4:	db01      	blt.n	800e7fa <__sfputc_r+0x16>
 800e7f6:	290a      	cmp	r1, #10
 800e7f8:	d103      	bne.n	800e802 <__sfputc_r+0x1e>
 800e7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7fe:	f7fe ba96 	b.w	800cd2e <__swbuf_r>
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	1c58      	adds	r0, r3, #1
 800e806:	6010      	str	r0, [r2, #0]
 800e808:	7019      	strb	r1, [r3, #0]
 800e80a:	4608      	mov	r0, r1
 800e80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <__sfputs_r>:
 800e812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e814:	4606      	mov	r6, r0
 800e816:	460f      	mov	r7, r1
 800e818:	4614      	mov	r4, r2
 800e81a:	18d5      	adds	r5, r2, r3
 800e81c:	42ac      	cmp	r4, r5
 800e81e:	d101      	bne.n	800e824 <__sfputs_r+0x12>
 800e820:	2000      	movs	r0, #0
 800e822:	e007      	b.n	800e834 <__sfputs_r+0x22>
 800e824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e828:	463a      	mov	r2, r7
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7ff ffda 	bl	800e7e4 <__sfputc_r>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d1f3      	bne.n	800e81c <__sfputs_r+0xa>
 800e834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e838 <_vfiprintf_r>:
 800e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	460d      	mov	r5, r1
 800e83e:	b09d      	sub	sp, #116	@ 0x74
 800e840:	4614      	mov	r4, r2
 800e842:	4698      	mov	r8, r3
 800e844:	4606      	mov	r6, r0
 800e846:	b118      	cbz	r0, 800e850 <_vfiprintf_r+0x18>
 800e848:	6a03      	ldr	r3, [r0, #32]
 800e84a:	b90b      	cbnz	r3, 800e850 <_vfiprintf_r+0x18>
 800e84c:	f7fe f966 	bl	800cb1c <__sinit>
 800e850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e852:	07d9      	lsls	r1, r3, #31
 800e854:	d405      	bmi.n	800e862 <_vfiprintf_r+0x2a>
 800e856:	89ab      	ldrh	r3, [r5, #12]
 800e858:	059a      	lsls	r2, r3, #22
 800e85a:	d402      	bmi.n	800e862 <_vfiprintf_r+0x2a>
 800e85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e85e:	f7fe fb78 	bl	800cf52 <__retarget_lock_acquire_recursive>
 800e862:	89ab      	ldrh	r3, [r5, #12]
 800e864:	071b      	lsls	r3, r3, #28
 800e866:	d501      	bpl.n	800e86c <_vfiprintf_r+0x34>
 800e868:	692b      	ldr	r3, [r5, #16]
 800e86a:	b99b      	cbnz	r3, 800e894 <_vfiprintf_r+0x5c>
 800e86c:	4629      	mov	r1, r5
 800e86e:	4630      	mov	r0, r6
 800e870:	f7fe fa9c 	bl	800cdac <__swsetup_r>
 800e874:	b170      	cbz	r0, 800e894 <_vfiprintf_r+0x5c>
 800e876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e878:	07dc      	lsls	r4, r3, #31
 800e87a:	d504      	bpl.n	800e886 <_vfiprintf_r+0x4e>
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	b01d      	add	sp, #116	@ 0x74
 800e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e886:	89ab      	ldrh	r3, [r5, #12]
 800e888:	0598      	lsls	r0, r3, #22
 800e88a:	d4f7      	bmi.n	800e87c <_vfiprintf_r+0x44>
 800e88c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e88e:	f7fe fb61 	bl	800cf54 <__retarget_lock_release_recursive>
 800e892:	e7f3      	b.n	800e87c <_vfiprintf_r+0x44>
 800e894:	2300      	movs	r3, #0
 800e896:	9309      	str	r3, [sp, #36]	@ 0x24
 800e898:	2320      	movs	r3, #32
 800e89a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a2:	2330      	movs	r3, #48	@ 0x30
 800e8a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea54 <_vfiprintf_r+0x21c>
 800e8a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8ac:	f04f 0901 	mov.w	r9, #1
 800e8b0:	4623      	mov	r3, r4
 800e8b2:	469a      	mov	sl, r3
 800e8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b8:	b10a      	cbz	r2, 800e8be <_vfiprintf_r+0x86>
 800e8ba:	2a25      	cmp	r2, #37	@ 0x25
 800e8bc:	d1f9      	bne.n	800e8b2 <_vfiprintf_r+0x7a>
 800e8be:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c2:	d00b      	beq.n	800e8dc <_vfiprintf_r+0xa4>
 800e8c4:	465b      	mov	r3, fp
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7ff ffa1 	bl	800e812 <__sfputs_r>
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	f000 80a7 	beq.w	800ea24 <_vfiprintf_r+0x1ec>
 800e8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d8:	445a      	add	r2, fp
 800e8da:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 809f 	beq.w	800ea24 <_vfiprintf_r+0x1ec>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8f0:	f10a 0a01 	add.w	sl, sl, #1
 800e8f4:	9304      	str	r3, [sp, #16]
 800e8f6:	9307      	str	r3, [sp, #28]
 800e8f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8fe:	4654      	mov	r4, sl
 800e900:	2205      	movs	r2, #5
 800e902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e906:	4853      	ldr	r0, [pc, #332]	@ (800ea54 <_vfiprintf_r+0x21c>)
 800e908:	f7f1 fc6a 	bl	80001e0 <memchr>
 800e90c:	9a04      	ldr	r2, [sp, #16]
 800e90e:	b9d8      	cbnz	r0, 800e948 <_vfiprintf_r+0x110>
 800e910:	06d1      	lsls	r1, r2, #27
 800e912:	bf44      	itt	mi
 800e914:	2320      	movmi	r3, #32
 800e916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e91a:	0713      	lsls	r3, r2, #28
 800e91c:	bf44      	itt	mi
 800e91e:	232b      	movmi	r3, #43	@ 0x2b
 800e920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e924:	f89a 3000 	ldrb.w	r3, [sl]
 800e928:	2b2a      	cmp	r3, #42	@ 0x2a
 800e92a:	d015      	beq.n	800e958 <_vfiprintf_r+0x120>
 800e92c:	9a07      	ldr	r2, [sp, #28]
 800e92e:	4654      	mov	r4, sl
 800e930:	2000      	movs	r0, #0
 800e932:	f04f 0c0a 	mov.w	ip, #10
 800e936:	4621      	mov	r1, r4
 800e938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e93c:	3b30      	subs	r3, #48	@ 0x30
 800e93e:	2b09      	cmp	r3, #9
 800e940:	d94b      	bls.n	800e9da <_vfiprintf_r+0x1a2>
 800e942:	b1b0      	cbz	r0, 800e972 <_vfiprintf_r+0x13a>
 800e944:	9207      	str	r2, [sp, #28]
 800e946:	e014      	b.n	800e972 <_vfiprintf_r+0x13a>
 800e948:	eba0 0308 	sub.w	r3, r0, r8
 800e94c:	fa09 f303 	lsl.w	r3, r9, r3
 800e950:	4313      	orrs	r3, r2
 800e952:	9304      	str	r3, [sp, #16]
 800e954:	46a2      	mov	sl, r4
 800e956:	e7d2      	b.n	800e8fe <_vfiprintf_r+0xc6>
 800e958:	9b03      	ldr	r3, [sp, #12]
 800e95a:	1d19      	adds	r1, r3, #4
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	9103      	str	r1, [sp, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	bfbb      	ittet	lt
 800e964:	425b      	neglt	r3, r3
 800e966:	f042 0202 	orrlt.w	r2, r2, #2
 800e96a:	9307      	strge	r3, [sp, #28]
 800e96c:	9307      	strlt	r3, [sp, #28]
 800e96e:	bfb8      	it	lt
 800e970:	9204      	strlt	r2, [sp, #16]
 800e972:	7823      	ldrb	r3, [r4, #0]
 800e974:	2b2e      	cmp	r3, #46	@ 0x2e
 800e976:	d10a      	bne.n	800e98e <_vfiprintf_r+0x156>
 800e978:	7863      	ldrb	r3, [r4, #1]
 800e97a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e97c:	d132      	bne.n	800e9e4 <_vfiprintf_r+0x1ac>
 800e97e:	9b03      	ldr	r3, [sp, #12]
 800e980:	1d1a      	adds	r2, r3, #4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	9203      	str	r2, [sp, #12]
 800e986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e98a:	3402      	adds	r4, #2
 800e98c:	9305      	str	r3, [sp, #20]
 800e98e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea64 <_vfiprintf_r+0x22c>
 800e992:	7821      	ldrb	r1, [r4, #0]
 800e994:	2203      	movs	r2, #3
 800e996:	4650      	mov	r0, sl
 800e998:	f7f1 fc22 	bl	80001e0 <memchr>
 800e99c:	b138      	cbz	r0, 800e9ae <_vfiprintf_r+0x176>
 800e99e:	9b04      	ldr	r3, [sp, #16]
 800e9a0:	eba0 000a 	sub.w	r0, r0, sl
 800e9a4:	2240      	movs	r2, #64	@ 0x40
 800e9a6:	4082      	lsls	r2, r0
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	3401      	adds	r4, #1
 800e9ac:	9304      	str	r3, [sp, #16]
 800e9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b2:	4829      	ldr	r0, [pc, #164]	@ (800ea58 <_vfiprintf_r+0x220>)
 800e9b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9b8:	2206      	movs	r2, #6
 800e9ba:	f7f1 fc11 	bl	80001e0 <memchr>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d03f      	beq.n	800ea42 <_vfiprintf_r+0x20a>
 800e9c2:	4b26      	ldr	r3, [pc, #152]	@ (800ea5c <_vfiprintf_r+0x224>)
 800e9c4:	bb1b      	cbnz	r3, 800ea0e <_vfiprintf_r+0x1d6>
 800e9c6:	9b03      	ldr	r3, [sp, #12]
 800e9c8:	3307      	adds	r3, #7
 800e9ca:	f023 0307 	bic.w	r3, r3, #7
 800e9ce:	3308      	adds	r3, #8
 800e9d0:	9303      	str	r3, [sp, #12]
 800e9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d4:	443b      	add	r3, r7
 800e9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d8:	e76a      	b.n	800e8b0 <_vfiprintf_r+0x78>
 800e9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9de:	460c      	mov	r4, r1
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	e7a8      	b.n	800e936 <_vfiprintf_r+0xfe>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	3401      	adds	r4, #1
 800e9e8:	9305      	str	r3, [sp, #20]
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f04f 0c0a 	mov.w	ip, #10
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f6:	3a30      	subs	r2, #48	@ 0x30
 800e9f8:	2a09      	cmp	r2, #9
 800e9fa:	d903      	bls.n	800ea04 <_vfiprintf_r+0x1cc>
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d0c6      	beq.n	800e98e <_vfiprintf_r+0x156>
 800ea00:	9105      	str	r1, [sp, #20]
 800ea02:	e7c4      	b.n	800e98e <_vfiprintf_r+0x156>
 800ea04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea08:	4604      	mov	r4, r0
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e7f0      	b.n	800e9f0 <_vfiprintf_r+0x1b8>
 800ea0e:	ab03      	add	r3, sp, #12
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	462a      	mov	r2, r5
 800ea14:	4b12      	ldr	r3, [pc, #72]	@ (800ea60 <_vfiprintf_r+0x228>)
 800ea16:	a904      	add	r1, sp, #16
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f7fd fc3b 	bl	800c294 <_printf_float>
 800ea1e:	4607      	mov	r7, r0
 800ea20:	1c78      	adds	r0, r7, #1
 800ea22:	d1d6      	bne.n	800e9d2 <_vfiprintf_r+0x19a>
 800ea24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea26:	07d9      	lsls	r1, r3, #31
 800ea28:	d405      	bmi.n	800ea36 <_vfiprintf_r+0x1fe>
 800ea2a:	89ab      	ldrh	r3, [r5, #12]
 800ea2c:	059a      	lsls	r2, r3, #22
 800ea2e:	d402      	bmi.n	800ea36 <_vfiprintf_r+0x1fe>
 800ea30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea32:	f7fe fa8f 	bl	800cf54 <__retarget_lock_release_recursive>
 800ea36:	89ab      	ldrh	r3, [r5, #12]
 800ea38:	065b      	lsls	r3, r3, #25
 800ea3a:	f53f af1f 	bmi.w	800e87c <_vfiprintf_r+0x44>
 800ea3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea40:	e71e      	b.n	800e880 <_vfiprintf_r+0x48>
 800ea42:	ab03      	add	r3, sp, #12
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	462a      	mov	r2, r5
 800ea48:	4b05      	ldr	r3, [pc, #20]	@ (800ea60 <_vfiprintf_r+0x228>)
 800ea4a:	a904      	add	r1, sp, #16
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f7fd feb9 	bl	800c7c4 <_printf_i>
 800ea52:	e7e4      	b.n	800ea1e <_vfiprintf_r+0x1e6>
 800ea54:	080103b0 	.word	0x080103b0
 800ea58:	080103ba 	.word	0x080103ba
 800ea5c:	0800c295 	.word	0x0800c295
 800ea60:	0800e813 	.word	0x0800e813
 800ea64:	080103b6 	.word	0x080103b6

0800ea68 <__sflush_r>:
 800ea68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	0716      	lsls	r6, r2, #28
 800ea72:	4605      	mov	r5, r0
 800ea74:	460c      	mov	r4, r1
 800ea76:	d454      	bmi.n	800eb22 <__sflush_r+0xba>
 800ea78:	684b      	ldr	r3, [r1, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	dc02      	bgt.n	800ea84 <__sflush_r+0x1c>
 800ea7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	dd48      	ble.n	800eb16 <__sflush_r+0xae>
 800ea84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea86:	2e00      	cmp	r6, #0
 800ea88:	d045      	beq.n	800eb16 <__sflush_r+0xae>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea90:	682f      	ldr	r7, [r5, #0]
 800ea92:	6a21      	ldr	r1, [r4, #32]
 800ea94:	602b      	str	r3, [r5, #0]
 800ea96:	d030      	beq.n	800eafa <__sflush_r+0x92>
 800ea98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea9a:	89a3      	ldrh	r3, [r4, #12]
 800ea9c:	0759      	lsls	r1, r3, #29
 800ea9e:	d505      	bpl.n	800eaac <__sflush_r+0x44>
 800eaa0:	6863      	ldr	r3, [r4, #4]
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaa6:	b10b      	cbz	r3, 800eaac <__sflush_r+0x44>
 800eaa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eaaa:	1ad2      	subs	r2, r2, r3
 800eaac:	2300      	movs	r3, #0
 800eaae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eab0:	6a21      	ldr	r1, [r4, #32]
 800eab2:	4628      	mov	r0, r5
 800eab4:	47b0      	blx	r6
 800eab6:	1c43      	adds	r3, r0, #1
 800eab8:	89a3      	ldrh	r3, [r4, #12]
 800eaba:	d106      	bne.n	800eaca <__sflush_r+0x62>
 800eabc:	6829      	ldr	r1, [r5, #0]
 800eabe:	291d      	cmp	r1, #29
 800eac0:	d82b      	bhi.n	800eb1a <__sflush_r+0xb2>
 800eac2:	4a2a      	ldr	r2, [pc, #168]	@ (800eb6c <__sflush_r+0x104>)
 800eac4:	410a      	asrs	r2, r1
 800eac6:	07d6      	lsls	r6, r2, #31
 800eac8:	d427      	bmi.n	800eb1a <__sflush_r+0xb2>
 800eaca:	2200      	movs	r2, #0
 800eacc:	6062      	str	r2, [r4, #4]
 800eace:	04d9      	lsls	r1, r3, #19
 800ead0:	6922      	ldr	r2, [r4, #16]
 800ead2:	6022      	str	r2, [r4, #0]
 800ead4:	d504      	bpl.n	800eae0 <__sflush_r+0x78>
 800ead6:	1c42      	adds	r2, r0, #1
 800ead8:	d101      	bne.n	800eade <__sflush_r+0x76>
 800eada:	682b      	ldr	r3, [r5, #0]
 800eadc:	b903      	cbnz	r3, 800eae0 <__sflush_r+0x78>
 800eade:	6560      	str	r0, [r4, #84]	@ 0x54
 800eae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eae2:	602f      	str	r7, [r5, #0]
 800eae4:	b1b9      	cbz	r1, 800eb16 <__sflush_r+0xae>
 800eae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaea:	4299      	cmp	r1, r3
 800eaec:	d002      	beq.n	800eaf4 <__sflush_r+0x8c>
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f7ff f89e 	bl	800dc30 <_free_r>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaf8:	e00d      	b.n	800eb16 <__sflush_r+0xae>
 800eafa:	2301      	movs	r3, #1
 800eafc:	4628      	mov	r0, r5
 800eafe:	47b0      	blx	r6
 800eb00:	4602      	mov	r2, r0
 800eb02:	1c50      	adds	r0, r2, #1
 800eb04:	d1c9      	bne.n	800ea9a <__sflush_r+0x32>
 800eb06:	682b      	ldr	r3, [r5, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d0c6      	beq.n	800ea9a <__sflush_r+0x32>
 800eb0c:	2b1d      	cmp	r3, #29
 800eb0e:	d001      	beq.n	800eb14 <__sflush_r+0xac>
 800eb10:	2b16      	cmp	r3, #22
 800eb12:	d11e      	bne.n	800eb52 <__sflush_r+0xea>
 800eb14:	602f      	str	r7, [r5, #0]
 800eb16:	2000      	movs	r0, #0
 800eb18:	e022      	b.n	800eb60 <__sflush_r+0xf8>
 800eb1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb1e:	b21b      	sxth	r3, r3
 800eb20:	e01b      	b.n	800eb5a <__sflush_r+0xf2>
 800eb22:	690f      	ldr	r7, [r1, #16]
 800eb24:	2f00      	cmp	r7, #0
 800eb26:	d0f6      	beq.n	800eb16 <__sflush_r+0xae>
 800eb28:	0793      	lsls	r3, r2, #30
 800eb2a:	680e      	ldr	r6, [r1, #0]
 800eb2c:	bf08      	it	eq
 800eb2e:	694b      	ldreq	r3, [r1, #20]
 800eb30:	600f      	str	r7, [r1, #0]
 800eb32:	bf18      	it	ne
 800eb34:	2300      	movne	r3, #0
 800eb36:	eba6 0807 	sub.w	r8, r6, r7
 800eb3a:	608b      	str	r3, [r1, #8]
 800eb3c:	f1b8 0f00 	cmp.w	r8, #0
 800eb40:	dde9      	ble.n	800eb16 <__sflush_r+0xae>
 800eb42:	6a21      	ldr	r1, [r4, #32]
 800eb44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb46:	4643      	mov	r3, r8
 800eb48:	463a      	mov	r2, r7
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b0      	blx	r6
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	dc08      	bgt.n	800eb64 <__sflush_r+0xfc>
 800eb52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb5a:	81a3      	strh	r3, [r4, #12]
 800eb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb64:	4407      	add	r7, r0
 800eb66:	eba8 0800 	sub.w	r8, r8, r0
 800eb6a:	e7e7      	b.n	800eb3c <__sflush_r+0xd4>
 800eb6c:	dfbffffe 	.word	0xdfbffffe

0800eb70 <_fflush_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	690b      	ldr	r3, [r1, #16]
 800eb74:	4605      	mov	r5, r0
 800eb76:	460c      	mov	r4, r1
 800eb78:	b913      	cbnz	r3, 800eb80 <_fflush_r+0x10>
 800eb7a:	2500      	movs	r5, #0
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	b118      	cbz	r0, 800eb8a <_fflush_r+0x1a>
 800eb82:	6a03      	ldr	r3, [r0, #32]
 800eb84:	b90b      	cbnz	r3, 800eb8a <_fflush_r+0x1a>
 800eb86:	f7fd ffc9 	bl	800cb1c <__sinit>
 800eb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d0f3      	beq.n	800eb7a <_fflush_r+0xa>
 800eb92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb94:	07d0      	lsls	r0, r2, #31
 800eb96:	d404      	bmi.n	800eba2 <_fflush_r+0x32>
 800eb98:	0599      	lsls	r1, r3, #22
 800eb9a:	d402      	bmi.n	800eba2 <_fflush_r+0x32>
 800eb9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb9e:	f7fe f9d8 	bl	800cf52 <__retarget_lock_acquire_recursive>
 800eba2:	4628      	mov	r0, r5
 800eba4:	4621      	mov	r1, r4
 800eba6:	f7ff ff5f 	bl	800ea68 <__sflush_r>
 800ebaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebac:	07da      	lsls	r2, r3, #31
 800ebae:	4605      	mov	r5, r0
 800ebb0:	d4e4      	bmi.n	800eb7c <_fflush_r+0xc>
 800ebb2:	89a3      	ldrh	r3, [r4, #12]
 800ebb4:	059b      	lsls	r3, r3, #22
 800ebb6:	d4e1      	bmi.n	800eb7c <_fflush_r+0xc>
 800ebb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebba:	f7fe f9cb 	bl	800cf54 <__retarget_lock_release_recursive>
 800ebbe:	e7dd      	b.n	800eb7c <_fflush_r+0xc>

0800ebc0 <fiprintf>:
 800ebc0:	b40e      	push	{r1, r2, r3}
 800ebc2:	b503      	push	{r0, r1, lr}
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	ab03      	add	r3, sp, #12
 800ebc8:	4805      	ldr	r0, [pc, #20]	@ (800ebe0 <fiprintf+0x20>)
 800ebca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebce:	6800      	ldr	r0, [r0, #0]
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	f7ff fe31 	bl	800e838 <_vfiprintf_r>
 800ebd6:	b002      	add	sp, #8
 800ebd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebdc:	b003      	add	sp, #12
 800ebde:	4770      	bx	lr
 800ebe0:	200000a8 	.word	0x200000a8

0800ebe4 <__swhatbuf_r>:
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebec:	2900      	cmp	r1, #0
 800ebee:	b096      	sub	sp, #88	@ 0x58
 800ebf0:	4615      	mov	r5, r2
 800ebf2:	461e      	mov	r6, r3
 800ebf4:	da0d      	bge.n	800ec12 <__swhatbuf_r+0x2e>
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebfc:	f04f 0100 	mov.w	r1, #0
 800ec00:	bf14      	ite	ne
 800ec02:	2340      	movne	r3, #64	@ 0x40
 800ec04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec08:	2000      	movs	r0, #0
 800ec0a:	6031      	str	r1, [r6, #0]
 800ec0c:	602b      	str	r3, [r5, #0]
 800ec0e:	b016      	add	sp, #88	@ 0x58
 800ec10:	bd70      	pop	{r4, r5, r6, pc}
 800ec12:	466a      	mov	r2, sp
 800ec14:	f000 f862 	bl	800ecdc <_fstat_r>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	dbec      	blt.n	800ebf6 <__swhatbuf_r+0x12>
 800ec1c:	9901      	ldr	r1, [sp, #4]
 800ec1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec26:	4259      	negs	r1, r3
 800ec28:	4159      	adcs	r1, r3
 800ec2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec2e:	e7eb      	b.n	800ec08 <__swhatbuf_r+0x24>

0800ec30 <__smakebuf_r>:
 800ec30:	898b      	ldrh	r3, [r1, #12]
 800ec32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec34:	079d      	lsls	r5, r3, #30
 800ec36:	4606      	mov	r6, r0
 800ec38:	460c      	mov	r4, r1
 800ec3a:	d507      	bpl.n	800ec4c <__smakebuf_r+0x1c>
 800ec3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	6123      	str	r3, [r4, #16]
 800ec44:	2301      	movs	r3, #1
 800ec46:	6163      	str	r3, [r4, #20]
 800ec48:	b003      	add	sp, #12
 800ec4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4c:	ab01      	add	r3, sp, #4
 800ec4e:	466a      	mov	r2, sp
 800ec50:	f7ff ffc8 	bl	800ebe4 <__swhatbuf_r>
 800ec54:	9f00      	ldr	r7, [sp, #0]
 800ec56:	4605      	mov	r5, r0
 800ec58:	4639      	mov	r1, r7
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f7ff f85c 	bl	800dd18 <_malloc_r>
 800ec60:	b948      	cbnz	r0, 800ec76 <__smakebuf_r+0x46>
 800ec62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec66:	059a      	lsls	r2, r3, #22
 800ec68:	d4ee      	bmi.n	800ec48 <__smakebuf_r+0x18>
 800ec6a:	f023 0303 	bic.w	r3, r3, #3
 800ec6e:	f043 0302 	orr.w	r3, r3, #2
 800ec72:	81a3      	strh	r3, [r4, #12]
 800ec74:	e7e2      	b.n	800ec3c <__smakebuf_r+0xc>
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	6020      	str	r0, [r4, #0]
 800ec7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec7e:	81a3      	strh	r3, [r4, #12]
 800ec80:	9b01      	ldr	r3, [sp, #4]
 800ec82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec86:	b15b      	cbz	r3, 800eca0 <__smakebuf_r+0x70>
 800ec88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f000 f837 	bl	800ed00 <_isatty_r>
 800ec92:	b128      	cbz	r0, 800eca0 <__smakebuf_r+0x70>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f023 0303 	bic.w	r3, r3, #3
 800ec9a:	f043 0301 	orr.w	r3, r3, #1
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	431d      	orrs	r5, r3
 800eca4:	81a5      	strh	r5, [r4, #12]
 800eca6:	e7cf      	b.n	800ec48 <__smakebuf_r+0x18>

0800eca8 <memmove>:
 800eca8:	4288      	cmp	r0, r1
 800ecaa:	b510      	push	{r4, lr}
 800ecac:	eb01 0402 	add.w	r4, r1, r2
 800ecb0:	d902      	bls.n	800ecb8 <memmove+0x10>
 800ecb2:	4284      	cmp	r4, r0
 800ecb4:	4623      	mov	r3, r4
 800ecb6:	d807      	bhi.n	800ecc8 <memmove+0x20>
 800ecb8:	1e43      	subs	r3, r0, #1
 800ecba:	42a1      	cmp	r1, r4
 800ecbc:	d008      	beq.n	800ecd0 <memmove+0x28>
 800ecbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecc6:	e7f8      	b.n	800ecba <memmove+0x12>
 800ecc8:	4402      	add	r2, r0
 800ecca:	4601      	mov	r1, r0
 800eccc:	428a      	cmp	r2, r1
 800ecce:	d100      	bne.n	800ecd2 <memmove+0x2a>
 800ecd0:	bd10      	pop	{r4, pc}
 800ecd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecda:	e7f7      	b.n	800eccc <memmove+0x24>

0800ecdc <_fstat_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4d07      	ldr	r5, [pc, #28]	@ (800ecfc <_fstat_r+0x20>)
 800ece0:	2300      	movs	r3, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	4608      	mov	r0, r1
 800ece6:	4611      	mov	r1, r2
 800ece8:	602b      	str	r3, [r5, #0]
 800ecea:	f7f5 fc89 	bl	8004600 <_fstat>
 800ecee:	1c43      	adds	r3, r0, #1
 800ecf0:	d102      	bne.n	800ecf8 <_fstat_r+0x1c>
 800ecf2:	682b      	ldr	r3, [r5, #0]
 800ecf4:	b103      	cbz	r3, 800ecf8 <_fstat_r+0x1c>
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	bd38      	pop	{r3, r4, r5, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20001924 	.word	0x20001924

0800ed00 <_isatty_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d06      	ldr	r5, [pc, #24]	@ (800ed1c <_isatty_r+0x1c>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	f7f5 fc88 	bl	8004620 <_isatty>
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	d102      	bne.n	800ed1a <_isatty_r+0x1a>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	b103      	cbz	r3, 800ed1a <_isatty_r+0x1a>
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	20001924 	.word	0x20001924

0800ed20 <_sbrk_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d06      	ldr	r5, [pc, #24]	@ (800ed3c <_sbrk_r+0x1c>)
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	602b      	str	r3, [r5, #0]
 800ed2c:	f7f5 fc90 	bl	8004650 <_sbrk>
 800ed30:	1c43      	adds	r3, r0, #1
 800ed32:	d102      	bne.n	800ed3a <_sbrk_r+0x1a>
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	b103      	cbz	r3, 800ed3a <_sbrk_r+0x1a>
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	bd38      	pop	{r3, r4, r5, pc}
 800ed3c:	20001924 	.word	0x20001924

0800ed40 <memcpy>:
 800ed40:	440a      	add	r2, r1
 800ed42:	4291      	cmp	r1, r2
 800ed44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed48:	d100      	bne.n	800ed4c <memcpy+0xc>
 800ed4a:	4770      	bx	lr
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed56:	4291      	cmp	r1, r2
 800ed58:	d1f9      	bne.n	800ed4e <memcpy+0xe>
 800ed5a:	bd10      	pop	{r4, pc}

0800ed5c <abort>:
 800ed5c:	b508      	push	{r3, lr}
 800ed5e:	2006      	movs	r0, #6
 800ed60:	f000 f88c 	bl	800ee7c <raise>
 800ed64:	2001      	movs	r0, #1
 800ed66:	f7f5 fbfb 	bl	8004560 <_exit>

0800ed6a <_calloc_r>:
 800ed6a:	b570      	push	{r4, r5, r6, lr}
 800ed6c:	fba1 5402 	umull	r5, r4, r1, r2
 800ed70:	b93c      	cbnz	r4, 800ed82 <_calloc_r+0x18>
 800ed72:	4629      	mov	r1, r5
 800ed74:	f7fe ffd0 	bl	800dd18 <_malloc_r>
 800ed78:	4606      	mov	r6, r0
 800ed7a:	b928      	cbnz	r0, 800ed88 <_calloc_r+0x1e>
 800ed7c:	2600      	movs	r6, #0
 800ed7e:	4630      	mov	r0, r6
 800ed80:	bd70      	pop	{r4, r5, r6, pc}
 800ed82:	220c      	movs	r2, #12
 800ed84:	6002      	str	r2, [r0, #0]
 800ed86:	e7f9      	b.n	800ed7c <_calloc_r+0x12>
 800ed88:	462a      	mov	r2, r5
 800ed8a:	4621      	mov	r1, r4
 800ed8c:	f7fe f864 	bl	800ce58 <memset>
 800ed90:	e7f5      	b.n	800ed7e <_calloc_r+0x14>

0800ed92 <__ascii_mbtowc>:
 800ed92:	b082      	sub	sp, #8
 800ed94:	b901      	cbnz	r1, 800ed98 <__ascii_mbtowc+0x6>
 800ed96:	a901      	add	r1, sp, #4
 800ed98:	b142      	cbz	r2, 800edac <__ascii_mbtowc+0x1a>
 800ed9a:	b14b      	cbz	r3, 800edb0 <__ascii_mbtowc+0x1e>
 800ed9c:	7813      	ldrb	r3, [r2, #0]
 800ed9e:	600b      	str	r3, [r1, #0]
 800eda0:	7812      	ldrb	r2, [r2, #0]
 800eda2:	1e10      	subs	r0, r2, #0
 800eda4:	bf18      	it	ne
 800eda6:	2001      	movne	r0, #1
 800eda8:	b002      	add	sp, #8
 800edaa:	4770      	bx	lr
 800edac:	4610      	mov	r0, r2
 800edae:	e7fb      	b.n	800eda8 <__ascii_mbtowc+0x16>
 800edb0:	f06f 0001 	mvn.w	r0, #1
 800edb4:	e7f8      	b.n	800eda8 <__ascii_mbtowc+0x16>

0800edb6 <_realloc_r>:
 800edb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edba:	4680      	mov	r8, r0
 800edbc:	4615      	mov	r5, r2
 800edbe:	460c      	mov	r4, r1
 800edc0:	b921      	cbnz	r1, 800edcc <_realloc_r+0x16>
 800edc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edc6:	4611      	mov	r1, r2
 800edc8:	f7fe bfa6 	b.w	800dd18 <_malloc_r>
 800edcc:	b92a      	cbnz	r2, 800edda <_realloc_r+0x24>
 800edce:	f7fe ff2f 	bl	800dc30 <_free_r>
 800edd2:	2400      	movs	r4, #0
 800edd4:	4620      	mov	r0, r4
 800edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edda:	f000 f86b 	bl	800eeb4 <_malloc_usable_size_r>
 800edde:	4285      	cmp	r5, r0
 800ede0:	4606      	mov	r6, r0
 800ede2:	d802      	bhi.n	800edea <_realloc_r+0x34>
 800ede4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ede8:	d8f4      	bhi.n	800edd4 <_realloc_r+0x1e>
 800edea:	4629      	mov	r1, r5
 800edec:	4640      	mov	r0, r8
 800edee:	f7fe ff93 	bl	800dd18 <_malloc_r>
 800edf2:	4607      	mov	r7, r0
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d0ec      	beq.n	800edd2 <_realloc_r+0x1c>
 800edf8:	42b5      	cmp	r5, r6
 800edfa:	462a      	mov	r2, r5
 800edfc:	4621      	mov	r1, r4
 800edfe:	bf28      	it	cs
 800ee00:	4632      	movcs	r2, r6
 800ee02:	f7ff ff9d 	bl	800ed40 <memcpy>
 800ee06:	4621      	mov	r1, r4
 800ee08:	4640      	mov	r0, r8
 800ee0a:	f7fe ff11 	bl	800dc30 <_free_r>
 800ee0e:	463c      	mov	r4, r7
 800ee10:	e7e0      	b.n	800edd4 <_realloc_r+0x1e>

0800ee12 <__ascii_wctomb>:
 800ee12:	4603      	mov	r3, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	b141      	cbz	r1, 800ee2a <__ascii_wctomb+0x18>
 800ee18:	2aff      	cmp	r2, #255	@ 0xff
 800ee1a:	d904      	bls.n	800ee26 <__ascii_wctomb+0x14>
 800ee1c:	228a      	movs	r2, #138	@ 0x8a
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295
 800ee24:	4770      	bx	lr
 800ee26:	700a      	strb	r2, [r1, #0]
 800ee28:	2001      	movs	r0, #1
 800ee2a:	4770      	bx	lr

0800ee2c <_raise_r>:
 800ee2c:	291f      	cmp	r1, #31
 800ee2e:	b538      	push	{r3, r4, r5, lr}
 800ee30:	4605      	mov	r5, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	d904      	bls.n	800ee40 <_raise_r+0x14>
 800ee36:	2316      	movs	r3, #22
 800ee38:	6003      	str	r3, [r0, #0]
 800ee3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee42:	b112      	cbz	r2, 800ee4a <_raise_r+0x1e>
 800ee44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee48:	b94b      	cbnz	r3, 800ee5e <_raise_r+0x32>
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f830 	bl	800eeb0 <_getpid_r>
 800ee50:	4622      	mov	r2, r4
 800ee52:	4601      	mov	r1, r0
 800ee54:	4628      	mov	r0, r5
 800ee56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee5a:	f000 b817 	b.w	800ee8c <_kill_r>
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d00a      	beq.n	800ee78 <_raise_r+0x4c>
 800ee62:	1c59      	adds	r1, r3, #1
 800ee64:	d103      	bne.n	800ee6e <_raise_r+0x42>
 800ee66:	2316      	movs	r3, #22
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	2001      	movs	r0, #1
 800ee6c:	e7e7      	b.n	800ee3e <_raise_r+0x12>
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee74:	4620      	mov	r0, r4
 800ee76:	4798      	blx	r3
 800ee78:	2000      	movs	r0, #0
 800ee7a:	e7e0      	b.n	800ee3e <_raise_r+0x12>

0800ee7c <raise>:
 800ee7c:	4b02      	ldr	r3, [pc, #8]	@ (800ee88 <raise+0xc>)
 800ee7e:	4601      	mov	r1, r0
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	f7ff bfd3 	b.w	800ee2c <_raise_r>
 800ee86:	bf00      	nop
 800ee88:	200000a8 	.word	0x200000a8

0800ee8c <_kill_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d07      	ldr	r5, [pc, #28]	@ (800eeac <_kill_r+0x20>)
 800ee90:	2300      	movs	r3, #0
 800ee92:	4604      	mov	r4, r0
 800ee94:	4608      	mov	r0, r1
 800ee96:	4611      	mov	r1, r2
 800ee98:	602b      	str	r3, [r5, #0]
 800ee9a:	f7f5 fb51 	bl	8004540 <_kill>
 800ee9e:	1c43      	adds	r3, r0, #1
 800eea0:	d102      	bne.n	800eea8 <_kill_r+0x1c>
 800eea2:	682b      	ldr	r3, [r5, #0]
 800eea4:	b103      	cbz	r3, 800eea8 <_kill_r+0x1c>
 800eea6:	6023      	str	r3, [r4, #0]
 800eea8:	bd38      	pop	{r3, r4, r5, pc}
 800eeaa:	bf00      	nop
 800eeac:	20001924 	.word	0x20001924

0800eeb0 <_getpid_r>:
 800eeb0:	f7f5 bb3e 	b.w	8004530 <_getpid>

0800eeb4 <_malloc_usable_size_r>:
 800eeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb8:	1f18      	subs	r0, r3, #4
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	bfbc      	itt	lt
 800eebe:	580b      	ldrlt	r3, [r1, r0]
 800eec0:	18c0      	addlt	r0, r0, r3
 800eec2:	4770      	bx	lr

0800eec4 <_init>:
 800eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec6:	bf00      	nop
 800eec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeca:	bc08      	pop	{r3}
 800eecc:	469e      	mov	lr, r3
 800eece:	4770      	bx	lr

0800eed0 <_fini>:
 800eed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed2:	bf00      	nop
 800eed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eed6:	bc08      	pop	{r3}
 800eed8:	469e      	mov	lr, r3
 800eeda:	4770      	bx	lr
