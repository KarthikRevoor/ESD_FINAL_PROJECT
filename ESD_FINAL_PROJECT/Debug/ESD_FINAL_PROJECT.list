
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08007410  08007410  00008410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a5c  08007a5c  0000924c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a5c  08007a5c  00008a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a64  08007a64  0000924c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  08007a6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000024c  08007cb8  0000924c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08007cb8  00009540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda2  00000000  00000000  0000927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002783  00000000  00000000  0001601e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000187a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000858  00000000  00000000  000192b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e2c  00000000  00000000  00019b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f273  00000000  00000000  0003193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a581  00000000  00000000  00040baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cac  00000000  00000000  000cb174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073f8 	.word	0x080073f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	080073f8 	.word	0x080073f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ee2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ee6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000edf0 	.word	0xe000edf0
 8000f04:	e0001000 	.word	0xe0001000

08000f08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <delay+0x40>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f16:	f002 fc0f 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <delay+0x44>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f2c:	bf00      	nop
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <delay+0x40>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f8      	bcc.n	8000f2e <delay+0x26>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e0001000 	.word	0xe0001000
 8000f4c:	431bde83 	.word	0x431bde83

08000f50 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 fda8 	bl	8002ad4 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 fd8a 	bl	8002ad4 <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DHT_Start>:


void DHT_Start (void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fcc:	f7ff ff6c 	bl	8000ea8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <DHT_Start+0x40>)
 8000fd4:	f7ff ffbc 	bl	8000f50 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <DHT_Start+0x40>)
 8000fde:	f001 ff15 	bl	8002e0c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fe2:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000fe6:	f7ff ff8f 	bl	8000f08 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <DHT_Start+0x40>)
 8000ff0:	f001 ff0c 	bl	8002e0c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ff87 	bl	8000f08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DHT_Start+0x40>)
 8000ffe:	f7ff ffc5 	bl	8000f8c <Set_Pin_Input>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020400 	.word	0x40020400

0800100c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ff76 	bl	8000f08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800101c:	2101      	movs	r1, #1
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <DHT_Check_Response+0x58>)
 8001020:	f001 fedc 	bl	8002ddc <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800102a:	2050      	movs	r0, #80	@ 0x50
 800102c:	f7ff ff6c 	bl	8000f08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001030:	2101      	movs	r1, #1
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <DHT_Check_Response+0x58>)
 8001034:	f001 fed2 	bl	8002ddc <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DHT_Check_Response+0x38>
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001048:	bf00      	nop
 800104a:	2101      	movs	r1, #1
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <DHT_Check_Response+0x58>)
 800104e:	f001 fec5 	bl	8002ddc <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f8      	bne.n	800104a <DHT_Check_Response+0x3e>

	return Response;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e037      	b.n	80010e4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001074:	bf00      	nop
 8001076:	2101      	movs	r1, #1
 8001078:	481e      	ldr	r0, [pc, #120]	@ (80010f4 <DHT_Read+0x8c>)
 800107a:	f001 feaf 	bl	8002ddc <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001084:	2028      	movs	r0, #40	@ 0x28
 8001086:	f7ff ff3f 	bl	8000f08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800108a:	2101      	movs	r1, #1
 800108c:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <DHT_Read+0x8c>)
 800108e:	f001 fea5 	bl	8002ddc <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2201      	movs	r2, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e00b      	b.n	80010ce <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f1c3 0307 	rsb	r3, r3, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ce:	bf00      	nop
 80010d0:	2101      	movs	r1, #1
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DHT_Read+0x8c>)
 80010d4:	f001 fe82 	bl	8002ddc <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f8      	bne.n	80010d0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71bb      	strb	r3, [r7, #6]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9c4      	bls.n	8001074 <DHT_Read+0xc>
	}
	return i;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001100:	f7ff ff62 	bl	8000fc8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001104:	f7ff ff82 	bl	800100c <DHT_Check_Response>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <DHT_GetData+0xa4>)
 800110e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001110:	f7ff ffaa 	bl	8001068 <DHT_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <DHT_GetData+0xa8>)
 800111a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800111c:	f7ff ffa4 	bl	8001068 <DHT_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <DHT_GetData+0xac>)
 8001126:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001128:	f7ff ff9e 	bl	8001068 <DHT_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <DHT_GetData+0xb0>)
 8001132:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001134:	f7ff ff98 	bl	8001068 <DHT_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <DHT_GetData+0xb4>)
 800113e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001140:	f7ff ff92 	bl	8001068 <DHT_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <DHT_GetData+0xb8>)
 800114a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <DHT_GetData+0xb8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <DHT_GetData+0xa8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <DHT_GetData+0xac>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <DHT_GetData+0xb0>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <DHT_GetData+0xb4>)
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4299      	cmp	r1, r3
 800116c:	d111      	bne.n	8001192 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <DHT_GetData+0xb0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <DHT_GetData+0xa8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000026e 	.word	0x2000026e
 80011a0:	20000268 	.word	0x20000268
 80011a4:	20000269 	.word	0x20000269
 80011a8:	2000026a 	.word	0x2000026a
 80011ac:	2000026b 	.word	0x2000026b
 80011b0:	2000026c 	.word	0x2000026c

080011b4 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	is_received=1;
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000270 	.word	0x20000270

080011d4 <IR_init>:

// Variable to indicate detection
volatile uint32_t ir_triggered = 0;

// Initialize the IR sensor pin with interrupt
void IR_init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <IR_init+0x60>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <IR_init+0x60>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <IR_init+0x60>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

    // Configure PA7 as input with external interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8001208:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <IR_init+0x64>)
 8001218:	f001 fc5c 	bl	8002ad4 <HAL_GPIO_Init>

    // Enable the interrupt in the NVIC
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	2017      	movs	r0, #23
 8001222:	f001 f8a4 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
 8001226:	2017      	movs	r0, #23
 8001228:	f001 f8bd 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_GPIO_EXTI_Callback>:

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b80      	cmp	r3, #128	@ 0x80
 800124a:	d102      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x24>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
    }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000278 	.word	0x20000278

08001264 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 8001268:	2080      	movs	r0, #128	@ 0x80
 800126a:	f001 fde9 	bl	8002e40 <HAL_GPIO_EXTI_IRQHandler>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <IR_is_triggered>:

// Optional: Function to get the IR trigger state (can be used in main logic)
uint8_t IR_is_triggered(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    if (ir_triggered) {
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <IR_is_triggered+0x24>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <IR_is_triggered+0x16>
        ir_triggered = 0; // Reset the flag after reading
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <IR_is_triggered+0x24>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
        return 1;         // Return true if an object was detected
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <IR_is_triggered+0x18>
    }
    return 0;             // No detection
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000278 	.word	0x20000278

0800129c <init_game>:
const char *water_pokemon[POKEMON_COUNT] = {
    "Squirtle", "Totodile", "Mudkip", "Piplup", "Froakie",
    "Vaporeon", "Lapras", "Poliwag", "Wooper", "Marill"
};

void init_game() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    // Initialize the IR sensor with interrupts
    IR_init();
 80012a0:	f7ff ff98 	bl	80011d4 <IR_init>

    // Initialize UART for debugging and communication
    pin_init();
 80012a4:	f000 fe6c 	bl	8001f80 <pin_init>

    // Print a message to indicate the game has been initialized
    uart_send_string("Game initialized. Waiting for object detection...\n\r");
 80012a8:	4803      	ldr	r0, [pc, #12]	@ (80012b8 <init_game+0x1c>)
 80012aa:	f000 fec9 	bl	8002040 <uart_send_string>

    // Set the initial game state to IDLE
    currentState = IDLE;
 80012ae:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <init_game+0x20>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800757c 	.word	0x0800757c
 80012bc:	2000027c 	.word	0x2000027c

080012c0 <spawn_pokemon_from_array>:

void spawn_pokemon_from_array(const char *pokemon_array[]) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09c      	sub	sp, #112	@ 0x70
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    uint32_t index = rand() % POKEMON_COUNT;
 80012c8:	f003 fac6 	bl	8004858 <rand>
 80012cc:	4601      	mov	r1, r0
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <spawn_pokemon_from_array+0x50>)
 80012d0:	fb83 2301 	smull	r2, r3, r3, r1
 80012d4:	109a      	asrs	r2, r3, #2
 80012d6:	17cb      	asrs	r3, r1, #31
 80012d8:	1ad2      	subs	r2, r2, r3
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	1aca      	subs	r2, r1, r3
 80012e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
    char buffer[100];
    sprintf(buffer, "A wild %s appears!\n", pokemon_array[index]);
 80012e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	4907      	ldr	r1, [pc, #28]	@ (8001314 <spawn_pokemon_from_array+0x54>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f806 	bl	8005308 <siprintf>
    uart_send_string(buffer);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fe9d 	bl	8002040 <uart_send_string>
}
 8001306:	bf00      	nop
 8001308:	3770      	adds	r7, #112	@ 0x70
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	66666667 	.word	0x66666667
 8001314:	080075b0 	.word	0x080075b0

08001318 <game_state_machine>:

void game_state_machine() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b09c      	sub	sp, #112	@ 0x70
 800131c:	af00      	add	r7, sp, #0
    switch (currentState) {
 800131e:	4b3e      	ldr	r3, [pc, #248]	@ (8001418 <game_state_machine+0x100>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d873      	bhi.n	800140e <game_state_machine+0xf6>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <game_state_machine+0x14>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	08001341 	.word	0x08001341
 8001330:	08001359 	.word	0x08001359
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013f1 	.word	0x080013f1
 800133c:	080013ff 	.word	0x080013ff
        case IDLE:
            // Wait for IR sensor trigger
            if (IR_is_triggered()) {
 8001340:	f7ff ff98 	bl	8001274 <IR_is_triggered>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d060      	beq.n	800140c <game_state_machine+0xf4>
                uart_send_string("Object detected! Moving to SENSOR_READ.\n\r");
 800134a:	4834      	ldr	r0, [pc, #208]	@ (800141c <game_state_machine+0x104>)
 800134c:	f000 fe78 	bl	8002040 <uart_send_string>
                currentState = SENSOR_READ;
 8001350:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <game_state_machine+0x100>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001356:	e059      	b.n	800140c <game_state_machine+0xf4>

        case SENSOR_READ: {
            DHT_DataTypedef DHT_Data;
            DHT_GetData(&DHT_Data); // Read DHT11 data
 8001358:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fecb 	bl	80010f8 <DHT_GetData>

            // Only use humidity from DHT11
            dht11_humidity = (int)DHT_Data.Humidity;
 8001362:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <game_state_machine+0x108>)
 8001370:	601a      	str	r2, [r3, #0]

            // Read temperature from DS18B20
            //temp_sensor_check(); // Reads DS18B20 temperature
            ds18b20_temperature = temperature;
 8001372:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <game_state_machine+0x10c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2c      	ldr	r2, [pc, #176]	@ (8001428 <game_state_machine+0x110>)
 8001378:	6013      	str	r3, [r2, #0]

            // Debug output for humidity and temperature
            char buffer[100];
            sprintf(buffer, "DHT11 Humidity: %d%%\n\r", dht11_humidity);
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <game_state_machine+0x108>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	492a      	ldr	r1, [pc, #168]	@ (800142c <game_state_machine+0x114>)
 8001382:	4618      	mov	r0, r3
 8001384:	f003 ffc0 	bl	8005308 <siprintf>
            uart_send_string(buffer);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fe58 	bl	8002040 <uart_send_string>

            sprintf(buffer, "DS18B20 Temperature: %.2f°C\n\r", ds18b20_temperature);
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <game_state_machine+0x110>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8df 	bl	8000558 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	1d38      	adds	r0, r7, #4
 80013a0:	4923      	ldr	r1, [pc, #140]	@ (8001430 <game_state_machine+0x118>)
 80013a2:	f003 ffb1 	bl	8005308 <siprintf>
            uart_send_string(buffer);
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fe49 	bl	8002040 <uart_send_string>

            currentState = CHECK_POKEMON_ENCOUNTER;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <game_state_machine+0x100>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
            break;
 80013b4:	e02b      	b.n	800140e <game_state_machine+0xf6>
        }

        case CHECK_POKEMON_ENCOUNTER:
            // Determine Pokémon to spawn based on sensor data
            if (ds18b20_temperature > 25.0) {
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <game_state_machine+0x110>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd03      	ble.n	80013d2 <game_state_machine+0xba>
                // Spawn a Fire-type Pokémon for high temperature
                spawn_pokemon_from_array(fire_pokemon);
 80013ca:	481a      	ldr	r0, [pc, #104]	@ (8001434 <game_state_machine+0x11c>)
 80013cc:	f7ff ff78 	bl	80012c0 <spawn_pokemon_from_array>
 80013d0:	e00a      	b.n	80013e8 <game_state_machine+0xd0>
            } else if (dht11_humidity > 60) {
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <game_state_machine+0x108>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b3c      	cmp	r3, #60	@ 0x3c
 80013d8:	dd03      	ble.n	80013e2 <game_state_machine+0xca>
                // Spawn a Water-type Pokémon for high humidity
                spawn_pokemon_from_array(water_pokemon);
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <game_state_machine+0x120>)
 80013dc:	f7ff ff70 	bl	80012c0 <spawn_pokemon_from_array>
 80013e0:	e002      	b.n	80013e8 <game_state_machine+0xd0>
            } else {
                // Spawn a Normal-type Pokémon by default
                spawn_pokemon_from_array(normal_pokemon);
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <game_state_machine+0x124>)
 80013e4:	f7ff ff6c 	bl	80012c0 <spawn_pokemon_from_array>
            }
            currentState = BATTLE;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <game_state_machine+0x100>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	701a      	strb	r2, [r3, #0]
            break;
 80013ee:	e00e      	b.n	800140e <game_state_machine+0xf6>


        case BATTLE:
            uart_send_string("Battle initiated! Fighting...\n\r");
 80013f0:	4813      	ldr	r0, [pc, #76]	@ (8001440 <game_state_machine+0x128>)
 80013f2:	f000 fe25 	bl	8002040 <uart_send_string>
            currentState = POST_BATTLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <game_state_machine+0x100>)
 80013f8:	2204      	movs	r2, #4
 80013fa:	701a      	strb	r2, [r3, #0]
            break;
 80013fc:	e007      	b.n	800140e <game_state_machine+0xf6>

        case POST_BATTLE:
            uart_send_string("Battle concluded. Returning to IDLE.\n\r");
 80013fe:	4811      	ldr	r0, [pc, #68]	@ (8001444 <game_state_machine+0x12c>)
 8001400:	f000 fe1e 	bl	8002040 <uart_send_string>
            currentState = IDLE;
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <game_state_machine+0x100>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
            break;
 800140a:	e000      	b.n	800140e <game_state_machine+0xf6>
            break;
 800140c:	bf00      	nop
    }
}
 800140e:	bf00      	nop
 8001410:	3770      	adds	r7, #112	@ 0x70
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000027c 	.word	0x2000027c
 800141c:	080075c4 	.word	0x080075c4
 8001420:	20000280 	.word	0x20000280
 8001424:	20000274 	.word	0x20000274
 8001428:	20000284 	.word	0x20000284
 800142c:	080075f0 	.word	0x080075f0
 8001430:	08007608 	.word	0x08007608
 8001434:	20000000 	.word	0x20000000
 8001438:	20000050 	.word	0x20000050
 800143c:	20000028 	.word	0x20000028
 8001440:	08007628 	.word	0x08007628
 8001444:	08007648 	.word	0x08007648

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <Pressure_sensor_Init>:

// Global variables
volatile uint16_t adcValue = 0; // ADC result
volatile uint8_t adcConversionComplete = 0; // Flag to indicate conversion complete

void Pressure_sensor_Init(void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <Pressure_sensor_Init+0x34>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <Pressure_sensor_Init+0x34>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB1 as analog
    GPIOB->MODER |= (3U << (1 * 2));  // 2 bits per pin, set to 11 (Analog mode)
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <Pressure_sensor_Init+0x38>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <Pressure_sensor_Init+0x38>)
 800149a:	f043 030c 	orr.w	r3, r3, #12
 800149e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3U << (1 * 2)); // No pull-up/pull-down
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <Pressure_sensor_Init+0x38>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <Pressure_sensor_Init+0x38>)
 80014a6:	f023 030c 	bic.w	r3, r3, #12
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <ADC_Config>:

void ADC_Config(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <ADC_Config+0x64>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <ADC_Config+0x64>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set ADC prescaler to PCLK2/4
    ADC->CCR |= (1U << 16); // Bits 17:16 = 01 for PCLK2/4
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <ADC_Config+0x68>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <ADC_Config+0x68>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014da:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Reset CR2
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <ADC_Config+0x6c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    ADC1->CR2 |= ADC_CR2_ADON;         // Enable ADC
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <ADC_Config+0x6c>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4a11      	ldr	r2, [pc, #68]	@ (800152c <ADC_Config+0x6c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;        // Enable EOC interrupt
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <ADC_Config+0x6c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <ADC_Config+0x6c>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_RES;         // 12-bit resolution
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <ADC_Config+0x6c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <ADC_Config+0x6c>)
 8001500:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001504:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (3U << (3 * 9));    // Sampling time 56 cycles for channel 9
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <ADC_Config+0x6c>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <ADC_Config+0x6c>)
 800150c:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 8001510:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 9;                    // Set channel 9 (PB1)
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <ADC_Config+0x6c>)
 8001514:	2209      	movs	r2, #9
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8001518:	2012      	movs	r0, #18
 800151a:	f7ff ff95 	bl	8001448 <__NVIC_EnableIRQ>
    //NVIC_SetPriority(ADC_IRQn, 1);
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40012300 	.word	0x40012300
 800152c:	40012000 	.word	0x40012000

08001530 <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 8001534:	bf00      	nop
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <ADC_IRQHandler+0x38>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f9      	beq.n	8001536 <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <ADC_IRQHandler+0x38>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <ADC_IRQHandler+0x3c>)
 800154a:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <ADC_IRQHandler+0x40>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <ADC_IRQHandler+0x38>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <ADC_IRQHandler+0x38>)
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012000 	.word	0x40012000
 800156c:	20000288 	.word	0x20000288
 8001570:	2000028a 	.word	0x2000028a

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  pin_init();
 8001578:	f000 fd02 	bl	8001f80 <pin_init>
  HAL_Init();
 800157c:	f000 fdaa 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001580:	f000 f812 	bl	80015a8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8001584:	f000 f904 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 8001588:	f000 f8da 	bl	8001740 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800158c:	f000 f8ae 	bl	80016ec <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001590:	f000 f874 	bl	800167c <MX_SPI2_Init>

  Pressure_sensor_Init();
 8001594:	f7ff ff76 	bl	8001484 <Pressure_sensor_Init>
  ADC_Config();
 8001598:	f7ff ff92 	bl	80014c0 <ADC_Config>
  init_game();
 800159c:	f7ff fe7e 	bl	800129c <init_game>
   // Calls init_game() from integration.c to set up the game

      /* Main Loop */
      while (1)
      {
    	  game_state_machine();
 80015a0:	f7ff feba 	bl	8001318 <game_state_machine>
 80015a4:	e7fc      	b.n	80015a0 <main+0x2c>
	...

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	@ 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	@ 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 ff09 	bl	80053ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	4a27      	ldr	r2, [pc, #156]	@ (8001674 <SystemClock_Config+0xcc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	@ 0x40
 80015dc:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <SystemClock_Config+0xd0>)
 80015f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2310      	movs	r3, #16
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001610:	2302      	movs	r3, #2
 8001612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001618:	2308      	movs	r3, #8
 800161a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800161c:	23c0      	movs	r3, #192	@ 0xc0
 800161e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001620:	2304      	movs	r3, #4
 8001622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001624:	2308      	movs	r3, #8
 8001626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fc1f 	bl	8002e70 <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001638:	f000 fa32 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2103      	movs	r1, #3
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fe80 	bl	8003360 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001666:	f000 fa1b 	bl	8001aa0 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	@ 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <MX_SPI2_Init+0x68>)
 8001682:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <MX_SPI2_Init+0x6c>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <MX_SPI2_Init+0x68>)
 8001688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <MX_SPI2_Init+0x68>)
 8001690:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001694:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <MX_SPI2_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_SPI2_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016ca:	220a      	movs	r2, #10
 80016cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_SPI2_Init+0x68>)
 80016d0:	f002 f866 	bl	80037a0 <HAL_SPI_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016da:	f000 f9e1 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000028c 	.word	0x2000028c
 80016e8:	40003800 	.word	0x40003800

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_USART1_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001724:	f002 f8c5 	bl	80038b2 <HAL_HalfDuplex_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f000 f9b7 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002e4 	.word	0x200002e4
 800173c:	40011000 	.word	0x40011000

08001740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <MX_DMA_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <MX_DMA_Init+0x4c>)
 8001750:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <MX_DMA_Init+0x4c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	203a      	movs	r0, #58	@ 0x3a
 8001768:	f000 fe01 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800176c:	203a      	movs	r0, #58	@ 0x3a
 800176e:	f000 fe1a 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2046      	movs	r0, #70	@ 0x46
 8001778:	f000 fdf9 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800177c:	2046      	movs	r0, #70	@ 0x46
 800177e:	f000 fe12 	bl	80023a6 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	@ 0x30
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	4bb6      	ldr	r3, [pc, #728]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4ab5      	ldr	r2, [pc, #724]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017b0:	f043 0310 	orr.w	r3, r3, #16
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4bb3      	ldr	r3, [pc, #716]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	4baf      	ldr	r3, [pc, #700]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4aae      	ldr	r2, [pc, #696]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4bac      	ldr	r3, [pc, #688]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4ba8      	ldr	r3, [pc, #672]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4aa7      	ldr	r2, [pc, #668]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4aa0      	ldr	r2, [pc, #640]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b9e      	ldr	r3, [pc, #632]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b9a      	ldr	r3, [pc, #616]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a99      	ldr	r2, [pc, #612]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b97      	ldr	r3, [pc, #604]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b93      	ldr	r3, [pc, #588]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a92      	ldr	r2, [pc, #584]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b90      	ldr	r3, [pc, #576]	@ (8001a84 <MX_GPIO_Init+0x2f4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2108      	movs	r1, #8
 8001852:	488d      	ldr	r0, [pc, #564]	@ (8001a88 <MX_GPIO_Init+0x2f8>)
 8001854:	f001 fada 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2101      	movs	r1, #1
 800185c:	488b      	ldr	r0, [pc, #556]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 800185e:	f001 fad5 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001868:	4889      	ldr	r0, [pc, #548]	@ (8001a90 <MX_GPIO_Init+0x300>)
 800186a:	f001 facf 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800186e:	2200      	movs	r2, #0
 8001870:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001874:	4887      	ldr	r0, [pc, #540]	@ (8001a94 <MX_GPIO_Init+0x304>)
 8001876:	f001 fac9 	bl	8002e0c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	4883      	ldr	r0, [pc, #524]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 8001880:	f001 fac4 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800188a:	4883      	ldr	r0, [pc, #524]	@ (8001a98 <MX_GPIO_Init+0x308>)
 800188c:	f001 fabe 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001890:	2304      	movs	r3, #4
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4879      	ldr	r0, [pc, #484]	@ (8001a88 <MX_GPIO_Init+0x2f8>)
 80018a4:	f001 f916 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80018a8:	2308      	movs	r3, #8
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4872      	ldr	r0, [pc, #456]	@ (8001a88 <MX_GPIO_Init+0x2f8>)
 80018c0:	f001 f908 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80018c4:	2332      	movs	r3, #50	@ 0x32
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	486b      	ldr	r0, [pc, #428]	@ (8001a88 <MX_GPIO_Init+0x2f8>)
 80018da:	f001 f8fb 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 80018de:	2381      	movs	r3, #129	@ 0x81
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4865      	ldr	r0, [pc, #404]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 80018f6:	f001 f8ed 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018fa:	2308      	movs	r3, #8
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800190a:	2305      	movs	r3, #5
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	485d      	ldr	r0, [pc, #372]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 8001916:	f001 f8dd 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191a:	2301      	movs	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800191e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	485a      	ldr	r0, [pc, #360]	@ (8001a98 <MX_GPIO_Init+0x308>)
 8001930:	f001 f8d0 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001934:	2310      	movs	r3, #16
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001944:	2306      	movs	r3, #6
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4852      	ldr	r0, [pc, #328]	@ (8001a98 <MX_GPIO_Init+0x308>)
 8001950:	f001 f8c0 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001954:	23e0      	movs	r3, #224	@ 0xe0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001964:	2305      	movs	r3, #5
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	484a      	ldr	r0, [pc, #296]	@ (8001a98 <MX_GPIO_Init+0x308>)
 8001970:	f001 f8b0 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001974:	2320      	movs	r3, #32
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4841      	ldr	r0, [pc, #260]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 8001988:	f001 f8a4 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800198c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	483a      	ldr	r0, [pc, #232]	@ (8001a90 <MX_GPIO_Init+0x300>)
 80019a6:	f001 f895 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80019aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80019ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4834      	ldr	r0, [pc, #208]	@ (8001a94 <MX_GPIO_Init+0x304>)
 80019c4:	f001 f886 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80019c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	482e      	ldr	r0, [pc, #184]	@ (8001a98 <MX_GPIO_Init+0x308>)
 80019de:	f001 f879 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4827      	ldr	r0, [pc, #156]	@ (8001a98 <MX_GPIO_Init+0x308>)
 80019fc:	f001 f86a 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001a00:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a12:	230a      	movs	r3, #10
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481e      	ldr	r0, [pc, #120]	@ (8001a98 <MX_GPIO_Init+0x308>)
 8001a1e:	f001 f859 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a34:	2306      	movs	r3, #6
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4813      	ldr	r0, [pc, #76]	@ (8001a8c <MX_GPIO_Init+0x2fc>)
 8001a40:	f001 f848 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a44:	2320      	movs	r3, #32
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	480f      	ldr	r0, [pc, #60]	@ (8001a94 <MX_GPIO_Init+0x304>)
 8001a58:	f001 f83c 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a5c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_GPIO_Init+0x300>)
 8001a7a:	f001 f82b 	bl	8002ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	@ 0x30
 8001a82:	e00b      	b.n	8001a9c <MX_GPIO_Init+0x30c>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a0f      	ldr	r2, [pc, #60]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aea:	2007      	movs	r0, #7
 8001aec:	f000 fc34 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a19      	ldr	r2, [pc, #100]	@ (8001b80 <HAL_SPI_MspInit+0x84>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12c      	bne.n	8001b78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_SPI_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b56:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_SPI_MspInit+0x8c>)
 8001b74:	f000 ffae 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40003800 	.word	0x40003800
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_UART_MspInit+0x150>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f040 8091 	bne.w	8001cd2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb8:	4a49      	ldr	r2, [pc, #292]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc0:	4b47      	ldr	r3, [pc, #284]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bdc:	4b40      	ldr	r3, [pc, #256]	@ (8001ce0 <HAL_UART_MspInit+0x154>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4837      	ldr	r0, [pc, #220]	@ (8001ce4 <HAL_UART_MspInit+0x158>)
 8001c06:	f000 ff65 	bl	8002ad4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c0c:	4a37      	ldr	r2, [pc, #220]	@ (8001cec <HAL_UART_MspInit+0x160>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c10:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c18:	4b33      	ldr	r3, [pc, #204]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c24:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c4a:	4827      	ldr	r0, [pc, #156]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c4c:	f000 fbc6 	bl	80023dc <HAL_DMA_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001c56:	f7ff ff23 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_UART_MspInit+0x15c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c66:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_UART_MspInit+0x168>)
 8001c6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ca6:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001ca8:	f000 fb98 	bl	80023dc <HAL_DMA_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001cb2:	f7ff fef5 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <HAL_UART_MspInit+0x164>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2025      	movs	r0, #37	@ 0x25
 8001cc8:	f000 fb51 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ccc:	2025      	movs	r0, #37	@ 0x25
 8001cce:	f000 fb6a 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	2000032c 	.word	0x2000032c
 8001cec:	40026440 	.word	0x40026440
 8001cf0:	2000038c 	.word	0x2000038c
 8001cf4:	400264b8 	.word	0x400264b8

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <NMI_Handler+0x4>

08001d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <MemManage_Handler+0x4>

08001d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4e:	f000 fa13 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <USART1_IRQHandler+0x10>)
 8001d5e:	f001 fe01 	bl	8003964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002e4 	.word	0x200002e4

08001d6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <DMA2_Stream2_IRQHandler+0x10>)
 8001d72:	f000 fc73 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000032c 	.word	0x2000032c

08001d80 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <DMA2_Stream7_IRQHandler+0x10>)
 8001d86:	f000 fc69 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000038c 	.word	0x2000038c

08001d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_kill>:

int _kill(int pid, int sig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dae:	f003 fb71 	bl	8005494 <__errno>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2216      	movs	r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_exit>:

void _exit (int status)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ffe7 	bl	8001da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd6:	bf00      	nop
 8001dd8:	e7fd      	b.n	8001dd6 <_exit+0x12>

08001dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e00a      	b.n	8001e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dec:	f3af 8000 	nop.w
 8001df0:	4601      	mov	r1, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	60ba      	str	r2, [r7, #8]
 8001df8:	b2ca      	uxtb	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf0      	blt.n	8001dec <_read+0x12>
  }

  return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e009      	b.n	8001e3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbf1      	blt.n	8001e26 <_write+0x12>
  }
  return len;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_close>:

int _close(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e74:	605a      	str	r2, [r3, #4]
  return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_isatty>:

int _isatty(int file)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f003 fad6 	bl	8005494 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20020000 	.word	0x20020000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	200003ec 	.word	0x200003ec
 8001f1c:	20000540 	.word	0x20000540

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <SystemInit+0x20>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <SystemInit+0x20>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <pin_init>:
#include "uart_init.h"


void pin_init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
// Enable the USART2 and GPIOA clocks
RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // Enable UART2 clock
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <pin_init+0x78>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <pin_init+0x78>)
 8001f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8e:	6413      	str	r3, [r2, #64]	@ 0x40
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;   // Enable GPIOA clock
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <pin_init+0x78>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <pin_init+0x78>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6313      	str	r3, [r2, #48]	@ 0x30

// Configure GPIOA pins PA2 and PA3 for USART2 TX and RX functionality
GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2))); // Clear mode for PA2, PA3
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <pin_init+0x7c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <pin_init+0x7c>)
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fa6:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));    // Set PA2, PA3 to Alternate Function mode
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <pin_init+0x7c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a13      	ldr	r2, [pc, #76]	@ (8001ffc <pin_init+0x7c>)
 8001fae:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001fb2:	6013      	str	r3, [r2, #0]
GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));   // Set AF7 (UART2) for PA2, PA3
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <pin_init+0x7c>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <pin_init+0x7c>)
 8001fba:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001fbe:	6213      	str	r3, [r2, #32]

// Configure USART2 for 9600 baud rate, 8 data bits, no parity, 1 stop bit
USART2->BRR = (24000000 / 9600);                    // Set baud rate (assuming 16 MHz clock)
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <pin_init+0x80>)
 8001fc2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001fc6:	609a      	str	r2, [r3, #8]
USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;         // Enable USART TX and RX
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <pin_init+0x80>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <pin_init+0x80>)
 8001fce:	f043 030c 	orr.w	r3, r3, #12
 8001fd2:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_RXNEIE;                    // Enable RX interrupt
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <pin_init+0x80>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a09      	ldr	r2, [pc, #36]	@ (8002000 <pin_init+0x80>)
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_UE;                        // Enable UART2
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <pin_init+0x80>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <pin_init+0x80>)
 8001fe6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fea:	60d3      	str	r3, [r2, #12]

// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
 8001fec:	2026      	movs	r0, #38	@ 0x26
 8001fee:	f7ff ffa9 	bl	8001f44 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40004400 	.word	0x40004400

08002004 <USART2_IRQHandler>:

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <USART2_IRQHandler+0x38>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <USART2_IRQHandler+0x38>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 800201c:	bf00      	nop
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <USART2_IRQHandler+0x38>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f9      	beq.n	800201e <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <USART2_IRQHandler+0x38>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	6053      	str	r3, [r2, #4]
    }
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40004400 	.word	0x40004400

08002040 <uart_send_string>:

void uart_send_string(const char *str) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002048:	e00c      	b.n	8002064 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 800204a:	bf00      	nop
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <uart_send_string+0x3c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f9      	beq.n	800204c <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <uart_send_string+0x3c>)
 8002062:	605a      	str	r2, [r3, #4]
    while (*str) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <uart_send_string+0xa>
    }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40004400 	.word	0x40004400

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002084:	f7ff ff4c 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	@ (80020cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ae:	f003 f9f7 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fa5f 	bl	8001574 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80020c4:	08007a6c 	.word	0x08007a6c
  ldr r2, =_sbss
 80020c8:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80020cc:	20000540 	.word	0x20000540

080020d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <DMA1_Stream0_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f92b 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	2000      	movs	r0, #0
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fcd0 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f943 	bl	80023c2 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f90b 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000078 	.word	0x20000078
 8002170:	20000080 	.word	0x20000080
 8002174:	2000007c 	.word	0x2000007c

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000080 	.word	0x20000080
 800219c:	200003f0 	.word	0x200003f0

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200003f0 	.word	0x200003f0

080021b8 <__NVIC_SetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff feda 	bl	80021a0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e099      	b.n	800252c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002418:	e00f      	b.n	800243a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241a:	f7ff fec1 	bl	80021a0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b05      	cmp	r3, #5
 8002426:	d908      	bls.n	800243a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e078      	b.n	800252c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e8      	bne.n	800241a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_DMA_Init+0x158>)
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4313      	orrs	r3, r2
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d117      	bne.n	80024fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fa7b 	bl	80029dc <DMA_CheckFifoParam>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024fa:	2301      	movs	r3, #1
 80024fc:	e016      	b.n	800252c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa32 	bl	8002970 <DMA_CalcBaseAndBitshift>
 800250c:	4603      	mov	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	223f      	movs	r2, #63	@ 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f010803f 	.word	0xf010803f

08002538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002546:	f7ff fe2b 	bl	80021a0 <HAL_GetTick>
 800254a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d008      	beq.n	800256a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2280      	movs	r2, #128	@ 0x80
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e052      	b.n	8002610 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0216 	bic.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002588:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_DMA_Abort+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ba:	e013      	b.n	80025e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025bc:	f7ff fdf0 	bl	80021a0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d90c      	bls.n	80025e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e015      	b.n	8002610 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e4      	bne.n	80025bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	223f      	movs	r2, #63	@ 0x3f
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00c      	b.n	8002650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2205      	movs	r2, #5
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002668:	4b8e      	ldr	r3, [pc, #568]	@ (80028a4 <HAL_DMA_IRQHandler+0x248>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a8e      	ldr	r2, [pc, #568]	@ (80028a8 <HAL_DMA_IRQHandler+0x24c>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	2208      	movs	r2, #8
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2208      	movs	r2, #8
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0202 	orr.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2204      	movs	r2, #4
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	2210      	movs	r2, #16
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d043      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03c      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2210      	movs	r2, #16
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d018      	beq.n	800279e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e01f      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e016      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2220      	movs	r2, #32
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808f 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8087 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2220      	movs	r2, #32
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d136      	bne.n	8002874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0216 	bic.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_DMA_IRQHandler+0x1da>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	223f      	movs	r2, #63	@ 0x3f
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07e      	beq.n	8002968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
        }
        return;
 8002872:	e079      	b.n	8002968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01d      	beq.n	80028be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e02c      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
 80028a2:	bf00      	nop
 80028a4:	20000078 	.word	0x20000078
 80028a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d023      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e01e      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0210 	bic.w	r2, r2, #16
 80028da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2205      	movs	r2, #5
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	d307      	bcc.n	8002944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f2      	bne.n	8002928 <HAL_DMA_IRQHandler+0x2cc>
 8002942:	e000      	b.n	8002946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e000      	b.n	800296a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002968:	bf00      	nop
    }
  }
}
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3b10      	subs	r3, #16
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <DMA_CalcBaseAndBitshift+0x68>)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d909      	bls.n	80029b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b0:	e007      	b.n	80029c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	aaaaaaab 	.word	0xaaaaaaab
 80029d8:	08007688 	.word	0x08007688

080029dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11f      	bne.n	8002a36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d856      	bhi.n	8002aaa <DMA_CheckFifoParam+0xce>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <DMA_CheckFifoParam+0x28>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a27 	.word	0x08002a27
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002aab 	.word	0x08002aab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d046      	beq.n	8002aae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e043      	b.n	8002aae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a2e:	d140      	bne.n	8002ab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e03d      	b.n	8002ab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3e:	d121      	bne.n	8002a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d837      	bhi.n	8002ab6 <DMA_CheckFifoParam+0xda>
 8002a46:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <DMA_CheckFifoParam+0x70>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a63 	.word	0x08002a63
 8002a54:	08002a5d 	.word	0x08002a5d
 8002a58:	08002a75 	.word	0x08002a75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e030      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d025      	beq.n	8002aba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a72:	e022      	b.n	8002aba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a7c:	d11f      	bne.n	8002abe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a82:	e01c      	b.n	8002abe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d903      	bls.n	8002a92 <DMA_CheckFifoParam+0xb6>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d003      	beq.n	8002a98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a90:	e018      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      break;
 8002a96:	e015      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e00b      	b.n	8002ac2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e00a      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e008      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e006      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e004      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e159      	b.n	8002da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 8148 	bne.w	8002d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d005      	beq.n	8002b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d017      	beq.n	8002bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d123      	bne.n	8002c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a2 	beq.w	8002d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b57      	ldr	r3, [pc, #348]	@ (8002dbc <HAL_GPIO_Init+0x2e8>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a56      	ldr	r2, [pc, #344]	@ (8002dbc <HAL_GPIO_Init+0x2e8>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b54      	ldr	r3, [pc, #336]	@ (8002dbc <HAL_GPIO_Init+0x2e8>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c76:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_GPIO_Init+0x2ec>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a49      	ldr	r2, [pc, #292]	@ (8002dc4 <HAL_GPIO_Init+0x2f0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d019      	beq.n	8002cd6 <HAL_GPIO_Init+0x202>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a48      	ldr	r2, [pc, #288]	@ (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0x1fe>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a47      	ldr	r2, [pc, #284]	@ (8002dcc <HAL_GPIO_Init+0x2f8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00d      	beq.n	8002cce <HAL_GPIO_Init+0x1fa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a46      	ldr	r2, [pc, #280]	@ (8002dd0 <HAL_GPIO_Init+0x2fc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x1f6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a45      	ldr	r2, [pc, #276]	@ (8002dd4 <HAL_GPIO_Init+0x300>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_GPIO_Init+0x1f2>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x204>
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x204>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x204>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x204>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x204>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce8:	4935      	ldr	r1, [pc, #212]	@ (8002dc0 <HAL_GPIO_Init+0x2ec>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a24      	ldr	r2, [pc, #144]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d98:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd8 <HAL_GPIO_Init+0x304>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f aea2 	bls.w	8002af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e001      	b.n	8002dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e28:	e003      	b.n	8002e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e4a:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe f9ec 	bl	800123c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013c00 	.word	0x40013c00

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e267      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e242      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b70      	ldr	r3, [pc, #448]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6d      	ldr	r3, [pc, #436]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6c      	ldr	r2, [pc, #432]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b69      	ldr	r3, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a68      	ldr	r2, [pc, #416]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b66      	ldr	r3, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f93a 	bl	80021a0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7ff f936 	bl	80021a0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e207      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7ff f926 	bl	80021a0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7ff f922 	bl	80021a0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f3      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c7      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4937      	ldr	r1, [pc, #220]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f8db 	bl	80021a0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7ff f8d7 	bl	80021a0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a8      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4925      	ldr	r1, [pc, #148]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x244>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7ff f8ba 	bl	80021a0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7ff f8b6 	bl	80021a0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e187      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d036      	beq.n	80030c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7ff f89a 	bl	80021a0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7ff f896 	bl	80021a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e167      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e01b      	b.n	80030c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff f883 	bl	80021a0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00e      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7ff f87f 	bl	80021a0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d907      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e150      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470000 	.word	0x42470000
 80030b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ea      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8097 	beq.w	8003204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b81      	ldr	r3, [pc, #516]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b7d      	ldr	r3, [pc, #500]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a7c      	ldr	r2, [pc, #496]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b7a      	ldr	r3, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b77      	ldr	r3, [pc, #476]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b74      	ldr	r3, [pc, #464]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a73      	ldr	r2, [pc, #460]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7ff f83f 	bl	80021a0 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7ff f83b 	bl	80021a0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e10c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_OscConfig+0x474>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ea>
 800314c:	4b64      	ldr	r3, [pc, #400]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a63      	ldr	r2, [pc, #396]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x30c>
 8003162:	4b5f      	ldr	r3, [pc, #380]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	4a5e      	ldr	r2, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	@ 0x70
 800316e:	4b5c      	ldr	r3, [pc, #368]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800317c:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	4b55      	ldr	r3, [pc, #340]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a54      	ldr	r2, [pc, #336]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f800 	bl	80021a0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe fffc 	bl	80021a0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0cb      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b49      	ldr	r3, [pc, #292]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x334>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe ffea 	bl	80021a0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe ffe6 	bl	80021a0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b5      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	4a38      	ldr	r2, [pc, #224]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a1 	beq.w	8003350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320e:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d05c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d141      	bne.n	80032a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe ffba 	bl	80021a0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe ffb6 	bl	80021a0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e087      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe ff8f 	bl	80021a0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe ff8b 	bl	80021a0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x416>
 80032a4:	e054      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe ff78 	bl	80021a0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe ff74 	bl	80021a0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e045      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
 80032d2:	e03d      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e038      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d028      	beq.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d121      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11a      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d111      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fea6 	bl	80021a0 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fea2 	bl	80021a0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	@ (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fe06 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08007670 	.word	0x08007670
 8003524:	20000078 	.word	0x20000078
 8003528:	2000007c 	.word	0x2000007c

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b094      	sub	sp, #80	@ 0x50
 8003532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b79      	ldr	r3, [pc, #484]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 80e1 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x3a>
 800355e:	e0db      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003564:	e0db      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b73      	ldr	r3, [pc, #460]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x208>)
 8003568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800356a:	e0d8      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b6f      	ldr	r3, [pc, #444]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b6a      	ldr	r3, [pc, #424]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800358c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	633b      	str	r3, [r7, #48]	@ 0x30
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4621      	mov	r1, r4
 80035b8:	1a51      	subs	r1, r2, r1
 80035ba:	6139      	str	r1, [r7, #16]
 80035bc:	4629      	mov	r1, r5
 80035be:	eb63 0301 	sbc.w	r3, r3, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d0:	4659      	mov	r1, fp
 80035d2:	018b      	lsls	r3, r1, #6
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035da:	4651      	mov	r1, sl
 80035dc:	018a      	lsls	r2, r1, #6
 80035de:	4651      	mov	r1, sl
 80035e0:	ebb2 0801 	subs.w	r8, r2, r1
 80035e4:	4659      	mov	r1, fp
 80035e6:	eb63 0901 	sbc.w	r9, r3, r1
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fe:	4690      	mov	r8, r2
 8003600:	4699      	mov	r9, r3
 8003602:	4623      	mov	r3, r4
 8003604:	eb18 0303 	adds.w	r3, r8, r3
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	462b      	mov	r3, r5
 800360c:	eb49 0303 	adc.w	r3, r9, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361e:	4629      	mov	r1, r5
 8003620:	024b      	lsls	r3, r1, #9
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003628:	4621      	mov	r1, r4
 800362a:	024a      	lsls	r2, r1, #9
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800363c:	f7fd fabc 	bl	8000bb8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003648:	e058      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	4618      	mov	r0, r3
 8003654:	4611      	mov	r1, r2
 8003656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0159      	lsls	r1, r3, #5
 8003672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003676:	0150      	lsls	r0, r2, #5
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4641      	mov	r1, r8
 800367e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003682:	4649      	mov	r1, r9
 8003684:	eb63 0b01 	sbc.w	fp, r3, r1
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800369c:	ebb2 040a 	subs.w	r4, r2, sl
 80036a0:	eb63 050b 	sbc.w	r5, r3, fp
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	464b      	mov	r3, r9
 80036c0:	eb45 0303 	adc.w	r3, r5, r3
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e6:	2200      	movs	r2, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	61fa      	str	r2, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	f7fd fa62 	bl	8000bb8 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800370c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800370e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x204>)
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003720:	4618      	mov	r0, r3
 8003722:	3750      	adds	r7, #80	@ 0x50
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000078 	.word	0x20000078

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08007680 	.word	0x08007680

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800377c:	f7ff ffdc 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0b5b      	lsrs	r3, r3, #13
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08007680 	.word	0x08007680

080037a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07b      	b.n	80038aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c2:	d009      	beq.n	80037d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f982 	bl	8001afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800380e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0104 	and.w	r1, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f003 0210 	and.w	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e04a      	b.n	800395a <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fe f957 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2224      	movs	r2, #36	@ 0x24
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc84 	bl	8004204 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800391a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0208 	orr.w	r2, r2, #8
 800392a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ba      	sub	sp, #232	@ 0xe8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fb5f 	bl	8004086 <UART_Receive_IT>
      return;
 80039c8:	e25b      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80de 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
 80039d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80d1 	beq.w	8003b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
 80039fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
 8003a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0208 	orr.w	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 81f2 	beq.w	8003e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 faea 	bl	8004086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_UART_IRQHandler+0x17a>
 8003ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04f      	beq.n	8003b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9f2 	bl	8003ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d141      	bne.n	8003b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d44 <HAL_UART_IRQHandler+0x3e0>)
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fd60 	bl	8002618 <HAL_DMA_Abort_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00e      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f994 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00a      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f990 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e006      	b.n	8003b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f98c 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b8a:	e175      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	bf00      	nop
    return;
 8003b8e:	e173      	b.n	8003e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 814f 	bne.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8148 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8141 	beq.w	8003e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	f040 80b6 	bne.w	8003d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8145 	beq.w	8003e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f080 813e 	bcs.w	8003e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	f000 8088 	beq.w	8003d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e1      	bne.n	8003c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e3      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fc09 	bl	8002538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f8b7 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d42:	e09b      	b.n	8003e7c <HAL_UART_IRQHandler+0x518>
 8003d44:	08003f8f 	.word	0x08003f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 808e 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8089 	beq.w	8003e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	623b      	str	r3, [r7, #32]
   return(result);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e3      	bne.n	8003da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0310 	bic.w	r3, r3, #16
 8003e02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e10:	61fa      	str	r2, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e3      	bne.n	8003dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f83d 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e36:	e023      	b.n	8003e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8b0 	bl	8003fb6 <UART_Transmit_IT>
    return;
 8003e56:	e014      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8f0 	bl	8004056 <UART_EndTransmit_IT>
    return;
 8003e76:	e004      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e80:	bf00      	nop
  }
}
 8003e82:	37e8      	adds	r7, #232	@ 0xe8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b095      	sub	sp, #84	@ 0x54
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d119      	bne.n	8003f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f023 0310 	bic.w	r3, r3, #16
 8003f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f60:	61ba      	str	r2, [r7, #24]
 8003f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6979      	ldr	r1, [r7, #20]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f82:	bf00      	nop
 8003f84:	3754      	adds	r7, #84	@ 0x54
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff77 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b21      	cmp	r3, #33	@ 0x21
 8003fc8:	d13e      	bne.n	8004048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd2:	d114      	bne.n	8003ffe <UART_Transmit_IT+0x48>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d110      	bne.n	8003ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	1c9a      	adds	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	621a      	str	r2, [r3, #32]
 8003ffc:	e008      	b.n	8004010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6211      	str	r1, [r2, #32]
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4619      	mov	r1, r3
 800401e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10f      	bne.n	8004044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800406c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff06 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b08c      	sub	sp, #48	@ 0x30
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b22      	cmp	r3, #34	@ 0x22
 8004098:	f040 80ae 	bne.w	80041f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a4:	d117      	bne.n	80040d6 <UART_Receive_IT+0x50>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d113      	bne.n	80040d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d4:	e026      	b.n	8004124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d007      	beq.n	80040fa <UART_Receive_IT+0x74>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <UART_Receive_IT+0x82>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e008      	b.n	800411a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004114:	b2da      	uxtb	r2, r3
 8004116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29b      	uxth	r3, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4619      	mov	r1, r3
 8004132:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004134:	2b00      	cmp	r3, #0
 8004136:	d15d      	bne.n	80041f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0220 	bic.w	r2, r2, #32
 8004146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	2b01      	cmp	r3, #1
 800417c:	d135      	bne.n	80041ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	613b      	str	r3, [r7, #16]
   return(result);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f023 0310 	bic.w	r3, r3, #16
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a4:	623a      	str	r2, [r7, #32]
 80041a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	69f9      	ldr	r1, [r7, #28]
 80041aa:	6a3a      	ldr	r2, [r7, #32]
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e5      	bne.n	8004184 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d10a      	bne.n	80041dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fe64 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
 80041e8:	e002      	b.n	80041f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ffe2 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e002      	b.n	80041fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3730      	adds	r7, #48	@ 0x30
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004208:	b0c0      	sub	sp, #256	@ 0x100
 800420a:	af00      	add	r7, sp, #0
 800420c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	ea40 0301 	orr.w	r3, r0, r1
 800422c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800425c:	f021 010c 	bic.w	r1, r1, #12
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800426a:	430b      	orrs	r3, r1
 800426c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	6999      	ldr	r1, [r3, #24]
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	ea40 0301 	orr.w	r3, r0, r1
 800428a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b8f      	ldr	r3, [pc, #572]	@ (80044d0 <UART_SetConfig+0x2cc>)
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <UART_SetConfig+0xa0>
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b8d      	ldr	r3, [pc, #564]	@ (80044d4 <UART_SetConfig+0x2d0>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d104      	bne.n	80042ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7ff fa68 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 80042a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042ac:	e003      	b.n	80042b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ae:	f7ff fa4f 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80042b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c0:	f040 810c 	bne.w	80044dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042de:	415b      	adcs	r3, r3
 80042e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042e6:	4621      	mov	r1, r4
 80042e8:	eb12 0801 	adds.w	r8, r2, r1
 80042ec:	4629      	mov	r1, r5
 80042ee:	eb43 0901 	adc.w	r9, r3, r1
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004306:	4690      	mov	r8, r2
 8004308:	4699      	mov	r9, r3
 800430a:	4623      	mov	r3, r4
 800430c:	eb18 0303 	adds.w	r3, r8, r3
 8004310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004314:	462b      	mov	r3, r5
 8004316:	eb49 0303 	adc.w	r3, r9, r3
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800432a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800432e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004332:	460b      	mov	r3, r1
 8004334:	18db      	adds	r3, r3, r3
 8004336:	653b      	str	r3, [r7, #80]	@ 0x50
 8004338:	4613      	mov	r3, r2
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004348:	f7fc fc36 	bl	8000bb8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <UART_SetConfig+0x2d4>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011c      	lsls	r4, r3, #4
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004374:	415b      	adcs	r3, r3
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800437c:	4641      	mov	r1, r8
 800437e:	eb12 0a01 	adds.w	sl, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb43 0b01 	adc.w	fp, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439c:	4692      	mov	sl, r2
 800439e:	469b      	mov	fp, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	eb1a 0303 	adds.w	r3, sl, r3
 80043a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043aa:	464b      	mov	r3, r9
 80043ac:	eb4b 0303 	adc.w	r3, fp, r3
 80043b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043c8:	460b      	mov	r3, r1
 80043ca:	18db      	adds	r3, r3, r3
 80043cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ce:	4613      	mov	r3, r2
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043de:	f7fc fbeb 	bl	8000bb8 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <UART_SetConfig+0x2d4>)
 80043ea:	fba3 2301 	umull	r2, r3, r3, r1
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2264      	movs	r2, #100	@ 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	1acb      	subs	r3, r1, r3
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <UART_SetConfig+0x2d4>)
 8004400:	fba3 2302 	umull	r2, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800440c:	441c      	add	r4, r3
 800440e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800441c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004428:	415b      	adcs	r3, r3
 800442a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800442c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6339      	str	r1, [r7, #48]	@ 0x30
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800447c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004484:	460b      	mov	r3, r1
 8004486:	18db      	adds	r3, r3, r3
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800448a:	4613      	mov	r3, r2
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800449a:	f7fc fb8d 	bl	8000bb8 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <UART_SetConfig+0x2d4>)
 80044a4:	fba3 1302 	umull	r1, r3, r3, r2
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	2164      	movs	r1, #100	@ 0x64
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	3332      	adds	r3, #50	@ 0x32
 80044b6:	4a08      	ldr	r2, [pc, #32]	@ (80044d8 <UART_SetConfig+0x2d4>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	f003 0207 	and.w	r2, r3, #7
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4422      	add	r2, r4
 80044ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044cc:	e106      	b.n	80046dc <UART_SetConfig+0x4d8>
 80044ce:	bf00      	nop
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	1891      	adds	r1, r2, r2
 80044f4:	6239      	str	r1, [r7, #32]
 80044f6:	415b      	adcs	r3, r3
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044fe:	4641      	mov	r1, r8
 8004500:	1854      	adds	r4, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb43 0501 	adc.w	r5, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	00eb      	lsls	r3, r5, #3
 8004512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004516:	00e2      	lsls	r2, r4, #3
 8004518:	4614      	mov	r4, r2
 800451a:	461d      	mov	r5, r3
 800451c:	4643      	mov	r3, r8
 800451e:	18e3      	adds	r3, r4, r3
 8004520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004524:	464b      	mov	r3, r9
 8004526:	eb45 0303 	adc.w	r3, r5, r3
 800452a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800453a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800454a:	4629      	mov	r1, r5
 800454c:	008b      	lsls	r3, r1, #2
 800454e:	4621      	mov	r1, r4
 8004550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004554:	4621      	mov	r1, r4
 8004556:	008a      	lsls	r2, r1, #2
 8004558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800455c:	f7fc fb2c 	bl	8000bb8 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4b60      	ldr	r3, [pc, #384]	@ (80046e8 <UART_SetConfig+0x4e4>)
 8004566:	fba3 2302 	umull	r2, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	011c      	lsls	r4, r3, #4
 800456e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800457c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004580:	4642      	mov	r2, r8
 8004582:	464b      	mov	r3, r9
 8004584:	1891      	adds	r1, r2, r2
 8004586:	61b9      	str	r1, [r7, #24]
 8004588:	415b      	adcs	r3, r3
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004590:	4641      	mov	r1, r8
 8004592:	1851      	adds	r1, r2, r1
 8004594:	6139      	str	r1, [r7, #16]
 8004596:	4649      	mov	r1, r9
 8004598:	414b      	adcs	r3, r1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a8:	4659      	mov	r1, fp
 80045aa:	00cb      	lsls	r3, r1, #3
 80045ac:	4651      	mov	r1, sl
 80045ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b2:	4651      	mov	r1, sl
 80045b4:	00ca      	lsls	r2, r1, #3
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	4642      	mov	r2, r8
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045c4:	464b      	mov	r3, r9
 80045c6:	460a      	mov	r2, r1
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045e8:	4649      	mov	r1, r9
 80045ea:	008b      	lsls	r3, r1, #2
 80045ec:	4641      	mov	r1, r8
 80045ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f2:	4641      	mov	r1, r8
 80045f4:	008a      	lsls	r2, r1, #2
 80045f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045fa:	f7fc fadd 	bl	8000bb8 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4611      	mov	r1, r2
 8004604:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <UART_SetConfig+0x4e4>)
 8004606:	fba3 2301 	umull	r2, r3, r3, r1
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2264      	movs	r2, #100	@ 0x64
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	1acb      	subs	r3, r1, r3
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	3332      	adds	r3, #50	@ 0x32
 8004618:	4a33      	ldr	r2, [pc, #204]	@ (80046e8 <UART_SetConfig+0x4e4>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004624:	441c      	add	r4, r3
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	673b      	str	r3, [r7, #112]	@ 0x70
 800462e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	1891      	adds	r1, r2, r2
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	415b      	adcs	r3, r3
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004644:	4641      	mov	r1, r8
 8004646:	1851      	adds	r1, r2, r1
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	4649      	mov	r1, r9
 800464c:	414b      	adcs	r3, r1
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800465c:	4659      	mov	r1, fp
 800465e:	00cb      	lsls	r3, r1, #3
 8004660:	4651      	mov	r1, sl
 8004662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004666:	4651      	mov	r1, sl
 8004668:	00ca      	lsls	r2, r1, #3
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	4603      	mov	r3, r0
 8004670:	4642      	mov	r2, r8
 8004672:	189b      	adds	r3, r3, r2
 8004674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004676:	464b      	mov	r3, r9
 8004678:	460a      	mov	r2, r1
 800467a:	eb42 0303 	adc.w	r3, r2, r3
 800467e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	663b      	str	r3, [r7, #96]	@ 0x60
 800468a:	667a      	str	r2, [r7, #100]	@ 0x64
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046aa:	f7fc fa85 	bl	8000bb8 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <UART_SetConfig+0x4e4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	@ 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <UART_SetConfig+0x4e4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4422      	add	r2, r4
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046e2:	46bd      	mov	sp, r7
 80046e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e8:	51eb851f 	.word	0x51eb851f

080046ec <malloc>:
 80046ec:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <malloc+0xc>)
 80046ee:	4601      	mov	r1, r0
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f000 b825 	b.w	8004740 <_malloc_r>
 80046f6:	bf00      	nop
 80046f8:	20000090 	.word	0x20000090

080046fc <sbrk_aligned>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4e0f      	ldr	r6, [pc, #60]	@ (800473c <sbrk_aligned+0x40>)
 8004700:	460c      	mov	r4, r1
 8004702:	6831      	ldr	r1, [r6, #0]
 8004704:	4605      	mov	r5, r0
 8004706:	b911      	cbnz	r1, 800470e <sbrk_aligned+0x12>
 8004708:	f000 fea2 	bl	8005450 <_sbrk_r>
 800470c:	6030      	str	r0, [r6, #0]
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 fe9d 	bl	8005450 <_sbrk_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d103      	bne.n	8004722 <sbrk_aligned+0x26>
 800471a:	f04f 34ff 	mov.w	r4, #4294967295
 800471e:	4620      	mov	r0, r4
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	1cc4      	adds	r4, r0, #3
 8004724:	f024 0403 	bic.w	r4, r4, #3
 8004728:	42a0      	cmp	r0, r4
 800472a:	d0f8      	beq.n	800471e <sbrk_aligned+0x22>
 800472c:	1a21      	subs	r1, r4, r0
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fe8e 	bl	8005450 <_sbrk_r>
 8004734:	3001      	adds	r0, #1
 8004736:	d1f2      	bne.n	800471e <sbrk_aligned+0x22>
 8004738:	e7ef      	b.n	800471a <sbrk_aligned+0x1e>
 800473a:	bf00      	nop
 800473c:	200003f4 	.word	0x200003f4

08004740 <_malloc_r>:
 8004740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004744:	1ccd      	adds	r5, r1, #3
 8004746:	f025 0503 	bic.w	r5, r5, #3
 800474a:	3508      	adds	r5, #8
 800474c:	2d0c      	cmp	r5, #12
 800474e:	bf38      	it	cc
 8004750:	250c      	movcc	r5, #12
 8004752:	2d00      	cmp	r5, #0
 8004754:	4606      	mov	r6, r0
 8004756:	db01      	blt.n	800475c <_malloc_r+0x1c>
 8004758:	42a9      	cmp	r1, r5
 800475a:	d904      	bls.n	8004766 <_malloc_r+0x26>
 800475c:	230c      	movs	r3, #12
 800475e:	6033      	str	r3, [r6, #0]
 8004760:	2000      	movs	r0, #0
 8004762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800483c <_malloc_r+0xfc>
 800476a:	f000 f869 	bl	8004840 <__malloc_lock>
 800476e:	f8d8 3000 	ldr.w	r3, [r8]
 8004772:	461c      	mov	r4, r3
 8004774:	bb44      	cbnz	r4, 80047c8 <_malloc_r+0x88>
 8004776:	4629      	mov	r1, r5
 8004778:	4630      	mov	r0, r6
 800477a:	f7ff ffbf 	bl	80046fc <sbrk_aligned>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	4604      	mov	r4, r0
 8004782:	d158      	bne.n	8004836 <_malloc_r+0xf6>
 8004784:	f8d8 4000 	ldr.w	r4, [r8]
 8004788:	4627      	mov	r7, r4
 800478a:	2f00      	cmp	r7, #0
 800478c:	d143      	bne.n	8004816 <_malloc_r+0xd6>
 800478e:	2c00      	cmp	r4, #0
 8004790:	d04b      	beq.n	800482a <_malloc_r+0xea>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	4639      	mov	r1, r7
 8004796:	4630      	mov	r0, r6
 8004798:	eb04 0903 	add.w	r9, r4, r3
 800479c:	f000 fe58 	bl	8005450 <_sbrk_r>
 80047a0:	4581      	cmp	r9, r0
 80047a2:	d142      	bne.n	800482a <_malloc_r+0xea>
 80047a4:	6821      	ldr	r1, [r4, #0]
 80047a6:	1a6d      	subs	r5, r5, r1
 80047a8:	4629      	mov	r1, r5
 80047aa:	4630      	mov	r0, r6
 80047ac:	f7ff ffa6 	bl	80046fc <sbrk_aligned>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d03a      	beq.n	800482a <_malloc_r+0xea>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	442b      	add	r3, r5
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	f8d8 3000 	ldr.w	r3, [r8]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	bb62      	cbnz	r2, 800481c <_malloc_r+0xdc>
 80047c2:	f8c8 7000 	str.w	r7, [r8]
 80047c6:	e00f      	b.n	80047e8 <_malloc_r+0xa8>
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	1b52      	subs	r2, r2, r5
 80047cc:	d420      	bmi.n	8004810 <_malloc_r+0xd0>
 80047ce:	2a0b      	cmp	r2, #11
 80047d0:	d917      	bls.n	8004802 <_malloc_r+0xc2>
 80047d2:	1961      	adds	r1, r4, r5
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	6025      	str	r5, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	6059      	strne	r1, [r3, #4]
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	bf08      	it	eq
 80047e0:	f8c8 1000 	streq.w	r1, [r8]
 80047e4:	5162      	str	r2, [r4, r5]
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f82f 	bl	800484c <__malloc_unlock>
 80047ee:	f104 000b 	add.w	r0, r4, #11
 80047f2:	1d23      	adds	r3, r4, #4
 80047f4:	f020 0007 	bic.w	r0, r0, #7
 80047f8:	1ac2      	subs	r2, r0, r3
 80047fa:	bf1c      	itt	ne
 80047fc:	1a1b      	subne	r3, r3, r0
 80047fe:	50a3      	strne	r3, [r4, r2]
 8004800:	e7af      	b.n	8004762 <_malloc_r+0x22>
 8004802:	6862      	ldr	r2, [r4, #4]
 8004804:	42a3      	cmp	r3, r4
 8004806:	bf0c      	ite	eq
 8004808:	f8c8 2000 	streq.w	r2, [r8]
 800480c:	605a      	strne	r2, [r3, #4]
 800480e:	e7eb      	b.n	80047e8 <_malloc_r+0xa8>
 8004810:	4623      	mov	r3, r4
 8004812:	6864      	ldr	r4, [r4, #4]
 8004814:	e7ae      	b.n	8004774 <_malloc_r+0x34>
 8004816:	463c      	mov	r4, r7
 8004818:	687f      	ldr	r7, [r7, #4]
 800481a:	e7b6      	b.n	800478a <_malloc_r+0x4a>
 800481c:	461a      	mov	r2, r3
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	42a3      	cmp	r3, r4
 8004822:	d1fb      	bne.n	800481c <_malloc_r+0xdc>
 8004824:	2300      	movs	r3, #0
 8004826:	6053      	str	r3, [r2, #4]
 8004828:	e7de      	b.n	80047e8 <_malloc_r+0xa8>
 800482a:	230c      	movs	r3, #12
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f80c 	bl	800484c <__malloc_unlock>
 8004834:	e794      	b.n	8004760 <_malloc_r+0x20>
 8004836:	6005      	str	r5, [r0, #0]
 8004838:	e7d6      	b.n	80047e8 <_malloc_r+0xa8>
 800483a:	bf00      	nop
 800483c:	200003f8 	.word	0x200003f8

08004840 <__malloc_lock>:
 8004840:	4801      	ldr	r0, [pc, #4]	@ (8004848 <__malloc_lock+0x8>)
 8004842:	f000 be52 	b.w	80054ea <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	2000053c 	.word	0x2000053c

0800484c <__malloc_unlock>:
 800484c:	4801      	ldr	r0, [pc, #4]	@ (8004854 <__malloc_unlock+0x8>)
 800484e:	f000 be4d 	b.w	80054ec <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	2000053c 	.word	0x2000053c

08004858 <rand>:
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <rand+0x5c>)
 800485a:	b510      	push	{r4, lr}
 800485c:	681c      	ldr	r4, [r3, #0]
 800485e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004860:	b9b3      	cbnz	r3, 8004890 <rand+0x38>
 8004862:	2018      	movs	r0, #24
 8004864:	f7ff ff42 	bl	80046ec <malloc>
 8004868:	4602      	mov	r2, r0
 800486a:	6320      	str	r0, [r4, #48]	@ 0x30
 800486c:	b920      	cbnz	r0, 8004878 <rand+0x20>
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <rand+0x60>)
 8004870:	4812      	ldr	r0, [pc, #72]	@ (80048bc <rand+0x64>)
 8004872:	2152      	movs	r1, #82	@ 0x52
 8004874:	f000 fe3c 	bl	80054f0 <__assert_func>
 8004878:	4911      	ldr	r1, [pc, #68]	@ (80048c0 <rand+0x68>)
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <rand+0x6c>)
 800487c:	e9c0 1300 	strd	r1, r3, [r0]
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <rand+0x70>)
 8004882:	6083      	str	r3, [r0, #8]
 8004884:	230b      	movs	r3, #11
 8004886:	8183      	strh	r3, [r0, #12]
 8004888:	2100      	movs	r1, #0
 800488a:	2001      	movs	r0, #1
 800488c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004890:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004892:	480e      	ldr	r0, [pc, #56]	@ (80048cc <rand+0x74>)
 8004894:	690b      	ldr	r3, [r1, #16]
 8004896:	694c      	ldr	r4, [r1, #20]
 8004898:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <rand+0x78>)
 800489a:	4358      	muls	r0, r3
 800489c:	fb02 0004 	mla	r0, r2, r4, r0
 80048a0:	fba3 3202 	umull	r3, r2, r3, r2
 80048a4:	3301      	adds	r3, #1
 80048a6:	eb40 0002 	adc.w	r0, r0, r2
 80048aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80048ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	20000090 	.word	0x20000090
 80048b8:	08007690 	.word	0x08007690
 80048bc:	080076a7 	.word	0x080076a7
 80048c0:	abcd330e 	.word	0xabcd330e
 80048c4:	e66d1234 	.word	0xe66d1234
 80048c8:	0005deec 	.word	0x0005deec
 80048cc:	5851f42d 	.word	0x5851f42d
 80048d0:	4c957f2d 	.word	0x4c957f2d

080048d4 <__cvt>:
 80048d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	ec57 6b10 	vmov	r6, r7, d0
 80048dc:	2f00      	cmp	r7, #0
 80048de:	460c      	mov	r4, r1
 80048e0:	4619      	mov	r1, r3
 80048e2:	463b      	mov	r3, r7
 80048e4:	bfbb      	ittet	lt
 80048e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80048ea:	461f      	movlt	r7, r3
 80048ec:	2300      	movge	r3, #0
 80048ee:	232d      	movlt	r3, #45	@ 0x2d
 80048f0:	700b      	strb	r3, [r1, #0]
 80048f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80048f8:	4691      	mov	r9, r2
 80048fa:	f023 0820 	bic.w	r8, r3, #32
 80048fe:	bfbc      	itt	lt
 8004900:	4632      	movlt	r2, r6
 8004902:	4616      	movlt	r6, r2
 8004904:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004908:	d005      	beq.n	8004916 <__cvt+0x42>
 800490a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800490e:	d100      	bne.n	8004912 <__cvt+0x3e>
 8004910:	3401      	adds	r4, #1
 8004912:	2102      	movs	r1, #2
 8004914:	e000      	b.n	8004918 <__cvt+0x44>
 8004916:	2103      	movs	r1, #3
 8004918:	ab03      	add	r3, sp, #12
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	ab02      	add	r3, sp, #8
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	ec47 6b10 	vmov	d0, r6, r7
 8004924:	4653      	mov	r3, sl
 8004926:	4622      	mov	r2, r4
 8004928:	f000 fe8a 	bl	8005640 <_dtoa_r>
 800492c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004930:	4605      	mov	r5, r0
 8004932:	d119      	bne.n	8004968 <__cvt+0x94>
 8004934:	f019 0f01 	tst.w	r9, #1
 8004938:	d00e      	beq.n	8004958 <__cvt+0x84>
 800493a:	eb00 0904 	add.w	r9, r0, r4
 800493e:	2200      	movs	r2, #0
 8004940:	2300      	movs	r3, #0
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fc f8c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800494a:	b108      	cbz	r0, 8004950 <__cvt+0x7c>
 800494c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004950:	2230      	movs	r2, #48	@ 0x30
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	454b      	cmp	r3, r9
 8004956:	d31e      	bcc.n	8004996 <__cvt+0xc2>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800495c:	1b5b      	subs	r3, r3, r5
 800495e:	4628      	mov	r0, r5
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	b004      	add	sp, #16
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800496c:	eb00 0904 	add.w	r9, r0, r4
 8004970:	d1e5      	bne.n	800493e <__cvt+0x6a>
 8004972:	7803      	ldrb	r3, [r0, #0]
 8004974:	2b30      	cmp	r3, #48	@ 0x30
 8004976:	d10a      	bne.n	800498e <__cvt+0xba>
 8004978:	2200      	movs	r2, #0
 800497a:	2300      	movs	r3, #0
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fc f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004984:	b918      	cbnz	r0, 800498e <__cvt+0xba>
 8004986:	f1c4 0401 	rsb	r4, r4, #1
 800498a:	f8ca 4000 	str.w	r4, [sl]
 800498e:	f8da 3000 	ldr.w	r3, [sl]
 8004992:	4499      	add	r9, r3
 8004994:	e7d3      	b.n	800493e <__cvt+0x6a>
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	9103      	str	r1, [sp, #12]
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e7d9      	b.n	8004952 <__cvt+0x7e>

0800499e <__exponent>:
 800499e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a0:	2900      	cmp	r1, #0
 80049a2:	bfba      	itte	lt
 80049a4:	4249      	neglt	r1, r1
 80049a6:	232d      	movlt	r3, #45	@ 0x2d
 80049a8:	232b      	movge	r3, #43	@ 0x2b
 80049aa:	2909      	cmp	r1, #9
 80049ac:	7002      	strb	r2, [r0, #0]
 80049ae:	7043      	strb	r3, [r0, #1]
 80049b0:	dd29      	ble.n	8004a06 <__exponent+0x68>
 80049b2:	f10d 0307 	add.w	r3, sp, #7
 80049b6:	461d      	mov	r5, r3
 80049b8:	270a      	movs	r7, #10
 80049ba:	461a      	mov	r2, r3
 80049bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80049c0:	fb07 1416 	mls	r4, r7, r6, r1
 80049c4:	3430      	adds	r4, #48	@ 0x30
 80049c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049ca:	460c      	mov	r4, r1
 80049cc:	2c63      	cmp	r4, #99	@ 0x63
 80049ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80049d2:	4631      	mov	r1, r6
 80049d4:	dcf1      	bgt.n	80049ba <__exponent+0x1c>
 80049d6:	3130      	adds	r1, #48	@ 0x30
 80049d8:	1e94      	subs	r4, r2, #2
 80049da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049de:	1c41      	adds	r1, r0, #1
 80049e0:	4623      	mov	r3, r4
 80049e2:	42ab      	cmp	r3, r5
 80049e4:	d30a      	bcc.n	80049fc <__exponent+0x5e>
 80049e6:	f10d 0309 	add.w	r3, sp, #9
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	42ac      	cmp	r4, r5
 80049ee:	bf88      	it	hi
 80049f0:	2300      	movhi	r3, #0
 80049f2:	3302      	adds	r3, #2
 80049f4:	4403      	add	r3, r0
 80049f6:	1a18      	subs	r0, r3, r0
 80049f8:	b003      	add	sp, #12
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a04:	e7ed      	b.n	80049e2 <__exponent+0x44>
 8004a06:	2330      	movs	r3, #48	@ 0x30
 8004a08:	3130      	adds	r1, #48	@ 0x30
 8004a0a:	7083      	strb	r3, [r0, #2]
 8004a0c:	70c1      	strb	r1, [r0, #3]
 8004a0e:	1d03      	adds	r3, r0, #4
 8004a10:	e7f1      	b.n	80049f6 <__exponent+0x58>
	...

08004a14 <_printf_float>:
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	b08d      	sub	sp, #52	@ 0x34
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a20:	4616      	mov	r6, r2
 8004a22:	461f      	mov	r7, r3
 8004a24:	4605      	mov	r5, r0
 8004a26:	f000 fcdb 	bl	80053e0 <_localeconv_r>
 8004a2a:	6803      	ldr	r3, [r0, #0]
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fc26 	bl	8000280 <strlen>
 8004a34:	2300      	movs	r3, #0
 8004a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a38:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3c:	9005      	str	r0, [sp, #20]
 8004a3e:	3307      	adds	r3, #7
 8004a40:	f023 0307 	bic.w	r3, r3, #7
 8004a44:	f103 0208 	add.w	r2, r3, #8
 8004a48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a50:	f8c8 2000 	str.w	r2, [r8]
 8004a54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cdc <_printf_float+0x2c8>)
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	f7fc f864 	bl	8000b3c <__aeabi_dcmpun>
 8004a74:	bb70      	cbnz	r0, 8004ad4 <_printf_float+0xc0>
 8004a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a7a:	4b98      	ldr	r3, [pc, #608]	@ (8004cdc <_printf_float+0x2c8>)
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	f7fc f83e 	bl	8000b00 <__aeabi_dcmple>
 8004a84:	bb30      	cbnz	r0, 8004ad4 <_printf_float+0xc0>
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fc f82d 	bl	8000aec <__aeabi_dcmplt>
 8004a92:	b110      	cbz	r0, 8004a9a <_printf_float+0x86>
 8004a94:	232d      	movs	r3, #45	@ 0x2d
 8004a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a9a:	4a91      	ldr	r2, [pc, #580]	@ (8004ce0 <_printf_float+0x2cc>)
 8004a9c:	4b91      	ldr	r3, [pc, #580]	@ (8004ce4 <_printf_float+0x2d0>)
 8004a9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004aa2:	bf94      	ite	ls
 8004aa4:	4690      	movls	r8, r2
 8004aa6:	4698      	movhi	r8, r3
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	f02b 0304 	bic.w	r3, fp, #4
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	f04f 0900 	mov.w	r9, #0
 8004ab6:	9700      	str	r7, [sp, #0]
 8004ab8:	4633      	mov	r3, r6
 8004aba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f9d2 	bl	8004e68 <_printf_common>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	f040 808d 	bne.w	8004be4 <_printf_float+0x1d0>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b00d      	add	sp, #52	@ 0x34
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fc f82e 	bl	8000b3c <__aeabi_dcmpun>
 8004ae0:	b140      	cbz	r0, 8004af4 <_printf_float+0xe0>
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bfbc      	itt	lt
 8004ae8:	232d      	movlt	r3, #45	@ 0x2d
 8004aea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004aee:	4a7e      	ldr	r2, [pc, #504]	@ (8004ce8 <_printf_float+0x2d4>)
 8004af0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cec <_printf_float+0x2d8>)
 8004af2:	e7d4      	b.n	8004a9e <_printf_float+0x8a>
 8004af4:	6863      	ldr	r3, [r4, #4]
 8004af6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004afa:	9206      	str	r2, [sp, #24]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	d13b      	bne.n	8004b78 <_printf_float+0x164>
 8004b00:	2306      	movs	r3, #6
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b14:	ab09      	add	r3, sp, #36	@ 0x24
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	6861      	ldr	r1, [r4, #4]
 8004b1a:	ec49 8b10 	vmov	d0, r8, r9
 8004b1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7ff fed6 	bl	80048d4 <__cvt>
 8004b28:	9b06      	ldr	r3, [sp, #24]
 8004b2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b2c:	2b47      	cmp	r3, #71	@ 0x47
 8004b2e:	4680      	mov	r8, r0
 8004b30:	d129      	bne.n	8004b86 <_printf_float+0x172>
 8004b32:	1cc8      	adds	r0, r1, #3
 8004b34:	db02      	blt.n	8004b3c <_printf_float+0x128>
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	dd41      	ble.n	8004bc0 <_printf_float+0x1ac>
 8004b3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b40:	fa5f fa8a 	uxtb.w	sl, sl
 8004b44:	3901      	subs	r1, #1
 8004b46:	4652      	mov	r2, sl
 8004b48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b4e:	f7ff ff26 	bl	800499e <__exponent>
 8004b52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b54:	1813      	adds	r3, r2, r0
 8004b56:	2a01      	cmp	r2, #1
 8004b58:	4681      	mov	r9, r0
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	dc02      	bgt.n	8004b64 <_printf_float+0x150>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	07d2      	lsls	r2, r2, #31
 8004b62:	d501      	bpl.n	8004b68 <_printf_float+0x154>
 8004b64:	3301      	adds	r3, #1
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0a2      	beq.n	8004ab6 <_printf_float+0xa2>
 8004b70:	232d      	movs	r3, #45	@ 0x2d
 8004b72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b76:	e79e      	b.n	8004ab6 <_printf_float+0xa2>
 8004b78:	9a06      	ldr	r2, [sp, #24]
 8004b7a:	2a47      	cmp	r2, #71	@ 0x47
 8004b7c:	d1c2      	bne.n	8004b04 <_printf_float+0xf0>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1c0      	bne.n	8004b04 <_printf_float+0xf0>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7bd      	b.n	8004b02 <_printf_float+0xee>
 8004b86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b8a:	d9db      	bls.n	8004b44 <_printf_float+0x130>
 8004b8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b90:	d118      	bne.n	8004bc4 <_printf_float+0x1b0>
 8004b92:	2900      	cmp	r1, #0
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	dd0b      	ble.n	8004bb0 <_printf_float+0x19c>
 8004b98:	6121      	str	r1, [r4, #16]
 8004b9a:	b913      	cbnz	r3, 8004ba2 <_printf_float+0x18e>
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	07d0      	lsls	r0, r2, #31
 8004ba0:	d502      	bpl.n	8004ba8 <_printf_float+0x194>
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	440b      	add	r3, r1
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004baa:	f04f 0900 	mov.w	r9, #0
 8004bae:	e7db      	b.n	8004b68 <_printf_float+0x154>
 8004bb0:	b913      	cbnz	r3, 8004bb8 <_printf_float+0x1a4>
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	07d2      	lsls	r2, r2, #31
 8004bb6:	d501      	bpl.n	8004bbc <_printf_float+0x1a8>
 8004bb8:	3302      	adds	r3, #2
 8004bba:	e7f4      	b.n	8004ba6 <_printf_float+0x192>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e7f2      	b.n	8004ba6 <_printf_float+0x192>
 8004bc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	db05      	blt.n	8004bd6 <_printf_float+0x1c2>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	6121      	str	r1, [r4, #16]
 8004bce:	07d8      	lsls	r0, r3, #31
 8004bd0:	d5ea      	bpl.n	8004ba8 <_printf_float+0x194>
 8004bd2:	1c4b      	adds	r3, r1, #1
 8004bd4:	e7e7      	b.n	8004ba6 <_printf_float+0x192>
 8004bd6:	2900      	cmp	r1, #0
 8004bd8:	bfd4      	ite	le
 8004bda:	f1c1 0202 	rsble	r2, r1, #2
 8004bde:	2201      	movgt	r2, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	e7e0      	b.n	8004ba6 <_printf_float+0x192>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	055a      	lsls	r2, r3, #21
 8004be8:	d407      	bmi.n	8004bfa <_printf_float+0x1e6>
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	4642      	mov	r2, r8
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d12b      	bne.n	8004c50 <_printf_float+0x23c>
 8004bf8:	e767      	b.n	8004aca <_printf_float+0xb6>
 8004bfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bfe:	f240 80dd 	bls.w	8004dbc <_printf_float+0x3a8>
 8004c02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c06:	2200      	movs	r2, #0
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f7fb ff65 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d033      	beq.n	8004c7a <_printf_float+0x266>
 8004c12:	4a37      	ldr	r2, [pc, #220]	@ (8004cf0 <_printf_float+0x2dc>)
 8004c14:	2301      	movs	r3, #1
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f af54 	beq.w	8004aca <_printf_float+0xb6>
 8004c22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c26:	4543      	cmp	r3, r8
 8004c28:	db02      	blt.n	8004c30 <_printf_float+0x21c>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	07d8      	lsls	r0, r3, #31
 8004c2e:	d50f      	bpl.n	8004c50 <_printf_float+0x23c>
 8004c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f af45 	beq.w	8004aca <_printf_float+0xb6>
 8004c40:	f04f 0900 	mov.w	r9, #0
 8004c44:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c48:	f104 0a1a 	add.w	sl, r4, #26
 8004c4c:	45c8      	cmp	r8, r9
 8004c4e:	dc09      	bgt.n	8004c64 <_printf_float+0x250>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	079b      	lsls	r3, r3, #30
 8004c54:	f100 8103 	bmi.w	8004e5e <_printf_float+0x44a>
 8004c58:	68e0      	ldr	r0, [r4, #12]
 8004c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c5c:	4298      	cmp	r0, r3
 8004c5e:	bfb8      	it	lt
 8004c60:	4618      	movlt	r0, r3
 8004c62:	e734      	b.n	8004ace <_printf_float+0xba>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4652      	mov	r2, sl
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f af2b 	beq.w	8004aca <_printf_float+0xb6>
 8004c74:	f109 0901 	add.w	r9, r9, #1
 8004c78:	e7e8      	b.n	8004c4c <_printf_float+0x238>
 8004c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dc39      	bgt.n	8004cf4 <_printf_float+0x2e0>
 8004c80:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <_printf_float+0x2dc>)
 8004c82:	2301      	movs	r3, #1
 8004c84:	4631      	mov	r1, r6
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f af1d 	beq.w	8004aca <_printf_float+0xb6>
 8004c90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c94:	ea59 0303 	orrs.w	r3, r9, r3
 8004c98:	d102      	bne.n	8004ca0 <_printf_float+0x28c>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	07d9      	lsls	r1, r3, #31
 8004c9e:	d5d7      	bpl.n	8004c50 <_printf_float+0x23c>
 8004ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b8      	blx	r7
 8004caa:	3001      	adds	r0, #1
 8004cac:	f43f af0d 	beq.w	8004aca <_printf_float+0xb6>
 8004cb0:	f04f 0a00 	mov.w	sl, #0
 8004cb4:	f104 0b1a 	add.w	fp, r4, #26
 8004cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cba:	425b      	negs	r3, r3
 8004cbc:	4553      	cmp	r3, sl
 8004cbe:	dc01      	bgt.n	8004cc4 <_printf_float+0x2b0>
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	e793      	b.n	8004bec <_printf_float+0x1d8>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	465a      	mov	r2, fp
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	f43f aefb 	beq.w	8004aca <_printf_float+0xb6>
 8004cd4:	f10a 0a01 	add.w	sl, sl, #1
 8004cd8:	e7ee      	b.n	8004cb8 <_printf_float+0x2a4>
 8004cda:	bf00      	nop
 8004cdc:	7fefffff 	.word	0x7fefffff
 8004ce0:	080076ff 	.word	0x080076ff
 8004ce4:	08007703 	.word	0x08007703
 8004ce8:	08007707 	.word	0x08007707
 8004cec:	0800770b 	.word	0x0800770b
 8004cf0:	0800770f 	.word	0x0800770f
 8004cf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004cfa:	4553      	cmp	r3, sl
 8004cfc:	bfa8      	it	ge
 8004cfe:	4653      	movge	r3, sl
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	4699      	mov	r9, r3
 8004d04:	dc36      	bgt.n	8004d74 <_printf_float+0x360>
 8004d06:	f04f 0b00 	mov.w	fp, #0
 8004d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d0e:	f104 021a 	add.w	r2, r4, #26
 8004d12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d14:	9306      	str	r3, [sp, #24]
 8004d16:	eba3 0309 	sub.w	r3, r3, r9
 8004d1a:	455b      	cmp	r3, fp
 8004d1c:	dc31      	bgt.n	8004d82 <_printf_float+0x36e>
 8004d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d20:	459a      	cmp	sl, r3
 8004d22:	dc3a      	bgt.n	8004d9a <_printf_float+0x386>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07da      	lsls	r2, r3, #31
 8004d28:	d437      	bmi.n	8004d9a <_printf_float+0x386>
 8004d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d2c:	ebaa 0903 	sub.w	r9, sl, r3
 8004d30:	9b06      	ldr	r3, [sp, #24]
 8004d32:	ebaa 0303 	sub.w	r3, sl, r3
 8004d36:	4599      	cmp	r9, r3
 8004d38:	bfa8      	it	ge
 8004d3a:	4699      	movge	r9, r3
 8004d3c:	f1b9 0f00 	cmp.w	r9, #0
 8004d40:	dc33      	bgt.n	8004daa <_printf_float+0x396>
 8004d42:	f04f 0800 	mov.w	r8, #0
 8004d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d4a:	f104 0b1a 	add.w	fp, r4, #26
 8004d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d50:	ebaa 0303 	sub.w	r3, sl, r3
 8004d54:	eba3 0309 	sub.w	r3, r3, r9
 8004d58:	4543      	cmp	r3, r8
 8004d5a:	f77f af79 	ble.w	8004c50 <_printf_float+0x23c>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	465a      	mov	r2, fp
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f aeae 	beq.w	8004aca <_printf_float+0xb6>
 8004d6e:	f108 0801 	add.w	r8, r8, #1
 8004d72:	e7ec      	b.n	8004d4e <_printf_float+0x33a>
 8004d74:	4642      	mov	r2, r8
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d1c2      	bne.n	8004d06 <_printf_float+0x2f2>
 8004d80:	e6a3      	b.n	8004aca <_printf_float+0xb6>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	9206      	str	r2, [sp, #24]
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	f43f ae9c 	beq.w	8004aca <_printf_float+0xb6>
 8004d92:	9a06      	ldr	r2, [sp, #24]
 8004d94:	f10b 0b01 	add.w	fp, fp, #1
 8004d98:	e7bb      	b.n	8004d12 <_printf_float+0x2fe>
 8004d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1c0      	bne.n	8004d2a <_printf_float+0x316>
 8004da8:	e68f      	b.n	8004aca <_printf_float+0xb6>
 8004daa:	9a06      	ldr	r2, [sp, #24]
 8004dac:	464b      	mov	r3, r9
 8004dae:	4442      	add	r2, r8
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	d1c3      	bne.n	8004d42 <_printf_float+0x32e>
 8004dba:	e686      	b.n	8004aca <_printf_float+0xb6>
 8004dbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dc0:	f1ba 0f01 	cmp.w	sl, #1
 8004dc4:	dc01      	bgt.n	8004dca <_printf_float+0x3b6>
 8004dc6:	07db      	lsls	r3, r3, #31
 8004dc8:	d536      	bpl.n	8004e38 <_printf_float+0x424>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4642      	mov	r2, r8
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f ae78 	beq.w	8004aca <_printf_float+0xb6>
 8004dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dde:	4631      	mov	r1, r6
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b8      	blx	r7
 8004de4:	3001      	adds	r0, #1
 8004de6:	f43f ae70 	beq.w	8004aca <_printf_float+0xb6>
 8004dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dee:	2200      	movs	r2, #0
 8004df0:	2300      	movs	r3, #0
 8004df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df6:	f7fb fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dfa:	b9c0      	cbnz	r0, 8004e2e <_printf_float+0x41a>
 8004dfc:	4653      	mov	r3, sl
 8004dfe:	f108 0201 	add.w	r2, r8, #1
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d10c      	bne.n	8004e26 <_printf_float+0x412>
 8004e0c:	e65d      	b.n	8004aca <_printf_float+0xb6>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	465a      	mov	r2, fp
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f43f ae56 	beq.w	8004aca <_printf_float+0xb6>
 8004e1e:	f108 0801 	add.w	r8, r8, #1
 8004e22:	45d0      	cmp	r8, sl
 8004e24:	dbf3      	blt.n	8004e0e <_printf_float+0x3fa>
 8004e26:	464b      	mov	r3, r9
 8004e28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e2c:	e6df      	b.n	8004bee <_printf_float+0x1da>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f104 0b1a 	add.w	fp, r4, #26
 8004e36:	e7f4      	b.n	8004e22 <_printf_float+0x40e>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	e7e1      	b.n	8004e02 <_printf_float+0x3ee>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae3e 	beq.w	8004aca <_printf_float+0xb6>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	4543      	cmp	r3, r8
 8004e5a:	dcf0      	bgt.n	8004e3e <_printf_float+0x42a>
 8004e5c:	e6fc      	b.n	8004c58 <_printf_float+0x244>
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	f104 0919 	add.w	r9, r4, #25
 8004e66:	e7f4      	b.n	8004e52 <_printf_float+0x43e>

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4698      	mov	r8, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	3b00      	subs	r3, #0
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c8      	blx	r9
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	6922      	ldr	r2, [r4, #16]
 8004ed2:	f003 0306 	and.w	r3, r3, #6
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	bf02      	ittt	eq
 8004eda:	68e5      	ldreq	r5, [r4, #12]
 8004edc:	6833      	ldreq	r3, [r6, #0]
 8004ede:	1aed      	subeq	r5, r5, r3
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4641      	mov	r1, r8
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c8      	blx	r9
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	@ 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4641      	mov	r1, r8
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c8      	blx	r9
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	7e0f      	ldrb	r7, [r1, #24]
 8004f4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f4c:	2f78      	cmp	r7, #120	@ 0x78
 8004f4e:	4691      	mov	r9, r2
 8004f50:	4680      	mov	r8, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	469a      	mov	sl, r3
 8004f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	@ 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d2 	beq.w	800510a <_printf_i+0x1c6>
 8004f66:	2f58      	cmp	r7, #88	@ 0x58
 8004f68:	f000 80b9 	beq.w	80050de <_printf_i+0x19a>
 8004f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f84 <_printf_i+0x40>)
 8004f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050f1 	.word	0x080050f1
 8004fb4:	0800501b 	.word	0x0800501b
 8004fb8:	080050ab 	.word	0x080050ab
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	08005113 	.word	0x08005113
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	0800501b 	.word	0x0800501b
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050b3 	.word	0x080050b3
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e09d      	b.n	800512c <_printf_i+0x1e8>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	1d19      	adds	r1, r3, #4
 8004ff6:	6031      	str	r1, [r6, #0]
 8004ff8:	0606      	lsls	r6, r0, #24
 8004ffa:	d501      	bpl.n	8005000 <_printf_i+0xbc>
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	e003      	b.n	8005008 <_printf_i+0xc4>
 8005000:	0645      	lsls	r5, r0, #25
 8005002:	d5fb      	bpl.n	8004ffc <_printf_i+0xb8>
 8005004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005008:	2d00      	cmp	r5, #0
 800500a:	da03      	bge.n	8005014 <_printf_i+0xd0>
 800500c:	232d      	movs	r3, #45	@ 0x2d
 800500e:	426d      	negs	r5, r5
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005014:	4859      	ldr	r0, [pc, #356]	@ (800517c <_printf_i+0x238>)
 8005016:	230a      	movs	r3, #10
 8005018:	e011      	b.n	800503e <_printf_i+0xfa>
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	0608      	lsls	r0, r1, #24
 8005020:	f853 5b04 	ldr.w	r5, [r3], #4
 8005024:	d402      	bmi.n	800502c <_printf_i+0xe8>
 8005026:	0649      	lsls	r1, r1, #25
 8005028:	bf48      	it	mi
 800502a:	b2ad      	uxthmi	r5, r5
 800502c:	2f6f      	cmp	r7, #111	@ 0x6f
 800502e:	4853      	ldr	r0, [pc, #332]	@ (800517c <_printf_i+0x238>)
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	bf14      	ite	ne
 8005034:	230a      	movne	r3, #10
 8005036:	2308      	moveq	r3, #8
 8005038:	2100      	movs	r1, #0
 800503a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800503e:	6866      	ldr	r6, [r4, #4]
 8005040:	60a6      	str	r6, [r4, #8]
 8005042:	2e00      	cmp	r6, #0
 8005044:	bfa2      	ittt	ge
 8005046:	6821      	ldrge	r1, [r4, #0]
 8005048:	f021 0104 	bicge.w	r1, r1, #4
 800504c:	6021      	strge	r1, [r4, #0]
 800504e:	b90d      	cbnz	r5, 8005054 <_printf_i+0x110>
 8005050:	2e00      	cmp	r6, #0
 8005052:	d04b      	beq.n	80050ec <_printf_i+0x1a8>
 8005054:	4616      	mov	r6, r2
 8005056:	fbb5 f1f3 	udiv	r1, r5, r3
 800505a:	fb03 5711 	mls	r7, r3, r1, r5
 800505e:	5dc7      	ldrb	r7, [r0, r7]
 8005060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005064:	462f      	mov	r7, r5
 8005066:	42bb      	cmp	r3, r7
 8005068:	460d      	mov	r5, r1
 800506a:	d9f4      	bls.n	8005056 <_printf_i+0x112>
 800506c:	2b08      	cmp	r3, #8
 800506e:	d10b      	bne.n	8005088 <_printf_i+0x144>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07df      	lsls	r7, r3, #31
 8005074:	d508      	bpl.n	8005088 <_printf_i+0x144>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	6861      	ldr	r1, [r4, #4]
 800507a:	4299      	cmp	r1, r3
 800507c:	bfde      	ittt	le
 800507e:	2330      	movle	r3, #48	@ 0x30
 8005080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005088:	1b92      	subs	r2, r2, r6
 800508a:	6122      	str	r2, [r4, #16]
 800508c:	f8cd a000 	str.w	sl, [sp]
 8005090:	464b      	mov	r3, r9
 8005092:	aa03      	add	r2, sp, #12
 8005094:	4621      	mov	r1, r4
 8005096:	4640      	mov	r0, r8
 8005098:	f7ff fee6 	bl	8004e68 <_printf_common>
 800509c:	3001      	adds	r0, #1
 800509e:	d14a      	bne.n	8005136 <_printf_i+0x1f2>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	b004      	add	sp, #16
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	f043 0320 	orr.w	r3, r3, #32
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	4833      	ldr	r0, [pc, #204]	@ (8005180 <_printf_i+0x23c>)
 80050b4:	2778      	movs	r7, #120	@ 0x78
 80050b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6831      	ldr	r1, [r6, #0]
 80050be:	061f      	lsls	r7, r3, #24
 80050c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80050c4:	d402      	bmi.n	80050cc <_printf_i+0x188>
 80050c6:	065f      	lsls	r7, r3, #25
 80050c8:	bf48      	it	mi
 80050ca:	b2ad      	uxthmi	r5, r5
 80050cc:	6031      	str	r1, [r6, #0]
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	bf44      	itt	mi
 80050d2:	f043 0320 	orrmi.w	r3, r3, #32
 80050d6:	6023      	strmi	r3, [r4, #0]
 80050d8:	b11d      	cbz	r5, 80050e2 <_printf_i+0x19e>
 80050da:	2310      	movs	r3, #16
 80050dc:	e7ac      	b.n	8005038 <_printf_i+0xf4>
 80050de:	4827      	ldr	r0, [pc, #156]	@ (800517c <_printf_i+0x238>)
 80050e0:	e7e9      	b.n	80050b6 <_printf_i+0x172>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f023 0320 	bic.w	r3, r3, #32
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	e7f6      	b.n	80050da <_printf_i+0x196>
 80050ec:	4616      	mov	r6, r2
 80050ee:	e7bd      	b.n	800506c <_printf_i+0x128>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	6961      	ldr	r1, [r4, #20]
 80050f6:	1d18      	adds	r0, r3, #4
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	062e      	lsls	r6, r5, #24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0x1c0>
 8005100:	6019      	str	r1, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0x1c6>
 8005104:	0668      	lsls	r0, r5, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0x1bc>
 8005108:	8019      	strh	r1, [r3, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	4616      	mov	r6, r2
 8005110:	e7bc      	b.n	800508c <_printf_i+0x148>
 8005112:	6833      	ldr	r3, [r6, #0]
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	6032      	str	r2, [r6, #0]
 8005118:	681e      	ldr	r6, [r3, #0]
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	2100      	movs	r1, #0
 800511e:	4630      	mov	r0, r6
 8005120:	f7fb f85e 	bl	80001e0 <memchr>
 8005124:	b108      	cbz	r0, 800512a <_printf_i+0x1e6>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	6060      	str	r0, [r4, #4]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	2300      	movs	r3, #0
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005134:	e7aa      	b.n	800508c <_printf_i+0x148>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	4632      	mov	r2, r6
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	47d0      	blx	sl
 8005140:	3001      	adds	r0, #1
 8005142:	d0ad      	beq.n	80050a0 <_printf_i+0x15c>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	079b      	lsls	r3, r3, #30
 8005148:	d413      	bmi.n	8005172 <_printf_i+0x22e>
 800514a:	68e0      	ldr	r0, [r4, #12]
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	4298      	cmp	r0, r3
 8005150:	bfb8      	it	lt
 8005152:	4618      	movlt	r0, r3
 8005154:	e7a6      	b.n	80050a4 <_printf_i+0x160>
 8005156:	2301      	movs	r3, #1
 8005158:	4632      	mov	r2, r6
 800515a:	4649      	mov	r1, r9
 800515c:	4640      	mov	r0, r8
 800515e:	47d0      	blx	sl
 8005160:	3001      	adds	r0, #1
 8005162:	d09d      	beq.n	80050a0 <_printf_i+0x15c>
 8005164:	3501      	adds	r5, #1
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	9903      	ldr	r1, [sp, #12]
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	42ab      	cmp	r3, r5
 800516e:	dcf2      	bgt.n	8005156 <_printf_i+0x212>
 8005170:	e7eb      	b.n	800514a <_printf_i+0x206>
 8005172:	2500      	movs	r5, #0
 8005174:	f104 0619 	add.w	r6, r4, #25
 8005178:	e7f5      	b.n	8005166 <_printf_i+0x222>
 800517a:	bf00      	nop
 800517c:	08007711 	.word	0x08007711
 8005180:	08007722 	.word	0x08007722

08005184 <std>:
 8005184:	2300      	movs	r3, #0
 8005186:	b510      	push	{r4, lr}
 8005188:	4604      	mov	r4, r0
 800518a:	e9c0 3300 	strd	r3, r3, [r0]
 800518e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005192:	6083      	str	r3, [r0, #8]
 8005194:	8181      	strh	r1, [r0, #12]
 8005196:	6643      	str	r3, [r0, #100]	@ 0x64
 8005198:	81c2      	strh	r2, [r0, #14]
 800519a:	6183      	str	r3, [r0, #24]
 800519c:	4619      	mov	r1, r3
 800519e:	2208      	movs	r2, #8
 80051a0:	305c      	adds	r0, #92	@ 0x5c
 80051a2:	f000 f914 	bl	80053ce <memset>
 80051a6:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <std+0x58>)
 80051a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <std+0x5c>)
 80051ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <std+0x60>)
 80051b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <std+0x64>)
 80051b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <std+0x68>)
 80051b8:	6224      	str	r4, [r4, #32]
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d006      	beq.n	80051cc <std+0x48>
 80051be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051c2:	4294      	cmp	r4, r2
 80051c4:	d002      	beq.n	80051cc <std+0x48>
 80051c6:	33d0      	adds	r3, #208	@ 0xd0
 80051c8:	429c      	cmp	r4, r3
 80051ca:	d105      	bne.n	80051d8 <std+0x54>
 80051cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d4:	f000 b988 	b.w	80054e8 <__retarget_lock_init_recursive>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	bf00      	nop
 80051dc:	08005349 	.word	0x08005349
 80051e0:	0800536b 	.word	0x0800536b
 80051e4:	080053a3 	.word	0x080053a3
 80051e8:	080053c7 	.word	0x080053c7
 80051ec:	200003fc 	.word	0x200003fc

080051f0 <stdio_exit_handler>:
 80051f0:	4a02      	ldr	r2, [pc, #8]	@ (80051fc <stdio_exit_handler+0xc>)
 80051f2:	4903      	ldr	r1, [pc, #12]	@ (8005200 <stdio_exit_handler+0x10>)
 80051f4:	4803      	ldr	r0, [pc, #12]	@ (8005204 <stdio_exit_handler+0x14>)
 80051f6:	f000 b869 	b.w	80052cc <_fwalk_sglue>
 80051fa:	bf00      	nop
 80051fc:	20000084 	.word	0x20000084
 8005200:	08006d19 	.word	0x08006d19
 8005204:	20000094 	.word	0x20000094

08005208 <cleanup_stdio>:
 8005208:	6841      	ldr	r1, [r0, #4]
 800520a:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <cleanup_stdio+0x34>)
 800520c:	4299      	cmp	r1, r3
 800520e:	b510      	push	{r4, lr}
 8005210:	4604      	mov	r4, r0
 8005212:	d001      	beq.n	8005218 <cleanup_stdio+0x10>
 8005214:	f001 fd80 	bl	8006d18 <_fflush_r>
 8005218:	68a1      	ldr	r1, [r4, #8]
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <cleanup_stdio+0x38>)
 800521c:	4299      	cmp	r1, r3
 800521e:	d002      	beq.n	8005226 <cleanup_stdio+0x1e>
 8005220:	4620      	mov	r0, r4
 8005222:	f001 fd79 	bl	8006d18 <_fflush_r>
 8005226:	68e1      	ldr	r1, [r4, #12]
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <cleanup_stdio+0x3c>)
 800522a:	4299      	cmp	r1, r3
 800522c:	d004      	beq.n	8005238 <cleanup_stdio+0x30>
 800522e:	4620      	mov	r0, r4
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f001 bd70 	b.w	8006d18 <_fflush_r>
 8005238:	bd10      	pop	{r4, pc}
 800523a:	bf00      	nop
 800523c:	200003fc 	.word	0x200003fc
 8005240:	20000464 	.word	0x20000464
 8005244:	200004cc 	.word	0x200004cc

08005248 <global_stdio_init.part.0>:
 8005248:	b510      	push	{r4, lr}
 800524a:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <global_stdio_init.part.0+0x30>)
 800524c:	4c0b      	ldr	r4, [pc, #44]	@ (800527c <global_stdio_init.part.0+0x34>)
 800524e:	4a0c      	ldr	r2, [pc, #48]	@ (8005280 <global_stdio_init.part.0+0x38>)
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	4620      	mov	r0, r4
 8005254:	2200      	movs	r2, #0
 8005256:	2104      	movs	r1, #4
 8005258:	f7ff ff94 	bl	8005184 <std>
 800525c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005260:	2201      	movs	r2, #1
 8005262:	2109      	movs	r1, #9
 8005264:	f7ff ff8e 	bl	8005184 <std>
 8005268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800526c:	2202      	movs	r2, #2
 800526e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005272:	2112      	movs	r1, #18
 8005274:	f7ff bf86 	b.w	8005184 <std>
 8005278:	20000534 	.word	0x20000534
 800527c:	200003fc 	.word	0x200003fc
 8005280:	080051f1 	.word	0x080051f1

08005284 <__sfp_lock_acquire>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__sfp_lock_acquire+0x8>)
 8005286:	f000 b930 	b.w	80054ea <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	2000053d 	.word	0x2000053d

08005290 <__sfp_lock_release>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__sfp_lock_release+0x8>)
 8005292:	f000 b92b 	b.w	80054ec <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	2000053d 	.word	0x2000053d

0800529c <__sinit>:
 800529c:	b510      	push	{r4, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	f7ff fff0 	bl	8005284 <__sfp_lock_acquire>
 80052a4:	6a23      	ldr	r3, [r4, #32]
 80052a6:	b11b      	cbz	r3, 80052b0 <__sinit+0x14>
 80052a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ac:	f7ff bff0 	b.w	8005290 <__sfp_lock_release>
 80052b0:	4b04      	ldr	r3, [pc, #16]	@ (80052c4 <__sinit+0x28>)
 80052b2:	6223      	str	r3, [r4, #32]
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <__sinit+0x2c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f5      	bne.n	80052a8 <__sinit+0xc>
 80052bc:	f7ff ffc4 	bl	8005248 <global_stdio_init.part.0>
 80052c0:	e7f2      	b.n	80052a8 <__sinit+0xc>
 80052c2:	bf00      	nop
 80052c4:	08005209 	.word	0x08005209
 80052c8:	20000534 	.word	0x20000534

080052cc <_fwalk_sglue>:
 80052cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d0:	4607      	mov	r7, r0
 80052d2:	4688      	mov	r8, r1
 80052d4:	4614      	mov	r4, r2
 80052d6:	2600      	movs	r6, #0
 80052d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052dc:	f1b9 0901 	subs.w	r9, r9, #1
 80052e0:	d505      	bpl.n	80052ee <_fwalk_sglue+0x22>
 80052e2:	6824      	ldr	r4, [r4, #0]
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	d1f7      	bne.n	80052d8 <_fwalk_sglue+0xc>
 80052e8:	4630      	mov	r0, r6
 80052ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d907      	bls.n	8005304 <_fwalk_sglue+0x38>
 80052f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052f8:	3301      	adds	r3, #1
 80052fa:	d003      	beq.n	8005304 <_fwalk_sglue+0x38>
 80052fc:	4629      	mov	r1, r5
 80052fe:	4638      	mov	r0, r7
 8005300:	47c0      	blx	r8
 8005302:	4306      	orrs	r6, r0
 8005304:	3568      	adds	r5, #104	@ 0x68
 8005306:	e7e9      	b.n	80052dc <_fwalk_sglue+0x10>

08005308 <siprintf>:
 8005308:	b40e      	push	{r1, r2, r3}
 800530a:	b500      	push	{lr}
 800530c:	b09c      	sub	sp, #112	@ 0x70
 800530e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005310:	9002      	str	r0, [sp, #8]
 8005312:	9006      	str	r0, [sp, #24]
 8005314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005318:	4809      	ldr	r0, [pc, #36]	@ (8005340 <siprintf+0x38>)
 800531a:	9107      	str	r1, [sp, #28]
 800531c:	9104      	str	r1, [sp, #16]
 800531e:	4909      	ldr	r1, [pc, #36]	@ (8005344 <siprintf+0x3c>)
 8005320:	f853 2b04 	ldr.w	r2, [r3], #4
 8005324:	9105      	str	r1, [sp, #20]
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	a902      	add	r1, sp, #8
 800532c:	f001 fb74 	bl	8006a18 <_svfiprintf_r>
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	b01c      	add	sp, #112	@ 0x70
 8005338:	f85d eb04 	ldr.w	lr, [sp], #4
 800533c:	b003      	add	sp, #12
 800533e:	4770      	bx	lr
 8005340:	20000090 	.word	0x20000090
 8005344:	ffff0208 	.word	0xffff0208

08005348 <__sread>:
 8005348:	b510      	push	{r4, lr}
 800534a:	460c      	mov	r4, r1
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	f000 f86c 	bl	800542c <_read_r>
 8005354:	2800      	cmp	r0, #0
 8005356:	bfab      	itete	ge
 8005358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800535a:	89a3      	ldrhlt	r3, [r4, #12]
 800535c:	181b      	addge	r3, r3, r0
 800535e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005362:	bfac      	ite	ge
 8005364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005366:	81a3      	strhlt	r3, [r4, #12]
 8005368:	bd10      	pop	{r4, pc}

0800536a <__swrite>:
 800536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	461f      	mov	r7, r3
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	05db      	lsls	r3, r3, #23
 8005374:	4605      	mov	r5, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4616      	mov	r6, r2
 800537a:	d505      	bpl.n	8005388 <__swrite+0x1e>
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	2302      	movs	r3, #2
 8005382:	2200      	movs	r2, #0
 8005384:	f000 f840 	bl	8005408 <_lseek_r>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	4632      	mov	r2, r6
 8005396:	463b      	mov	r3, r7
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	f000 b867 	b.w	8005470 <_write_r>

080053a2 <__sseek>:
 80053a2:	b510      	push	{r4, lr}
 80053a4:	460c      	mov	r4, r1
 80053a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053aa:	f000 f82d 	bl	8005408 <_lseek_r>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	bf15      	itete	ne
 80053b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053be:	81a3      	strheq	r3, [r4, #12]
 80053c0:	bf18      	it	ne
 80053c2:	81a3      	strhne	r3, [r4, #12]
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <__sclose>:
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 b80d 	b.w	80053e8 <_close_r>

080053ce <memset>:
 80053ce:	4402      	add	r2, r0
 80053d0:	4603      	mov	r3, r0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d100      	bne.n	80053d8 <memset+0xa>
 80053d6:	4770      	bx	lr
 80053d8:	f803 1b01 	strb.w	r1, [r3], #1
 80053dc:	e7f9      	b.n	80053d2 <memset+0x4>
	...

080053e0 <_localeconv_r>:
 80053e0:	4800      	ldr	r0, [pc, #0]	@ (80053e4 <_localeconv_r+0x4>)
 80053e2:	4770      	bx	lr
 80053e4:	200001d0 	.word	0x200001d0

080053e8 <_close_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d06      	ldr	r5, [pc, #24]	@ (8005404 <_close_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fc fd2a 	bl	8001e4c <_close>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_close_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_close_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20000538 	.word	0x20000538

08005408 <_lseek_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d07      	ldr	r5, [pc, #28]	@ (8005428 <_lseek_r+0x20>)
 800540c:	4604      	mov	r4, r0
 800540e:	4608      	mov	r0, r1
 8005410:	4611      	mov	r1, r2
 8005412:	2200      	movs	r2, #0
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7fc fd3f 	bl	8001e9a <_lseek>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_lseek_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_lseek_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	20000538 	.word	0x20000538

0800542c <_read_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4d07      	ldr	r5, [pc, #28]	@ (800544c <_read_r+0x20>)
 8005430:	4604      	mov	r4, r0
 8005432:	4608      	mov	r0, r1
 8005434:	4611      	mov	r1, r2
 8005436:	2200      	movs	r2, #0
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fc fccd 	bl	8001dda <_read>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_read_r+0x1e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_read_r+0x1e>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20000538 	.word	0x20000538

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	@ (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fc fd2a 	bl	8001eb4 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000538 	.word	0x20000538

08005470 <_write_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	@ (8005490 <_write_r+0x20>)
 8005474:	4604      	mov	r4, r0
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	2200      	movs	r2, #0
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fc fcc8 	bl	8001e14 <_write>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_write_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_write_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20000538 	.word	0x20000538

08005494 <__errno>:
 8005494:	4b01      	ldr	r3, [pc, #4]	@ (800549c <__errno+0x8>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000090 	.word	0x20000090

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <__libc_init_array+0x38>)
 80054a4:	4c0d      	ldr	r4, [pc, #52]	@ (80054dc <__libc_init_array+0x3c>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	2600      	movs	r6, #0
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	@ (80054e0 <__libc_init_array+0x40>)
 80054b2:	4c0c      	ldr	r4, [pc, #48]	@ (80054e4 <__libc_init_array+0x44>)
 80054b4:	f001 ffa0 	bl	80073f8 <_init>
 80054b8:	1b64      	subs	r4, r4, r5
 80054ba:	10a4      	asrs	r4, r4, #2
 80054bc:	2600      	movs	r6, #0
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	08007a64 	.word	0x08007a64
 80054dc:	08007a64 	.word	0x08007a64
 80054e0:	08007a64 	.word	0x08007a64
 80054e4:	08007a68 	.word	0x08007a68

080054e8 <__retarget_lock_init_recursive>:
 80054e8:	4770      	bx	lr

080054ea <__retarget_lock_acquire_recursive>:
 80054ea:	4770      	bx	lr

080054ec <__retarget_lock_release_recursive>:
 80054ec:	4770      	bx	lr
	...

080054f0 <__assert_func>:
 80054f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054f2:	4614      	mov	r4, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b09      	ldr	r3, [pc, #36]	@ (800551c <__assert_func+0x2c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4605      	mov	r5, r0
 80054fc:	68d8      	ldr	r0, [r3, #12]
 80054fe:	b954      	cbnz	r4, 8005516 <__assert_func+0x26>
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <__assert_func+0x30>)
 8005502:	461c      	mov	r4, r3
 8005504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005508:	9100      	str	r1, [sp, #0]
 800550a:	462b      	mov	r3, r5
 800550c:	4905      	ldr	r1, [pc, #20]	@ (8005524 <__assert_func+0x34>)
 800550e:	f001 fc2b 	bl	8006d68 <fiprintf>
 8005512:	f001 fc63 	bl	8006ddc <abort>
 8005516:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <__assert_func+0x38>)
 8005518:	e7f4      	b.n	8005504 <__assert_func+0x14>
 800551a:	bf00      	nop
 800551c:	20000090 	.word	0x20000090
 8005520:	0800776e 	.word	0x0800776e
 8005524:	08007740 	.word	0x08007740
 8005528:	08007733 	.word	0x08007733

0800552c <quorem>:
 800552c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	6903      	ldr	r3, [r0, #16]
 8005532:	690c      	ldr	r4, [r1, #16]
 8005534:	42a3      	cmp	r3, r4
 8005536:	4607      	mov	r7, r0
 8005538:	db7e      	blt.n	8005638 <quorem+0x10c>
 800553a:	3c01      	subs	r4, #1
 800553c:	f101 0814 	add.w	r8, r1, #20
 8005540:	00a3      	lsls	r3, r4, #2
 8005542:	f100 0514 	add.w	r5, r0, #20
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005556:	3301      	adds	r3, #1
 8005558:	429a      	cmp	r2, r3
 800555a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800555e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005562:	d32e      	bcc.n	80055c2 <quorem+0x96>
 8005564:	f04f 0a00 	mov.w	sl, #0
 8005568:	46c4      	mov	ip, r8
 800556a:	46ae      	mov	lr, r5
 800556c:	46d3      	mov	fp, sl
 800556e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005572:	b298      	uxth	r0, r3
 8005574:	fb06 a000 	mla	r0, r6, r0, sl
 8005578:	0c02      	lsrs	r2, r0, #16
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	fb06 2303 	mla	r3, r6, r3, r2
 8005580:	f8de 2000 	ldr.w	r2, [lr]
 8005584:	b280      	uxth	r0, r0
 8005586:	b292      	uxth	r2, r2
 8005588:	1a12      	subs	r2, r2, r0
 800558a:	445a      	add	r2, fp
 800558c:	f8de 0000 	ldr.w	r0, [lr]
 8005590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005594:	b29b      	uxth	r3, r3
 8005596:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800559a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800559e:	b292      	uxth	r2, r2
 80055a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055a4:	45e1      	cmp	r9, ip
 80055a6:	f84e 2b04 	str.w	r2, [lr], #4
 80055aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055ae:	d2de      	bcs.n	800556e <quorem+0x42>
 80055b0:	9b00      	ldr	r3, [sp, #0]
 80055b2:	58eb      	ldr	r3, [r5, r3]
 80055b4:	b92b      	cbnz	r3, 80055c2 <quorem+0x96>
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	3b04      	subs	r3, #4
 80055ba:	429d      	cmp	r5, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	d32f      	bcc.n	8005620 <quorem+0xf4>
 80055c0:	613c      	str	r4, [r7, #16]
 80055c2:	4638      	mov	r0, r7
 80055c4:	f001 f8c4 	bl	8006750 <__mcmp>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	db25      	blt.n	8005618 <quorem+0xec>
 80055cc:	4629      	mov	r1, r5
 80055ce:	2000      	movs	r0, #0
 80055d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055d4:	f8d1 c000 	ldr.w	ip, [r1]
 80055d8:	fa1f fe82 	uxth.w	lr, r2
 80055dc:	fa1f f38c 	uxth.w	r3, ip
 80055e0:	eba3 030e 	sub.w	r3, r3, lr
 80055e4:	4403      	add	r3, r0
 80055e6:	0c12      	lsrs	r2, r2, #16
 80055e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055f6:	45c1      	cmp	r9, r8
 80055f8:	f841 3b04 	str.w	r3, [r1], #4
 80055fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005600:	d2e6      	bcs.n	80055d0 <quorem+0xa4>
 8005602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800560a:	b922      	cbnz	r2, 8005616 <quorem+0xea>
 800560c:	3b04      	subs	r3, #4
 800560e:	429d      	cmp	r5, r3
 8005610:	461a      	mov	r2, r3
 8005612:	d30b      	bcc.n	800562c <quorem+0x100>
 8005614:	613c      	str	r4, [r7, #16]
 8005616:	3601      	adds	r6, #1
 8005618:	4630      	mov	r0, r6
 800561a:	b003      	add	sp, #12
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	3b04      	subs	r3, #4
 8005624:	2a00      	cmp	r2, #0
 8005626:	d1cb      	bne.n	80055c0 <quorem+0x94>
 8005628:	3c01      	subs	r4, #1
 800562a:	e7c6      	b.n	80055ba <quorem+0x8e>
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	3b04      	subs	r3, #4
 8005630:	2a00      	cmp	r2, #0
 8005632:	d1ef      	bne.n	8005614 <quorem+0xe8>
 8005634:	3c01      	subs	r4, #1
 8005636:	e7ea      	b.n	800560e <quorem+0xe2>
 8005638:	2000      	movs	r0, #0
 800563a:	e7ee      	b.n	800561a <quorem+0xee>
 800563c:	0000      	movs	r0, r0
	...

08005640 <_dtoa_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	69c7      	ldr	r7, [r0, #28]
 8005646:	b099      	sub	sp, #100	@ 0x64
 8005648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800564c:	ec55 4b10 	vmov	r4, r5, d0
 8005650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005652:	9109      	str	r1, [sp, #36]	@ 0x24
 8005654:	4683      	mov	fp, r0
 8005656:	920e      	str	r2, [sp, #56]	@ 0x38
 8005658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800565a:	b97f      	cbnz	r7, 800567c <_dtoa_r+0x3c>
 800565c:	2010      	movs	r0, #16
 800565e:	f7ff f845 	bl	80046ec <malloc>
 8005662:	4602      	mov	r2, r0
 8005664:	f8cb 001c 	str.w	r0, [fp, #28]
 8005668:	b920      	cbnz	r0, 8005674 <_dtoa_r+0x34>
 800566a:	4ba7      	ldr	r3, [pc, #668]	@ (8005908 <_dtoa_r+0x2c8>)
 800566c:	21ef      	movs	r1, #239	@ 0xef
 800566e:	48a7      	ldr	r0, [pc, #668]	@ (800590c <_dtoa_r+0x2cc>)
 8005670:	f7ff ff3e 	bl	80054f0 <__assert_func>
 8005674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005678:	6007      	str	r7, [r0, #0]
 800567a:	60c7      	str	r7, [r0, #12]
 800567c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	b159      	cbz	r1, 800569c <_dtoa_r+0x5c>
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	604a      	str	r2, [r1, #4]
 8005688:	2301      	movs	r3, #1
 800568a:	4093      	lsls	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fe24 	bl	80062dc <_Bfree>
 8005694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	1e2b      	subs	r3, r5, #0
 800569e:	bfb9      	ittee	lt
 80056a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056a4:	9303      	strlt	r3, [sp, #12]
 80056a6:	2300      	movge	r3, #0
 80056a8:	6033      	strge	r3, [r6, #0]
 80056aa:	9f03      	ldr	r7, [sp, #12]
 80056ac:	4b98      	ldr	r3, [pc, #608]	@ (8005910 <_dtoa_r+0x2d0>)
 80056ae:	bfbc      	itt	lt
 80056b0:	2201      	movlt	r2, #1
 80056b2:	6032      	strlt	r2, [r6, #0]
 80056b4:	43bb      	bics	r3, r7
 80056b6:	d112      	bne.n	80056de <_dtoa_r+0x9e>
 80056b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056c4:	4323      	orrs	r3, r4
 80056c6:	f000 854d 	beq.w	8006164 <_dtoa_r+0xb24>
 80056ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005924 <_dtoa_r+0x2e4>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 854f 	beq.w	8006174 <_dtoa_r+0xb34>
 80056d6:	f10a 0303 	add.w	r3, sl, #3
 80056da:	f000 bd49 	b.w	8006170 <_dtoa_r+0xb30>
 80056de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	ec51 0b17 	vmov	r0, r1, d7
 80056e8:	2300      	movs	r3, #0
 80056ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80056ee:	f7fb f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80056f2:	4680      	mov	r8, r0
 80056f4:	b158      	cbz	r0, 800570e <_dtoa_r+0xce>
 80056f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056f8:	2301      	movs	r3, #1
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056fe:	b113      	cbz	r3, 8005706 <_dtoa_r+0xc6>
 8005700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005702:	4b84      	ldr	r3, [pc, #528]	@ (8005914 <_dtoa_r+0x2d4>)
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005928 <_dtoa_r+0x2e8>
 800570a:	f000 bd33 	b.w	8006174 <_dtoa_r+0xb34>
 800570e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005712:	aa16      	add	r2, sp, #88	@ 0x58
 8005714:	a917      	add	r1, sp, #92	@ 0x5c
 8005716:	4658      	mov	r0, fp
 8005718:	f001 f8ca 	bl	80068b0 <__d2b>
 800571c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005720:	4681      	mov	r9, r0
 8005722:	2e00      	cmp	r6, #0
 8005724:	d077      	beq.n	8005816 <_dtoa_r+0x1d6>
 8005726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800572c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800573c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005740:	4619      	mov	r1, r3
 8005742:	2200      	movs	r2, #0
 8005744:	4b74      	ldr	r3, [pc, #464]	@ (8005918 <_dtoa_r+0x2d8>)
 8005746:	f7fa fda7 	bl	8000298 <__aeabi_dsub>
 800574a:	a369      	add	r3, pc, #420	@ (adr r3, 80058f0 <_dtoa_r+0x2b0>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa ff5a 	bl	8000608 <__aeabi_dmul>
 8005754:	a368      	add	r3, pc, #416	@ (adr r3, 80058f8 <_dtoa_r+0x2b8>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd9f 	bl	800029c <__adddf3>
 800575e:	4604      	mov	r4, r0
 8005760:	4630      	mov	r0, r6
 8005762:	460d      	mov	r5, r1
 8005764:	f7fa fee6 	bl	8000534 <__aeabi_i2d>
 8005768:	a365      	add	r3, pc, #404	@ (adr r3, 8005900 <_dtoa_r+0x2c0>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fa ff4b 	bl	8000608 <__aeabi_dmul>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fa fd8f 	bl	800029c <__adddf3>
 800577e:	4604      	mov	r4, r0
 8005780:	460d      	mov	r5, r1
 8005782:	f7fb f9f1 	bl	8000b68 <__aeabi_d2iz>
 8005786:	2200      	movs	r2, #0
 8005788:	4607      	mov	r7, r0
 800578a:	2300      	movs	r3, #0
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fb f9ac 	bl	8000aec <__aeabi_dcmplt>
 8005794:	b140      	cbz	r0, 80057a8 <_dtoa_r+0x168>
 8005796:	4638      	mov	r0, r7
 8005798:	f7fa fecc 	bl	8000534 <__aeabi_i2d>
 800579c:	4622      	mov	r2, r4
 800579e:	462b      	mov	r3, r5
 80057a0:	f7fb f99a 	bl	8000ad8 <__aeabi_dcmpeq>
 80057a4:	b900      	cbnz	r0, 80057a8 <_dtoa_r+0x168>
 80057a6:	3f01      	subs	r7, #1
 80057a8:	2f16      	cmp	r7, #22
 80057aa:	d851      	bhi.n	8005850 <_dtoa_r+0x210>
 80057ac:	4b5b      	ldr	r3, [pc, #364]	@ (800591c <_dtoa_r+0x2dc>)
 80057ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ba:	f7fb f997 	bl	8000aec <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d048      	beq.n	8005854 <_dtoa_r+0x214>
 80057c2:	3f01      	subs	r7, #1
 80057c4:	2300      	movs	r3, #0
 80057c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80057c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057ca:	1b9b      	subs	r3, r3, r6
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	bf44      	itt	mi
 80057d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80057d4:	2300      	movmi	r3, #0
 80057d6:	9208      	str	r2, [sp, #32]
 80057d8:	bf54      	ite	pl
 80057da:	f04f 0800 	movpl.w	r8, #0
 80057de:	9308      	strmi	r3, [sp, #32]
 80057e0:	2f00      	cmp	r7, #0
 80057e2:	db39      	blt.n	8005858 <_dtoa_r+0x218>
 80057e4:	9b08      	ldr	r3, [sp, #32]
 80057e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80057e8:	443b      	add	r3, r7
 80057ea:	9308      	str	r3, [sp, #32]
 80057ec:	2300      	movs	r3, #0
 80057ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80057f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f2:	2b09      	cmp	r3, #9
 80057f4:	d864      	bhi.n	80058c0 <_dtoa_r+0x280>
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	bfc4      	itt	gt
 80057fa:	3b04      	subgt	r3, #4
 80057fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80057fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005800:	f1a3 0302 	sub.w	r3, r3, #2
 8005804:	bfcc      	ite	gt
 8005806:	2400      	movgt	r4, #0
 8005808:	2401      	movle	r4, #1
 800580a:	2b03      	cmp	r3, #3
 800580c:	d863      	bhi.n	80058d6 <_dtoa_r+0x296>
 800580e:	e8df f003 	tbb	[pc, r3]
 8005812:	372a      	.short	0x372a
 8005814:	5535      	.short	0x5535
 8005816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800581a:	441e      	add	r6, r3
 800581c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005820:	2b20      	cmp	r3, #32
 8005822:	bfc1      	itttt	gt
 8005824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005828:	409f      	lslgt	r7, r3
 800582a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800582e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005832:	bfd6      	itet	le
 8005834:	f1c3 0320 	rsble	r3, r3, #32
 8005838:	ea47 0003 	orrgt.w	r0, r7, r3
 800583c:	fa04 f003 	lslle.w	r0, r4, r3
 8005840:	f7fa fe68 	bl	8000514 <__aeabi_ui2d>
 8005844:	2201      	movs	r2, #1
 8005846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800584a:	3e01      	subs	r6, #1
 800584c:	9214      	str	r2, [sp, #80]	@ 0x50
 800584e:	e777      	b.n	8005740 <_dtoa_r+0x100>
 8005850:	2301      	movs	r3, #1
 8005852:	e7b8      	b.n	80057c6 <_dtoa_r+0x186>
 8005854:	9012      	str	r0, [sp, #72]	@ 0x48
 8005856:	e7b7      	b.n	80057c8 <_dtoa_r+0x188>
 8005858:	427b      	negs	r3, r7
 800585a:	930a      	str	r3, [sp, #40]	@ 0x28
 800585c:	2300      	movs	r3, #0
 800585e:	eba8 0807 	sub.w	r8, r8, r7
 8005862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005864:	e7c4      	b.n	80057f0 <_dtoa_r+0x1b0>
 8005866:	2300      	movs	r3, #0
 8005868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800586a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	dc35      	bgt.n	80058dc <_dtoa_r+0x29c>
 8005870:	2301      	movs	r3, #1
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	9307      	str	r3, [sp, #28]
 8005876:	461a      	mov	r2, r3
 8005878:	920e      	str	r2, [sp, #56]	@ 0x38
 800587a:	e00b      	b.n	8005894 <_dtoa_r+0x254>
 800587c:	2301      	movs	r3, #1
 800587e:	e7f3      	b.n	8005868 <_dtoa_r+0x228>
 8005880:	2300      	movs	r3, #0
 8005882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	3301      	adds	r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	bfb8      	it	lt
 8005892:	2301      	movlt	r3, #1
 8005894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005898:	2100      	movs	r1, #0
 800589a:	2204      	movs	r2, #4
 800589c:	f102 0514 	add.w	r5, r2, #20
 80058a0:	429d      	cmp	r5, r3
 80058a2:	d91f      	bls.n	80058e4 <_dtoa_r+0x2a4>
 80058a4:	6041      	str	r1, [r0, #4]
 80058a6:	4658      	mov	r0, fp
 80058a8:	f000 fcd8 	bl	800625c <_Balloc>
 80058ac:	4682      	mov	sl, r0
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d13c      	bne.n	800592c <_dtoa_r+0x2ec>
 80058b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005920 <_dtoa_r+0x2e0>)
 80058b4:	4602      	mov	r2, r0
 80058b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058ba:	e6d8      	b.n	800566e <_dtoa_r+0x2e>
 80058bc:	2301      	movs	r3, #1
 80058be:	e7e0      	b.n	8005882 <_dtoa_r+0x242>
 80058c0:	2401      	movs	r4, #1
 80058c2:	2300      	movs	r3, #0
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	9307      	str	r3, [sp, #28]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2312      	movs	r3, #18
 80058d4:	e7d0      	b.n	8005878 <_dtoa_r+0x238>
 80058d6:	2301      	movs	r3, #1
 80058d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058da:	e7f5      	b.n	80058c8 <_dtoa_r+0x288>
 80058dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	e7d7      	b.n	8005894 <_dtoa_r+0x254>
 80058e4:	3101      	adds	r1, #1
 80058e6:	0052      	lsls	r2, r2, #1
 80058e8:	e7d8      	b.n	800589c <_dtoa_r+0x25c>
 80058ea:	bf00      	nop
 80058ec:	f3af 8000 	nop.w
 80058f0:	636f4361 	.word	0x636f4361
 80058f4:	3fd287a7 	.word	0x3fd287a7
 80058f8:	8b60c8b3 	.word	0x8b60c8b3
 80058fc:	3fc68a28 	.word	0x3fc68a28
 8005900:	509f79fb 	.word	0x509f79fb
 8005904:	3fd34413 	.word	0x3fd34413
 8005908:	08007690 	.word	0x08007690
 800590c:	0800777c 	.word	0x0800777c
 8005910:	7ff00000 	.word	0x7ff00000
 8005914:	08007710 	.word	0x08007710
 8005918:	3ff80000 	.word	0x3ff80000
 800591c:	08007878 	.word	0x08007878
 8005920:	080077d4 	.word	0x080077d4
 8005924:	08007778 	.word	0x08007778
 8005928:	0800770f 	.word	0x0800770f
 800592c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005930:	6018      	str	r0, [r3, #0]
 8005932:	9b07      	ldr	r3, [sp, #28]
 8005934:	2b0e      	cmp	r3, #14
 8005936:	f200 80a4 	bhi.w	8005a82 <_dtoa_r+0x442>
 800593a:	2c00      	cmp	r4, #0
 800593c:	f000 80a1 	beq.w	8005a82 <_dtoa_r+0x442>
 8005940:	2f00      	cmp	r7, #0
 8005942:	dd33      	ble.n	80059ac <_dtoa_r+0x36c>
 8005944:	4bad      	ldr	r3, [pc, #692]	@ (8005bfc <_dtoa_r+0x5bc>)
 8005946:	f007 020f 	and.w	r2, r7, #15
 800594a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594e:	ed93 7b00 	vldr	d7, [r3]
 8005952:	05f8      	lsls	r0, r7, #23
 8005954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800595c:	d516      	bpl.n	800598c <_dtoa_r+0x34c>
 800595e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c00 <_dtoa_r+0x5c0>)
 8005960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005968:	f7fa ff78 	bl	800085c <__aeabi_ddiv>
 800596c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005970:	f004 040f 	and.w	r4, r4, #15
 8005974:	2603      	movs	r6, #3
 8005976:	4da2      	ldr	r5, [pc, #648]	@ (8005c00 <_dtoa_r+0x5c0>)
 8005978:	b954      	cbnz	r4, 8005990 <_dtoa_r+0x350>
 800597a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800597e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005982:	f7fa ff6b 	bl	800085c <__aeabi_ddiv>
 8005986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800598a:	e028      	b.n	80059de <_dtoa_r+0x39e>
 800598c:	2602      	movs	r6, #2
 800598e:	e7f2      	b.n	8005976 <_dtoa_r+0x336>
 8005990:	07e1      	lsls	r1, r4, #31
 8005992:	d508      	bpl.n	80059a6 <_dtoa_r+0x366>
 8005994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800599c:	f7fa fe34 	bl	8000608 <__aeabi_dmul>
 80059a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059a4:	3601      	adds	r6, #1
 80059a6:	1064      	asrs	r4, r4, #1
 80059a8:	3508      	adds	r5, #8
 80059aa:	e7e5      	b.n	8005978 <_dtoa_r+0x338>
 80059ac:	f000 80d2 	beq.w	8005b54 <_dtoa_r+0x514>
 80059b0:	427c      	negs	r4, r7
 80059b2:	4b92      	ldr	r3, [pc, #584]	@ (8005bfc <_dtoa_r+0x5bc>)
 80059b4:	4d92      	ldr	r5, [pc, #584]	@ (8005c00 <_dtoa_r+0x5c0>)
 80059b6:	f004 020f 	and.w	r2, r4, #15
 80059ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c6:	f7fa fe1f 	bl	8000608 <__aeabi_dmul>
 80059ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ce:	1124      	asrs	r4, r4, #4
 80059d0:	2300      	movs	r3, #0
 80059d2:	2602      	movs	r6, #2
 80059d4:	2c00      	cmp	r4, #0
 80059d6:	f040 80b2 	bne.w	8005b3e <_dtoa_r+0x4fe>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d3      	bne.n	8005986 <_dtoa_r+0x346>
 80059de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80059e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80b7 	beq.w	8005b58 <_dtoa_r+0x518>
 80059ea:	4b86      	ldr	r3, [pc, #536]	@ (8005c04 <_dtoa_r+0x5c4>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fb f87b 	bl	8000aec <__aeabi_dcmplt>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f000 80ae 	beq.w	8005b58 <_dtoa_r+0x518>
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80aa 	beq.w	8005b58 <_dtoa_r+0x518>
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dd37      	ble.n	8005a7a <_dtoa_r+0x43a>
 8005a0a:	1e7b      	subs	r3, r7, #1
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4b7d      	ldr	r3, [pc, #500]	@ (8005c08 <_dtoa_r+0x5c8>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fdf7 	bl	8000608 <__aeabi_dmul>
 8005a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1e:	9c00      	ldr	r4, [sp, #0]
 8005a20:	3601      	adds	r6, #1
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7fa fd86 	bl	8000534 <__aeabi_i2d>
 8005a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	4b76      	ldr	r3, [pc, #472]	@ (8005c0c <_dtoa_r+0x5cc>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	f7fa fc32 	bl	800029c <__adddf3>
 8005a38:	4605      	mov	r5, r0
 8005a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	f040 808d 	bne.w	8005b5e <_dtoa_r+0x51e>
 8005a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a48:	4b71      	ldr	r3, [pc, #452]	@ (8005c10 <_dtoa_r+0x5d0>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f7fa fc24 	bl	8000298 <__aeabi_dsub>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a58:	462a      	mov	r2, r5
 8005a5a:	4633      	mov	r3, r6
 8005a5c:	f7fb f864 	bl	8000b28 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	f040 828b 	bne.w	8005f7c <_dtoa_r+0x93c>
 8005a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a70:	f7fb f83c 	bl	8000aec <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f040 8128 	bne.w	8005cca <_dtoa_r+0x68a>
 8005a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f2c0 815a 	blt.w	8005d3e <_dtoa_r+0x6fe>
 8005a8a:	2f0e      	cmp	r7, #14
 8005a8c:	f300 8157 	bgt.w	8005d3e <_dtoa_r+0x6fe>
 8005a90:	4b5a      	ldr	r3, [pc, #360]	@ (8005bfc <_dtoa_r+0x5bc>)
 8005a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a96:	ed93 7b00 	vldr	d7, [r3]
 8005a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	ed8d 7b00 	vstr	d7, [sp]
 8005aa2:	da03      	bge.n	8005aac <_dtoa_r+0x46c>
 8005aa4:	9b07      	ldr	r3, [sp, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f340 8101 	ble.w	8005cae <_dtoa_r+0x66e>
 8005aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ab0:	4656      	mov	r6, sl
 8005ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fecf 	bl	800085c <__aeabi_ddiv>
 8005abe:	f7fb f853 	bl	8000b68 <__aeabi_d2iz>
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	f7fa fd36 	bl	8000534 <__aeabi_i2d>
 8005ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005acc:	f7fa fd9c 	bl	8000608 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005adc:	f7fa fbdc 	bl	8000298 <__aeabi_dsub>
 8005ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8005ae4:	9d07      	ldr	r5, [sp, #28]
 8005ae6:	eba6 040a 	sub.w	r4, r6, sl
 8005aea:	42a5      	cmp	r5, r4
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	f040 8117 	bne.w	8005d22 <_dtoa_r+0x6e2>
 8005af4:	f7fa fbd2 	bl	800029c <__adddf3>
 8005af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afc:	4604      	mov	r4, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	f7fb f812 	bl	8000b28 <__aeabi_dcmpgt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 80f9 	bne.w	8005cfc <_dtoa_r+0x6bc>
 8005b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b16:	b118      	cbz	r0, 8005b20 <_dtoa_r+0x4e0>
 8005b18:	f018 0f01 	tst.w	r8, #1
 8005b1c:	f040 80ee 	bne.w	8005cfc <_dtoa_r+0x6bc>
 8005b20:	4649      	mov	r1, r9
 8005b22:	4658      	mov	r0, fp
 8005b24:	f000 fbda 	bl	80062dc <_Bfree>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	7033      	strb	r3, [r6, #0]
 8005b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b2e:	3701      	adds	r7, #1
 8005b30:	601f      	str	r7, [r3, #0]
 8005b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 831d 	beq.w	8006174 <_dtoa_r+0xb34>
 8005b3a:	601e      	str	r6, [r3, #0]
 8005b3c:	e31a      	b.n	8006174 <_dtoa_r+0xb34>
 8005b3e:	07e2      	lsls	r2, r4, #31
 8005b40:	d505      	bpl.n	8005b4e <_dtoa_r+0x50e>
 8005b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b46:	f7fa fd5f 	bl	8000608 <__aeabi_dmul>
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	1064      	asrs	r4, r4, #1
 8005b50:	3508      	adds	r5, #8
 8005b52:	e73f      	b.n	80059d4 <_dtoa_r+0x394>
 8005b54:	2602      	movs	r6, #2
 8005b56:	e742      	b.n	80059de <_dtoa_r+0x39e>
 8005b58:	9c07      	ldr	r4, [sp, #28]
 8005b5a:	9704      	str	r7, [sp, #16]
 8005b5c:	e761      	b.n	8005a22 <_dtoa_r+0x3e2>
 8005b5e:	4b27      	ldr	r3, [pc, #156]	@ (8005bfc <_dtoa_r+0x5bc>)
 8005b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b6a:	4454      	add	r4, sl
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d053      	beq.n	8005c18 <_dtoa_r+0x5d8>
 8005b70:	4928      	ldr	r1, [pc, #160]	@ (8005c14 <_dtoa_r+0x5d4>)
 8005b72:	2000      	movs	r0, #0
 8005b74:	f7fa fe72 	bl	800085c <__aeabi_ddiv>
 8005b78:	4633      	mov	r3, r6
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	f7fa fb8c 	bl	8000298 <__aeabi_dsub>
 8005b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b84:	4656      	mov	r6, sl
 8005b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b8a:	f7fa ffed 	bl	8000b68 <__aeabi_d2iz>
 8005b8e:	4605      	mov	r5, r0
 8005b90:	f7fa fcd0 	bl	8000534 <__aeabi_i2d>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9c:	f7fa fb7c 	bl	8000298 <__aeabi_dsub>
 8005ba0:	3530      	adds	r5, #48	@ 0x30
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005baa:	f806 5b01 	strb.w	r5, [r6], #1
 8005bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bb2:	f7fa ff9b 	bl	8000aec <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d171      	bne.n	8005c9e <_dtoa_r+0x65e>
 8005bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bbe:	4911      	ldr	r1, [pc, #68]	@ (8005c04 <_dtoa_r+0x5c4>)
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fa fb69 	bl	8000298 <__aeabi_dsub>
 8005bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bca:	f7fa ff8f 	bl	8000aec <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f040 8095 	bne.w	8005cfe <_dtoa_r+0x6be>
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	f43f af50 	beq.w	8005a7a <_dtoa_r+0x43a>
 8005bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bde:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <_dtoa_r+0x5c8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	f7fa fd11 	bl	8000608 <__aeabi_dmul>
 8005be6:	4b08      	ldr	r3, [pc, #32]	@ (8005c08 <_dtoa_r+0x5c8>)
 8005be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bec:	2200      	movs	r2, #0
 8005bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf2:	f7fa fd09 	bl	8000608 <__aeabi_dmul>
 8005bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bfa:	e7c4      	b.n	8005b86 <_dtoa_r+0x546>
 8005bfc:	08007878 	.word	0x08007878
 8005c00:	08007850 	.word	0x08007850
 8005c04:	3ff00000 	.word	0x3ff00000
 8005c08:	40240000 	.word	0x40240000
 8005c0c:	401c0000 	.word	0x401c0000
 8005c10:	40140000 	.word	0x40140000
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f7fa fcf4 	bl	8000608 <__aeabi_dmul>
 8005c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c26:	4656      	mov	r6, sl
 8005c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2c:	f7fa ff9c 	bl	8000b68 <__aeabi_d2iz>
 8005c30:	4605      	mov	r5, r0
 8005c32:	f7fa fc7f 	bl	8000534 <__aeabi_i2d>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3e:	f7fa fb2b 	bl	8000298 <__aeabi_dsub>
 8005c42:	3530      	adds	r5, #48	@ 0x30
 8005c44:	f806 5b01 	strb.w	r5, [r6], #1
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	d124      	bne.n	8005ca2 <_dtoa_r+0x662>
 8005c58:	4bac      	ldr	r3, [pc, #688]	@ (8005f0c <_dtoa_r+0x8cc>)
 8005c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c5e:	f7fa fb1d 	bl	800029c <__adddf3>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6a:	f7fa ff5d 	bl	8000b28 <__aeabi_dcmpgt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d145      	bne.n	8005cfe <_dtoa_r+0x6be>
 8005c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c76:	49a5      	ldr	r1, [pc, #660]	@ (8005f0c <_dtoa_r+0x8cc>)
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f7fa fb0d 	bl	8000298 <__aeabi_dsub>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c86:	f7fa ff31 	bl	8000aec <__aeabi_dcmplt>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f43f aef5 	beq.w	8005a7a <_dtoa_r+0x43a>
 8005c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005c92:	1e73      	subs	r3, r6, #1
 8005c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c9a:	2b30      	cmp	r3, #48	@ 0x30
 8005c9c:	d0f8      	beq.n	8005c90 <_dtoa_r+0x650>
 8005c9e:	9f04      	ldr	r7, [sp, #16]
 8005ca0:	e73e      	b.n	8005b20 <_dtoa_r+0x4e0>
 8005ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f10 <_dtoa_r+0x8d0>)
 8005ca4:	f7fa fcb0 	bl	8000608 <__aeabi_dmul>
 8005ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cac:	e7bc      	b.n	8005c28 <_dtoa_r+0x5e8>
 8005cae:	d10c      	bne.n	8005cca <_dtoa_r+0x68a>
 8005cb0:	4b98      	ldr	r3, [pc, #608]	@ (8005f14 <_dtoa_r+0x8d4>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb8:	f7fa fca6 	bl	8000608 <__aeabi_dmul>
 8005cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc0:	f7fa ff28 	bl	8000b14 <__aeabi_dcmpge>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f000 8157 	beq.w	8005f78 <_dtoa_r+0x938>
 8005cca:	2400      	movs	r4, #0
 8005ccc:	4625      	mov	r5, r4
 8005cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	4656      	mov	r6, sl
 8005cd6:	2700      	movs	r7, #0
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4658      	mov	r0, fp
 8005cdc:	f000 fafe 	bl	80062dc <_Bfree>
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	d0dc      	beq.n	8005c9e <_dtoa_r+0x65e>
 8005ce4:	b12f      	cbz	r7, 8005cf2 <_dtoa_r+0x6b2>
 8005ce6:	42af      	cmp	r7, r5
 8005ce8:	d003      	beq.n	8005cf2 <_dtoa_r+0x6b2>
 8005cea:	4639      	mov	r1, r7
 8005cec:	4658      	mov	r0, fp
 8005cee:	f000 faf5 	bl	80062dc <_Bfree>
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	f000 faf1 	bl	80062dc <_Bfree>
 8005cfa:	e7d0      	b.n	8005c9e <_dtoa_r+0x65e>
 8005cfc:	9704      	str	r7, [sp, #16]
 8005cfe:	4633      	mov	r3, r6
 8005d00:	461e      	mov	r6, r3
 8005d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d06:	2a39      	cmp	r2, #57	@ 0x39
 8005d08:	d107      	bne.n	8005d1a <_dtoa_r+0x6da>
 8005d0a:	459a      	cmp	sl, r3
 8005d0c:	d1f8      	bne.n	8005d00 <_dtoa_r+0x6c0>
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	3201      	adds	r2, #1
 8005d12:	9204      	str	r2, [sp, #16]
 8005d14:	2230      	movs	r2, #48	@ 0x30
 8005d16:	f88a 2000 	strb.w	r2, [sl]
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	3201      	adds	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e7bd      	b.n	8005c9e <_dtoa_r+0x65e>
 8005d22:	4b7b      	ldr	r3, [pc, #492]	@ (8005f10 <_dtoa_r+0x8d0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	f7fa fc6f 	bl	8000608 <__aeabi_dmul>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460d      	mov	r5, r1
 8005d32:	f7fa fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f43f aebb 	beq.w	8005ab2 <_dtoa_r+0x472>
 8005d3c:	e6f0      	b.n	8005b20 <_dtoa_r+0x4e0>
 8005d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	f000 80db 	beq.w	8005efc <_dtoa_r+0x8bc>
 8005d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d48:	2a01      	cmp	r2, #1
 8005d4a:	f300 80bf 	bgt.w	8005ecc <_dtoa_r+0x88c>
 8005d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	f000 80b7 	beq.w	8005ec4 <_dtoa_r+0x884>
 8005d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d5c:	4646      	mov	r6, r8
 8005d5e:	9a08      	ldr	r2, [sp, #32]
 8005d60:	2101      	movs	r1, #1
 8005d62:	441a      	add	r2, r3
 8005d64:	4658      	mov	r0, fp
 8005d66:	4498      	add	r8, r3
 8005d68:	9208      	str	r2, [sp, #32]
 8005d6a:	f000 fb6b 	bl	8006444 <__i2b>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	b15e      	cbz	r6, 8005d8a <_dtoa_r+0x74a>
 8005d72:	9b08      	ldr	r3, [sp, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd08      	ble.n	8005d8a <_dtoa_r+0x74a>
 8005d78:	42b3      	cmp	r3, r6
 8005d7a:	9a08      	ldr	r2, [sp, #32]
 8005d7c:	bfa8      	it	ge
 8005d7e:	4633      	movge	r3, r6
 8005d80:	eba8 0803 	sub.w	r8, r8, r3
 8005d84:	1af6      	subs	r6, r6, r3
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	9308      	str	r3, [sp, #32]
 8005d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d8c:	b1f3      	cbz	r3, 8005dcc <_dtoa_r+0x78c>
 8005d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80b7 	beq.w	8005f04 <_dtoa_r+0x8c4>
 8005d96:	b18c      	cbz	r4, 8005dbc <_dtoa_r+0x77c>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	4658      	mov	r0, fp
 8005d9e:	f000 fc11 	bl	80065c4 <__pow5mult>
 8005da2:	464a      	mov	r2, r9
 8005da4:	4601      	mov	r1, r0
 8005da6:	4605      	mov	r5, r0
 8005da8:	4658      	mov	r0, fp
 8005daa:	f000 fb61 	bl	8006470 <__multiply>
 8005dae:	4649      	mov	r1, r9
 8005db0:	9004      	str	r0, [sp, #16]
 8005db2:	4658      	mov	r0, fp
 8005db4:	f000 fa92 	bl	80062dc <_Bfree>
 8005db8:	9b04      	ldr	r3, [sp, #16]
 8005dba:	4699      	mov	r9, r3
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dbe:	1b1a      	subs	r2, r3, r4
 8005dc0:	d004      	beq.n	8005dcc <_dtoa_r+0x78c>
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	f000 fbfd 	bl	80065c4 <__pow5mult>
 8005dca:	4681      	mov	r9, r0
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4658      	mov	r0, fp
 8005dd0:	f000 fb38 	bl	8006444 <__i2b>
 8005dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 81cf 	beq.w	800617c <_dtoa_r+0xb3c>
 8005dde:	461a      	mov	r2, r3
 8005de0:	4601      	mov	r1, r0
 8005de2:	4658      	mov	r0, fp
 8005de4:	f000 fbee 	bl	80065c4 <__pow5mult>
 8005de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	4604      	mov	r4, r0
 8005dee:	f300 8095 	bgt.w	8005f1c <_dtoa_r+0x8dc>
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8087 	bne.w	8005f08 <_dtoa_r+0x8c8>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 8089 	bne.w	8005f18 <_dtoa_r+0x8d8>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e0c:	0d1b      	lsrs	r3, r3, #20
 8005e0e:	051b      	lsls	r3, r3, #20
 8005e10:	b12b      	cbz	r3, 8005e1e <_dtoa_r+0x7de>
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	3301      	adds	r3, #1
 8005e16:	9308      	str	r3, [sp, #32]
 8005e18:	f108 0801 	add.w	r8, r8, #1
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 81b0 	beq.w	8006188 <_dtoa_r+0xb48>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e2e:	6918      	ldr	r0, [r3, #16]
 8005e30:	f000 fabc 	bl	80063ac <__hi0bits>
 8005e34:	f1c0 0020 	rsb	r0, r0, #32
 8005e38:	9b08      	ldr	r3, [sp, #32]
 8005e3a:	4418      	add	r0, r3
 8005e3c:	f010 001f 	ands.w	r0, r0, #31
 8005e40:	d077      	beq.n	8005f32 <_dtoa_r+0x8f2>
 8005e42:	f1c0 0320 	rsb	r3, r0, #32
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	dd6b      	ble.n	8005f22 <_dtoa_r+0x8e2>
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	f1c0 001c 	rsb	r0, r0, #28
 8005e50:	4403      	add	r3, r0
 8005e52:	4480      	add	r8, r0
 8005e54:	4406      	add	r6, r0
 8005e56:	9308      	str	r3, [sp, #32]
 8005e58:	f1b8 0f00 	cmp.w	r8, #0
 8005e5c:	dd05      	ble.n	8005e6a <_dtoa_r+0x82a>
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4642      	mov	r2, r8
 8005e62:	4658      	mov	r0, fp
 8005e64:	f000 fc08 	bl	8006678 <__lshift>
 8005e68:	4681      	mov	r9, r0
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd05      	ble.n	8005e7c <_dtoa_r+0x83c>
 8005e70:	4621      	mov	r1, r4
 8005e72:	461a      	mov	r2, r3
 8005e74:	4658      	mov	r0, fp
 8005e76:	f000 fbff 	bl	8006678 <__lshift>
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d059      	beq.n	8005f36 <_dtoa_r+0x8f6>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4648      	mov	r0, r9
 8005e86:	f000 fc63 	bl	8006750 <__mcmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	da53      	bge.n	8005f36 <_dtoa_r+0x8f6>
 8005e8e:	1e7b      	subs	r3, r7, #1
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	4649      	mov	r1, r9
 8005e94:	2300      	movs	r3, #0
 8005e96:	220a      	movs	r2, #10
 8005e98:	4658      	mov	r0, fp
 8005e9a:	f000 fa41 	bl	8006320 <__multadd>
 8005e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8172 	beq.w	800618c <_dtoa_r+0xb4c>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4629      	mov	r1, r5
 8005eac:	220a      	movs	r2, #10
 8005eae:	4658      	mov	r0, fp
 8005eb0:	f000 fa36 	bl	8006320 <__multadd>
 8005eb4:	9b00      	ldr	r3, [sp, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	4605      	mov	r5, r0
 8005eba:	dc67      	bgt.n	8005f8c <_dtoa_r+0x94c>
 8005ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	dc41      	bgt.n	8005f46 <_dtoa_r+0x906>
 8005ec2:	e063      	b.n	8005f8c <_dtoa_r+0x94c>
 8005ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eca:	e746      	b.n	8005d5a <_dtoa_r+0x71a>
 8005ecc:	9b07      	ldr	r3, [sp, #28]
 8005ece:	1e5c      	subs	r4, r3, #1
 8005ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	bfbf      	itttt	lt
 8005ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005edc:	1ae3      	sublt	r3, r4, r3
 8005ede:	bfb4      	ite	lt
 8005ee0:	18d2      	addlt	r2, r2, r3
 8005ee2:	1b1c      	subge	r4, r3, r4
 8005ee4:	9b07      	ldr	r3, [sp, #28]
 8005ee6:	bfbc      	itt	lt
 8005ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005eea:	2400      	movlt	r4, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb5      	itete	lt
 8005ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8005ef4:	9b07      	ldrge	r3, [sp, #28]
 8005ef6:	2300      	movlt	r3, #0
 8005ef8:	4646      	movge	r6, r8
 8005efa:	e730      	b.n	8005d5e <_dtoa_r+0x71e>
 8005efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f00:	4646      	mov	r6, r8
 8005f02:	e735      	b.n	8005d70 <_dtoa_r+0x730>
 8005f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f06:	e75c      	b.n	8005dc2 <_dtoa_r+0x782>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e788      	b.n	8005e1e <_dtoa_r+0x7de>
 8005f0c:	3fe00000 	.word	0x3fe00000
 8005f10:	40240000 	.word	0x40240000
 8005f14:	40140000 	.word	0x40140000
 8005f18:	9b02      	ldr	r3, [sp, #8]
 8005f1a:	e780      	b.n	8005e1e <_dtoa_r+0x7de>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f20:	e782      	b.n	8005e28 <_dtoa_r+0x7e8>
 8005f22:	d099      	beq.n	8005e58 <_dtoa_r+0x818>
 8005f24:	9a08      	ldr	r2, [sp, #32]
 8005f26:	331c      	adds	r3, #28
 8005f28:	441a      	add	r2, r3
 8005f2a:	4498      	add	r8, r3
 8005f2c:	441e      	add	r6, r3
 8005f2e:	9208      	str	r2, [sp, #32]
 8005f30:	e792      	b.n	8005e58 <_dtoa_r+0x818>
 8005f32:	4603      	mov	r3, r0
 8005f34:	e7f6      	b.n	8005f24 <_dtoa_r+0x8e4>
 8005f36:	9b07      	ldr	r3, [sp, #28]
 8005f38:	9704      	str	r7, [sp, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dc20      	bgt.n	8005f80 <_dtoa_r+0x940>
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	dd1e      	ble.n	8005f84 <_dtoa_r+0x944>
 8005f46:	9b00      	ldr	r3, [sp, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f aec0 	bne.w	8005cce <_dtoa_r+0x68e>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	2205      	movs	r2, #5
 8005f52:	4658      	mov	r0, fp
 8005f54:	f000 f9e4 	bl	8006320 <__multadd>
 8005f58:	4601      	mov	r1, r0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f000 fbf7 	bl	8006750 <__mcmp>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	f77f aeb3 	ble.w	8005cce <_dtoa_r+0x68e>
 8005f68:	4656      	mov	r6, sl
 8005f6a:	2331      	movs	r3, #49	@ 0x31
 8005f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	3301      	adds	r3, #1
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	e6ae      	b.n	8005cd6 <_dtoa_r+0x696>
 8005f78:	9c07      	ldr	r4, [sp, #28]
 8005f7a:	9704      	str	r7, [sp, #16]
 8005f7c:	4625      	mov	r5, r4
 8005f7e:	e7f3      	b.n	8005f68 <_dtoa_r+0x928>
 8005f80:	9b07      	ldr	r3, [sp, #28]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8104 	beq.w	8006194 <_dtoa_r+0xb54>
 8005f8c:	2e00      	cmp	r6, #0
 8005f8e:	dd05      	ble.n	8005f9c <_dtoa_r+0x95c>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4632      	mov	r2, r6
 8005f94:	4658      	mov	r0, fp
 8005f96:	f000 fb6f 	bl	8006678 <__lshift>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d05a      	beq.n	8006058 <_dtoa_r+0xa18>
 8005fa2:	6869      	ldr	r1, [r5, #4]
 8005fa4:	4658      	mov	r0, fp
 8005fa6:	f000 f959 	bl	800625c <_Balloc>
 8005faa:	4606      	mov	r6, r0
 8005fac:	b928      	cbnz	r0, 8005fba <_dtoa_r+0x97a>
 8005fae:	4b84      	ldr	r3, [pc, #528]	@ (80061c0 <_dtoa_r+0xb80>)
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fb6:	f7ff bb5a 	b.w	800566e <_dtoa_r+0x2e>
 8005fba:	692a      	ldr	r2, [r5, #16]
 8005fbc:	3202      	adds	r2, #2
 8005fbe:	0092      	lsls	r2, r2, #2
 8005fc0:	f105 010c 	add.w	r1, r5, #12
 8005fc4:	300c      	adds	r0, #12
 8005fc6:	f000 fefb 	bl	8006dc0 <memcpy>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4658      	mov	r0, fp
 8005fd0:	f000 fb52 	bl	8006678 <__lshift>
 8005fd4:	f10a 0301 	add.w	r3, sl, #1
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	4453      	add	r3, sl
 8005fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	462f      	mov	r7, r5
 8005fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fea:	4605      	mov	r5, r0
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	4648      	mov	r0, r9
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	f7ff fa99 	bl	800552c <quorem>
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	9002      	str	r0, [sp, #8]
 8005ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006002:	4648      	mov	r0, r9
 8006004:	f000 fba4 	bl	8006750 <__mcmp>
 8006008:	462a      	mov	r2, r5
 800600a:	9008      	str	r0, [sp, #32]
 800600c:	4621      	mov	r1, r4
 800600e:	4658      	mov	r0, fp
 8006010:	f000 fbba 	bl	8006788 <__mdiff>
 8006014:	68c2      	ldr	r2, [r0, #12]
 8006016:	4606      	mov	r6, r0
 8006018:	bb02      	cbnz	r2, 800605c <_dtoa_r+0xa1c>
 800601a:	4601      	mov	r1, r0
 800601c:	4648      	mov	r0, r9
 800601e:	f000 fb97 	bl	8006750 <__mcmp>
 8006022:	4602      	mov	r2, r0
 8006024:	4631      	mov	r1, r6
 8006026:	4658      	mov	r0, fp
 8006028:	920e      	str	r2, [sp, #56]	@ 0x38
 800602a:	f000 f957 	bl	80062dc <_Bfree>
 800602e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006032:	9e07      	ldr	r6, [sp, #28]
 8006034:	ea43 0102 	orr.w	r1, r3, r2
 8006038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603a:	4319      	orrs	r1, r3
 800603c:	d110      	bne.n	8006060 <_dtoa_r+0xa20>
 800603e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006042:	d029      	beq.n	8006098 <_dtoa_r+0xa58>
 8006044:	9b08      	ldr	r3, [sp, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd02      	ble.n	8006050 <_dtoa_r+0xa10>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006050:	9b00      	ldr	r3, [sp, #0]
 8006052:	f883 8000 	strb.w	r8, [r3]
 8006056:	e63f      	b.n	8005cd8 <_dtoa_r+0x698>
 8006058:	4628      	mov	r0, r5
 800605a:	e7bb      	b.n	8005fd4 <_dtoa_r+0x994>
 800605c:	2201      	movs	r2, #1
 800605e:	e7e1      	b.n	8006024 <_dtoa_r+0x9e4>
 8006060:	9b08      	ldr	r3, [sp, #32]
 8006062:	2b00      	cmp	r3, #0
 8006064:	db04      	blt.n	8006070 <_dtoa_r+0xa30>
 8006066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006068:	430b      	orrs	r3, r1
 800606a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800606c:	430b      	orrs	r3, r1
 800606e:	d120      	bne.n	80060b2 <_dtoa_r+0xa72>
 8006070:	2a00      	cmp	r2, #0
 8006072:	dded      	ble.n	8006050 <_dtoa_r+0xa10>
 8006074:	4649      	mov	r1, r9
 8006076:	2201      	movs	r2, #1
 8006078:	4658      	mov	r0, fp
 800607a:	f000 fafd 	bl	8006678 <__lshift>
 800607e:	4621      	mov	r1, r4
 8006080:	4681      	mov	r9, r0
 8006082:	f000 fb65 	bl	8006750 <__mcmp>
 8006086:	2800      	cmp	r0, #0
 8006088:	dc03      	bgt.n	8006092 <_dtoa_r+0xa52>
 800608a:	d1e1      	bne.n	8006050 <_dtoa_r+0xa10>
 800608c:	f018 0f01 	tst.w	r8, #1
 8006090:	d0de      	beq.n	8006050 <_dtoa_r+0xa10>
 8006092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006096:	d1d8      	bne.n	800604a <_dtoa_r+0xa0a>
 8006098:	9a00      	ldr	r2, [sp, #0]
 800609a:	2339      	movs	r3, #57	@ 0x39
 800609c:	7013      	strb	r3, [r2, #0]
 800609e:	4633      	mov	r3, r6
 80060a0:	461e      	mov	r6, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060a8:	2a39      	cmp	r2, #57	@ 0x39
 80060aa:	d052      	beq.n	8006152 <_dtoa_r+0xb12>
 80060ac:	3201      	adds	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e612      	b.n	8005cd8 <_dtoa_r+0x698>
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	dd07      	ble.n	80060c6 <_dtoa_r+0xa86>
 80060b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060ba:	d0ed      	beq.n	8006098 <_dtoa_r+0xa58>
 80060bc:	9a00      	ldr	r2, [sp, #0]
 80060be:	f108 0301 	add.w	r3, r8, #1
 80060c2:	7013      	strb	r3, [r2, #0]
 80060c4:	e608      	b.n	8005cd8 <_dtoa_r+0x698>
 80060c6:	9b07      	ldr	r3, [sp, #28]
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d028      	beq.n	8006126 <_dtoa_r+0xae6>
 80060d4:	4649      	mov	r1, r9
 80060d6:	2300      	movs	r3, #0
 80060d8:	220a      	movs	r2, #10
 80060da:	4658      	mov	r0, fp
 80060dc:	f000 f920 	bl	8006320 <__multadd>
 80060e0:	42af      	cmp	r7, r5
 80060e2:	4681      	mov	r9, r0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	f04f 020a 	mov.w	r2, #10
 80060ec:	4639      	mov	r1, r7
 80060ee:	4658      	mov	r0, fp
 80060f0:	d107      	bne.n	8006102 <_dtoa_r+0xac2>
 80060f2:	f000 f915 	bl	8006320 <__multadd>
 80060f6:	4607      	mov	r7, r0
 80060f8:	4605      	mov	r5, r0
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	e774      	b.n	8005fec <_dtoa_r+0x9ac>
 8006102:	f000 f90d 	bl	8006320 <__multadd>
 8006106:	4629      	mov	r1, r5
 8006108:	4607      	mov	r7, r0
 800610a:	2300      	movs	r3, #0
 800610c:	220a      	movs	r2, #10
 800610e:	4658      	mov	r0, fp
 8006110:	f000 f906 	bl	8006320 <__multadd>
 8006114:	4605      	mov	r5, r0
 8006116:	e7f0      	b.n	80060fa <_dtoa_r+0xaba>
 8006118:	9b00      	ldr	r3, [sp, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfcc      	ite	gt
 800611e:	461e      	movgt	r6, r3
 8006120:	2601      	movle	r6, #1
 8006122:	4456      	add	r6, sl
 8006124:	2700      	movs	r7, #0
 8006126:	4649      	mov	r1, r9
 8006128:	2201      	movs	r2, #1
 800612a:	4658      	mov	r0, fp
 800612c:	f000 faa4 	bl	8006678 <__lshift>
 8006130:	4621      	mov	r1, r4
 8006132:	4681      	mov	r9, r0
 8006134:	f000 fb0c 	bl	8006750 <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	dcb0      	bgt.n	800609e <_dtoa_r+0xa5e>
 800613c:	d102      	bne.n	8006144 <_dtoa_r+0xb04>
 800613e:	f018 0f01 	tst.w	r8, #1
 8006142:	d1ac      	bne.n	800609e <_dtoa_r+0xa5e>
 8006144:	4633      	mov	r3, r6
 8006146:	461e      	mov	r6, r3
 8006148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800614c:	2a30      	cmp	r2, #48	@ 0x30
 800614e:	d0fa      	beq.n	8006146 <_dtoa_r+0xb06>
 8006150:	e5c2      	b.n	8005cd8 <_dtoa_r+0x698>
 8006152:	459a      	cmp	sl, r3
 8006154:	d1a4      	bne.n	80060a0 <_dtoa_r+0xa60>
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	3301      	adds	r3, #1
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	2331      	movs	r3, #49	@ 0x31
 800615e:	f88a 3000 	strb.w	r3, [sl]
 8006162:	e5b9      	b.n	8005cd8 <_dtoa_r+0x698>
 8006164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061c4 <_dtoa_r+0xb84>
 800616a:	b11b      	cbz	r3, 8006174 <_dtoa_r+0xb34>
 800616c:	f10a 0308 	add.w	r3, sl, #8
 8006170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4650      	mov	r0, sl
 8006176:	b019      	add	sp, #100	@ 0x64
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800617e:	2b01      	cmp	r3, #1
 8006180:	f77f ae37 	ble.w	8005df2 <_dtoa_r+0x7b2>
 8006184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006186:	930a      	str	r3, [sp, #40]	@ 0x28
 8006188:	2001      	movs	r0, #1
 800618a:	e655      	b.n	8005e38 <_dtoa_r+0x7f8>
 800618c:	9b00      	ldr	r3, [sp, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f77f aed6 	ble.w	8005f40 <_dtoa_r+0x900>
 8006194:	4656      	mov	r6, sl
 8006196:	4621      	mov	r1, r4
 8006198:	4648      	mov	r0, r9
 800619a:	f7ff f9c7 	bl	800552c <quorem>
 800619e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061a2:	f806 8b01 	strb.w	r8, [r6], #1
 80061a6:	9b00      	ldr	r3, [sp, #0]
 80061a8:	eba6 020a 	sub.w	r2, r6, sl
 80061ac:	4293      	cmp	r3, r2
 80061ae:	ddb3      	ble.n	8006118 <_dtoa_r+0xad8>
 80061b0:	4649      	mov	r1, r9
 80061b2:	2300      	movs	r3, #0
 80061b4:	220a      	movs	r2, #10
 80061b6:	4658      	mov	r0, fp
 80061b8:	f000 f8b2 	bl	8006320 <__multadd>
 80061bc:	4681      	mov	r9, r0
 80061be:	e7ea      	b.n	8006196 <_dtoa_r+0xb56>
 80061c0:	080077d4 	.word	0x080077d4
 80061c4:	0800776f 	.word	0x0800776f

080061c8 <_free_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4605      	mov	r5, r0
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d041      	beq.n	8006254 <_free_r+0x8c>
 80061d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d4:	1f0c      	subs	r4, r1, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bfb8      	it	lt
 80061da:	18e4      	addlt	r4, r4, r3
 80061dc:	f7fe fb30 	bl	8004840 <__malloc_lock>
 80061e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006258 <_free_r+0x90>)
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	b933      	cbnz	r3, 80061f4 <_free_r+0x2c>
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	6014      	str	r4, [r2, #0]
 80061ea:	4628      	mov	r0, r5
 80061ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061f0:	f7fe bb2c 	b.w	800484c <__malloc_unlock>
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d908      	bls.n	800620a <_free_r+0x42>
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	1821      	adds	r1, r4, r0
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf01      	itttt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	1809      	addeq	r1, r1, r0
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	e7ed      	b.n	80061e6 <_free_r+0x1e>
 800620a:	461a      	mov	r2, r3
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b10b      	cbz	r3, 8006214 <_free_r+0x4c>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d9fa      	bls.n	800620a <_free_r+0x42>
 8006214:	6811      	ldr	r1, [r2, #0]
 8006216:	1850      	adds	r0, r2, r1
 8006218:	42a0      	cmp	r0, r4
 800621a:	d10b      	bne.n	8006234 <_free_r+0x6c>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	4401      	add	r1, r0
 8006220:	1850      	adds	r0, r2, r1
 8006222:	4283      	cmp	r3, r0
 8006224:	6011      	str	r1, [r2, #0]
 8006226:	d1e0      	bne.n	80061ea <_free_r+0x22>
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	6053      	str	r3, [r2, #4]
 800622e:	4408      	add	r0, r1
 8006230:	6010      	str	r0, [r2, #0]
 8006232:	e7da      	b.n	80061ea <_free_r+0x22>
 8006234:	d902      	bls.n	800623c <_free_r+0x74>
 8006236:	230c      	movs	r3, #12
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	e7d6      	b.n	80061ea <_free_r+0x22>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	1821      	adds	r1, r4, r0
 8006240:	428b      	cmp	r3, r1
 8006242:	bf04      	itt	eq
 8006244:	6819      	ldreq	r1, [r3, #0]
 8006246:	685b      	ldreq	r3, [r3, #4]
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	bf04      	itt	eq
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	6054      	str	r4, [r2, #4]
 8006252:	e7ca      	b.n	80061ea <_free_r+0x22>
 8006254:	bd38      	pop	{r3, r4, r5, pc}
 8006256:	bf00      	nop
 8006258:	200003f8 	.word	0x200003f8

0800625c <_Balloc>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	69c6      	ldr	r6, [r0, #28]
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	b976      	cbnz	r6, 8006284 <_Balloc+0x28>
 8006266:	2010      	movs	r0, #16
 8006268:	f7fe fa40 	bl	80046ec <malloc>
 800626c:	4602      	mov	r2, r0
 800626e:	61e0      	str	r0, [r4, #28]
 8006270:	b920      	cbnz	r0, 800627c <_Balloc+0x20>
 8006272:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <_Balloc+0x78>)
 8006274:	4818      	ldr	r0, [pc, #96]	@ (80062d8 <_Balloc+0x7c>)
 8006276:	216b      	movs	r1, #107	@ 0x6b
 8006278:	f7ff f93a 	bl	80054f0 <__assert_func>
 800627c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006280:	6006      	str	r6, [r0, #0]
 8006282:	60c6      	str	r6, [r0, #12]
 8006284:	69e6      	ldr	r6, [r4, #28]
 8006286:	68f3      	ldr	r3, [r6, #12]
 8006288:	b183      	cbz	r3, 80062ac <_Balloc+0x50>
 800628a:	69e3      	ldr	r3, [r4, #28]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006292:	b9b8      	cbnz	r0, 80062c4 <_Balloc+0x68>
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f605 	lsl.w	r6, r1, r5
 800629a:	1d72      	adds	r2, r6, #5
 800629c:	0092      	lsls	r2, r2, #2
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 fda3 	bl	8006dea <_calloc_r>
 80062a4:	b160      	cbz	r0, 80062c0 <_Balloc+0x64>
 80062a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062aa:	e00e      	b.n	80062ca <_Balloc+0x6e>
 80062ac:	2221      	movs	r2, #33	@ 0x21
 80062ae:	2104      	movs	r1, #4
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fd9a 	bl	8006dea <_calloc_r>
 80062b6:	69e3      	ldr	r3, [r4, #28]
 80062b8:	60f0      	str	r0, [r6, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e4      	bne.n	800628a <_Balloc+0x2e>
 80062c0:	2000      	movs	r0, #0
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	6802      	ldr	r2, [r0, #0]
 80062c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ca:	2300      	movs	r3, #0
 80062cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062d0:	e7f7      	b.n	80062c2 <_Balloc+0x66>
 80062d2:	bf00      	nop
 80062d4:	08007690 	.word	0x08007690
 80062d8:	080077e5 	.word	0x080077e5

080062dc <_Bfree>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	69c6      	ldr	r6, [r0, #28]
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b976      	cbnz	r6, 8006304 <_Bfree+0x28>
 80062e6:	2010      	movs	r0, #16
 80062e8:	f7fe fa00 	bl	80046ec <malloc>
 80062ec:	4602      	mov	r2, r0
 80062ee:	61e8      	str	r0, [r5, #28]
 80062f0:	b920      	cbnz	r0, 80062fc <_Bfree+0x20>
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <_Bfree+0x3c>)
 80062f4:	4809      	ldr	r0, [pc, #36]	@ (800631c <_Bfree+0x40>)
 80062f6:	218f      	movs	r1, #143	@ 0x8f
 80062f8:	f7ff f8fa 	bl	80054f0 <__assert_func>
 80062fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006300:	6006      	str	r6, [r0, #0]
 8006302:	60c6      	str	r6, [r0, #12]
 8006304:	b13c      	cbz	r4, 8006316 <_Bfree+0x3a>
 8006306:	69eb      	ldr	r3, [r5, #28]
 8006308:	6862      	ldr	r2, [r4, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	08007690 	.word	0x08007690
 800631c:	080077e5 	.word	0x080077e5

08006320 <__multadd>:
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	690d      	ldr	r5, [r1, #16]
 8006326:	4607      	mov	r7, r0
 8006328:	460c      	mov	r4, r1
 800632a:	461e      	mov	r6, r3
 800632c:	f101 0c14 	add.w	ip, r1, #20
 8006330:	2000      	movs	r0, #0
 8006332:	f8dc 3000 	ldr.w	r3, [ip]
 8006336:	b299      	uxth	r1, r3
 8006338:	fb02 6101 	mla	r1, r2, r1, r6
 800633c:	0c1e      	lsrs	r6, r3, #16
 800633e:	0c0b      	lsrs	r3, r1, #16
 8006340:	fb02 3306 	mla	r3, r2, r6, r3
 8006344:	b289      	uxth	r1, r1
 8006346:	3001      	adds	r0, #1
 8006348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800634c:	4285      	cmp	r5, r0
 800634e:	f84c 1b04 	str.w	r1, [ip], #4
 8006352:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006356:	dcec      	bgt.n	8006332 <__multadd+0x12>
 8006358:	b30e      	cbz	r6, 800639e <__multadd+0x7e>
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	42ab      	cmp	r3, r5
 800635e:	dc19      	bgt.n	8006394 <__multadd+0x74>
 8006360:	6861      	ldr	r1, [r4, #4]
 8006362:	4638      	mov	r0, r7
 8006364:	3101      	adds	r1, #1
 8006366:	f7ff ff79 	bl	800625c <_Balloc>
 800636a:	4680      	mov	r8, r0
 800636c:	b928      	cbnz	r0, 800637a <__multadd+0x5a>
 800636e:	4602      	mov	r2, r0
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <__multadd+0x84>)
 8006372:	480d      	ldr	r0, [pc, #52]	@ (80063a8 <__multadd+0x88>)
 8006374:	21ba      	movs	r1, #186	@ 0xba
 8006376:	f7ff f8bb 	bl	80054f0 <__assert_func>
 800637a:	6922      	ldr	r2, [r4, #16]
 800637c:	3202      	adds	r2, #2
 800637e:	f104 010c 	add.w	r1, r4, #12
 8006382:	0092      	lsls	r2, r2, #2
 8006384:	300c      	adds	r0, #12
 8006386:	f000 fd1b 	bl	8006dc0 <memcpy>
 800638a:	4621      	mov	r1, r4
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff ffa5 	bl	80062dc <_Bfree>
 8006392:	4644      	mov	r4, r8
 8006394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006398:	3501      	adds	r5, #1
 800639a:	615e      	str	r6, [r3, #20]
 800639c:	6125      	str	r5, [r4, #16]
 800639e:	4620      	mov	r0, r4
 80063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a4:	080077d4 	.word	0x080077d4
 80063a8:	080077e5 	.word	0x080077e5

080063ac <__hi0bits>:
 80063ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063b0:	4603      	mov	r3, r0
 80063b2:	bf36      	itet	cc
 80063b4:	0403      	lslcc	r3, r0, #16
 80063b6:	2000      	movcs	r0, #0
 80063b8:	2010      	movcc	r0, #16
 80063ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063be:	bf3c      	itt	cc
 80063c0:	021b      	lslcc	r3, r3, #8
 80063c2:	3008      	addcc	r0, #8
 80063c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c8:	bf3c      	itt	cc
 80063ca:	011b      	lslcc	r3, r3, #4
 80063cc:	3004      	addcc	r0, #4
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d2:	bf3c      	itt	cc
 80063d4:	009b      	lslcc	r3, r3, #2
 80063d6:	3002      	addcc	r0, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	db05      	blt.n	80063e8 <__hi0bits+0x3c>
 80063dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80063e0:	f100 0001 	add.w	r0, r0, #1
 80063e4:	bf08      	it	eq
 80063e6:	2020      	moveq	r0, #32
 80063e8:	4770      	bx	lr

080063ea <__lo0bits>:
 80063ea:	6803      	ldr	r3, [r0, #0]
 80063ec:	4602      	mov	r2, r0
 80063ee:	f013 0007 	ands.w	r0, r3, #7
 80063f2:	d00b      	beq.n	800640c <__lo0bits+0x22>
 80063f4:	07d9      	lsls	r1, r3, #31
 80063f6:	d421      	bmi.n	800643c <__lo0bits+0x52>
 80063f8:	0798      	lsls	r0, r3, #30
 80063fa:	bf49      	itett	mi
 80063fc:	085b      	lsrmi	r3, r3, #1
 80063fe:	089b      	lsrpl	r3, r3, #2
 8006400:	2001      	movmi	r0, #1
 8006402:	6013      	strmi	r3, [r2, #0]
 8006404:	bf5c      	itt	pl
 8006406:	6013      	strpl	r3, [r2, #0]
 8006408:	2002      	movpl	r0, #2
 800640a:	4770      	bx	lr
 800640c:	b299      	uxth	r1, r3
 800640e:	b909      	cbnz	r1, 8006414 <__lo0bits+0x2a>
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	2010      	movs	r0, #16
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	b909      	cbnz	r1, 800641c <__lo0bits+0x32>
 8006418:	3008      	adds	r0, #8
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	0719      	lsls	r1, r3, #28
 800641e:	bf04      	itt	eq
 8006420:	091b      	lsreq	r3, r3, #4
 8006422:	3004      	addeq	r0, #4
 8006424:	0799      	lsls	r1, r3, #30
 8006426:	bf04      	itt	eq
 8006428:	089b      	lsreq	r3, r3, #2
 800642a:	3002      	addeq	r0, #2
 800642c:	07d9      	lsls	r1, r3, #31
 800642e:	d403      	bmi.n	8006438 <__lo0bits+0x4e>
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	f100 0001 	add.w	r0, r0, #1
 8006436:	d003      	beq.n	8006440 <__lo0bits+0x56>
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4770      	bx	lr
 800643c:	2000      	movs	r0, #0
 800643e:	4770      	bx	lr
 8006440:	2020      	movs	r0, #32
 8006442:	4770      	bx	lr

08006444 <__i2b>:
 8006444:	b510      	push	{r4, lr}
 8006446:	460c      	mov	r4, r1
 8006448:	2101      	movs	r1, #1
 800644a:	f7ff ff07 	bl	800625c <_Balloc>
 800644e:	4602      	mov	r2, r0
 8006450:	b928      	cbnz	r0, 800645e <__i2b+0x1a>
 8006452:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <__i2b+0x24>)
 8006454:	4805      	ldr	r0, [pc, #20]	@ (800646c <__i2b+0x28>)
 8006456:	f240 1145 	movw	r1, #325	@ 0x145
 800645a:	f7ff f849 	bl	80054f0 <__assert_func>
 800645e:	2301      	movs	r3, #1
 8006460:	6144      	str	r4, [r0, #20]
 8006462:	6103      	str	r3, [r0, #16]
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	080077d4 	.word	0x080077d4
 800646c:	080077e5 	.word	0x080077e5

08006470 <__multiply>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	4614      	mov	r4, r2
 8006476:	690a      	ldr	r2, [r1, #16]
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	bfa8      	it	ge
 800647e:	4623      	movge	r3, r4
 8006480:	460f      	mov	r7, r1
 8006482:	bfa4      	itt	ge
 8006484:	460c      	movge	r4, r1
 8006486:	461f      	movge	r7, r3
 8006488:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800648c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	6861      	ldr	r1, [r4, #4]
 8006494:	eb0a 0609 	add.w	r6, sl, r9
 8006498:	42b3      	cmp	r3, r6
 800649a:	b085      	sub	sp, #20
 800649c:	bfb8      	it	lt
 800649e:	3101      	addlt	r1, #1
 80064a0:	f7ff fedc 	bl	800625c <_Balloc>
 80064a4:	b930      	cbnz	r0, 80064b4 <__multiply+0x44>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b44      	ldr	r3, [pc, #272]	@ (80065bc <__multiply+0x14c>)
 80064aa:	4845      	ldr	r0, [pc, #276]	@ (80065c0 <__multiply+0x150>)
 80064ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064b0:	f7ff f81e 	bl	80054f0 <__assert_func>
 80064b4:	f100 0514 	add.w	r5, r0, #20
 80064b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064bc:	462b      	mov	r3, r5
 80064be:	2200      	movs	r2, #0
 80064c0:	4543      	cmp	r3, r8
 80064c2:	d321      	bcc.n	8006508 <__multiply+0x98>
 80064c4:	f107 0114 	add.w	r1, r7, #20
 80064c8:	f104 0214 	add.w	r2, r4, #20
 80064cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80064d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	1b13      	subs	r3, r2, r4
 80064d8:	3b15      	subs	r3, #21
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	3304      	adds	r3, #4
 80064e0:	f104 0715 	add.w	r7, r4, #21
 80064e4:	42ba      	cmp	r2, r7
 80064e6:	bf38      	it	cc
 80064e8:	2304      	movcc	r3, #4
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	9103      	str	r1, [sp, #12]
 80064f0:	428b      	cmp	r3, r1
 80064f2:	d80c      	bhi.n	800650e <__multiply+0x9e>
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	dd03      	ble.n	8006500 <__multiply+0x90>
 80064f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05b      	beq.n	80065b8 <__multiply+0x148>
 8006500:	6106      	str	r6, [r0, #16]
 8006502:	b005      	add	sp, #20
 8006504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006508:	f843 2b04 	str.w	r2, [r3], #4
 800650c:	e7d8      	b.n	80064c0 <__multiply+0x50>
 800650e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006512:	f1ba 0f00 	cmp.w	sl, #0
 8006516:	d024      	beq.n	8006562 <__multiply+0xf2>
 8006518:	f104 0e14 	add.w	lr, r4, #20
 800651c:	46a9      	mov	r9, r5
 800651e:	f04f 0c00 	mov.w	ip, #0
 8006522:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006526:	f8d9 3000 	ldr.w	r3, [r9]
 800652a:	fa1f fb87 	uxth.w	fp, r7
 800652e:	b29b      	uxth	r3, r3
 8006530:	fb0a 330b 	mla	r3, sl, fp, r3
 8006534:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006538:	f8d9 7000 	ldr.w	r7, [r9]
 800653c:	4463      	add	r3, ip
 800653e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006542:	fb0a c70b 	mla	r7, sl, fp, ip
 8006546:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006550:	4572      	cmp	r2, lr
 8006552:	f849 3b04 	str.w	r3, [r9], #4
 8006556:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800655a:	d8e2      	bhi.n	8006522 <__multiply+0xb2>
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	f845 c003 	str.w	ip, [r5, r3]
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006568:	3104      	adds	r1, #4
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	d021      	beq.n	80065b4 <__multiply+0x144>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	f104 0c14 	add.w	ip, r4, #20
 8006576:	46ae      	mov	lr, r5
 8006578:	f04f 0a00 	mov.w	sl, #0
 800657c:	f8bc b000 	ldrh.w	fp, [ip]
 8006580:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006584:	fb09 770b 	mla	r7, r9, fp, r7
 8006588:	4457      	add	r7, sl
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006590:	f84e 3b04 	str.w	r3, [lr], #4
 8006594:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800659c:	f8be 3000 	ldrh.w	r3, [lr]
 80065a0:	fb09 330a 	mla	r3, r9, sl, r3
 80065a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065a8:	4562      	cmp	r2, ip
 80065aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ae:	d8e5      	bhi.n	800657c <__multiply+0x10c>
 80065b0:	9f01      	ldr	r7, [sp, #4]
 80065b2:	51eb      	str	r3, [r5, r7]
 80065b4:	3504      	adds	r5, #4
 80065b6:	e799      	b.n	80064ec <__multiply+0x7c>
 80065b8:	3e01      	subs	r6, #1
 80065ba:	e79b      	b.n	80064f4 <__multiply+0x84>
 80065bc:	080077d4 	.word	0x080077d4
 80065c0:	080077e5 	.word	0x080077e5

080065c4 <__pow5mult>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	4615      	mov	r5, r2
 80065ca:	f012 0203 	ands.w	r2, r2, #3
 80065ce:	4607      	mov	r7, r0
 80065d0:	460e      	mov	r6, r1
 80065d2:	d007      	beq.n	80065e4 <__pow5mult+0x20>
 80065d4:	4c25      	ldr	r4, [pc, #148]	@ (800666c <__pow5mult+0xa8>)
 80065d6:	3a01      	subs	r2, #1
 80065d8:	2300      	movs	r3, #0
 80065da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065de:	f7ff fe9f 	bl	8006320 <__multadd>
 80065e2:	4606      	mov	r6, r0
 80065e4:	10ad      	asrs	r5, r5, #2
 80065e6:	d03d      	beq.n	8006664 <__pow5mult+0xa0>
 80065e8:	69fc      	ldr	r4, [r7, #28]
 80065ea:	b97c      	cbnz	r4, 800660c <__pow5mult+0x48>
 80065ec:	2010      	movs	r0, #16
 80065ee:	f7fe f87d 	bl	80046ec <malloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	61f8      	str	r0, [r7, #28]
 80065f6:	b928      	cbnz	r0, 8006604 <__pow5mult+0x40>
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <__pow5mult+0xac>)
 80065fa:	481e      	ldr	r0, [pc, #120]	@ (8006674 <__pow5mult+0xb0>)
 80065fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006600:	f7fe ff76 	bl	80054f0 <__assert_func>
 8006604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006608:	6004      	str	r4, [r0, #0]
 800660a:	60c4      	str	r4, [r0, #12]
 800660c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006614:	b94c      	cbnz	r4, 800662a <__pow5mult+0x66>
 8006616:	f240 2171 	movw	r1, #625	@ 0x271
 800661a:	4638      	mov	r0, r7
 800661c:	f7ff ff12 	bl	8006444 <__i2b>
 8006620:	2300      	movs	r3, #0
 8006622:	f8c8 0008 	str.w	r0, [r8, #8]
 8006626:	4604      	mov	r4, r0
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	f04f 0900 	mov.w	r9, #0
 800662e:	07eb      	lsls	r3, r5, #31
 8006630:	d50a      	bpl.n	8006648 <__pow5mult+0x84>
 8006632:	4631      	mov	r1, r6
 8006634:	4622      	mov	r2, r4
 8006636:	4638      	mov	r0, r7
 8006638:	f7ff ff1a 	bl	8006470 <__multiply>
 800663c:	4631      	mov	r1, r6
 800663e:	4680      	mov	r8, r0
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff fe4b 	bl	80062dc <_Bfree>
 8006646:	4646      	mov	r6, r8
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	d00b      	beq.n	8006664 <__pow5mult+0xa0>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	b938      	cbnz	r0, 8006660 <__pow5mult+0x9c>
 8006650:	4622      	mov	r2, r4
 8006652:	4621      	mov	r1, r4
 8006654:	4638      	mov	r0, r7
 8006656:	f7ff ff0b 	bl	8006470 <__multiply>
 800665a:	6020      	str	r0, [r4, #0]
 800665c:	f8c0 9000 	str.w	r9, [r0]
 8006660:	4604      	mov	r4, r0
 8006662:	e7e4      	b.n	800662e <__pow5mult+0x6a>
 8006664:	4630      	mov	r0, r6
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	bf00      	nop
 800666c:	08007840 	.word	0x08007840
 8006670:	08007690 	.word	0x08007690
 8006674:	080077e5 	.word	0x080077e5

08006678 <__lshift>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	6849      	ldr	r1, [r1, #4]
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	4607      	mov	r7, r0
 800668a:	4691      	mov	r9, r2
 800668c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006690:	f108 0601 	add.w	r6, r8, #1
 8006694:	42b3      	cmp	r3, r6
 8006696:	db0b      	blt.n	80066b0 <__lshift+0x38>
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff fddf 	bl	800625c <_Balloc>
 800669e:	4605      	mov	r5, r0
 80066a0:	b948      	cbnz	r0, 80066b6 <__lshift+0x3e>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <__lshift+0xd0>)
 80066a6:	4829      	ldr	r0, [pc, #164]	@ (800674c <__lshift+0xd4>)
 80066a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066ac:	f7fe ff20 	bl	80054f0 <__assert_func>
 80066b0:	3101      	adds	r1, #1
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	e7ee      	b.n	8006694 <__lshift+0x1c>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f100 0114 	add.w	r1, r0, #20
 80066bc:	f100 0210 	add.w	r2, r0, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	4553      	cmp	r3, sl
 80066c4:	db33      	blt.n	800672e <__lshift+0xb6>
 80066c6:	6920      	ldr	r0, [r4, #16]
 80066c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066cc:	f104 0314 	add.w	r3, r4, #20
 80066d0:	f019 091f 	ands.w	r9, r9, #31
 80066d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066dc:	d02b      	beq.n	8006736 <__lshift+0xbe>
 80066de:	f1c9 0e20 	rsb	lr, r9, #32
 80066e2:	468a      	mov	sl, r1
 80066e4:	2200      	movs	r2, #0
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	fa00 f009 	lsl.w	r0, r0, r9
 80066ec:	4310      	orrs	r0, r2
 80066ee:	f84a 0b04 	str.w	r0, [sl], #4
 80066f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f6:	459c      	cmp	ip, r3
 80066f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80066fc:	d8f3      	bhi.n	80066e6 <__lshift+0x6e>
 80066fe:	ebac 0304 	sub.w	r3, ip, r4
 8006702:	3b15      	subs	r3, #21
 8006704:	f023 0303 	bic.w	r3, r3, #3
 8006708:	3304      	adds	r3, #4
 800670a:	f104 0015 	add.w	r0, r4, #21
 800670e:	4584      	cmp	ip, r0
 8006710:	bf38      	it	cc
 8006712:	2304      	movcc	r3, #4
 8006714:	50ca      	str	r2, [r1, r3]
 8006716:	b10a      	cbz	r2, 800671c <__lshift+0xa4>
 8006718:	f108 0602 	add.w	r6, r8, #2
 800671c:	3e01      	subs	r6, #1
 800671e:	4638      	mov	r0, r7
 8006720:	612e      	str	r6, [r5, #16]
 8006722:	4621      	mov	r1, r4
 8006724:	f7ff fdda 	bl	80062dc <_Bfree>
 8006728:	4628      	mov	r0, r5
 800672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006732:	3301      	adds	r3, #1
 8006734:	e7c5      	b.n	80066c2 <__lshift+0x4a>
 8006736:	3904      	subs	r1, #4
 8006738:	f853 2b04 	ldr.w	r2, [r3], #4
 800673c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006740:	459c      	cmp	ip, r3
 8006742:	d8f9      	bhi.n	8006738 <__lshift+0xc0>
 8006744:	e7ea      	b.n	800671c <__lshift+0xa4>
 8006746:	bf00      	nop
 8006748:	080077d4 	.word	0x080077d4
 800674c:	080077e5 	.word	0x080077e5

08006750 <__mcmp>:
 8006750:	690a      	ldr	r2, [r1, #16]
 8006752:	4603      	mov	r3, r0
 8006754:	6900      	ldr	r0, [r0, #16]
 8006756:	1a80      	subs	r0, r0, r2
 8006758:	b530      	push	{r4, r5, lr}
 800675a:	d10e      	bne.n	800677a <__mcmp+0x2a>
 800675c:	3314      	adds	r3, #20
 800675e:	3114      	adds	r1, #20
 8006760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800676c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006770:	4295      	cmp	r5, r2
 8006772:	d003      	beq.n	800677c <__mcmp+0x2c>
 8006774:	d205      	bcs.n	8006782 <__mcmp+0x32>
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	bd30      	pop	{r4, r5, pc}
 800677c:	42a3      	cmp	r3, r4
 800677e:	d3f3      	bcc.n	8006768 <__mcmp+0x18>
 8006780:	e7fb      	b.n	800677a <__mcmp+0x2a>
 8006782:	2001      	movs	r0, #1
 8006784:	e7f9      	b.n	800677a <__mcmp+0x2a>
	...

08006788 <__mdiff>:
 8006788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	4689      	mov	r9, r1
 800678e:	4606      	mov	r6, r0
 8006790:	4611      	mov	r1, r2
 8006792:	4648      	mov	r0, r9
 8006794:	4614      	mov	r4, r2
 8006796:	f7ff ffdb 	bl	8006750 <__mcmp>
 800679a:	1e05      	subs	r5, r0, #0
 800679c:	d112      	bne.n	80067c4 <__mdiff+0x3c>
 800679e:	4629      	mov	r1, r5
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7ff fd5b 	bl	800625c <_Balloc>
 80067a6:	4602      	mov	r2, r0
 80067a8:	b928      	cbnz	r0, 80067b6 <__mdiff+0x2e>
 80067aa:	4b3f      	ldr	r3, [pc, #252]	@ (80068a8 <__mdiff+0x120>)
 80067ac:	f240 2137 	movw	r1, #567	@ 0x237
 80067b0:	483e      	ldr	r0, [pc, #248]	@ (80068ac <__mdiff+0x124>)
 80067b2:	f7fe fe9d 	bl	80054f0 <__assert_func>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067bc:	4610      	mov	r0, r2
 80067be:	b003      	add	sp, #12
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	bfbc      	itt	lt
 80067c6:	464b      	movlt	r3, r9
 80067c8:	46a1      	movlt	r9, r4
 80067ca:	4630      	mov	r0, r6
 80067cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067d0:	bfba      	itte	lt
 80067d2:	461c      	movlt	r4, r3
 80067d4:	2501      	movlt	r5, #1
 80067d6:	2500      	movge	r5, #0
 80067d8:	f7ff fd40 	bl	800625c <_Balloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	b918      	cbnz	r0, 80067e8 <__mdiff+0x60>
 80067e0:	4b31      	ldr	r3, [pc, #196]	@ (80068a8 <__mdiff+0x120>)
 80067e2:	f240 2145 	movw	r1, #581	@ 0x245
 80067e6:	e7e3      	b.n	80067b0 <__mdiff+0x28>
 80067e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80067ec:	6926      	ldr	r6, [r4, #16]
 80067ee:	60c5      	str	r5, [r0, #12]
 80067f0:	f109 0310 	add.w	r3, r9, #16
 80067f4:	f109 0514 	add.w	r5, r9, #20
 80067f8:	f104 0e14 	add.w	lr, r4, #20
 80067fc:	f100 0b14 	add.w	fp, r0, #20
 8006800:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006804:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	46d9      	mov	r9, fp
 800680c:	f04f 0c00 	mov.w	ip, #0
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006816:	f853 af04 	ldr.w	sl, [r3, #4]!
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	fa1f f38a 	uxth.w	r3, sl
 8006820:	4619      	mov	r1, r3
 8006822:	b283      	uxth	r3, r0
 8006824:	1acb      	subs	r3, r1, r3
 8006826:	0c00      	lsrs	r0, r0, #16
 8006828:	4463      	add	r3, ip
 800682a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800682e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006838:	4576      	cmp	r6, lr
 800683a:	f849 3b04 	str.w	r3, [r9], #4
 800683e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006842:	d8e5      	bhi.n	8006810 <__mdiff+0x88>
 8006844:	1b33      	subs	r3, r6, r4
 8006846:	3b15      	subs	r3, #21
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	3415      	adds	r4, #21
 800684e:	3304      	adds	r3, #4
 8006850:	42a6      	cmp	r6, r4
 8006852:	bf38      	it	cc
 8006854:	2304      	movcc	r3, #4
 8006856:	441d      	add	r5, r3
 8006858:	445b      	add	r3, fp
 800685a:	461e      	mov	r6, r3
 800685c:	462c      	mov	r4, r5
 800685e:	4544      	cmp	r4, r8
 8006860:	d30e      	bcc.n	8006880 <__mdiff+0xf8>
 8006862:	f108 0103 	add.w	r1, r8, #3
 8006866:	1b49      	subs	r1, r1, r5
 8006868:	f021 0103 	bic.w	r1, r1, #3
 800686c:	3d03      	subs	r5, #3
 800686e:	45a8      	cmp	r8, r5
 8006870:	bf38      	it	cc
 8006872:	2100      	movcc	r1, #0
 8006874:	440b      	add	r3, r1
 8006876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800687a:	b191      	cbz	r1, 80068a2 <__mdiff+0x11a>
 800687c:	6117      	str	r7, [r2, #16]
 800687e:	e79d      	b.n	80067bc <__mdiff+0x34>
 8006880:	f854 1b04 	ldr.w	r1, [r4], #4
 8006884:	46e6      	mov	lr, ip
 8006886:	0c08      	lsrs	r0, r1, #16
 8006888:	fa1c fc81 	uxtah	ip, ip, r1
 800688c:	4471      	add	r1, lr
 800688e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006892:	b289      	uxth	r1, r1
 8006894:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006898:	f846 1b04 	str.w	r1, [r6], #4
 800689c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068a0:	e7dd      	b.n	800685e <__mdiff+0xd6>
 80068a2:	3f01      	subs	r7, #1
 80068a4:	e7e7      	b.n	8006876 <__mdiff+0xee>
 80068a6:	bf00      	nop
 80068a8:	080077d4 	.word	0x080077d4
 80068ac:	080077e5 	.word	0x080077e5

080068b0 <__d2b>:
 80068b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	460f      	mov	r7, r1
 80068b6:	2101      	movs	r1, #1
 80068b8:	ec59 8b10 	vmov	r8, r9, d0
 80068bc:	4616      	mov	r6, r2
 80068be:	f7ff fccd 	bl	800625c <_Balloc>
 80068c2:	4604      	mov	r4, r0
 80068c4:	b930      	cbnz	r0, 80068d4 <__d2b+0x24>
 80068c6:	4602      	mov	r2, r0
 80068c8:	4b23      	ldr	r3, [pc, #140]	@ (8006958 <__d2b+0xa8>)
 80068ca:	4824      	ldr	r0, [pc, #144]	@ (800695c <__d2b+0xac>)
 80068cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80068d0:	f7fe fe0e 	bl	80054f0 <__assert_func>
 80068d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068dc:	b10d      	cbz	r5, 80068e2 <__d2b+0x32>
 80068de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	f1b8 0300 	subs.w	r3, r8, #0
 80068e8:	d023      	beq.n	8006932 <__d2b+0x82>
 80068ea:	4668      	mov	r0, sp
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	f7ff fd7c 	bl	80063ea <__lo0bits>
 80068f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80068f6:	b1d0      	cbz	r0, 800692e <__d2b+0x7e>
 80068f8:	f1c0 0320 	rsb	r3, r0, #32
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	430b      	orrs	r3, r1
 8006902:	40c2      	lsrs	r2, r0
 8006904:	6163      	str	r3, [r4, #20]
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	61a3      	str	r3, [r4, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf0c      	ite	eq
 8006910:	2201      	moveq	r2, #1
 8006912:	2202      	movne	r2, #2
 8006914:	6122      	str	r2, [r4, #16]
 8006916:	b1a5      	cbz	r5, 8006942 <__d2b+0x92>
 8006918:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800691c:	4405      	add	r5, r0
 800691e:	603d      	str	r5, [r7, #0]
 8006920:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006924:	6030      	str	r0, [r6, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692e:	6161      	str	r1, [r4, #20]
 8006930:	e7ea      	b.n	8006908 <__d2b+0x58>
 8006932:	a801      	add	r0, sp, #4
 8006934:	f7ff fd59 	bl	80063ea <__lo0bits>
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	6163      	str	r3, [r4, #20]
 800693c:	3020      	adds	r0, #32
 800693e:	2201      	movs	r2, #1
 8006940:	e7e8      	b.n	8006914 <__d2b+0x64>
 8006942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006946:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800694a:	6038      	str	r0, [r7, #0]
 800694c:	6918      	ldr	r0, [r3, #16]
 800694e:	f7ff fd2d 	bl	80063ac <__hi0bits>
 8006952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006956:	e7e5      	b.n	8006924 <__d2b+0x74>
 8006958:	080077d4 	.word	0x080077d4
 800695c:	080077e5 	.word	0x080077e5

08006960 <__ssputs_r>:
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	688e      	ldr	r6, [r1, #8]
 8006966:	461f      	mov	r7, r3
 8006968:	42be      	cmp	r6, r7
 800696a:	680b      	ldr	r3, [r1, #0]
 800696c:	4682      	mov	sl, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4690      	mov	r8, r2
 8006972:	d82d      	bhi.n	80069d0 <__ssputs_r+0x70>
 8006974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800697c:	d026      	beq.n	80069cc <__ssputs_r+0x6c>
 800697e:	6965      	ldr	r5, [r4, #20]
 8006980:	6909      	ldr	r1, [r1, #16]
 8006982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006986:	eba3 0901 	sub.w	r9, r3, r1
 800698a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800698e:	1c7b      	adds	r3, r7, #1
 8006990:	444b      	add	r3, r9
 8006992:	106d      	asrs	r5, r5, #1
 8006994:	429d      	cmp	r5, r3
 8006996:	bf38      	it	cc
 8006998:	461d      	movcc	r5, r3
 800699a:	0553      	lsls	r3, r2, #21
 800699c:	d527      	bpl.n	80069ee <__ssputs_r+0x8e>
 800699e:	4629      	mov	r1, r5
 80069a0:	f7fd fece 	bl	8004740 <_malloc_r>
 80069a4:	4606      	mov	r6, r0
 80069a6:	b360      	cbz	r0, 8006a02 <__ssputs_r+0xa2>
 80069a8:	6921      	ldr	r1, [r4, #16]
 80069aa:	464a      	mov	r2, r9
 80069ac:	f000 fa08 	bl	8006dc0 <memcpy>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	6126      	str	r6, [r4, #16]
 80069be:	6165      	str	r5, [r4, #20]
 80069c0:	444e      	add	r6, r9
 80069c2:	eba5 0509 	sub.w	r5, r5, r9
 80069c6:	6026      	str	r6, [r4, #0]
 80069c8:	60a5      	str	r5, [r4, #8]
 80069ca:	463e      	mov	r6, r7
 80069cc:	42be      	cmp	r6, r7
 80069ce:	d900      	bls.n	80069d2 <__ssputs_r+0x72>
 80069d0:	463e      	mov	r6, r7
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	4632      	mov	r2, r6
 80069d6:	4641      	mov	r1, r8
 80069d8:	f000 f9d8 	bl	8006d8c <memmove>
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	1b9b      	subs	r3, r3, r6
 80069e0:	60a3      	str	r3, [r4, #8]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	4433      	add	r3, r6
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	2000      	movs	r0, #0
 80069ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ee:	462a      	mov	r2, r5
 80069f0:	f000 fa21 	bl	8006e36 <_realloc_r>
 80069f4:	4606      	mov	r6, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d1e0      	bne.n	80069bc <__ssputs_r+0x5c>
 80069fa:	6921      	ldr	r1, [r4, #16]
 80069fc:	4650      	mov	r0, sl
 80069fe:	f7ff fbe3 	bl	80061c8 <_free_r>
 8006a02:	230c      	movs	r3, #12
 8006a04:	f8ca 3000 	str.w	r3, [sl]
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	e7e9      	b.n	80069ea <__ssputs_r+0x8a>
	...

08006a18 <_svfiprintf_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	898b      	ldrh	r3, [r1, #12]
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	b09d      	sub	sp, #116	@ 0x74
 8006a24:	4607      	mov	r7, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	d510      	bpl.n	8006a4e <_svfiprintf_r+0x36>
 8006a2c:	690b      	ldr	r3, [r1, #16]
 8006a2e:	b973      	cbnz	r3, 8006a4e <_svfiprintf_r+0x36>
 8006a30:	2140      	movs	r1, #64	@ 0x40
 8006a32:	f7fd fe85 	bl	8004740 <_malloc_r>
 8006a36:	6028      	str	r0, [r5, #0]
 8006a38:	6128      	str	r0, [r5, #16]
 8006a3a:	b930      	cbnz	r0, 8006a4a <_svfiprintf_r+0x32>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	b01d      	add	sp, #116	@ 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	2340      	movs	r3, #64	@ 0x40
 8006a4c:	616b      	str	r3, [r5, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a52:	2320      	movs	r3, #32
 8006a54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a5c:	2330      	movs	r3, #48	@ 0x30
 8006a5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bfc <_svfiprintf_r+0x1e4>
 8006a62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a72:	b10a      	cbz	r2, 8006a78 <_svfiprintf_r+0x60>
 8006a74:	2a25      	cmp	r2, #37	@ 0x25
 8006a76:	d1f9      	bne.n	8006a6c <_svfiprintf_r+0x54>
 8006a78:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7c:	d00b      	beq.n	8006a96 <_svfiprintf_r+0x7e>
 8006a7e:	465b      	mov	r3, fp
 8006a80:	4622      	mov	r2, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ff6b 	bl	8006960 <__ssputs_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f000 80a7 	beq.w	8006bde <_svfiprintf_r+0x1c6>
 8006a90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a92:	445a      	add	r2, fp
 8006a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a96:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 809f 	beq.w	8006bde <_svfiprintf_r+0x1c6>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aaa:	f10a 0a01 	add.w	sl, sl, #1
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ab8:	4654      	mov	r4, sl
 8006aba:	2205      	movs	r2, #5
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	484e      	ldr	r0, [pc, #312]	@ (8006bfc <_svfiprintf_r+0x1e4>)
 8006ac2:	f7f9 fb8d 	bl	80001e0 <memchr>
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	b9d8      	cbnz	r0, 8006b02 <_svfiprintf_r+0xea>
 8006aca:	06d0      	lsls	r0, r2, #27
 8006acc:	bf44      	itt	mi
 8006ace:	2320      	movmi	r3, #32
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ad4:	0711      	lsls	r1, r2, #28
 8006ad6:	bf44      	itt	mi
 8006ad8:	232b      	movmi	r3, #43	@ 0x2b
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ade:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae4:	d015      	beq.n	8006b12 <_svfiprintf_r+0xfa>
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	4654      	mov	r4, sl
 8006aea:	2000      	movs	r0, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4621      	mov	r1, r4
 8006af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af6:	3b30      	subs	r3, #48	@ 0x30
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d94b      	bls.n	8006b94 <_svfiprintf_r+0x17c>
 8006afc:	b1b0      	cbz	r0, 8006b2c <_svfiprintf_r+0x114>
 8006afe:	9207      	str	r2, [sp, #28]
 8006b00:	e014      	b.n	8006b2c <_svfiprintf_r+0x114>
 8006b02:	eba0 0308 	sub.w	r3, r0, r8
 8006b06:	fa09 f303 	lsl.w	r3, r9, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	46a2      	mov	sl, r4
 8006b10:	e7d2      	b.n	8006ab8 <_svfiprintf_r+0xa0>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	1d19      	adds	r1, r3, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	9103      	str	r1, [sp, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfbb      	ittet	lt
 8006b1e:	425b      	neglt	r3, r3
 8006b20:	f042 0202 	orrlt.w	r2, r2, #2
 8006b24:	9307      	strge	r3, [sp, #28]
 8006b26:	9307      	strlt	r3, [sp, #28]
 8006b28:	bfb8      	it	lt
 8006b2a:	9204      	strlt	r2, [sp, #16]
 8006b2c:	7823      	ldrb	r3, [r4, #0]
 8006b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b30:	d10a      	bne.n	8006b48 <_svfiprintf_r+0x130>
 8006b32:	7863      	ldrb	r3, [r4, #1]
 8006b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b36:	d132      	bne.n	8006b9e <_svfiprintf_r+0x186>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9203      	str	r2, [sp, #12]
 8006b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b44:	3402      	adds	r4, #2
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c0c <_svfiprintf_r+0x1f4>
 8006b4c:	7821      	ldrb	r1, [r4, #0]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	4650      	mov	r0, sl
 8006b52:	f7f9 fb45 	bl	80001e0 <memchr>
 8006b56:	b138      	cbz	r0, 8006b68 <_svfiprintf_r+0x150>
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	eba0 000a 	sub.w	r0, r0, sl
 8006b5e:	2240      	movs	r2, #64	@ 0x40
 8006b60:	4082      	lsls	r2, r0
 8006b62:	4313      	orrs	r3, r2
 8006b64:	3401      	adds	r4, #1
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	4824      	ldr	r0, [pc, #144]	@ (8006c00 <_svfiprintf_r+0x1e8>)
 8006b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b72:	2206      	movs	r2, #6
 8006b74:	f7f9 fb34 	bl	80001e0 <memchr>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d036      	beq.n	8006bea <_svfiprintf_r+0x1d2>
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <_svfiprintf_r+0x1ec>)
 8006b7e:	bb1b      	cbnz	r3, 8006bc8 <_svfiprintf_r+0x1b0>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	3307      	adds	r3, #7
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	3308      	adds	r3, #8
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	4433      	add	r3, r6
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	e76a      	b.n	8006a6a <_svfiprintf_r+0x52>
 8006b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b98:	460c      	mov	r4, r1
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e7a8      	b.n	8006af0 <_svfiprintf_r+0xd8>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	3401      	adds	r4, #1
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0c0a 	mov.w	ip, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb0:	3a30      	subs	r2, #48	@ 0x30
 8006bb2:	2a09      	cmp	r2, #9
 8006bb4:	d903      	bls.n	8006bbe <_svfiprintf_r+0x1a6>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0c6      	beq.n	8006b48 <_svfiprintf_r+0x130>
 8006bba:	9105      	str	r1, [sp, #20]
 8006bbc:	e7c4      	b.n	8006b48 <_svfiprintf_r+0x130>
 8006bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e7f0      	b.n	8006baa <_svfiprintf_r+0x192>
 8006bc8:	ab03      	add	r3, sp, #12
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	462a      	mov	r2, r5
 8006bce:	4b0e      	ldr	r3, [pc, #56]	@ (8006c08 <_svfiprintf_r+0x1f0>)
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f7fd ff1e 	bl	8004a14 <_printf_float>
 8006bd8:	1c42      	adds	r2, r0, #1
 8006bda:	4606      	mov	r6, r0
 8006bdc:	d1d6      	bne.n	8006b8c <_svfiprintf_r+0x174>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	065b      	lsls	r3, r3, #25
 8006be2:	f53f af2d 	bmi.w	8006a40 <_svfiprintf_r+0x28>
 8006be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006be8:	e72c      	b.n	8006a44 <_svfiprintf_r+0x2c>
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <_svfiprintf_r+0x1f0>)
 8006bf2:	a904      	add	r1, sp, #16
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7fe f9a5 	bl	8004f44 <_printf_i>
 8006bfa:	e7ed      	b.n	8006bd8 <_svfiprintf_r+0x1c0>
 8006bfc:	08007940 	.word	0x08007940
 8006c00:	0800794a 	.word	0x0800794a
 8006c04:	08004a15 	.word	0x08004a15
 8006c08:	08006961 	.word	0x08006961
 8006c0c:	08007946 	.word	0x08007946

08006c10 <__sflush_r>:
 8006c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c18:	0716      	lsls	r6, r2, #28
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	d454      	bmi.n	8006cca <__sflush_r+0xba>
 8006c20:	684b      	ldr	r3, [r1, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dc02      	bgt.n	8006c2c <__sflush_r+0x1c>
 8006c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dd48      	ble.n	8006cbe <__sflush_r+0xae>
 8006c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	d045      	beq.n	8006cbe <__sflush_r+0xae>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c38:	682f      	ldr	r7, [r5, #0]
 8006c3a:	6a21      	ldr	r1, [r4, #32]
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	d030      	beq.n	8006ca2 <__sflush_r+0x92>
 8006c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	0759      	lsls	r1, r3, #29
 8006c46:	d505      	bpl.n	8006c54 <__sflush_r+0x44>
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c4e:	b10b      	cbz	r3, 8006c54 <__sflush_r+0x44>
 8006c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c58:	6a21      	ldr	r1, [r4, #32]
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	47b0      	blx	r6
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	d106      	bne.n	8006c72 <__sflush_r+0x62>
 8006c64:	6829      	ldr	r1, [r5, #0]
 8006c66:	291d      	cmp	r1, #29
 8006c68:	d82b      	bhi.n	8006cc2 <__sflush_r+0xb2>
 8006c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006d14 <__sflush_r+0x104>)
 8006c6c:	410a      	asrs	r2, r1
 8006c6e:	07d6      	lsls	r6, r2, #31
 8006c70:	d427      	bmi.n	8006cc2 <__sflush_r+0xb2>
 8006c72:	2200      	movs	r2, #0
 8006c74:	6062      	str	r2, [r4, #4]
 8006c76:	04d9      	lsls	r1, r3, #19
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	d504      	bpl.n	8006c88 <__sflush_r+0x78>
 8006c7e:	1c42      	adds	r2, r0, #1
 8006c80:	d101      	bne.n	8006c86 <__sflush_r+0x76>
 8006c82:	682b      	ldr	r3, [r5, #0]
 8006c84:	b903      	cbnz	r3, 8006c88 <__sflush_r+0x78>
 8006c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c8a:	602f      	str	r7, [r5, #0]
 8006c8c:	b1b9      	cbz	r1, 8006cbe <__sflush_r+0xae>
 8006c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c92:	4299      	cmp	r1, r3
 8006c94:	d002      	beq.n	8006c9c <__sflush_r+0x8c>
 8006c96:	4628      	mov	r0, r5
 8006c98:	f7ff fa96 	bl	80061c8 <_free_r>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ca0:	e00d      	b.n	8006cbe <__sflush_r+0xae>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b0      	blx	r6
 8006ca8:	4602      	mov	r2, r0
 8006caa:	1c50      	adds	r0, r2, #1
 8006cac:	d1c9      	bne.n	8006c42 <__sflush_r+0x32>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0c6      	beq.n	8006c42 <__sflush_r+0x32>
 8006cb4:	2b1d      	cmp	r3, #29
 8006cb6:	d001      	beq.n	8006cbc <__sflush_r+0xac>
 8006cb8:	2b16      	cmp	r3, #22
 8006cba:	d11e      	bne.n	8006cfa <__sflush_r+0xea>
 8006cbc:	602f      	str	r7, [r5, #0]
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e022      	b.n	8006d08 <__sflush_r+0xf8>
 8006cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	e01b      	b.n	8006d02 <__sflush_r+0xf2>
 8006cca:	690f      	ldr	r7, [r1, #16]
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	d0f6      	beq.n	8006cbe <__sflush_r+0xae>
 8006cd0:	0793      	lsls	r3, r2, #30
 8006cd2:	680e      	ldr	r6, [r1, #0]
 8006cd4:	bf08      	it	eq
 8006cd6:	694b      	ldreq	r3, [r1, #20]
 8006cd8:	600f      	str	r7, [r1, #0]
 8006cda:	bf18      	it	ne
 8006cdc:	2300      	movne	r3, #0
 8006cde:	eba6 0807 	sub.w	r8, r6, r7
 8006ce2:	608b      	str	r3, [r1, #8]
 8006ce4:	f1b8 0f00 	cmp.w	r8, #0
 8006ce8:	dde9      	ble.n	8006cbe <__sflush_r+0xae>
 8006cea:	6a21      	ldr	r1, [r4, #32]
 8006cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cee:	4643      	mov	r3, r8
 8006cf0:	463a      	mov	r2, r7
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b0      	blx	r6
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dc08      	bgt.n	8006d0c <__sflush_r+0xfc>
 8006cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d0c:	4407      	add	r7, r0
 8006d0e:	eba8 0800 	sub.w	r8, r8, r0
 8006d12:	e7e7      	b.n	8006ce4 <__sflush_r+0xd4>
 8006d14:	dfbffffe 	.word	0xdfbffffe

08006d18 <_fflush_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	690b      	ldr	r3, [r1, #16]
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b913      	cbnz	r3, 8006d28 <_fflush_r+0x10>
 8006d22:	2500      	movs	r5, #0
 8006d24:	4628      	mov	r0, r5
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	b118      	cbz	r0, 8006d32 <_fflush_r+0x1a>
 8006d2a:	6a03      	ldr	r3, [r0, #32]
 8006d2c:	b90b      	cbnz	r3, 8006d32 <_fflush_r+0x1a>
 8006d2e:	f7fe fab5 	bl	800529c <__sinit>
 8006d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f3      	beq.n	8006d22 <_fflush_r+0xa>
 8006d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d3c:	07d0      	lsls	r0, r2, #31
 8006d3e:	d404      	bmi.n	8006d4a <_fflush_r+0x32>
 8006d40:	0599      	lsls	r1, r3, #22
 8006d42:	d402      	bmi.n	8006d4a <_fflush_r+0x32>
 8006d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d46:	f7fe fbd0 	bl	80054ea <__retarget_lock_acquire_recursive>
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	f7ff ff5f 	bl	8006c10 <__sflush_r>
 8006d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d54:	07da      	lsls	r2, r3, #31
 8006d56:	4605      	mov	r5, r0
 8006d58:	d4e4      	bmi.n	8006d24 <_fflush_r+0xc>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	059b      	lsls	r3, r3, #22
 8006d5e:	d4e1      	bmi.n	8006d24 <_fflush_r+0xc>
 8006d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d62:	f7fe fbc3 	bl	80054ec <__retarget_lock_release_recursive>
 8006d66:	e7dd      	b.n	8006d24 <_fflush_r+0xc>

08006d68 <fiprintf>:
 8006d68:	b40e      	push	{r1, r2, r3}
 8006d6a:	b503      	push	{r0, r1, lr}
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	ab03      	add	r3, sp, #12
 8006d70:	4805      	ldr	r0, [pc, #20]	@ (8006d88 <fiprintf+0x20>)
 8006d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d76:	6800      	ldr	r0, [r0, #0]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	f000 f8c1 	bl	8006f00 <_vfiprintf_r>
 8006d7e:	b002      	add	sp, #8
 8006d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d84:	b003      	add	sp, #12
 8006d86:	4770      	bx	lr
 8006d88:	20000090 	.word	0x20000090

08006d8c <memmove>:
 8006d8c:	4288      	cmp	r0, r1
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	eb01 0402 	add.w	r4, r1, r2
 8006d94:	d902      	bls.n	8006d9c <memmove+0x10>
 8006d96:	4284      	cmp	r4, r0
 8006d98:	4623      	mov	r3, r4
 8006d9a:	d807      	bhi.n	8006dac <memmove+0x20>
 8006d9c:	1e43      	subs	r3, r0, #1
 8006d9e:	42a1      	cmp	r1, r4
 8006da0:	d008      	beq.n	8006db4 <memmove+0x28>
 8006da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006daa:	e7f8      	b.n	8006d9e <memmove+0x12>
 8006dac:	4402      	add	r2, r0
 8006dae:	4601      	mov	r1, r0
 8006db0:	428a      	cmp	r2, r1
 8006db2:	d100      	bne.n	8006db6 <memmove+0x2a>
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dbe:	e7f7      	b.n	8006db0 <memmove+0x24>

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <abort>:
 8006ddc:	b508      	push	{r3, lr}
 8006dde:	2006      	movs	r0, #6
 8006de0:	f000 fa62 	bl	80072a8 <raise>
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7fa ffed 	bl	8001dc4 <_exit>

08006dea <_calloc_r>:
 8006dea:	b570      	push	{r4, r5, r6, lr}
 8006dec:	fba1 5402 	umull	r5, r4, r1, r2
 8006df0:	b93c      	cbnz	r4, 8006e02 <_calloc_r+0x18>
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7fd fca4 	bl	8004740 <_malloc_r>
 8006df8:	4606      	mov	r6, r0
 8006dfa:	b928      	cbnz	r0, 8006e08 <_calloc_r+0x1e>
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	220c      	movs	r2, #12
 8006e04:	6002      	str	r2, [r0, #0]
 8006e06:	e7f9      	b.n	8006dfc <_calloc_r+0x12>
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7fe fadf 	bl	80053ce <memset>
 8006e10:	e7f5      	b.n	8006dfe <_calloc_r+0x14>

08006e12 <__ascii_mbtowc>:
 8006e12:	b082      	sub	sp, #8
 8006e14:	b901      	cbnz	r1, 8006e18 <__ascii_mbtowc+0x6>
 8006e16:	a901      	add	r1, sp, #4
 8006e18:	b142      	cbz	r2, 8006e2c <__ascii_mbtowc+0x1a>
 8006e1a:	b14b      	cbz	r3, 8006e30 <__ascii_mbtowc+0x1e>
 8006e1c:	7813      	ldrb	r3, [r2, #0]
 8006e1e:	600b      	str	r3, [r1, #0]
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	1e10      	subs	r0, r2, #0
 8006e24:	bf18      	it	ne
 8006e26:	2001      	movne	r0, #1
 8006e28:	b002      	add	sp, #8
 8006e2a:	4770      	bx	lr
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	e7fb      	b.n	8006e28 <__ascii_mbtowc+0x16>
 8006e30:	f06f 0001 	mvn.w	r0, #1
 8006e34:	e7f8      	b.n	8006e28 <__ascii_mbtowc+0x16>

08006e36 <_realloc_r>:
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	4615      	mov	r5, r2
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b921      	cbnz	r1, 8006e4c <_realloc_r+0x16>
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	4611      	mov	r1, r2
 8006e48:	f7fd bc7a 	b.w	8004740 <_malloc_r>
 8006e4c:	b92a      	cbnz	r2, 8006e5a <_realloc_r+0x24>
 8006e4e:	f7ff f9bb 	bl	80061c8 <_free_r>
 8006e52:	2400      	movs	r4, #0
 8006e54:	4620      	mov	r0, r4
 8006e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5a:	f000 fa41 	bl	80072e0 <_malloc_usable_size_r>
 8006e5e:	4285      	cmp	r5, r0
 8006e60:	4606      	mov	r6, r0
 8006e62:	d802      	bhi.n	8006e6a <_realloc_r+0x34>
 8006e64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e68:	d8f4      	bhi.n	8006e54 <_realloc_r+0x1e>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	f7fd fc67 	bl	8004740 <_malloc_r>
 8006e72:	4607      	mov	r7, r0
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d0ec      	beq.n	8006e52 <_realloc_r+0x1c>
 8006e78:	42b5      	cmp	r5, r6
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	bf28      	it	cs
 8006e80:	4632      	movcs	r2, r6
 8006e82:	f7ff ff9d 	bl	8006dc0 <memcpy>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f7ff f99d 	bl	80061c8 <_free_r>
 8006e8e:	463c      	mov	r4, r7
 8006e90:	e7e0      	b.n	8006e54 <_realloc_r+0x1e>

08006e92 <__ascii_wctomb>:
 8006e92:	4603      	mov	r3, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	b141      	cbz	r1, 8006eaa <__ascii_wctomb+0x18>
 8006e98:	2aff      	cmp	r2, #255	@ 0xff
 8006e9a:	d904      	bls.n	8006ea6 <__ascii_wctomb+0x14>
 8006e9c:	228a      	movs	r2, #138	@ 0x8a
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	4770      	bx	lr
 8006ea6:	700a      	strb	r2, [r1, #0]
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	4770      	bx	lr

08006eac <__sfputc_r>:
 8006eac:	6893      	ldr	r3, [r2, #8]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	b410      	push	{r4}
 8006eb4:	6093      	str	r3, [r2, #8]
 8006eb6:	da08      	bge.n	8006eca <__sfputc_r+0x1e>
 8006eb8:	6994      	ldr	r4, [r2, #24]
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	db01      	blt.n	8006ec2 <__sfputc_r+0x16>
 8006ebe:	290a      	cmp	r1, #10
 8006ec0:	d103      	bne.n	8006eca <__sfputc_r+0x1e>
 8006ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec6:	f000 b933 	b.w	8007130 <__swbuf_r>
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	1c58      	adds	r0, r3, #1
 8006ece:	6010      	str	r0, [r2, #0]
 8006ed0:	7019      	strb	r1, [r3, #0]
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <__sfputs_r>:
 8006eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	18d5      	adds	r5, r2, r3
 8006ee4:	42ac      	cmp	r4, r5
 8006ee6:	d101      	bne.n	8006eec <__sfputs_r+0x12>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e007      	b.n	8006efc <__sfputs_r+0x22>
 8006eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef0:	463a      	mov	r2, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ffda 	bl	8006eac <__sfputc_r>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d1f3      	bne.n	8006ee4 <__sfputs_r+0xa>
 8006efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f00 <_vfiprintf_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	460d      	mov	r5, r1
 8006f06:	b09d      	sub	sp, #116	@ 0x74
 8006f08:	4614      	mov	r4, r2
 8006f0a:	4698      	mov	r8, r3
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	b118      	cbz	r0, 8006f18 <_vfiprintf_r+0x18>
 8006f10:	6a03      	ldr	r3, [r0, #32]
 8006f12:	b90b      	cbnz	r3, 8006f18 <_vfiprintf_r+0x18>
 8006f14:	f7fe f9c2 	bl	800529c <__sinit>
 8006f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f1a:	07d9      	lsls	r1, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_vfiprintf_r+0x2a>
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_vfiprintf_r+0x2a>
 8006f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f26:	f7fe fae0 	bl	80054ea <__retarget_lock_acquire_recursive>
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	071b      	lsls	r3, r3, #28
 8006f2e:	d501      	bpl.n	8006f34 <_vfiprintf_r+0x34>
 8006f30:	692b      	ldr	r3, [r5, #16]
 8006f32:	b99b      	cbnz	r3, 8006f5c <_vfiprintf_r+0x5c>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	f000 f938 	bl	80071ac <__swsetup_r>
 8006f3c:	b170      	cbz	r0, 8006f5c <_vfiprintf_r+0x5c>
 8006f3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f40:	07dc      	lsls	r4, r3, #31
 8006f42:	d504      	bpl.n	8006f4e <_vfiprintf_r+0x4e>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	b01d      	add	sp, #116	@ 0x74
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	0598      	lsls	r0, r3, #22
 8006f52:	d4f7      	bmi.n	8006f44 <_vfiprintf_r+0x44>
 8006f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f56:	f7fe fac9 	bl	80054ec <__retarget_lock_release_recursive>
 8006f5a:	e7f3      	b.n	8006f44 <_vfiprintf_r+0x44>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f60:	2320      	movs	r3, #32
 8006f62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f6a:	2330      	movs	r3, #48	@ 0x30
 8006f6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800711c <_vfiprintf_r+0x21c>
 8006f70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f74:	f04f 0901 	mov.w	r9, #1
 8006f78:	4623      	mov	r3, r4
 8006f7a:	469a      	mov	sl, r3
 8006f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f80:	b10a      	cbz	r2, 8006f86 <_vfiprintf_r+0x86>
 8006f82:	2a25      	cmp	r2, #37	@ 0x25
 8006f84:	d1f9      	bne.n	8006f7a <_vfiprintf_r+0x7a>
 8006f86:	ebba 0b04 	subs.w	fp, sl, r4
 8006f8a:	d00b      	beq.n	8006fa4 <_vfiprintf_r+0xa4>
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff ffa1 	bl	8006eda <__sfputs_r>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f000 80a7 	beq.w	80070ec <_vfiprintf_r+0x1ec>
 8006f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa0:	445a      	add	r2, fp
 8006fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 809f 	beq.w	80070ec <_vfiprintf_r+0x1ec>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb8:	f10a 0a01 	add.w	sl, sl, #1
 8006fbc:	9304      	str	r3, [sp, #16]
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fc6:	4654      	mov	r4, sl
 8006fc8:	2205      	movs	r2, #5
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	4853      	ldr	r0, [pc, #332]	@ (800711c <_vfiprintf_r+0x21c>)
 8006fd0:	f7f9 f906 	bl	80001e0 <memchr>
 8006fd4:	9a04      	ldr	r2, [sp, #16]
 8006fd6:	b9d8      	cbnz	r0, 8007010 <_vfiprintf_r+0x110>
 8006fd8:	06d1      	lsls	r1, r2, #27
 8006fda:	bf44      	itt	mi
 8006fdc:	2320      	movmi	r3, #32
 8006fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fe2:	0713      	lsls	r3, r2, #28
 8006fe4:	bf44      	itt	mi
 8006fe6:	232b      	movmi	r3, #43	@ 0x2b
 8006fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ff2:	d015      	beq.n	8007020 <_vfiprintf_r+0x120>
 8006ff4:	9a07      	ldr	r2, [sp, #28]
 8006ff6:	4654      	mov	r4, sl
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f04f 0c0a 	mov.w	ip, #10
 8006ffe:	4621      	mov	r1, r4
 8007000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007004:	3b30      	subs	r3, #48	@ 0x30
 8007006:	2b09      	cmp	r3, #9
 8007008:	d94b      	bls.n	80070a2 <_vfiprintf_r+0x1a2>
 800700a:	b1b0      	cbz	r0, 800703a <_vfiprintf_r+0x13a>
 800700c:	9207      	str	r2, [sp, #28]
 800700e:	e014      	b.n	800703a <_vfiprintf_r+0x13a>
 8007010:	eba0 0308 	sub.w	r3, r0, r8
 8007014:	fa09 f303 	lsl.w	r3, r9, r3
 8007018:	4313      	orrs	r3, r2
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	46a2      	mov	sl, r4
 800701e:	e7d2      	b.n	8006fc6 <_vfiprintf_r+0xc6>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	1d19      	adds	r1, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfbb      	ittet	lt
 800702c:	425b      	neglt	r3, r3
 800702e:	f042 0202 	orrlt.w	r2, r2, #2
 8007032:	9307      	strge	r3, [sp, #28]
 8007034:	9307      	strlt	r3, [sp, #28]
 8007036:	bfb8      	it	lt
 8007038:	9204      	strlt	r2, [sp, #16]
 800703a:	7823      	ldrb	r3, [r4, #0]
 800703c:	2b2e      	cmp	r3, #46	@ 0x2e
 800703e:	d10a      	bne.n	8007056 <_vfiprintf_r+0x156>
 8007040:	7863      	ldrb	r3, [r4, #1]
 8007042:	2b2a      	cmp	r3, #42	@ 0x2a
 8007044:	d132      	bne.n	80070ac <_vfiprintf_r+0x1ac>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	9203      	str	r2, [sp, #12]
 800704e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007052:	3402      	adds	r4, #2
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800712c <_vfiprintf_r+0x22c>
 800705a:	7821      	ldrb	r1, [r4, #0]
 800705c:	2203      	movs	r2, #3
 800705e:	4650      	mov	r0, sl
 8007060:	f7f9 f8be 	bl	80001e0 <memchr>
 8007064:	b138      	cbz	r0, 8007076 <_vfiprintf_r+0x176>
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	eba0 000a 	sub.w	r0, r0, sl
 800706c:	2240      	movs	r2, #64	@ 0x40
 800706e:	4082      	lsls	r2, r0
 8007070:	4313      	orrs	r3, r2
 8007072:	3401      	adds	r4, #1
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707a:	4829      	ldr	r0, [pc, #164]	@ (8007120 <_vfiprintf_r+0x220>)
 800707c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007080:	2206      	movs	r2, #6
 8007082:	f7f9 f8ad 	bl	80001e0 <memchr>
 8007086:	2800      	cmp	r0, #0
 8007088:	d03f      	beq.n	800710a <_vfiprintf_r+0x20a>
 800708a:	4b26      	ldr	r3, [pc, #152]	@ (8007124 <_vfiprintf_r+0x224>)
 800708c:	bb1b      	cbnz	r3, 80070d6 <_vfiprintf_r+0x1d6>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	f023 0307 	bic.w	r3, r3, #7
 8007096:	3308      	adds	r3, #8
 8007098:	9303      	str	r3, [sp, #12]
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	443b      	add	r3, r7
 800709e:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a0:	e76a      	b.n	8006f78 <_vfiprintf_r+0x78>
 80070a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070a6:	460c      	mov	r4, r1
 80070a8:	2001      	movs	r0, #1
 80070aa:	e7a8      	b.n	8006ffe <_vfiprintf_r+0xfe>
 80070ac:	2300      	movs	r3, #0
 80070ae:	3401      	adds	r4, #1
 80070b0:	9305      	str	r3, [sp, #20]
 80070b2:	4619      	mov	r1, r3
 80070b4:	f04f 0c0a 	mov.w	ip, #10
 80070b8:	4620      	mov	r0, r4
 80070ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070be:	3a30      	subs	r2, #48	@ 0x30
 80070c0:	2a09      	cmp	r2, #9
 80070c2:	d903      	bls.n	80070cc <_vfiprintf_r+0x1cc>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0c6      	beq.n	8007056 <_vfiprintf_r+0x156>
 80070c8:	9105      	str	r1, [sp, #20]
 80070ca:	e7c4      	b.n	8007056 <_vfiprintf_r+0x156>
 80070cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80070d0:	4604      	mov	r4, r0
 80070d2:	2301      	movs	r3, #1
 80070d4:	e7f0      	b.n	80070b8 <_vfiprintf_r+0x1b8>
 80070d6:	ab03      	add	r3, sp, #12
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	462a      	mov	r2, r5
 80070dc:	4b12      	ldr	r3, [pc, #72]	@ (8007128 <_vfiprintf_r+0x228>)
 80070de:	a904      	add	r1, sp, #16
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7fd fc97 	bl	8004a14 <_printf_float>
 80070e6:	4607      	mov	r7, r0
 80070e8:	1c78      	adds	r0, r7, #1
 80070ea:	d1d6      	bne.n	800709a <_vfiprintf_r+0x19a>
 80070ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070ee:	07d9      	lsls	r1, r3, #31
 80070f0:	d405      	bmi.n	80070fe <_vfiprintf_r+0x1fe>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	059a      	lsls	r2, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_vfiprintf_r+0x1fe>
 80070f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070fa:	f7fe f9f7 	bl	80054ec <__retarget_lock_release_recursive>
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	065b      	lsls	r3, r3, #25
 8007102:	f53f af1f 	bmi.w	8006f44 <_vfiprintf_r+0x44>
 8007106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007108:	e71e      	b.n	8006f48 <_vfiprintf_r+0x48>
 800710a:	ab03      	add	r3, sp, #12
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	462a      	mov	r2, r5
 8007110:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <_vfiprintf_r+0x228>)
 8007112:	a904      	add	r1, sp, #16
 8007114:	4630      	mov	r0, r6
 8007116:	f7fd ff15 	bl	8004f44 <_printf_i>
 800711a:	e7e4      	b.n	80070e6 <_vfiprintf_r+0x1e6>
 800711c:	08007940 	.word	0x08007940
 8007120:	0800794a 	.word	0x0800794a
 8007124:	08004a15 	.word	0x08004a15
 8007128:	08006edb 	.word	0x08006edb
 800712c:	08007946 	.word	0x08007946

08007130 <__swbuf_r>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	460e      	mov	r6, r1
 8007134:	4614      	mov	r4, r2
 8007136:	4605      	mov	r5, r0
 8007138:	b118      	cbz	r0, 8007142 <__swbuf_r+0x12>
 800713a:	6a03      	ldr	r3, [r0, #32]
 800713c:	b90b      	cbnz	r3, 8007142 <__swbuf_r+0x12>
 800713e:	f7fe f8ad 	bl	800529c <__sinit>
 8007142:	69a3      	ldr	r3, [r4, #24]
 8007144:	60a3      	str	r3, [r4, #8]
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	071a      	lsls	r2, r3, #28
 800714a:	d501      	bpl.n	8007150 <__swbuf_r+0x20>
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	b943      	cbnz	r3, 8007162 <__swbuf_r+0x32>
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f82a 	bl	80071ac <__swsetup_r>
 8007158:	b118      	cbz	r0, 8007162 <__swbuf_r+0x32>
 800715a:	f04f 37ff 	mov.w	r7, #4294967295
 800715e:	4638      	mov	r0, r7
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	6922      	ldr	r2, [r4, #16]
 8007166:	1a98      	subs	r0, r3, r2
 8007168:	6963      	ldr	r3, [r4, #20]
 800716a:	b2f6      	uxtb	r6, r6
 800716c:	4283      	cmp	r3, r0
 800716e:	4637      	mov	r7, r6
 8007170:	dc05      	bgt.n	800717e <__swbuf_r+0x4e>
 8007172:	4621      	mov	r1, r4
 8007174:	4628      	mov	r0, r5
 8007176:	f7ff fdcf 	bl	8006d18 <_fflush_r>
 800717a:	2800      	cmp	r0, #0
 800717c:	d1ed      	bne.n	800715a <__swbuf_r+0x2a>
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	3b01      	subs	r3, #1
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	701e      	strb	r6, [r3, #0]
 800718c:	6962      	ldr	r2, [r4, #20]
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	429a      	cmp	r2, r3
 8007192:	d004      	beq.n	800719e <__swbuf_r+0x6e>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	07db      	lsls	r3, r3, #31
 8007198:	d5e1      	bpl.n	800715e <__swbuf_r+0x2e>
 800719a:	2e0a      	cmp	r6, #10
 800719c:	d1df      	bne.n	800715e <__swbuf_r+0x2e>
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f7ff fdb9 	bl	8006d18 <_fflush_r>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d0d9      	beq.n	800715e <__swbuf_r+0x2e>
 80071aa:	e7d6      	b.n	800715a <__swbuf_r+0x2a>

080071ac <__swsetup_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4b29      	ldr	r3, [pc, #164]	@ (8007254 <__swsetup_r+0xa8>)
 80071b0:	4605      	mov	r5, r0
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	460c      	mov	r4, r1
 80071b6:	b118      	cbz	r0, 80071c0 <__swsetup_r+0x14>
 80071b8:	6a03      	ldr	r3, [r0, #32]
 80071ba:	b90b      	cbnz	r3, 80071c0 <__swsetup_r+0x14>
 80071bc:	f7fe f86e 	bl	800529c <__sinit>
 80071c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c4:	0719      	lsls	r1, r3, #28
 80071c6:	d422      	bmi.n	800720e <__swsetup_r+0x62>
 80071c8:	06da      	lsls	r2, r3, #27
 80071ca:	d407      	bmi.n	80071dc <__swsetup_r+0x30>
 80071cc:	2209      	movs	r2, #9
 80071ce:	602a      	str	r2, [r5, #0]
 80071d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295
 80071da:	e033      	b.n	8007244 <__swsetup_r+0x98>
 80071dc:	0758      	lsls	r0, r3, #29
 80071de:	d512      	bpl.n	8007206 <__swsetup_r+0x5a>
 80071e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e2:	b141      	cbz	r1, 80071f6 <__swsetup_r+0x4a>
 80071e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <__swsetup_r+0x46>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7fe ffeb 	bl	80061c8 <_free_r>
 80071f2:	2300      	movs	r3, #0
 80071f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	2300      	movs	r3, #0
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	f043 0308 	orr.w	r3, r3, #8
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	b94b      	cbnz	r3, 8007226 <__swsetup_r+0x7a>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800721c:	d003      	beq.n	8007226 <__swsetup_r+0x7a>
 800721e:	4621      	mov	r1, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f000 f88b 	bl	800733c <__smakebuf_r>
 8007226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722a:	f013 0201 	ands.w	r2, r3, #1
 800722e:	d00a      	beq.n	8007246 <__swsetup_r+0x9a>
 8007230:	2200      	movs	r2, #0
 8007232:	60a2      	str	r2, [r4, #8]
 8007234:	6962      	ldr	r2, [r4, #20]
 8007236:	4252      	negs	r2, r2
 8007238:	61a2      	str	r2, [r4, #24]
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	b942      	cbnz	r2, 8007250 <__swsetup_r+0xa4>
 800723e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007242:	d1c5      	bne.n	80071d0 <__swsetup_r+0x24>
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	0799      	lsls	r1, r3, #30
 8007248:	bf58      	it	pl
 800724a:	6962      	ldrpl	r2, [r4, #20]
 800724c:	60a2      	str	r2, [r4, #8]
 800724e:	e7f4      	b.n	800723a <__swsetup_r+0x8e>
 8007250:	2000      	movs	r0, #0
 8007252:	e7f7      	b.n	8007244 <__swsetup_r+0x98>
 8007254:	20000090 	.word	0x20000090

08007258 <_raise_r>:
 8007258:	291f      	cmp	r1, #31
 800725a:	b538      	push	{r3, r4, r5, lr}
 800725c:	4605      	mov	r5, r0
 800725e:	460c      	mov	r4, r1
 8007260:	d904      	bls.n	800726c <_raise_r+0x14>
 8007262:	2316      	movs	r3, #22
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	f04f 30ff 	mov.w	r0, #4294967295
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800726e:	b112      	cbz	r2, 8007276 <_raise_r+0x1e>
 8007270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007274:	b94b      	cbnz	r3, 800728a <_raise_r+0x32>
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f830 	bl	80072dc <_getpid_r>
 800727c:	4622      	mov	r2, r4
 800727e:	4601      	mov	r1, r0
 8007280:	4628      	mov	r0, r5
 8007282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007286:	f000 b817 	b.w	80072b8 <_kill_r>
 800728a:	2b01      	cmp	r3, #1
 800728c:	d00a      	beq.n	80072a4 <_raise_r+0x4c>
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	d103      	bne.n	800729a <_raise_r+0x42>
 8007292:	2316      	movs	r3, #22
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	2001      	movs	r0, #1
 8007298:	e7e7      	b.n	800726a <_raise_r+0x12>
 800729a:	2100      	movs	r1, #0
 800729c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072a0:	4620      	mov	r0, r4
 80072a2:	4798      	blx	r3
 80072a4:	2000      	movs	r0, #0
 80072a6:	e7e0      	b.n	800726a <_raise_r+0x12>

080072a8 <raise>:
 80072a8:	4b02      	ldr	r3, [pc, #8]	@ (80072b4 <raise+0xc>)
 80072aa:	4601      	mov	r1, r0
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f7ff bfd3 	b.w	8007258 <_raise_r>
 80072b2:	bf00      	nop
 80072b4:	20000090 	.word	0x20000090

080072b8 <_kill_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d07      	ldr	r5, [pc, #28]	@ (80072d8 <_kill_r+0x20>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	f7fa fd6d 	bl	8001da4 <_kill>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d102      	bne.n	80072d4 <_kill_r+0x1c>
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	b103      	cbz	r3, 80072d4 <_kill_r+0x1c>
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	bf00      	nop
 80072d8:	20000538 	.word	0x20000538

080072dc <_getpid_r>:
 80072dc:	f7fa bd5a 	b.w	8001d94 <_getpid>

080072e0 <_malloc_usable_size_r>:
 80072e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e4:	1f18      	subs	r0, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfbc      	itt	lt
 80072ea:	580b      	ldrlt	r3, [r1, r0]
 80072ec:	18c0      	addlt	r0, r0, r3
 80072ee:	4770      	bx	lr

080072f0 <__swhatbuf_r>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	460c      	mov	r4, r1
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	2900      	cmp	r1, #0
 80072fa:	b096      	sub	sp, #88	@ 0x58
 80072fc:	4615      	mov	r5, r2
 80072fe:	461e      	mov	r6, r3
 8007300:	da0d      	bge.n	800731e <__swhatbuf_r+0x2e>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007308:	f04f 0100 	mov.w	r1, #0
 800730c:	bf14      	ite	ne
 800730e:	2340      	movne	r3, #64	@ 0x40
 8007310:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007314:	2000      	movs	r0, #0
 8007316:	6031      	str	r1, [r6, #0]
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	b016      	add	sp, #88	@ 0x58
 800731c:	bd70      	pop	{r4, r5, r6, pc}
 800731e:	466a      	mov	r2, sp
 8007320:	f000 f848 	bl	80073b4 <_fstat_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	dbec      	blt.n	8007302 <__swhatbuf_r+0x12>
 8007328:	9901      	ldr	r1, [sp, #4]
 800732a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800732e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007332:	4259      	negs	r1, r3
 8007334:	4159      	adcs	r1, r3
 8007336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800733a:	e7eb      	b.n	8007314 <__swhatbuf_r+0x24>

0800733c <__smakebuf_r>:
 800733c:	898b      	ldrh	r3, [r1, #12]
 800733e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007340:	079d      	lsls	r5, r3, #30
 8007342:	4606      	mov	r6, r0
 8007344:	460c      	mov	r4, r1
 8007346:	d507      	bpl.n	8007358 <__smakebuf_r+0x1c>
 8007348:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	2301      	movs	r3, #1
 8007352:	6163      	str	r3, [r4, #20]
 8007354:	b003      	add	sp, #12
 8007356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007358:	ab01      	add	r3, sp, #4
 800735a:	466a      	mov	r2, sp
 800735c:	f7ff ffc8 	bl	80072f0 <__swhatbuf_r>
 8007360:	9f00      	ldr	r7, [sp, #0]
 8007362:	4605      	mov	r5, r0
 8007364:	4639      	mov	r1, r7
 8007366:	4630      	mov	r0, r6
 8007368:	f7fd f9ea 	bl	8004740 <_malloc_r>
 800736c:	b948      	cbnz	r0, 8007382 <__smakebuf_r+0x46>
 800736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007372:	059a      	lsls	r2, r3, #22
 8007374:	d4ee      	bmi.n	8007354 <__smakebuf_r+0x18>
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	f043 0302 	orr.w	r3, r3, #2
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	e7e2      	b.n	8007348 <__smakebuf_r+0xc>
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	6020      	str	r0, [r4, #0]
 8007386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	9b01      	ldr	r3, [sp, #4]
 800738e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007392:	b15b      	cbz	r3, 80073ac <__smakebuf_r+0x70>
 8007394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007398:	4630      	mov	r0, r6
 800739a:	f000 f81d 	bl	80073d8 <_isatty_r>
 800739e:	b128      	cbz	r0, 80073ac <__smakebuf_r+0x70>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	431d      	orrs	r5, r3
 80073b0:	81a5      	strh	r5, [r4, #12]
 80073b2:	e7cf      	b.n	8007354 <__smakebuf_r+0x18>

080073b4 <_fstat_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d07      	ldr	r5, [pc, #28]	@ (80073d4 <_fstat_r+0x20>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f7fa fd4f 	bl	8001e64 <_fstat>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d102      	bne.n	80073d0 <_fstat_r+0x1c>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	b103      	cbz	r3, 80073d0 <_fstat_r+0x1c>
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	20000538 	.word	0x20000538

080073d8 <_isatty_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d06      	ldr	r5, [pc, #24]	@ (80073f4 <_isatty_r+0x1c>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	f7fa fd4e 	bl	8001e84 <_isatty>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_isatty_r+0x1a>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_isatty_r+0x1a>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20000538 	.word	0x20000538

080073f8 <_init>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr

08007404 <_fini>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr
