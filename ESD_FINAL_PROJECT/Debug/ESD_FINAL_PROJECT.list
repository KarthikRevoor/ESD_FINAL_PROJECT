
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08008578  08008578  00009578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec4  08008ec4  0000a24c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ec4  08008ec4  00009ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ecc  08008ecc  0000a24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ecc  08008ecc  00009ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ed0  08008ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  08008ed4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000024c  08009120  0000a24c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009120  0000a598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011045  00000000  00000000  0000a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efd  00000000  00000000  0001b2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0001e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b13  00000000  00000000  0001f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018caf  00000000  00000000  0001fb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001471c  00000000  00000000  000387da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0f8  00000000  00000000  0004cef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000da034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000deb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008560 	.word	0x08008560

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	08008560 	.word	0x08008560

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ee2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ee6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000edf0 	.word	0xe000edf0
 8000f04:	e0001000 	.word	0xe0001000

08000f08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <delay+0x40>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f16:	f003 fcc3 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <delay+0x44>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f2c:	bf00      	nop
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <delay+0x40>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f8      	bcc.n	8000f2e <delay+0x26>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e0001000 	.word	0xe0001000
 8000f4c:	431bde83 	.word	0x431bde83

08000f50 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 f810 	bl	8002fa4 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 fff2 	bl	8002fa4 <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DHT_Start>:


void DHT_Start (void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fcc:	f7ff ff6c 	bl	8000ea8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <DHT_Start+0x40>)
 8000fd4:	f7ff ffbc 	bl	8000f50 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <DHT_Start+0x40>)
 8000fde:	f002 f97d 	bl	80032dc <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fe2:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000fe6:	f7ff ff8f 	bl	8000f08 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <DHT_Start+0x40>)
 8000ff0:	f002 f974 	bl	80032dc <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ff87 	bl	8000f08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DHT_Start+0x40>)
 8000ffe:	f7ff ffc5 	bl	8000f8c <Set_Pin_Input>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020400 	.word	0x40020400

0800100c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ff76 	bl	8000f08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800101c:	2101      	movs	r1, #1
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <DHT_Check_Response+0x58>)
 8001020:	f002 f944 	bl	80032ac <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800102a:	2050      	movs	r0, #80	@ 0x50
 800102c:	f7ff ff6c 	bl	8000f08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001030:	2101      	movs	r1, #1
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <DHT_Check_Response+0x58>)
 8001034:	f002 f93a 	bl	80032ac <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DHT_Check_Response+0x38>
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001048:	bf00      	nop
 800104a:	2101      	movs	r1, #1
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <DHT_Check_Response+0x58>)
 800104e:	f002 f92d 	bl	80032ac <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f8      	bne.n	800104a <DHT_Check_Response+0x3e>

	return Response;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e037      	b.n	80010e4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001074:	bf00      	nop
 8001076:	2101      	movs	r1, #1
 8001078:	481e      	ldr	r0, [pc, #120]	@ (80010f4 <DHT_Read+0x8c>)
 800107a:	f002 f917 	bl	80032ac <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001084:	2028      	movs	r0, #40	@ 0x28
 8001086:	f7ff ff3f 	bl	8000f08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800108a:	2101      	movs	r1, #1
 800108c:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <DHT_Read+0x8c>)
 800108e:	f002 f90d 	bl	80032ac <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2201      	movs	r2, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e00b      	b.n	80010ce <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f1c3 0307 	rsb	r3, r3, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ce:	bf00      	nop
 80010d0:	2101      	movs	r1, #1
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DHT_Read+0x8c>)
 80010d4:	f002 f8ea 	bl	80032ac <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f8      	bne.n	80010d0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71bb      	strb	r3, [r7, #6]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9c4      	bls.n	8001074 <DHT_Read+0xc>
	}
	return i;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001100:	f7ff ff62 	bl	8000fc8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001104:	f7ff ff82 	bl	800100c <DHT_Check_Response>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <DHT_GetData+0xa4>)
 800110e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001110:	f7ff ffaa 	bl	8001068 <DHT_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <DHT_GetData+0xa8>)
 800111a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800111c:	f7ff ffa4 	bl	8001068 <DHT_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <DHT_GetData+0xac>)
 8001126:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001128:	f7ff ff9e 	bl	8001068 <DHT_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <DHT_GetData+0xb0>)
 8001132:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001134:	f7ff ff98 	bl	8001068 <DHT_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <DHT_GetData+0xb4>)
 800113e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001140:	f7ff ff92 	bl	8001068 <DHT_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <DHT_GetData+0xb8>)
 800114a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <DHT_GetData+0xb8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <DHT_GetData+0xa8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <DHT_GetData+0xac>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <DHT_GetData+0xb0>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <DHT_GetData+0xb4>)
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4299      	cmp	r1, r3
 800116c:	d111      	bne.n	8001192 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <DHT_GetData+0xb0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <DHT_GetData+0xa8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000026e 	.word	0x2000026e
 80011a0:	20000268 	.word	0x20000268
 80011a4:	20000269 	.word	0x20000269
 80011a8:	2000026a 	.word	0x2000026a
 80011ac:	2000026b 	.word	0x2000026b
 80011b0:	2000026c 	.word	0x2000026c

080011b4 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	is_received=1;
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000270 	.word	0x20000270

080011d4 <IR_init>:

// Variable to indicate detection
volatile uint32_t ir_triggered = 0;

// Initialize the IR sensor pin with interrupt
void IR_init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <IR_init+0x60>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <IR_init+0x60>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <IR_init+0x60>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

    // Configure PA7 as input with external interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8001208:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <IR_init+0x64>)
 8001218:	f001 fec4 	bl	8002fa4 <HAL_GPIO_Init>

    // Enable the interrupt in the NVIC
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	2017      	movs	r0, #23
 8001222:	f001 fb0c 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
 8001226:	2017      	movs	r0, #23
 8001228:	f001 fb25 	bl	8002876 <HAL_NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_GPIO_EXTI_Callback>:

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b80      	cmp	r3, #128	@ 0x80
 800124a:	d102      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x24>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
    }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000278 	.word	0x20000278

08001264 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 8001268:	2080      	movs	r0, #128	@ 0x80
 800126a:	f002 f851 	bl	8003310 <HAL_GPIO_EXTI_IRQHandler>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <IR_is_triggered>:

// Optional: Function to get the IR trigger state (can be used in main logic)
uint8_t IR_is_triggered(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    if (ir_triggered) {
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <IR_is_triggered+0x24>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <IR_is_triggered+0x16>
        ir_triggered = 0; // Reset the flag after reading
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <IR_is_triggered+0x24>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
        return 1;         // Return true if an object was detected
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <IR_is_triggered+0x18>
    }
    return 0;             // No detection
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000278 	.word	0x20000278

0800129c <init_game>:
const char *water_pokemon[POKEMON_COUNT] = {
    "Squirtle", "Totodile", "Mudkip", "Piplup", "Froakie",
    "Vaporeon", "Lapras", "Poliwag", "Wooper", "Marill"
};

void init_game(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	IR_init();
 80012a0:	f7ff ff98 	bl	80011d4 <IR_init>
    // Initialize sensors

	//MPU_init();
    Push_Button_Init(); // Initialize push button
 80012a4:	f000 fd84 	bl	8001db0 <Push_Button_Init>
    Pressure_sensor_Init();
 80012a8:	f000 f9f2 	bl	8001690 <Pressure_sensor_Init>
    ADC_Config();
 80012ac:	f000 fa0e 	bl	80016cc <ADC_Config>
    // Initialize game state
    currentState = IDLE;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <init_game+0x24>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

    // Debugging output
    uart_send_string("Game initialized. System ready!\n\r");
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <init_game+0x28>)
 80012b8:	f001 f906 	bl	80024c8 <uart_send_string>

    // Additional setup for game variables (if needed)
    // Example: Initialize Pokémon health, score, or other gameplay elements
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000027c 	.word	0x2000027c
 80012c4:	080086e4 	.word	0x080086e4

080012c8 <spawn_pokemon_from_array>:

void spawn_pokemon_from_array(const char *pokemon_array[]) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b09c      	sub	sp, #112	@ 0x70
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    uint32_t index = rand() % POKEMON_COUNT;
 80012d0:	f004 fb76 	bl	80059c0 <rand>
 80012d4:	4601      	mov	r1, r0
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <spawn_pokemon_from_array+0x50>)
 80012d8:	fb83 2301 	smull	r2, r3, r3, r1
 80012dc:	109a      	asrs	r2, r3, #2
 80012de:	17cb      	asrs	r3, r1, #31
 80012e0:	1ad2      	subs	r2, r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	1aca      	subs	r2, r1, r3
 80012ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
    char buffer[100];
    sprintf(buffer, "A wild %s appears!\n", pokemon_array[index]);
 80012ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4907      	ldr	r1, [pc, #28]	@ (800131c <spawn_pokemon_from_array+0x54>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 f8b6 	bl	8006470 <siprintf>
    uart_send_string(buffer);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f001 f8dd 	bl	80024c8 <uart_send_string>
}
 800130e:	bf00      	nop
 8001310:	3770      	adds	r7, #112	@ 0x70
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	66666667 	.word	0x66666667
 800131c:	08008708 	.word	0x08008708

08001320 <game_state_machine>:

void game_state_machine() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a8      	sub	sp, #160	@ 0xa0
 8001324:	af00      	add	r7, sp, #0
    switch (currentState) {
 8001326:	4bb1      	ldr	r3, [pc, #708]	@ (80015ec <game_state_machine+0x2cc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b06      	cmp	r3, #6
 800132c:	f200 8159 	bhi.w	80015e2 <game_state_machine+0x2c2>
 8001330:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <game_state_machine+0x18>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001355 	.word	0x08001355
 800133c:	08001375 	.word	0x08001375
 8001340:	080013d3 	.word	0x080013d3
 8001344:	08001417 	.word	0x08001417
 8001348:	08001479 	.word	0x08001479
 800134c:	080014e5 	.word	0x080014e5
 8001350:	080015cf 	.word	0x080015cf
        case IDLE:
            // Wait for IR sensor trigger
        	ir_triggered=0;
 8001354:	4ba6      	ldr	r3, [pc, #664]	@ (80015f0 <game_state_machine+0x2d0>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
            if (IR_is_triggered()) {
 800135a:	f7ff ff8b 	bl	8001274 <IR_is_triggered>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 813b 	beq.w	80015dc <game_state_machine+0x2bc>
                uart_send_string("Object detected! Moving to SENSOR_READ.\n\r");
 8001366:	48a3      	ldr	r0, [pc, #652]	@ (80015f4 <game_state_machine+0x2d4>)
 8001368:	f001 f8ae 	bl	80024c8 <uart_send_string>
                currentState = SENSOR_READ;
 800136c:	4b9f      	ldr	r3, [pc, #636]	@ (80015ec <game_state_machine+0x2cc>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001372:	e133      	b.n	80015dc <game_state_machine+0x2bc>

        case SENSOR_READ: {
            DHT_DataTypedef DHT_Data;
            DHT_GetData(&DHT_Data); // Read DHT11 data
 8001374:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff febd 	bl	80010f8 <DHT_GetData>

            // Only use humidity from DHT11
            dht11_humidity = (int)DHT_Data.Humidity;
 800137e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 2a90 	vmov	r2, s15
 800138a:	4b9b      	ldr	r3, [pc, #620]	@ (80015f8 <game_state_machine+0x2d8>)
 800138c:	601a      	str	r2, [r3, #0]

            // Read temperature from DS18B20
            //temp_sensor_check();
            ds18b20_temperature = temperature;
 800138e:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <game_state_machine+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a9b      	ldr	r2, [pc, #620]	@ (8001600 <game_state_machine+0x2e0>)
 8001394:	6013      	str	r3, [r2, #0]

            // Debug output for humidity and temperature
            char buffer[100];
            sprintf(buffer, "DHT11 Humidity: %d%%\n\r", dht11_humidity);
 8001396:	4b98      	ldr	r3, [pc, #608]	@ (80015f8 <game_state_machine+0x2d8>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4999      	ldr	r1, [pc, #612]	@ (8001604 <game_state_machine+0x2e4>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 f866 	bl	8006470 <siprintf>
            uart_send_string(buffer);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f88e 	bl	80024c8 <uart_send_string>

            sprintf(buffer, "DS18B20 Temperature: %.2f°C\n\r", ds18b20_temperature);
 80013ac:	4b94      	ldr	r3, [pc, #592]	@ (8001600 <game_state_machine+0x2e0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8d1 	bl	8000558 <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	1d38      	adds	r0, r7, #4
 80013bc:	4992      	ldr	r1, [pc, #584]	@ (8001608 <game_state_machine+0x2e8>)
 80013be:	f005 f857 	bl	8006470 <siprintf>
            uart_send_string(buffer);
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f87f 	bl	80024c8 <uart_send_string>

            currentState = CHECK_POKEMON_ENCOUNTER;
 80013ca:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <game_state_machine+0x2cc>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	701a      	strb	r2, [r3, #0]
            break;
 80013d0:	e107      	b.n	80015e2 <game_state_machine+0x2c2>
        }

        case CHECK_POKEMON_ENCOUNTER:
            // Determine Pokémon to spawn based on sensor data
            if (ds18b20_temperature > 25.0) {
 80013d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001600 <game_state_machine+0x2e0>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd03      	ble.n	80013ee <game_state_machine+0xce>
                // Spawn a Fire-type Pokémon for high temperature
                spawn_pokemon_from_array(fire_pokemon);
 80013e6:	4889      	ldr	r0, [pc, #548]	@ (800160c <game_state_machine+0x2ec>)
 80013e8:	f7ff ff6e 	bl	80012c8 <spawn_pokemon_from_array>
 80013ec:	e00a      	b.n	8001404 <game_state_machine+0xe4>
            } else if (dht11_humidity > 60) {
 80013ee:	4b82      	ldr	r3, [pc, #520]	@ (80015f8 <game_state_machine+0x2d8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b3c      	cmp	r3, #60	@ 0x3c
 80013f4:	dd03      	ble.n	80013fe <game_state_machine+0xde>
                // Spawn a Water-type Pokémon for high humidity
                spawn_pokemon_from_array(water_pokemon);
 80013f6:	4886      	ldr	r0, [pc, #536]	@ (8001610 <game_state_machine+0x2f0>)
 80013f8:	f7ff ff66 	bl	80012c8 <spawn_pokemon_from_array>
 80013fc:	e002      	b.n	8001404 <game_state_machine+0xe4>
            } else {
                // Spawn a Normal-type Pokémon by default
                spawn_pokemon_from_array(normal_pokemon);
 80013fe:	4885      	ldr	r0, [pc, #532]	@ (8001614 <game_state_machine+0x2f4>)
 8001400:	f7ff ff62 	bl	80012c8 <spawn_pokemon_from_array>
            }
            uart_send_string("\rSelect an action: Press button for Battle or Capture.\n\r");
 8001404:	4884      	ldr	r0, [pc, #528]	@ (8001618 <game_state_machine+0x2f8>)
 8001406:	f001 f85f 	bl	80024c8 <uart_send_string>
            Reset_Button_State(); // Reset button state for selection
 800140a:	f000 fd3d 	bl	8001e88 <Reset_Button_State>
            currentState = SELECT_ACTION;
 800140e:	4b77      	ldr	r3, [pc, #476]	@ (80015ec <game_state_machine+0x2cc>)
 8001410:	2203      	movs	r2, #3
 8001412:	701a      	strb	r2, [r3, #0]
            break;
 8001414:	e0e5      	b.n	80015e2 <game_state_machine+0x2c2>

        case SELECT_ACTION: {
            uart_send_string("\rWaiting for button press: Battle or Capture.\n\r");
 8001416:	4881      	ldr	r0, [pc, #516]	@ (800161c <game_state_machine+0x2fc>)
 8001418:	f001 f856 	bl	80024c8 <uart_send_string>

            uint32_t start_time = HAL_GetTick(); // Get the start time
 800141c:	f001 f904 	bl	8002628 <HAL_GetTick>
 8001420:	6738      	str	r0, [r7, #112]	@ 0x70
            uint8_t action_decided = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

            // Wait for a decision
            while (!action_decided && (HAL_GetTick() - start_time < 5000)) { // 5-second timeout
 8001428:	e00d      	b.n	8001446 <game_state_machine+0x126>
                if (Get_Button_State()) {
 800142a:	f000 fd21 	bl	8001e70 <Get_Button_State>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <game_state_machine+0x126>
                    uart_send_string("Battle selected!\n\r");
 8001434:	487a      	ldr	r0, [pc, #488]	@ (8001620 <game_state_machine+0x300>)
 8001436:	f001 f847 	bl	80024c8 <uart_send_string>
                    currentState = BATTLE;
 800143a:	4b6c      	ldr	r3, [pc, #432]	@ (80015ec <game_state_machine+0x2cc>)
 800143c:	2204      	movs	r2, #4
 800143e:	701a      	strb	r2, [r3, #0]
                    action_decided = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            while (!action_decided && (HAL_GetTick() - start_time < 5000)) { // 5-second timeout
 8001446:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800144a:	2b00      	cmp	r3, #0
 800144c:	d108      	bne.n	8001460 <game_state_machine+0x140>
 800144e:	f001 f8eb 	bl	8002628 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3287 	movw	r2, #4999	@ 0x1387
 800145c:	4293      	cmp	r3, r2
 800145e:	d9e4      	bls.n	800142a <game_state_machine+0x10a>
                }
            }

            // If no button press within timeout, select Capture
            if (!action_decided) {
 8001460:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 80bb 	bne.w	80015e0 <game_state_machine+0x2c0>
            	uart_send_string("Capture selected! Press gently to capture the Pokémon.\n\r");
 800146a:	486e      	ldr	r0, [pc, #440]	@ (8001624 <game_state_machine+0x304>)
 800146c:	f001 f82c 	bl	80024c8 <uart_send_string>
            	        currentState = CAPTURE; // Transition to CAPTURE state
 8001470:	4b5e      	ldr	r3, [pc, #376]	@ (80015ec <game_state_machine+0x2cc>)
 8001472:	2205      	movs	r2, #5
 8001474:	701a      	strb	r2, [r3, #0]
            	    }
            	    break;
 8001476:	e0b3      	b.n	80015e0 <game_state_machine+0x2c0>
        }

        case BATTLE: {
            uart_send_string("Battle initiated! Shake the board to attack.\n\r");
 8001478:	486b      	ldr	r0, [pc, #428]	@ (8001628 <game_state_machine+0x308>)
 800147a:	f001 f825 	bl	80024c8 <uart_send_string>

            // Detect shakes for 3 seconds
            const uint32_t duration = 3000; // 3 seconds
 800147e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            const int threshold = 2000;    // Acceleration threshold
 8001486:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800148a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            uint32_t shake_count = detect_shakes(duration, threshold);
 800148e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001492:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001496:	f000 f9b3 	bl	8001800 <detect_shakes>
 800149a:	67f8      	str	r0, [r7, #124]	@ 0x7c

            // Calculate damage
            int base_damage = 10;
 800149c:	230a      	movs	r3, #10
 800149e:	67bb      	str	r3, [r7, #120]	@ 0x78
            int total_damage = shake_count * base_damage;
 80014a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	677b      	str	r3, [r7, #116]	@ 0x74

            // Debug output for shake count and damage
            char buffer[100];
            if (shake_count > 0) {
 80014aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <game_state_machine+0x19e>
                sprintf(buffer, "Shake count: %lu, Total damage: %d\n\r", shake_count, total_damage);
 80014b0:	1d38      	adds	r0, r7, #4
 80014b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014b6:	495d      	ldr	r1, [pc, #372]	@ (800162c <game_state_machine+0x30c>)
 80014b8:	f004 ffda 	bl	8006470 <siprintf>
 80014bc:	e005      	b.n	80014ca <game_state_machine+0x1aa>
            } else {
                sprintf(buffer, "No shakes detected. Total damage: %d\n\r", total_damage);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014c2:	495b      	ldr	r1, [pc, #364]	@ (8001630 <game_state_machine+0x310>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 ffd3 	bl	8006470 <siprintf>
            }
            uart_send_string(buffer);
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fffb 	bl	80024c8 <uart_send_string>

            uart_send_string("Returning to action selection.\n\r");
 80014d2:	4858      	ldr	r0, [pc, #352]	@ (8001634 <game_state_machine+0x314>)
 80014d4:	f000 fff8 	bl	80024c8 <uart_send_string>
            Reset_Button_State(); // Reset button state for new selection
 80014d8:	f000 fcd6 	bl	8001e88 <Reset_Button_State>
            currentState = SELECT_ACTION; // Return to action selection
 80014dc:	4b43      	ldr	r3, [pc, #268]	@ (80015ec <game_state_machine+0x2cc>)
 80014de:	2203      	movs	r2, #3
 80014e0:	701a      	strb	r2, [r3, #0]
            break;
 80014e2:	e07e      	b.n	80015e2 <game_state_machine+0x2c2>
        }
        case CAPTURE: {
                    uart_send_string("Apply pressure to capture the Pokémon...\n\r");
 80014e4:	4854      	ldr	r0, [pc, #336]	@ (8001638 <game_state_machine+0x318>)
 80014e6:	f000 ffef 	bl	80024c8 <uart_send_string>



                    // Countdown for pressing the button
                    for (int countdown = 3; countdown > 0; countdown--) {
 80014ea:	2303      	movs	r3, #3
 80014ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014f0:	e013      	b.n	800151a <game_state_machine+0x1fa>
                        char buffer[50];
                        sprintf(buffer, "Press in: %d\n\r", countdown);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80014f8:	4950      	ldr	r1, [pc, #320]	@ (800163c <game_state_machine+0x31c>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 ffb8 	bl	8006470 <siprintf>


                        uart_send_string(buffer);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f000 ffe0 	bl	80024c8 <uart_send_string>
                        HAL_Delay(1000); // 1-second delay for countdown
 8001508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150c:	f001 f898 	bl	8002640 <HAL_Delay>
                    for (int countdown = 3; countdown > 0; countdown--) {
 8001510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001514:	3b01      	subs	r3, #1
 8001516:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800151a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800151e:	2b00      	cmp	r3, #0
 8001520:	dce7      	bgt.n	80014f2 <game_state_machine+0x1d2>
                    }

                    uart_send_string("Apply pressure now for 2 seconds...\n\r");
 8001522:	4847      	ldr	r0, [pc, #284]	@ (8001640 <game_state_machine+0x320>)
 8001524:	f000 ffd0 	bl	80024c8 <uart_send_string>



                    // Read ADC value and calculate average over 2 seconds
                    uint32_t start_time = HAL_GetTick();
 8001528:	f001 f87e 	bl	8002628 <HAL_GetTick>
 800152c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                    uint32_t total_value = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    uint32_t samples = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                    while ((HAL_GetTick() - start_time) < 2000) { // 2-second window
 800153c:	e012      	b.n	8001564 <game_state_machine+0x244>
                        ADC_Read(); // Update global adcValue
 800153e:	f000 f91f 	bl	8001780 <ADC_Read>
                        total_value += adcValue;
 8001542:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <game_state_machine+0x324>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800154e:	4413      	add	r3, r2
 8001550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                        samples++;
 8001554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        HAL_Delay(100); // Sample every 100ms
 800155e:	2064      	movs	r0, #100	@ 0x64
 8001560:	f001 f86e 	bl	8002640 <HAL_Delay>
                    while ((HAL_GetTick() - start_time) < 2000) { // 2-second window
 8001564:	f001 f860 	bl	8002628 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001574:	d3e3      	bcc.n	800153e <game_state_machine+0x21e>
                    }

                    uint32_t avg_value = total_value / samples;
 8001576:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800157a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                    // Check if average pressure is within threshold
                    char buffer[100];
                    if (avg_value > 200 && avg_value < 800) {
 8001586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800158a:	2bc8      	cmp	r3, #200	@ 0xc8
 800158c:	d910      	bls.n	80015b0 <game_state_machine+0x290>
 800158e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001592:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001596:	d20b      	bcs.n	80015b0 <game_state_machine+0x290>
                        sprintf(buffer, "Success! Pokémon captured with average pressure: %lu \n\r", avg_value);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800159e:	492a      	ldr	r1, [pc, #168]	@ (8001648 <game_state_machine+0x328>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 ff65 	bl	8006470 <siprintf>
                        uart_send_string(buffer);
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 ff8d 	bl	80024c8 <uart_send_string>
 80015ae:	e00a      	b.n	80015c6 <game_state_machine+0x2a6>
                    } else {
                        sprintf(buffer, "Failed! Pokémon broke out. Average pressure: %lu \n\r", avg_value);
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015b6:	4925      	ldr	r1, [pc, #148]	@ (800164c <game_state_machine+0x32c>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 ff59 	bl	8006470 <siprintf>


                        uart_send_string(buffer);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 ff81 	bl	80024c8 <uart_send_string>
                    }

                    currentState = IDLE; // Return to IDLE after capture attempt
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <game_state_machine+0x2cc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    break;
 80015cc:	e009      	b.n	80015e2 <game_state_machine+0x2c2>
                }


               case POST_BATTLE:
                   uart_send_string("Battle concluded. Returning to IDLE.\n\r");
 80015ce:	4820      	ldr	r0, [pc, #128]	@ (8001650 <game_state_machine+0x330>)
 80015d0:	f000 ff7a 	bl	80024c8 <uart_send_string>
                   currentState = IDLE;
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <game_state_machine+0x2cc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
                   break;
 80015da:	e002      	b.n	80015e2 <game_state_machine+0x2c2>
            break;
 80015dc:	bf00      	nop
 80015de:	e000      	b.n	80015e2 <game_state_machine+0x2c2>
            	    break;
 80015e0:	bf00      	nop
           }
}
 80015e2:	bf00      	nop
 80015e4:	37a0      	adds	r7, #160	@ 0xa0
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000027c 	.word	0x2000027c
 80015f0:	20000278 	.word	0x20000278
 80015f4:	0800871c 	.word	0x0800871c
 80015f8:	20000280 	.word	0x20000280
 80015fc:	20000274 	.word	0x20000274
 8001600:	20000284 	.word	0x20000284
 8001604:	08008748 	.word	0x08008748
 8001608:	08008760 	.word	0x08008760
 800160c:	20000000 	.word	0x20000000
 8001610:	20000050 	.word	0x20000050
 8001614:	20000028 	.word	0x20000028
 8001618:	08008780 	.word	0x08008780
 800161c:	080087bc 	.word	0x080087bc
 8001620:	080087ec 	.word	0x080087ec
 8001624:	08008800 	.word	0x08008800
 8001628:	0800883c 	.word	0x0800883c
 800162c:	0800886c 	.word	0x0800886c
 8001630:	08008894 	.word	0x08008894
 8001634:	080088bc 	.word	0x080088bc
 8001638:	080088e0 	.word	0x080088e0
 800163c:	0800890c 	.word	0x0800890c
 8001640:	0800891c 	.word	0x0800891c
 8001644:	20000288 	.word	0x20000288
 8001648:	08008944 	.word	0x08008944
 800164c:	08008980 	.word	0x08008980
 8001650:	080089b8 	.word	0x080089b8

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <Pressure_sensor_Init>:

// Global variables
volatile uint16_t adcValue = 0; // ADC result
volatile uint8_t adcConversionComplete = 0; // Flag to indicate conversion complete

void Pressure_sensor_Init(void) {
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <Pressure_sensor_Init+0x34>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <Pressure_sensor_Init+0x34>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB1 as analog
    GPIOB->MODER |= (3U << (1 * 2));  // 2 bits per pin, set to 11 (Analog mode)
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <Pressure_sensor_Init+0x38>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <Pressure_sensor_Init+0x38>)
 80016a6:	f043 030c 	orr.w	r3, r3, #12
 80016aa:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3U << (1 * 2)); // No pull-up/pull-down
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <Pressure_sensor_Init+0x38>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <Pressure_sensor_Init+0x38>)
 80016b2:	f023 030c 	bic.w	r3, r3, #12
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400

080016cc <ADC_Config>:

void ADC_Config(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <ADC_Config+0x64>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <ADC_Config+0x64>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016da:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set ADC prescaler to PCLK2/4
    ADC->CCR |= (1U << 16); // Bits 17:16 = 01 for PCLK2/4
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <ADC_Config+0x68>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <ADC_Config+0x68>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e6:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Reset CR2
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <ADC_Config+0x6c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    ADC1->CR2 |= ADC_CR2_ADON;         // Enable ADC
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <ADC_Config+0x6c>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <ADC_Config+0x6c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;        // Enable EOC interrupt
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <ADC_Config+0x6c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <ADC_Config+0x6c>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_RES;         // 12-bit resolution
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <ADC_Config+0x6c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <ADC_Config+0x6c>)
 800170c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001710:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (3U << (3 * 9));    // Sampling time 56 cycles for channel 9
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <ADC_Config+0x6c>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <ADC_Config+0x6c>)
 8001718:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 800171c:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 9;                    // Set channel 9 (PB1)
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <ADC_Config+0x6c>)
 8001720:	2209      	movs	r2, #9
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8001724:	2012      	movs	r0, #18
 8001726:	f7ff ff95 	bl	8001654 <__NVIC_EnableIRQ>
    //NVIC_SetPriority(ADC_IRQn, 1);
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40012300 	.word	0x40012300
 8001738:	40012000 	.word	0x40012000

0800173c <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 8001740:	bf00      	nop
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <ADC_IRQHandler+0x38>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f9      	beq.n	8001742 <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <ADC_IRQHandler+0x38>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <ADC_IRQHandler+0x3c>)
 8001756:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <ADC_IRQHandler+0x40>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <ADC_IRQHandler+0x38>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <ADC_IRQHandler+0x38>)
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	6013      	str	r3, [r2, #0]
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40012000 	.word	0x40012000
 8001778:	20000288 	.word	0x20000288
 800177c:	2000028a 	.word	0x2000028a

08001780 <ADC_Read>:

void ADC_Read(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <ADC_Read+0x1c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <ADC_Read+0x1c>)
 800178a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800178e:	6093      	str	r3, [r2, #8]
    // Wait for conversion to complete
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40012000 	.word	0x40012000

080017a0 <MPU_read>:

int16_t read_axis_data(uint8_t high_byte, uint8_t low_byte) {
    return ((int16_t)high_byte << 8) | low_byte;
}

int32_t MPU_read() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af04      	add	r7, sp, #16
    uint8_t data[2];
    int16_t x_acc;

    // Read 2 bytes of accelerometer data (X-axis only)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (DEV_ADD << 1), REG_DATA, 1, data, 2, 100);
 80017a6:	2364      	movs	r3, #100	@ 0x64
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2302      	movs	r3, #2
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	463b      	mov	r3, r7
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	223b      	movs	r2, #59	@ 0x3b
 80017b6:	21d0      	movs	r1, #208	@ 0xd0
 80017b8:	480f      	ldr	r0, [pc, #60]	@ (80017f8 <MPU_read+0x58>)
 80017ba:	f001 ff05 	bl	80035c8 <HAL_I2C_Mem_Read>
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <MPU_read+0x34>
        uart_send_string("Error: Failed to read accelerometer data\n\r");
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <MPU_read+0x5c>)
 80017ca:	f000 fe7d 	bl	80024c8 <uart_send_string>
        return -1; // Error reading data
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e00c      	b.n	80017ee <MPU_read+0x4e>
    }

    // Combine high and low bytes for X-axis
    x_acc = ((int16_t)data[0] << 8) | data[1];
 80017d4:	783b      	ldrb	r3, [r7, #0]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	787b      	ldrb	r3, [r7, #1]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	80bb      	strh	r3, [r7, #4]

    // Debug: Print raw X-axis value

    // Return the absolute value of X-axis acceleration
    return abs(x_acc);
 80017e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bfb8      	it	lt
 80017ea:	425b      	neglt	r3, r3
 80017ec:	b29b      	uxth	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000028c 	.word	0x2000028c
 80017fc:	08008a38 	.word	0x08008a38

08001800 <detect_shakes>:

    // Function to detect shakes
uint32_t detect_shakes(uint32_t duration, int threshold) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
        uint32_t start_time = HAL_GetTick();
 800180a:	f000 ff0d 	bl	8002628 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]
        uint32_t shake_count = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

        while ((HAL_GetTick() - start_time) < duration) {
 8001814:	e00c      	b.n	8001830 <detect_shakes+0x30>
            int32_t magnitude = MPU_read();
 8001816:	f7ff ffc3 	bl	80017a0 <MPU_read>
 800181a:	60f8      	str	r0, [r7, #12]

            // Check if magnitude exceeds threshold
            if (magnitude > threshold) {
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	dd02      	ble.n	800182a <detect_shakes+0x2a>
                shake_count++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(10); // Small delay to avoid flooding
 800182a:	200a      	movs	r0, #10
 800182c:	f000 ff08 	bl	8002640 <HAL_Delay>
        while ((HAL_GetTick() - start_time) < duration) {
 8001830:	f000 fefa 	bl	8002628 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8ea      	bhi.n	8001816 <detect_shakes+0x16>
        }

        return shake_count;
 8001840:	697b      	ldr	r3, [r7, #20]
    }
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
pin_init();
 800184e:	f000 fddb 	bl	8002408 <pin_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f000 fe83 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f80f 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f000 f92d 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 800185e:	f000 f903 	bl	8001a68 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001862:	f000 f8d7 	bl	8001a14 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001866:	f000 f89d 	bl	80019a4 <MX_SPI2_Init>
  MX_I2C1_Init();
 800186a:	f000 f86f 	bl	800194c <MX_I2C1_Init>
  init_game();
 800186e:	f7ff fd15 	bl	800129c <init_game>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  game_state_machine();
 8001872:	f7ff fd55 	bl	8001320 <game_state_machine>
 8001876:	e7fc      	b.n	8001872 <main+0x28>

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	@ 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	@ 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fe55 	bl	8006536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <SystemClock_Config+0xcc>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <SystemClock_Config+0xcc>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <SystemClock_Config+0xcc>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <SystemClock_Config+0xd0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <SystemClock_Config+0xd0>)
 80018c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <SystemClock_Config+0xd0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018dc:	2310      	movs	r3, #16
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2302      	movs	r3, #2
 80018e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e8:	2308      	movs	r3, #8
 80018ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018ec:	23c0      	movs	r3, #192	@ 0xc0
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018f4:	2308      	movs	r3, #8
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fb6b 	bl	8003fd8 <HAL_RCC_OscConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001908:	f000 fa4c 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001918:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800191c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2103      	movs	r1, #3
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fdcc 	bl	80044c8 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001936:	f000 fa35 	bl	8001da4 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	@ 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_I2C1_Init+0x50>)
 8001958:	2264      	movs	r2, #100	@ 0x64
 800195a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <MX_I2C1_Init+0x50>)
 800198a:	f001 fcd9 	bl	8003340 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001994:	f000 fa06 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000028c 	.word	0x2000028c
 80019a0:	40005400 	.word	0x40005400

080019a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019aa:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <MX_SPI2_Init+0x6c>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019d0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019f2:	220a      	movs	r2, #10
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019f8:	f002 ff86 	bl	8004908 <HAL_SPI_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a02:	f000 f9cf 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200002e0 	.word	0x200002e0
 8001a10:	40003800 	.word	0x40003800

08001a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <MX_USART1_UART_Init+0x50>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f002 ffe5 	bl	8004a1a <HAL_HalfDuplex_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a56:	f000 f9a5 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000338 	.word	0x20000338
 8001a64:	40011000 	.word	0x40011000

08001a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_DMA_Init+0x4c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <MX_DMA_Init+0x4c>)
 8001a78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MX_DMA_Init+0x4c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	203a      	movs	r0, #58	@ 0x3a
 8001a90:	f000 fed5 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a94:	203a      	movs	r0, #58	@ 0x3a
 8001a96:	f000 feee 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2046      	movs	r0, #70	@ 0x46
 8001aa0:	f000 fecd 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001aa4:	2046      	movs	r0, #70	@ 0x46
 8001aa6:	f000 fee6 	bl	8002876 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	@ 0x30
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	4bae      	ldr	r3, [pc, #696]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4aad      	ldr	r2, [pc, #692]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4bab      	ldr	r3, [pc, #684]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	4ba7      	ldr	r3, [pc, #668]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4aa6      	ldr	r2, [pc, #664]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4ba4      	ldr	r3, [pc, #656]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a9f      	ldr	r2, [pc, #636]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b9d      	ldr	r3, [pc, #628]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b99      	ldr	r3, [pc, #612]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a98      	ldr	r2, [pc, #608]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b96      	ldr	r3, [pc, #600]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b92      	ldr	r3, [pc, #584]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a91      	ldr	r2, [pc, #580]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a8a      	ldr	r2, [pc, #552]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b88      	ldr	r3, [pc, #544]	@ (8001d8c <MX_GPIO_Init+0x2d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4885      	ldr	r0, [pc, #532]	@ (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b7c:	f001 fbae 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2101      	movs	r1, #1
 8001b84:	4883      	ldr	r0, [pc, #524]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001b86:	f001 fba9 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001b90:	4881      	ldr	r0, [pc, #516]	@ (8001d98 <MX_GPIO_Init+0x2e0>)
 8001b92:	f001 fba3 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b96:	2200      	movs	r2, #0
 8001b98:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001b9c:	487f      	ldr	r0, [pc, #508]	@ (8001d9c <MX_GPIO_Init+0x2e4>)
 8001b9e:	f001 fb9d 	bl	80032dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	487b      	ldr	r0, [pc, #492]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001ba8:	f001 fb98 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb2:	487b      	ldr	r0, [pc, #492]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001bb4:	f001 fb92 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4871      	ldr	r0, [pc, #452]	@ (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bcc:	f001 f9ea 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	486a      	ldr	r0, [pc, #424]	@ (8001d90 <MX_GPIO_Init+0x2d8>)
 8001be8:	f001 f9dc 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001bec:	2332      	movs	r3, #50	@ 0x32
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bf0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4863      	ldr	r0, [pc, #396]	@ (8001d90 <MX_GPIO_Init+0x2d8>)
 8001c02:	f001 f9cf 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8001c06:	2381      	movs	r3, #129	@ 0x81
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	485d      	ldr	r0, [pc, #372]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001c1e:	f001 f9c1 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c22:	2308      	movs	r3, #8
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c32:	2305      	movs	r3, #5
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4855      	ldr	r0, [pc, #340]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001c3e:	f001 f9b1 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	4852      	ldr	r0, [pc, #328]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001c58:	f001 f9a4 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	484a      	ldr	r0, [pc, #296]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001c78:	f001 f994 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c7c:	23e0      	movs	r3, #224	@ 0xe0
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4842      	ldr	r0, [pc, #264]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001c98:	f001 f984 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4839      	ldr	r0, [pc, #228]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001cb0:	f001 f978 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4832      	ldr	r0, [pc, #200]	@ (8001d98 <MX_GPIO_Init+0x2e0>)
 8001cce:	f001 f969 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cd2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001cd6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	482c      	ldr	r0, [pc, #176]	@ (8001d9c <MX_GPIO_Init+0x2e4>)
 8001cec:	f001 f95a 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	4826      	ldr	r0, [pc, #152]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001d06:	f001 f94d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	481f      	ldr	r0, [pc, #124]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001d24:	f001 f93e 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001d28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <MX_GPIO_Init+0x2e8>)
 8001d46:	f001 f92d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <MX_GPIO_Init+0x2dc>)
 8001d68:	f001 f91c 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4807      	ldr	r0, [pc, #28]	@ (8001d9c <MX_GPIO_Init+0x2e4>)
 8001d80:	f001 f910 	bl	8002fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d84:	bf00      	nop
 8001d86:	3730      	adds	r7, #48	@ 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40020000 	.word	0x40020000

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <Error_Handler+0x8>

08001db0 <Push_Button_Init>:
#include "push_button.h"
#include "uart_init.h"

volatile uint8_t button_state = 0; // Tracks the button press state

void Push_Button_Init(void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <Push_Button_Init+0x64>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <Push_Button_Init+0x64>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <Push_Button_Init+0x64>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as input with pull-up resistor
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 8001de6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <Push_Button_Init+0x68>)
 8001df6:	f001 f8d5 	bl	8002fa4 <HAL_GPIO_Init>

    // Enable and set EXTI Line 15-10 Interrupt to the lowest priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	2028      	movs	r0, #40	@ 0x28
 8001e00:	f000 fd1d 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e04:	2028      	movs	r0, #40	@ 0x28
 8001e06:	f000 fd36 	bl	8002876 <HAL_NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020800 	.word	0x40020800

08001e1c <EXTI15_10_IRQHandler>:

// Interrupt handler for PC13
void EXTI15_10_IRQHandler(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <EXTI15_10_IRQHandler+0x44>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d017      	beq.n	8001e5c <EXTI15_10_IRQHandler+0x40>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <EXTI15_10_IRQHandler+0x44>)
 8001e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e32:	615a      	str	r2, [r3, #20]

        button_state ^= 1; // Toggle button state
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <EXTI15_10_IRQHandler+0x48>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <EXTI15_10_IRQHandler+0x48>)
 8001e42:	701a      	strb	r2, [r3, #0]

        // Debug: Print button state
        if (button_state) {
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <EXTI15_10_IRQHandler+0x48>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <EXTI15_10_IRQHandler+0x3a>
            uart_send_string("Button pressed: Battle selected\n\r");
 8001e4e:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <EXTI15_10_IRQHandler+0x4c>)
 8001e50:	f000 fb3a 	bl	80024c8 <uart_send_string>
        } else {
            uart_send_string("Button released: Capture selected\n\r");
        }
    }
}
 8001e54:	e002      	b.n	8001e5c <EXTI15_10_IRQHandler+0x40>
            uart_send_string("Button released: Capture selected\n\r");
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <EXTI15_10_IRQHandler+0x50>)
 8001e58:	f000 fb36 	bl	80024c8 <uart_send_string>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40013c00 	.word	0x40013c00
 8001e64:	20000440 	.word	0x20000440
 8001e68:	08008a64 	.word	0x08008a64
 8001e6c:	08008a88 	.word	0x08008a88

08001e70 <Get_Button_State>:

uint8_t Get_Button_State(void) {
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
    return button_state;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <Get_Button_State+0x14>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000440 	.word	0x20000440

08001e88 <Reset_Button_State>:

// Function to reset button state for repeated selections
void Reset_Button_State(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    button_state = 0; // Reset the button state to default
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <Reset_Button_State+0x14>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    uart_send_string("Button state reset. Ready for new selection.\n\r");
 8001e92:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <Reset_Button_State+0x18>)
 8001e94:	f000 fb18 	bl	80024c8 <uart_send_string>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000440 	.word	0x20000440
 8001ea0:	08008aac 	.word	0x08008aac

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	f000 fca0 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_I2C_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12c      	bne.n	8001f70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f38:	2312      	movs	r3, #18
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f44:	2304      	movs	r3, #4
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <HAL_I2C_MspInit+0x8c>)
 8001f50:	f001 f828 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_I2C_MspInit+0x88>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	@ (8002008 <HAL_SPI_MspInit+0x84>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12c      	bne.n	8002000 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fde:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <HAL_SPI_MspInit+0x8c>)
 8001ffc:	f000 ffd2 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40003800 	.word	0x40003800
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400

08002014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_UART_MspInit+0x150>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 8091 	bne.w	800215a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_UART_MspInit+0x154>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	4a49      	ldr	r2, [pc, #292]	@ (8002168 <HAL_UART_MspInit+0x154>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6453      	str	r3, [r2, #68]	@ 0x44
 8002048:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_UART_MspInit+0x154>)
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_UART_MspInit+0x154>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_UART_MspInit+0x154>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6313      	str	r3, [r2, #48]	@ 0x30
 8002064:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_UART_MspInit+0x154>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002076:	2312      	movs	r3, #18
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002082:	2307      	movs	r3, #7
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4837      	ldr	r0, [pc, #220]	@ (800216c <HAL_UART_MspInit+0x158>)
 800208e:	f000 ff89 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 8002094:	4a37      	ldr	r2, [pc, #220]	@ (8002174 <HAL_UART_MspInit+0x160>)
 8002096:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 800209a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800209e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020d2:	4827      	ldr	r0, [pc, #156]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020d4:	f000 fbea 	bl	80028ac <HAL_DMA_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020de:	f7ff fe61 	bl	8001da4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <HAL_UART_MspInit+0x15c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_UART_MspInit+0x164>)
 80020f0:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_UART_MspInit+0x168>)
 80020f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_UART_MspInit+0x164>)
 80020f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_UART_MspInit+0x164>)
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800210a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800210e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800212e:	4812      	ldr	r0, [pc, #72]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002130:	f000 fbbc 	bl	80028ac <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800213a:	f7ff fe33 	bl	8001da4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38
 8002144:	4a0c      	ldr	r2, [pc, #48]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2025      	movs	r0, #37	@ 0x25
 8002150:	f000 fb75 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002154:	2025      	movs	r0, #37	@ 0x25
 8002156:	f000 fb8e 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	@ 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40011000 	.word	0x40011000
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000
 8002170:	20000380 	.word	0x20000380
 8002174:	40026440 	.word	0x40026440
 8002178:	200003e0 	.word	0x200003e0
 800217c:	400264b8 	.word	0x400264b8

08002180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <NMI_Handler+0x4>

08002188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <MemManage_Handler+0x4>

08002198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <BusFault_Handler+0x4>

080021a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <UsageFault_Handler+0x4>

080021a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d6:	f000 fa13 	bl	8002600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <USART1_IRQHandler+0x10>)
 80021e6:	f002 fc71 	bl	8004acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000338 	.word	0x20000338

080021f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA2_Stream2_IRQHandler+0x10>)
 80021fa:	f000 fc97 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000380 	.word	0x20000380

08002208 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <DMA2_Stream7_IRQHandler+0x10>)
 800220e:	f000 fc8d 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003e0 	.word	0x200003e0

0800221c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_kill>:

int _kill(int pid, int sig)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002236:	f004 f9e1 	bl	80065fc <__errno>
 800223a:	4603      	mov	r3, r0
 800223c:	2216      	movs	r2, #22
 800223e:	601a      	str	r2, [r3, #0]
  return -1;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_exit>:

void _exit (int status)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ffe7 	bl	800222c <_kill>
  while (1) {}    /* Make sure we hang here */
 800225e:	bf00      	nop
 8002260:	e7fd      	b.n	800225e <_exit+0x12>

08002262 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e00a      	b.n	800228a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002274:	f3af 8000 	nop.w
 8002278:	4601      	mov	r1, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	b2ca      	uxtb	r2, r1
 8002282:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf0      	blt.n	8002274 <_read+0x12>
  }

  return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e009      	b.n	80022c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	60ba      	str	r2, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf1      	blt.n	80022ae <_write+0x12>
  }
  return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_close>:

int _close(int file)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022fc:	605a      	str	r2, [r3, #4]
  return 0;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_isatty>:

int _isatty(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f004 f946 	bl	80065fc <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20020000 	.word	0x20020000
 800239c:	00000400 	.word	0x00000400
 80023a0:	20000444 	.word	0x20000444
 80023a4:	20000598 	.word	0x20000598

080023a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <SystemInit+0x20>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <SystemInit+0x20>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	@ (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <pin_init>:
#include "uart_init.h"


void pin_init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
// Enable the USART2 and GPIOA clocks
RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // Enable UART2 clock
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <pin_init+0x78>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <pin_init+0x78>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002416:	6413      	str	r3, [r2, #64]	@ 0x40
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;   // Enable GPIOA clock
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <pin_init+0x78>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	4a18      	ldr	r2, [pc, #96]	@ (8002480 <pin_init+0x78>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6313      	str	r3, [r2, #48]	@ 0x30

// Configure GPIOA pins PA2 and PA3 for USART2 TX and RX functionality
GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2))); // Clear mode for PA2, PA3
 8002424:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <pin_init+0x7c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a16      	ldr	r2, [pc, #88]	@ (8002484 <pin_init+0x7c>)
 800242a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800242e:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));    // Set PA2, PA3 to Alternate Function mode
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <pin_init+0x7c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a13      	ldr	r2, [pc, #76]	@ (8002484 <pin_init+0x7c>)
 8002436:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800243a:	6013      	str	r3, [r2, #0]
GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4));   // Set AF7 (UART2) for PA2, PA3
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <pin_init+0x7c>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a10      	ldr	r2, [pc, #64]	@ (8002484 <pin_init+0x7c>)
 8002442:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8002446:	6213      	str	r3, [r2, #32]

// Configure USART2 for 9600 baud rate, 8 data bits, no parity, 1 stop bit
USART2->BRR = (24000000 / 9600);                    // Set baud rate (assuming 16 MHz clock)
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <pin_init+0x80>)
 800244a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800244e:	609a      	str	r2, [r3, #8]
USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;         // Enable USART TX and RX
 8002450:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <pin_init+0x80>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a0c      	ldr	r2, [pc, #48]	@ (8002488 <pin_init+0x80>)
 8002456:	f043 030c 	orr.w	r3, r3, #12
 800245a:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_RXNEIE;                    // Enable RX interrupt
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <pin_init+0x80>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <pin_init+0x80>)
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	60d3      	str	r3, [r2, #12]
USART2->CR1 |= USART_CR1_UE;                        // Enable UART2
 8002468:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <pin_init+0x80>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a06      	ldr	r2, [pc, #24]	@ (8002488 <pin_init+0x80>)
 800246e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002472:	60d3      	str	r3, [r2, #12]

// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
 8002474:	2026      	movs	r0, #38	@ 0x26
 8002476:	f7ff ffa9 	bl	80023cc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	40004400 	.word	0x40004400

0800248c <USART2_IRQHandler>:

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 8002492:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <USART2_IRQHandler+0x38>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <USART2_IRQHandler+0x38>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 80024a4:	bf00      	nop
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <USART2_IRQHandler+0x38>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f9      	beq.n	80024a6 <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 80024b2:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <USART2_IRQHandler+0x38>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	6053      	str	r3, [r2, #4]
    }
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40004400 	.word	0x40004400

080024c8 <uart_send_string>:

void uart_send_string(const char *str) {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    while (*str) {
 80024d0:	e00c      	b.n	80024ec <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 80024d2:	bf00      	nop
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <uart_send_string+0x3c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f9      	beq.n	80024d4 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <uart_send_string+0x3c>)
 80024ea:	605a      	str	r2, [r3, #4]
    while (*str) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <uart_send_string+0xa>
    }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40004400 	.word	0x40004400

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250c:	f7ff ff4c 	bl	80023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 f867 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7ff f986 	bl	800184a <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800254c:	08008ed4 	.word	0x08008ed4
  ldr r2, =_sbss
 8002550:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002554:	20000598 	.word	0x20000598

08002558 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <DMA1_Stream0_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 f94f 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	2000      	movs	r0, #0
 800258c:	f000 f808 	bl	80025a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fc88 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x54>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_InitTick+0x58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f967 	bl	8002892 <HAL_SYSTICK_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00e      	b.n	80025ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d80a      	bhi.n	80025ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 f92f 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_InitTick+0x5c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000078 	.word	0x20000078
 80025f8:	20000080 	.word	0x20000080
 80025fc:	2000007c 	.word	0x2000007c

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000080 	.word	0x20000080
 8002624:	20000448 	.word	0x20000448

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000448 	.word	0x20000448

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000080 	.word	0x20000080

08002688 <__NVIC_SetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	@ (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	@ (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	@ (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff29 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff3e 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff8e 	bl	800277c <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5d 	bl	8002728 <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff31 	bl	80026ec <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff feb6 	bl	8002628 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e099      	b.n	80029fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e8:	e00f      	b.n	800290a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ea:	f7ff fe9d 	bl	8002628 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d908      	bls.n	800290a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2203      	movs	r2, #3
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e078      	b.n	80029fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e8      	bne.n	80028ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <HAL_DMA_Init+0x158>)
 8002924:	4013      	ands	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	4313      	orrs	r3, r2
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0307 	bic.w	r3, r3, #7
 800298a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	2b04      	cmp	r3, #4
 800299c:	d117      	bne.n	80029ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa7b 	bl	8002eac <DMA_CheckFifoParam>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029ca:	2301      	movs	r3, #1
 80029cc:	e016      	b.n	80029fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa32 	bl	8002e40 <DMA_CalcBaseAndBitshift>
 80029dc:	4603      	mov	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	223f      	movs	r2, #63	@ 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	f010803f 	.word	0xf010803f

08002a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a16:	f7ff fe07 	bl	8002628 <HAL_GetTick>
 8002a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d008      	beq.n	8002a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2280      	movs	r2, #128	@ 0x80
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e052      	b.n	8002ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0216 	bic.w	r2, r2, #22
 8002a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_DMA_Abort+0x62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0208 	bic.w	r2, r2, #8
 8002a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8a:	e013      	b.n	8002ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8c:	f7ff fdcc 	bl	8002628 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d90c      	bls.n	8002ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e015      	b.n	8002ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e4      	bne.n	8002a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	223f      	movs	r2, #63	@ 0x3f
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d004      	beq.n	8002b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00c      	b.n	8002b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b38:	4b8e      	ldr	r3, [pc, #568]	@ (8002d74 <HAL_DMA_IRQHandler+0x248>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d78 <HAL_DMA_IRQHandler+0x24c>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	2208      	movs	r2, #8
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01a      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	2208      	movs	r2, #8
 8002b86:	409a      	lsls	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	2201      	movs	r2, #1
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	2210      	movs	r2, #16
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d043      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03c      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	2210      	movs	r2, #16
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d024      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
 8002c5a:	e01f      	b.n	8002c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01b      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e016      	b.n	8002c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0208 	bic.w	r2, r2, #8
 8002c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 808f 	beq.w	8002dcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8087 	beq.w	8002dcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d136      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0216 	bic.w	r2, r2, #22
 8002ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x1da>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0208 	bic.w	r2, r2, #8
 8002d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	223f      	movs	r2, #63	@ 0x3f
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d07e      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
        }
        return;
 8002d42:	e079      	b.n	8002e38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
 8002d70:	e02c      	b.n	8002dcc <HAL_DMA_IRQHandler+0x2a0>
 8002d72:	bf00      	nop
 8002d74:	20000078 	.word	0x20000078
 8002d78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d023      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
 8002d8c:	e01e      	b.n	8002dcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0210 	bic.w	r2, r2, #16
 8002daa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d032      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d022      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2205      	movs	r2, #5
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d307      	bcc.n	8002e14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f2      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x2cc>
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e000      	b.n	8002e3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e38:	bf00      	nop
    }
  }
}
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3b10      	subs	r3, #16
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d909      	bls.n	8002e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	1d1a      	adds	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e80:	e007      	b.n	8002e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	aaaaaaab 	.word	0xaaaaaaab
 8002ea8:	08008af4 	.word	0x08008af4

08002eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11f      	bne.n	8002f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d856      	bhi.n	8002f7a <DMA_CheckFifoParam+0xce>
 8002ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <DMA_CheckFifoParam+0x28>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef7 	.word	0x08002ef7
 8002edc:	08002ee5 	.word	0x08002ee5
 8002ee0:	08002f7b 	.word	0x08002f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d046      	beq.n	8002f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e043      	b.n	8002f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002efe:	d140      	bne.n	8002f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e03d      	b.n	8002f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0e:	d121      	bne.n	8002f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d837      	bhi.n	8002f86 <DMA_CheckFifoParam+0xda>
 8002f16:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <DMA_CheckFifoParam+0x70>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f33 	.word	0x08002f33
 8002f24:	08002f2d 	.word	0x08002f2d
 8002f28:	08002f45 	.word	0x08002f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e030      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d025      	beq.n	8002f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f42:	e022      	b.n	8002f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f4c:	d11f      	bne.n	8002f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f52:	e01c      	b.n	8002f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d903      	bls.n	8002f62 <DMA_CheckFifoParam+0xb6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f60:	e018      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      break;
 8002f66:	e015      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e00b      	b.n	8002f92 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e00a      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e008      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e006      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
    }
  } 
  
  return status; 
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e159      	b.n	8003274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8148 	bne.w	800326e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a2 	beq.w	800326e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b57      	ldr	r3, [pc, #348]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	4a56      	ldr	r2, [pc, #344]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003138:	6453      	str	r3, [r2, #68]	@ 0x44
 800313a:	4b54      	ldr	r3, [pc, #336]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a49      	ldr	r2, [pc, #292]	@ (8003294 <HAL_GPIO_Init+0x2f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x202>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x1fe>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a47      	ldr	r2, [pc, #284]	@ (800329c <HAL_GPIO_Init+0x2f8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x1fa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a46      	ldr	r2, [pc, #280]	@ (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x1f6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a45      	ldr	r2, [pc, #276]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x1f2>
 8003192:	2304      	movs	r3, #4
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 8003196:	2307      	movs	r3, #7
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b8:	4935      	ldr	r1, [pc, #212]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b38      	ldr	r3, [pc, #224]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a2f      	ldr	r2, [pc, #188]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b2d      	ldr	r3, [pc, #180]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a24      	ldr	r2, [pc, #144]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321a:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323e:	4a1a      	ldr	r2, [pc, #104]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003244:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003268:	4a0f      	ldr	r2, [pc, #60]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f aea2 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003326:	4a05      	ldr	r2, [pc, #20]	@ (800333c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd ff84 	bl	800123c <HAL_GPIO_EXTI_Callback>
  }
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e12b      	b.n	80035aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fdc4 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	@ 0x24
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a4:	f001 fa88 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 80033a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4a81      	ldr	r2, [pc, #516]	@ (80035b4 <HAL_I2C_Init+0x274>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d807      	bhi.n	80033c4 <HAL_I2C_Init+0x84>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a80      	ldr	r2, [pc, #512]	@ (80035b8 <HAL_I2C_Init+0x278>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e006      	b.n	80033d2 <HAL_I2C_Init+0x92>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a7d      	ldr	r2, [pc, #500]	@ (80035bc <HAL_I2C_Init+0x27c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bf94      	ite	ls
 80033cc:	2301      	movls	r3, #1
 80033ce:	2300      	movhi	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0e7      	b.n	80035aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a78      	ldr	r2, [pc, #480]	@ (80035c0 <HAL_I2C_Init+0x280>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9b      	lsrs	r3, r3, #18
 80033e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a6a      	ldr	r2, [pc, #424]	@ (80035b4 <HAL_I2C_Init+0x274>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d802      	bhi.n	8003414 <HAL_I2C_Init+0xd4>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	e009      	b.n	8003428 <HAL_I2C_Init+0xe8>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	4a69      	ldr	r2, [pc, #420]	@ (80035c4 <HAL_I2C_Init+0x284>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	3301      	adds	r3, #1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	430b      	orrs	r3, r1
 800342e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800343a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	495c      	ldr	r1, [pc, #368]	@ (80035b4 <HAL_I2C_Init+0x274>)
 8003444:	428b      	cmp	r3, r1
 8003446:	d819      	bhi.n	800347c <HAL_I2C_Init+0x13c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e59      	subs	r1, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fbb1 f3f3 	udiv	r3, r1, r3
 8003456:	1c59      	adds	r1, r3, #1
 8003458:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800345c:	400b      	ands	r3, r1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_I2C_Init+0x138>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1e59      	subs	r1, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	e051      	b.n	800351c <HAL_I2C_Init+0x1dc>
 8003478:	2304      	movs	r3, #4
 800347a:	e04f      	b.n	800351c <HAL_I2C_Init+0x1dc>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d111      	bne.n	80034a8 <HAL_I2C_Init+0x168>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e58      	subs	r0, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e012      	b.n	80034ce <HAL_I2C_Init+0x18e>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	0099      	lsls	r1, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80034be:	3301      	adds	r3, #1
 80034c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Init+0x196>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e022      	b.n	800351c <HAL_I2C_Init+0x1dc>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10e      	bne.n	80034fc <HAL_I2C_Init+0x1bc>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e58      	subs	r0, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	440b      	add	r3, r1
 80034ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034fa:	e00f      	b.n	800351c <HAL_I2C_Init+0x1dc>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	6809      	ldr	r1, [r1, #0]
 8003520:	4313      	orrs	r3, r2
 8003522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800354a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6911      	ldr	r1, [r2, #16]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68d2      	ldr	r2, [r2, #12]
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	430b      	orrs	r3, r1
 800355e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	000186a0 	.word	0x000186a0
 80035b8:	001e847f 	.word	0x001e847f
 80035bc:	003d08ff 	.word	0x003d08ff
 80035c0:	431bde83 	.word	0x431bde83
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	@ 0x30
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	4608      	mov	r0, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	460b      	mov	r3, r1
 80035dc:	813b      	strh	r3, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e2:	f7ff f821 	bl	8002628 <HAL_GetTick>
 80035e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	f040 8214 	bne.w	8003a1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2319      	movs	r3, #25
 80035fc:	2201      	movs	r2, #1
 80035fe:	497b      	ldr	r1, [pc, #492]	@ (80037ec <HAL_I2C_Mem_Read+0x224>)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fafb 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
 800360e:	e207      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_I2C_Mem_Read+0x56>
 800361a:	2302      	movs	r3, #2
 800361c:	e200      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d007      	beq.n	8003644 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2222      	movs	r2, #34	@ 0x22
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2240      	movs	r2, #64	@ 0x40
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003674:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a5b      	ldr	r2, [pc, #364]	@ (80037f0 <HAL_I2C_Mem_Read+0x228>)
 8003684:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003686:	88f8      	ldrh	r0, [r7, #6]
 8003688:	893a      	ldrh	r2, [r7, #8]
 800368a:	8979      	ldrh	r1, [r7, #10]
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	4603      	mov	r3, r0
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f9c8 	bl	8003a2c <I2C_RequestMemoryRead>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1bc      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e190      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d11b      	bne.n	8003716 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e170      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371a:	2b02      	cmp	r3, #2
 800371c:	d11b      	bne.n	8003756 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800373c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	e150      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800376c:	e144      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	2b03      	cmp	r3, #3
 8003774:	f200 80f1 	bhi.w	800395a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	2b01      	cmp	r3, #1
 800377e:	d123      	bne.n	80037c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fb9b 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e145      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037c6:	e117      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d14e      	bne.n	800386e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d6:	2200      	movs	r2, #0
 80037d8:	4906      	ldr	r1, [pc, #24]	@ (80037f4 <HAL_I2C_Mem_Read+0x22c>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa0e 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e11a      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
 80037ea:	bf00      	nop
 80037ec:	00100002 	.word	0x00100002
 80037f0:	ffff0000 	.word	0xffff0000
 80037f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800386c:	e0c4      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003874:	2200      	movs	r2, #0
 8003876:	496c      	ldr	r1, [pc, #432]	@ (8003a28 <HAL_I2C_Mem_Read+0x460>)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f9bf 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cb      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d0:	2200      	movs	r2, #0
 80038d2:	4955      	ldr	r1, [pc, #340]	@ (8003a28 <HAL_I2C_Mem_Read+0x460>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f991 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e09d      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003958:	e04e      	b.n	80039f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 faae 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e058      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d124      	bne.n	80039f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f aeb6 	bne.w	800376e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	@ 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	00010004 	.word	0x00010004

08003a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f8c2 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8c:	d103      	bne.n	8003a96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0aa      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	4952      	ldr	r1, [pc, #328]	@ (8003bf8 <I2C_RequestMemoryRead+0x1cc>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f91d 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e097      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f9a8 	bl	8003e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e076      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	e021      	b.n	8003b58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b24:	6a39      	ldr	r1, [r7, #32]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f982 	bl	8003e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e050      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	6a39      	ldr	r1, [r7, #32]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f967 	bl	8003e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d107      	bne.n	8003b80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e035      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f82b 	bl	8003bfc <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bba:	d103      	bne.n	8003bc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e013      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	4906      	ldr	r1, [pc, #24]	@ (8003bf8 <I2C_RequestMemoryRead+0x1cc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f886 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	00010002 	.word	0x00010002

08003bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c0c:	e048      	b.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d044      	beq.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fe fd07 	bl	8002628 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d139      	bne.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10d      	bne.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4013      	ands	r3, r2
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	e00c      	b.n	8003c6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d116      	bne.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e023      	b.n	8003ce8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d10d      	bne.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	e00c      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d093      	beq.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfe:	e071      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0e:	d123      	bne.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e067      	b.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d041      	beq.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fe fc62 	bl	8002628 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d136      	bne.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10c      	bne.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e00b      	b.n	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e021      	b.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10c      	bne.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	43da      	mvns	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e00b      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f af6d 	bne.w	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3c:	e034      	b.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f89b 	bl	8003f7a <I2C_IsAcknowledgeFailed>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e034      	b.n	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d028      	beq.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe fbe7 	bl	8002628 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11d      	bne.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	2b80      	cmp	r3, #128	@ 0x80
 8003e78:	d016      	beq.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb2:	2b80      	cmp	r3, #128	@ 0x80
 8003eb4:	d1c3      	bne.n	8003e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ecc:	e049      	b.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d119      	bne.n	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e030      	b.n	8003f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fb8a 	bl	8002628 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d016      	beq.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d1ae      	bne.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	d11b      	bne.n	8003fca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e267      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d075      	beq.n	80040e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ff6:	4b88      	ldr	r3, [pc, #544]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d00c      	beq.n	800401c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b85      	ldr	r3, [pc, #532]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800400a:	2b08      	cmp	r3, #8
 800400c:	d112      	bne.n	8004034 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4b82      	ldr	r3, [pc, #520]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800401a:	d10b      	bne.n	8004034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	4b7e      	ldr	r3, [pc, #504]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x108>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d157      	bne.n	80040e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e242      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x74>
 800403e:	4b76      	ldr	r3, [pc, #472]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a75      	ldr	r2, [pc, #468]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e01d      	b.n	8004088 <HAL_RCC_OscConfig+0xb0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x98>
 8004056:	4b70      	ldr	r3, [pc, #448]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6f      	ldr	r2, [pc, #444]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800405c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b6d      	ldr	r3, [pc, #436]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6c      	ldr	r2, [pc, #432]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0xb0>
 8004070:	4b69      	ldr	r3, [pc, #420]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a68      	ldr	r2, [pc, #416]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b66      	ldr	r3, [pc, #408]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a65      	ldr	r2, [pc, #404]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe faca 	bl	8002628 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe fac6 	bl	8002628 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e207      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0xc0>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fab6 	bl	8002628 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fab2 	bl	8002628 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	@ 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1f3      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	4b51      	ldr	r3, [pc, #324]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0xe8>
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d063      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b47      	ldr	r3, [pc, #284]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004102:	2b08      	cmp	r3, #8
 8004104:	d11c      	bne.n	8004140 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b44      	ldr	r3, [pc, #272]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d116      	bne.n	8004140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x152>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e1c7      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b3b      	ldr	r3, [pc, #236]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4937      	ldr	r1, [pc, #220]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	e03a      	b.n	80041b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004148:	4b34      	ldr	r3, [pc, #208]	@ (800421c <HAL_RCC_OscConfig+0x244>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe fa6b 	bl	8002628 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004156:	f7fe fa67 	bl	8002628 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e1a8      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	4b28      	ldr	r3, [pc, #160]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4925      	ldr	r1, [pc, #148]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]
 8004188:	e015      	b.n	80041b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <HAL_RCC_OscConfig+0x244>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fe fa4a 	bl	8002628 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004198:	f7fe fa46 	bl	8002628 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e187      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d036      	beq.n	8004230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ca:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <HAL_RCC_OscConfig+0x248>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe fa2a 	bl	8002628 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fe fa26 	bl	8002628 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e167      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_OscConfig+0x240>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x200>
 80041f6:	e01b      	b.n	8004230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCC_OscConfig+0x248>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fe:	f7fe fa13 	bl	8002628 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	e00e      	b.n	8004224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7fe fa0f 	bl	8002628 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d907      	bls.n	8004224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e150      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
 8004218:	40023800 	.word	0x40023800
 800421c:	42470000 	.word	0x42470000
 8004220:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ea      	bne.n	8004206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8097 	beq.w	800436c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b81      	ldr	r3, [pc, #516]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	4b7d      	ldr	r3, [pc, #500]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	4a7c      	ldr	r2, [pc, #496]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	@ 0x40
 800425e:	4b7a      	ldr	r3, [pc, #488]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b77      	ldr	r3, [pc, #476]	@ (800444c <HAL_RCC_OscConfig+0x474>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b74      	ldr	r3, [pc, #464]	@ (800444c <HAL_RCC_OscConfig+0x474>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	@ (800444c <HAL_RCC_OscConfig+0x474>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fe f9cf 	bl	8002628 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fe f9cb 	bl	8002628 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e10c      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b6a      	ldr	r3, [pc, #424]	@ (800444c <HAL_RCC_OscConfig+0x474>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x2ea>
 80042b4:	4b64      	ldr	r3, [pc, #400]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b8:	4a63      	ldr	r2, [pc, #396]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c0:	e01c      	b.n	80042fc <HAL_RCC_OscConfig+0x324>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x30c>
 80042ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4a5b      	ldr	r2, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e2:	e00b      	b.n	80042fc <HAL_RCC_OscConfig+0x324>
 80042e4:	4b58      	ldr	r3, [pc, #352]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e8:	4a57      	ldr	r2, [pc, #348]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f0:	4b55      	ldr	r3, [pc, #340]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a54      	ldr	r2, [pc, #336]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f023 0304 	bic.w	r3, r3, #4
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fe f990 	bl	8002628 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fe f98c 	bl	8002628 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0cb      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004322:	4b49      	ldr	r3, [pc, #292]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ee      	beq.n	800430c <HAL_RCC_OscConfig+0x334>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004330:	f7fe f97a 	bl	8002628 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004336:	e00a      	b.n	800434e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fe f976 	bl	8002628 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0b5      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434e:	4b3e      	ldr	r3, [pc, #248]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ee      	bne.n	8004338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b39      	ldr	r3, [pc, #228]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	4a38      	ldr	r2, [pc, #224]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a1 	beq.w	80044b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004376:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b08      	cmp	r3, #8
 8004380:	d05c      	beq.n	800443c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d141      	bne.n	800440e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b31      	ldr	r3, [pc, #196]	@ (8004450 <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe f94a 	bl	8002628 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe f946 	bl	8002628 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e087      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	019b      	lsls	r3, r3, #6
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	491b      	ldr	r1, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x478>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fe f91f 	bl	8002628 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fe f91b 	bl	8002628 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e05c      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x416>
 800440c:	e054      	b.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <HAL_RCC_OscConfig+0x478>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe f908 	bl	8002628 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe f904 	bl	8002628 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e045      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x470>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x444>
 800443a:	e03d      	b.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e038      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	40007000 	.word	0x40007000
 8004450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x4ec>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d028      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d121      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d11a      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800448a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448c:	4293      	cmp	r3, r2
 800448e:	d111      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0cc      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b68      	ldr	r3, [pc, #416]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d90c      	bls.n	8004504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b65      	ldr	r3, [pc, #404]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b63      	ldr	r3, [pc, #396]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0b8      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d020      	beq.n	8004552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800451c:	4b59      	ldr	r3, [pc, #356]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a58      	ldr	r2, [pc, #352]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004534:	4b53      	ldr	r3, [pc, #332]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a52      	ldr	r2, [pc, #328]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800453e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004540:	4b50      	ldr	r3, [pc, #320]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	494d      	ldr	r1, [pc, #308]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d044      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d119      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e07f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d003      	beq.n	8004586 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004582:	2b03      	cmp	r3, #3
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004586:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e067      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a6:	4b37      	ldr	r3, [pc, #220]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4934      	ldr	r1, [pc, #208]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b8:	f7fe f836 	bl	8002628 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fe f832 	bl	8002628 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 020c 	and.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1eb      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e8:	4b25      	ldr	r3, [pc, #148]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d20c      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b22      	ldr	r3, [pc, #136]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b20      	ldr	r3, [pc, #128]	@ (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e032      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4916      	ldr	r1, [pc, #88]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463a:	4b12      	ldr	r3, [pc, #72]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	490e      	ldr	r1, [pc, #56]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800464e:	f000 f821 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004652:	4602      	mov	r2, r0
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	490a      	ldr	r1, [pc, #40]	@ (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	5ccb      	ldrb	r3, [r1, r3]
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	4a09      	ldr	r2, [pc, #36]	@ (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fd ff96 	bl	80025a0 <HAL_InitTick>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023c00 	.word	0x40023c00
 8004684:	40023800 	.word	0x40023800
 8004688:	08008adc 	.word	0x08008adc
 800468c:	20000078 	.word	0x20000078
 8004690:	2000007c 	.word	0x2000007c

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b094      	sub	sp, #80	@ 0x50
 800469a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ac:	4b79      	ldr	r3, [pc, #484]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d00d      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x40>
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	f200 80e1 	bhi.w	8004880 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x34>
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x3a>
 80046c6:	e0db      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b73      	ldr	r3, [pc, #460]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046cc:	e0db      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ce:	4b73      	ldr	r3, [pc, #460]	@ (800489c <HAL_RCC_GetSysClockFreq+0x208>)
 80046d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d2:	e0d8      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046de:	4b6d      	ldr	r3, [pc, #436]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d063      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	2200      	movs	r2, #0
 80046f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
 8004702:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004706:	4622      	mov	r2, r4
 8004708:	462b      	mov	r3, r5
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	0159      	lsls	r1, r3, #5
 8004714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004718:	0150      	lsls	r0, r2, #5
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4621      	mov	r1, r4
 8004720:	1a51      	subs	r1, r2, r1
 8004722:	6139      	str	r1, [r7, #16]
 8004724:	4629      	mov	r1, r5
 8004726:	eb63 0301 	sbc.w	r3, r3, r1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004738:	4659      	mov	r1, fp
 800473a:	018b      	lsls	r3, r1, #6
 800473c:	4651      	mov	r1, sl
 800473e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004742:	4651      	mov	r1, sl
 8004744:	018a      	lsls	r2, r1, #6
 8004746:	4651      	mov	r1, sl
 8004748:	ebb2 0801 	subs.w	r8, r2, r1
 800474c:	4659      	mov	r1, fp
 800474e:	eb63 0901 	sbc.w	r9, r3, r1
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800475e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004766:	4690      	mov	r8, r2
 8004768:	4699      	mov	r9, r3
 800476a:	4623      	mov	r3, r4
 800476c:	eb18 0303 	adds.w	r3, r8, r3
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	462b      	mov	r3, r5
 8004774:	eb49 0303 	adc.w	r3, r9, r3
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004786:	4629      	mov	r1, r5
 8004788:	024b      	lsls	r3, r1, #9
 800478a:	4621      	mov	r1, r4
 800478c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004790:	4621      	mov	r1, r4
 8004792:	024a      	lsls	r2, r1, #9
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800479a:	2200      	movs	r2, #0
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047a4:	f7fc fa08 	bl	8000bb8 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4613      	mov	r3, r2
 80047ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b0:	e058      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b38      	ldr	r3, [pc, #224]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	2200      	movs	r2, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	4611      	mov	r1, r2
 80047be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	f04f 0000 	mov.w	r0, #0
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	0159      	lsls	r1, r3, #5
 80047da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047de:	0150      	lsls	r0, r2, #5
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4641      	mov	r1, r8
 80047e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ea:	4649      	mov	r1, r9
 80047ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004804:	ebb2 040a 	subs.w	r4, r2, sl
 8004808:	eb63 050b 	sbc.w	r5, r3, fp
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	464b      	mov	r3, r9
 8004828:	eb45 0303 	adc.w	r3, r5, r3
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800483a:	4629      	mov	r1, r5
 800483c:	028b      	lsls	r3, r1, #10
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004844:	4621      	mov	r1, r4
 8004846:	028a      	lsls	r2, r1, #10
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484e:	2200      	movs	r2, #0
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	61fa      	str	r2, [r7, #28]
 8004854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004858:	f7fc f9ae 	bl	8000bb8 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x200>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	3301      	adds	r3, #1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004874:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800487e:	e002      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x204>)
 8004882:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004888:	4618      	mov	r0, r3
 800488a:	3750      	adds	r7, #80	@ 0x50
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200

080048a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000078 	.word	0x20000078

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a9b      	lsrs	r3, r3, #10
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	08008aec 	.word	0x08008aec

080048e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e4:	f7ff ffdc 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0b5b      	lsrs	r3, r3, #13
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	@ (8004904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	08008aec 	.word	0x08008aec

08004908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07b      	b.n	8004a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800492a:	d009      	beq.n	8004940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e005      	b.n	8004940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd fb12 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	f003 0104 	and.w	r1, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	f003 0210 	and.w	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e04a      	b.n	8004ac2 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fd fae7 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2224      	movs	r2, #36	@ 0x24
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fc84 	bl	800536c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004a82:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b0ba      	sub	sp, #232	@ 0xe8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_UART_IRQHandler+0x66>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fb5f 	bl	80051ee <UART_Receive_IT>
      return;
 8004b30:	e25b      	b.n	8004fea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80de 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x22c>
 8004b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80d1 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_UART_IRQHandler+0xae>
 8004b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_UART_IRQHandler+0xd2>
 8004b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f043 0202 	orr.w	r2, r3, #2
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xf6>
 8004baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f043 0204 	orr.w	r2, r3, #4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x126>
 8004bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bea:	f043 0208 	orr.w	r2, r3, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 81f2 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x14e>
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 faea 	bl	80051ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_UART_IRQHandler+0x17a>
 8004c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d04f      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9f2 	bl	8005030 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c56:	2b40      	cmp	r3, #64	@ 0x40
 8004c58:	d141      	bne.n	8004cde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1d9      	bne.n	8004c5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d013      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8004eac <HAL_UART_IRQHandler+0x3e0>)
 8004cb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd ff14 	bl	8002ae8 <HAL_DMA_Abort_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00e      	b.n	8004cf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f994 	bl	8005004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f990 	bl	8005004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	e006      	b.n	8004cf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f98c 	bl	8005004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cf2:	e175      	b.n	8004fe0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	bf00      	nop
    return;
 8004cf6:	e173      	b.n	8004fe0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f040 814f 	bne.w	8004fa0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8148 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8141 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	f040 80b6 	bne.w	8004eb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8145 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d62:	429a      	cmp	r2, r3
 8004d64:	f080 813e 	bcs.w	8004fe4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7a:	f000 8088 	beq.w	8004e8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1d9      	bne.n	8004d7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3314      	adds	r3, #20
 8004dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3314      	adds	r3, #20
 8004dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e1      	bne.n	8004dca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3314      	adds	r3, #20
 8004e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e3      	bne.n	8004e06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e3      	bne.n	8004e4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd fdbd 	bl	8002a08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8b7 	bl	8005018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eaa:	e09b      	b.n	8004fe4 <HAL_UART_IRQHandler+0x518>
 8004eac:	080050f7 	.word	0x080050f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 808e 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8089 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004efa:	647a      	str	r2, [r7, #68]	@ 0x44
 8004efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e3      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e3      	bne.n	8004f0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0310 	bic.w	r3, r3, #16
 8004f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f78:	61fa      	str	r2, [r7, #28]
 8004f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	617b      	str	r3, [r7, #20]
   return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e3      	bne.n	8004f54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f83d 	bl	8005018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f9e:	e023      	b.n	8004fe8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x4f4>
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8b0 	bl	800511e <UART_Transmit_IT>
    return;
 8004fbe:	e014      	b.n	8004fea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <HAL_UART_IRQHandler+0x51e>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8f0 	bl	80051be <UART_EndTransmit_IT>
    return;
 8004fde:	e004      	b.n	8004fea <HAL_UART_IRQHandler+0x51e>
    return;
 8004fe0:	bf00      	nop
 8004fe2:	e002      	b.n	8004fea <HAL_UART_IRQHandler+0x51e>
      return;
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <HAL_UART_IRQHandler+0x51e>
      return;
 8004fe8:	bf00      	nop
  }
}
 8004fea:	37e8      	adds	r7, #232	@ 0xe8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b095      	sub	sp, #84	@ 0x54
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800504e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005058:	643a      	str	r2, [r7, #64]	@ 0x40
 800505a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800505e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	61fb      	str	r3, [r7, #28]
   return(result);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800508c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d119      	bne.n	80050dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0310 	bic.w	r3, r3, #16
 80050be:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c8:	61ba      	str	r2, [r7, #24]
 80050ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6979      	ldr	r1, [r7, #20]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	613b      	str	r3, [r7, #16]
   return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050ea:	bf00      	nop
 80050ec:	3754      	adds	r7, #84	@ 0x54
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff ff77 	bl	8005004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b21      	cmp	r3, #33	@ 0x21
 8005130:	d13e      	bne.n	80051b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513a:	d114      	bne.n	8005166 <UART_Transmit_IT+0x48>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d110      	bne.n	8005166 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	621a      	str	r2, [r3, #32]
 8005164:	e008      	b.n	8005178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6211      	str	r1, [r2, #32]
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4619      	mov	r1, r3
 8005186:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10f      	bne.n	80051ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
  }
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ff06 	bl	8004ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08c      	sub	sp, #48	@ 0x30
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b22      	cmp	r3, #34	@ 0x22
 8005200:	f040 80ae 	bne.w	8005360 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520c:	d117      	bne.n	800523e <UART_Receive_IT+0x50>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d113      	bne.n	800523e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522c:	b29a      	uxth	r2, r3
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28
 800523c:	e026      	b.n	800528c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005250:	d007      	beq.n	8005262 <UART_Receive_IT+0x74>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <UART_Receive_IT+0x82>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e008      	b.n	8005282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	b2da      	uxtb	r2, r3
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800529c:	2b00      	cmp	r3, #0
 800529e:	d15d      	bne.n	800535c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0220 	bic.w	r2, r2, #32
 80052ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d135      	bne.n	8005352 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	623a      	str	r2, [r7, #32]
 800530e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	61bb      	str	r3, [r7, #24]
   return(result);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b10      	cmp	r3, #16
 800532c:	d10a      	bne.n	8005344 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fe64 	bl	8005018 <HAL_UARTEx_RxEventCallback>
 8005350:	e002      	b.n	8005358 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fb ff2e 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	e002      	b.n	8005362 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3730      	adds	r7, #48	@ 0x30
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005370:	b0c0      	sub	sp, #256	@ 0x100
 8005372:	af00      	add	r7, sp, #0
 8005374:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	ea40 0301 	orr.w	r3, r0, r1
 8005394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053c4:	f021 010c 	bic.w	r1, r1, #12
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d2:	430b      	orrs	r3, r1
 80053d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e6:	6999      	ldr	r1, [r3, #24]
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	ea40 0301 	orr.w	r3, r0, r1
 80053f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005638 <UART_SetConfig+0x2cc>)
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d005      	beq.n	800540c <UART_SetConfig+0xa0>
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b8d      	ldr	r3, [pc, #564]	@ (800563c <UART_SetConfig+0x2d0>)
 8005408:	429a      	cmp	r2, r3
 800540a:	d104      	bne.n	8005416 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7ff fa68 	bl	80048e0 <HAL_RCC_GetPCLK2Freq>
 8005410:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005414:	e003      	b.n	800541e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005416:	f7ff fa4f 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 800541a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005428:	f040 810c 	bne.w	8005644 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800542c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005430:	2200      	movs	r2, #0
 8005432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005436:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800543a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	1891      	adds	r1, r2, r2
 8005444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005446:	415b      	adcs	r3, r3
 8005448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800544a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800544e:	4621      	mov	r1, r4
 8005450:	eb12 0801 	adds.w	r8, r2, r1
 8005454:	4629      	mov	r1, r5
 8005456:	eb43 0901 	adc.w	r9, r3, r1
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800546a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800546e:	4690      	mov	r8, r2
 8005470:	4699      	mov	r9, r3
 8005472:	4623      	mov	r3, r4
 8005474:	eb18 0303 	adds.w	r3, r8, r3
 8005478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800547c:	462b      	mov	r3, r5
 800547e:	eb49 0303 	adc.w	r3, r9, r3
 8005482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800549a:	460b      	mov	r3, r1
 800549c:	18db      	adds	r3, r3, r3
 800549e:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a0:	4613      	mov	r3, r2
 80054a2:	eb42 0303 	adc.w	r3, r2, r3
 80054a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054b0:	f7fb fb82 	bl	8000bb8 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b61      	ldr	r3, [pc, #388]	@ (8005640 <UART_SetConfig+0x2d4>)
 80054ba:	fba3 2302 	umull	r2, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	011c      	lsls	r4, r3, #4
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054dc:	415b      	adcs	r3, r3
 80054de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054e4:	4641      	mov	r1, r8
 80054e6:	eb12 0a01 	adds.w	sl, r2, r1
 80054ea:	4649      	mov	r1, r9
 80054ec:	eb43 0b01 	adc.w	fp, r3, r1
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005504:	4692      	mov	sl, r2
 8005506:	469b      	mov	fp, r3
 8005508:	4643      	mov	r3, r8
 800550a:	eb1a 0303 	adds.w	r3, sl, r3
 800550e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005512:	464b      	mov	r3, r9
 8005514:	eb4b 0303 	adc.w	r3, fp, r3
 8005518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005528:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800552c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005530:	460b      	mov	r3, r1
 8005532:	18db      	adds	r3, r3, r3
 8005534:	643b      	str	r3, [r7, #64]	@ 0x40
 8005536:	4613      	mov	r3, r2
 8005538:	eb42 0303 	adc.w	r3, r2, r3
 800553c:	647b      	str	r3, [r7, #68]	@ 0x44
 800553e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005542:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005546:	f7fb fb37 	bl	8000bb8 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4611      	mov	r1, r2
 8005550:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <UART_SetConfig+0x2d4>)
 8005552:	fba3 2301 	umull	r2, r3, r3, r1
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2264      	movs	r2, #100	@ 0x64
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	1acb      	subs	r3, r1, r3
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005566:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <UART_SetConfig+0x2d4>)
 8005568:	fba3 2302 	umull	r2, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005574:	441c      	add	r4, r3
 8005576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557a:	2200      	movs	r2, #0
 800557c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005584:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	1891      	adds	r1, r2, r2
 800558e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005590:	415b      	adcs	r3, r3
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005598:	4641      	mov	r1, r8
 800559a:	1851      	adds	r1, r2, r1
 800559c:	6339      	str	r1, [r7, #48]	@ 0x30
 800559e:	4649      	mov	r1, r9
 80055a0:	414b      	adcs	r3, r1
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055b0:	4659      	mov	r1, fp
 80055b2:	00cb      	lsls	r3, r1, #3
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ba:	4651      	mov	r1, sl
 80055bc:	00ca      	lsls	r2, r1, #3
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	4642      	mov	r2, r8
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055cc:	464b      	mov	r3, r9
 80055ce:	460a      	mov	r2, r1
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055ec:	460b      	mov	r3, r1
 80055ee:	18db      	adds	r3, r3, r3
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f2:	4613      	mov	r3, r2
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005602:	f7fb fad9 	bl	8000bb8 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <UART_SetConfig+0x2d4>)
 800560c:	fba3 1302 	umull	r1, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	2164      	movs	r1, #100	@ 0x64
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	3332      	adds	r3, #50	@ 0x32
 800561e:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <UART_SetConfig+0x2d4>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f003 0207 	and.w	r2, r3, #7
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4422      	add	r2, r4
 8005632:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005634:	e106      	b.n	8005844 <UART_SetConfig+0x4d8>
 8005636:	bf00      	nop
 8005638:	40011000 	.word	0x40011000
 800563c:	40011400 	.word	0x40011400
 8005640:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800564e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005652:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005656:	4642      	mov	r2, r8
 8005658:	464b      	mov	r3, r9
 800565a:	1891      	adds	r1, r2, r2
 800565c:	6239      	str	r1, [r7, #32]
 800565e:	415b      	adcs	r3, r3
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
 8005662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005666:	4641      	mov	r1, r8
 8005668:	1854      	adds	r4, r2, r1
 800566a:	4649      	mov	r1, r9
 800566c:	eb43 0501 	adc.w	r5, r3, r1
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	00eb      	lsls	r3, r5, #3
 800567a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567e:	00e2      	lsls	r2, r4, #3
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	4643      	mov	r3, r8
 8005686:	18e3      	adds	r3, r4, r3
 8005688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800568c:	464b      	mov	r3, r9
 800568e:	eb45 0303 	adc.w	r3, r5, r3
 8005692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056b2:	4629      	mov	r1, r5
 80056b4:	008b      	lsls	r3, r1, #2
 80056b6:	4621      	mov	r1, r4
 80056b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056bc:	4621      	mov	r1, r4
 80056be:	008a      	lsls	r2, r1, #2
 80056c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056c4:	f7fb fa78 	bl	8000bb8 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4b60      	ldr	r3, [pc, #384]	@ (8005850 <UART_SetConfig+0x4e4>)
 80056ce:	fba3 2302 	umull	r2, r3, r3, r2
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	011c      	lsls	r4, r3, #4
 80056d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	1891      	adds	r1, r2, r2
 80056ee:	61b9      	str	r1, [r7, #24]
 80056f0:	415b      	adcs	r3, r3
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f8:	4641      	mov	r1, r8
 80056fa:	1851      	adds	r1, r2, r1
 80056fc:	6139      	str	r1, [r7, #16]
 80056fe:	4649      	mov	r1, r9
 8005700:	414b      	adcs	r3, r1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005710:	4659      	mov	r1, fp
 8005712:	00cb      	lsls	r3, r1, #3
 8005714:	4651      	mov	r1, sl
 8005716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571a:	4651      	mov	r1, sl
 800571c:	00ca      	lsls	r2, r1, #3
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	4603      	mov	r3, r0
 8005724:	4642      	mov	r2, r8
 8005726:	189b      	adds	r3, r3, r2
 8005728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800572c:	464b      	mov	r3, r9
 800572e:	460a      	mov	r2, r1
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005742:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005750:	4649      	mov	r1, r9
 8005752:	008b      	lsls	r3, r1, #2
 8005754:	4641      	mov	r1, r8
 8005756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575a:	4641      	mov	r1, r8
 800575c:	008a      	lsls	r2, r1, #2
 800575e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005762:	f7fb fa29 	bl	8000bb8 <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4611      	mov	r1, r2
 800576c:	4b38      	ldr	r3, [pc, #224]	@ (8005850 <UART_SetConfig+0x4e4>)
 800576e:	fba3 2301 	umull	r2, r3, r3, r1
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2264      	movs	r2, #100	@ 0x64
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	1acb      	subs	r3, r1, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	@ 0x32
 8005780:	4a33      	ldr	r2, [pc, #204]	@ (8005850 <UART_SetConfig+0x4e4>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800578c:	441c      	add	r4, r3
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	673b      	str	r3, [r7, #112]	@ 0x70
 8005796:	677a      	str	r2, [r7, #116]	@ 0x74
 8005798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800579c:	4642      	mov	r2, r8
 800579e:	464b      	mov	r3, r9
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	415b      	adcs	r3, r3
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ac:	4641      	mov	r1, r8
 80057ae:	1851      	adds	r1, r2, r1
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	4649      	mov	r1, r9
 80057b4:	414b      	adcs	r3, r1
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057c4:	4659      	mov	r1, fp
 80057c6:	00cb      	lsls	r3, r1, #3
 80057c8:	4651      	mov	r1, sl
 80057ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ce:	4651      	mov	r1, sl
 80057d0:	00ca      	lsls	r2, r1, #3
 80057d2:	4610      	mov	r0, r2
 80057d4:	4619      	mov	r1, r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	4642      	mov	r2, r8
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057de:	464b      	mov	r3, r9
 80057e0:	460a      	mov	r2, r1
 80057e2:	eb42 0303 	adc.w	r3, r2, r3
 80057e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80057f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005800:	4649      	mov	r1, r9
 8005802:	008b      	lsls	r3, r1, #2
 8005804:	4641      	mov	r1, r8
 8005806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800580a:	4641      	mov	r1, r8
 800580c:	008a      	lsls	r2, r1, #2
 800580e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005812:	f7fb f9d1 	bl	8000bb8 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <UART_SetConfig+0x4e4>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	@ 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	3332      	adds	r3, #50	@ 0x32
 800582e:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <UART_SetConfig+0x4e4>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f003 020f 	and.w	r2, r3, #15
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4422      	add	r2, r4
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800584a:	46bd      	mov	sp, r7
 800584c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005850:	51eb851f 	.word	0x51eb851f

08005854 <malloc>:
 8005854:	4b02      	ldr	r3, [pc, #8]	@ (8005860 <malloc+0xc>)
 8005856:	4601      	mov	r1, r0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f000 b825 	b.w	80058a8 <_malloc_r>
 800585e:	bf00      	nop
 8005860:	20000090 	.word	0x20000090

08005864 <sbrk_aligned>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4e0f      	ldr	r6, [pc, #60]	@ (80058a4 <sbrk_aligned+0x40>)
 8005868:	460c      	mov	r4, r1
 800586a:	6831      	ldr	r1, [r6, #0]
 800586c:	4605      	mov	r5, r0
 800586e:	b911      	cbnz	r1, 8005876 <sbrk_aligned+0x12>
 8005870:	f000 fea2 	bl	80065b8 <_sbrk_r>
 8005874:	6030      	str	r0, [r6, #0]
 8005876:	4621      	mov	r1, r4
 8005878:	4628      	mov	r0, r5
 800587a:	f000 fe9d 	bl	80065b8 <_sbrk_r>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d103      	bne.n	800588a <sbrk_aligned+0x26>
 8005882:	f04f 34ff 	mov.w	r4, #4294967295
 8005886:	4620      	mov	r0, r4
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	1cc4      	adds	r4, r0, #3
 800588c:	f024 0403 	bic.w	r4, r4, #3
 8005890:	42a0      	cmp	r0, r4
 8005892:	d0f8      	beq.n	8005886 <sbrk_aligned+0x22>
 8005894:	1a21      	subs	r1, r4, r0
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fe8e 	bl	80065b8 <_sbrk_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d1f2      	bne.n	8005886 <sbrk_aligned+0x22>
 80058a0:	e7ef      	b.n	8005882 <sbrk_aligned+0x1e>
 80058a2:	bf00      	nop
 80058a4:	2000044c 	.word	0x2000044c

080058a8 <_malloc_r>:
 80058a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ac:	1ccd      	adds	r5, r1, #3
 80058ae:	f025 0503 	bic.w	r5, r5, #3
 80058b2:	3508      	adds	r5, #8
 80058b4:	2d0c      	cmp	r5, #12
 80058b6:	bf38      	it	cc
 80058b8:	250c      	movcc	r5, #12
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	4606      	mov	r6, r0
 80058be:	db01      	blt.n	80058c4 <_malloc_r+0x1c>
 80058c0:	42a9      	cmp	r1, r5
 80058c2:	d904      	bls.n	80058ce <_malloc_r+0x26>
 80058c4:	230c      	movs	r3, #12
 80058c6:	6033      	str	r3, [r6, #0]
 80058c8:	2000      	movs	r0, #0
 80058ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059a4 <_malloc_r+0xfc>
 80058d2:	f000 f869 	bl	80059a8 <__malloc_lock>
 80058d6:	f8d8 3000 	ldr.w	r3, [r8]
 80058da:	461c      	mov	r4, r3
 80058dc:	bb44      	cbnz	r4, 8005930 <_malloc_r+0x88>
 80058de:	4629      	mov	r1, r5
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff ffbf 	bl	8005864 <sbrk_aligned>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	4604      	mov	r4, r0
 80058ea:	d158      	bne.n	800599e <_malloc_r+0xf6>
 80058ec:	f8d8 4000 	ldr.w	r4, [r8]
 80058f0:	4627      	mov	r7, r4
 80058f2:	2f00      	cmp	r7, #0
 80058f4:	d143      	bne.n	800597e <_malloc_r+0xd6>
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d04b      	beq.n	8005992 <_malloc_r+0xea>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	4639      	mov	r1, r7
 80058fe:	4630      	mov	r0, r6
 8005900:	eb04 0903 	add.w	r9, r4, r3
 8005904:	f000 fe58 	bl	80065b8 <_sbrk_r>
 8005908:	4581      	cmp	r9, r0
 800590a:	d142      	bne.n	8005992 <_malloc_r+0xea>
 800590c:	6821      	ldr	r1, [r4, #0]
 800590e:	1a6d      	subs	r5, r5, r1
 8005910:	4629      	mov	r1, r5
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff ffa6 	bl	8005864 <sbrk_aligned>
 8005918:	3001      	adds	r0, #1
 800591a:	d03a      	beq.n	8005992 <_malloc_r+0xea>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	442b      	add	r3, r5
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	f8d8 3000 	ldr.w	r3, [r8]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	bb62      	cbnz	r2, 8005984 <_malloc_r+0xdc>
 800592a:	f8c8 7000 	str.w	r7, [r8]
 800592e:	e00f      	b.n	8005950 <_malloc_r+0xa8>
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	1b52      	subs	r2, r2, r5
 8005934:	d420      	bmi.n	8005978 <_malloc_r+0xd0>
 8005936:	2a0b      	cmp	r2, #11
 8005938:	d917      	bls.n	800596a <_malloc_r+0xc2>
 800593a:	1961      	adds	r1, r4, r5
 800593c:	42a3      	cmp	r3, r4
 800593e:	6025      	str	r5, [r4, #0]
 8005940:	bf18      	it	ne
 8005942:	6059      	strne	r1, [r3, #4]
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	bf08      	it	eq
 8005948:	f8c8 1000 	streq.w	r1, [r8]
 800594c:	5162      	str	r2, [r4, r5]
 800594e:	604b      	str	r3, [r1, #4]
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f82f 	bl	80059b4 <__malloc_unlock>
 8005956:	f104 000b 	add.w	r0, r4, #11
 800595a:	1d23      	adds	r3, r4, #4
 800595c:	f020 0007 	bic.w	r0, r0, #7
 8005960:	1ac2      	subs	r2, r0, r3
 8005962:	bf1c      	itt	ne
 8005964:	1a1b      	subne	r3, r3, r0
 8005966:	50a3      	strne	r3, [r4, r2]
 8005968:	e7af      	b.n	80058ca <_malloc_r+0x22>
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	42a3      	cmp	r3, r4
 800596e:	bf0c      	ite	eq
 8005970:	f8c8 2000 	streq.w	r2, [r8]
 8005974:	605a      	strne	r2, [r3, #4]
 8005976:	e7eb      	b.n	8005950 <_malloc_r+0xa8>
 8005978:	4623      	mov	r3, r4
 800597a:	6864      	ldr	r4, [r4, #4]
 800597c:	e7ae      	b.n	80058dc <_malloc_r+0x34>
 800597e:	463c      	mov	r4, r7
 8005980:	687f      	ldr	r7, [r7, #4]
 8005982:	e7b6      	b.n	80058f2 <_malloc_r+0x4a>
 8005984:	461a      	mov	r2, r3
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	42a3      	cmp	r3, r4
 800598a:	d1fb      	bne.n	8005984 <_malloc_r+0xdc>
 800598c:	2300      	movs	r3, #0
 800598e:	6053      	str	r3, [r2, #4]
 8005990:	e7de      	b.n	8005950 <_malloc_r+0xa8>
 8005992:	230c      	movs	r3, #12
 8005994:	6033      	str	r3, [r6, #0]
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f80c 	bl	80059b4 <__malloc_unlock>
 800599c:	e794      	b.n	80058c8 <_malloc_r+0x20>
 800599e:	6005      	str	r5, [r0, #0]
 80059a0:	e7d6      	b.n	8005950 <_malloc_r+0xa8>
 80059a2:	bf00      	nop
 80059a4:	20000450 	.word	0x20000450

080059a8 <__malloc_lock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	@ (80059b0 <__malloc_lock+0x8>)
 80059aa:	f000 be52 	b.w	8006652 <__retarget_lock_acquire_recursive>
 80059ae:	bf00      	nop
 80059b0:	20000594 	.word	0x20000594

080059b4 <__malloc_unlock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	@ (80059bc <__malloc_unlock+0x8>)
 80059b6:	f000 be4d 	b.w	8006654 <__retarget_lock_release_recursive>
 80059ba:	bf00      	nop
 80059bc:	20000594 	.word	0x20000594

080059c0 <rand>:
 80059c0:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <rand+0x5c>)
 80059c2:	b510      	push	{r4, lr}
 80059c4:	681c      	ldr	r4, [r3, #0]
 80059c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059c8:	b9b3      	cbnz	r3, 80059f8 <rand+0x38>
 80059ca:	2018      	movs	r0, #24
 80059cc:	f7ff ff42 	bl	8005854 <malloc>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80059d4:	b920      	cbnz	r0, 80059e0 <rand+0x20>
 80059d6:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <rand+0x60>)
 80059d8:	4812      	ldr	r0, [pc, #72]	@ (8005a24 <rand+0x64>)
 80059da:	2152      	movs	r1, #82	@ 0x52
 80059dc:	f000 fe3c 	bl	8006658 <__assert_func>
 80059e0:	4911      	ldr	r1, [pc, #68]	@ (8005a28 <rand+0x68>)
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <rand+0x6c>)
 80059e4:	e9c0 1300 	strd	r1, r3, [r0]
 80059e8:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <rand+0x70>)
 80059ea:	6083      	str	r3, [r0, #8]
 80059ec:	230b      	movs	r3, #11
 80059ee:	8183      	strh	r3, [r0, #12]
 80059f0:	2100      	movs	r1, #0
 80059f2:	2001      	movs	r0, #1
 80059f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80059f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059fa:	480e      	ldr	r0, [pc, #56]	@ (8005a34 <rand+0x74>)
 80059fc:	690b      	ldr	r3, [r1, #16]
 80059fe:	694c      	ldr	r4, [r1, #20]
 8005a00:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <rand+0x78>)
 8005a02:	4358      	muls	r0, r3
 8005a04:	fb02 0004 	mla	r0, r2, r4, r0
 8005a08:	fba3 3202 	umull	r3, r2, r3, r2
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	eb40 0002 	adc.w	r0, r0, r2
 8005a12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005a16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a1a:	bd10      	pop	{r4, pc}
 8005a1c:	20000090 	.word	0x20000090
 8005a20:	08008afc 	.word	0x08008afc
 8005a24:	08008b13 	.word	0x08008b13
 8005a28:	abcd330e 	.word	0xabcd330e
 8005a2c:	e66d1234 	.word	0xe66d1234
 8005a30:	0005deec 	.word	0x0005deec
 8005a34:	5851f42d 	.word	0x5851f42d
 8005a38:	4c957f2d 	.word	0x4c957f2d

08005a3c <__cvt>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	ec57 6b10 	vmov	r6, r7, d0
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4619      	mov	r1, r3
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	bfbb      	ittet	lt
 8005a4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a52:	461f      	movlt	r7, r3
 8005a54:	2300      	movge	r3, #0
 8005a56:	232d      	movlt	r3, #45	@ 0x2d
 8005a58:	700b      	strb	r3, [r1, #0]
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a60:	4691      	mov	r9, r2
 8005a62:	f023 0820 	bic.w	r8, r3, #32
 8005a66:	bfbc      	itt	lt
 8005a68:	4632      	movlt	r2, r6
 8005a6a:	4616      	movlt	r6, r2
 8005a6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a70:	d005      	beq.n	8005a7e <__cvt+0x42>
 8005a72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a76:	d100      	bne.n	8005a7a <__cvt+0x3e>
 8005a78:	3401      	adds	r4, #1
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	e000      	b.n	8005a80 <__cvt+0x44>
 8005a7e:	2103      	movs	r1, #3
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	ab02      	add	r3, sp, #8
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	ec47 6b10 	vmov	d0, r6, r7
 8005a8c:	4653      	mov	r3, sl
 8005a8e:	4622      	mov	r2, r4
 8005a90:	f000 fe8a 	bl	80067a8 <_dtoa_r>
 8005a94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a98:	4605      	mov	r5, r0
 8005a9a:	d119      	bne.n	8005ad0 <__cvt+0x94>
 8005a9c:	f019 0f01 	tst.w	r9, #1
 8005aa0:	d00e      	beq.n	8005ac0 <__cvt+0x84>
 8005aa2:	eb00 0904 	add.w	r9, r0, r4
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	4639      	mov	r1, r7
 8005aae:	f7fb f813 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab2:	b108      	cbz	r0, 8005ab8 <__cvt+0x7c>
 8005ab4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ab8:	2230      	movs	r2, #48	@ 0x30
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	454b      	cmp	r3, r9
 8005abe:	d31e      	bcc.n	8005afe <__cvt+0xc2>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ac4:	1b5b      	subs	r3, r3, r5
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	b004      	add	sp, #16
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ad4:	eb00 0904 	add.w	r9, r0, r4
 8005ad8:	d1e5      	bne.n	8005aa6 <__cvt+0x6a>
 8005ada:	7803      	ldrb	r3, [r0, #0]
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d10a      	bne.n	8005af6 <__cvt+0xba>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aec:	b918      	cbnz	r0, 8005af6 <__cvt+0xba>
 8005aee:	f1c4 0401 	rsb	r4, r4, #1
 8005af2:	f8ca 4000 	str.w	r4, [sl]
 8005af6:	f8da 3000 	ldr.w	r3, [sl]
 8005afa:	4499      	add	r9, r3
 8005afc:	e7d3      	b.n	8005aa6 <__cvt+0x6a>
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e7d9      	b.n	8005aba <__cvt+0x7e>

08005b06 <__exponent>:
 8005b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfba      	itte	lt
 8005b0c:	4249      	neglt	r1, r1
 8005b0e:	232d      	movlt	r3, #45	@ 0x2d
 8005b10:	232b      	movge	r3, #43	@ 0x2b
 8005b12:	2909      	cmp	r1, #9
 8005b14:	7002      	strb	r2, [r0, #0]
 8005b16:	7043      	strb	r3, [r0, #1]
 8005b18:	dd29      	ble.n	8005b6e <__exponent+0x68>
 8005b1a:	f10d 0307 	add.w	r3, sp, #7
 8005b1e:	461d      	mov	r5, r3
 8005b20:	270a      	movs	r7, #10
 8005b22:	461a      	mov	r2, r3
 8005b24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b28:	fb07 1416 	mls	r4, r7, r6, r1
 8005b2c:	3430      	adds	r4, #48	@ 0x30
 8005b2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b32:	460c      	mov	r4, r1
 8005b34:	2c63      	cmp	r4, #99	@ 0x63
 8005b36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	dcf1      	bgt.n	8005b22 <__exponent+0x1c>
 8005b3e:	3130      	adds	r1, #48	@ 0x30
 8005b40:	1e94      	subs	r4, r2, #2
 8005b42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b46:	1c41      	adds	r1, r0, #1
 8005b48:	4623      	mov	r3, r4
 8005b4a:	42ab      	cmp	r3, r5
 8005b4c:	d30a      	bcc.n	8005b64 <__exponent+0x5e>
 8005b4e:	f10d 0309 	add.w	r3, sp, #9
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	42ac      	cmp	r4, r5
 8005b56:	bf88      	it	hi
 8005b58:	2300      	movhi	r3, #0
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	4403      	add	r3, r0
 8005b5e:	1a18      	subs	r0, r3, r0
 8005b60:	b003      	add	sp, #12
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b6c:	e7ed      	b.n	8005b4a <__exponent+0x44>
 8005b6e:	2330      	movs	r3, #48	@ 0x30
 8005b70:	3130      	adds	r1, #48	@ 0x30
 8005b72:	7083      	strb	r3, [r0, #2]
 8005b74:	70c1      	strb	r1, [r0, #3]
 8005b76:	1d03      	adds	r3, r0, #4
 8005b78:	e7f1      	b.n	8005b5e <__exponent+0x58>
	...

08005b7c <_printf_float>:
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	b08d      	sub	sp, #52	@ 0x34
 8005b82:	460c      	mov	r4, r1
 8005b84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b88:	4616      	mov	r6, r2
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	f000 fcdb 	bl	8006548 <_localeconv_r>
 8005b92:	6803      	ldr	r3, [r0, #0]
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fa fb72 	bl	8000280 <strlen>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba4:	9005      	str	r0, [sp, #20]
 8005ba6:	3307      	adds	r3, #7
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	f103 0208 	add.w	r2, r3, #8
 8005bb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bb8:	f8c8 2000 	str.w	r2, [r8]
 8005bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e44 <_printf_float+0x2c8>)
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	f7fa ffb0 	bl	8000b3c <__aeabi_dcmpun>
 8005bdc:	bb70      	cbnz	r0, 8005c3c <_printf_float+0xc0>
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	4b98      	ldr	r3, [pc, #608]	@ (8005e44 <_printf_float+0x2c8>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	f7fa ff8a 	bl	8000b00 <__aeabi_dcmple>
 8005bec:	bb30      	cbnz	r0, 8005c3c <_printf_float+0xc0>
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	f7fa ff79 	bl	8000aec <__aeabi_dcmplt>
 8005bfa:	b110      	cbz	r0, 8005c02 <_printf_float+0x86>
 8005bfc:	232d      	movs	r3, #45	@ 0x2d
 8005bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c02:	4a91      	ldr	r2, [pc, #580]	@ (8005e48 <_printf_float+0x2cc>)
 8005c04:	4b91      	ldr	r3, [pc, #580]	@ (8005e4c <_printf_float+0x2d0>)
 8005c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c0a:	bf94      	ite	ls
 8005c0c:	4690      	movls	r8, r2
 8005c0e:	4698      	movhi	r8, r3
 8005c10:	2303      	movs	r3, #3
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	f02b 0304 	bic.w	r3, fp, #4
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	f04f 0900 	mov.w	r9, #0
 8005c1e:	9700      	str	r7, [sp, #0]
 8005c20:	4633      	mov	r3, r6
 8005c22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f9d2 	bl	8005fd0 <_printf_common>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f040 808d 	bne.w	8005d4c <_printf_float+0x1d0>
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	b00d      	add	sp, #52	@ 0x34
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa ff7a 	bl	8000b3c <__aeabi_dcmpun>
 8005c48:	b140      	cbz	r0, 8005c5c <_printf_float+0xe0>
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfbc      	itt	lt
 8005c50:	232d      	movlt	r3, #45	@ 0x2d
 8005c52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c56:	4a7e      	ldr	r2, [pc, #504]	@ (8005e50 <_printf_float+0x2d4>)
 8005c58:	4b7e      	ldr	r3, [pc, #504]	@ (8005e54 <_printf_float+0x2d8>)
 8005c5a:	e7d4      	b.n	8005c06 <_printf_float+0x8a>
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c62:	9206      	str	r2, [sp, #24]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	d13b      	bne.n	8005ce0 <_printf_float+0x164>
 8005c68:	2306      	movs	r3, #6
 8005c6a:	6063      	str	r3, [r4, #4]
 8005c6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c70:	2300      	movs	r3, #0
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	6861      	ldr	r1, [r4, #4]
 8005c82:	ec49 8b10 	vmov	d0, r8, r9
 8005c86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fed6 	bl	8005a3c <__cvt>
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c94:	2b47      	cmp	r3, #71	@ 0x47
 8005c96:	4680      	mov	r8, r0
 8005c98:	d129      	bne.n	8005cee <_printf_float+0x172>
 8005c9a:	1cc8      	adds	r0, r1, #3
 8005c9c:	db02      	blt.n	8005ca4 <_printf_float+0x128>
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	dd41      	ble.n	8005d28 <_printf_float+0x1ac>
 8005ca4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ca8:	fa5f fa8a 	uxtb.w	sl, sl
 8005cac:	3901      	subs	r1, #1
 8005cae:	4652      	mov	r2, sl
 8005cb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cb6:	f7ff ff26 	bl	8005b06 <__exponent>
 8005cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cbc:	1813      	adds	r3, r2, r0
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	dc02      	bgt.n	8005ccc <_printf_float+0x150>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	07d2      	lsls	r2, r2, #31
 8005cca:	d501      	bpl.n	8005cd0 <_printf_float+0x154>
 8005ccc:	3301      	adds	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0a2      	beq.n	8005c1e <_printf_float+0xa2>
 8005cd8:	232d      	movs	r3, #45	@ 0x2d
 8005cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cde:	e79e      	b.n	8005c1e <_printf_float+0xa2>
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	2a47      	cmp	r2, #71	@ 0x47
 8005ce4:	d1c2      	bne.n	8005c6c <_printf_float+0xf0>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1c0      	bne.n	8005c6c <_printf_float+0xf0>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7bd      	b.n	8005c6a <_printf_float+0xee>
 8005cee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cf2:	d9db      	bls.n	8005cac <_printf_float+0x130>
 8005cf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cf8:	d118      	bne.n	8005d2c <_printf_float+0x1b0>
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	dd0b      	ble.n	8005d18 <_printf_float+0x19c>
 8005d00:	6121      	str	r1, [r4, #16]
 8005d02:	b913      	cbnz	r3, 8005d0a <_printf_float+0x18e>
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	07d0      	lsls	r0, r2, #31
 8005d08:	d502      	bpl.n	8005d10 <_printf_float+0x194>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	440b      	add	r3, r1
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	e7db      	b.n	8005cd0 <_printf_float+0x154>
 8005d18:	b913      	cbnz	r3, 8005d20 <_printf_float+0x1a4>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	07d2      	lsls	r2, r2, #31
 8005d1e:	d501      	bpl.n	8005d24 <_printf_float+0x1a8>
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7f4      	b.n	8005d0e <_printf_float+0x192>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e7f2      	b.n	8005d0e <_printf_float+0x192>
 8005d28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	db05      	blt.n	8005d3e <_printf_float+0x1c2>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	6121      	str	r1, [r4, #16]
 8005d36:	07d8      	lsls	r0, r3, #31
 8005d38:	d5ea      	bpl.n	8005d10 <_printf_float+0x194>
 8005d3a:	1c4b      	adds	r3, r1, #1
 8005d3c:	e7e7      	b.n	8005d0e <_printf_float+0x192>
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	bfd4      	ite	le
 8005d42:	f1c1 0202 	rsble	r2, r1, #2
 8005d46:	2201      	movgt	r2, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	e7e0      	b.n	8005d0e <_printf_float+0x192>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	055a      	lsls	r2, r3, #21
 8005d50:	d407      	bmi.n	8005d62 <_printf_float+0x1e6>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	4642      	mov	r2, r8
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d12b      	bne.n	8005db8 <_printf_float+0x23c>
 8005d60:	e767      	b.n	8005c32 <_printf_float+0xb6>
 8005d62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d66:	f240 80dd 	bls.w	8005f24 <_printf_float+0x3a8>
 8005d6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	f7fa feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d033      	beq.n	8005de2 <_printf_float+0x266>
 8005d7a:	4a37      	ldr	r2, [pc, #220]	@ (8005e58 <_printf_float+0x2dc>)
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f af54 	beq.w	8005c32 <_printf_float+0xb6>
 8005d8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d8e:	4543      	cmp	r3, r8
 8005d90:	db02      	blt.n	8005d98 <_printf_float+0x21c>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	07d8      	lsls	r0, r3, #31
 8005d96:	d50f      	bpl.n	8005db8 <_printf_float+0x23c>
 8005d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	f43f af45 	beq.w	8005c32 <_printf_float+0xb6>
 8005da8:	f04f 0900 	mov.w	r9, #0
 8005dac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005db0:	f104 0a1a 	add.w	sl, r4, #26
 8005db4:	45c8      	cmp	r8, r9
 8005db6:	dc09      	bgt.n	8005dcc <_printf_float+0x250>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	079b      	lsls	r3, r3, #30
 8005dbc:	f100 8103 	bmi.w	8005fc6 <_printf_float+0x44a>
 8005dc0:	68e0      	ldr	r0, [r4, #12]
 8005dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	bfb8      	it	lt
 8005dc8:	4618      	movlt	r0, r3
 8005dca:	e734      	b.n	8005c36 <_printf_float+0xba>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4652      	mov	r2, sl
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f af2b 	beq.w	8005c32 <_printf_float+0xb6>
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	e7e8      	b.n	8005db4 <_printf_float+0x238>
 8005de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc39      	bgt.n	8005e5c <_printf_float+0x2e0>
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <_printf_float+0x2dc>)
 8005dea:	2301      	movs	r3, #1
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f af1d 	beq.w	8005c32 <_printf_float+0xb6>
 8005df8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005dfc:	ea59 0303 	orrs.w	r3, r9, r3
 8005e00:	d102      	bne.n	8005e08 <_printf_float+0x28c>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	07d9      	lsls	r1, r3, #31
 8005e06:	d5d7      	bpl.n	8005db8 <_printf_float+0x23c>
 8005e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f af0d 	beq.w	8005c32 <_printf_float+0xb6>
 8005e18:	f04f 0a00 	mov.w	sl, #0
 8005e1c:	f104 0b1a 	add.w	fp, r4, #26
 8005e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e22:	425b      	negs	r3, r3
 8005e24:	4553      	cmp	r3, sl
 8005e26:	dc01      	bgt.n	8005e2c <_printf_float+0x2b0>
 8005e28:	464b      	mov	r3, r9
 8005e2a:	e793      	b.n	8005d54 <_printf_float+0x1d8>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	465a      	mov	r2, fp
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f aefb 	beq.w	8005c32 <_printf_float+0xb6>
 8005e3c:	f10a 0a01 	add.w	sl, sl, #1
 8005e40:	e7ee      	b.n	8005e20 <_printf_float+0x2a4>
 8005e42:	bf00      	nop
 8005e44:	7fefffff 	.word	0x7fefffff
 8005e48:	08008b6b 	.word	0x08008b6b
 8005e4c:	08008b6f 	.word	0x08008b6f
 8005e50:	08008b73 	.word	0x08008b73
 8005e54:	08008b77 	.word	0x08008b77
 8005e58:	08008b7b 	.word	0x08008b7b
 8005e5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e62:	4553      	cmp	r3, sl
 8005e64:	bfa8      	it	ge
 8005e66:	4653      	movge	r3, sl
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	dc36      	bgt.n	8005edc <_printf_float+0x360>
 8005e6e:	f04f 0b00 	mov.w	fp, #0
 8005e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e76:	f104 021a 	add.w	r2, r4, #26
 8005e7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e7c:	9306      	str	r3, [sp, #24]
 8005e7e:	eba3 0309 	sub.w	r3, r3, r9
 8005e82:	455b      	cmp	r3, fp
 8005e84:	dc31      	bgt.n	8005eea <_printf_float+0x36e>
 8005e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e88:	459a      	cmp	sl, r3
 8005e8a:	dc3a      	bgt.n	8005f02 <_printf_float+0x386>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07da      	lsls	r2, r3, #31
 8005e90:	d437      	bmi.n	8005f02 <_printf_float+0x386>
 8005e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e94:	ebaa 0903 	sub.w	r9, sl, r3
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e9e:	4599      	cmp	r9, r3
 8005ea0:	bfa8      	it	ge
 8005ea2:	4699      	movge	r9, r3
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	dc33      	bgt.n	8005f12 <_printf_float+0x396>
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eb2:	f104 0b1a 	add.w	fp, r4, #26
 8005eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ebc:	eba3 0309 	sub.w	r3, r3, r9
 8005ec0:	4543      	cmp	r3, r8
 8005ec2:	f77f af79 	ble.w	8005db8 <_printf_float+0x23c>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	465a      	mov	r2, fp
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f aeae 	beq.w	8005c32 <_printf_float+0xb6>
 8005ed6:	f108 0801 	add.w	r8, r8, #1
 8005eda:	e7ec      	b.n	8005eb6 <_printf_float+0x33a>
 8005edc:	4642      	mov	r2, r8
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1c2      	bne.n	8005e6e <_printf_float+0x2f2>
 8005ee8:	e6a3      	b.n	8005c32 <_printf_float+0xb6>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	9206      	str	r2, [sp, #24]
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	f43f ae9c 	beq.w	8005c32 <_printf_float+0xb6>
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	f10b 0b01 	add.w	fp, fp, #1
 8005f00:	e7bb      	b.n	8005e7a <_printf_float+0x2fe>
 8005f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1c0      	bne.n	8005e92 <_printf_float+0x316>
 8005f10:	e68f      	b.n	8005c32 <_printf_float+0xb6>
 8005f12:	9a06      	ldr	r2, [sp, #24]
 8005f14:	464b      	mov	r3, r9
 8005f16:	4442      	add	r2, r8
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d1c3      	bne.n	8005eaa <_printf_float+0x32e>
 8005f22:	e686      	b.n	8005c32 <_printf_float+0xb6>
 8005f24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f28:	f1ba 0f01 	cmp.w	sl, #1
 8005f2c:	dc01      	bgt.n	8005f32 <_printf_float+0x3b6>
 8005f2e:	07db      	lsls	r3, r3, #31
 8005f30:	d536      	bpl.n	8005fa0 <_printf_float+0x424>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4642      	mov	r2, r8
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f ae78 	beq.w	8005c32 <_printf_float+0xb6>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f ae70 	beq.w	8005c32 <_printf_float+0xb6>
 8005f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f56:	2200      	movs	r2, #0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f5e:	f7fa fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f62:	b9c0      	cbnz	r0, 8005f96 <_printf_float+0x41a>
 8005f64:	4653      	mov	r3, sl
 8005f66:	f108 0201 	add.w	r2, r8, #1
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b8      	blx	r7
 8005f70:	3001      	adds	r0, #1
 8005f72:	d10c      	bne.n	8005f8e <_printf_float+0x412>
 8005f74:	e65d      	b.n	8005c32 <_printf_float+0xb6>
 8005f76:	2301      	movs	r3, #1
 8005f78:	465a      	mov	r2, fp
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f ae56 	beq.w	8005c32 <_printf_float+0xb6>
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	45d0      	cmp	r8, sl
 8005f8c:	dbf3      	blt.n	8005f76 <_printf_float+0x3fa>
 8005f8e:	464b      	mov	r3, r9
 8005f90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f94:	e6df      	b.n	8005d56 <_printf_float+0x1da>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	f104 0b1a 	add.w	fp, r4, #26
 8005f9e:	e7f4      	b.n	8005f8a <_printf_float+0x40e>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	e7e1      	b.n	8005f6a <_printf_float+0x3ee>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	464a      	mov	r2, r9
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae3e 	beq.w	8005c32 <_printf_float+0xb6>
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	dcf0      	bgt.n	8005fa6 <_printf_float+0x42a>
 8005fc4:	e6fc      	b.n	8005dc0 <_printf_float+0x244>
 8005fc6:	f04f 0800 	mov.w	r8, #0
 8005fca:	f104 0919 	add.w	r9, r4, #25
 8005fce:	e7f4      	b.n	8005fba <_printf_float+0x43e>

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	3b00      	subs	r3, #0
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800602c:	4641      	mov	r1, r8
 800602e:	4638      	mov	r0, r7
 8006030:	47c8      	blx	r9
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6922      	ldr	r2, [r4, #16]
 800603a:	f003 0306 	and.w	r3, r3, #6
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf02      	ittt	eq
 8006042:	68e5      	ldreq	r5, [r4, #12]
 8006044:	6833      	ldreq	r3, [r6, #0]
 8006046:	1aed      	subeq	r5, r5, r3
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4641      	mov	r1, r8
 800606c:	4638      	mov	r0, r7
 800606e:	47c8      	blx	r9
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	@ 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4641      	mov	r1, r8
 800609e:	4638      	mov	r0, r7
 80060a0:	47c8      	blx	r9
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b4:	2f78      	cmp	r7, #120	@ 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	@ 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d2 	beq.w	8006272 <_printf_i+0x1c6>
 80060ce:	2f58      	cmp	r7, #88	@ 0x58
 80060d0:	f000 80b9 	beq.w	8006246 <_printf_i+0x19a>
 80060d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	@ (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006259 	.word	0x08006259
 800611c:	08006183 	.word	0x08006183
 8006120:	08006213 	.word	0x08006213
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	0800627b 	.word	0x0800627b
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006183 	.word	0x08006183
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	0800621b 	.word	0x0800621b
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6032      	str	r2, [r6, #0]
 800614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e09d      	b.n	8006294 <_printf_i+0x1e8>
 8006158:	6833      	ldr	r3, [r6, #0]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	1d19      	adds	r1, r3, #4
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	0606      	lsls	r6, r0, #24
 8006162:	d501      	bpl.n	8006168 <_printf_i+0xbc>
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	e003      	b.n	8006170 <_printf_i+0xc4>
 8006168:	0645      	lsls	r5, r0, #25
 800616a:	d5fb      	bpl.n	8006164 <_printf_i+0xb8>
 800616c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006170:	2d00      	cmp	r5, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0xd0>
 8006174:	232d      	movs	r3, #45	@ 0x2d
 8006176:	426d      	negs	r5, r5
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617c:	4859      	ldr	r0, [pc, #356]	@ (80062e4 <_printf_i+0x238>)
 800617e:	230a      	movs	r3, #10
 8006180:	e011      	b.n	80061a6 <_printf_i+0xfa>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	0608      	lsls	r0, r1, #24
 8006188:	f853 5b04 	ldr.w	r5, [r3], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0xe8>
 800618e:	0649      	lsls	r1, r1, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	2f6f      	cmp	r7, #111	@ 0x6f
 8006196:	4853      	ldr	r0, [pc, #332]	@ (80062e4 <_printf_i+0x238>)
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	bf14      	ite	ne
 800619c:	230a      	movne	r3, #10
 800619e:	2308      	moveq	r3, #8
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061a6:	6866      	ldr	r6, [r4, #4]
 80061a8:	60a6      	str	r6, [r4, #8]
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90d      	cbnz	r5, 80061bc <_printf_i+0x110>
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	d04b      	beq.n	8006254 <_printf_i+0x1a8>
 80061bc:	4616      	mov	r6, r2
 80061be:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c2:	fb03 5711 	mls	r7, r3, r1, r5
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061cc:	462f      	mov	r7, r5
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460d      	mov	r5, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x112>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x144>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07df      	lsls	r7, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x144>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	@ 0x30
 80061e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061f0:	1b92      	subs	r2, r2, r6
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee6 	bl	8005fd0 <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14a      	bne.n	800629e <_printf_i+0x1f2>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	4833      	ldr	r0, [pc, #204]	@ (80062e8 <_printf_i+0x23c>)
 800621c:	2778      	movs	r7, #120	@ 0x78
 800621e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6831      	ldr	r1, [r6, #0]
 8006226:	061f      	lsls	r7, r3, #24
 8006228:	f851 5b04 	ldr.w	r5, [r1], #4
 800622c:	d402      	bmi.n	8006234 <_printf_i+0x188>
 800622e:	065f      	lsls	r7, r3, #25
 8006230:	bf48      	it	mi
 8006232:	b2ad      	uxthmi	r5, r5
 8006234:	6031      	str	r1, [r6, #0]
 8006236:	07d9      	lsls	r1, r3, #31
 8006238:	bf44      	itt	mi
 800623a:	f043 0320 	orrmi.w	r3, r3, #32
 800623e:	6023      	strmi	r3, [r4, #0]
 8006240:	b11d      	cbz	r5, 800624a <_printf_i+0x19e>
 8006242:	2310      	movs	r3, #16
 8006244:	e7ac      	b.n	80061a0 <_printf_i+0xf4>
 8006246:	4827      	ldr	r0, [pc, #156]	@ (80062e4 <_printf_i+0x238>)
 8006248:	e7e9      	b.n	800621e <_printf_i+0x172>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f023 0320 	bic.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	e7f6      	b.n	8006242 <_printf_i+0x196>
 8006254:	4616      	mov	r6, r2
 8006256:	e7bd      	b.n	80061d4 <_printf_i+0x128>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	6825      	ldr	r5, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6030      	str	r0, [r6, #0]
 8006262:	062e      	lsls	r6, r5, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1c0>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1c6>
 800626c:	0668      	lsls	r0, r5, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1bc>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4616      	mov	r6, r2
 8006278:	e7bc      	b.n	80061f4 <_printf_i+0x148>
 800627a:	6833      	ldr	r3, [r6, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	6032      	str	r2, [r6, #0]
 8006280:	681e      	ldr	r6, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4630      	mov	r0, r6
 8006288:	f7f9 ffaa 	bl	80001e0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1e6>
 800628e:	1b80      	subs	r0, r0, r6
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629c:	e7aa      	b.n	80061f4 <_printf_i+0x148>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ad      	beq.n	8006208 <_printf_i+0x15c>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x22e>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a6      	b.n	800620c <_printf_i+0x160>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09d      	beq.n	8006208 <_printf_i+0x15c>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x212>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x206>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x222>
 80062e2:	bf00      	nop
 80062e4:	08008b7d 	.word	0x08008b7d
 80062e8:	08008b8e 	.word	0x08008b8e

080062ec <std>:
 80062ec:	2300      	movs	r3, #0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	e9c0 3300 	strd	r3, r3, [r0]
 80062f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062fa:	6083      	str	r3, [r0, #8]
 80062fc:	8181      	strh	r1, [r0, #12]
 80062fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006300:	81c2      	strh	r2, [r0, #14]
 8006302:	6183      	str	r3, [r0, #24]
 8006304:	4619      	mov	r1, r3
 8006306:	2208      	movs	r2, #8
 8006308:	305c      	adds	r0, #92	@ 0x5c
 800630a:	f000 f914 	bl	8006536 <memset>
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <std+0x58>)
 8006310:	6263      	str	r3, [r4, #36]	@ 0x24
 8006312:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <std+0x5c>)
 8006314:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <std+0x60>)
 8006318:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <std+0x64>)
 800631c:	6323      	str	r3, [r4, #48]	@ 0x30
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <std+0x68>)
 8006320:	6224      	str	r4, [r4, #32]
 8006322:	429c      	cmp	r4, r3
 8006324:	d006      	beq.n	8006334 <std+0x48>
 8006326:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800632a:	4294      	cmp	r4, r2
 800632c:	d002      	beq.n	8006334 <std+0x48>
 800632e:	33d0      	adds	r3, #208	@ 0xd0
 8006330:	429c      	cmp	r4, r3
 8006332:	d105      	bne.n	8006340 <std+0x54>
 8006334:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f000 b988 	b.w	8006650 <__retarget_lock_init_recursive>
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	080064b1 	.word	0x080064b1
 8006348:	080064d3 	.word	0x080064d3
 800634c:	0800650b 	.word	0x0800650b
 8006350:	0800652f 	.word	0x0800652f
 8006354:	20000454 	.word	0x20000454

08006358 <stdio_exit_handler>:
 8006358:	4a02      	ldr	r2, [pc, #8]	@ (8006364 <stdio_exit_handler+0xc>)
 800635a:	4903      	ldr	r1, [pc, #12]	@ (8006368 <stdio_exit_handler+0x10>)
 800635c:	4803      	ldr	r0, [pc, #12]	@ (800636c <stdio_exit_handler+0x14>)
 800635e:	f000 b869 	b.w	8006434 <_fwalk_sglue>
 8006362:	bf00      	nop
 8006364:	20000084 	.word	0x20000084
 8006368:	08007e81 	.word	0x08007e81
 800636c:	20000094 	.word	0x20000094

08006370 <cleanup_stdio>:
 8006370:	6841      	ldr	r1, [r0, #4]
 8006372:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <cleanup_stdio+0x34>)
 8006374:	4299      	cmp	r1, r3
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	d001      	beq.n	8006380 <cleanup_stdio+0x10>
 800637c:	f001 fd80 	bl	8007e80 <_fflush_r>
 8006380:	68a1      	ldr	r1, [r4, #8]
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <cleanup_stdio+0x38>)
 8006384:	4299      	cmp	r1, r3
 8006386:	d002      	beq.n	800638e <cleanup_stdio+0x1e>
 8006388:	4620      	mov	r0, r4
 800638a:	f001 fd79 	bl	8007e80 <_fflush_r>
 800638e:	68e1      	ldr	r1, [r4, #12]
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <cleanup_stdio+0x3c>)
 8006392:	4299      	cmp	r1, r3
 8006394:	d004      	beq.n	80063a0 <cleanup_stdio+0x30>
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f001 bd70 	b.w	8007e80 <_fflush_r>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	20000454 	.word	0x20000454
 80063a8:	200004bc 	.word	0x200004bc
 80063ac:	20000524 	.word	0x20000524

080063b0 <global_stdio_init.part.0>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4b0b      	ldr	r3, [pc, #44]	@ (80063e0 <global_stdio_init.part.0+0x30>)
 80063b4:	4c0b      	ldr	r4, [pc, #44]	@ (80063e4 <global_stdio_init.part.0+0x34>)
 80063b6:	4a0c      	ldr	r2, [pc, #48]	@ (80063e8 <global_stdio_init.part.0+0x38>)
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	2200      	movs	r2, #0
 80063be:	2104      	movs	r1, #4
 80063c0:	f7ff ff94 	bl	80062ec <std>
 80063c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063c8:	2201      	movs	r2, #1
 80063ca:	2109      	movs	r1, #9
 80063cc:	f7ff ff8e 	bl	80062ec <std>
 80063d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063d4:	2202      	movs	r2, #2
 80063d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063da:	2112      	movs	r1, #18
 80063dc:	f7ff bf86 	b.w	80062ec <std>
 80063e0:	2000058c 	.word	0x2000058c
 80063e4:	20000454 	.word	0x20000454
 80063e8:	08006359 	.word	0x08006359

080063ec <__sfp_lock_acquire>:
 80063ec:	4801      	ldr	r0, [pc, #4]	@ (80063f4 <__sfp_lock_acquire+0x8>)
 80063ee:	f000 b930 	b.w	8006652 <__retarget_lock_acquire_recursive>
 80063f2:	bf00      	nop
 80063f4:	20000595 	.word	0x20000595

080063f8 <__sfp_lock_release>:
 80063f8:	4801      	ldr	r0, [pc, #4]	@ (8006400 <__sfp_lock_release+0x8>)
 80063fa:	f000 b92b 	b.w	8006654 <__retarget_lock_release_recursive>
 80063fe:	bf00      	nop
 8006400:	20000595 	.word	0x20000595

08006404 <__sinit>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	f7ff fff0 	bl	80063ec <__sfp_lock_acquire>
 800640c:	6a23      	ldr	r3, [r4, #32]
 800640e:	b11b      	cbz	r3, 8006418 <__sinit+0x14>
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f7ff bff0 	b.w	80063f8 <__sfp_lock_release>
 8006418:	4b04      	ldr	r3, [pc, #16]	@ (800642c <__sinit+0x28>)
 800641a:	6223      	str	r3, [r4, #32]
 800641c:	4b04      	ldr	r3, [pc, #16]	@ (8006430 <__sinit+0x2c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f5      	bne.n	8006410 <__sinit+0xc>
 8006424:	f7ff ffc4 	bl	80063b0 <global_stdio_init.part.0>
 8006428:	e7f2      	b.n	8006410 <__sinit+0xc>
 800642a:	bf00      	nop
 800642c:	08006371 	.word	0x08006371
 8006430:	2000058c 	.word	0x2000058c

08006434 <_fwalk_sglue>:
 8006434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006438:	4607      	mov	r7, r0
 800643a:	4688      	mov	r8, r1
 800643c:	4614      	mov	r4, r2
 800643e:	2600      	movs	r6, #0
 8006440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006444:	f1b9 0901 	subs.w	r9, r9, #1
 8006448:	d505      	bpl.n	8006456 <_fwalk_sglue+0x22>
 800644a:	6824      	ldr	r4, [r4, #0]
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f7      	bne.n	8006440 <_fwalk_sglue+0xc>
 8006450:	4630      	mov	r0, r6
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d907      	bls.n	800646c <_fwalk_sglue+0x38>
 800645c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006460:	3301      	adds	r3, #1
 8006462:	d003      	beq.n	800646c <_fwalk_sglue+0x38>
 8006464:	4629      	mov	r1, r5
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	4306      	orrs	r6, r0
 800646c:	3568      	adds	r5, #104	@ 0x68
 800646e:	e7e9      	b.n	8006444 <_fwalk_sglue+0x10>

08006470 <siprintf>:
 8006470:	b40e      	push	{r1, r2, r3}
 8006472:	b500      	push	{lr}
 8006474:	b09c      	sub	sp, #112	@ 0x70
 8006476:	ab1d      	add	r3, sp, #116	@ 0x74
 8006478:	9002      	str	r0, [sp, #8]
 800647a:	9006      	str	r0, [sp, #24]
 800647c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006480:	4809      	ldr	r0, [pc, #36]	@ (80064a8 <siprintf+0x38>)
 8006482:	9107      	str	r1, [sp, #28]
 8006484:	9104      	str	r1, [sp, #16]
 8006486:	4909      	ldr	r1, [pc, #36]	@ (80064ac <siprintf+0x3c>)
 8006488:	f853 2b04 	ldr.w	r2, [r3], #4
 800648c:	9105      	str	r1, [sp, #20]
 800648e:	6800      	ldr	r0, [r0, #0]
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	a902      	add	r1, sp, #8
 8006494:	f001 fb74 	bl	8007b80 <_svfiprintf_r>
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	b01c      	add	sp, #112	@ 0x70
 80064a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a4:	b003      	add	sp, #12
 80064a6:	4770      	bx	lr
 80064a8:	20000090 	.word	0x20000090
 80064ac:	ffff0208 	.word	0xffff0208

080064b0 <__sread>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f86c 	bl	8006594 <_read_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	bfab      	itete	ge
 80064c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064c2:	89a3      	ldrhlt	r3, [r4, #12]
 80064c4:	181b      	addge	r3, r3, r0
 80064c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ca:	bfac      	ite	ge
 80064cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064ce:	81a3      	strhlt	r3, [r4, #12]
 80064d0:	bd10      	pop	{r4, pc}

080064d2 <__swrite>:
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	461f      	mov	r7, r3
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	05db      	lsls	r3, r3, #23
 80064dc:	4605      	mov	r5, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	4616      	mov	r6, r2
 80064e2:	d505      	bpl.n	80064f0 <__swrite+0x1e>
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	2302      	movs	r3, #2
 80064ea:	2200      	movs	r2, #0
 80064ec:	f000 f840 	bl	8006570 <_lseek_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	4632      	mov	r2, r6
 80064fe:	463b      	mov	r3, r7
 8006500:	4628      	mov	r0, r5
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f000 b867 	b.w	80065d8 <_write_r>

0800650a <__sseek>:
 800650a:	b510      	push	{r4, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006512:	f000 f82d 	bl	8006570 <_lseek_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	bf15      	itete	ne
 800651c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800651e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006522:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006526:	81a3      	strheq	r3, [r4, #12]
 8006528:	bf18      	it	ne
 800652a:	81a3      	strhne	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__sclose>:
 800652e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006532:	f000 b80d 	b.w	8006550 <_close_r>

08006536 <memset>:
 8006536:	4402      	add	r2, r0
 8006538:	4603      	mov	r3, r0
 800653a:	4293      	cmp	r3, r2
 800653c:	d100      	bne.n	8006540 <memset+0xa>
 800653e:	4770      	bx	lr
 8006540:	f803 1b01 	strb.w	r1, [r3], #1
 8006544:	e7f9      	b.n	800653a <memset+0x4>
	...

08006548 <_localeconv_r>:
 8006548:	4800      	ldr	r0, [pc, #0]	@ (800654c <_localeconv_r+0x4>)
 800654a:	4770      	bx	lr
 800654c:	200001d0 	.word	0x200001d0

08006550 <_close_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d06      	ldr	r5, [pc, #24]	@ (800656c <_close_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fb feba 	bl	80022d4 <_close>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_close_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_close_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	20000590 	.word	0x20000590

08006570 <_lseek_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	@ (8006590 <_lseek_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fb fecf 	bl	8002322 <_lseek>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_lseek_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_lseek_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	20000590 	.word	0x20000590

08006594 <_read_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4d07      	ldr	r5, [pc, #28]	@ (80065b4 <_read_r+0x20>)
 8006598:	4604      	mov	r4, r0
 800659a:	4608      	mov	r0, r1
 800659c:	4611      	mov	r1, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	602a      	str	r2, [r5, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f7fb fe5d 	bl	8002262 <_read>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_read_r+0x1e>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_read_r+0x1e>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20000590 	.word	0x20000590

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	@ (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fb feba 	bl	800233c <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	20000590 	.word	0x20000590

080065d8 <_write_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d07      	ldr	r5, [pc, #28]	@ (80065f8 <_write_r+0x20>)
 80065dc:	4604      	mov	r4, r0
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7fb fe58 	bl	800229c <_write>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_write_r+0x1e>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_write_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20000590 	.word	0x20000590

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	@ (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000090 	.word	0x20000090

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	@ (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	@ (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	@ (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	@ (800664c <__libc_init_array+0x44>)
 800661c:	f001 ffa0 	bl	8008560 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08008ecc 	.word	0x08008ecc
 8006644:	08008ecc 	.word	0x08008ecc
 8006648:	08008ecc 	.word	0x08008ecc
 800664c:	08008ed0 	.word	0x08008ed0

08006650 <__retarget_lock_init_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_acquire_recursive>:
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_release_recursive>:
 8006654:	4770      	bx	lr
	...

08006658 <__assert_func>:
 8006658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800665a:	4614      	mov	r4, r2
 800665c:	461a      	mov	r2, r3
 800665e:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <__assert_func+0x2c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4605      	mov	r5, r0
 8006664:	68d8      	ldr	r0, [r3, #12]
 8006666:	b954      	cbnz	r4, 800667e <__assert_func+0x26>
 8006668:	4b07      	ldr	r3, [pc, #28]	@ (8006688 <__assert_func+0x30>)
 800666a:	461c      	mov	r4, r3
 800666c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006670:	9100      	str	r1, [sp, #0]
 8006672:	462b      	mov	r3, r5
 8006674:	4905      	ldr	r1, [pc, #20]	@ (800668c <__assert_func+0x34>)
 8006676:	f001 fc2b 	bl	8007ed0 <fiprintf>
 800667a:	f001 fc63 	bl	8007f44 <abort>
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__assert_func+0x38>)
 8006680:	e7f4      	b.n	800666c <__assert_func+0x14>
 8006682:	bf00      	nop
 8006684:	20000090 	.word	0x20000090
 8006688:	08008bda 	.word	0x08008bda
 800668c:	08008bac 	.word	0x08008bac
 8006690:	08008b9f 	.word	0x08008b9f

08006694 <quorem>:
 8006694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	6903      	ldr	r3, [r0, #16]
 800669a:	690c      	ldr	r4, [r1, #16]
 800669c:	42a3      	cmp	r3, r4
 800669e:	4607      	mov	r7, r0
 80066a0:	db7e      	blt.n	80067a0 <quorem+0x10c>
 80066a2:	3c01      	subs	r4, #1
 80066a4:	f101 0814 	add.w	r8, r1, #20
 80066a8:	00a3      	lsls	r3, r4, #2
 80066aa:	f100 0514 	add.w	r5, r0, #20
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066be:	3301      	adds	r3, #1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ca:	d32e      	bcc.n	800672a <quorem+0x96>
 80066cc:	f04f 0a00 	mov.w	sl, #0
 80066d0:	46c4      	mov	ip, r8
 80066d2:	46ae      	mov	lr, r5
 80066d4:	46d3      	mov	fp, sl
 80066d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066da:	b298      	uxth	r0, r3
 80066dc:	fb06 a000 	mla	r0, r6, r0, sl
 80066e0:	0c02      	lsrs	r2, r0, #16
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	fb06 2303 	mla	r3, r6, r3, r2
 80066e8:	f8de 2000 	ldr.w	r2, [lr]
 80066ec:	b280      	uxth	r0, r0
 80066ee:	b292      	uxth	r2, r2
 80066f0:	1a12      	subs	r2, r2, r0
 80066f2:	445a      	add	r2, fp
 80066f4:	f8de 0000 	ldr.w	r0, [lr]
 80066f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006702:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006706:	b292      	uxth	r2, r2
 8006708:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800670c:	45e1      	cmp	r9, ip
 800670e:	f84e 2b04 	str.w	r2, [lr], #4
 8006712:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006716:	d2de      	bcs.n	80066d6 <quorem+0x42>
 8006718:	9b00      	ldr	r3, [sp, #0]
 800671a:	58eb      	ldr	r3, [r5, r3]
 800671c:	b92b      	cbnz	r3, 800672a <quorem+0x96>
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	3b04      	subs	r3, #4
 8006722:	429d      	cmp	r5, r3
 8006724:	461a      	mov	r2, r3
 8006726:	d32f      	bcc.n	8006788 <quorem+0xf4>
 8006728:	613c      	str	r4, [r7, #16]
 800672a:	4638      	mov	r0, r7
 800672c:	f001 f8c4 	bl	80078b8 <__mcmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	db25      	blt.n	8006780 <quorem+0xec>
 8006734:	4629      	mov	r1, r5
 8006736:	2000      	movs	r0, #0
 8006738:	f858 2b04 	ldr.w	r2, [r8], #4
 800673c:	f8d1 c000 	ldr.w	ip, [r1]
 8006740:	fa1f fe82 	uxth.w	lr, r2
 8006744:	fa1f f38c 	uxth.w	r3, ip
 8006748:	eba3 030e 	sub.w	r3, r3, lr
 800674c:	4403      	add	r3, r0
 800674e:	0c12      	lsrs	r2, r2, #16
 8006750:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006754:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006758:	b29b      	uxth	r3, r3
 800675a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800675e:	45c1      	cmp	r9, r8
 8006760:	f841 3b04 	str.w	r3, [r1], #4
 8006764:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006768:	d2e6      	bcs.n	8006738 <quorem+0xa4>
 800676a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800676e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006772:	b922      	cbnz	r2, 800677e <quorem+0xea>
 8006774:	3b04      	subs	r3, #4
 8006776:	429d      	cmp	r5, r3
 8006778:	461a      	mov	r2, r3
 800677a:	d30b      	bcc.n	8006794 <quorem+0x100>
 800677c:	613c      	str	r4, [r7, #16]
 800677e:	3601      	adds	r6, #1
 8006780:	4630      	mov	r0, r6
 8006782:	b003      	add	sp, #12
 8006784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	3b04      	subs	r3, #4
 800678c:	2a00      	cmp	r2, #0
 800678e:	d1cb      	bne.n	8006728 <quorem+0x94>
 8006790:	3c01      	subs	r4, #1
 8006792:	e7c6      	b.n	8006722 <quorem+0x8e>
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	3b04      	subs	r3, #4
 8006798:	2a00      	cmp	r2, #0
 800679a:	d1ef      	bne.n	800677c <quorem+0xe8>
 800679c:	3c01      	subs	r4, #1
 800679e:	e7ea      	b.n	8006776 <quorem+0xe2>
 80067a0:	2000      	movs	r0, #0
 80067a2:	e7ee      	b.n	8006782 <quorem+0xee>
 80067a4:	0000      	movs	r0, r0
	...

080067a8 <_dtoa_r>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	69c7      	ldr	r7, [r0, #28]
 80067ae:	b099      	sub	sp, #100	@ 0x64
 80067b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067b4:	ec55 4b10 	vmov	r4, r5, d0
 80067b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80067ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80067bc:	4683      	mov	fp, r0
 80067be:	920e      	str	r2, [sp, #56]	@ 0x38
 80067c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067c2:	b97f      	cbnz	r7, 80067e4 <_dtoa_r+0x3c>
 80067c4:	2010      	movs	r0, #16
 80067c6:	f7ff f845 	bl	8005854 <malloc>
 80067ca:	4602      	mov	r2, r0
 80067cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80067d0:	b920      	cbnz	r0, 80067dc <_dtoa_r+0x34>
 80067d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006a70 <_dtoa_r+0x2c8>)
 80067d4:	21ef      	movs	r1, #239	@ 0xef
 80067d6:	48a7      	ldr	r0, [pc, #668]	@ (8006a74 <_dtoa_r+0x2cc>)
 80067d8:	f7ff ff3e 	bl	8006658 <__assert_func>
 80067dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067e0:	6007      	str	r7, [r0, #0]
 80067e2:	60c7      	str	r7, [r0, #12]
 80067e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	b159      	cbz	r1, 8006804 <_dtoa_r+0x5c>
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	604a      	str	r2, [r1, #4]
 80067f0:	2301      	movs	r3, #1
 80067f2:	4093      	lsls	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
 80067f6:	4658      	mov	r0, fp
 80067f8:	f000 fe24 	bl	8007444 <_Bfree>
 80067fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	1e2b      	subs	r3, r5, #0
 8006806:	bfb9      	ittee	lt
 8006808:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800680c:	9303      	strlt	r3, [sp, #12]
 800680e:	2300      	movge	r3, #0
 8006810:	6033      	strge	r3, [r6, #0]
 8006812:	9f03      	ldr	r7, [sp, #12]
 8006814:	4b98      	ldr	r3, [pc, #608]	@ (8006a78 <_dtoa_r+0x2d0>)
 8006816:	bfbc      	itt	lt
 8006818:	2201      	movlt	r2, #1
 800681a:	6032      	strlt	r2, [r6, #0]
 800681c:	43bb      	bics	r3, r7
 800681e:	d112      	bne.n	8006846 <_dtoa_r+0x9e>
 8006820:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006822:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800682c:	4323      	orrs	r3, r4
 800682e:	f000 854d 	beq.w	80072cc <_dtoa_r+0xb24>
 8006832:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006834:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a8c <_dtoa_r+0x2e4>
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 854f 	beq.w	80072dc <_dtoa_r+0xb34>
 800683e:	f10a 0303 	add.w	r3, sl, #3
 8006842:	f000 bd49 	b.w	80072d8 <_dtoa_r+0xb30>
 8006846:	ed9d 7b02 	vldr	d7, [sp, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	ec51 0b17 	vmov	r0, r1, d7
 8006850:	2300      	movs	r3, #0
 8006852:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006856:	f7fa f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800685a:	4680      	mov	r8, r0
 800685c:	b158      	cbz	r0, 8006876 <_dtoa_r+0xce>
 800685e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006860:	2301      	movs	r3, #1
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006866:	b113      	cbz	r3, 800686e <_dtoa_r+0xc6>
 8006868:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800686a:	4b84      	ldr	r3, [pc, #528]	@ (8006a7c <_dtoa_r+0x2d4>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a90 <_dtoa_r+0x2e8>
 8006872:	f000 bd33 	b.w	80072dc <_dtoa_r+0xb34>
 8006876:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800687a:	aa16      	add	r2, sp, #88	@ 0x58
 800687c:	a917      	add	r1, sp, #92	@ 0x5c
 800687e:	4658      	mov	r0, fp
 8006880:	f001 f8ca 	bl	8007a18 <__d2b>
 8006884:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006888:	4681      	mov	r9, r0
 800688a:	2e00      	cmp	r6, #0
 800688c:	d077      	beq.n	800697e <_dtoa_r+0x1d6>
 800688e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006890:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800689c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068a8:	4619      	mov	r1, r3
 80068aa:	2200      	movs	r2, #0
 80068ac:	4b74      	ldr	r3, [pc, #464]	@ (8006a80 <_dtoa_r+0x2d8>)
 80068ae:	f7f9 fcf3 	bl	8000298 <__aeabi_dsub>
 80068b2:	a369      	add	r3, pc, #420	@ (adr r3, 8006a58 <_dtoa_r+0x2b0>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f7f9 fea6 	bl	8000608 <__aeabi_dmul>
 80068bc:	a368      	add	r3, pc, #416	@ (adr r3, 8006a60 <_dtoa_r+0x2b8>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fceb 	bl	800029c <__adddf3>
 80068c6:	4604      	mov	r4, r0
 80068c8:	4630      	mov	r0, r6
 80068ca:	460d      	mov	r5, r1
 80068cc:	f7f9 fe32 	bl	8000534 <__aeabi_i2d>
 80068d0:	a365      	add	r3, pc, #404	@ (adr r3, 8006a68 <_dtoa_r+0x2c0>)
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f7f9 fe97 	bl	8000608 <__aeabi_dmul>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7f9 fcdb 	bl	800029c <__adddf3>
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	f7fa f93d 	bl	8000b68 <__aeabi_d2iz>
 80068ee:	2200      	movs	r2, #0
 80068f0:	4607      	mov	r7, r0
 80068f2:	2300      	movs	r3, #0
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7fa f8f8 	bl	8000aec <__aeabi_dcmplt>
 80068fc:	b140      	cbz	r0, 8006910 <_dtoa_r+0x168>
 80068fe:	4638      	mov	r0, r7
 8006900:	f7f9 fe18 	bl	8000534 <__aeabi_i2d>
 8006904:	4622      	mov	r2, r4
 8006906:	462b      	mov	r3, r5
 8006908:	f7fa f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800690c:	b900      	cbnz	r0, 8006910 <_dtoa_r+0x168>
 800690e:	3f01      	subs	r7, #1
 8006910:	2f16      	cmp	r7, #22
 8006912:	d851      	bhi.n	80069b8 <_dtoa_r+0x210>
 8006914:	4b5b      	ldr	r3, [pc, #364]	@ (8006a84 <_dtoa_r+0x2dc>)
 8006916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006922:	f7fa f8e3 	bl	8000aec <__aeabi_dcmplt>
 8006926:	2800      	cmp	r0, #0
 8006928:	d048      	beq.n	80069bc <_dtoa_r+0x214>
 800692a:	3f01      	subs	r7, #1
 800692c:	2300      	movs	r3, #0
 800692e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006930:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006932:	1b9b      	subs	r3, r3, r6
 8006934:	1e5a      	subs	r2, r3, #1
 8006936:	bf44      	itt	mi
 8006938:	f1c3 0801 	rsbmi	r8, r3, #1
 800693c:	2300      	movmi	r3, #0
 800693e:	9208      	str	r2, [sp, #32]
 8006940:	bf54      	ite	pl
 8006942:	f04f 0800 	movpl.w	r8, #0
 8006946:	9308      	strmi	r3, [sp, #32]
 8006948:	2f00      	cmp	r7, #0
 800694a:	db39      	blt.n	80069c0 <_dtoa_r+0x218>
 800694c:	9b08      	ldr	r3, [sp, #32]
 800694e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006950:	443b      	add	r3, r7
 8006952:	9308      	str	r3, [sp, #32]
 8006954:	2300      	movs	r3, #0
 8006956:	930a      	str	r3, [sp, #40]	@ 0x28
 8006958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695a:	2b09      	cmp	r3, #9
 800695c:	d864      	bhi.n	8006a28 <_dtoa_r+0x280>
 800695e:	2b05      	cmp	r3, #5
 8006960:	bfc4      	itt	gt
 8006962:	3b04      	subgt	r3, #4
 8006964:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006968:	f1a3 0302 	sub.w	r3, r3, #2
 800696c:	bfcc      	ite	gt
 800696e:	2400      	movgt	r4, #0
 8006970:	2401      	movle	r4, #1
 8006972:	2b03      	cmp	r3, #3
 8006974:	d863      	bhi.n	8006a3e <_dtoa_r+0x296>
 8006976:	e8df f003 	tbb	[pc, r3]
 800697a:	372a      	.short	0x372a
 800697c:	5535      	.short	0x5535
 800697e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006982:	441e      	add	r6, r3
 8006984:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006988:	2b20      	cmp	r3, #32
 800698a:	bfc1      	itttt	gt
 800698c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006990:	409f      	lslgt	r7, r3
 8006992:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006996:	fa24 f303 	lsrgt.w	r3, r4, r3
 800699a:	bfd6      	itet	le
 800699c:	f1c3 0320 	rsble	r3, r3, #32
 80069a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80069a4:	fa04 f003 	lslle.w	r0, r4, r3
 80069a8:	f7f9 fdb4 	bl	8000514 <__aeabi_ui2d>
 80069ac:	2201      	movs	r2, #1
 80069ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069b2:	3e01      	subs	r6, #1
 80069b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80069b6:	e777      	b.n	80068a8 <_dtoa_r+0x100>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7b8      	b.n	800692e <_dtoa_r+0x186>
 80069bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80069be:	e7b7      	b.n	8006930 <_dtoa_r+0x188>
 80069c0:	427b      	negs	r3, r7
 80069c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c4:	2300      	movs	r3, #0
 80069c6:	eba8 0807 	sub.w	r8, r8, r7
 80069ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069cc:	e7c4      	b.n	8006958 <_dtoa_r+0x1b0>
 80069ce:	2300      	movs	r3, #0
 80069d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dc35      	bgt.n	8006a44 <_dtoa_r+0x29c>
 80069d8:	2301      	movs	r3, #1
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	9307      	str	r3, [sp, #28]
 80069de:	461a      	mov	r2, r3
 80069e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069e2:	e00b      	b.n	80069fc <_dtoa_r+0x254>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7f3      	b.n	80069d0 <_dtoa_r+0x228>
 80069e8:	2300      	movs	r3, #0
 80069ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	bfb8      	it	lt
 80069fa:	2301      	movlt	r3, #1
 80069fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a00:	2100      	movs	r1, #0
 8006a02:	2204      	movs	r2, #4
 8006a04:	f102 0514 	add.w	r5, r2, #20
 8006a08:	429d      	cmp	r5, r3
 8006a0a:	d91f      	bls.n	8006a4c <_dtoa_r+0x2a4>
 8006a0c:	6041      	str	r1, [r0, #4]
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f000 fcd8 	bl	80073c4 <_Balloc>
 8006a14:	4682      	mov	sl, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d13c      	bne.n	8006a94 <_dtoa_r+0x2ec>
 8006a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006a88 <_dtoa_r+0x2e0>)
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a22:	e6d8      	b.n	80067d6 <_dtoa_r+0x2e>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e7e0      	b.n	80069ea <_dtoa_r+0x242>
 8006a28:	2401      	movs	r4, #1
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a30:	f04f 33ff 	mov.w	r3, #4294967295
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2312      	movs	r3, #18
 8006a3c:	e7d0      	b.n	80069e0 <_dtoa_r+0x238>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a42:	e7f5      	b.n	8006a30 <_dtoa_r+0x288>
 8006a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	9307      	str	r3, [sp, #28]
 8006a4a:	e7d7      	b.n	80069fc <_dtoa_r+0x254>
 8006a4c:	3101      	adds	r1, #1
 8006a4e:	0052      	lsls	r2, r2, #1
 8006a50:	e7d8      	b.n	8006a04 <_dtoa_r+0x25c>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	636f4361 	.word	0x636f4361
 8006a5c:	3fd287a7 	.word	0x3fd287a7
 8006a60:	8b60c8b3 	.word	0x8b60c8b3
 8006a64:	3fc68a28 	.word	0x3fc68a28
 8006a68:	509f79fb 	.word	0x509f79fb
 8006a6c:	3fd34413 	.word	0x3fd34413
 8006a70:	08008afc 	.word	0x08008afc
 8006a74:	08008be8 	.word	0x08008be8
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	08008b7c 	.word	0x08008b7c
 8006a80:	3ff80000 	.word	0x3ff80000
 8006a84:	08008ce0 	.word	0x08008ce0
 8006a88:	08008c40 	.word	0x08008c40
 8006a8c:	08008be4 	.word	0x08008be4
 8006a90:	08008b7b 	.word	0x08008b7b
 8006a94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a98:	6018      	str	r0, [r3, #0]
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	2b0e      	cmp	r3, #14
 8006a9e:	f200 80a4 	bhi.w	8006bea <_dtoa_r+0x442>
 8006aa2:	2c00      	cmp	r4, #0
 8006aa4:	f000 80a1 	beq.w	8006bea <_dtoa_r+0x442>
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	dd33      	ble.n	8006b14 <_dtoa_r+0x36c>
 8006aac:	4bad      	ldr	r3, [pc, #692]	@ (8006d64 <_dtoa_r+0x5bc>)
 8006aae:	f007 020f 	and.w	r2, r7, #15
 8006ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab6:	ed93 7b00 	vldr	d7, [r3]
 8006aba:	05f8      	lsls	r0, r7, #23
 8006abc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ac0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ac4:	d516      	bpl.n	8006af4 <_dtoa_r+0x34c>
 8006ac6:	4ba8      	ldr	r3, [pc, #672]	@ (8006d68 <_dtoa_r+0x5c0>)
 8006ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006acc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad0:	f7f9 fec4 	bl	800085c <__aeabi_ddiv>
 8006ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad8:	f004 040f 	and.w	r4, r4, #15
 8006adc:	2603      	movs	r6, #3
 8006ade:	4da2      	ldr	r5, [pc, #648]	@ (8006d68 <_dtoa_r+0x5c0>)
 8006ae0:	b954      	cbnz	r4, 8006af8 <_dtoa_r+0x350>
 8006ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aea:	f7f9 feb7 	bl	800085c <__aeabi_ddiv>
 8006aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af2:	e028      	b.n	8006b46 <_dtoa_r+0x39e>
 8006af4:	2602      	movs	r6, #2
 8006af6:	e7f2      	b.n	8006ade <_dtoa_r+0x336>
 8006af8:	07e1      	lsls	r1, r4, #31
 8006afa:	d508      	bpl.n	8006b0e <_dtoa_r+0x366>
 8006afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	1064      	asrs	r4, r4, #1
 8006b10:	3508      	adds	r5, #8
 8006b12:	e7e5      	b.n	8006ae0 <_dtoa_r+0x338>
 8006b14:	f000 80d2 	beq.w	8006cbc <_dtoa_r+0x514>
 8006b18:	427c      	negs	r4, r7
 8006b1a:	4b92      	ldr	r3, [pc, #584]	@ (8006d64 <_dtoa_r+0x5bc>)
 8006b1c:	4d92      	ldr	r5, [pc, #584]	@ (8006d68 <_dtoa_r+0x5c0>)
 8006b1e:	f004 020f 	and.w	r2, r4, #15
 8006b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b2e:	f7f9 fd6b 	bl	8000608 <__aeabi_dmul>
 8006b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b36:	1124      	asrs	r4, r4, #4
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2602      	movs	r6, #2
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	f040 80b2 	bne.w	8006ca6 <_dtoa_r+0x4fe>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1d3      	bne.n	8006aee <_dtoa_r+0x346>
 8006b46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80b7 	beq.w	8006cc0 <_dtoa_r+0x518>
 8006b52:	4b86      	ldr	r3, [pc, #536]	@ (8006d6c <_dtoa_r+0x5c4>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4620      	mov	r0, r4
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7f9 ffc7 	bl	8000aec <__aeabi_dcmplt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f000 80ae 	beq.w	8006cc0 <_dtoa_r+0x518>
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80aa 	beq.w	8006cc0 <_dtoa_r+0x518>
 8006b6c:	9b00      	ldr	r3, [sp, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dd37      	ble.n	8006be2 <_dtoa_r+0x43a>
 8006b72:	1e7b      	subs	r3, r7, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	4620      	mov	r0, r4
 8006b78:	4b7d      	ldr	r3, [pc, #500]	@ (8006d70 <_dtoa_r+0x5c8>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_dmul>
 8006b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b86:	9c00      	ldr	r4, [sp, #0]
 8006b88:	3601      	adds	r6, #1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7f9 fcd2 	bl	8000534 <__aeabi_i2d>
 8006b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b94:	f7f9 fd38 	bl	8000608 <__aeabi_dmul>
 8006b98:	4b76      	ldr	r3, [pc, #472]	@ (8006d74 <_dtoa_r+0x5cc>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fb7e 	bl	800029c <__adddf3>
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	f040 808d 	bne.w	8006cc6 <_dtoa_r+0x51e>
 8006bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb0:	4b71      	ldr	r3, [pc, #452]	@ (8006d78 <_dtoa_r+0x5d0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f7f9 fb70 	bl	8000298 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4633      	mov	r3, r6
 8006bc4:	f7f9 ffb0 	bl	8000b28 <__aeabi_dcmpgt>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f040 828b 	bne.w	80070e4 <_dtoa_r+0x93c>
 8006bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bd8:	f7f9 ff88 	bl	8000aec <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f040 8128 	bne.w	8006e32 <_dtoa_r+0x68a>
 8006be2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006be6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006bea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f2c0 815a 	blt.w	8006ea6 <_dtoa_r+0x6fe>
 8006bf2:	2f0e      	cmp	r7, #14
 8006bf4:	f300 8157 	bgt.w	8006ea6 <_dtoa_r+0x6fe>
 8006bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d64 <_dtoa_r+0x5bc>)
 8006bfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bfe:	ed93 7b00 	vldr	d7, [r3]
 8006c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	ed8d 7b00 	vstr	d7, [sp]
 8006c0a:	da03      	bge.n	8006c14 <_dtoa_r+0x46c>
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f340 8101 	ble.w	8006e16 <_dtoa_r+0x66e>
 8006c14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c18:	4656      	mov	r6, sl
 8006c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fe1b 	bl	800085c <__aeabi_ddiv>
 8006c26:	f7f9 ff9f 	bl	8000b68 <__aeabi_d2iz>
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	f7f9 fc82 	bl	8000534 <__aeabi_i2d>
 8006c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c34:	f7f9 fce8 	bl	8000608 <__aeabi_dmul>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c44:	f7f9 fb28 	bl	8000298 <__aeabi_dsub>
 8006c48:	f806 4b01 	strb.w	r4, [r6], #1
 8006c4c:	9d07      	ldr	r5, [sp, #28]
 8006c4e:	eba6 040a 	sub.w	r4, r6, sl
 8006c52:	42a5      	cmp	r5, r4
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	f040 8117 	bne.w	8006e8a <_dtoa_r+0x6e2>
 8006c5c:	f7f9 fb1e 	bl	800029c <__adddf3>
 8006c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	f7f9 ff5e 	bl	8000b28 <__aeabi_dcmpgt>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f040 80f9 	bne.w	8006e64 <_dtoa_r+0x6bc>
 8006c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c76:	4620      	mov	r0, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7f9 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c7e:	b118      	cbz	r0, 8006c88 <_dtoa_r+0x4e0>
 8006c80:	f018 0f01 	tst.w	r8, #1
 8006c84:	f040 80ee 	bne.w	8006e64 <_dtoa_r+0x6bc>
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f000 fbda 	bl	8007444 <_Bfree>
 8006c90:	2300      	movs	r3, #0
 8006c92:	7033      	strb	r3, [r6, #0]
 8006c94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c96:	3701      	adds	r7, #1
 8006c98:	601f      	str	r7, [r3, #0]
 8006c9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 831d 	beq.w	80072dc <_dtoa_r+0xb34>
 8006ca2:	601e      	str	r6, [r3, #0]
 8006ca4:	e31a      	b.n	80072dc <_dtoa_r+0xb34>
 8006ca6:	07e2      	lsls	r2, r4, #31
 8006ca8:	d505      	bpl.n	8006cb6 <_dtoa_r+0x50e>
 8006caa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cae:	f7f9 fcab 	bl	8000608 <__aeabi_dmul>
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	1064      	asrs	r4, r4, #1
 8006cb8:	3508      	adds	r5, #8
 8006cba:	e73f      	b.n	8006b3c <_dtoa_r+0x394>
 8006cbc:	2602      	movs	r6, #2
 8006cbe:	e742      	b.n	8006b46 <_dtoa_r+0x39e>
 8006cc0:	9c07      	ldr	r4, [sp, #28]
 8006cc2:	9704      	str	r7, [sp, #16]
 8006cc4:	e761      	b.n	8006b8a <_dtoa_r+0x3e2>
 8006cc6:	4b27      	ldr	r3, [pc, #156]	@ (8006d64 <_dtoa_r+0x5bc>)
 8006cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cd2:	4454      	add	r4, sl
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d053      	beq.n	8006d80 <_dtoa_r+0x5d8>
 8006cd8:	4928      	ldr	r1, [pc, #160]	@ (8006d7c <_dtoa_r+0x5d4>)
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f7f9 fdbe 	bl	800085c <__aeabi_ddiv>
 8006ce0:	4633      	mov	r3, r6
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	f7f9 fad8 	bl	8000298 <__aeabi_dsub>
 8006ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cec:	4656      	mov	r6, sl
 8006cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf2:	f7f9 ff39 	bl	8000b68 <__aeabi_d2iz>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	f7f9 fc1c 	bl	8000534 <__aeabi_i2d>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d04:	f7f9 fac8 	bl	8000298 <__aeabi_dsub>
 8006d08:	3530      	adds	r5, #48	@ 0x30
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d12:	f806 5b01 	strb.w	r5, [r6], #1
 8006d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d1a:	f7f9 fee7 	bl	8000aec <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d171      	bne.n	8006e06 <_dtoa_r+0x65e>
 8006d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d26:	4911      	ldr	r1, [pc, #68]	@ (8006d6c <_dtoa_r+0x5c4>)
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f7f9 fab5 	bl	8000298 <__aeabi_dsub>
 8006d2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d32:	f7f9 fedb 	bl	8000aec <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f040 8095 	bne.w	8006e66 <_dtoa_r+0x6be>
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	f43f af50 	beq.w	8006be2 <_dtoa_r+0x43a>
 8006d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <_dtoa_r+0x5c8>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7f9 fc5d 	bl	8000608 <__aeabi_dmul>
 8006d4e:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <_dtoa_r+0x5c8>)
 8006d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d54:	2200      	movs	r2, #0
 8006d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5a:	f7f9 fc55 	bl	8000608 <__aeabi_dmul>
 8006d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d62:	e7c4      	b.n	8006cee <_dtoa_r+0x546>
 8006d64:	08008ce0 	.word	0x08008ce0
 8006d68:	08008cb8 	.word	0x08008cb8
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	40240000 	.word	0x40240000
 8006d74:	401c0000 	.word	0x401c0000
 8006d78:	40140000 	.word	0x40140000
 8006d7c:	3fe00000 	.word	0x3fe00000
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	f7f9 fc40 	bl	8000608 <__aeabi_dmul>
 8006d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d8c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d8e:	4656      	mov	r6, sl
 8006d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d94:	f7f9 fee8 	bl	8000b68 <__aeabi_d2iz>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	f7f9 fbcb 	bl	8000534 <__aeabi_i2d>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da6:	f7f9 fa77 	bl	8000298 <__aeabi_dsub>
 8006daa:	3530      	adds	r5, #48	@ 0x30
 8006dac:	f806 5b01 	strb.w	r5, [r6], #1
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	d124      	bne.n	8006e0a <_dtoa_r+0x662>
 8006dc0:	4bac      	ldr	r3, [pc, #688]	@ (8007074 <_dtoa_r+0x8cc>)
 8006dc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dc6:	f7f9 fa69 	bl	800029c <__adddf3>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd2:	f7f9 fea9 	bl	8000b28 <__aeabi_dcmpgt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d145      	bne.n	8006e66 <_dtoa_r+0x6be>
 8006dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dde:	49a5      	ldr	r1, [pc, #660]	@ (8007074 <_dtoa_r+0x8cc>)
 8006de0:	2000      	movs	r0, #0
 8006de2:	f7f9 fa59 	bl	8000298 <__aeabi_dsub>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dee:	f7f9 fe7d 	bl	8000aec <__aeabi_dcmplt>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f43f aef5 	beq.w	8006be2 <_dtoa_r+0x43a>
 8006df8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006dfa:	1e73      	subs	r3, r6, #1
 8006dfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e02:	2b30      	cmp	r3, #48	@ 0x30
 8006e04:	d0f8      	beq.n	8006df8 <_dtoa_r+0x650>
 8006e06:	9f04      	ldr	r7, [sp, #16]
 8006e08:	e73e      	b.n	8006c88 <_dtoa_r+0x4e0>
 8006e0a:	4b9b      	ldr	r3, [pc, #620]	@ (8007078 <_dtoa_r+0x8d0>)
 8006e0c:	f7f9 fbfc 	bl	8000608 <__aeabi_dmul>
 8006e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e14:	e7bc      	b.n	8006d90 <_dtoa_r+0x5e8>
 8006e16:	d10c      	bne.n	8006e32 <_dtoa_r+0x68a>
 8006e18:	4b98      	ldr	r3, [pc, #608]	@ (800707c <_dtoa_r+0x8d4>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e28:	f7f9 fe74 	bl	8000b14 <__aeabi_dcmpge>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	f000 8157 	beq.w	80070e0 <_dtoa_r+0x938>
 8006e32:	2400      	movs	r4, #0
 8006e34:	4625      	mov	r5, r4
 8006e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	4656      	mov	r6, sl
 8006e3e:	2700      	movs	r7, #0
 8006e40:	4621      	mov	r1, r4
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 fafe 	bl	8007444 <_Bfree>
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	d0dc      	beq.n	8006e06 <_dtoa_r+0x65e>
 8006e4c:	b12f      	cbz	r7, 8006e5a <_dtoa_r+0x6b2>
 8006e4e:	42af      	cmp	r7, r5
 8006e50:	d003      	beq.n	8006e5a <_dtoa_r+0x6b2>
 8006e52:	4639      	mov	r1, r7
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 faf5 	bl	8007444 <_Bfree>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4658      	mov	r0, fp
 8006e5e:	f000 faf1 	bl	8007444 <_Bfree>
 8006e62:	e7d0      	b.n	8006e06 <_dtoa_r+0x65e>
 8006e64:	9704      	str	r7, [sp, #16]
 8006e66:	4633      	mov	r3, r6
 8006e68:	461e      	mov	r6, r3
 8006e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e6e:	2a39      	cmp	r2, #57	@ 0x39
 8006e70:	d107      	bne.n	8006e82 <_dtoa_r+0x6da>
 8006e72:	459a      	cmp	sl, r3
 8006e74:	d1f8      	bne.n	8006e68 <_dtoa_r+0x6c0>
 8006e76:	9a04      	ldr	r2, [sp, #16]
 8006e78:	3201      	adds	r2, #1
 8006e7a:	9204      	str	r2, [sp, #16]
 8006e7c:	2230      	movs	r2, #48	@ 0x30
 8006e7e:	f88a 2000 	strb.w	r2, [sl]
 8006e82:	781a      	ldrb	r2, [r3, #0]
 8006e84:	3201      	adds	r2, #1
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e7bd      	b.n	8006e06 <_dtoa_r+0x65e>
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007078 <_dtoa_r+0x8d0>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f7f9 fbbb 	bl	8000608 <__aeabi_dmul>
 8006e92:	2200      	movs	r2, #0
 8006e94:	2300      	movs	r3, #0
 8006e96:	4604      	mov	r4, r0
 8006e98:	460d      	mov	r5, r1
 8006e9a:	f7f9 fe1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f aebb 	beq.w	8006c1a <_dtoa_r+0x472>
 8006ea4:	e6f0      	b.n	8006c88 <_dtoa_r+0x4e0>
 8006ea6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	f000 80db 	beq.w	8007064 <_dtoa_r+0x8bc>
 8006eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	f300 80bf 	bgt.w	8007034 <_dtoa_r+0x88c>
 8006eb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	f000 80b7 	beq.w	800702c <_dtoa_r+0x884>
 8006ebe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ec2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ec4:	4646      	mov	r6, r8
 8006ec6:	9a08      	ldr	r2, [sp, #32]
 8006ec8:	2101      	movs	r1, #1
 8006eca:	441a      	add	r2, r3
 8006ecc:	4658      	mov	r0, fp
 8006ece:	4498      	add	r8, r3
 8006ed0:	9208      	str	r2, [sp, #32]
 8006ed2:	f000 fb6b 	bl	80075ac <__i2b>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	b15e      	cbz	r6, 8006ef2 <_dtoa_r+0x74a>
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd08      	ble.n	8006ef2 <_dtoa_r+0x74a>
 8006ee0:	42b3      	cmp	r3, r6
 8006ee2:	9a08      	ldr	r2, [sp, #32]
 8006ee4:	bfa8      	it	ge
 8006ee6:	4633      	movge	r3, r6
 8006ee8:	eba8 0803 	sub.w	r8, r8, r3
 8006eec:	1af6      	subs	r6, r6, r3
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	9308      	str	r3, [sp, #32]
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef4:	b1f3      	cbz	r3, 8006f34 <_dtoa_r+0x78c>
 8006ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80b7 	beq.w	800706c <_dtoa_r+0x8c4>
 8006efe:	b18c      	cbz	r4, 8006f24 <_dtoa_r+0x77c>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4622      	mov	r2, r4
 8006f04:	4658      	mov	r0, fp
 8006f06:	f000 fc11 	bl	800772c <__pow5mult>
 8006f0a:	464a      	mov	r2, r9
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	4605      	mov	r5, r0
 8006f10:	4658      	mov	r0, fp
 8006f12:	f000 fb61 	bl	80075d8 <__multiply>
 8006f16:	4649      	mov	r1, r9
 8006f18:	9004      	str	r0, [sp, #16]
 8006f1a:	4658      	mov	r0, fp
 8006f1c:	f000 fa92 	bl	8007444 <_Bfree>
 8006f20:	9b04      	ldr	r3, [sp, #16]
 8006f22:	4699      	mov	r9, r3
 8006f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f26:	1b1a      	subs	r2, r3, r4
 8006f28:	d004      	beq.n	8006f34 <_dtoa_r+0x78c>
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	4658      	mov	r0, fp
 8006f2e:	f000 fbfd 	bl	800772c <__pow5mult>
 8006f32:	4681      	mov	r9, r0
 8006f34:	2101      	movs	r1, #1
 8006f36:	4658      	mov	r0, fp
 8006f38:	f000 fb38 	bl	80075ac <__i2b>
 8006f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f3e:	4604      	mov	r4, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 81cf 	beq.w	80072e4 <_dtoa_r+0xb3c>
 8006f46:	461a      	mov	r2, r3
 8006f48:	4601      	mov	r1, r0
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f000 fbee 	bl	800772c <__pow5mult>
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	4604      	mov	r4, r0
 8006f56:	f300 8095 	bgt.w	8007084 <_dtoa_r+0x8dc>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 8087 	bne.w	8007070 <_dtoa_r+0x8c8>
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8089 	bne.w	8007080 <_dtoa_r+0x8d8>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	0d1b      	lsrs	r3, r3, #20
 8006f76:	051b      	lsls	r3, r3, #20
 8006f78:	b12b      	cbz	r3, 8006f86 <_dtoa_r+0x7de>
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	f108 0801 	add.w	r8, r8, #1
 8006f84:	2301      	movs	r3, #1
 8006f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 81b0 	beq.w	80072f0 <_dtoa_r+0xb48>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f96:	6918      	ldr	r0, [r3, #16]
 8006f98:	f000 fabc 	bl	8007514 <__hi0bits>
 8006f9c:	f1c0 0020 	rsb	r0, r0, #32
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	4418      	add	r0, r3
 8006fa4:	f010 001f 	ands.w	r0, r0, #31
 8006fa8:	d077      	beq.n	800709a <_dtoa_r+0x8f2>
 8006faa:	f1c0 0320 	rsb	r3, r0, #32
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	dd6b      	ble.n	800708a <_dtoa_r+0x8e2>
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	f1c0 001c 	rsb	r0, r0, #28
 8006fb8:	4403      	add	r3, r0
 8006fba:	4480      	add	r8, r0
 8006fbc:	4406      	add	r6, r0
 8006fbe:	9308      	str	r3, [sp, #32]
 8006fc0:	f1b8 0f00 	cmp.w	r8, #0
 8006fc4:	dd05      	ble.n	8006fd2 <_dtoa_r+0x82a>
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4642      	mov	r2, r8
 8006fca:	4658      	mov	r0, fp
 8006fcc:	f000 fc08 	bl	80077e0 <__lshift>
 8006fd0:	4681      	mov	r9, r0
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd05      	ble.n	8006fe4 <_dtoa_r+0x83c>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4658      	mov	r0, fp
 8006fde:	f000 fbff 	bl	80077e0 <__lshift>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d059      	beq.n	800709e <_dtoa_r+0x8f6>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4648      	mov	r0, r9
 8006fee:	f000 fc63 	bl	80078b8 <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	da53      	bge.n	800709e <_dtoa_r+0x8f6>
 8006ff6:	1e7b      	subs	r3, r7, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	220a      	movs	r2, #10
 8007000:	4658      	mov	r0, fp
 8007002:	f000 fa41 	bl	8007488 <__multadd>
 8007006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007008:	4681      	mov	r9, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8172 	beq.w	80072f4 <_dtoa_r+0xb4c>
 8007010:	2300      	movs	r3, #0
 8007012:	4629      	mov	r1, r5
 8007014:	220a      	movs	r2, #10
 8007016:	4658      	mov	r0, fp
 8007018:	f000 fa36 	bl	8007488 <__multadd>
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	4605      	mov	r5, r0
 8007022:	dc67      	bgt.n	80070f4 <_dtoa_r+0x94c>
 8007024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007026:	2b02      	cmp	r3, #2
 8007028:	dc41      	bgt.n	80070ae <_dtoa_r+0x906>
 800702a:	e063      	b.n	80070f4 <_dtoa_r+0x94c>
 800702c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800702e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007032:	e746      	b.n	8006ec2 <_dtoa_r+0x71a>
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	1e5c      	subs	r4, r3, #1
 8007038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703a:	42a3      	cmp	r3, r4
 800703c:	bfbf      	itttt	lt
 800703e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007040:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007042:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007044:	1ae3      	sublt	r3, r4, r3
 8007046:	bfb4      	ite	lt
 8007048:	18d2      	addlt	r2, r2, r3
 800704a:	1b1c      	subge	r4, r3, r4
 800704c:	9b07      	ldr	r3, [sp, #28]
 800704e:	bfbc      	itt	lt
 8007050:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007052:	2400      	movlt	r4, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfb5      	itete	lt
 8007058:	eba8 0603 	sublt.w	r6, r8, r3
 800705c:	9b07      	ldrge	r3, [sp, #28]
 800705e:	2300      	movlt	r3, #0
 8007060:	4646      	movge	r6, r8
 8007062:	e730      	b.n	8006ec6 <_dtoa_r+0x71e>
 8007064:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007066:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007068:	4646      	mov	r6, r8
 800706a:	e735      	b.n	8006ed8 <_dtoa_r+0x730>
 800706c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800706e:	e75c      	b.n	8006f2a <_dtoa_r+0x782>
 8007070:	2300      	movs	r3, #0
 8007072:	e788      	b.n	8006f86 <_dtoa_r+0x7de>
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	40240000 	.word	0x40240000
 800707c:	40140000 	.word	0x40140000
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	e780      	b.n	8006f86 <_dtoa_r+0x7de>
 8007084:	2300      	movs	r3, #0
 8007086:	930a      	str	r3, [sp, #40]	@ 0x28
 8007088:	e782      	b.n	8006f90 <_dtoa_r+0x7e8>
 800708a:	d099      	beq.n	8006fc0 <_dtoa_r+0x818>
 800708c:	9a08      	ldr	r2, [sp, #32]
 800708e:	331c      	adds	r3, #28
 8007090:	441a      	add	r2, r3
 8007092:	4498      	add	r8, r3
 8007094:	441e      	add	r6, r3
 8007096:	9208      	str	r2, [sp, #32]
 8007098:	e792      	b.n	8006fc0 <_dtoa_r+0x818>
 800709a:	4603      	mov	r3, r0
 800709c:	e7f6      	b.n	800708c <_dtoa_r+0x8e4>
 800709e:	9b07      	ldr	r3, [sp, #28]
 80070a0:	9704      	str	r7, [sp, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dc20      	bgt.n	80070e8 <_dtoa_r+0x940>
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	dd1e      	ble.n	80070ec <_dtoa_r+0x944>
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f47f aec0 	bne.w	8006e36 <_dtoa_r+0x68e>
 80070b6:	4621      	mov	r1, r4
 80070b8:	2205      	movs	r2, #5
 80070ba:	4658      	mov	r0, fp
 80070bc:	f000 f9e4 	bl	8007488 <__multadd>
 80070c0:	4601      	mov	r1, r0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4648      	mov	r0, r9
 80070c6:	f000 fbf7 	bl	80078b8 <__mcmp>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f77f aeb3 	ble.w	8006e36 <_dtoa_r+0x68e>
 80070d0:	4656      	mov	r6, sl
 80070d2:	2331      	movs	r3, #49	@ 0x31
 80070d4:	f806 3b01 	strb.w	r3, [r6], #1
 80070d8:	9b04      	ldr	r3, [sp, #16]
 80070da:	3301      	adds	r3, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	e6ae      	b.n	8006e3e <_dtoa_r+0x696>
 80070e0:	9c07      	ldr	r4, [sp, #28]
 80070e2:	9704      	str	r7, [sp, #16]
 80070e4:	4625      	mov	r5, r4
 80070e6:	e7f3      	b.n	80070d0 <_dtoa_r+0x928>
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8104 	beq.w	80072fc <_dtoa_r+0xb54>
 80070f4:	2e00      	cmp	r6, #0
 80070f6:	dd05      	ble.n	8007104 <_dtoa_r+0x95c>
 80070f8:	4629      	mov	r1, r5
 80070fa:	4632      	mov	r2, r6
 80070fc:	4658      	mov	r0, fp
 80070fe:	f000 fb6f 	bl	80077e0 <__lshift>
 8007102:	4605      	mov	r5, r0
 8007104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d05a      	beq.n	80071c0 <_dtoa_r+0xa18>
 800710a:	6869      	ldr	r1, [r5, #4]
 800710c:	4658      	mov	r0, fp
 800710e:	f000 f959 	bl	80073c4 <_Balloc>
 8007112:	4606      	mov	r6, r0
 8007114:	b928      	cbnz	r0, 8007122 <_dtoa_r+0x97a>
 8007116:	4b84      	ldr	r3, [pc, #528]	@ (8007328 <_dtoa_r+0xb80>)
 8007118:	4602      	mov	r2, r0
 800711a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800711e:	f7ff bb5a 	b.w	80067d6 <_dtoa_r+0x2e>
 8007122:	692a      	ldr	r2, [r5, #16]
 8007124:	3202      	adds	r2, #2
 8007126:	0092      	lsls	r2, r2, #2
 8007128:	f105 010c 	add.w	r1, r5, #12
 800712c:	300c      	adds	r0, #12
 800712e:	f000 fefb 	bl	8007f28 <memcpy>
 8007132:	2201      	movs	r2, #1
 8007134:	4631      	mov	r1, r6
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fb52 	bl	80077e0 <__lshift>
 800713c:	f10a 0301 	add.w	r3, sl, #1
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	4453      	add	r3, sl
 8007146:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	462f      	mov	r7, r5
 8007150:	930a      	str	r3, [sp, #40]	@ 0x28
 8007152:	4605      	mov	r5, r0
 8007154:	9b07      	ldr	r3, [sp, #28]
 8007156:	4621      	mov	r1, r4
 8007158:	3b01      	subs	r3, #1
 800715a:	4648      	mov	r0, r9
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	f7ff fa99 	bl	8006694 <quorem>
 8007162:	4639      	mov	r1, r7
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800716a:	4648      	mov	r0, r9
 800716c:	f000 fba4 	bl	80078b8 <__mcmp>
 8007170:	462a      	mov	r2, r5
 8007172:	9008      	str	r0, [sp, #32]
 8007174:	4621      	mov	r1, r4
 8007176:	4658      	mov	r0, fp
 8007178:	f000 fbba 	bl	80078f0 <__mdiff>
 800717c:	68c2      	ldr	r2, [r0, #12]
 800717e:	4606      	mov	r6, r0
 8007180:	bb02      	cbnz	r2, 80071c4 <_dtoa_r+0xa1c>
 8007182:	4601      	mov	r1, r0
 8007184:	4648      	mov	r0, r9
 8007186:	f000 fb97 	bl	80078b8 <__mcmp>
 800718a:	4602      	mov	r2, r0
 800718c:	4631      	mov	r1, r6
 800718e:	4658      	mov	r0, fp
 8007190:	920e      	str	r2, [sp, #56]	@ 0x38
 8007192:	f000 f957 	bl	8007444 <_Bfree>
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800719a:	9e07      	ldr	r6, [sp, #28]
 800719c:	ea43 0102 	orr.w	r1, r3, r2
 80071a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a2:	4319      	orrs	r1, r3
 80071a4:	d110      	bne.n	80071c8 <_dtoa_r+0xa20>
 80071a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071aa:	d029      	beq.n	8007200 <_dtoa_r+0xa58>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd02      	ble.n	80071b8 <_dtoa_r+0xa10>
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	f883 8000 	strb.w	r8, [r3]
 80071be:	e63f      	b.n	8006e40 <_dtoa_r+0x698>
 80071c0:	4628      	mov	r0, r5
 80071c2:	e7bb      	b.n	800713c <_dtoa_r+0x994>
 80071c4:	2201      	movs	r2, #1
 80071c6:	e7e1      	b.n	800718c <_dtoa_r+0x9e4>
 80071c8:	9b08      	ldr	r3, [sp, #32]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	db04      	blt.n	80071d8 <_dtoa_r+0xa30>
 80071ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071d0:	430b      	orrs	r3, r1
 80071d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071d4:	430b      	orrs	r3, r1
 80071d6:	d120      	bne.n	800721a <_dtoa_r+0xa72>
 80071d8:	2a00      	cmp	r2, #0
 80071da:	dded      	ble.n	80071b8 <_dtoa_r+0xa10>
 80071dc:	4649      	mov	r1, r9
 80071de:	2201      	movs	r2, #1
 80071e0:	4658      	mov	r0, fp
 80071e2:	f000 fafd 	bl	80077e0 <__lshift>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4681      	mov	r9, r0
 80071ea:	f000 fb65 	bl	80078b8 <__mcmp>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	dc03      	bgt.n	80071fa <_dtoa_r+0xa52>
 80071f2:	d1e1      	bne.n	80071b8 <_dtoa_r+0xa10>
 80071f4:	f018 0f01 	tst.w	r8, #1
 80071f8:	d0de      	beq.n	80071b8 <_dtoa_r+0xa10>
 80071fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071fe:	d1d8      	bne.n	80071b2 <_dtoa_r+0xa0a>
 8007200:	9a00      	ldr	r2, [sp, #0]
 8007202:	2339      	movs	r3, #57	@ 0x39
 8007204:	7013      	strb	r3, [r2, #0]
 8007206:	4633      	mov	r3, r6
 8007208:	461e      	mov	r6, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007210:	2a39      	cmp	r2, #57	@ 0x39
 8007212:	d052      	beq.n	80072ba <_dtoa_r+0xb12>
 8007214:	3201      	adds	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	e612      	b.n	8006e40 <_dtoa_r+0x698>
 800721a:	2a00      	cmp	r2, #0
 800721c:	dd07      	ble.n	800722e <_dtoa_r+0xa86>
 800721e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007222:	d0ed      	beq.n	8007200 <_dtoa_r+0xa58>
 8007224:	9a00      	ldr	r2, [sp, #0]
 8007226:	f108 0301 	add.w	r3, r8, #1
 800722a:	7013      	strb	r3, [r2, #0]
 800722c:	e608      	b.n	8006e40 <_dtoa_r+0x698>
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	9a07      	ldr	r2, [sp, #28]
 8007232:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007238:	4293      	cmp	r3, r2
 800723a:	d028      	beq.n	800728e <_dtoa_r+0xae6>
 800723c:	4649      	mov	r1, r9
 800723e:	2300      	movs	r3, #0
 8007240:	220a      	movs	r2, #10
 8007242:	4658      	mov	r0, fp
 8007244:	f000 f920 	bl	8007488 <__multadd>
 8007248:	42af      	cmp	r7, r5
 800724a:	4681      	mov	r9, r0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	f04f 020a 	mov.w	r2, #10
 8007254:	4639      	mov	r1, r7
 8007256:	4658      	mov	r0, fp
 8007258:	d107      	bne.n	800726a <_dtoa_r+0xac2>
 800725a:	f000 f915 	bl	8007488 <__multadd>
 800725e:	4607      	mov	r7, r0
 8007260:	4605      	mov	r5, r0
 8007262:	9b07      	ldr	r3, [sp, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	e774      	b.n	8007154 <_dtoa_r+0x9ac>
 800726a:	f000 f90d 	bl	8007488 <__multadd>
 800726e:	4629      	mov	r1, r5
 8007270:	4607      	mov	r7, r0
 8007272:	2300      	movs	r3, #0
 8007274:	220a      	movs	r2, #10
 8007276:	4658      	mov	r0, fp
 8007278:	f000 f906 	bl	8007488 <__multadd>
 800727c:	4605      	mov	r5, r0
 800727e:	e7f0      	b.n	8007262 <_dtoa_r+0xaba>
 8007280:	9b00      	ldr	r3, [sp, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfcc      	ite	gt
 8007286:	461e      	movgt	r6, r3
 8007288:	2601      	movle	r6, #1
 800728a:	4456      	add	r6, sl
 800728c:	2700      	movs	r7, #0
 800728e:	4649      	mov	r1, r9
 8007290:	2201      	movs	r2, #1
 8007292:	4658      	mov	r0, fp
 8007294:	f000 faa4 	bl	80077e0 <__lshift>
 8007298:	4621      	mov	r1, r4
 800729a:	4681      	mov	r9, r0
 800729c:	f000 fb0c 	bl	80078b8 <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	dcb0      	bgt.n	8007206 <_dtoa_r+0xa5e>
 80072a4:	d102      	bne.n	80072ac <_dtoa_r+0xb04>
 80072a6:	f018 0f01 	tst.w	r8, #1
 80072aa:	d1ac      	bne.n	8007206 <_dtoa_r+0xa5e>
 80072ac:	4633      	mov	r3, r6
 80072ae:	461e      	mov	r6, r3
 80072b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072b4:	2a30      	cmp	r2, #48	@ 0x30
 80072b6:	d0fa      	beq.n	80072ae <_dtoa_r+0xb06>
 80072b8:	e5c2      	b.n	8006e40 <_dtoa_r+0x698>
 80072ba:	459a      	cmp	sl, r3
 80072bc:	d1a4      	bne.n	8007208 <_dtoa_r+0xa60>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	2331      	movs	r3, #49	@ 0x31
 80072c6:	f88a 3000 	strb.w	r3, [sl]
 80072ca:	e5b9      	b.n	8006e40 <_dtoa_r+0x698>
 80072cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800732c <_dtoa_r+0xb84>
 80072d2:	b11b      	cbz	r3, 80072dc <_dtoa_r+0xb34>
 80072d4:	f10a 0308 	add.w	r3, sl, #8
 80072d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	4650      	mov	r0, sl
 80072de:	b019      	add	sp, #100	@ 0x64
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	f77f ae37 	ble.w	8006f5a <_dtoa_r+0x7b2>
 80072ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f0:	2001      	movs	r0, #1
 80072f2:	e655      	b.n	8006fa0 <_dtoa_r+0x7f8>
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f77f aed6 	ble.w	80070a8 <_dtoa_r+0x900>
 80072fc:	4656      	mov	r6, sl
 80072fe:	4621      	mov	r1, r4
 8007300:	4648      	mov	r0, r9
 8007302:	f7ff f9c7 	bl	8006694 <quorem>
 8007306:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800730a:	f806 8b01 	strb.w	r8, [r6], #1
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	eba6 020a 	sub.w	r2, r6, sl
 8007314:	4293      	cmp	r3, r2
 8007316:	ddb3      	ble.n	8007280 <_dtoa_r+0xad8>
 8007318:	4649      	mov	r1, r9
 800731a:	2300      	movs	r3, #0
 800731c:	220a      	movs	r2, #10
 800731e:	4658      	mov	r0, fp
 8007320:	f000 f8b2 	bl	8007488 <__multadd>
 8007324:	4681      	mov	r9, r0
 8007326:	e7ea      	b.n	80072fe <_dtoa_r+0xb56>
 8007328:	08008c40 	.word	0x08008c40
 800732c:	08008bdb 	.word	0x08008bdb

08007330 <_free_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4605      	mov	r5, r0
 8007334:	2900      	cmp	r1, #0
 8007336:	d041      	beq.n	80073bc <_free_r+0x8c>
 8007338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800733c:	1f0c      	subs	r4, r1, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfb8      	it	lt
 8007342:	18e4      	addlt	r4, r4, r3
 8007344:	f7fe fb30 	bl	80059a8 <__malloc_lock>
 8007348:	4a1d      	ldr	r2, [pc, #116]	@ (80073c0 <_free_r+0x90>)
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	b933      	cbnz	r3, 800735c <_free_r+0x2c>
 800734e:	6063      	str	r3, [r4, #4]
 8007350:	6014      	str	r4, [r2, #0]
 8007352:	4628      	mov	r0, r5
 8007354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007358:	f7fe bb2c 	b.w	80059b4 <__malloc_unlock>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d908      	bls.n	8007372 <_free_r+0x42>
 8007360:	6820      	ldr	r0, [r4, #0]
 8007362:	1821      	adds	r1, r4, r0
 8007364:	428b      	cmp	r3, r1
 8007366:	bf01      	itttt	eq
 8007368:	6819      	ldreq	r1, [r3, #0]
 800736a:	685b      	ldreq	r3, [r3, #4]
 800736c:	1809      	addeq	r1, r1, r0
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	e7ed      	b.n	800734e <_free_r+0x1e>
 8007372:	461a      	mov	r2, r3
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b10b      	cbz	r3, 800737c <_free_r+0x4c>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d9fa      	bls.n	8007372 <_free_r+0x42>
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	1850      	adds	r0, r2, r1
 8007380:	42a0      	cmp	r0, r4
 8007382:	d10b      	bne.n	800739c <_free_r+0x6c>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	4401      	add	r1, r0
 8007388:	1850      	adds	r0, r2, r1
 800738a:	4283      	cmp	r3, r0
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	d1e0      	bne.n	8007352 <_free_r+0x22>
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	6053      	str	r3, [r2, #4]
 8007396:	4408      	add	r0, r1
 8007398:	6010      	str	r0, [r2, #0]
 800739a:	e7da      	b.n	8007352 <_free_r+0x22>
 800739c:	d902      	bls.n	80073a4 <_free_r+0x74>
 800739e:	230c      	movs	r3, #12
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	e7d6      	b.n	8007352 <_free_r+0x22>
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	1821      	adds	r1, r4, r0
 80073a8:	428b      	cmp	r3, r1
 80073aa:	bf04      	itt	eq
 80073ac:	6819      	ldreq	r1, [r3, #0]
 80073ae:	685b      	ldreq	r3, [r3, #4]
 80073b0:	6063      	str	r3, [r4, #4]
 80073b2:	bf04      	itt	eq
 80073b4:	1809      	addeq	r1, r1, r0
 80073b6:	6021      	streq	r1, [r4, #0]
 80073b8:	6054      	str	r4, [r2, #4]
 80073ba:	e7ca      	b.n	8007352 <_free_r+0x22>
 80073bc:	bd38      	pop	{r3, r4, r5, pc}
 80073be:	bf00      	nop
 80073c0:	20000450 	.word	0x20000450

080073c4 <_Balloc>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	69c6      	ldr	r6, [r0, #28]
 80073c8:	4604      	mov	r4, r0
 80073ca:	460d      	mov	r5, r1
 80073cc:	b976      	cbnz	r6, 80073ec <_Balloc+0x28>
 80073ce:	2010      	movs	r0, #16
 80073d0:	f7fe fa40 	bl	8005854 <malloc>
 80073d4:	4602      	mov	r2, r0
 80073d6:	61e0      	str	r0, [r4, #28]
 80073d8:	b920      	cbnz	r0, 80073e4 <_Balloc+0x20>
 80073da:	4b18      	ldr	r3, [pc, #96]	@ (800743c <_Balloc+0x78>)
 80073dc:	4818      	ldr	r0, [pc, #96]	@ (8007440 <_Balloc+0x7c>)
 80073de:	216b      	movs	r1, #107	@ 0x6b
 80073e0:	f7ff f93a 	bl	8006658 <__assert_func>
 80073e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073e8:	6006      	str	r6, [r0, #0]
 80073ea:	60c6      	str	r6, [r0, #12]
 80073ec:	69e6      	ldr	r6, [r4, #28]
 80073ee:	68f3      	ldr	r3, [r6, #12]
 80073f0:	b183      	cbz	r3, 8007414 <_Balloc+0x50>
 80073f2:	69e3      	ldr	r3, [r4, #28]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073fa:	b9b8      	cbnz	r0, 800742c <_Balloc+0x68>
 80073fc:	2101      	movs	r1, #1
 80073fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007402:	1d72      	adds	r2, r6, #5
 8007404:	0092      	lsls	r2, r2, #2
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fda3 	bl	8007f52 <_calloc_r>
 800740c:	b160      	cbz	r0, 8007428 <_Balloc+0x64>
 800740e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007412:	e00e      	b.n	8007432 <_Balloc+0x6e>
 8007414:	2221      	movs	r2, #33	@ 0x21
 8007416:	2104      	movs	r1, #4
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fd9a 	bl	8007f52 <_calloc_r>
 800741e:	69e3      	ldr	r3, [r4, #28]
 8007420:	60f0      	str	r0, [r6, #12]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e4      	bne.n	80073f2 <_Balloc+0x2e>
 8007428:	2000      	movs	r0, #0
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	6802      	ldr	r2, [r0, #0]
 800742e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007432:	2300      	movs	r3, #0
 8007434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007438:	e7f7      	b.n	800742a <_Balloc+0x66>
 800743a:	bf00      	nop
 800743c:	08008afc 	.word	0x08008afc
 8007440:	08008c51 	.word	0x08008c51

08007444 <_Bfree>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	69c6      	ldr	r6, [r0, #28]
 8007448:	4605      	mov	r5, r0
 800744a:	460c      	mov	r4, r1
 800744c:	b976      	cbnz	r6, 800746c <_Bfree+0x28>
 800744e:	2010      	movs	r0, #16
 8007450:	f7fe fa00 	bl	8005854 <malloc>
 8007454:	4602      	mov	r2, r0
 8007456:	61e8      	str	r0, [r5, #28]
 8007458:	b920      	cbnz	r0, 8007464 <_Bfree+0x20>
 800745a:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <_Bfree+0x3c>)
 800745c:	4809      	ldr	r0, [pc, #36]	@ (8007484 <_Bfree+0x40>)
 800745e:	218f      	movs	r1, #143	@ 0x8f
 8007460:	f7ff f8fa 	bl	8006658 <__assert_func>
 8007464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007468:	6006      	str	r6, [r0, #0]
 800746a:	60c6      	str	r6, [r0, #12]
 800746c:	b13c      	cbz	r4, 800747e <_Bfree+0x3a>
 800746e:	69eb      	ldr	r3, [r5, #28]
 8007470:	6862      	ldr	r2, [r4, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007478:	6021      	str	r1, [r4, #0]
 800747a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	08008afc 	.word	0x08008afc
 8007484:	08008c51 	.word	0x08008c51

08007488 <__multadd>:
 8007488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800748c:	690d      	ldr	r5, [r1, #16]
 800748e:	4607      	mov	r7, r0
 8007490:	460c      	mov	r4, r1
 8007492:	461e      	mov	r6, r3
 8007494:	f101 0c14 	add.w	ip, r1, #20
 8007498:	2000      	movs	r0, #0
 800749a:	f8dc 3000 	ldr.w	r3, [ip]
 800749e:	b299      	uxth	r1, r3
 80074a0:	fb02 6101 	mla	r1, r2, r1, r6
 80074a4:	0c1e      	lsrs	r6, r3, #16
 80074a6:	0c0b      	lsrs	r3, r1, #16
 80074a8:	fb02 3306 	mla	r3, r2, r6, r3
 80074ac:	b289      	uxth	r1, r1
 80074ae:	3001      	adds	r0, #1
 80074b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074b4:	4285      	cmp	r5, r0
 80074b6:	f84c 1b04 	str.w	r1, [ip], #4
 80074ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074be:	dcec      	bgt.n	800749a <__multadd+0x12>
 80074c0:	b30e      	cbz	r6, 8007506 <__multadd+0x7e>
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dc19      	bgt.n	80074fc <__multadd+0x74>
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	4638      	mov	r0, r7
 80074cc:	3101      	adds	r1, #1
 80074ce:	f7ff ff79 	bl	80073c4 <_Balloc>
 80074d2:	4680      	mov	r8, r0
 80074d4:	b928      	cbnz	r0, 80074e2 <__multadd+0x5a>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <__multadd+0x84>)
 80074da:	480d      	ldr	r0, [pc, #52]	@ (8007510 <__multadd+0x88>)
 80074dc:	21ba      	movs	r1, #186	@ 0xba
 80074de:	f7ff f8bb 	bl	8006658 <__assert_func>
 80074e2:	6922      	ldr	r2, [r4, #16]
 80074e4:	3202      	adds	r2, #2
 80074e6:	f104 010c 	add.w	r1, r4, #12
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	300c      	adds	r0, #12
 80074ee:	f000 fd1b 	bl	8007f28 <memcpy>
 80074f2:	4621      	mov	r1, r4
 80074f4:	4638      	mov	r0, r7
 80074f6:	f7ff ffa5 	bl	8007444 <_Bfree>
 80074fa:	4644      	mov	r4, r8
 80074fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007500:	3501      	adds	r5, #1
 8007502:	615e      	str	r6, [r3, #20]
 8007504:	6125      	str	r5, [r4, #16]
 8007506:	4620      	mov	r0, r4
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750c:	08008c40 	.word	0x08008c40
 8007510:	08008c51 	.word	0x08008c51

08007514 <__hi0bits>:
 8007514:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007518:	4603      	mov	r3, r0
 800751a:	bf36      	itet	cc
 800751c:	0403      	lslcc	r3, r0, #16
 800751e:	2000      	movcs	r0, #0
 8007520:	2010      	movcc	r0, #16
 8007522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007526:	bf3c      	itt	cc
 8007528:	021b      	lslcc	r3, r3, #8
 800752a:	3008      	addcc	r0, #8
 800752c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007530:	bf3c      	itt	cc
 8007532:	011b      	lslcc	r3, r3, #4
 8007534:	3004      	addcc	r0, #4
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753a:	bf3c      	itt	cc
 800753c:	009b      	lslcc	r3, r3, #2
 800753e:	3002      	addcc	r0, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	db05      	blt.n	8007550 <__hi0bits+0x3c>
 8007544:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007548:	f100 0001 	add.w	r0, r0, #1
 800754c:	bf08      	it	eq
 800754e:	2020      	moveq	r0, #32
 8007550:	4770      	bx	lr

08007552 <__lo0bits>:
 8007552:	6803      	ldr	r3, [r0, #0]
 8007554:	4602      	mov	r2, r0
 8007556:	f013 0007 	ands.w	r0, r3, #7
 800755a:	d00b      	beq.n	8007574 <__lo0bits+0x22>
 800755c:	07d9      	lsls	r1, r3, #31
 800755e:	d421      	bmi.n	80075a4 <__lo0bits+0x52>
 8007560:	0798      	lsls	r0, r3, #30
 8007562:	bf49      	itett	mi
 8007564:	085b      	lsrmi	r3, r3, #1
 8007566:	089b      	lsrpl	r3, r3, #2
 8007568:	2001      	movmi	r0, #1
 800756a:	6013      	strmi	r3, [r2, #0]
 800756c:	bf5c      	itt	pl
 800756e:	6013      	strpl	r3, [r2, #0]
 8007570:	2002      	movpl	r0, #2
 8007572:	4770      	bx	lr
 8007574:	b299      	uxth	r1, r3
 8007576:	b909      	cbnz	r1, 800757c <__lo0bits+0x2a>
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	2010      	movs	r0, #16
 800757c:	b2d9      	uxtb	r1, r3
 800757e:	b909      	cbnz	r1, 8007584 <__lo0bits+0x32>
 8007580:	3008      	adds	r0, #8
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	0719      	lsls	r1, r3, #28
 8007586:	bf04      	itt	eq
 8007588:	091b      	lsreq	r3, r3, #4
 800758a:	3004      	addeq	r0, #4
 800758c:	0799      	lsls	r1, r3, #30
 800758e:	bf04      	itt	eq
 8007590:	089b      	lsreq	r3, r3, #2
 8007592:	3002      	addeq	r0, #2
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d403      	bmi.n	80075a0 <__lo0bits+0x4e>
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	f100 0001 	add.w	r0, r0, #1
 800759e:	d003      	beq.n	80075a8 <__lo0bits+0x56>
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	4770      	bx	lr
 80075a4:	2000      	movs	r0, #0
 80075a6:	4770      	bx	lr
 80075a8:	2020      	movs	r0, #32
 80075aa:	4770      	bx	lr

080075ac <__i2b>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	460c      	mov	r4, r1
 80075b0:	2101      	movs	r1, #1
 80075b2:	f7ff ff07 	bl	80073c4 <_Balloc>
 80075b6:	4602      	mov	r2, r0
 80075b8:	b928      	cbnz	r0, 80075c6 <__i2b+0x1a>
 80075ba:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <__i2b+0x24>)
 80075bc:	4805      	ldr	r0, [pc, #20]	@ (80075d4 <__i2b+0x28>)
 80075be:	f240 1145 	movw	r1, #325	@ 0x145
 80075c2:	f7ff f849 	bl	8006658 <__assert_func>
 80075c6:	2301      	movs	r3, #1
 80075c8:	6144      	str	r4, [r0, #20]
 80075ca:	6103      	str	r3, [r0, #16]
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	bf00      	nop
 80075d0:	08008c40 	.word	0x08008c40
 80075d4:	08008c51 	.word	0x08008c51

080075d8 <__multiply>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	4614      	mov	r4, r2
 80075de:	690a      	ldr	r2, [r1, #16]
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	bfa8      	it	ge
 80075e6:	4623      	movge	r3, r4
 80075e8:	460f      	mov	r7, r1
 80075ea:	bfa4      	itt	ge
 80075ec:	460c      	movge	r4, r1
 80075ee:	461f      	movge	r7, r3
 80075f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075f8:	68a3      	ldr	r3, [r4, #8]
 80075fa:	6861      	ldr	r1, [r4, #4]
 80075fc:	eb0a 0609 	add.w	r6, sl, r9
 8007600:	42b3      	cmp	r3, r6
 8007602:	b085      	sub	sp, #20
 8007604:	bfb8      	it	lt
 8007606:	3101      	addlt	r1, #1
 8007608:	f7ff fedc 	bl	80073c4 <_Balloc>
 800760c:	b930      	cbnz	r0, 800761c <__multiply+0x44>
 800760e:	4602      	mov	r2, r0
 8007610:	4b44      	ldr	r3, [pc, #272]	@ (8007724 <__multiply+0x14c>)
 8007612:	4845      	ldr	r0, [pc, #276]	@ (8007728 <__multiply+0x150>)
 8007614:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007618:	f7ff f81e 	bl	8006658 <__assert_func>
 800761c:	f100 0514 	add.w	r5, r0, #20
 8007620:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007624:	462b      	mov	r3, r5
 8007626:	2200      	movs	r2, #0
 8007628:	4543      	cmp	r3, r8
 800762a:	d321      	bcc.n	8007670 <__multiply+0x98>
 800762c:	f107 0114 	add.w	r1, r7, #20
 8007630:	f104 0214 	add.w	r2, r4, #20
 8007634:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007638:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	1b13      	subs	r3, r2, r4
 8007640:	3b15      	subs	r3, #21
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	3304      	adds	r3, #4
 8007648:	f104 0715 	add.w	r7, r4, #21
 800764c:	42ba      	cmp	r2, r7
 800764e:	bf38      	it	cc
 8007650:	2304      	movcc	r3, #4
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	9b02      	ldr	r3, [sp, #8]
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	428b      	cmp	r3, r1
 800765a:	d80c      	bhi.n	8007676 <__multiply+0x9e>
 800765c:	2e00      	cmp	r6, #0
 800765e:	dd03      	ble.n	8007668 <__multiply+0x90>
 8007660:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007664:	2b00      	cmp	r3, #0
 8007666:	d05b      	beq.n	8007720 <__multiply+0x148>
 8007668:	6106      	str	r6, [r0, #16]
 800766a:	b005      	add	sp, #20
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	f843 2b04 	str.w	r2, [r3], #4
 8007674:	e7d8      	b.n	8007628 <__multiply+0x50>
 8007676:	f8b1 a000 	ldrh.w	sl, [r1]
 800767a:	f1ba 0f00 	cmp.w	sl, #0
 800767e:	d024      	beq.n	80076ca <__multiply+0xf2>
 8007680:	f104 0e14 	add.w	lr, r4, #20
 8007684:	46a9      	mov	r9, r5
 8007686:	f04f 0c00 	mov.w	ip, #0
 800768a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800768e:	f8d9 3000 	ldr.w	r3, [r9]
 8007692:	fa1f fb87 	uxth.w	fp, r7
 8007696:	b29b      	uxth	r3, r3
 8007698:	fb0a 330b 	mla	r3, sl, fp, r3
 800769c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80076a0:	f8d9 7000 	ldr.w	r7, [r9]
 80076a4:	4463      	add	r3, ip
 80076a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80076ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076b8:	4572      	cmp	r2, lr
 80076ba:	f849 3b04 	str.w	r3, [r9], #4
 80076be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076c2:	d8e2      	bhi.n	800768a <__multiply+0xb2>
 80076c4:	9b01      	ldr	r3, [sp, #4]
 80076c6:	f845 c003 	str.w	ip, [r5, r3]
 80076ca:	9b03      	ldr	r3, [sp, #12]
 80076cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076d0:	3104      	adds	r1, #4
 80076d2:	f1b9 0f00 	cmp.w	r9, #0
 80076d6:	d021      	beq.n	800771c <__multiply+0x144>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	f104 0c14 	add.w	ip, r4, #20
 80076de:	46ae      	mov	lr, r5
 80076e0:	f04f 0a00 	mov.w	sl, #0
 80076e4:	f8bc b000 	ldrh.w	fp, [ip]
 80076e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076ec:	fb09 770b 	mla	r7, r9, fp, r7
 80076f0:	4457      	add	r7, sl
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076f8:	f84e 3b04 	str.w	r3, [lr], #4
 80076fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007704:	f8be 3000 	ldrh.w	r3, [lr]
 8007708:	fb09 330a 	mla	r3, r9, sl, r3
 800770c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007710:	4562      	cmp	r2, ip
 8007712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007716:	d8e5      	bhi.n	80076e4 <__multiply+0x10c>
 8007718:	9f01      	ldr	r7, [sp, #4]
 800771a:	51eb      	str	r3, [r5, r7]
 800771c:	3504      	adds	r5, #4
 800771e:	e799      	b.n	8007654 <__multiply+0x7c>
 8007720:	3e01      	subs	r6, #1
 8007722:	e79b      	b.n	800765c <__multiply+0x84>
 8007724:	08008c40 	.word	0x08008c40
 8007728:	08008c51 	.word	0x08008c51

0800772c <__pow5mult>:
 800772c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007730:	4615      	mov	r5, r2
 8007732:	f012 0203 	ands.w	r2, r2, #3
 8007736:	4607      	mov	r7, r0
 8007738:	460e      	mov	r6, r1
 800773a:	d007      	beq.n	800774c <__pow5mult+0x20>
 800773c:	4c25      	ldr	r4, [pc, #148]	@ (80077d4 <__pow5mult+0xa8>)
 800773e:	3a01      	subs	r2, #1
 8007740:	2300      	movs	r3, #0
 8007742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007746:	f7ff fe9f 	bl	8007488 <__multadd>
 800774a:	4606      	mov	r6, r0
 800774c:	10ad      	asrs	r5, r5, #2
 800774e:	d03d      	beq.n	80077cc <__pow5mult+0xa0>
 8007750:	69fc      	ldr	r4, [r7, #28]
 8007752:	b97c      	cbnz	r4, 8007774 <__pow5mult+0x48>
 8007754:	2010      	movs	r0, #16
 8007756:	f7fe f87d 	bl	8005854 <malloc>
 800775a:	4602      	mov	r2, r0
 800775c:	61f8      	str	r0, [r7, #28]
 800775e:	b928      	cbnz	r0, 800776c <__pow5mult+0x40>
 8007760:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <__pow5mult+0xac>)
 8007762:	481e      	ldr	r0, [pc, #120]	@ (80077dc <__pow5mult+0xb0>)
 8007764:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007768:	f7fe ff76 	bl	8006658 <__assert_func>
 800776c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007770:	6004      	str	r4, [r0, #0]
 8007772:	60c4      	str	r4, [r0, #12]
 8007774:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800777c:	b94c      	cbnz	r4, 8007792 <__pow5mult+0x66>
 800777e:	f240 2171 	movw	r1, #625	@ 0x271
 8007782:	4638      	mov	r0, r7
 8007784:	f7ff ff12 	bl	80075ac <__i2b>
 8007788:	2300      	movs	r3, #0
 800778a:	f8c8 0008 	str.w	r0, [r8, #8]
 800778e:	4604      	mov	r4, r0
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	f04f 0900 	mov.w	r9, #0
 8007796:	07eb      	lsls	r3, r5, #31
 8007798:	d50a      	bpl.n	80077b0 <__pow5mult+0x84>
 800779a:	4631      	mov	r1, r6
 800779c:	4622      	mov	r2, r4
 800779e:	4638      	mov	r0, r7
 80077a0:	f7ff ff1a 	bl	80075d8 <__multiply>
 80077a4:	4631      	mov	r1, r6
 80077a6:	4680      	mov	r8, r0
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff fe4b 	bl	8007444 <_Bfree>
 80077ae:	4646      	mov	r6, r8
 80077b0:	106d      	asrs	r5, r5, #1
 80077b2:	d00b      	beq.n	80077cc <__pow5mult+0xa0>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	b938      	cbnz	r0, 80077c8 <__pow5mult+0x9c>
 80077b8:	4622      	mov	r2, r4
 80077ba:	4621      	mov	r1, r4
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ff0b 	bl	80075d8 <__multiply>
 80077c2:	6020      	str	r0, [r4, #0]
 80077c4:	f8c0 9000 	str.w	r9, [r0]
 80077c8:	4604      	mov	r4, r0
 80077ca:	e7e4      	b.n	8007796 <__pow5mult+0x6a>
 80077cc:	4630      	mov	r0, r6
 80077ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d2:	bf00      	nop
 80077d4:	08008cac 	.word	0x08008cac
 80077d8:	08008afc 	.word	0x08008afc
 80077dc:	08008c51 	.word	0x08008c51

080077e0 <__lshift>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	460c      	mov	r4, r1
 80077e6:	6849      	ldr	r1, [r1, #4]
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	4607      	mov	r7, r0
 80077f2:	4691      	mov	r9, r2
 80077f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077f8:	f108 0601 	add.w	r6, r8, #1
 80077fc:	42b3      	cmp	r3, r6
 80077fe:	db0b      	blt.n	8007818 <__lshift+0x38>
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff fddf 	bl	80073c4 <_Balloc>
 8007806:	4605      	mov	r5, r0
 8007808:	b948      	cbnz	r0, 800781e <__lshift+0x3e>
 800780a:	4602      	mov	r2, r0
 800780c:	4b28      	ldr	r3, [pc, #160]	@ (80078b0 <__lshift+0xd0>)
 800780e:	4829      	ldr	r0, [pc, #164]	@ (80078b4 <__lshift+0xd4>)
 8007810:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007814:	f7fe ff20 	bl	8006658 <__assert_func>
 8007818:	3101      	adds	r1, #1
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	e7ee      	b.n	80077fc <__lshift+0x1c>
 800781e:	2300      	movs	r3, #0
 8007820:	f100 0114 	add.w	r1, r0, #20
 8007824:	f100 0210 	add.w	r2, r0, #16
 8007828:	4618      	mov	r0, r3
 800782a:	4553      	cmp	r3, sl
 800782c:	db33      	blt.n	8007896 <__lshift+0xb6>
 800782e:	6920      	ldr	r0, [r4, #16]
 8007830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007834:	f104 0314 	add.w	r3, r4, #20
 8007838:	f019 091f 	ands.w	r9, r9, #31
 800783c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007844:	d02b      	beq.n	800789e <__lshift+0xbe>
 8007846:	f1c9 0e20 	rsb	lr, r9, #32
 800784a:	468a      	mov	sl, r1
 800784c:	2200      	movs	r2, #0
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	fa00 f009 	lsl.w	r0, r0, r9
 8007854:	4310      	orrs	r0, r2
 8007856:	f84a 0b04 	str.w	r0, [sl], #4
 800785a:	f853 2b04 	ldr.w	r2, [r3], #4
 800785e:	459c      	cmp	ip, r3
 8007860:	fa22 f20e 	lsr.w	r2, r2, lr
 8007864:	d8f3      	bhi.n	800784e <__lshift+0x6e>
 8007866:	ebac 0304 	sub.w	r3, ip, r4
 800786a:	3b15      	subs	r3, #21
 800786c:	f023 0303 	bic.w	r3, r3, #3
 8007870:	3304      	adds	r3, #4
 8007872:	f104 0015 	add.w	r0, r4, #21
 8007876:	4584      	cmp	ip, r0
 8007878:	bf38      	it	cc
 800787a:	2304      	movcc	r3, #4
 800787c:	50ca      	str	r2, [r1, r3]
 800787e:	b10a      	cbz	r2, 8007884 <__lshift+0xa4>
 8007880:	f108 0602 	add.w	r6, r8, #2
 8007884:	3e01      	subs	r6, #1
 8007886:	4638      	mov	r0, r7
 8007888:	612e      	str	r6, [r5, #16]
 800788a:	4621      	mov	r1, r4
 800788c:	f7ff fdda 	bl	8007444 <_Bfree>
 8007890:	4628      	mov	r0, r5
 8007892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007896:	f842 0f04 	str.w	r0, [r2, #4]!
 800789a:	3301      	adds	r3, #1
 800789c:	e7c5      	b.n	800782a <__lshift+0x4a>
 800789e:	3904      	subs	r1, #4
 80078a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80078a8:	459c      	cmp	ip, r3
 80078aa:	d8f9      	bhi.n	80078a0 <__lshift+0xc0>
 80078ac:	e7ea      	b.n	8007884 <__lshift+0xa4>
 80078ae:	bf00      	nop
 80078b0:	08008c40 	.word	0x08008c40
 80078b4:	08008c51 	.word	0x08008c51

080078b8 <__mcmp>:
 80078b8:	690a      	ldr	r2, [r1, #16]
 80078ba:	4603      	mov	r3, r0
 80078bc:	6900      	ldr	r0, [r0, #16]
 80078be:	1a80      	subs	r0, r0, r2
 80078c0:	b530      	push	{r4, r5, lr}
 80078c2:	d10e      	bne.n	80078e2 <__mcmp+0x2a>
 80078c4:	3314      	adds	r3, #20
 80078c6:	3114      	adds	r1, #20
 80078c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078d8:	4295      	cmp	r5, r2
 80078da:	d003      	beq.n	80078e4 <__mcmp+0x2c>
 80078dc:	d205      	bcs.n	80078ea <__mcmp+0x32>
 80078de:	f04f 30ff 	mov.w	r0, #4294967295
 80078e2:	bd30      	pop	{r4, r5, pc}
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	d3f3      	bcc.n	80078d0 <__mcmp+0x18>
 80078e8:	e7fb      	b.n	80078e2 <__mcmp+0x2a>
 80078ea:	2001      	movs	r0, #1
 80078ec:	e7f9      	b.n	80078e2 <__mcmp+0x2a>
	...

080078f0 <__mdiff>:
 80078f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	4689      	mov	r9, r1
 80078f6:	4606      	mov	r6, r0
 80078f8:	4611      	mov	r1, r2
 80078fa:	4648      	mov	r0, r9
 80078fc:	4614      	mov	r4, r2
 80078fe:	f7ff ffdb 	bl	80078b8 <__mcmp>
 8007902:	1e05      	subs	r5, r0, #0
 8007904:	d112      	bne.n	800792c <__mdiff+0x3c>
 8007906:	4629      	mov	r1, r5
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff fd5b 	bl	80073c4 <_Balloc>
 800790e:	4602      	mov	r2, r0
 8007910:	b928      	cbnz	r0, 800791e <__mdiff+0x2e>
 8007912:	4b3f      	ldr	r3, [pc, #252]	@ (8007a10 <__mdiff+0x120>)
 8007914:	f240 2137 	movw	r1, #567	@ 0x237
 8007918:	483e      	ldr	r0, [pc, #248]	@ (8007a14 <__mdiff+0x124>)
 800791a:	f7fe fe9d 	bl	8006658 <__assert_func>
 800791e:	2301      	movs	r3, #1
 8007920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007924:	4610      	mov	r0, r2
 8007926:	b003      	add	sp, #12
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	bfbc      	itt	lt
 800792e:	464b      	movlt	r3, r9
 8007930:	46a1      	movlt	r9, r4
 8007932:	4630      	mov	r0, r6
 8007934:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007938:	bfba      	itte	lt
 800793a:	461c      	movlt	r4, r3
 800793c:	2501      	movlt	r5, #1
 800793e:	2500      	movge	r5, #0
 8007940:	f7ff fd40 	bl	80073c4 <_Balloc>
 8007944:	4602      	mov	r2, r0
 8007946:	b918      	cbnz	r0, 8007950 <__mdiff+0x60>
 8007948:	4b31      	ldr	r3, [pc, #196]	@ (8007a10 <__mdiff+0x120>)
 800794a:	f240 2145 	movw	r1, #581	@ 0x245
 800794e:	e7e3      	b.n	8007918 <__mdiff+0x28>
 8007950:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007954:	6926      	ldr	r6, [r4, #16]
 8007956:	60c5      	str	r5, [r0, #12]
 8007958:	f109 0310 	add.w	r3, r9, #16
 800795c:	f109 0514 	add.w	r5, r9, #20
 8007960:	f104 0e14 	add.w	lr, r4, #20
 8007964:	f100 0b14 	add.w	fp, r0, #20
 8007968:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800796c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	46d9      	mov	r9, fp
 8007974:	f04f 0c00 	mov.w	ip, #0
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800797e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	fa1f f38a 	uxth.w	r3, sl
 8007988:	4619      	mov	r1, r3
 800798a:	b283      	uxth	r3, r0
 800798c:	1acb      	subs	r3, r1, r3
 800798e:	0c00      	lsrs	r0, r0, #16
 8007990:	4463      	add	r3, ip
 8007992:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007996:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079a0:	4576      	cmp	r6, lr
 80079a2:	f849 3b04 	str.w	r3, [r9], #4
 80079a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079aa:	d8e5      	bhi.n	8007978 <__mdiff+0x88>
 80079ac:	1b33      	subs	r3, r6, r4
 80079ae:	3b15      	subs	r3, #21
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	3415      	adds	r4, #21
 80079b6:	3304      	adds	r3, #4
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	bf38      	it	cc
 80079bc:	2304      	movcc	r3, #4
 80079be:	441d      	add	r5, r3
 80079c0:	445b      	add	r3, fp
 80079c2:	461e      	mov	r6, r3
 80079c4:	462c      	mov	r4, r5
 80079c6:	4544      	cmp	r4, r8
 80079c8:	d30e      	bcc.n	80079e8 <__mdiff+0xf8>
 80079ca:	f108 0103 	add.w	r1, r8, #3
 80079ce:	1b49      	subs	r1, r1, r5
 80079d0:	f021 0103 	bic.w	r1, r1, #3
 80079d4:	3d03      	subs	r5, #3
 80079d6:	45a8      	cmp	r8, r5
 80079d8:	bf38      	it	cc
 80079da:	2100      	movcc	r1, #0
 80079dc:	440b      	add	r3, r1
 80079de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079e2:	b191      	cbz	r1, 8007a0a <__mdiff+0x11a>
 80079e4:	6117      	str	r7, [r2, #16]
 80079e6:	e79d      	b.n	8007924 <__mdiff+0x34>
 80079e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80079ec:	46e6      	mov	lr, ip
 80079ee:	0c08      	lsrs	r0, r1, #16
 80079f0:	fa1c fc81 	uxtah	ip, ip, r1
 80079f4:	4471      	add	r1, lr
 80079f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079fa:	b289      	uxth	r1, r1
 80079fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a00:	f846 1b04 	str.w	r1, [r6], #4
 8007a04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a08:	e7dd      	b.n	80079c6 <__mdiff+0xd6>
 8007a0a:	3f01      	subs	r7, #1
 8007a0c:	e7e7      	b.n	80079de <__mdiff+0xee>
 8007a0e:	bf00      	nop
 8007a10:	08008c40 	.word	0x08008c40
 8007a14:	08008c51 	.word	0x08008c51

08007a18 <__d2b>:
 8007a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	2101      	movs	r1, #1
 8007a20:	ec59 8b10 	vmov	r8, r9, d0
 8007a24:	4616      	mov	r6, r2
 8007a26:	f7ff fccd 	bl	80073c4 <_Balloc>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b930      	cbnz	r0, 8007a3c <__d2b+0x24>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b23      	ldr	r3, [pc, #140]	@ (8007ac0 <__d2b+0xa8>)
 8007a32:	4824      	ldr	r0, [pc, #144]	@ (8007ac4 <__d2b+0xac>)
 8007a34:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a38:	f7fe fe0e 	bl	8006658 <__assert_func>
 8007a3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a44:	b10d      	cbz	r5, 8007a4a <__d2b+0x32>
 8007a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	f1b8 0300 	subs.w	r3, r8, #0
 8007a50:	d023      	beq.n	8007a9a <__d2b+0x82>
 8007a52:	4668      	mov	r0, sp
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	f7ff fd7c 	bl	8007552 <__lo0bits>
 8007a5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a5e:	b1d0      	cbz	r0, 8007a96 <__d2b+0x7e>
 8007a60:	f1c0 0320 	rsb	r3, r0, #32
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	40c2      	lsrs	r2, r0
 8007a6c:	6163      	str	r3, [r4, #20]
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	61a3      	str	r3, [r4, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2201      	moveq	r2, #1
 8007a7a:	2202      	movne	r2, #2
 8007a7c:	6122      	str	r2, [r4, #16]
 8007a7e:	b1a5      	cbz	r5, 8007aaa <__d2b+0x92>
 8007a80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a84:	4405      	add	r5, r0
 8007a86:	603d      	str	r5, [r7, #0]
 8007a88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a8c:	6030      	str	r0, [r6, #0]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	b003      	add	sp, #12
 8007a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a96:	6161      	str	r1, [r4, #20]
 8007a98:	e7ea      	b.n	8007a70 <__d2b+0x58>
 8007a9a:	a801      	add	r0, sp, #4
 8007a9c:	f7ff fd59 	bl	8007552 <__lo0bits>
 8007aa0:	9b01      	ldr	r3, [sp, #4]
 8007aa2:	6163      	str	r3, [r4, #20]
 8007aa4:	3020      	adds	r0, #32
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	e7e8      	b.n	8007a7c <__d2b+0x64>
 8007aaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ab2:	6038      	str	r0, [r7, #0]
 8007ab4:	6918      	ldr	r0, [r3, #16]
 8007ab6:	f7ff fd2d 	bl	8007514 <__hi0bits>
 8007aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007abe:	e7e5      	b.n	8007a8c <__d2b+0x74>
 8007ac0:	08008c40 	.word	0x08008c40
 8007ac4:	08008c51 	.word	0x08008c51

08007ac8 <__ssputs_r>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	688e      	ldr	r6, [r1, #8]
 8007ace:	461f      	mov	r7, r3
 8007ad0:	42be      	cmp	r6, r7
 8007ad2:	680b      	ldr	r3, [r1, #0]
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	4690      	mov	r8, r2
 8007ada:	d82d      	bhi.n	8007b38 <__ssputs_r+0x70>
 8007adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae4:	d026      	beq.n	8007b34 <__ssputs_r+0x6c>
 8007ae6:	6965      	ldr	r5, [r4, #20]
 8007ae8:	6909      	ldr	r1, [r1, #16]
 8007aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aee:	eba3 0901 	sub.w	r9, r3, r1
 8007af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af6:	1c7b      	adds	r3, r7, #1
 8007af8:	444b      	add	r3, r9
 8007afa:	106d      	asrs	r5, r5, #1
 8007afc:	429d      	cmp	r5, r3
 8007afe:	bf38      	it	cc
 8007b00:	461d      	movcc	r5, r3
 8007b02:	0553      	lsls	r3, r2, #21
 8007b04:	d527      	bpl.n	8007b56 <__ssputs_r+0x8e>
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7fd fece 	bl	80058a8 <_malloc_r>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b360      	cbz	r0, 8007b6a <__ssputs_r+0xa2>
 8007b10:	6921      	ldr	r1, [r4, #16]
 8007b12:	464a      	mov	r2, r9
 8007b14:	f000 fa08 	bl	8007f28 <memcpy>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	6126      	str	r6, [r4, #16]
 8007b26:	6165      	str	r5, [r4, #20]
 8007b28:	444e      	add	r6, r9
 8007b2a:	eba5 0509 	sub.w	r5, r5, r9
 8007b2e:	6026      	str	r6, [r4, #0]
 8007b30:	60a5      	str	r5, [r4, #8]
 8007b32:	463e      	mov	r6, r7
 8007b34:	42be      	cmp	r6, r7
 8007b36:	d900      	bls.n	8007b3a <__ssputs_r+0x72>
 8007b38:	463e      	mov	r6, r7
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4641      	mov	r1, r8
 8007b40:	f000 f9d8 	bl	8007ef4 <memmove>
 8007b44:	68a3      	ldr	r3, [r4, #8]
 8007b46:	1b9b      	subs	r3, r3, r6
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	4433      	add	r3, r6
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	2000      	movs	r0, #0
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	462a      	mov	r2, r5
 8007b58:	f000 fa21 	bl	8007f9e <_realloc_r>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d1e0      	bne.n	8007b24 <__ssputs_r+0x5c>
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	4650      	mov	r0, sl
 8007b66:	f7ff fbe3 	bl	8007330 <_free_r>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	f8ca 3000 	str.w	r3, [sl]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e7e9      	b.n	8007b52 <__ssputs_r+0x8a>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4698      	mov	r8, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	b09d      	sub	sp, #116	@ 0x74
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	d510      	bpl.n	8007bb6 <_svfiprintf_r+0x36>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b973      	cbnz	r3, 8007bb6 <_svfiprintf_r+0x36>
 8007b98:	2140      	movs	r1, #64	@ 0x40
 8007b9a:	f7fd fe85 	bl	80058a8 <_malloc_r>
 8007b9e:	6028      	str	r0, [r5, #0]
 8007ba0:	6128      	str	r0, [r5, #16]
 8007ba2:	b930      	cbnz	r0, 8007bb2 <_svfiprintf_r+0x32>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b01d      	add	sp, #116	@ 0x74
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	2340      	movs	r3, #64	@ 0x40
 8007bb4:	616b      	str	r3, [r5, #20]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bba:	2320      	movs	r3, #32
 8007bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc4:	2330      	movs	r3, #48	@ 0x30
 8007bc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d64 <_svfiprintf_r+0x1e4>
 8007bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bce:	f04f 0901 	mov.w	r9, #1
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	469a      	mov	sl, r3
 8007bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bda:	b10a      	cbz	r2, 8007be0 <_svfiprintf_r+0x60>
 8007bdc:	2a25      	cmp	r2, #37	@ 0x25
 8007bde:	d1f9      	bne.n	8007bd4 <_svfiprintf_r+0x54>
 8007be0:	ebba 0b04 	subs.w	fp, sl, r4
 8007be4:	d00b      	beq.n	8007bfe <_svfiprintf_r+0x7e>
 8007be6:	465b      	mov	r3, fp
 8007be8:	4622      	mov	r2, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff ff6b 	bl	8007ac8 <__ssputs_r>
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f000 80a7 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfa:	445a      	add	r2, fp
 8007bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 809f 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c12:	f10a 0a01 	add.w	sl, sl, #1
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c20:	4654      	mov	r4, sl
 8007c22:	2205      	movs	r2, #5
 8007c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c28:	484e      	ldr	r0, [pc, #312]	@ (8007d64 <_svfiprintf_r+0x1e4>)
 8007c2a:	f7f8 fad9 	bl	80001e0 <memchr>
 8007c2e:	9a04      	ldr	r2, [sp, #16]
 8007c30:	b9d8      	cbnz	r0, 8007c6a <_svfiprintf_r+0xea>
 8007c32:	06d0      	lsls	r0, r2, #27
 8007c34:	bf44      	itt	mi
 8007c36:	2320      	movmi	r3, #32
 8007c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c3c:	0711      	lsls	r1, r2, #28
 8007c3e:	bf44      	itt	mi
 8007c40:	232b      	movmi	r3, #43	@ 0x2b
 8007c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4c:	d015      	beq.n	8007c7a <_svfiprintf_r+0xfa>
 8007c4e:	9a07      	ldr	r2, [sp, #28]
 8007c50:	4654      	mov	r4, sl
 8007c52:	2000      	movs	r0, #0
 8007c54:	f04f 0c0a 	mov.w	ip, #10
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5e:	3b30      	subs	r3, #48	@ 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d94b      	bls.n	8007cfc <_svfiprintf_r+0x17c>
 8007c64:	b1b0      	cbz	r0, 8007c94 <_svfiprintf_r+0x114>
 8007c66:	9207      	str	r2, [sp, #28]
 8007c68:	e014      	b.n	8007c94 <_svfiprintf_r+0x114>
 8007c6a:	eba0 0308 	sub.w	r3, r0, r8
 8007c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c72:	4313      	orrs	r3, r2
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	46a2      	mov	sl, r4
 8007c78:	e7d2      	b.n	8007c20 <_svfiprintf_r+0xa0>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	1d19      	adds	r1, r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	9103      	str	r1, [sp, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfbb      	ittet	lt
 8007c86:	425b      	neglt	r3, r3
 8007c88:	f042 0202 	orrlt.w	r2, r2, #2
 8007c8c:	9307      	strge	r3, [sp, #28]
 8007c8e:	9307      	strlt	r3, [sp, #28]
 8007c90:	bfb8      	it	lt
 8007c92:	9204      	strlt	r2, [sp, #16]
 8007c94:	7823      	ldrb	r3, [r4, #0]
 8007c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c98:	d10a      	bne.n	8007cb0 <_svfiprintf_r+0x130>
 8007c9a:	7863      	ldrb	r3, [r4, #1]
 8007c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9e:	d132      	bne.n	8007d06 <_svfiprintf_r+0x186>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	9203      	str	r2, [sp, #12]
 8007ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cac:	3402      	adds	r4, #2
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d74 <_svfiprintf_r+0x1f4>
 8007cb4:	7821      	ldrb	r1, [r4, #0]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7f8 fa91 	bl	80001e0 <memchr>
 8007cbe:	b138      	cbz	r0, 8007cd0 <_svfiprintf_r+0x150>
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	eba0 000a 	sub.w	r0, r0, sl
 8007cc6:	2240      	movs	r2, #64	@ 0x40
 8007cc8:	4082      	lsls	r2, r0
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	3401      	adds	r4, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd4:	4824      	ldr	r0, [pc, #144]	@ (8007d68 <_svfiprintf_r+0x1e8>)
 8007cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cda:	2206      	movs	r2, #6
 8007cdc:	f7f8 fa80 	bl	80001e0 <memchr>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d036      	beq.n	8007d52 <_svfiprintf_r+0x1d2>
 8007ce4:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <_svfiprintf_r+0x1ec>)
 8007ce6:	bb1b      	cbnz	r3, 8007d30 <_svfiprintf_r+0x1b0>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	3307      	adds	r3, #7
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	4433      	add	r3, r6
 8007cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfa:	e76a      	b.n	8007bd2 <_svfiprintf_r+0x52>
 8007cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d00:	460c      	mov	r4, r1
 8007d02:	2001      	movs	r0, #1
 8007d04:	e7a8      	b.n	8007c58 <_svfiprintf_r+0xd8>
 8007d06:	2300      	movs	r3, #0
 8007d08:	3401      	adds	r4, #1
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f04f 0c0a 	mov.w	ip, #10
 8007d12:	4620      	mov	r0, r4
 8007d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d18:	3a30      	subs	r2, #48	@ 0x30
 8007d1a:	2a09      	cmp	r2, #9
 8007d1c:	d903      	bls.n	8007d26 <_svfiprintf_r+0x1a6>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0c6      	beq.n	8007cb0 <_svfiprintf_r+0x130>
 8007d22:	9105      	str	r1, [sp, #20]
 8007d24:	e7c4      	b.n	8007cb0 <_svfiprintf_r+0x130>
 8007d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e7f0      	b.n	8007d12 <_svfiprintf_r+0x192>
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <_svfiprintf_r+0x1f0>)
 8007d38:	a904      	add	r1, sp, #16
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7fd ff1e 	bl	8005b7c <_printf_float>
 8007d40:	1c42      	adds	r2, r0, #1
 8007d42:	4606      	mov	r6, r0
 8007d44:	d1d6      	bne.n	8007cf4 <_svfiprintf_r+0x174>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	065b      	lsls	r3, r3, #25
 8007d4a:	f53f af2d 	bmi.w	8007ba8 <_svfiprintf_r+0x28>
 8007d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d50:	e72c      	b.n	8007bac <_svfiprintf_r+0x2c>
 8007d52:	ab03      	add	r3, sp, #12
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	462a      	mov	r2, r5
 8007d58:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <_svfiprintf_r+0x1f0>)
 8007d5a:	a904      	add	r1, sp, #16
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7fe f9a5 	bl	80060ac <_printf_i>
 8007d62:	e7ed      	b.n	8007d40 <_svfiprintf_r+0x1c0>
 8007d64:	08008da8 	.word	0x08008da8
 8007d68:	08008db2 	.word	0x08008db2
 8007d6c:	08005b7d 	.word	0x08005b7d
 8007d70:	08007ac9 	.word	0x08007ac9
 8007d74:	08008dae 	.word	0x08008dae

08007d78 <__sflush_r>:
 8007d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	0716      	lsls	r6, r2, #28
 8007d82:	4605      	mov	r5, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	d454      	bmi.n	8007e32 <__sflush_r+0xba>
 8007d88:	684b      	ldr	r3, [r1, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	dc02      	bgt.n	8007d94 <__sflush_r+0x1c>
 8007d8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dd48      	ble.n	8007e26 <__sflush_r+0xae>
 8007d94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	d045      	beq.n	8007e26 <__sflush_r+0xae>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007da0:	682f      	ldr	r7, [r5, #0]
 8007da2:	6a21      	ldr	r1, [r4, #32]
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	d030      	beq.n	8007e0a <__sflush_r+0x92>
 8007da8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	0759      	lsls	r1, r3, #29
 8007dae:	d505      	bpl.n	8007dbc <__sflush_r+0x44>
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007db6:	b10b      	cbz	r3, 8007dbc <__sflush_r+0x44>
 8007db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dc0:	6a21      	ldr	r1, [r4, #32]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b0      	blx	r6
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	d106      	bne.n	8007dda <__sflush_r+0x62>
 8007dcc:	6829      	ldr	r1, [r5, #0]
 8007dce:	291d      	cmp	r1, #29
 8007dd0:	d82b      	bhi.n	8007e2a <__sflush_r+0xb2>
 8007dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e7c <__sflush_r+0x104>)
 8007dd4:	410a      	asrs	r2, r1
 8007dd6:	07d6      	lsls	r6, r2, #31
 8007dd8:	d427      	bmi.n	8007e2a <__sflush_r+0xb2>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	6062      	str	r2, [r4, #4]
 8007dde:	04d9      	lsls	r1, r3, #19
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	6022      	str	r2, [r4, #0]
 8007de4:	d504      	bpl.n	8007df0 <__sflush_r+0x78>
 8007de6:	1c42      	adds	r2, r0, #1
 8007de8:	d101      	bne.n	8007dee <__sflush_r+0x76>
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	b903      	cbnz	r3, 8007df0 <__sflush_r+0x78>
 8007dee:	6560      	str	r0, [r4, #84]	@ 0x54
 8007df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007df2:	602f      	str	r7, [r5, #0]
 8007df4:	b1b9      	cbz	r1, 8007e26 <__sflush_r+0xae>
 8007df6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d002      	beq.n	8007e04 <__sflush_r+0x8c>
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7ff fa96 	bl	8007330 <_free_r>
 8007e04:	2300      	movs	r3, #0
 8007e06:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e08:	e00d      	b.n	8007e26 <__sflush_r+0xae>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b0      	blx	r6
 8007e10:	4602      	mov	r2, r0
 8007e12:	1c50      	adds	r0, r2, #1
 8007e14:	d1c9      	bne.n	8007daa <__sflush_r+0x32>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0c6      	beq.n	8007daa <__sflush_r+0x32>
 8007e1c:	2b1d      	cmp	r3, #29
 8007e1e:	d001      	beq.n	8007e24 <__sflush_r+0xac>
 8007e20:	2b16      	cmp	r3, #22
 8007e22:	d11e      	bne.n	8007e62 <__sflush_r+0xea>
 8007e24:	602f      	str	r7, [r5, #0]
 8007e26:	2000      	movs	r0, #0
 8007e28:	e022      	b.n	8007e70 <__sflush_r+0xf8>
 8007e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e2e:	b21b      	sxth	r3, r3
 8007e30:	e01b      	b.n	8007e6a <__sflush_r+0xf2>
 8007e32:	690f      	ldr	r7, [r1, #16]
 8007e34:	2f00      	cmp	r7, #0
 8007e36:	d0f6      	beq.n	8007e26 <__sflush_r+0xae>
 8007e38:	0793      	lsls	r3, r2, #30
 8007e3a:	680e      	ldr	r6, [r1, #0]
 8007e3c:	bf08      	it	eq
 8007e3e:	694b      	ldreq	r3, [r1, #20]
 8007e40:	600f      	str	r7, [r1, #0]
 8007e42:	bf18      	it	ne
 8007e44:	2300      	movne	r3, #0
 8007e46:	eba6 0807 	sub.w	r8, r6, r7
 8007e4a:	608b      	str	r3, [r1, #8]
 8007e4c:	f1b8 0f00 	cmp.w	r8, #0
 8007e50:	dde9      	ble.n	8007e26 <__sflush_r+0xae>
 8007e52:	6a21      	ldr	r1, [r4, #32]
 8007e54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e56:	4643      	mov	r3, r8
 8007e58:	463a      	mov	r2, r7
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b0      	blx	r6
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	dc08      	bgt.n	8007e74 <__sflush_r+0xfc>
 8007e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e74:	4407      	add	r7, r0
 8007e76:	eba8 0800 	sub.w	r8, r8, r0
 8007e7a:	e7e7      	b.n	8007e4c <__sflush_r+0xd4>
 8007e7c:	dfbffffe 	.word	0xdfbffffe

08007e80 <_fflush_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	690b      	ldr	r3, [r1, #16]
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	b913      	cbnz	r3, 8007e90 <_fflush_r+0x10>
 8007e8a:	2500      	movs	r5, #0
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	b118      	cbz	r0, 8007e9a <_fflush_r+0x1a>
 8007e92:	6a03      	ldr	r3, [r0, #32]
 8007e94:	b90b      	cbnz	r3, 8007e9a <_fflush_r+0x1a>
 8007e96:	f7fe fab5 	bl	8006404 <__sinit>
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f3      	beq.n	8007e8a <_fflush_r+0xa>
 8007ea2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ea4:	07d0      	lsls	r0, r2, #31
 8007ea6:	d404      	bmi.n	8007eb2 <_fflush_r+0x32>
 8007ea8:	0599      	lsls	r1, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_fflush_r+0x32>
 8007eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eae:	f7fe fbd0 	bl	8006652 <__retarget_lock_acquire_recursive>
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	f7ff ff5f 	bl	8007d78 <__sflush_r>
 8007eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ebc:	07da      	lsls	r2, r3, #31
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	d4e4      	bmi.n	8007e8c <_fflush_r+0xc>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	059b      	lsls	r3, r3, #22
 8007ec6:	d4e1      	bmi.n	8007e8c <_fflush_r+0xc>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eca:	f7fe fbc3 	bl	8006654 <__retarget_lock_release_recursive>
 8007ece:	e7dd      	b.n	8007e8c <_fflush_r+0xc>

08007ed0 <fiprintf>:
 8007ed0:	b40e      	push	{r1, r2, r3}
 8007ed2:	b503      	push	{r0, r1, lr}
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	4805      	ldr	r0, [pc, #20]	@ (8007ef0 <fiprintf+0x20>)
 8007eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ede:	6800      	ldr	r0, [r0, #0]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	f000 f8c1 	bl	8008068 <_vfiprintf_r>
 8007ee6:	b002      	add	sp, #8
 8007ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eec:	b003      	add	sp, #12
 8007eee:	4770      	bx	lr
 8007ef0:	20000090 	.word	0x20000090

08007ef4 <memmove>:
 8007ef4:	4288      	cmp	r0, r1
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	eb01 0402 	add.w	r4, r1, r2
 8007efc:	d902      	bls.n	8007f04 <memmove+0x10>
 8007efe:	4284      	cmp	r4, r0
 8007f00:	4623      	mov	r3, r4
 8007f02:	d807      	bhi.n	8007f14 <memmove+0x20>
 8007f04:	1e43      	subs	r3, r0, #1
 8007f06:	42a1      	cmp	r1, r4
 8007f08:	d008      	beq.n	8007f1c <memmove+0x28>
 8007f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f12:	e7f8      	b.n	8007f06 <memmove+0x12>
 8007f14:	4402      	add	r2, r0
 8007f16:	4601      	mov	r1, r0
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	d100      	bne.n	8007f1e <memmove+0x2a>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f26:	e7f7      	b.n	8007f18 <memmove+0x24>

08007f28 <memcpy>:
 8007f28:	440a      	add	r2, r1
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f30:	d100      	bne.n	8007f34 <memcpy+0xc>
 8007f32:	4770      	bx	lr
 8007f34:	b510      	push	{r4, lr}
 8007f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	d1f9      	bne.n	8007f36 <memcpy+0xe>
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <abort>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	2006      	movs	r0, #6
 8007f48:	f000 fa62 	bl	8008410 <raise>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7fa f97d 	bl	800224c <_exit>

08007f52 <_calloc_r>:
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	fba1 5402 	umull	r5, r4, r1, r2
 8007f58:	b93c      	cbnz	r4, 8007f6a <_calloc_r+0x18>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7fd fca4 	bl	80058a8 <_malloc_r>
 8007f60:	4606      	mov	r6, r0
 8007f62:	b928      	cbnz	r0, 8007f70 <_calloc_r+0x1e>
 8007f64:	2600      	movs	r6, #0
 8007f66:	4630      	mov	r0, r6
 8007f68:	bd70      	pop	{r4, r5, r6, pc}
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	6002      	str	r2, [r0, #0]
 8007f6e:	e7f9      	b.n	8007f64 <_calloc_r+0x12>
 8007f70:	462a      	mov	r2, r5
 8007f72:	4621      	mov	r1, r4
 8007f74:	f7fe fadf 	bl	8006536 <memset>
 8007f78:	e7f5      	b.n	8007f66 <_calloc_r+0x14>

08007f7a <__ascii_mbtowc>:
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	b901      	cbnz	r1, 8007f80 <__ascii_mbtowc+0x6>
 8007f7e:	a901      	add	r1, sp, #4
 8007f80:	b142      	cbz	r2, 8007f94 <__ascii_mbtowc+0x1a>
 8007f82:	b14b      	cbz	r3, 8007f98 <__ascii_mbtowc+0x1e>
 8007f84:	7813      	ldrb	r3, [r2, #0]
 8007f86:	600b      	str	r3, [r1, #0]
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	1e10      	subs	r0, r2, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2001      	movne	r0, #1
 8007f90:	b002      	add	sp, #8
 8007f92:	4770      	bx	lr
 8007f94:	4610      	mov	r0, r2
 8007f96:	e7fb      	b.n	8007f90 <__ascii_mbtowc+0x16>
 8007f98:	f06f 0001 	mvn.w	r0, #1
 8007f9c:	e7f8      	b.n	8007f90 <__ascii_mbtowc+0x16>

08007f9e <_realloc_r>:
 8007f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	4615      	mov	r5, r2
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	b921      	cbnz	r1, 8007fb4 <_realloc_r+0x16>
 8007faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	4611      	mov	r1, r2
 8007fb0:	f7fd bc7a 	b.w	80058a8 <_malloc_r>
 8007fb4:	b92a      	cbnz	r2, 8007fc2 <_realloc_r+0x24>
 8007fb6:	f7ff f9bb 	bl	8007330 <_free_r>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc2:	f000 fa41 	bl	8008448 <_malloc_usable_size_r>
 8007fc6:	4285      	cmp	r5, r0
 8007fc8:	4606      	mov	r6, r0
 8007fca:	d802      	bhi.n	8007fd2 <_realloc_r+0x34>
 8007fcc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fd0:	d8f4      	bhi.n	8007fbc <_realloc_r+0x1e>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	f7fd fc67 	bl	80058a8 <_malloc_r>
 8007fda:	4607      	mov	r7, r0
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0ec      	beq.n	8007fba <_realloc_r+0x1c>
 8007fe0:	42b5      	cmp	r5, r6
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	bf28      	it	cs
 8007fe8:	4632      	movcs	r2, r6
 8007fea:	f7ff ff9d 	bl	8007f28 <memcpy>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	f7ff f99d 	bl	8007330 <_free_r>
 8007ff6:	463c      	mov	r4, r7
 8007ff8:	e7e0      	b.n	8007fbc <_realloc_r+0x1e>

08007ffa <__ascii_wctomb>:
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	b141      	cbz	r1, 8008012 <__ascii_wctomb+0x18>
 8008000:	2aff      	cmp	r2, #255	@ 0xff
 8008002:	d904      	bls.n	800800e <__ascii_wctomb+0x14>
 8008004:	228a      	movs	r2, #138	@ 0x8a
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	4770      	bx	lr
 800800e:	700a      	strb	r2, [r1, #0]
 8008010:	2001      	movs	r0, #1
 8008012:	4770      	bx	lr

08008014 <__sfputc_r>:
 8008014:	6893      	ldr	r3, [r2, #8]
 8008016:	3b01      	subs	r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	b410      	push	{r4}
 800801c:	6093      	str	r3, [r2, #8]
 800801e:	da08      	bge.n	8008032 <__sfputc_r+0x1e>
 8008020:	6994      	ldr	r4, [r2, #24]
 8008022:	42a3      	cmp	r3, r4
 8008024:	db01      	blt.n	800802a <__sfputc_r+0x16>
 8008026:	290a      	cmp	r1, #10
 8008028:	d103      	bne.n	8008032 <__sfputc_r+0x1e>
 800802a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800802e:	f000 b933 	b.w	8008298 <__swbuf_r>
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	1c58      	adds	r0, r3, #1
 8008036:	6010      	str	r0, [r2, #0]
 8008038:	7019      	strb	r1, [r3, #0]
 800803a:	4608      	mov	r0, r1
 800803c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008040:	4770      	bx	lr

08008042 <__sfputs_r>:
 8008042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	4614      	mov	r4, r2
 800804a:	18d5      	adds	r5, r2, r3
 800804c:	42ac      	cmp	r4, r5
 800804e:	d101      	bne.n	8008054 <__sfputs_r+0x12>
 8008050:	2000      	movs	r0, #0
 8008052:	e007      	b.n	8008064 <__sfputs_r+0x22>
 8008054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008058:	463a      	mov	r2, r7
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff ffda 	bl	8008014 <__sfputc_r>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d1f3      	bne.n	800804c <__sfputs_r+0xa>
 8008064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008068 <_vfiprintf_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	460d      	mov	r5, r1
 800806e:	b09d      	sub	sp, #116	@ 0x74
 8008070:	4614      	mov	r4, r2
 8008072:	4698      	mov	r8, r3
 8008074:	4606      	mov	r6, r0
 8008076:	b118      	cbz	r0, 8008080 <_vfiprintf_r+0x18>
 8008078:	6a03      	ldr	r3, [r0, #32]
 800807a:	b90b      	cbnz	r3, 8008080 <_vfiprintf_r+0x18>
 800807c:	f7fe f9c2 	bl	8006404 <__sinit>
 8008080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	d405      	bmi.n	8008092 <_vfiprintf_r+0x2a>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	059a      	lsls	r2, r3, #22
 800808a:	d402      	bmi.n	8008092 <_vfiprintf_r+0x2a>
 800808c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800808e:	f7fe fae0 	bl	8006652 <__retarget_lock_acquire_recursive>
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	071b      	lsls	r3, r3, #28
 8008096:	d501      	bpl.n	800809c <_vfiprintf_r+0x34>
 8008098:	692b      	ldr	r3, [r5, #16]
 800809a:	b99b      	cbnz	r3, 80080c4 <_vfiprintf_r+0x5c>
 800809c:	4629      	mov	r1, r5
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 f938 	bl	8008314 <__swsetup_r>
 80080a4:	b170      	cbz	r0, 80080c4 <_vfiprintf_r+0x5c>
 80080a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080a8:	07dc      	lsls	r4, r3, #31
 80080aa:	d504      	bpl.n	80080b6 <_vfiprintf_r+0x4e>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	b01d      	add	sp, #116	@ 0x74
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	0598      	lsls	r0, r3, #22
 80080ba:	d4f7      	bmi.n	80080ac <_vfiprintf_r+0x44>
 80080bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080be:	f7fe fac9 	bl	8006654 <__retarget_lock_release_recursive>
 80080c2:	e7f3      	b.n	80080ac <_vfiprintf_r+0x44>
 80080c4:	2300      	movs	r3, #0
 80080c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c8:	2320      	movs	r3, #32
 80080ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d2:	2330      	movs	r3, #48	@ 0x30
 80080d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008284 <_vfiprintf_r+0x21c>
 80080d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080dc:	f04f 0901 	mov.w	r9, #1
 80080e0:	4623      	mov	r3, r4
 80080e2:	469a      	mov	sl, r3
 80080e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e8:	b10a      	cbz	r2, 80080ee <_vfiprintf_r+0x86>
 80080ea:	2a25      	cmp	r2, #37	@ 0x25
 80080ec:	d1f9      	bne.n	80080e2 <_vfiprintf_r+0x7a>
 80080ee:	ebba 0b04 	subs.w	fp, sl, r4
 80080f2:	d00b      	beq.n	800810c <_vfiprintf_r+0xa4>
 80080f4:	465b      	mov	r3, fp
 80080f6:	4622      	mov	r2, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff ffa1 	bl	8008042 <__sfputs_r>
 8008100:	3001      	adds	r0, #1
 8008102:	f000 80a7 	beq.w	8008254 <_vfiprintf_r+0x1ec>
 8008106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008108:	445a      	add	r2, fp
 800810a:	9209      	str	r2, [sp, #36]	@ 0x24
 800810c:	f89a 3000 	ldrb.w	r3, [sl]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 809f 	beq.w	8008254 <_vfiprintf_r+0x1ec>
 8008116:	2300      	movs	r3, #0
 8008118:	f04f 32ff 	mov.w	r2, #4294967295
 800811c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008120:	f10a 0a01 	add.w	sl, sl, #1
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800812c:	931a      	str	r3, [sp, #104]	@ 0x68
 800812e:	4654      	mov	r4, sl
 8008130:	2205      	movs	r2, #5
 8008132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008136:	4853      	ldr	r0, [pc, #332]	@ (8008284 <_vfiprintf_r+0x21c>)
 8008138:	f7f8 f852 	bl	80001e0 <memchr>
 800813c:	9a04      	ldr	r2, [sp, #16]
 800813e:	b9d8      	cbnz	r0, 8008178 <_vfiprintf_r+0x110>
 8008140:	06d1      	lsls	r1, r2, #27
 8008142:	bf44      	itt	mi
 8008144:	2320      	movmi	r3, #32
 8008146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800814a:	0713      	lsls	r3, r2, #28
 800814c:	bf44      	itt	mi
 800814e:	232b      	movmi	r3, #43	@ 0x2b
 8008150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008154:	f89a 3000 	ldrb.w	r3, [sl]
 8008158:	2b2a      	cmp	r3, #42	@ 0x2a
 800815a:	d015      	beq.n	8008188 <_vfiprintf_r+0x120>
 800815c:	9a07      	ldr	r2, [sp, #28]
 800815e:	4654      	mov	r4, sl
 8008160:	2000      	movs	r0, #0
 8008162:	f04f 0c0a 	mov.w	ip, #10
 8008166:	4621      	mov	r1, r4
 8008168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800816c:	3b30      	subs	r3, #48	@ 0x30
 800816e:	2b09      	cmp	r3, #9
 8008170:	d94b      	bls.n	800820a <_vfiprintf_r+0x1a2>
 8008172:	b1b0      	cbz	r0, 80081a2 <_vfiprintf_r+0x13a>
 8008174:	9207      	str	r2, [sp, #28]
 8008176:	e014      	b.n	80081a2 <_vfiprintf_r+0x13a>
 8008178:	eba0 0308 	sub.w	r3, r0, r8
 800817c:	fa09 f303 	lsl.w	r3, r9, r3
 8008180:	4313      	orrs	r3, r2
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	46a2      	mov	sl, r4
 8008186:	e7d2      	b.n	800812e <_vfiprintf_r+0xc6>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	1d19      	adds	r1, r3, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	9103      	str	r1, [sp, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfbb      	ittet	lt
 8008194:	425b      	neglt	r3, r3
 8008196:	f042 0202 	orrlt.w	r2, r2, #2
 800819a:	9307      	strge	r3, [sp, #28]
 800819c:	9307      	strlt	r3, [sp, #28]
 800819e:	bfb8      	it	lt
 80081a0:	9204      	strlt	r2, [sp, #16]
 80081a2:	7823      	ldrb	r3, [r4, #0]
 80081a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80081a6:	d10a      	bne.n	80081be <_vfiprintf_r+0x156>
 80081a8:	7863      	ldrb	r3, [r4, #1]
 80081aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ac:	d132      	bne.n	8008214 <_vfiprintf_r+0x1ac>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	1d1a      	adds	r2, r3, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	9203      	str	r2, [sp, #12]
 80081b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ba:	3402      	adds	r4, #2
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008294 <_vfiprintf_r+0x22c>
 80081c2:	7821      	ldrb	r1, [r4, #0]
 80081c4:	2203      	movs	r2, #3
 80081c6:	4650      	mov	r0, sl
 80081c8:	f7f8 f80a 	bl	80001e0 <memchr>
 80081cc:	b138      	cbz	r0, 80081de <_vfiprintf_r+0x176>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	eba0 000a 	sub.w	r0, r0, sl
 80081d4:	2240      	movs	r2, #64	@ 0x40
 80081d6:	4082      	lsls	r2, r0
 80081d8:	4313      	orrs	r3, r2
 80081da:	3401      	adds	r4, #1
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	4829      	ldr	r0, [pc, #164]	@ (8008288 <_vfiprintf_r+0x220>)
 80081e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081e8:	2206      	movs	r2, #6
 80081ea:	f7f7 fff9 	bl	80001e0 <memchr>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d03f      	beq.n	8008272 <_vfiprintf_r+0x20a>
 80081f2:	4b26      	ldr	r3, [pc, #152]	@ (800828c <_vfiprintf_r+0x224>)
 80081f4:	bb1b      	cbnz	r3, 800823e <_vfiprintf_r+0x1d6>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	3307      	adds	r3, #7
 80081fa:	f023 0307 	bic.w	r3, r3, #7
 80081fe:	3308      	adds	r3, #8
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008204:	443b      	add	r3, r7
 8008206:	9309      	str	r3, [sp, #36]	@ 0x24
 8008208:	e76a      	b.n	80080e0 <_vfiprintf_r+0x78>
 800820a:	fb0c 3202 	mla	r2, ip, r2, r3
 800820e:	460c      	mov	r4, r1
 8008210:	2001      	movs	r0, #1
 8008212:	e7a8      	b.n	8008166 <_vfiprintf_r+0xfe>
 8008214:	2300      	movs	r3, #0
 8008216:	3401      	adds	r4, #1
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	4619      	mov	r1, r3
 800821c:	f04f 0c0a 	mov.w	ip, #10
 8008220:	4620      	mov	r0, r4
 8008222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008226:	3a30      	subs	r2, #48	@ 0x30
 8008228:	2a09      	cmp	r2, #9
 800822a:	d903      	bls.n	8008234 <_vfiprintf_r+0x1cc>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0c6      	beq.n	80081be <_vfiprintf_r+0x156>
 8008230:	9105      	str	r1, [sp, #20]
 8008232:	e7c4      	b.n	80081be <_vfiprintf_r+0x156>
 8008234:	fb0c 2101 	mla	r1, ip, r1, r2
 8008238:	4604      	mov	r4, r0
 800823a:	2301      	movs	r3, #1
 800823c:	e7f0      	b.n	8008220 <_vfiprintf_r+0x1b8>
 800823e:	ab03      	add	r3, sp, #12
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	462a      	mov	r2, r5
 8008244:	4b12      	ldr	r3, [pc, #72]	@ (8008290 <_vfiprintf_r+0x228>)
 8008246:	a904      	add	r1, sp, #16
 8008248:	4630      	mov	r0, r6
 800824a:	f7fd fc97 	bl	8005b7c <_printf_float>
 800824e:	4607      	mov	r7, r0
 8008250:	1c78      	adds	r0, r7, #1
 8008252:	d1d6      	bne.n	8008202 <_vfiprintf_r+0x19a>
 8008254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	d405      	bmi.n	8008266 <_vfiprintf_r+0x1fe>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	059a      	lsls	r2, r3, #22
 800825e:	d402      	bmi.n	8008266 <_vfiprintf_r+0x1fe>
 8008260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008262:	f7fe f9f7 	bl	8006654 <__retarget_lock_release_recursive>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	065b      	lsls	r3, r3, #25
 800826a:	f53f af1f 	bmi.w	80080ac <_vfiprintf_r+0x44>
 800826e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008270:	e71e      	b.n	80080b0 <_vfiprintf_r+0x48>
 8008272:	ab03      	add	r3, sp, #12
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	462a      	mov	r2, r5
 8008278:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <_vfiprintf_r+0x228>)
 800827a:	a904      	add	r1, sp, #16
 800827c:	4630      	mov	r0, r6
 800827e:	f7fd ff15 	bl	80060ac <_printf_i>
 8008282:	e7e4      	b.n	800824e <_vfiprintf_r+0x1e6>
 8008284:	08008da8 	.word	0x08008da8
 8008288:	08008db2 	.word	0x08008db2
 800828c:	08005b7d 	.word	0x08005b7d
 8008290:	08008043 	.word	0x08008043
 8008294:	08008dae 	.word	0x08008dae

08008298 <__swbuf_r>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	460e      	mov	r6, r1
 800829c:	4614      	mov	r4, r2
 800829e:	4605      	mov	r5, r0
 80082a0:	b118      	cbz	r0, 80082aa <__swbuf_r+0x12>
 80082a2:	6a03      	ldr	r3, [r0, #32]
 80082a4:	b90b      	cbnz	r3, 80082aa <__swbuf_r+0x12>
 80082a6:	f7fe f8ad 	bl	8006404 <__sinit>
 80082aa:	69a3      	ldr	r3, [r4, #24]
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	071a      	lsls	r2, r3, #28
 80082b2:	d501      	bpl.n	80082b8 <__swbuf_r+0x20>
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	b943      	cbnz	r3, 80082ca <__swbuf_r+0x32>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f82a 	bl	8008314 <__swsetup_r>
 80082c0:	b118      	cbz	r0, 80082ca <__swbuf_r+0x32>
 80082c2:	f04f 37ff 	mov.w	r7, #4294967295
 80082c6:	4638      	mov	r0, r7
 80082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	1a98      	subs	r0, r3, r2
 80082d0:	6963      	ldr	r3, [r4, #20]
 80082d2:	b2f6      	uxtb	r6, r6
 80082d4:	4283      	cmp	r3, r0
 80082d6:	4637      	mov	r7, r6
 80082d8:	dc05      	bgt.n	80082e6 <__swbuf_r+0x4e>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff fdcf 	bl	8007e80 <_fflush_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d1ed      	bne.n	80082c2 <__swbuf_r+0x2a>
 80082e6:	68a3      	ldr	r3, [r4, #8]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	6022      	str	r2, [r4, #0]
 80082f2:	701e      	strb	r6, [r3, #0]
 80082f4:	6962      	ldr	r2, [r4, #20]
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d004      	beq.n	8008306 <__swbuf_r+0x6e>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	07db      	lsls	r3, r3, #31
 8008300:	d5e1      	bpl.n	80082c6 <__swbuf_r+0x2e>
 8008302:	2e0a      	cmp	r6, #10
 8008304:	d1df      	bne.n	80082c6 <__swbuf_r+0x2e>
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f7ff fdb9 	bl	8007e80 <_fflush_r>
 800830e:	2800      	cmp	r0, #0
 8008310:	d0d9      	beq.n	80082c6 <__swbuf_r+0x2e>
 8008312:	e7d6      	b.n	80082c2 <__swbuf_r+0x2a>

08008314 <__swsetup_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4b29      	ldr	r3, [pc, #164]	@ (80083bc <__swsetup_r+0xa8>)
 8008318:	4605      	mov	r5, r0
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	460c      	mov	r4, r1
 800831e:	b118      	cbz	r0, 8008328 <__swsetup_r+0x14>
 8008320:	6a03      	ldr	r3, [r0, #32]
 8008322:	b90b      	cbnz	r3, 8008328 <__swsetup_r+0x14>
 8008324:	f7fe f86e 	bl	8006404 <__sinit>
 8008328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832c:	0719      	lsls	r1, r3, #28
 800832e:	d422      	bmi.n	8008376 <__swsetup_r+0x62>
 8008330:	06da      	lsls	r2, r3, #27
 8008332:	d407      	bmi.n	8008344 <__swsetup_r+0x30>
 8008334:	2209      	movs	r2, #9
 8008336:	602a      	str	r2, [r5, #0]
 8008338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	e033      	b.n	80083ac <__swsetup_r+0x98>
 8008344:	0758      	lsls	r0, r3, #29
 8008346:	d512      	bpl.n	800836e <__swsetup_r+0x5a>
 8008348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834a:	b141      	cbz	r1, 800835e <__swsetup_r+0x4a>
 800834c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008350:	4299      	cmp	r1, r3
 8008352:	d002      	beq.n	800835a <__swsetup_r+0x46>
 8008354:	4628      	mov	r0, r5
 8008356:	f7fe ffeb 	bl	8007330 <_free_r>
 800835a:	2300      	movs	r3, #0
 800835c:	6363      	str	r3, [r4, #52]	@ 0x34
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	2300      	movs	r3, #0
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f043 0308 	orr.w	r3, r3, #8
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	b94b      	cbnz	r3, 800838e <__swsetup_r+0x7a>
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008384:	d003      	beq.n	800838e <__swsetup_r+0x7a>
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f88b 	bl	80084a4 <__smakebuf_r>
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	f013 0201 	ands.w	r2, r3, #1
 8008396:	d00a      	beq.n	80083ae <__swsetup_r+0x9a>
 8008398:	2200      	movs	r2, #0
 800839a:	60a2      	str	r2, [r4, #8]
 800839c:	6962      	ldr	r2, [r4, #20]
 800839e:	4252      	negs	r2, r2
 80083a0:	61a2      	str	r2, [r4, #24]
 80083a2:	6922      	ldr	r2, [r4, #16]
 80083a4:	b942      	cbnz	r2, 80083b8 <__swsetup_r+0xa4>
 80083a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083aa:	d1c5      	bne.n	8008338 <__swsetup_r+0x24>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	0799      	lsls	r1, r3, #30
 80083b0:	bf58      	it	pl
 80083b2:	6962      	ldrpl	r2, [r4, #20]
 80083b4:	60a2      	str	r2, [r4, #8]
 80083b6:	e7f4      	b.n	80083a2 <__swsetup_r+0x8e>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7f7      	b.n	80083ac <__swsetup_r+0x98>
 80083bc:	20000090 	.word	0x20000090

080083c0 <_raise_r>:
 80083c0:	291f      	cmp	r1, #31
 80083c2:	b538      	push	{r3, r4, r5, lr}
 80083c4:	4605      	mov	r5, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	d904      	bls.n	80083d4 <_raise_r+0x14>
 80083ca:	2316      	movs	r3, #22
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	f04f 30ff 	mov.w	r0, #4294967295
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083d6:	b112      	cbz	r2, 80083de <_raise_r+0x1e>
 80083d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083dc:	b94b      	cbnz	r3, 80083f2 <_raise_r+0x32>
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f830 	bl	8008444 <_getpid_r>
 80083e4:	4622      	mov	r2, r4
 80083e6:	4601      	mov	r1, r0
 80083e8:	4628      	mov	r0, r5
 80083ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ee:	f000 b817 	b.w	8008420 <_kill_r>
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d00a      	beq.n	800840c <_raise_r+0x4c>
 80083f6:	1c59      	adds	r1, r3, #1
 80083f8:	d103      	bne.n	8008402 <_raise_r+0x42>
 80083fa:	2316      	movs	r3, #22
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	2001      	movs	r0, #1
 8008400:	e7e7      	b.n	80083d2 <_raise_r+0x12>
 8008402:	2100      	movs	r1, #0
 8008404:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008408:	4620      	mov	r0, r4
 800840a:	4798      	blx	r3
 800840c:	2000      	movs	r0, #0
 800840e:	e7e0      	b.n	80083d2 <_raise_r+0x12>

08008410 <raise>:
 8008410:	4b02      	ldr	r3, [pc, #8]	@ (800841c <raise+0xc>)
 8008412:	4601      	mov	r1, r0
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	f7ff bfd3 	b.w	80083c0 <_raise_r>
 800841a:	bf00      	nop
 800841c:	20000090 	.word	0x20000090

08008420 <_kill_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	@ (8008440 <_kill_r+0x20>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f7f9 fefd 	bl	800222c <_kill>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d102      	bne.n	800843c <_kill_r+0x1c>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b103      	cbz	r3, 800843c <_kill_r+0x1c>
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	bf00      	nop
 8008440:	20000590 	.word	0x20000590

08008444 <_getpid_r>:
 8008444:	f7f9 beea 	b.w	800221c <_getpid>

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <__swhatbuf_r>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	460c      	mov	r4, r1
 800845c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008460:	2900      	cmp	r1, #0
 8008462:	b096      	sub	sp, #88	@ 0x58
 8008464:	4615      	mov	r5, r2
 8008466:	461e      	mov	r6, r3
 8008468:	da0d      	bge.n	8008486 <__swhatbuf_r+0x2e>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008470:	f04f 0100 	mov.w	r1, #0
 8008474:	bf14      	ite	ne
 8008476:	2340      	movne	r3, #64	@ 0x40
 8008478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800847c:	2000      	movs	r0, #0
 800847e:	6031      	str	r1, [r6, #0]
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	b016      	add	sp, #88	@ 0x58
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	466a      	mov	r2, sp
 8008488:	f000 f848 	bl	800851c <_fstat_r>
 800848c:	2800      	cmp	r0, #0
 800848e:	dbec      	blt.n	800846a <__swhatbuf_r+0x12>
 8008490:	9901      	ldr	r1, [sp, #4]
 8008492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800849a:	4259      	negs	r1, r3
 800849c:	4159      	adcs	r1, r3
 800849e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084a2:	e7eb      	b.n	800847c <__swhatbuf_r+0x24>

080084a4 <__smakebuf_r>:
 80084a4:	898b      	ldrh	r3, [r1, #12]
 80084a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a8:	079d      	lsls	r5, r3, #30
 80084aa:	4606      	mov	r6, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	d507      	bpl.n	80084c0 <__smakebuf_r+0x1c>
 80084b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	2301      	movs	r3, #1
 80084ba:	6163      	str	r3, [r4, #20]
 80084bc:	b003      	add	sp, #12
 80084be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c0:	ab01      	add	r3, sp, #4
 80084c2:	466a      	mov	r2, sp
 80084c4:	f7ff ffc8 	bl	8008458 <__swhatbuf_r>
 80084c8:	9f00      	ldr	r7, [sp, #0]
 80084ca:	4605      	mov	r5, r0
 80084cc:	4639      	mov	r1, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7fd f9ea 	bl	80058a8 <_malloc_r>
 80084d4:	b948      	cbnz	r0, 80084ea <__smakebuf_r+0x46>
 80084d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084da:	059a      	lsls	r2, r3, #22
 80084dc:	d4ee      	bmi.n	80084bc <__smakebuf_r+0x18>
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	f043 0302 	orr.w	r3, r3, #2
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	e7e2      	b.n	80084b0 <__smakebuf_r+0xc>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	6020      	str	r0, [r4, #0]
 80084ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084fa:	b15b      	cbz	r3, 8008514 <__smakebuf_r+0x70>
 80084fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008500:	4630      	mov	r0, r6
 8008502:	f000 f81d 	bl	8008540 <_isatty_r>
 8008506:	b128      	cbz	r0, 8008514 <__smakebuf_r+0x70>
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	431d      	orrs	r5, r3
 8008518:	81a5      	strh	r5, [r4, #12]
 800851a:	e7cf      	b.n	80084bc <__smakebuf_r+0x18>

0800851c <_fstat_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d07      	ldr	r5, [pc, #28]	@ (800853c <_fstat_r+0x20>)
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	4611      	mov	r1, r2
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	f7f9 fedf 	bl	80022ec <_fstat>
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	d102      	bne.n	8008538 <_fstat_r+0x1c>
 8008532:	682b      	ldr	r3, [r5, #0]
 8008534:	b103      	cbz	r3, 8008538 <_fstat_r+0x1c>
 8008536:	6023      	str	r3, [r4, #0]
 8008538:	bd38      	pop	{r3, r4, r5, pc}
 800853a:	bf00      	nop
 800853c:	20000590 	.word	0x20000590

08008540 <_isatty_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d06      	ldr	r5, [pc, #24]	@ (800855c <_isatty_r+0x1c>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	f7f9 fede 	bl	800230c <_isatty>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_isatty_r+0x1a>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_isatty_r+0x1a>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20000590 	.word	0x20000590

08008560 <_init>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr

0800856c <_fini>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr
