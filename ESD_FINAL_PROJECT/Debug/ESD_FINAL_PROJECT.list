
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f154  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000181c  0800f2f8  0800f2f8  000102f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b14  08010b14  00012268  2**0
                  CONTENTS
  4 .ARM          00000008  08010b14  08010b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b1c  08010b1c  00012268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b1c  08010b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b20  08010b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  08010b24  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001710  20000268  08010d8c  00012268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001978  08010d8c  00012978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017656  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f9  00000000  00000000  000298ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f0d  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcba  00000000  00000000  0002fca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5a3  00000000  00000000  0004b95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f54a  00000000  00000000  0006af02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa44c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a0  00000000  00000000  000fa490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00100530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f2dc 	.word	0x0800f2dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800f2dc 	.word	0x0800f2dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11.h"

uint32_t DWT_Delay_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <DWT_Delay_Init+0x58>)
 8000ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ee2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ee4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ee6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <DWT_Delay_Init+0x5c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000edf0 	.word	0xe000edf0
 8000f04:	e0001000 	.word	0xe0001000

08000f08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <delay+0x40>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f16:	f006 fb57 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <delay+0x44>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9b      	lsrs	r3, r3, #18
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f2c:	bf00      	nop
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <delay+0x40>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f8      	bcc.n	8000f2e <delay+0x26>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e0001000 	.word	0xe0001000
 8000f4c:	431bde83 	.word	0x431bde83

08000f50 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f004 fb9e 	bl	80056c0 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f004 fb80 	bl	80056c0 <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DHT_Start>:


void DHT_Start (void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fcc:	f7ff ff6c 	bl	8000ea8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <DHT_Start+0x40>)
 8000fd4:	f7ff ffbc 	bl	8000f50 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <DHT_Start+0x40>)
 8000fde:	f004 fd0b 	bl	80059f8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fe2:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000fe6:	f7ff ff8f 	bl	8000f08 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <DHT_Start+0x40>)
 8000ff0:	f004 fd02 	bl	80059f8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ff87 	bl	8000f08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DHT_Start+0x40>)
 8000ffe:	f7ff ffc5 	bl	8000f8c <Set_Pin_Input>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020400 	.word	0x40020400

0800100c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f7ff ff76 	bl	8000f08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800101c:	2101      	movs	r1, #1
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <DHT_Check_Response+0x58>)
 8001020:	f004 fcd2 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800102a:	2050      	movs	r0, #80	@ 0x50
 800102c:	f7ff ff6c 	bl	8000f08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001030:	2101      	movs	r1, #1
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <DHT_Check_Response+0x58>)
 8001034:	f004 fcc8 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DHT_Check_Response+0x38>
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001048:	bf00      	nop
 800104a:	2101      	movs	r1, #1
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <DHT_Check_Response+0x58>)
 800104e:	f004 fcbb 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f8      	bne.n	800104a <DHT_Check_Response+0x3e>

	return Response;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	e037      	b.n	80010e4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001074:	bf00      	nop
 8001076:	2101      	movs	r1, #1
 8001078:	481e      	ldr	r0, [pc, #120]	@ (80010f4 <DHT_Read+0x8c>)
 800107a:	f004 fca5 	bl	80059c8 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001084:	2028      	movs	r0, #40	@ 0x28
 8001086:	f7ff ff3f 	bl	8000f08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800108a:	2101      	movs	r1, #1
 800108c:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <DHT_Read+0x8c>)
 800108e:	f004 fc9b 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2201      	movs	r2, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e00b      	b.n	80010ce <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f1c3 0307 	rsb	r3, r3, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010ce:	bf00      	nop
 80010d0:	2101      	movs	r1, #1
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DHT_Read+0x8c>)
 80010d4:	f004 fc78 	bl	80059c8 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f8      	bne.n	80010d0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71bb      	strb	r3, [r7, #6]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d9c4      	bls.n	8001074 <DHT_Read+0xc>
	}
	return i;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001100:	f7ff ff62 	bl	8000fc8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001104:	f7ff ff82 	bl	800100c <DHT_Check_Response>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <DHT_GetData+0xa4>)
 800110e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001110:	f7ff ffaa 	bl	8001068 <DHT_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <DHT_GetData+0xa8>)
 800111a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800111c:	f7ff ffa4 	bl	8001068 <DHT_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <DHT_GetData+0xac>)
 8001126:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001128:	f7ff ff9e 	bl	8001068 <DHT_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <DHT_GetData+0xb0>)
 8001132:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001134:	f7ff ff98 	bl	8001068 <DHT_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <DHT_GetData+0xb4>)
 800113e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001140:	f7ff ff92 	bl	8001068 <DHT_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <DHT_GetData+0xb8>)
 800114a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <DHT_GetData+0xb8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <DHT_GetData+0xa8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <DHT_GetData+0xac>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <DHT_GetData+0xb0>)
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <DHT_GetData+0xb4>)
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4299      	cmp	r1, r3
 800116c:	d111      	bne.n	8001192 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <DHT_GetData+0xb0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <DHT_GetData+0xa8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000028a 	.word	0x2000028a
 80011a0:	20000284 	.word	0x20000284
 80011a4:	20000285 	.word	0x20000285
 80011a8:	20000286 	.word	0x20000286
 80011ac:	20000287 	.word	0x20000287
 80011b0:	20000288 	.word	0x20000288

080011b4 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	is_received=1;
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	2000028c 	.word	0x2000028c

080011d4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011de:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <SELECT+0x1c>)
 80011e0:	f004 fc0a 	bl	80059f8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fdb9 	bl	8004d5c <HAL_Delay>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <DESELECT+0x1c>)
 8001200:	f004 fbfa 	bl	80059f8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f003 fda9 	bl	8004d5c <HAL_Delay>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800121e:	bf00      	nop
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <SPI_TxByte+0x30>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b02      	cmp	r3, #2
 800122c:	d1f8      	bne.n	8001220 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800122e:	1df9      	adds	r1, r7, #7
 8001230:	2364      	movs	r3, #100	@ 0x64
 8001232:	2201      	movs	r2, #1
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <SPI_TxByte+0x30>)
 8001236:	f006 fa84 	bl	8007742 <HAL_SPI_Transmit>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000137c 	.word	0x2000137c

08001248 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001254:	bf00      	nop
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <SPI_TxBuffer+0x30>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b02      	cmp	r3, #2
 8001262:	d1f8      	bne.n	8001256 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4803      	ldr	r0, [pc, #12]	@ (8001278 <SPI_TxBuffer+0x30>)
 800126c:	f006 fa69 	bl	8007742 <HAL_SPI_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000137c 	.word	0x2000137c

0800127c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001286:	bf00      	nop
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <SPI_RxByte+0x34>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d1f8      	bne.n	8001288 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001296:	1dba      	adds	r2, r7, #6
 8001298:	1df9      	adds	r1, r7, #7
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <SPI_RxByte+0x34>)
 80012a2:	f006 fb92 	bl	80079ca <HAL_SPI_TransmitReceive>

  return data;
 80012a6:	79bb      	ldrb	r3, [r7, #6]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000137c 	.word	0x2000137c

080012b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80012bc:	f7ff ffde 	bl	800127c <SPI_RxByte>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <SD_ReadyWait+0x30>)
 80012d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012dc:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80012de:	f7ff ffcd 	bl	800127c <SPI_RxByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d003      	beq.n	80012f4 <SD_ReadyWait+0x24>
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SD_ReadyWait+0x30>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f4      	bne.n	80012de <SD_ReadyWait+0xe>

  return res;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000296 	.word	0x20000296

08001304 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800130a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800130e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001310:	f7ff ff70 	bl	80011f4 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e005      	b.n	8001326 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	f7ff ff7a 	bl	8001214 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3301      	adds	r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b09      	cmp	r3, #9
 800132a:	ddf6      	ble.n	800131a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 800132c:	f7ff ff52 	bl	80011d4 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001330:	2340      	movs	r3, #64	@ 0x40
 8001332:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001344:	2395      	movs	r3, #149	@ 0x95
 8001346:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001348:	463b      	mov	r3, r7
 800134a:	2106      	movs	r1, #6
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff7b 	bl	8001248 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001352:	e002      	b.n	800135a <SD_PowerOn+0x56>
  {
    cnt--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800135a:	f7ff ff8f 	bl	800127c <SPI_RxByte>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d002      	beq.n	800136a <SD_PowerOn+0x66>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f4      	bne.n	8001354 <SD_PowerOn+0x50>
  }

  DESELECT();
 800136a:	f7ff ff43 	bl	80011f4 <DESELECT>
  SPI_TxByte(0XFF);
 800136e:	20ff      	movs	r0, #255	@ 0xff
 8001370:	f7ff ff50 	bl	8001214 <SPI_TxByte>

  PowerFlag = 1;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <SD_PowerOn+0x80>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000299 	.word	0x20000299

08001388 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SD_PowerOff+0x14>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000299 	.word	0x20000299

080013a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <SD_CheckPower+0x14>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000299 	.word	0x20000299

080013b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013c4:	22c8      	movs	r2, #200	@ 0xc8
 80013c6:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80013c8:	f7ff ff58 	bl	800127c <SPI_RxByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d103      	bne.n	80013de <SD_RxDataBlock+0x26>
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f4      	bne.n	80013c8 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80013e2:	d001      	beq.n	80013e8 <SD_RxDataBlock+0x30>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e00f      	b.n	8001408 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff60 	bl	80012b4 <SPI_RxBytePtr>
  } while(len--);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	603a      	str	r2, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f4      	bne.n	80013e8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80013fe:	f7ff ff3d 	bl	800127c <SPI_RxByte>
  SPI_RxByte();
 8001402:	f7ff ff3b 	bl	800127c <SPI_RxByte>

  return TRUE;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000294 	.word	0x20000294

08001414 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001424:	f7ff ff54 	bl	80012d0 <SD_ReadyWait>
 8001428:	4603      	mov	r3, r0
 800142a:	2bff      	cmp	r3, #255	@ 0xff
 800142c:	d001      	beq.n	8001432 <SD_TxDataBlock+0x1e>
 800142e:	2300      	movs	r3, #0
 8001430:	e02f      	b.n	8001492 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff feed 	bl	8001214 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2bfd      	cmp	r3, #253	@ 0xfd
 800143e:	d020      	beq.n	8001482 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff feff 	bl	8001248 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800144a:	f7ff ff17 	bl	800127c <SPI_RxByte>
    SPI_RxByte();
 800144e:	f7ff ff15 	bl	800127c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001452:	e00b      	b.n	800146c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001454:	f7ff ff12 	bl	800127c <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2b05      	cmp	r3, #5
 8001464:	d006      	beq.n	8001474 <SD_TxDataBlock+0x60>
      i++;
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	2b40      	cmp	r3, #64	@ 0x40
 8001470:	d9f0      	bls.n	8001454 <SD_TxDataBlock+0x40>
 8001472:	e000      	b.n	8001476 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001474:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001476:	bf00      	nop
 8001478:	f7ff ff00 	bl	800127c <SPI_RxByte>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0fa      	beq.n	8001478 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2b05      	cmp	r3, #5
 800148a:	d101      	bne.n	8001490 <SD_TxDataBlock+0x7c>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014a6:	f7ff ff13 	bl	80012d0 <SD_ReadyWait>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2bff      	cmp	r3, #255	@ 0xff
 80014ae:	d001      	beq.n	80014b4 <SD_SendCmd+0x1a>
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	e042      	b.n	800153a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff feac 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	0e1b      	lsrs	r3, r3, #24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fea6 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fea0 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe9a 	bl	8001214 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe95 	bl	8001214 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d102      	bne.n	80014f6 <SD_SendCmd+0x5c>
 80014f0:	2395      	movs	r3, #149	@ 0x95
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e007      	b.n	8001506 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b48      	cmp	r3, #72	@ 0x48
 80014fa:	d102      	bne.n	8001502 <SD_SendCmd+0x68>
 80014fc:	2387      	movs	r3, #135	@ 0x87
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e001      	b.n	8001506 <SD_SendCmd+0x6c>
  else crc = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe83 	bl	8001214 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b4c      	cmp	r3, #76	@ 0x4c
 8001512:	d101      	bne.n	8001518 <SD_SendCmd+0x7e>
 8001514:	f7ff feb2 	bl	800127c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001518:	230a      	movs	r3, #10
 800151a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800151c:	f7ff feae 	bl	800127c <SPI_RxByte>
 8001520:	4603      	mov	r3, r0
 8001522:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001524:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <SD_SendCmd+0x9e>
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	3b01      	subs	r3, #1
 8001530:	73bb      	strb	r3, [r7, #14]
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f1      	bne.n	800151c <SD_SendCmd+0x82>

  return res;
 8001538:	7b7b      	ldrb	r3, [r7, #13]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_initialize+0x14>
 8001554:	2301      	movs	r3, #1
 8001556:	e0d1      	b.n	80016fc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <SD_disk_initialize+0x1c0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <SD_disk_initialize+0x2a>
 8001566:	4b67      	ldr	r3, [pc, #412]	@ (8001704 <SD_disk_initialize+0x1c0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	e0c6      	b.n	80016fc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800156e:	f7ff fec9 	bl	8001304 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001572:	f7ff fe2f 	bl	80011d4 <SELECT>

  /* check disk type */
  type = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800157a:	2100      	movs	r1, #0
 800157c:	2040      	movs	r0, #64	@ 0x40
 800157e:	f7ff ff8c 	bl	800149a <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 80a1 	bne.w	80016cc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <SD_disk_initialize+0x1c4>)
 800158c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001590:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001592:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001596:	2048      	movs	r0, #72	@ 0x48
 8001598:	f7ff ff7f 	bl	800149a <SD_SendCmd>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d155      	bne.n	800164e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e00c      	b.n	80015c2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80015a8:	7bfc      	ldrb	r4, [r7, #15]
 80015aa:	f7ff fe67 	bl	800127c <SPI_RxByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	f104 0310 	add.w	r3, r4, #16
 80015b6:	443b      	add	r3, r7
 80015b8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d9ef      	bls.n	80015a8 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d17e      	bne.n	80016cc <SD_disk_initialize+0x188>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2baa      	cmp	r3, #170	@ 0xaa
 80015d2:	d17b      	bne.n	80016cc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015d4:	2100      	movs	r1, #0
 80015d6:	2077      	movs	r0, #119	@ 0x77
 80015d8:	f7ff ff5f 	bl	800149a <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d807      	bhi.n	80015f2 <SD_disk_initialize+0xae>
 80015e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015e6:	2069      	movs	r0, #105	@ 0x69
 80015e8:	f7ff ff57 	bl	800149a <SD_SendCmd>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <SD_disk_initialize+0xb8>
        } while (Timer1);
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ec      	bne.n	80015d4 <SD_disk_initialize+0x90>
 80015fa:	e000      	b.n	80015fe <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015fc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <SD_disk_initialize+0x1c4>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d062      	beq.n	80016cc <SD_disk_initialize+0x188>
 8001606:	2100      	movs	r1, #0
 8001608:	207a      	movs	r0, #122	@ 0x7a
 800160a:	f7ff ff46 	bl	800149a <SD_SendCmd>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15b      	bne.n	80016cc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e00c      	b.n	8001634 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800161a:	7bfc      	ldrb	r4, [r7, #15]
 800161c:	f7ff fe2e 	bl	800127c <SPI_RxByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	f104 0310 	add.w	r3, r4, #16
 8001628:	443b      	add	r3, r7
 800162a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d9ef      	bls.n	800161a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800163a:	7a3b      	ldrb	r3, [r7, #8]
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SD_disk_initialize+0x104>
 8001644:	230c      	movs	r3, #12
 8001646:	e000      	b.n	800164a <SD_disk_initialize+0x106>
 8001648:	2304      	movs	r3, #4
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e03e      	b.n	80016cc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800164e:	2100      	movs	r1, #0
 8001650:	2077      	movs	r0, #119	@ 0x77
 8001652:	f7ff ff22 	bl	800149a <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	2b01      	cmp	r3, #1
 800165a:	d808      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800165c:	2100      	movs	r1, #0
 800165e:	2069      	movs	r0, #105	@ 0x69
 8001660:	f7ff ff1b 	bl	800149a <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d801      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800166a:	2302      	movs	r3, #2
 800166c:	e000      	b.n	8001670 <SD_disk_initialize+0x12c>
 800166e:	2301      	movs	r3, #1
 8001670:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d10e      	bne.n	8001696 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001678:	2100      	movs	r1, #0
 800167a:	2077      	movs	r0, #119	@ 0x77
 800167c:	f7ff ff0d 	bl	800149a <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d80e      	bhi.n	80016a4 <SD_disk_initialize+0x160>
 8001686:	2100      	movs	r1, #0
 8001688:	2069      	movs	r0, #105	@ 0x69
 800168a:	f7ff ff06 	bl	800149a <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <SD_disk_initialize+0x160>
 8001694:	e00c      	b.n	80016b0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001696:	2100      	movs	r1, #0
 8001698:	2041      	movs	r0, #65	@ 0x41
 800169a:	f7ff fefe 	bl	800149a <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e2      	bne.n	8001672 <SD_disk_initialize+0x12e>
 80016ac:	e000      	b.n	80016b0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ae:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <SD_disk_initialize+0x184>
 80016b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016bc:	2050      	movs	r0, #80	@ 0x50
 80016be:	f7ff feec 	bl	800149a <SD_SendCmd>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SD_disk_initialize+0x188>
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <SD_disk_initialize+0x1c8>)
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80016d2:	f7ff fd8f 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80016d6:	f7ff fdd1 	bl	800127c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e001      	b.n	80016f6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016f2:	f7ff fe49 	bl	8001388 <SD_PowerOff>
  }

  return Stat;
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000294 	.word	0x20000294
 800170c:	20000298 	.word	0x20000298

08001710 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_status+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e002      	b.n	800172a <SD_disk_status+0x1a>
  return Stat;
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SD_disk_status+0x28>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000000 	.word	0x20000000

0800173c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <SD_disk_read+0x1c>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <SD_disk_read+0x20>
 8001758:	2304      	movs	r3, #4
 800175a:	e051      	b.n	8001800 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <SD_disk_read+0xcc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_read+0x32>
 800176a:	2303      	movs	r3, #3
 800176c:	e048      	b.n	8001800 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <SD_disk_read+0xd0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <SD_disk_read+0x44>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001780:	f7ff fd28 	bl	80011d4 <SELECT>

  if (count == 1)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d111      	bne.n	80017ae <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2051      	movs	r0, #81	@ 0x51
 800178e:	f7ff fe84 	bl	800149a <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d129      	bne.n	80017ec <SD_disk_read+0xb0>
 8001798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7ff fe0b 	bl	80013b8 <SD_RxDataBlock>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d021      	beq.n	80017ec <SD_disk_read+0xb0>
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	e01e      	b.n	80017ec <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2052      	movs	r0, #82	@ 0x52
 80017b2:	f7ff fe72 	bl	800149a <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d117      	bne.n	80017ec <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80017bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	f7ff fdf9 	bl	80013b8 <SD_RxDataBlock>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <SD_disk_read+0xa6>
        buff += 512;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017d2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ed      	bne.n	80017bc <SD_disk_read+0x80>
 80017e0:	e000      	b.n	80017e4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80017e2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	204c      	movs	r0, #76	@ 0x4c
 80017e8:	f7ff fe57 	bl	800149a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80017ec:	f7ff fd02 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80017f0:	f7ff fd44 	bl	800127c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000298 	.word	0x20000298

08001810 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <SD_disk_write+0x1c>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <SD_disk_write+0x20>
 800182c:	2304      	movs	r3, #4
 800182e:	e06b      	b.n	8001908 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <SD_disk_write+0x100>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SD_disk_write+0x32>
 800183e:	2303      	movs	r3, #3
 8001840:	e062      	b.n	8001908 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001842:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <SD_disk_write+0x100>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SD_disk_write+0x44>
 8001850:	2302      	movs	r3, #2
 8001852:	e059      	b.n	8001908 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001854:	4b2f      	ldr	r3, [pc, #188]	@ (8001914 <SD_disk_write+0x104>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <SD_disk_write+0x56>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	607b      	str	r3, [r7, #4]

  SELECT();
 8001866:	f7ff fcb5 	bl	80011d4 <SELECT>

  if (count == 1)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d110      	bne.n	8001892 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	2058      	movs	r0, #88	@ 0x58
 8001874:	f7ff fe11 	bl	800149a <SD_SendCmd>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d13a      	bne.n	80018f4 <SD_disk_write+0xe4>
 800187e:	21fe      	movs	r1, #254	@ 0xfe
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f7ff fdc7 	bl	8001414 <SD_TxDataBlock>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d033      	beq.n	80018f4 <SD_disk_write+0xe4>
      count = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	e030      	b.n	80018f4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <SD_disk_write+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800189e:	2100      	movs	r1, #0
 80018a0:	2077      	movs	r0, #119	@ 0x77
 80018a2:	f7ff fdfa 	bl	800149a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	2057      	movs	r0, #87	@ 0x57
 80018aa:	f7ff fdf6 	bl	800149a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2059      	movs	r0, #89	@ 0x59
 80018b2:	f7ff fdf2 	bl	800149a <SD_SendCmd>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11b      	bne.n	80018f4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018bc:	21fc      	movs	r1, #252	@ 0xfc
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f7ff fda8 	bl	8001414 <SD_TxDataBlock>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00a      	beq.n	80018e0 <SD_disk_write+0xd0>
        buff += 512;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018d0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ee      	bne.n	80018bc <SD_disk_write+0xac>
 80018de:	e000      	b.n	80018e2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018e0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80018e2:	21fd      	movs	r1, #253	@ 0xfd
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fd95 	bl	8001414 <SD_TxDataBlock>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <SD_disk_write+0xe4>
      {
        count = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80018f4:	f7ff fc7e 	bl	80011f4 <DESELECT>
  SPI_RxByte();
 80018f8:	f7ff fcc0 	bl	800127c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000298 	.word	0x20000298

08001918 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b08b      	sub	sp, #44	@ 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	460b      	mov	r3, r1
 8001926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SD_disk_ioctl+0x1e>
 8001932:	2304      	movs	r3, #4
 8001934:	e113      	b.n	8001b5e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d124      	bne.n	800198c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d012      	beq.n	8001970 <SD_disk_ioctl+0x58>
 800194a:	2b02      	cmp	r3, #2
 800194c:	dc1a      	bgt.n	8001984 <SD_disk_ioctl+0x6c>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <SD_disk_ioctl+0x40>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d006      	beq.n	8001964 <SD_disk_ioctl+0x4c>
 8001956:	e015      	b.n	8001984 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001958:	f7ff fd16 	bl	8001388 <SD_PowerOff>
      res = RES_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001962:	e0fa      	b.n	8001b5a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001964:	f7ff fcce 	bl	8001304 <SD_PowerOn>
      res = RES_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800196e:	e0f4      	b.n	8001b5a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	1c5c      	adds	r4, r3, #1
 8001974:	f7ff fd14 	bl	80013a0 <SD_CheckPower>
 8001978:	4603      	mov	r3, r0
 800197a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001982:	e0ea      	b.n	8001b5a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001984:	2304      	movs	r3, #4
 8001986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800198a:	e0e6      	b.n	8001b5a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800198c:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <SD_disk_ioctl+0x250>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SD_disk_ioctl+0x86>
 800199a:	2303      	movs	r3, #3
 800199c:	e0df      	b.n	8001b5e <SD_disk_ioctl+0x246>

    SELECT();
 800199e:	f7ff fc19 	bl	80011d4 <SELECT>

    switch (ctrl)
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	2b0d      	cmp	r3, #13
 80019a6:	f200 80c9 	bhi.w	8001b3c <SD_disk_ioctl+0x224>
 80019aa:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <SD_disk_ioctl+0x98>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001aa7 	.word	0x08001aa7
 80019b4:	080019e9 	.word	0x080019e9
 80019b8:	08001a97 	.word	0x08001a97
 80019bc:	08001b3d 	.word	0x08001b3d
 80019c0:	08001b3d 	.word	0x08001b3d
 80019c4:	08001b3d 	.word	0x08001b3d
 80019c8:	08001b3d 	.word	0x08001b3d
 80019cc:	08001b3d 	.word	0x08001b3d
 80019d0:	08001b3d 	.word	0x08001b3d
 80019d4:	08001b3d 	.word	0x08001b3d
 80019d8:	08001b3d 	.word	0x08001b3d
 80019dc:	08001ab9 	.word	0x08001ab9
 80019e0:	08001add 	.word	0x08001add
 80019e4:	08001b01 	.word	0x08001b01
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019e8:	2100      	movs	r1, #0
 80019ea:	2049      	movs	r0, #73	@ 0x49
 80019ec:	f7ff fd55 	bl	800149a <SD_SendCmd>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80a6 	bne.w	8001b44 <SD_disk_ioctl+0x22c>
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2110      	movs	r1, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fcda 	bl	80013b8 <SD_RxDataBlock>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 809c 	beq.w	8001b44 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	029a      	lsls	r2, r3, #10
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e02d      	b.n	8001a8e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a32:	7c7b      	ldrb	r3, [r7, #17]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	09db      	lsrs	r3, r3, #7
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f003 0306 	and.w	r3, r3, #6
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3302      	adds	r3, #2
 8001a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a5a:	7d3b      	ldrb	r3, [r7, #20]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	7cbb      	ldrb	r3, [r7, #18]
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a80:	8bfa      	ldrh	r2, [r7, #30]
 8001a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a86:	3b09      	subs	r3, #9
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001a94:	e056      	b.n	8001b44 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001aa4:	e055      	b.n	8001b52 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001aa6:	f7ff fc13 	bl	80012d0 <SD_ReadyWait>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2bff      	cmp	r3, #255	@ 0xff
 8001aae:	d14b      	bne.n	8001b48 <SD_disk_ioctl+0x230>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ab6:	e047      	b.n	8001b48 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2049      	movs	r0, #73	@ 0x49
 8001abc:	f7ff fced 	bl	800149a <SD_SendCmd>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d142      	bne.n	8001b4c <SD_disk_ioctl+0x234>
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f7ff fc75 	bl	80013b8 <SD_RxDataBlock>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03b      	beq.n	8001b4c <SD_disk_ioctl+0x234>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ada:	e037      	b.n	8001b4c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001adc:	2100      	movs	r1, #0
 8001ade:	204a      	movs	r0, #74	@ 0x4a
 8001ae0:	f7ff fcdb 	bl	800149a <SD_SendCmd>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d132      	bne.n	8001b50 <SD_disk_ioctl+0x238>
 8001aea:	2110      	movs	r1, #16
 8001aec:	6a38      	ldr	r0, [r7, #32]
 8001aee:	f7ff fc63 	bl	80013b8 <SD_RxDataBlock>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d02b      	beq.n	8001b50 <SD_disk_ioctl+0x238>
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001afe:	e027      	b.n	8001b50 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001b00:	2100      	movs	r1, #0
 8001b02:	207a      	movs	r0, #122	@ 0x7a
 8001b04:	f7ff fcc9 	bl	800149a <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b14:	e00b      	b.n	8001b2e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8001b16:	6a3c      	ldr	r4, [r7, #32]
 8001b18:	1c63      	adds	r3, r4, #1
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	f7ff fbae 	bl	800127c <SPI_RxByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ef      	bls.n	8001b16 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b42:	e006      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b44:	bf00      	nop
 8001b46:	e004      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b48:	bf00      	nop
 8001b4a:	e002      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e000      	b.n	8001b52 <SD_disk_ioctl+0x23a>
      break;
 8001b50:	bf00      	nop
    }

    DESELECT();
 8001b52:	f7ff fb4f 	bl	80011f4 <DESELECT>
    SPI_RxByte();
 8001b56:	f7ff fb91 	bl	800127c <SPI_RxByte>
  }

  return res;
 8001b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	372c      	adds	r7, #44	@ 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <SD_Init>:
#define POKEBALL_WIDTH 15
#define POKEBALL_HEIGHT 15
static FATFS FatFs; // Persistent FatFS handle

// Initialize the SD card once
void SD_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
    FRESULT fres = f_mount(&FatFs, "", 1); // Mount the SD card
 8001b72:	2201      	movs	r2, #1
 8001b74:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <SD_Init+0x34>)
 8001b76:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <SD_Init+0x38>)
 8001b78:	f009 fd56 	bl	800b628 <f_mount>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
    if (fres != FR_OK) {
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <SD_Init+0x26>
        printf("Error: Failed to mount SD card (%i)\r\n", fres);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <SD_Init+0x3c>)
 8001b8c:	f00b fa00 	bl	800cf90 <iprintf>
    } else {
        printf("SD Card Mounted Successfully!\r\n");
    }
}
 8001b90:	e002      	b.n	8001b98 <SD_Init+0x2c>
        printf("SD Card Mounted Successfully!\r\n");
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <SD_Init+0x40>)
 8001b94:	f00b fa64 	bl	800d060 <puts>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800f2f8 	.word	0x0800f2f8
 8001ba4:	2000029c 	.word	0x2000029c
 8001ba8:	0800f2fc 	.word	0x0800f2fc
 8001bac:	0800f324 	.word	0x0800f324

08001bb0 <process_SD_card>:
void SD_Deinit(void) {
    f_mount(NULL, "", 0); // Unmount the SD card
    printf("SD Card Unmounted Successfully!\r\n");
}

void process_SD_card(const char *filename) {
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bc0:	f843 0cb4 	str.w	r0, [r3, #-180]
    FIL fil;                 // File handle
    FRESULT fres;            // Result after operations

    do {
 8001bc4:	466b      	mov	r3, sp
 8001bc6:	461e      	mov	r6, r3
        // Open the BMP file
        fres = f_open(&fil, filename, FA_READ);
 8001bc8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bd2:	3b14      	subs	r3, #20
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f009 fd6a 	bl	800b6b4 <f_open>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001be6:	f102 0211 	add.w	r2, r2, #17
 8001bea:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK) {
 8001bec:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001bf0:	f103 0311 	add.w	r3, r3, #17
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <process_SD_card+0x68>
            printf("Error: Failed to open file %s (%i)\r\n", filename, fres);
 8001bfa:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001bfe:	f103 0311 	add.w	r3, r3, #17
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001c08:	4611      	mov	r1, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f851 1cb4 	ldr.w	r1, [r1, #-180]
 8001c10:	48c3      	ldr	r0, [pc, #780]	@ (8001f20 <process_SD_card+0x370>)
 8001c12:	f00b f9bd 	bl	800cf90 <iprintf>
            break;
 8001c16:	e2d8      	b.n	80021ca <process_SD_card+0x61a>
        }

        printf("File %s opened successfully!\r\n", filename);
 8001c18:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c1c:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 8001c20:	48c0      	ldr	r0, [pc, #768]	@ (8001f24 <process_SD_card+0x374>)
 8001c22:	f00b f9b5 	bl	800cf90 <iprintf>

        // Read and parse BMP header
        uint8_t bmpHeader[54];
        UINT bytesRead;
        fres = f_read(&fil, bmpHeader, sizeof(bmpHeader), &bytesRead);
 8001c26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c2a:	3b18      	subs	r3, #24
 8001c2c:	f107 0120 	add.w	r1, r7, #32
 8001c30:	3910      	subs	r1, #16
 8001c32:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001c36:	3814      	subs	r0, #20
 8001c38:	2236      	movs	r2, #54	@ 0x36
 8001c3a:	f009 ff03 	bl	800ba44 <f_read>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c44:	f102 0211 	add.w	r2, r2, #17
 8001c48:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK || bytesRead != sizeof(bmpHeader)) {
 8001c4a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001c4e:	f103 0311 	add.w	r3, r3, #17
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <process_SD_card+0xb4>
 8001c58:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001c5c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001c60:	2b36      	cmp	r3, #54	@ 0x36
 8001c62:	d009      	beq.n	8001c78 <process_SD_card+0xc8>
            printf("Error: Failed to read BMP header\r\n");
 8001c64:	48b0      	ldr	r0, [pc, #704]	@ (8001f28 <process_SD_card+0x378>)
 8001c66:	f00b f9fb 	bl	800d060 <puts>
            f_close(&fil);
 8001c6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c6e:	3b14      	subs	r3, #20
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00a f8c4 	bl	800bdfe <f_close>
            break;
 8001c76:	e2a8      	b.n	80021ca <process_SD_card+0x61a>
        }

        // Extract BMP information
        uint16_t imageWidth = *(uint16_t *)&bmpHeader[18];
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	3b10      	subs	r3, #16
 8001c7e:	3312      	adds	r3, #18
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c86:	f102 020e 	add.w	r2, r2, #14
 8001c8a:	8013      	strh	r3, [r2, #0]
        uint16_t imageHeight = *(uint16_t *)&bmpHeader[22];
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	3b10      	subs	r3, #16
 8001c92:	3316      	adds	r3, #22
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001c9a:	f102 020c 	add.w	r2, r2, #12
 8001c9e:	8013      	strh	r3, [r2, #0]
        uint32_t dataOffset = *(uint32_t *)&bmpHeader[10];
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	3b10      	subs	r3, #16
 8001ca6:	330a      	adds	r3, #10
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cae:	f102 0208 	add.w	r2, r2, #8
 8001cb2:	6013      	str	r3, [r2, #0]
        uint16_t bpp = *(uint16_t *)&bmpHeader[28]; // Bits per pixel
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	3b10      	subs	r3, #16
 8001cba:	331c      	adds	r3, #28
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001cc2:	f102 0206 	add.w	r2, r2, #6
 8001cc6:	8013      	strh	r3, [r2, #0]
        printf("Image Info: Width=%d, Height=%d, DataOffset=%lu, BPP=%d\r\n",
 8001cc8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ccc:	f103 030e 	add.w	r3, r3, #14
 8001cd0:	8819      	ldrh	r1, [r3, #0]
 8001cd2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cd6:	f103 030c 	add.w	r3, r3, #12
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ce0:	f103 0306 	add.w	r3, r3, #6
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cec:	f103 0308 	add.w	r3, r3, #8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	488e      	ldr	r0, [pc, #568]	@ (8001f2c <process_SD_card+0x37c>)
 8001cf4:	f00b f94c 	bl	800cf90 <iprintf>
               imageWidth, imageHeight, dataOffset, bpp);

        // Validate BMP format
        if (bpp != 24 && bpp != 16) { // Check for 24-bit or 16-bit BMP
 8001cf8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001cfc:	f103 0306 	add.w	r3, r3, #6
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b18      	cmp	r3, #24
 8001d04:	d010      	beq.n	8001d28 <process_SD_card+0x178>
 8001d06:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d0a:	f103 0306 	add.w	r3, r3, #6
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d009      	beq.n	8001d28 <process_SD_card+0x178>
            printf("Error: Unsupported BMP format. Only 24-bit and 16-bit supported.\r\n");
 8001d14:	4886      	ldr	r0, [pc, #536]	@ (8001f30 <process_SD_card+0x380>)
 8001d16:	f00b f9a3 	bl	800d060 <puts>
            f_close(&fil);
 8001d1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d1e:	3b14      	subs	r3, #20
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00a f86c 	bl	800bdfe <f_close>
            break;
 8001d26:	e250      	b.n	80021ca <process_SD_card+0x61a>
        }

        // Move to pixel data
        if (f_lseek(&fil, dataOffset) != FR_OK) {
 8001d28:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d2c:	3b14      	subs	r3, #20
 8001d2e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d32:	f102 0208 	add.w	r2, r2, #8
 8001d36:	6811      	ldr	r1, [r2, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00a f88a 	bl	800be52 <f_lseek>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <process_SD_card+0x1a8>
            printf("Error: Failed to seek to pixel data\r\n");
 8001d44:	487b      	ldr	r0, [pc, #492]	@ (8001f34 <process_SD_card+0x384>)
 8001d46:	f00b f98b 	bl	800d060 <puts>
            f_close(&fil);
 8001d4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d4e:	3b14      	subs	r3, #20
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a f854 	bl	800bdfe <f_close>
            break;
 8001d56:	e238      	b.n	80021ca <process_SD_card+0x61a>
        }

        printf("Starting image rendering...\r\n");
 8001d58:	4877      	ldr	r0, [pc, #476]	@ (8001f38 <process_SD_card+0x388>)
 8001d5a:	f00b f981 	bl	800d060 <puts>

        uint32_t rowSize = ((imageWidth * (bpp / 8) + 3) & ~3); // Ensure 4-byte alignment
 8001d5e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d62:	f103 030e 	add.w	r3, r3, #14
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d6c:	f102 0206 	add.w	r2, r2, #6
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	08d2      	lsrs	r2, r2, #3
 8001d74:	b292      	uxth	r2, r2
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	f023 0303 	bic.w	r3, r3, #3
 8001d80:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d84:	6013      	str	r3, [r2, #0]
        uint16_t maxRowsPerBuffer = 128; // Increased rows per buffer
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001d8c:	f102 021e 	add.w	r2, r2, #30
 8001d90:	8013      	strh	r3, [r2, #0]
        uint32_t bufferSize = imageWidth * maxRowsPerBuffer * 2; // RGB565 buffer size
 8001d92:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d96:	f103 030e 	add.w	r3, r3, #14
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001da0:	f102 021e 	add.w	r2, r2, #30
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001db0:	f102 0218 	add.w	r2, r2, #24
 8001db4:	6013      	str	r3, [r2, #0]
        uint8_t rowBuffer[rowSize]; // Buffer for a single row
 8001db6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001dc4:	f102 0214 	add.w	r2, r2, #20
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	00c3      	lsls	r3, r0, #3
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	00c2      	lsls	r2, r0, #3
 8001de6:	2300      	movs	r3, #0
 8001de8:	468a      	mov	sl, r1
 8001dea:	469b      	mov	fp, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e00:	1dcb      	adds	r3, r1, #7
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	ebad 0d03 	sub.w	sp, sp, r3
 8001e0a:	ab02      	add	r3, sp, #8
 8001e0c:	3300      	adds	r3, #0
 8001e0e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e12:	f102 0210 	add.w	r2, r2, #16
 8001e16:	6013      	str	r3, [r2, #0]
        uint8_t lineBuffer[bufferSize]; // Buffer for multiple rows
 8001e18:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001e1c:	f103 0318 	add.w	r3, r3, #24
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	460b      	mov	r3, r1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e2a:	f102 020c 	add.w	r2, r2, #12
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	4688      	mov	r8, r1
 8001e34:	4699      	mov	r9, r3
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	461d      	mov	r5, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00eb      	lsls	r3, r5, #3
 8001e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	1dcb      	adds	r3, r1, #7
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6a:	ab02      	add	r3, sp, #8
 8001e6c:	3300      	adds	r3, #0
 8001e6e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001e72:	f102 0208 	add.w	r2, r2, #8
 8001e76:	6013      	str	r3, [r2, #0]

        ILI9341_SetAddressWindow(0, 0, imageWidth - 1, imageHeight - 1);
 8001e78:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e7c:	f103 030e 	add.w	r3, r3, #14
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e8a:	f103 030c 	add.w	r3, r3, #12
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	2000      	movs	r0, #0
 8001e98:	f001 fca0 	bl	80037dc <ILI9341_SetAddressWindow>

        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001ea2:	f102 021e 	add.w	r2, r2, #30
 8001ea6:	8013      	strh	r3, [r2, #0]
 8001ea8:	e170      	b.n	800218c <process_SD_card+0x5dc>
            uint16_t rowsToProcess = (y + maxRowsPerBuffer > imageHeight)
 8001eaa:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001eae:	f103 031e 	add.w	r3, r3, #30
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001eb8:	f103 031e 	add.w	r3, r3, #30
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ec4:	f103 030c 	add.w	r3, r3, #12
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dd0c      	ble.n	8001ee8 <process_SD_card+0x338>
 8001ece:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001ed2:	f103 030c 	add.w	r3, r3, #12
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001edc:	f103 031e 	add.w	r3, r3, #30
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	e004      	b.n	8001ef2 <process_SD_card+0x342>
 8001ee8:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001eec:	f103 031e 	add.w	r3, r3, #30
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001ef6:	f102 0206 	add.w	r2, r2, #6
 8001efa:	8013      	strh	r3, [r2, #0]
                                     ? (imageHeight - y)
                                     : maxRowsPerBuffer;
            uint8_t *linePtr = lineBuffer;
 8001efc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8001f00:	f103 0308 	add.w	r3, r3, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f0a:	f102 0218 	add.w	r2, r2, #24
 8001f0e:	6013      	str	r3, [r2, #0]

            for (uint16_t row = 0; row < rowsToProcess; row++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f16:	f102 0216 	add.w	r2, r2, #22
 8001f1a:	8013      	strh	r3, [r2, #0]
 8001f1c:	e102      	b.n	8002124 <process_SD_card+0x574>
 8001f1e:	bf00      	nop
 8001f20:	0800f368 	.word	0x0800f368
 8001f24:	0800f390 	.word	0x0800f390
 8001f28:	0800f3b0 	.word	0x0800f3b0
 8001f2c:	0800f3d4 	.word	0x0800f3d4
 8001f30:	0800f410 	.word	0x0800f410
 8001f34:	0800f454 	.word	0x0800f454
 8001f38:	0800f47c 	.word	0x0800f47c
                fres = f_read(&fil, rowBuffer, rowSize, &bytesRead);
 8001f3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f40:	3b18      	subs	r3, #24
 8001f42:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001f46:	3814      	subs	r0, #20
 8001f48:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f507 5184 	add.w	r1, r7, #4224	@ 0x1080
 8001f52:	f101 0110 	add.w	r1, r1, #16
 8001f56:	6809      	ldr	r1, [r1, #0]
 8001f58:	f009 fd74 	bl	800ba44 <f_read>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f62:	f102 0211 	add.w	r2, r2, #17
 8001f66:	7013      	strb	r3, [r2, #0]
                if (fres != FR_OK || bytesRead < rowSize) {
 8001f68:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f6c:	f103 0311 	add.w	r3, r3, #17
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <process_SD_card+0x3d8>
 8001f76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f7a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001f7e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d917      	bls.n	8001fb8 <process_SD_card+0x408>
                    printf("Error: Failed to read row %d, fres=%d, bytesRead=%u\r\n", y + row, fres, bytesRead);
 8001f88:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f8c:	f103 031e 	add.w	r3, r3, #30
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001f96:	f103 0316 	add.w	r3, r3, #22
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	18d1      	adds	r1, r2, r3
 8001f9e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fa2:	f103 0311 	add.w	r3, r3, #17
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001fac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001fb0:	488a      	ldr	r0, [pc, #552]	@ (80021dc <process_SD_card+0x62c>)
 8001fb2:	f00a ffed 	bl	800cf90 <iprintf>
                    break;
 8001fb6:	e0c2      	b.n	800213e <process_SD_card+0x58e>
                }

                for (uint16_t x = 0; x < imageWidth; x++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001fbe:	f102 0214 	add.w	r2, r2, #20
 8001fc2:	8013      	strh	r3, [r2, #0]
 8001fc4:	e096      	b.n	80020f4 <process_SD_card+0x544>
                    uint16_t color;

                    if (bpp == 24) {
 8001fc6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fca:	f103 0306 	add.w	r3, r3, #6
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b18      	cmp	r3, #24
 8001fd2:	d13f      	bne.n	8002054 <process_SD_card+0x4a4>
                        // 24-bit RGB (RGB888 -> RGB565)
                        uint8_t *pixel = &rowBuffer[x * 3];
 8001fd4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fd8:	f103 0314 	add.w	r3, r3, #20
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8001fe8:	f102 0210 	add.w	r2, r2, #16
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001ff4:	f102 021c 	add.w	r2, r2, #28
 8001ff8:	6013      	str	r3, [r2, #0]
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 8001ffa:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001ffe:	f103 031c 	add.w	r3, r3, #28
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3302      	adds	r3, #2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21b      	sxth	r3, r3
 800200c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002010:	f023 0307 	bic.w	r3, r3, #7
 8002014:	b21a      	sxth	r2, r3
                                ((pixel[1] & 0xFC) << 3) | // Green
 8002016:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800201a:	f103 031c 	add.w	r3, r3, #28
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	b21b      	sxth	r3, r3
 8002028:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800202c:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 800202e:	4313      	orrs	r3, r2
 8002030:	b21a      	sxth	r2, r3
                                (pixel[0] >> 3);          // Blue
 8002032:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002036:	f103 031c 	add.w	r3, r3, #28
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
                                ((pixel[1] & 0xFC) << 3) | // Green
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21b      	sxth	r3, r3
                        color = ((pixel[2] & 0xF8) << 8) | // Red
 8002048:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800204c:	f102 0212 	add.w	r2, r2, #18
 8002050:	8013      	strh	r3, [r2, #0]
 8002052:	e01e      	b.n	8002092 <process_SD_card+0x4e2>
                    } else if (bpp == 16) {
 8002054:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002058:	f103 0306 	add.w	r3, r3, #6
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d117      	bne.n	8002092 <process_SD_card+0x4e2>
                        // 16-bit RGB565
                        uint16_t *pixel = (uint16_t *)&rowBuffer[x * 2];
 8002062:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002066:	f103 0314 	add.w	r3, r3, #20
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002072:	f102 0210 	add.w	r2, r2, #16
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4413      	add	r3, r2
 800207a:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800207e:	6013      	str	r3, [r2, #0]
                        color = *pixel; // Directly use the RGB565 value
 8002080:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800208c:	f102 0212 	add.w	r2, r2, #18
 8002090:	8013      	strh	r3, [r2, #0]
                    }

                    *linePtr++ = color >> 8;        // High byte
 8002092:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002096:	f103 0312 	add.w	r3, r3, #18
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b299      	uxth	r1, r3
 80020a0:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020a4:	f103 0318 	add.w	r3, r3, #24
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	f507 5085 	add.w	r0, r7, #4256	@ 0x10a0
 80020b0:	f100 0018 	add.w	r0, r0, #24
 80020b4:	6002      	str	r2, [r0, #0]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
                    *linePtr++ = color & 0xFF;     // Low byte
 80020ba:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020be:	f103 0318 	add.w	r3, r3, #24
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 80020ca:	f101 0118 	add.w	r1, r1, #24
 80020ce:	600a      	str	r2, [r1, #0]
 80020d0:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020d4:	f102 0212 	add.w	r2, r2, #18
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
                for (uint16_t x = 0; x < imageWidth; x++) {
 80020de:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020e2:	f103 0314 	add.w	r3, r3, #20
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80020ee:	f102 0214 	add.w	r2, r2, #20
 80020f2:	8013      	strh	r3, [r2, #0]
 80020f4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80020f8:	f103 0314 	add.w	r3, r3, #20
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002102:	f103 030e 	add.w	r3, r3, #14
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	f4ff af5c 	bcc.w	8001fc6 <process_SD_card+0x416>
            for (uint16_t row = 0; row < rowsToProcess; row++) {
 800210e:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002112:	f103 0316 	add.w	r3, r3, #22
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 800211e:	f102 0216 	add.w	r2, r2, #22
 8002122:	8013      	strh	r3, [r2, #0]
 8002124:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002128:	f103 0316 	add.w	r3, r3, #22
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002132:	f103 0306 	add.w	r3, r3, #6
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	f4ff aeff 	bcc.w	8001f3c <process_SD_card+0x38c>
                }
            }

            // Send the entire buffer for rowsToProcess
            ILI9341_SendData(lineBuffer, rowsToProcess * imageWidth * 2);
 800213e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002142:	f103 0306 	add.w	r3, r3, #6
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800214c:	f103 030e 	add.w	r3, r3, #14
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	fb12 f303 	smulbb	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002162:	f103 0308 	add.w	r3, r3, #8
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f001 f9c2 	bl	80034f0 <ILI9341_SendData>
        for (uint16_t y = 0; y < imageHeight; y += maxRowsPerBuffer) {
 800216c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002170:	f103 031e 	add.w	r3, r3, #30
 8002174:	881a      	ldrh	r2, [r3, #0]
 8002176:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800217a:	f103 031e 	add.w	r3, r3, #30
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002186:	f102 021e 	add.w	r2, r2, #30
 800218a:	8013      	strh	r3, [r2, #0]
 800218c:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002190:	f103 031e 	add.w	r3, r3, #30
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800219a:	f103 030c 	add.w	r3, r3, #12
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f4ff ae82 	bcc.w	8001eaa <process_SD_card+0x2fa>
        }

        printf("Image rendered successfully!\r\n");
 80021a6:	480e      	ldr	r0, [pc, #56]	@ (80021e0 <process_SD_card+0x630>)
 80021a8:	f00a ff5a 	bl	800d060 <puts>

        // Close the BMP file
        f_close(&fil);
 80021ac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021b0:	3b14      	subs	r3, #20
 80021b2:	4618      	mov	r0, r3
 80021b4:	f009 fe23 	bl	800bdfe <f_close>
        printf("File %s closed successfully!\r\n", filename);
 80021b8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80021bc:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 80021c0:	4808      	ldr	r0, [pc, #32]	@ (80021e4 <process_SD_card+0x634>)
 80021c2:	f00a fee5 	bl	800cf90 <iprintf>
 80021c6:	46b5      	mov	sp, r6

    } while (false);

}
 80021c8:	e000      	b.n	80021cc <process_SD_card+0x61c>
            break;
 80021ca:	46b5      	mov	sp, r6
}
 80021cc:	bf00      	nop
 80021ce:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 80021d2:	3704      	adds	r7, #4
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021da:	bf00      	nop
 80021dc:	0800f49c 	.word	0x0800f49c
 80021e0:	0800f4d4 	.word	0x0800f4d4
 80021e4:	0800f4f4 	.word	0x0800f4f4

080021e8 <IR_init>:

// Variable to indicate detection
volatile uint32_t ir_triggered = 0;

// Initialize the IR sensor pin with interrupt
void IR_init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <IR_init+0x60>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <IR_init+0x60>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <IR_init+0x60>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

    // Configure PA7 as input with external interrupt
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800221c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002220:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4808      	ldr	r0, [pc, #32]	@ (800224c <IR_init+0x64>)
 800222c:	f003 fa48 	bl	80056c0 <HAL_GPIO_Init>

    // Enable the interrupt in the NVIC
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
 8002230:	2200      	movs	r2, #0
 8002232:	2102      	movs	r1, #2
 8002234:	2017      	movs	r0, #23
 8002236:	f002 fe90 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
 800223a:	2017      	movs	r0, #23
 800223c:	f002 fea9 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_GPIO_EXTI_Callback>:

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b80      	cmp	r3, #128	@ 0x80
 800225e:	d102      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x24>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200012d4 	.word	0x200012d4

08002278 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 800227c:	2080      	movs	r0, #128	@ 0x80
 800227e:	f003 fbd5 	bl	8005a2c <HAL_GPIO_EXTI_IRQHandler>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <IR_is_triggered>:

// Optional: Function to get the IR trigger state (can be used in main logic)
uint8_t IR_is_triggered(void) {
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
    if (ir_triggered) {
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <IR_is_triggered+0x24>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <IR_is_triggered+0x16>
        ir_triggered = 0; // Reset the flag after reading
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <IR_is_triggered+0x24>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
        return 1;         // Return true if an object was detected
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <IR_is_triggered+0x18>
    }
    return 0;             // No detection
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200012d4 	.word	0x200012d4

080022b0 <init_game>:
const char *water_pokemon[POKEMON_COUNT] = {
    "Squirtle", "Totodile", "Mudkip", "Piplup", "Froakie",
    "Vaporeon", "Lapras", "Poliwag", "Wooper", "Marill"
};

void init_game(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	IR_init();
 80022b4:	f7ff ff98 	bl	80021e8 <IR_init>
    // Initialize sensors

	//MPU_init();
    Push_Button_Init(); // Initialize push button
 80022b8:	f002 f870 	bl	800439c <Push_Button_Init>
    Pressure_sensor_Init();
 80022bc:	f000 ffc6 	bl	800324c <Pressure_sensor_Init>
    ADC_Config();
 80022c0:	f000 ffe2 	bl	8003288 <ADC_Config>
    MPU_init();
 80022c4:	f001 f84a 	bl	800335c <MPU_init>
    ILI9341_Init(); // Initialize the LCD
 80022c8:	f001 f93a 	bl	8003540 <ILI9341_Init>
    SD_Init();
 80022cc:	f7ff fc4e 	bl	8001b6c <SD_Init>
    ILI9341_FillScreen(0x0000); // Clear the screen with black color
 80022d0:	2000      	movs	r0, #0
 80022d2:	f001 fa03 	bl	80036dc <ILI9341_FillScreen>
    currentState = IDLE;
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <init_game+0x38>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]

    // Debugging output
    uart_send_string("Game initialized. System ready!\n\r");
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <init_game+0x3c>)
 80022de:	f002 fc81 	bl	8004be4 <uart_send_string>

    // Additional setup for game variables (if needed)
    // Example: Initialize Pokémon health, score, or other gameplay elements
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200012d8 	.word	0x200012d8
 80022ec:	0800f698 	.word	0x0800f698

080022f0 <spawn_pokemon_from_array>:

const char *spawn_pokemon_from_array(const char *pokemon_array[]) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09c      	sub	sp, #112	@ 0x70
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    uint32_t index = rand() % POKEMON_COUNT; // Generate a random index
 80022f8:	f00a f8f2 	bl	800c4e0 <rand>
 80022fc:	4601      	mov	r1, r0
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <spawn_pokemon_from_array+0x60>)
 8002300:	fb83 2301 	smull	r2, r3, r3, r1
 8002304:	109a      	asrs	r2, r3, #2
 8002306:	17cb      	asrs	r3, r1, #31
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1aca      	subs	r2, r1, r3
 8002314:	66fa      	str	r2, [r7, #108]	@ 0x6c
    char buffer[100];
    sprintf(buffer, "A wild %s appears!", pokemon_array[index]);
 8002316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	490b      	ldr	r1, [pc, #44]	@ (8002354 <spawn_pokemon_from_array+0x64>)
 8002326:	4618      	mov	r0, r3
 8002328:	f00a fea2 	bl	800d070 <siprintf>
    uart_send_string(buffer);
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	4618      	mov	r0, r3
 8002332:	f002 fc57 	bl	8004be4 <uart_send_string>
    uart_send_string("\n\r");
 8002336:	4808      	ldr	r0, [pc, #32]	@ (8002358 <spawn_pokemon_from_array+0x68>)
 8002338:	f002 fc54 	bl	8004be4 <uart_send_string>

    // Display on LCD

    return pokemon_array[index]; // Return the name of the Pokémon
 800233c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3770      	adds	r7, #112	@ 0x70
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	66666667 	.word	0x66666667
 8002354:	0800f6bc 	.word	0x0800f6bc
 8002358:	0800f6d0 	.word	0x0800f6d0

0800235c <game_state_machine>:

void game_state_machine() {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b0e1      	sub	sp, #388	@ 0x184
 8002360:	af04      	add	r7, sp, #16
    switch (currentState) {
 8002362:	4bbc      	ldr	r3, [pc, #752]	@ (8002654 <game_state_machine+0x2f8>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b06      	cmp	r3, #6
 8002368:	f200 8742 	bhi.w	80031f0 <game_state_machine+0xe94>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <game_state_machine+0x18>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002391 	.word	0x08002391
 8002378:	08002457 	.word	0x08002457
 800237c:	080025d7 	.word	0x080025d7
 8002380:	080027b3 	.word	0x080027b3
 8002384:	08002849 	.word	0x08002849
 8002388:	08002c09 	.word	0x08002c09
 800238c:	08003017 	.word	0x08003017
    // Add a flag to track whether the welcome message has been displayed


    case IDLE:
        if (!welcome_message_displayed) {
 8002390:	4bb1      	ldr	r3, [pc, #708]	@ (8002658 <game_state_machine+0x2fc>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d044      	beq.n	8002428 <game_state_machine+0xcc>
            // Clear the screen and add a welcome message
            ILI9341_FillScreen(0x0000); // Clear the screen
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 f99c 	bl	80036dc <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 60, 0x001F); // Blue title background
 80023a4:	231f      	movs	r3, #31
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	233c      	movs	r3, #60	@ 0x3c
 80023aa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80023ae:	2100      	movs	r1, #0
 80023b0:	2000      	movs	r0, #0
 80023b2:	f001 fbc5 	bl	8003b40 <ILI9341_FillRect>

            // Center-align the "Welcome to Pokemon Adventure!" text
            // Center-align the "Welcome to Pokemon Adventure!" text
            DrawString(60, 15, "Welcome to", 0xFFFF, 0x001F, 2); // Line 1
 80023b6:	2302      	movs	r3, #2
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	231f      	movs	r3, #31
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023c2:	4aa6      	ldr	r2, [pc, #664]	@ (800265c <game_state_machine+0x300>)
 80023c4:	210f      	movs	r1, #15
 80023c6:	203c      	movs	r0, #60	@ 0x3c
 80023c8:	f001 fb8a 	bl	8003ae0 <DrawString>
            DrawString(20, 35, "Pokemon Adventure!", 0xFFFF, 0x001F, 2); // Line 2
 80023cc:	2302      	movs	r3, #2
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	231f      	movs	r3, #31
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023d8:	4aa1      	ldr	r2, [pc, #644]	@ (8002660 <game_state_machine+0x304>)
 80023da:	2123      	movs	r1, #35	@ 0x23
 80023dc:	2014      	movs	r0, #20
 80023de:	f001 fb7f 	bl	8003ae0 <DrawString>

            // Center-align the "Wave your hand to start!" text
            DrawString(40, 100, "Wave your hand", 0xFFFF, 0x0000, 2); // Line 1
 80023e2:	2302      	movs	r3, #2
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002664 <game_state_machine+0x308>)
 80023f0:	2164      	movs	r1, #100	@ 0x64
 80023f2:	2028      	movs	r0, #40	@ 0x28
 80023f4:	f001 fb74 	bl	8003ae0 <DrawString>
            DrawString(70, 120, "to start!", 0xFFFF, 0x0000, 2); // Line 2
 80023f8:	2302      	movs	r3, #2
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002404:	4a98      	ldr	r2, [pc, #608]	@ (8002668 <game_state_machine+0x30c>)
 8002406:	2178      	movs	r1, #120	@ 0x78
 8002408:	2046      	movs	r0, #70	@ 0x46
 800240a:	f001 fb69 	bl	8003ae0 <DrawString>
            uart_send_string("Waiting for IR sensor trigger...\n\r");
 800240e:	4897      	ldr	r0, [pc, #604]	@ (800266c <game_state_machine+0x310>)
 8002410:	f002 fbe8 	bl	8004be4 <uart_send_string>

            HAL_Delay(2000);
 8002414:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002418:	f002 fca0 	bl	8004d5c <HAL_Delay>

            process_SD_card("init3.bmp");
 800241c:	4894      	ldr	r0, [pc, #592]	@ (8002670 <game_state_machine+0x314>)
 800241e:	f7ff fbc7 	bl	8001bb0 <process_SD_card>

            // Set the flag to true after displaying the message
            welcome_message_displayed = true;
 8002422:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <game_state_machine+0x2fc>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
        }

        // Wait for IR sensor trigger
        ir_triggered = 0;
 8002428:	4b92      	ldr	r3, [pc, #584]	@ (8002674 <game_state_machine+0x318>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
        if (IR_is_triggered()) {
 800242e:	f7ff ff2b 	bl	8002288 <IR_is_triggered>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 86d8 	beq.w	80031ea <game_state_machine+0xe8e>
            // Transition to SENSOR_READ when IR is triggered
            uart_send_string("Pokemon detected! Moving to SENSOR_READ.\n\r");
 800243a:	488f      	ldr	r0, [pc, #572]	@ (8002678 <game_state_machine+0x31c>)
 800243c:	f002 fbd2 	bl	8004be4 <uart_send_string>

            // Clear the screen for the next state
            ILI9341_FillScreen(0x0000);
 8002440:	2000      	movs	r0, #0
 8002442:	f001 f94b 	bl	80036dc <ILI9341_FillScreen>
            currentState = SENSOR_READ;
 8002446:	4b83      	ldr	r3, [pc, #524]	@ (8002654 <game_state_machine+0x2f8>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]

            // Reset the flag for the next time IDLE is entered
            welcome_message_displayed = false;
 800244c:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <game_state_machine+0x2fc>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002452:	f000 beca 	b.w	80031ea <game_state_machine+0xe8e>

        case SENSOR_READ: {
            ILI9341_FillScreen(0x0000); // Clear the screen before displaying new data
 8002456:	2000      	movs	r0, #0
 8002458:	f001 f940 	bl	80036dc <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for heading
 800245c:	231f      	movs	r3, #31
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2328      	movs	r3, #40	@ 0x28
 8002462:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002466:	2100      	movs	r1, #0
 8002468:	2000      	movs	r0, #0
 800246a:	f001 fb69 	bl	8003b40 <ILI9341_FillRect>
            DrawString(10, 10, "Sensor Readings", 0xFFFF, 0x001F, 2); // Heading in white text
 800246e:	2302      	movs	r3, #2
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	231f      	movs	r3, #31
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800247a:	4a80      	ldr	r2, [pc, #512]	@ (800267c <game_state_machine+0x320>)
 800247c:	210a      	movs	r1, #10
 800247e:	200a      	movs	r0, #10
 8002480:	f001 fb2e 	bl	8003ae0 <DrawString>

            DHT_DataTypedef DHT_Data;
            DHT_GetData(&DHT_Data); // Read DHT11 data
 8002484:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fe35 	bl	80010f8 <DHT_GetData>

            // Only use humidity from DHT11
            dht11_humidity = (int)DHT_Data.Humidity;
 800248e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002496:	ee17 2a90 	vmov	r2, s15
 800249a:	4b79      	ldr	r3, [pc, #484]	@ (8002680 <game_state_machine+0x324>)
 800249c:	601a      	str	r2, [r3, #0]

            // Read temperature from DS18B20
            //temp_sensor_check();
            ds18b20_temperature = temperature;
 800249e:	4b79      	ldr	r3, [pc, #484]	@ (8002684 <game_state_machine+0x328>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a79      	ldr	r2, [pc, #484]	@ (8002688 <game_state_machine+0x32c>)
 80024a4:	6013      	str	r3, [r2, #0]

            // Debug output for humidity and temperature
            char buffer[100];
            sprintf(buffer, "Humidity: %d%%", dht11_humidity);
 80024a6:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <game_state_machine+0x324>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80024ae:	4977      	ldr	r1, [pc, #476]	@ (800268c <game_state_machine+0x330>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00a fddd 	bl	800d070 <siprintf>
            uart_send_string(buffer);
 80024b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fb92 	bl	8004be4 <uart_send_string>
            DrawString(10, 50, buffer, 0xFFFF, 0x0000, 1); // Display humidity on the screen
 80024c0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80024c4:	2301      	movs	r3, #1
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	2300      	movs	r3, #0
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d0:	2132      	movs	r1, #50	@ 0x32
 80024d2:	200a      	movs	r0, #10
 80024d4:	f001 fb04 	bl	8003ae0 <DrawString>

            sprintf(buffer, "Temperature: %.2f°C", ds18b20_temperature);
 80024d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002688 <game_state_machine+0x32c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f83b 	bl	8000558 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80024ea:	4969      	ldr	r1, [pc, #420]	@ (8002690 <game_state_machine+0x334>)
 80024ec:	f00a fdc0 	bl	800d070 <siprintf>
            uart_send_string(buffer);
 80024f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fb75 	bl	8004be4 <uart_send_string>
            DrawString(10, 70, buffer, 0xFFFF, 0x0000, 1); // Display temperature on the screen
 80024fa:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80024fe:	2301      	movs	r3, #1
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2300      	movs	r3, #0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800250a:	2146      	movs	r1, #70	@ 0x46
 800250c:	200a      	movs	r0, #10
 800250e:	f001 fae7 	bl	8003ae0 <DrawString>

            if (ds18b20_temperature > 25.0) {
 8002512:	4b5d      	ldr	r3, [pc, #372]	@ (8002688 <game_state_machine+0x32c>)
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800251c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	dd19      	ble.n	800255a <game_state_machine+0x1fe>
                // Split the reasoning message into two lines
                DrawString(10, 100, "Reason:", 0xF800, 0x0000, 1); // Display "Reason:" in red
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002532:	4a58      	ldr	r2, [pc, #352]	@ (8002694 <game_state_machine+0x338>)
 8002534:	2164      	movs	r1, #100	@ 0x64
 8002536:	200a      	movs	r0, #10
 8002538:	f001 fad2 	bl	8003ae0 <DrawString>
                DrawString(10, 120, "High temperature -> Fire type.", 0xF800, 0x0000, 1); // Second line for explanation
 800253c:	2301      	movs	r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002548:	4a53      	ldr	r2, [pc, #332]	@ (8002698 <game_state_machine+0x33c>)
 800254a:	2178      	movs	r1, #120	@ 0x78
 800254c:	200a      	movs	r0, #10
 800254e:	f001 fac7 	bl	8003ae0 <DrawString>
                uart_send_string("Reason: High temperature -> Fire type.\n\r");
 8002552:	4852      	ldr	r0, [pc, #328]	@ (800269c <game_state_machine+0x340>)
 8002554:	f002 fb46 	bl	8004be4 <uart_send_string>
 8002558:	e034      	b.n	80025c4 <game_state_machine+0x268>
            } else if (dht11_humidity > 60) {
 800255a:	4b49      	ldr	r3, [pc, #292]	@ (8002680 <game_state_machine+0x324>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002560:	dd17      	ble.n	8002592 <game_state_machine+0x236>
                // Split the reasoning message into two lines
                DrawString(10, 100, "Reason:", 0x001F, 0x0000, 1); // Display "Reason:" in blue
 8002562:	2301      	movs	r3, #1
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	231f      	movs	r3, #31
 800256c:	4a49      	ldr	r2, [pc, #292]	@ (8002694 <game_state_machine+0x338>)
 800256e:	2164      	movs	r1, #100	@ 0x64
 8002570:	200a      	movs	r0, #10
 8002572:	f001 fab5 	bl	8003ae0 <DrawString>
                DrawString(10, 120, "High humidity -> Water type.", 0x001F, 0x0000, 1); // Second line for explanation
 8002576:	2301      	movs	r3, #1
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	231f      	movs	r3, #31
 8002580:	4a47      	ldr	r2, [pc, #284]	@ (80026a0 <game_state_machine+0x344>)
 8002582:	2178      	movs	r1, #120	@ 0x78
 8002584:	200a      	movs	r0, #10
 8002586:	f001 faab 	bl	8003ae0 <DrawString>
                uart_send_string("Reason: High humidity -> Water type.\n\r");
 800258a:	4846      	ldr	r0, [pc, #280]	@ (80026a4 <game_state_machine+0x348>)
 800258c:	f002 fb2a 	bl	8004be4 <uart_send_string>
 8002590:	e018      	b.n	80025c4 <game_state_machine+0x268>
            } else {
                // Split the reasoning message into two lines
                DrawString(10, 100, "Reason:", 0x07E0, 0x0000, 1); // Display "Reason:" in green
 8002592:	2301      	movs	r3, #1
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800259e:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <game_state_machine+0x338>)
 80025a0:	2164      	movs	r1, #100	@ 0x64
 80025a2:	200a      	movs	r0, #10
 80025a4:	f001 fa9c 	bl	8003ae0 <DrawString>
                DrawString(10, 120, "Neutral conditions -> Normal type.", 0x07E0, 0x0000, 1); // Second line for explanation
 80025a8:	2301      	movs	r3, #1
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025b4:	4a3c      	ldr	r2, [pc, #240]	@ (80026a8 <game_state_machine+0x34c>)
 80025b6:	2178      	movs	r1, #120	@ 0x78
 80025b8:	200a      	movs	r0, #10
 80025ba:	f001 fa91 	bl	8003ae0 <DrawString>
                uart_send_string("Reason: Neutral conditions -> Normal type.\n\r");
 80025be:	483b      	ldr	r0, [pc, #236]	@ (80026ac <game_state_machine+0x350>)
 80025c0:	f002 fb10 	bl	8004be4 <uart_send_string>
            }

            HAL_Delay(2000); // Allow time for the user to view the readings
 80025c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025c8:	f002 fbc8 	bl	8004d5c <HAL_Delay>
            currentState = CHECK_POKEMON_ENCOUNTER; // Move to next state
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <game_state_machine+0x2f8>)
 80025ce:	2202      	movs	r2, #2
 80025d0:	701a      	strb	r2, [r3, #0]
            break;
 80025d2:	f000 be0d 	b.w	80031f0 <game_state_machine+0xe94>
        }


        case CHECK_POKEMON_ENCOUNTER: {
            FlashScreen(3, 50); // Flash to indicate encounter transition
 80025d6:	2132      	movs	r1, #50	@ 0x32
 80025d8:	2003      	movs	r0, #3
 80025da:	f001 fbf5 	bl	8003dc8 <FlashScreen>
            ILI9341_FillScreen(0x0000);
 80025de:	2000      	movs	r0, #0
 80025e0:	f001 f87c 	bl	80036dc <ILI9341_FillScreen>
            ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for heading
 80025e4:	231f      	movs	r3, #31
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2328      	movs	r3, #40	@ 0x28
 80025ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025ee:	2100      	movs	r1, #0
 80025f0:	2000      	movs	r0, #0
 80025f2:	f001 faa5 	bl	8003b40 <ILI9341_FillRect>
            DrawString(10, 10, "Pokemon Encounter!", 0xFFFF, 0x001F, 2); // White text on blue background
 80025f6:	2302      	movs	r3, #2
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	231f      	movs	r3, #31
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002602:	4a2b      	ldr	r2, [pc, #172]	@ (80026b0 <game_state_machine+0x354>)
 8002604:	210a      	movs	r1, #10
 8002606:	200a      	movs	r0, #10
 8002608:	f001 fa6a 	bl	8003ae0 <DrawString>

            // Reset health and damage for the new Pokémon
            pokemon_health_percentage = 100;
 800260c:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <game_state_machine+0x358>)
 800260e:	2264      	movs	r2, #100	@ 0x64
 8002610:	601a      	str	r2, [r3, #0]
            previous_damage = 0;
 8002612:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <game_state_machine+0x35c>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

            // Determine Pokémon to spawn
            const char *pokemon_name = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
            if (ds18b20_temperature > 25.0) {
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <game_state_machine+0x32c>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	dd05      	ble.n	800263e <game_state_machine+0x2e2>
                pokemon_name = spawn_pokemon_from_array(fire_pokemon);
 8002632:	4822      	ldr	r0, [pc, #136]	@ (80026bc <game_state_machine+0x360>)
 8002634:	f7ff fe5c 	bl	80022f0 <spawn_pokemon_from_array>
 8002638:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 800263c:	e047      	b.n	80026ce <game_state_machine+0x372>
            } else if (dht11_humidity > 60) {
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <game_state_machine+0x324>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b3c      	cmp	r3, #60	@ 0x3c
 8002644:	dd3e      	ble.n	80026c4 <game_state_machine+0x368>
                pokemon_name = spawn_pokemon_from_array(water_pokemon);
 8002646:	481e      	ldr	r0, [pc, #120]	@ (80026c0 <game_state_machine+0x364>)
 8002648:	f7ff fe52 	bl	80022f0 <spawn_pokemon_from_array>
 800264c:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 8002650:	e03d      	b.n	80026ce <game_state_machine+0x372>
 8002652:	bf00      	nop
 8002654:	200012d8 	.word	0x200012d8
 8002658:	200012e0 	.word	0x200012e0
 800265c:	0800f6d4 	.word	0x0800f6d4
 8002660:	0800f6e0 	.word	0x0800f6e0
 8002664:	0800f6f4 	.word	0x0800f6f4
 8002668:	0800f704 	.word	0x0800f704
 800266c:	0800f710 	.word	0x0800f710
 8002670:	0800f734 	.word	0x0800f734
 8002674:	200012d4 	.word	0x200012d4
 8002678:	0800f740 	.word	0x0800f740
 800267c:	0800f76c 	.word	0x0800f76c
 8002680:	200012e4 	.word	0x200012e4
 8002684:	20000290 	.word	0x20000290
 8002688:	200012e8 	.word	0x200012e8
 800268c:	0800f77c 	.word	0x0800f77c
 8002690:	0800f78c 	.word	0x0800f78c
 8002694:	0800f7a4 	.word	0x0800f7a4
 8002698:	0800f7ac 	.word	0x0800f7ac
 800269c:	0800f7cc 	.word	0x0800f7cc
 80026a0:	0800f7f8 	.word	0x0800f7f8
 80026a4:	0800f818 	.word	0x0800f818
 80026a8:	0800f840 	.word	0x0800f840
 80026ac:	0800f864 	.word	0x0800f864
 80026b0:	0800f894 	.word	0x0800f894
 80026b4:	20000004 	.word	0x20000004
 80026b8:	200012dc 	.word	0x200012dc
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20000058 	.word	0x20000058
            } else {
                pokemon_name = spawn_pokemon_from_array(normal_pokemon);
 80026c4:	48ce      	ldr	r0, [pc, #824]	@ (8002a00 <game_state_machine+0x6a4>)
 80026c6:	f7ff fe13 	bl	80022f0 <spawn_pokemon_from_array>
 80026ca:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
            }
            strcpy(current_pokemon, pokemon_name);
 80026ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80026d2:	48cc      	ldr	r0, [pc, #816]	@ (8002a04 <game_state_machine+0x6a8>)
 80026d4:	f00a fe43 	bl	800d35e <strcpy>

            // Display the Pokémon name
            char buffer[100];
            DrawString(10, 60, "A wild", 0xFFFF, 0x0000, 2); // White text
 80026d8:	2302      	movs	r3, #2
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e4:	4ac8      	ldr	r2, [pc, #800]	@ (8002a08 <game_state_machine+0x6ac>)
 80026e6:	213c      	movs	r1, #60	@ 0x3c
 80026e8:	200a      	movs	r0, #10
 80026ea:	f001 f9f9 	bl	8003ae0 <DrawString>
            sprintf(buffer, "%s", pokemon_name);
 80026ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026f2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80026f6:	49c5      	ldr	r1, [pc, #788]	@ (8002a0c <game_state_machine+0x6b0>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fcb9 	bl	800d070 <siprintf>
            DrawString(10, 90, buffer, 0xFFFF, 0x0000, 2); // Pokémon name
 80026fe:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002702:	2302      	movs	r3, #2
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800270e:	215a      	movs	r1, #90	@ 0x5a
 8002710:	200a      	movs	r0, #10
 8002712:	f001 f9e5 	bl	8003ae0 <DrawString>
            DrawString(10 + (strlen(buffer) * 12) + 10, 90, "appears!", 0xFFFF, 0x0000, 2); // Adjusted text position
 8002716:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fdb0 	bl	8000280 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	0052      	lsls	r2, r2, #1
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	b29b      	uxth	r3, r3
 800272e:	3314      	adds	r3, #20
 8002730:	b298      	uxth	r0, r3
 8002732:	2302      	movs	r3, #2
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800273e:	4ab4      	ldr	r2, [pc, #720]	@ (8002a10 <game_state_machine+0x6b4>)
 8002740:	215a      	movs	r1, #90	@ 0x5a
 8002742:	f001 f9cd 	bl	8003ae0 <DrawString>

            uart_send_string("A wild ");
 8002746:	48b3      	ldr	r0, [pc, #716]	@ (8002a14 <game_state_machine+0x6b8>)
 8002748:	f002 fa4c 	bl	8004be4 <uart_send_string>
            uart_send_string(buffer);
 800274c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fa47 	bl	8004be4 <uart_send_string>
            uart_send_string(" appears!\n\r");
 8002756:	48b0      	ldr	r0, [pc, #704]	@ (8002a18 <game_state_machine+0x6bc>)
 8002758:	f002 fa44 	bl	8004be4 <uart_send_string>

            // Prompt user to select an action
            DrawString(10, 120, "Select an action:", 0x07E0, 0x0000, 2); // Green text
 800275c:	2302      	movs	r3, #2
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002768:	4aac      	ldr	r2, [pc, #688]	@ (8002a1c <game_state_machine+0x6c0>)
 800276a:	2178      	movs	r1, #120	@ 0x78
 800276c:	200a      	movs	r0, #10
 800276e:	f001 f9b7 	bl	8003ae0 <DrawString>
            DrawString(10, 160, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 8002772:	2302      	movs	r3, #2
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800277e:	4aa8      	ldr	r2, [pc, #672]	@ (8002a20 <game_state_machine+0x6c4>)
 8002780:	21a0      	movs	r1, #160	@ 0xa0
 8002782:	200a      	movs	r0, #10
 8002784:	f001 f9ac 	bl	8003ae0 <DrawString>
            DrawString(10, 200, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 8002788:	2302      	movs	r3, #2
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002794:	4aa3      	ldr	r2, [pc, #652]	@ (8002a24 <game_state_machine+0x6c8>)
 8002796:	21c8      	movs	r1, #200	@ 0xc8
 8002798:	200a      	movs	r0, #10
 800279a:	f001 f9a1 	bl	8003ae0 <DrawString>

            uart_send_string("\rSelect an action: Press button for Battle or Capture.\n\r");
 800279e:	48a2      	ldr	r0, [pc, #648]	@ (8002a28 <game_state_machine+0x6cc>)
 80027a0:	f002 fa20 	bl	8004be4 <uart_send_string>
            Reset_Button_State(); // Reset button state for selection
 80027a4:	f001 fe82 	bl	80044ac <Reset_Button_State>
            currentState = SELECT_ACTION;
 80027a8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a2c <game_state_machine+0x6d0>)
 80027aa:	2203      	movs	r2, #3
 80027ac:	701a      	strb	r2, [r3, #0]
            break;
 80027ae:	f000 bd1f 	b.w	80031f0 <game_state_machine+0xe94>
        }
        case SELECT_ACTION: {
            // Wait for button press
            if (Get_Battle_Button_State()) { // PC13 for Battle
 80027b2:	f001 fe63 	bl	800447c <Get_Battle_Button_State>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <game_state_machine+0x4a2>
                uart_send_string("Battle selected!\n\r");
 80027bc:	489c      	ldr	r0, [pc, #624]	@ (8002a30 <game_state_machine+0x6d4>)
 80027be:	f002 fa11 	bl	8004be4 <uart_send_string>

                ILI9341_FillScreen(0x0000); // Clear the screen
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 ff8a 	bl	80036dc <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0xF800); // Red background for Battle heading
 80027c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2328      	movs	r3, #40	@ 0x28
 80027d0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80027d4:	2100      	movs	r1, #0
 80027d6:	2000      	movs	r0, #0
 80027d8:	f001 f9b2 	bl	8003b40 <ILI9341_FillRect>
                DrawString(10, 10, "Battle Mode!", 0xFFFF, 0xF800, 3); // White text on red background
 80027dc:	2303      	movs	r3, #3
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ea:	4a92      	ldr	r2, [pc, #584]	@ (8002a34 <game_state_machine+0x6d8>)
 80027ec:	210a      	movs	r1, #10
 80027ee:	200a      	movs	r0, #10
 80027f0:	f001 f976 	bl	8003ae0 <DrawString>

                currentState = BATTLE; // Transition to Battle state
 80027f4:	4b8d      	ldr	r3, [pc, #564]	@ (8002a2c <game_state_machine+0x6d0>)
 80027f6:	2204      	movs	r2, #4
 80027f8:	701a      	strb	r2, [r3, #0]
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background

                currentState = CAPTURE; // Transition to Capture state
            }
            break;
 80027fa:	f000 bcf8 	b.w	80031ee <game_state_machine+0xe92>
            } else if (Get_Capture_Button_State()) { // PC14 for Capture
 80027fe:	f001 fe49 	bl	8004494 <Get_Capture_Button_State>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 84f2 	beq.w	80031ee <game_state_machine+0xe92>
                uart_send_string("Capture selected!\n\r");
 800280a:	488b      	ldr	r0, [pc, #556]	@ (8002a38 <game_state_machine+0x6dc>)
 800280c:	f002 f9ea 	bl	8004be4 <uart_send_string>
                ILI9341_FillScreen(0x0000); // Clear the screen
 8002810:	2000      	movs	r0, #0
 8002812:	f000 ff63 	bl	80036dc <ILI9341_FillScreen>
                ILI9341_FillRect(0, 0, 320, 40, 0x001F); // Blue background for Capture heading
 8002816:	231f      	movs	r3, #31
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2328      	movs	r3, #40	@ 0x28
 800281c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002820:	2100      	movs	r1, #0
 8002822:	2000      	movs	r0, #0
 8002824:	f001 f98c 	bl	8003b40 <ILI9341_FillRect>
                DrawString(10, 10, "Capture Mode!", 0xFFFF, 0x001F, 3); // White text on blue background
 8002828:	2303      	movs	r3, #3
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	231f      	movs	r3, #31
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002834:	4a81      	ldr	r2, [pc, #516]	@ (8002a3c <game_state_machine+0x6e0>)
 8002836:	210a      	movs	r1, #10
 8002838:	200a      	movs	r0, #10
 800283a:	f001 f951 	bl	8003ae0 <DrawString>
                currentState = CAPTURE; // Transition to Capture state
 800283e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a2c <game_state_machine+0x6d0>)
 8002840:	2205      	movs	r2, #5
 8002842:	701a      	strb	r2, [r3, #0]
            break;
 8002844:	f000 bcd3 	b.w	80031ee <game_state_machine+0xe92>
        }


        case BATTLE: {
            uart_send_string("Battle initiated! Shake the board to attack.\n\r");
 8002848:	487d      	ldr	r0, [pc, #500]	@ (8002a40 <game_state_machine+0x6e4>)
 800284a:	f002 f9cb 	bl	8004be4 <uart_send_string>
            DrawString(10, 60, "Shake to attack!", 0x07E0, 0x0000, 2); // Green text, size 2
 800284e:	2302      	movs	r3, #2
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800285a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a44 <game_state_machine+0x6e8>)
 800285c:	213c      	movs	r1, #60	@ 0x3c
 800285e:	200a      	movs	r0, #10
 8002860:	f001 f93e 	bl	8003ae0 <DrawString>

            // Countdown before shaking
            for (int countdown = 3; countdown > 0; countdown--) {
 8002864:	2303      	movs	r3, #3
 8002866:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800286a:	e029      	b.n	80028c0 <game_state_machine+0x564>
                char buffer[50];
                sprintf(buffer, "Prepare to shake in: %d\n\r", countdown);
 800286c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002870:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002874:	4974      	ldr	r1, [pc, #464]	@ (8002a48 <game_state_machine+0x6ec>)
 8002876:	4618      	mov	r0, r3
 8002878:	f00a fbfa 	bl	800d070 <siprintf>
                uart_send_string(buffer);
 800287c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002880:	4618      	mov	r0, r3
 8002882:	f002 f9af 	bl	8004be4 <uart_send_string>

                char lcd_buffer[20];
                sprintf(lcd_buffer, "Shake in: %d", countdown);
 8002886:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800288a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800288e:	496f      	ldr	r1, [pc, #444]	@ (8002a4c <game_state_machine+0x6f0>)
 8002890:	4618      	mov	r0, r3
 8002892:	f00a fbed 	bl	800d070 <siprintf>
                DrawString(10, 100, lcd_buffer, 0xFFFF, 0x0000, 2); // White text
 8002896:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 800289a:	2302      	movs	r3, #2
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a6:	2164      	movs	r1, #100	@ 0x64
 80028a8:	200a      	movs	r0, #10
 80028aa:	f001 f919 	bl	8003ae0 <DrawString>
                HAL_Delay(1000); // 1-second delay
 80028ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028b2:	f002 fa53 	bl	8004d5c <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 80028b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80028c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	dcd1      	bgt.n	800286c <game_state_machine+0x510>
            }

            uart_send_string("Shake the board now!\n\r");
 80028c8:	4861      	ldr	r0, [pc, #388]	@ (8002a50 <game_state_machine+0x6f4>)
 80028ca:	f002 f98b 	bl	8004be4 <uart_send_string>
            DrawString(10, 150, "Attack Progress:", 0xFFFF, 0x0000, 2); // Display attack progress on LCD
 80028ce:	2302      	movs	r3, #2
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028da:	4a5e      	ldr	r2, [pc, #376]	@ (8002a54 <game_state_machine+0x6f8>)
 80028dc:	2196      	movs	r1, #150	@ 0x96
 80028de:	200a      	movs	r0, #10
 80028e0:	f001 f8fe 	bl	8003ae0 <DrawString>

            const uint32_t duration = 3000; // Duration for shaking (3 seconds)
 80028e4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80028e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            const int threshold = 2000;    // Threshold for shake detection
 80028ec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80028f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            const int max_shakes = 70;     // Maximum allowed shakes for 100% health
 80028f4:	2346      	movs	r3, #70	@ 0x46
 80028f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            uint32_t start_time = HAL_GetTick();
 80028fa:	f002 fa23 	bl	8004d44 <HAL_GetTick>
 80028fe:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
            uint32_t shake_count = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

            // Progress bar and shake detection loop
            while ((HAL_GetTick() - start_time) < duration) {
 8002908:	e038      	b.n	800297c <game_state_machine+0x620>
                uint32_t elapsed = HAL_GetTick() - start_time;
 800290a:	f002 fa1b 	bl	8004d44 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                int percentage = (elapsed * 100) / duration;
 800291a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800291e:	2264      	movs	r2, #100	@ 0x64
 8002920:	fb03 f202 	mul.w	r2, r3, r2
 8002924:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                // Update progress bar dynamically
                progress_bar(10, 200, 220, 20, 0x07E0, 0x0000, percentage); // Green progress bar
 8002930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2314      	movs	r3, #20
 8002942:	22dc      	movs	r2, #220	@ 0xdc
 8002944:	21c8      	movs	r1, #200	@ 0xc8
 8002946:	200a      	movs	r0, #10
 8002948:	f001 f9f8 	bl	8003d3c <progress_bar>

                // Detect shakes
                int32_t magnitude = MPU_read();
 800294c:	f000 fd7a 	bl	8003444 <MPU_read>
 8002950:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (magnitude > threshold && shake_count < max_shakes) {
 8002954:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800295c:	429a      	cmp	r2, r3
 800295e:	dd0a      	ble.n	8002976 <game_state_machine+0x61a>
 8002960:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002964:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002968:	429a      	cmp	r2, r3
 800296a:	d204      	bcs.n	8002976 <game_state_machine+0x61a>
                    shake_count++;
 800296c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
                }

                HAL_Delay(50); // Small delay for smoother updates
 8002976:	2032      	movs	r0, #50	@ 0x32
 8002978:	f002 f9f0 	bl	8004d5c <HAL_Delay>
            while ((HAL_GetTick() - start_time) < duration) {
 800297c:	f002 f9e2 	bl	8004d44 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800298c:	429a      	cmp	r2, r3
 800298e:	d8bc      	bhi.n	800290a <game_state_machine+0x5ae>
            }

            // Calculate damage
            int base_damage = 10;
 8002990:	230a      	movs	r3, #10
 8002992:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            int total_damage = shake_count * base_damage;
 8002996:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800299a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

            // Update `previous_damage`
            static int previous_damage = 0; // Persistent across calls
            previous_damage += total_damage;
 80029a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a58 <game_state_machine+0x6fc>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ae:	4413      	add	r3, r2
 80029b0:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <game_state_machine+0x6fc>)
 80029b2:	6013      	str	r3, [r2, #0]

            // Calculate health percentage
            int max_health = max_shakes * base_damage; // Maximum possible damage
 80029b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80029b8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            pokemon_health_percentage = 100 - ((previous_damage * 100) / max_health);
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <game_state_machine+0x6fc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2264      	movs	r2, #100	@ 0x64
 80029ca:	fb03 f202 	mul.w	r2, r3, r2
 80029ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80029d6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80029da:	4a20      	ldr	r2, [pc, #128]	@ (8002a5c <game_state_machine+0x700>)
 80029dc:	6013      	str	r3, [r2, #0]
            if (pokemon_health_percentage < 0) {
 80029de:	4b1f      	ldr	r3, [pc, #124]	@ (8002a5c <game_state_machine+0x700>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da02      	bge.n	80029ec <game_state_machine+0x690>
                pokemon_health_percentage = 0; // Ensure it doesn't go below 0%
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <game_state_machine+0x700>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
            }

            // Determine health bar color based on health percentage
            uint16_t health_color;
            if (pokemon_health_percentage <= 0) {
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <game_state_machine+0x700>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	dc35      	bgt.n	8002a60 <game_state_machine+0x704>
                health_color = 0xF800; // Red for fainted
 80029f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029f8:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 80029fc:	e046      	b.n	8002a8c <game_state_machine+0x730>
 80029fe:	bf00      	nop
 8002a00:	20000030 	.word	0x20000030
 8002a04:	200012ec 	.word	0x200012ec
 8002a08:	0800f8a8 	.word	0x0800f8a8
 8002a0c:	0800f8b0 	.word	0x0800f8b0
 8002a10:	0800f8b4 	.word	0x0800f8b4
 8002a14:	0800f8c0 	.word	0x0800f8c0
 8002a18:	0800f8c8 	.word	0x0800f8c8
 8002a1c:	0800f8d4 	.word	0x0800f8d4
 8002a20:	0800f8e8 	.word	0x0800f8e8
 8002a24:	0800f8f8 	.word	0x0800f8f8
 8002a28:	0800f908 	.word	0x0800f908
 8002a2c:	200012d8 	.word	0x200012d8
 8002a30:	0800f944 	.word	0x0800f944
 8002a34:	0800f958 	.word	0x0800f958
 8002a38:	0800f968 	.word	0x0800f968
 8002a3c:	0800f97c 	.word	0x0800f97c
 8002a40:	0800f98c 	.word	0x0800f98c
 8002a44:	0800f9bc 	.word	0x0800f9bc
 8002a48:	0800f9d0 	.word	0x0800f9d0
 8002a4c:	0800f9ec 	.word	0x0800f9ec
 8002a50:	0800f9fc 	.word	0x0800f9fc
 8002a54:	0800fa14 	.word	0x0800fa14
 8002a58:	20001320 	.word	0x20001320
 8002a5c:	20000004 	.word	0x20000004
            } else if (pokemon_health_percentage < 40) {
 8002a60:	4bc9      	ldr	r3, [pc, #804]	@ (8002d88 <game_state_machine+0xa2c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b27      	cmp	r3, #39	@ 0x27
 8002a66:	dc04      	bgt.n	8002a72 <game_state_machine+0x716>
                health_color = 0xF800; // Red for health < 40%
 8002a68:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a6c:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8002a70:	e00c      	b.n	8002a8c <game_state_machine+0x730>
            } else if (pokemon_health_percentage < 75) {
 8002a72:	4bc5      	ldr	r3, [pc, #788]	@ (8002d88 <game_state_machine+0xa2c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b4a      	cmp	r3, #74	@ 0x4a
 8002a78:	dc04      	bgt.n	8002a84 <game_state_machine+0x728>
                health_color = 0xFFE0; // Yellow for health between 40% and 75%
 8002a7a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a7e:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8002a82:	e003      	b.n	8002a8c <game_state_machine+0x730>
            } else {
                health_color = 0x07E0; // Green for health >= 75%
 8002a84:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a88:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
            }

            // Clear the screen and move to results
            ILI9341_FillScreen(0x0000); // Clear screen for results display
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 fe25 	bl	80036dc <ILI9341_FillScreen>

            // Display results on the new screen
            uart_send_string("Battle complete! Displaying results...\n\r");
 8002a92:	48be      	ldr	r0, [pc, #760]	@ (8002d8c <game_state_machine+0xa30>)
 8002a94:	f002 f8a6 	bl	8004be4 <uart_send_string>
            DrawString(10, 20, "Battle Results:", 0xFFE0, 0x0000, 2); // Yellow text
 8002a98:	2302      	movs	r3, #2
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002aa4:	4aba      	ldr	r2, [pc, #744]	@ (8002d90 <game_state_machine+0xa34>)
 8002aa6:	2114      	movs	r1, #20
 8002aa8:	200a      	movs	r0, #10
 8002aaa:	f001 f819 	bl	8003ae0 <DrawString>

            // Display shake count
            char buffer[50];
            sprintf(buffer, "Shakes: %lu", shake_count);
 8002aae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ab2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002ab6:	49b7      	ldr	r1, [pc, #732]	@ (8002d94 <game_state_machine+0xa38>)
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00a fad9 	bl	800d070 <siprintf>
            DrawString(10, 60, buffer, 0xFFFF, 0x0000, 2); // White text for shake count
 8002abe:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ace:	213c      	movs	r1, #60	@ 0x3c
 8002ad0:	200a      	movs	r0, #10
 8002ad2:	f001 f805 	bl	8003ae0 <DrawString>

            // Display damage on the next line
            sprintf(buffer, "Damage: %d", total_damage);
 8002ad6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ada:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002ade:	49ae      	ldr	r1, [pc, #696]	@ (8002d98 <game_state_machine+0xa3c>)
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00a fac5 	bl	800d070 <siprintf>
            DrawString(10, 100, buffer, 0xFFFF, 0x0000, 2); // White text for damage
 8002ae6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002aea:	2302      	movs	r3, #2
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002af6:	2164      	movs	r1, #100	@ 0x64
 8002af8:	200a      	movs	r0, #10
 8002afa:	f000 fff1 	bl	8003ae0 <DrawString>

            // Display health bar
            DrawString(10, 140, "Health Bar:", 0xFFFF, 0x0000, 2); // White text for health bar
 8002afe:	2302      	movs	r3, #2
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0a:	4aa4      	ldr	r2, [pc, #656]	@ (8002d9c <game_state_machine+0xa40>)
 8002b0c:	218c      	movs	r1, #140	@ 0x8c
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f000 ffe6 	bl	8003ae0 <DrawString>
            ILI9341_DrawRect(10, 170, 220, 20, 0xFFFF); // Outline of health bar
 8002b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2314      	movs	r3, #20
 8002b1c:	22dc      	movs	r2, #220	@ 0xdc
 8002b1e:	21aa      	movs	r1, #170	@ 0xaa
 8002b20:	200a      	movs	r0, #10
 8002b22:	f001 f8e1 	bl	8003ce8 <ILI9341_DrawRect>
            uint16_t health_bar_width = (pokemon_health_percentage * 220) / 100; // Scale health bar width
 8002b26:	4b98      	ldr	r3, [pc, #608]	@ (8002d88 <game_state_machine+0xa2c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	22dc      	movs	r2, #220	@ 0xdc
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	4a9b      	ldr	r2, [pc, #620]	@ (8002da0 <game_state_machine+0xa44>)
 8002b32:	fb82 1203 	smull	r1, r2, r2, r3
 8002b36:	1152      	asrs	r2, r2, #5
 8002b38:	17db      	asrs	r3, r3, #31
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
            ILI9341_FillRect(10, 170, health_bar_width, 20, health_color); // Fill health bar
 8002b40:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8002b44:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2314      	movs	r3, #20
 8002b4c:	21aa      	movs	r1, #170	@ 0xaa
 8002b4e:	200a      	movs	r0, #10
 8002b50:	f000 fff6 	bl	8003b40 <ILI9341_FillRect>

            // Display health percentage
            sprintf(buffer, "Health: %d%%", pokemon_health_percentage);
 8002b54:	4b8c      	ldr	r3, [pc, #560]	@ (8002d88 <game_state_machine+0xa2c>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b5c:	4991      	ldr	r1, [pc, #580]	@ (8002da4 <game_state_machine+0xa48>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00a fa86 	bl	800d070 <siprintf>
            DrawString(10, 200, buffer, 0xFFFF, 0x0000, 2); // White text for health percentage
 8002b64:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002b68:	2302      	movs	r3, #2
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b74:	21c8      	movs	r1, #200	@ 0xc8
 8002b76:	200a      	movs	r0, #10
 8002b78:	f000 ffb2 	bl	8003ae0 <DrawString>

            // Handle fainted Pokemon
            if (pokemon_health_percentage <= 0) {
 8002b7c:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <game_state_machine+0xa2c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dc15      	bgt.n	8002bb0 <game_state_machine+0x854>
                DrawString(10, 240, "Pokemon fainted!", 0xF800, 0x0000, 2); // Red text
 8002b84:	2302      	movs	r3, #2
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b90:	4a85      	ldr	r2, [pc, #532]	@ (8002da8 <game_state_machine+0xa4c>)
 8002b92:	21f0      	movs	r1, #240	@ 0xf0
 8002b94:	200a      	movs	r0, #10
 8002b96:	f000 ffa3 	bl	8003ae0 <DrawString>
                uart_send_string("Pokemon fainted! Cannot battle or capture.\n\r");
 8002b9a:	4884      	ldr	r0, [pc, #528]	@ (8002dac <game_state_machine+0xa50>)
 8002b9c:	f002 f822 	bl	8004be4 <uart_send_string>
                HAL_Delay(3000); // Pause to display message
 8002ba0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ba4:	f002 f8da 	bl	8004d5c <HAL_Delay>
                currentState = POST_BATTLE; // Transition to POST_BATTLE state
 8002ba8:	4b81      	ldr	r3, [pc, #516]	@ (8002db0 <game_state_machine+0xa54>)
 8002baa:	2206      	movs	r2, #6
 8002bac:	701a      	strb	r2, [r3, #0]
                DrawString(10, 260, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
                DrawString(10, 280, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
                Reset_Button_State(); // Reset button state for new selection
                currentState = SELECT_ACTION; // Return to action selection
            }
            break;
 8002bae:	e31f      	b.n	80031f0 <game_state_machine+0xe94>
                uart_send_string("Returning to action selection.\n\r");
 8002bb0:	4880      	ldr	r0, [pc, #512]	@ (8002db4 <game_state_machine+0xa58>)
 8002bb2:	f002 f817 	bl	8004be4 <uart_send_string>
                DrawString(10, 240, "Select Action:", 0x07E0, 0x0000, 1); // Green text
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bc2:	4a7d      	ldr	r2, [pc, #500]	@ (8002db8 <game_state_machine+0xa5c>)
 8002bc4:	21f0      	movs	r1, #240	@ 0xf0
 8002bc6:	200a      	movs	r0, #10
 8002bc8:	f000 ff8a 	bl	8003ae0 <DrawString>
                DrawString(10, 260, "PC13 - Battle", 0xF800, 0x0000, 2); // Red text for Battle
 8002bcc:	2302      	movs	r3, #2
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bd8:	4a78      	ldr	r2, [pc, #480]	@ (8002dbc <game_state_machine+0xa60>)
 8002bda:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002bde:	200a      	movs	r0, #10
 8002be0:	f000 ff7e 	bl	8003ae0 <DrawString>
                DrawString(10, 280, "PC14 - Capture", 0x07E0, 0x0000, 2); // Green text for Capture
 8002be4:	2302      	movs	r3, #2
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2300      	movs	r3, #0
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bf0:	4a73      	ldr	r2, [pc, #460]	@ (8002dc0 <game_state_machine+0xa64>)
 8002bf2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f000 ff72 	bl	8003ae0 <DrawString>
                Reset_Button_State(); // Reset button state for new selection
 8002bfc:	f001 fc56 	bl	80044ac <Reset_Button_State>
                currentState = SELECT_ACTION; // Return to action selection
 8002c00:	4b6b      	ldr	r3, [pc, #428]	@ (8002db0 <game_state_machine+0xa54>)
 8002c02:	2203      	movs	r2, #3
 8002c04:	701a      	strb	r2, [r3, #0]
            break;
 8002c06:	e2f3      	b.n	80031f0 <game_state_machine+0xe94>




        case CAPTURE: {
            uart_send_string("Capture initiated! Apply pressure to capture the Pokemon.\n\r");
 8002c08:	486e      	ldr	r0, [pc, #440]	@ (8002dc4 <game_state_machine+0xa68>)
 8002c0a:	f001 ffeb 	bl	8004be4 <uart_send_string>
            char buffer_line1[50];
            char buffer_line2[50];
            char buffer[50];
            uint32_t low_threshold, high_threshold;

            if (pokemon_health_percentage > 75) {
 8002c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002d88 <game_state_machine+0xa2c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b4b      	cmp	r3, #75	@ 0x4b
 8002c14:	dd13      	ble.n	8002c3e <game_state_machine+0x8e2>
                low_threshold = 500;
 8002c16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c1a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 700;
 8002c1e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002c22:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is healthy.");
 8002c26:	463b      	mov	r3, r7
 8002c28:	4967      	ldr	r1, [pc, #412]	@ (8002dc8 <game_state_machine+0xa6c>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f00a fa20 	bl	800d070 <siprintf>
                sprintf(buffer_line2, "Capturing is tough!");
 8002c30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c34:	4965      	ldr	r1, [pc, #404]	@ (8002dcc <game_state_machine+0xa70>)
 8002c36:	4618      	mov	r0, r3
 8002c38:	f00a fa1a 	bl	800d070 <siprintf>
 8002c3c:	e029      	b.n	8002c92 <game_state_machine+0x936>
            } else if (pokemon_health_percentage > 40) {
 8002c3e:	4b52      	ldr	r3, [pc, #328]	@ (8002d88 <game_state_machine+0xa2c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b28      	cmp	r3, #40	@ 0x28
 8002c44:	dd13      	ble.n	8002c6e <game_state_machine+0x912>
                low_threshold = 300;
 8002c46:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002c4a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 600;
 8002c4e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002c52:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is weakening.");
 8002c56:	463b      	mov	r3, r7
 8002c58:	495d      	ldr	r1, [pc, #372]	@ (8002dd0 <game_state_machine+0xa74>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00a fa08 	bl	800d070 <siprintf>
                sprintf(buffer_line2, "Capturing is easier.");
 8002c60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c64:	495b      	ldr	r1, [pc, #364]	@ (8002dd4 <game_state_machine+0xa78>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00a fa02 	bl	800d070 <siprintf>
 8002c6c:	e011      	b.n	8002c92 <game_state_machine+0x936>
            } else {
                low_threshold = 200;
 8002c6e:	23c8      	movs	r3, #200	@ 0xc8
 8002c70:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
                high_threshold = 500;
 8002c74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c78:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                sprintf(buffer_line1, "The Pokemon is very weak.");
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4956      	ldr	r1, [pc, #344]	@ (8002dd8 <game_state_machine+0xa7c>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00a f9f5 	bl	800d070 <siprintf>
                sprintf(buffer_line2, "Capturing is likely!");
 8002c86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c8a:	4954      	ldr	r1, [pc, #336]	@ (8002ddc <game_state_machine+0xa80>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f00a f9ef 	bl	800d070 <siprintf>
            }

            // Display the divided lines on the LCD
            DrawString(10, 70, "Hint:", 0x07E0, 0x0000, 2); // Green text for "Hint:"
 8002c92:	2302      	movs	r3, #2
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c9e:	4a50      	ldr	r2, [pc, #320]	@ (8002de0 <game_state_machine+0xa84>)
 8002ca0:	2146      	movs	r1, #70	@ 0x46
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f000 ff1c 	bl	8003ae0 <DrawString>
            DrawString(10, 100, buffer_line1, 0xFFFF, 0x0000, 1); // First line of the hint
 8002ca8:	463a      	mov	r2, r7
 8002caa:	2301      	movs	r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cb6:	2164      	movs	r1, #100	@ 0x64
 8002cb8:	200a      	movs	r0, #10
 8002cba:	f000 ff11 	bl	8003ae0 <DrawString>
            DrawString(10, 120, buffer_line2, 0xFFFF, 0x0000, 1); // Second line of the hint
 8002cbe:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cce:	2178      	movs	r1, #120	@ 0x78
 8002cd0:	200a      	movs	r0, #10
 8002cd2:	f000 ff05 	bl	8003ae0 <DrawString>

            // Countdown before applying pressure
            for (int countdown = 3; countdown > 0; countdown--) {
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002cdc:	e025      	b.n	8002d2a <game_state_machine+0x9ce>
                // Clear only the countdown number area
                ILI9341_FillRect(10, 150, 300, 50, 0x0000); // Clear countdown area
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2332      	movs	r3, #50	@ 0x32
 8002ce4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ce8:	2196      	movs	r1, #150	@ 0x96
 8002cea:	200a      	movs	r0, #10
 8002cec:	f000 ff28 	bl	8003b40 <ILI9341_FillRect>

                // Display the countdown number
                sprintf(buffer, "Press in: %d", countdown);
 8002cf0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cf4:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8002cf8:	493a      	ldr	r1, [pc, #232]	@ (8002de4 <game_state_machine+0xa88>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f00a f9b8 	bl	800d070 <siprintf>
                DrawString(10, 150, buffer, 0xFFFF, 0x0000, 2); // White text for countdown
 8002d00:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002d04:	2302      	movs	r3, #2
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d10:	2196      	movs	r1, #150	@ 0x96
 8002d12:	200a      	movs	r0, #10
 8002d14:	f000 fee4 	bl	8003ae0 <DrawString>

                HAL_Delay(1000); // 1-second delay
 8002d18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d1c:	f002 f81e 	bl	8004d5c <HAL_Delay>
            for (int countdown = 3; countdown > 0; countdown--) {
 8002d20:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002d24:	3b01      	subs	r3, #1
 8002d26:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dcd5      	bgt.n	8002cde <game_state_machine+0x982>
            }

            // Prompt user to apply pressure
            uart_send_string("Apply pressure now for 2 seconds...\n\r");
 8002d32:	482d      	ldr	r0, [pc, #180]	@ (8002de8 <game_state_machine+0xa8c>)
 8002d34:	f001 ff56 	bl	8004be4 <uart_send_string>
            DrawString(10, 150, "Apply pressure now!", 0xFFFF, 0x0000, 2); // White text
 8002d38:	2302      	movs	r3, #2
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d44:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <game_state_machine+0xa90>)
 8002d46:	2196      	movs	r1, #150	@ 0x96
 8002d48:	200a      	movs	r0, #10
 8002d4a:	f000 fec9 	bl	8003ae0 <DrawString>

            // Measure pressure over 2 seconds with progress bar
            uint32_t start_time = HAL_GetTick();
 8002d4e:	f001 fff9 	bl	8004d44 <HAL_GetTick>
 8002d52:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
            uint32_t total_pressure = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            uint32_t sample_count = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

            uint16_t progress_x = 10;
 8002d62:	230a      	movs	r3, #10
 8002d64:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
            uint16_t progress_y = 200;
 8002d68:	23c8      	movs	r3, #200	@ 0xc8
 8002d6a:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
            uint16_t progress_width = 300;
 8002d6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002d72:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            uint16_t progress_height = 20;
 8002d76:	2314      	movs	r3, #20
 8002d78:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
            uint16_t progress_color = 0x07E0; // Green
 8002d7c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d80:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122

            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002d84:	e076      	b.n	8002e74 <game_state_machine+0xb18>
 8002d86:	bf00      	nop
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	0800fa28 	.word	0x0800fa28
 8002d90:	0800fa54 	.word	0x0800fa54
 8002d94:	0800fa64 	.word	0x0800fa64
 8002d98:	0800fa70 	.word	0x0800fa70
 8002d9c:	0800fa7c 	.word	0x0800fa7c
 8002da0:	51eb851f 	.word	0x51eb851f
 8002da4:	0800fa88 	.word	0x0800fa88
 8002da8:	0800fa98 	.word	0x0800fa98
 8002dac:	0800faac 	.word	0x0800faac
 8002db0:	200012d8 	.word	0x200012d8
 8002db4:	0800fadc 	.word	0x0800fadc
 8002db8:	0800fb00 	.word	0x0800fb00
 8002dbc:	0800f8e8 	.word	0x0800f8e8
 8002dc0:	0800f8f8 	.word	0x0800f8f8
 8002dc4:	0800fb10 	.word	0x0800fb10
 8002dc8:	0800fb4c 	.word	0x0800fb4c
 8002dcc:	0800fb64 	.word	0x0800fb64
 8002dd0:	0800fb78 	.word	0x0800fb78
 8002dd4:	0800fb94 	.word	0x0800fb94
 8002dd8:	0800fbac 	.word	0x0800fbac
 8002ddc:	0800fbc8 	.word	0x0800fbc8
 8002de0:	0800fbe0 	.word	0x0800fbe0
 8002de4:	0800fbe8 	.word	0x0800fbe8
 8002de8:	0800fbf8 	.word	0x0800fbf8
 8002dec:	0800fc20 	.word	0x0800fc20
                ADC_Read(); // Update global adcValue
 8002df0:	f000 faa4 	bl	800333c <ADC_Read>
                total_pressure += adcValue;
 8002df4:	4bba      	ldr	r3, [pc, #744]	@ (80030e0 <game_state_machine+0xd84>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e00:	4413      	add	r3, r2
 8002e02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
                sample_count++;
 8002e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

                // Update progress bar
                uint32_t elapsed_time = HAL_GetTick() - start_time;
 8002e10:	f001 ff98 	bl	8004d44 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                uint16_t progress_fill = (elapsed_time * progress_width) / 2000; // Proportional fill
 8002e20:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002e24:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	4aad      	ldr	r2, [pc, #692]	@ (80030e4 <game_state_machine+0xd88>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	09db      	lsrs	r3, r3, #7
 8002e34:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
                ILI9341_DrawRect(progress_x, progress_y, progress_width, progress_height, 0xFFFF); // Outline
 8002e38:	f8b7 012a 	ldrh.w	r0, [r7, #298]	@ 0x12a
 8002e3c:	f8b7 1128 	ldrh.w	r1, [r7, #296]	@ 0x128
 8002e40:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8002e44:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002e48:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002e4c:	9400      	str	r4, [sp, #0]
 8002e4e:	f000 ff4b 	bl	8003ce8 <ILI9341_DrawRect>
                ILI9341_FillRect(progress_x, progress_y, progress_fill, progress_height, progress_color); // Fill
 8002e52:	f8b7 4124 	ldrh.w	r4, [r7, #292]	@ 0x124
 8002e56:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8002e5a:	f8b7 1128 	ldrh.w	r1, [r7, #296]	@ 0x128
 8002e5e:	f8b7 012a 	ldrh.w	r0, [r7, #298]	@ 0x12a
 8002e62:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f000 fe69 	bl	8003b40 <ILI9341_FillRect>

                HAL_Delay(100); // Sampling delay
 8002e6e:	2064      	movs	r0, #100	@ 0x64
 8002e70:	f001 ff74 	bl	8004d5c <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 2000) { // 2 seconds
 8002e74:	f001 ff66 	bl	8004d44 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e84:	d3b4      	bcc.n	8002df0 <game_state_machine+0xa94>
            }

            // Calculate average pressure
            uint32_t avg_pressure = total_pressure / sample_count;
 8002e86:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8002e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            // Display results
            ILI9341_FillScreen(0x0000);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 fc20 	bl	80036dc <ILI9341_FillScreen>
            DrawString(10, 10, "Capture Results:", 0xFFFF, 0x001F, 2);
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea8:	4a8f      	ldr	r2, [pc, #572]	@ (80030e8 <game_state_machine+0xd8c>)
 8002eaa:	210a      	movs	r1, #10
 8002eac:	200a      	movs	r0, #10
 8002eae:	f000 fe17 	bl	8003ae0 <DrawString>

            if (avg_pressure > low_threshold && avg_pressure < high_threshold) {
 8002eb2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002eb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d945      	bls.n	8002f4a <game_state_machine+0xbee>
 8002ebe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ec2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d23f      	bcs.n	8002f4a <game_state_machine+0xbee>
                // Success message
                sprintf(buffer, "Success!");
 8002eca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ece:	4987      	ldr	r1, [pc, #540]	@ (80030ec <game_state_machine+0xd90>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f00a f8cd 	bl	800d070 <siprintf>
                DrawString(10, 50, buffer, 0x07E0, 0x0000, 2); // Green text for success
 8002ed6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002eda:	2302      	movs	r3, #2
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ee6:	2132      	movs	r1, #50	@ 0x32
 8002ee8:	200a      	movs	r0, #10
 8002eea:	f000 fdf9 	bl	8003ae0 <DrawString>
                sprintf(buffer, "Pokemon captured!");
 8002eee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ef2:	497f      	ldr	r1, [pc, #508]	@ (80030f0 <game_state_machine+0xd94>)
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00a f8bb 	bl	800d070 <siprintf>
                DrawString(10, 80, buffer, 0x07E0, 0x0000, 2); // Green text for second line
 8002efa:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002efe:	2302      	movs	r3, #2
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2300      	movs	r3, #0
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f0a:	2150      	movs	r1, #80	@ 0x50
 8002f0c:	200a      	movs	r0, #10
 8002f0e:	f000 fde7 	bl	8003ae0 <DrawString>
                sprintf(buffer, "Pressure: %lu", avg_pressure);
 8002f12:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f16:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002f1a:	4976      	ldr	r1, [pc, #472]	@ (80030f4 <game_state_machine+0xd98>)
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00a f8a7 	bl	800d070 <siprintf>
                DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for pressure value
 8002f22:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002f26:	2302      	movs	r3, #2
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f32:	2178      	movs	r1, #120	@ 0x78
 8002f34:	200a      	movs	r0, #10
 8002f36:	f000 fdd3 	bl	8003ae0 <DrawString>

                HAL_Delay(2000); // Pause for user to view results
 8002f3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f3e:	f001 ff0d 	bl	8004d5c <HAL_Delay>
                currentState = POST_BATTLE; // Transition to POST_BATTLE
 8002f42:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <game_state_machine+0xd9c>)
 8002f44:	2206      	movs	r2, #6
 8002f46:	701a      	strb	r2, [r3, #0]
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
                Reset_Button_State(); // Reset button state
                currentState = SELECT_ACTION; // Return to action selection
            }
            break;
 8002f48:	e152      	b.n	80031f0 <game_state_machine+0xe94>
                sprintf(buffer, "Failed!");
 8002f4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f4e:	496b      	ldr	r1, [pc, #428]	@ (80030fc <game_state_machine+0xda0>)
 8002f50:	4618      	mov	r0, r3
 8002f52:	f00a f88d 	bl	800d070 <siprintf>
                DrawString(10, 50, buffer, 0xF800, 0x0000, 2); // Red text for failure
 8002f56:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f66:	2132      	movs	r1, #50	@ 0x32
 8002f68:	200a      	movs	r0, #10
 8002f6a:	f000 fdb9 	bl	8003ae0 <DrawString>
                sprintf(buffer, "Pokemon broke out!");
 8002f6e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f72:	4963      	ldr	r1, [pc, #396]	@ (8003100 <game_state_machine+0xda4>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00a f87b 	bl	800d070 <siprintf>
                DrawString(10, 80, buffer, 0xF800, 0x0000, 2); // Red text for second line
 8002f7a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002f7e:	2302      	movs	r3, #2
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f8a:	2150      	movs	r1, #80	@ 0x50
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f000 fda7 	bl	8003ae0 <DrawString>
                sprintf(buffer, "Pressure: %lu", avg_pressure);
 8002f92:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f96:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002f9a:	4956      	ldr	r1, [pc, #344]	@ (80030f4 <game_state_machine+0xd98>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00a f867 	bl	800d070 <siprintf>
                DrawString(10, 120, buffer, 0xFFFF, 0x0000, 2); // White text for pressure value
 8002fa2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fb2:	2178      	movs	r1, #120	@ 0x78
 8002fb4:	200a      	movs	r0, #10
 8002fb6:	f000 fd93 	bl	8003ae0 <DrawString>
                HAL_Delay(2000); // Pause for user to view results
 8002fba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002fbe:	f001 fecd 	bl	8004d5c <HAL_Delay>
                ILI9341_FillScreen(0x0000); // Clear screen
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 fb8a 	bl	80036dc <ILI9341_FillScreen>
                DrawString(10, 30, "Select Action:", 0x07E0, 0x0000, 2); // Green text
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003104 <game_state_machine+0xda8>)
 8002fd6:	211e      	movs	r1, #30
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f000 fd81 	bl	8003ae0 <DrawString>
                DrawString(10, 90, "Battle:", 0xF800, 0x0000, 3);   // Red text for Battle
 8002fde:	2303      	movs	r3, #3
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fea:	4a47      	ldr	r2, [pc, #284]	@ (8003108 <game_state_machine+0xdac>)
 8002fec:	215a      	movs	r1, #90	@ 0x5a
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f000 fd76 	bl	8003ae0 <DrawString>
                DrawString(10, 120, "Capture:", 0x07E0, 0x0000, 3);  // Green text for Capture
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003000:	4a42      	ldr	r2, [pc, #264]	@ (800310c <game_state_machine+0xdb0>)
 8003002:	2178      	movs	r1, #120	@ 0x78
 8003004:	200a      	movs	r0, #10
 8003006:	f000 fd6b 	bl	8003ae0 <DrawString>
                Reset_Button_State(); // Reset button state
 800300a:	f001 fa4f 	bl	80044ac <Reset_Button_State>
                currentState = SELECT_ACTION; // Return to action selection
 800300e:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <game_state_machine+0xd9c>)
 8003010:	2203      	movs	r2, #3
 8003012:	701a      	strb	r2, [r3, #0]
            break;
 8003014:	e0ec      	b.n	80031f0 <game_state_machine+0xe94>
        }

        case POST_BATTLE: {
            // Clear the screen
        	ILI9341_FillScreen(0x0000);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 fb60 	bl	80036dc <ILI9341_FillScreen>

        	    if (pokemon_health_percentage <= 0) {
 800301c:	4b3c      	ldr	r3, [pc, #240]	@ (8003110 <game_state_machine+0xdb4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	dc1d      	bgt.n	8003060 <game_state_machine+0xd04>
        	        DrawString(70, 100, "Pokemon", 0xF800, 0x0000, 3); // Display "Fainted" message in red
 8003024:	2303      	movs	r3, #3
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003030:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <game_state_machine+0xdb8>)
 8003032:	2164      	movs	r1, #100	@ 0x64
 8003034:	2046      	movs	r0, #70	@ 0x46
 8003036:	f000 fd53 	bl	8003ae0 <DrawString>
        	        DrawString(70, 150, "Fainted!", 0xF800, 0x0000, 3); // Display "Fainted" message in red
 800303a:	2303      	movs	r3, #3
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003046:	4a34      	ldr	r2, [pc, #208]	@ (8003118 <game_state_machine+0xdbc>)
 8003048:	2196      	movs	r1, #150	@ 0x96
 800304a:	2046      	movs	r0, #70	@ 0x46
 800304c:	f000 fd48 	bl	8003ae0 <DrawString>
        	        HAL_Delay(3000);
 8003050:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003054:	f001 fe82 	bl	8004d5c <HAL_Delay>
        	        currentState = IDLE;
 8003058:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <game_state_machine+0xd9c>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]



           }
	}
}
 800305e:	e0c7      	b.n	80031f0 <game_state_machine+0xe94>
            text_x = 120 - (strlen(current_pokemon) * 6); // Center Pokémon name horizontally (120 is half of 240 width)
 8003060:	482e      	ldr	r0, [pc, #184]	@ (800311c <game_state_machine+0xdc0>)
 8003062:	f7fd f90d 	bl	8000280 <strlen>
 8003066:	4602      	mov	r2, r0
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8003074:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            DrawString(text_x, 100, current_pokemon, 0xFFFF, 0x0000, 3); // White text for Pokémon name
 8003078:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800307c:	b298      	uxth	r0, r3
 800307e:	2303      	movs	r3, #3
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800308a:	4a24      	ldr	r2, [pc, #144]	@ (800311c <game_state_machine+0xdc0>)
 800308c:	2164      	movs	r1, #100	@ 0x64
 800308e:	f000 fd27 	bl	8003ae0 <DrawString>
            const char *captured_message = "Captured!";
 8003092:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <game_state_machine+0xdc4>)
 8003094:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            text_x = 120 - (strlen(captured_message) * 6); // Center "Captured!" horizontally
 8003098:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800309c:	f7fd f8f0 	bl	8000280 <strlen>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80030ae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            DrawString(text_x, 150, captured_message, 0x07E0, 0x0000, 3); // Green text for "Captured!"
 80030b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80030b6:	b298      	uxth	r0, r3
 80030b8:	2303      	movs	r3, #3
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80030c4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80030c8:	2196      	movs	r1, #150	@ 0x96
 80030ca:	f000 fd09 	bl	8003ae0 <DrawString>
            for (int i = 0; i < 30; i++) { // Number of confetti iterations
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80030d4:	e077      	b.n	80031c6 <game_state_machine+0xe6a>
                for (int j = 0; j < 10; j++) { // Number of confetti per iteration
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80030dc:	e067      	b.n	80031ae <game_state_machine+0xe52>
 80030de:	bf00      	nop
 80030e0:	20001324 	.word	0x20001324
 80030e4:	10624dd3 	.word	0x10624dd3
 80030e8:	0800fc34 	.word	0x0800fc34
 80030ec:	0800fc48 	.word	0x0800fc48
 80030f0:	0800fc54 	.word	0x0800fc54
 80030f4:	0800fc68 	.word	0x0800fc68
 80030f8:	200012d8 	.word	0x200012d8
 80030fc:	0800fc78 	.word	0x0800fc78
 8003100:	0800fc80 	.word	0x0800fc80
 8003104:	0800fb00 	.word	0x0800fb00
 8003108:	0800fc94 	.word	0x0800fc94
 800310c:	0800fc9c 	.word	0x0800fc9c
 8003110:	20000004 	.word	0x20000004
 8003114:	0800fca8 	.word	0x0800fca8
 8003118:	0800fcb0 	.word	0x0800fcb0
 800311c:	200012ec 	.word	0x200012ec
 8003120:	0800fcbc 	.word	0x0800fcbc
                    int x = rand() % 235; // Random x-coordinate (ensure rectangle fits within screen width)
 8003124:	f009 f9dc 	bl	800c4e0 <rand>
 8003128:	4603      	mov	r3, r0
 800312a:	4a34      	ldr	r2, [pc, #208]	@ (80031fc <game_state_machine+0xea0>)
 800312c:	fb82 1203 	smull	r1, r2, r2, r3
 8003130:	441a      	add	r2, r3
 8003132:	11d1      	asrs	r1, r2, #7
 8003134:	17da      	asrs	r2, r3, #31
 8003136:	1a8a      	subs	r2, r1, r2
 8003138:	21eb      	movs	r1, #235	@ 0xeb
 800313a:	fb01 f202 	mul.w	r2, r1, r2
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                    int y = rand() % 315; // Random y-coordinate (ensure rectangle fits within screen height)
 8003144:	f009 f9cc 	bl	800c4e0 <rand>
 8003148:	4602      	mov	r2, r0
 800314a:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <game_state_machine+0xea4>)
 800314c:	fb83 1302 	smull	r1, r3, r3, r2
 8003150:	4413      	add	r3, r2
 8003152:	1219      	asrs	r1, r3, #8
 8003154:	17d3      	asrs	r3, r2, #31
 8003156:	1ac9      	subs	r1, r1, r3
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0199      	lsls	r1, r3, #6
 8003160:	1ac9      	subs	r1, r1, r3
 8003162:	1a53      	subs	r3, r2, r1
 8003164:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    uint16_t color = rand() % 0xFFFF; // Random color
 8003168:	f009 f9ba 	bl	800c4e0 <rand>
 800316c:	4602      	mov	r2, r0
 800316e:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <game_state_machine+0xea8>)
 8003170:	fb83 1302 	smull	r1, r3, r3, r2
 8003174:	4413      	add	r3, r2
 8003176:	13d9      	asrs	r1, r3, #15
 8003178:	17d3      	asrs	r3, r2, #31
 800317a:	1ac9      	subs	r1, r1, r3
 800317c:	460b      	mov	r3, r1
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	1a5b      	subs	r3, r3, r1
 8003182:	1ad1      	subs	r1, r2, r3
 8003184:	460b      	mov	r3, r1
 8003186:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
                    ILI9341_FillRect(x, y, 5, 5, color); // Rectangle of size 5x5
 800318a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800318e:	b298      	uxth	r0, r3
 8003190:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003194:	b299      	uxth	r1, r3
 8003196:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2305      	movs	r3, #5
 800319e:	2205      	movs	r2, #5
 80031a0:	f000 fcce 	bl	8003b40 <ILI9341_FillRect>
                for (int j = 0; j < 10; j++) { // Number of confetti per iteration
 80031a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80031a8:	3301      	adds	r3, #1
 80031aa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80031ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	ddb6      	ble.n	8003124 <game_state_machine+0xdc8>
                HAL_Delay(100); // Small delay to simulate animation
 80031b6:	2064      	movs	r0, #100	@ 0x64
 80031b8:	f001 fdd0 	bl	8004d5c <HAL_Delay>
            for (int i = 0; i < 30; i++) { // Number of confetti iterations
 80031bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80031c0:	3301      	adds	r3, #1
 80031c2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80031c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80031ca:	2b1d      	cmp	r3, #29
 80031cc:	dd83      	ble.n	80030d6 <game_state_machine+0xd7a>
            HAL_Delay(3000);
 80031ce:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80031d2:	f001 fdc3 	bl	8004d5c <HAL_Delay>
            ILI9341_FillScreen(0x0000); // Clear the screen
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 fa80 	bl	80036dc <ILI9341_FillScreen>
            uart_send_string("Returning to the forest\n\r");
 80031dc:	480a      	ldr	r0, [pc, #40]	@ (8003208 <game_state_machine+0xeac>)
 80031de:	f001 fd01 	bl	8004be4 <uart_send_string>
            currentState = IDLE; // Set the state to IDLE
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <game_state_machine+0xeb0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
            break;
 80031e8:	e002      	b.n	80031f0 <game_state_machine+0xe94>
        break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <game_state_machine+0xe94>
            break;
 80031ee:	bf00      	nop
}
 80031f0:	bf00      	nop
 80031f2:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	8b70344b 	.word	0x8b70344b
 8003200:	d00d00d1 	.word	0xd00d00d1
 8003204:	80008001 	.word	0x80008001
 8003208:	0800fcc8 	.word	0x0800fcc8
 800320c:	200012d8 	.word	0x200012d8

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	@ (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <Pressure_sensor_Init>:

// Global variables
volatile uint16_t adcValue = 0; // ADC result
volatile uint8_t adcConversionComplete = 0; // Flag to indicate conversion complete

void Pressure_sensor_Init(void) {
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <Pressure_sensor_Init+0x34>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <Pressure_sensor_Init+0x34>)
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB1 as analog
    GPIOB->MODER |= (3U << (1 * 2));  // 2 bits per pin, set to 11 (Analog mode)
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <Pressure_sensor_Init+0x38>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a08      	ldr	r2, [pc, #32]	@ (8003284 <Pressure_sensor_Init+0x38>)
 8003262:	f043 030c 	orr.w	r3, r3, #12
 8003266:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3U << (1 * 2)); // No pull-up/pull-down
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <Pressure_sensor_Init+0x38>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <Pressure_sensor_Init+0x38>)
 800326e:	f023 030c 	bic.w	r3, r3, #12
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40020400 	.word	0x40020400

08003288 <ADC_Config>:

void ADC_Config(void) {
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800328c:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <ADC_Config+0x64>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	4a16      	ldr	r2, [pc, #88]	@ (80032ec <ADC_Config+0x64>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003296:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set ADC prescaler to PCLK2/4
    ADC->CCR |= (1U << 16); // Bits 17:16 = 01 for PCLK2/4
 8003298:	4b15      	ldr	r3, [pc, #84]	@ (80032f0 <ADC_Config+0x68>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <ADC_Config+0x68>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a2:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Reset CR2
 80032a4:	4b13      	ldr	r3, [pc, #76]	@ (80032f4 <ADC_Config+0x6c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
    ADC1->CR2 |= ADC_CR2_ADON;         // Enable ADC
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <ADC_Config+0x6c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <ADC_Config+0x6c>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;        // Enable EOC interrupt
 80032b6:	4b0f      	ldr	r3, [pc, #60]	@ (80032f4 <ADC_Config+0x6c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a0e      	ldr	r2, [pc, #56]	@ (80032f4 <ADC_Config+0x6c>)
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_RES;         // 12-bit resolution
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <ADC_Config+0x6c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <ADC_Config+0x6c>)
 80032c8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80032cc:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (3U << (3 * 9));    // Sampling time 56 cycles for channel 9
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <ADC_Config+0x6c>)
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <ADC_Config+0x6c>)
 80032d4:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 80032d8:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 9;                    // Set channel 9 (PB1)
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <ADC_Config+0x6c>)
 80032dc:	2209      	movs	r2, #9
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 80032e0:	2012      	movs	r0, #18
 80032e2:	f7ff ff95 	bl	8003210 <__NVIC_EnableIRQ>
    //NVIC_SetPriority(ADC_IRQn, 1);
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40012300 	.word	0x40012300
 80032f4:	40012000 	.word	0x40012000

080032f8 <ADC_IRQHandler>:

// ADC interrupt handler
void ADC_IRQHandler(void) {
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 80032fc:	bf00      	nop
 80032fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <ADC_IRQHandler+0x38>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f9      	beq.n	80032fe <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 800330a:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <ADC_IRQHandler+0x38>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <ADC_IRQHandler+0x3c>)
 8003312:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <ADC_IRQHandler+0x40>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <ADC_IRQHandler+0x38>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <ADC_IRQHandler+0x38>)
 8003320:	f023 0302 	bic.w	r3, r3, #2
 8003324:	6013      	str	r3, [r2, #0]
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012000 	.word	0x40012000
 8003334:	20001324 	.word	0x20001324
 8003338:	20001326 	.word	0x20001326

0800333c <ADC_Read>:

void ADC_Read(void) {
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <ADC_Read+0x1c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <ADC_Read+0x1c>)
 8003346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800334a:	6093      	str	r3, [r2, #8]
    // Wait for conversion to complete
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012000 	.word	0x40012000

0800335c <MPU_init>:
    NVIC_SetPriority(EXTI9_5_IRQn, 2); // Set priority level
    NVIC_EnableIRQ(EXTI9_5_IRQn);      // Enable EXTI9_5 interrupt
}

void MPU_init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af04      	add	r7, sp, #16
HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEV_ADD <<1)+0, 1, 100);
 8003362:	2364      	movs	r3, #100	@ 0x64
 8003364:	2201      	movs	r2, #1
 8003366:	21d0      	movs	r1, #208	@ 0xd0
 8003368:	4830      	ldr	r0, [pc, #192]	@ (800342c <MPU_init+0xd0>)
 800336a:	f002 ffe7 	bl	800633c <HAL_I2C_IsDeviceReady>
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <MPU_init+0x24>
  {
	  uart_send_string("ready\n\r");
 8003378:	482d      	ldr	r0, [pc, #180]	@ (8003430 <MPU_init+0xd4>)
 800337a:	f001 fc33 	bl	8004be4 <uart_send_string>
 800337e:	e002      	b.n	8003386 <MPU_init+0x2a>
  }
  else
	  uart_send_string("not ready\n\r");
 8003380:	482c      	ldr	r0, [pc, #176]	@ (8003434 <MPU_init+0xd8>)
 8003382:	f001 fc2f 	bl	8004be4 <uart_send_string>
  /* USER CODE END 2 */
  uint8_t temp_data = FS_GYRO_500;
 8003386:	2308      	movs	r3, #8
 8003388:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 800338a:	2364      	movs	r3, #100	@ 0x64
 800338c:	9302      	str	r3, [sp, #8]
 800338e:	2301      	movs	r3, #1
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	1dbb      	adds	r3, r7, #6
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	221b      	movs	r2, #27
 800339a:	21d0      	movs	r1, #208	@ 0xd0
 800339c:	4823      	ldr	r0, [pc, #140]	@ (800342c <MPU_init+0xd0>)
 800339e:	f002 fca1 	bl	8005ce4 <HAL_I2C_Mem_Write>
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <MPU_init+0x58>
  {
	  uart_send_string("config gyro\n\r");
 80033ac:	4822      	ldr	r0, [pc, #136]	@ (8003438 <MPU_init+0xdc>)
 80033ae:	f001 fc19 	bl	8004be4 <uart_send_string>
 80033b2:	e002      	b.n	80033ba <MPU_init+0x5e>
  }
  else
	  uart_send_string("not ready\n\r");
 80033b4:	481f      	ldr	r0, [pc, #124]	@ (8003434 <MPU_init+0xd8>)
 80033b6:	f001 fc15 	bl	8004be4 <uart_send_string>

temp_data = FS_ACC_4G;
 80033ba:	2308      	movs	r3, #8
 80033bc:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 80033be:	2364      	movs	r3, #100	@ 0x64
 80033c0:	9302      	str	r3, [sp, #8]
 80033c2:	2301      	movs	r3, #1
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	1dbb      	adds	r3, r7, #6
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2301      	movs	r3, #1
 80033cc:	221c      	movs	r2, #28
 80033ce:	21d0      	movs	r1, #208	@ 0xd0
 80033d0:	4816      	ldr	r0, [pc, #88]	@ (800342c <MPU_init+0xd0>)
 80033d2:	f002 fc87 	bl	8005ce4 <HAL_I2C_Mem_Write>
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <MPU_init+0x8c>
  {
	  uart_send_string("config acc\n\r");
 80033e0:	4816      	ldr	r0, [pc, #88]	@ (800343c <MPU_init+0xe0>)
 80033e2:	f001 fbff 	bl	8004be4 <uart_send_string>
 80033e6:	e002      	b.n	80033ee <MPU_init+0x92>
  }
  else
	  uart_send_string("not ready\n\r");
 80033e8:	4812      	ldr	r0, [pc, #72]	@ (8003434 <MPU_init+0xd8>)
 80033ea:	f001 fbfb 	bl	8004be4 <uart_send_string>

temp_data = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, (DEV_ADD <<1)+0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 80033f2:	2364      	movs	r3, #100	@ 0x64
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	2301      	movs	r3, #1
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	1dbb      	adds	r3, r7, #6
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2301      	movs	r3, #1
 8003400:	226b      	movs	r2, #107	@ 0x6b
 8003402:	21d0      	movs	r1, #208	@ 0xd0
 8003404:	4809      	ldr	r0, [pc, #36]	@ (800342c <MPU_init+0xd0>)
 8003406:	f002 fc6d 	bl	8005ce4 <HAL_I2C_Mem_Write>
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if(ret ==HAL_OK)
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <MPU_init+0xc0>
  {
	  uart_send_string("exit sleep and enable interrupt\n\r");
 8003414:	480a      	ldr	r0, [pc, #40]	@ (8003440 <MPU_init+0xe4>)
 8003416:	f001 fbe5 	bl	8004be4 <uart_send_string>
  }
  else
	  uart_send_string("not ready\n\r");

}
 800341a:	e002      	b.n	8003422 <MPU_init+0xc6>
	  uart_send_string("not ready\n\r");
 800341c:	4805      	ldr	r0, [pc, #20]	@ (8003434 <MPU_init+0xd8>)
 800341e:	f001 fbe1 	bl	8004be4 <uart_send_string>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20001328 	.word	0x20001328
 8003430:	0800fce4 	.word	0x0800fce4
 8003434:	0800fcec 	.word	0x0800fcec
 8003438:	0800fcf8 	.word	0x0800fcf8
 800343c:	0800fd08 	.word	0x0800fd08
 8003440:	0800fd18 	.word	0x0800fd18

08003444 <MPU_read>:

int16_t read_axis_data(uint8_t high_byte, uint8_t low_byte) {
    return ((int16_t)high_byte << 8) | low_byte;
}

int32_t MPU_read() {
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af04      	add	r7, sp, #16
    uint8_t data[2];
    int16_t x_acc;

    // Read 2 bytes of accelerometer data (X-axis only)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (DEV_ADD << 1), REG_DATA, 1, data, 2, 100);
 800344a:	2364      	movs	r3, #100	@ 0x64
 800344c:	9302      	str	r3, [sp, #8]
 800344e:	2302      	movs	r3, #2
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	463b      	mov	r3, r7
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2301      	movs	r3, #1
 8003458:	223b      	movs	r2, #59	@ 0x3b
 800345a:	21d0      	movs	r1, #208	@ 0xd0
 800345c:	480f      	ldr	r0, [pc, #60]	@ (800349c <MPU_read+0x58>)
 800345e:	f002 fd3b 	bl	8005ed8 <HAL_I2C_Mem_Read>
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <MPU_read+0x34>
        uart_send_string("Error: Failed to read accelerometer data\n\r");
 800346c:	480c      	ldr	r0, [pc, #48]	@ (80034a0 <MPU_read+0x5c>)
 800346e:	f001 fbb9 	bl	8004be4 <uart_send_string>
        return -1; // Error reading data
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	e00c      	b.n	8003492 <MPU_read+0x4e>
    }

    // Combine high and low bytes for X-axis
    x_acc = ((int16_t)data[0] << 8) | data[1];
 8003478:	783b      	ldrb	r3, [r7, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	b21a      	sxth	r2, r3
 800347e:	787b      	ldrb	r3, [r7, #1]
 8003480:	b21b      	sxth	r3, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	80bb      	strh	r3, [r7, #4]

    // Debug: Print raw X-axis value

    // Return the absolute value of X-axis acceleration
    return abs(x_acc);
 8003486:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfb8      	it	lt
 800348e:	425b      	neglt	r3, r3
 8003490:	b29b      	uxth	r3, r3
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20001328 	.word	0x20001328
 80034a0:	0800fd3c 	.word	0x0800fd3c

080034a4 <ILI9341_SendCommand>:
#define RST_HIGH()  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET)
#define SD_CS_PORT GPIOD
#define SD_CS_PIN GPIO_PIN_9

// Function to send a command
void ILI9341_SendCommand(uint8_t cmd) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <ILI9341_SendCommand+0x44>)
 80034b6:	f002 fa9f 	bl	80059f8 <HAL_GPIO_WritePin>
    DC_COMMAND();
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034c0:	4809      	ldr	r0, [pc, #36]	@ (80034e8 <ILI9341_SendCommand+0x44>)
 80034c2:	f002 fa99 	bl	80059f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80034c6:	1df9      	adds	r1, r7, #7
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	2201      	movs	r2, #1
 80034ce:	4807      	ldr	r0, [pc, #28]	@ (80034ec <ILI9341_SendCommand+0x48>)
 80034d0:	f004 f937 	bl	8007742 <HAL_SPI_Transmit>
    CS_HIGH();
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034da:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <ILI9341_SendCommand+0x44>)
 80034dc:	f002 fa8c 	bl	80059f8 <HAL_GPIO_WritePin>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40020400 	.word	0x40020400
 80034ec:	2000137c 	.word	0x2000137c

080034f0 <ILI9341_SendData>:

// Function to send data
void ILI9341_SendData(uint8_t *data, uint16_t size) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
    CS_LOW();
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003502:	480d      	ldr	r0, [pc, #52]	@ (8003538 <ILI9341_SendData+0x48>)
 8003504:	f002 fa78 	bl	80059f8 <HAL_GPIO_WritePin>
    DC_DATA();
 8003508:	2201      	movs	r2, #1
 800350a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800350e:	480a      	ldr	r0, [pc, #40]	@ (8003538 <ILI9341_SendData+0x48>)
 8003510:	f002 fa72 	bl	80059f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 8003514:	887a      	ldrh	r2, [r7, #2]
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4807      	ldr	r0, [pc, #28]	@ (800353c <ILI9341_SendData+0x4c>)
 800351e:	f004 f910 	bl	8007742 <HAL_SPI_Transmit>
    CS_HIGH();
 8003522:	2201      	movs	r2, #1
 8003524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003528:	4803      	ldr	r0, [pc, #12]	@ (8003538 <ILI9341_SendData+0x48>)
 800352a:	f002 fa65 	bl	80059f8 <HAL_GPIO_WritePin>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40020400 	.word	0x40020400
 800353c:	2000137c 	.word	0x2000137c

08003540 <ILI9341_Init>:
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
    CS_HIGH();
}

// Initialization sequence for ILI9341
void ILI9341_Init(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
    // Reset the display
    RST_LOW();
 8003546:	2200      	movs	r2, #0
 8003548:	2180      	movs	r1, #128	@ 0x80
 800354a:	4863      	ldr	r0, [pc, #396]	@ (80036d8 <ILI9341_Init+0x198>)
 800354c:	f002 fa54 	bl	80059f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10ms delay
 8003550:	200a      	movs	r0, #10
 8003552:	f001 fc03 	bl	8004d5c <HAL_Delay>
    RST_HIGH();
 8003556:	2201      	movs	r2, #1
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	485f      	ldr	r0, [pc, #380]	@ (80036d8 <ILI9341_Init+0x198>)
 800355c:	f002 fa4c 	bl	80059f8 <HAL_GPIO_WritePin>
    HAL_Delay(120); // 120ms delay after reset
 8003560:	2078      	movs	r0, #120	@ 0x78
 8003562:	f001 fbfb 	bl	8004d5c <HAL_Delay>

    // Initialization commands based on the datasheet
    uint8_t data[15];

    // Power Control A
    ILI9341_SendCommand(0xCB);
 8003566:	20cb      	movs	r0, #203	@ 0xcb
 8003568:	f7ff ff9c 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x39; data[1] = 0x2C; data[2] = 0x00; data[3] = 0x34; data[4] = 0x02;
 800356c:	2339      	movs	r3, #57	@ 0x39
 800356e:	703b      	strb	r3, [r7, #0]
 8003570:	232c      	movs	r3, #44	@ 0x2c
 8003572:	707b      	strb	r3, [r7, #1]
 8003574:	2300      	movs	r3, #0
 8003576:	70bb      	strb	r3, [r7, #2]
 8003578:	2334      	movs	r3, #52	@ 0x34
 800357a:	70fb      	strb	r3, [r7, #3]
 800357c:	2302      	movs	r3, #2
 800357e:	713b      	strb	r3, [r7, #4]
    ILI9341_SendData(data, 5);
 8003580:	463b      	mov	r3, r7
 8003582:	2105      	movs	r1, #5
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ffb3 	bl	80034f0 <ILI9341_SendData>

    // Power Control B
    ILI9341_SendCommand(0xCF);
 800358a:	20cf      	movs	r0, #207	@ 0xcf
 800358c:	f7ff ff8a 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0xC1; data[2] = 0x30;
 8003590:	2300      	movs	r3, #0
 8003592:	703b      	strb	r3, [r7, #0]
 8003594:	23c1      	movs	r3, #193	@ 0xc1
 8003596:	707b      	strb	r3, [r7, #1]
 8003598:	2330      	movs	r3, #48	@ 0x30
 800359a:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 800359c:	463b      	mov	r3, r7
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ffa5 	bl	80034f0 <ILI9341_SendData>

    // Driver Timing Control A
    ILI9341_SendCommand(0xE8);
 80035a6:	20e8      	movs	r0, #232	@ 0xe8
 80035a8:	f7ff ff7c 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x85; data[1] = 0x00; data[2] = 0x78;
 80035ac:	2385      	movs	r3, #133	@ 0x85
 80035ae:	703b      	strb	r3, [r7, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	707b      	strb	r3, [r7, #1]
 80035b4:	2378      	movs	r3, #120	@ 0x78
 80035b6:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 80035b8:	463b      	mov	r3, r7
 80035ba:	2103      	movs	r1, #3
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff97 	bl	80034f0 <ILI9341_SendData>

    // Driver Timing Control B
    ILI9341_SendCommand(0xEA);
 80035c2:	20ea      	movs	r0, #234	@ 0xea
 80035c4:	f7ff ff6e 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00;
 80035c8:	2300      	movs	r3, #0
 80035ca:	703b      	strb	r3, [r7, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 80035d0:	463b      	mov	r3, r7
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff8b 	bl	80034f0 <ILI9341_SendData>

    // Power On Sequence Control
    ILI9341_SendCommand(0xED);
 80035da:	20ed      	movs	r0, #237	@ 0xed
 80035dc:	f7ff ff62 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x64; data[1] = 0x03; data[2] = 0x12; data[3] = 0x81;
 80035e0:	2364      	movs	r3, #100	@ 0x64
 80035e2:	703b      	strb	r3, [r7, #0]
 80035e4:	2303      	movs	r3, #3
 80035e6:	707b      	strb	r3, [r7, #1]
 80035e8:	2312      	movs	r3, #18
 80035ea:	70bb      	strb	r3, [r7, #2]
 80035ec:	2381      	movs	r3, #129	@ 0x81
 80035ee:	70fb      	strb	r3, [r7, #3]
    ILI9341_SendData(data, 4);
 80035f0:	463b      	mov	r3, r7
 80035f2:	2104      	movs	r1, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff7b 	bl	80034f0 <ILI9341_SendData>

    // Pump Ratio Control
    ILI9341_SendCommand(0xF7);
 80035fa:	20f7      	movs	r0, #247	@ 0xf7
 80035fc:	f7ff ff52 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x20;
 8003600:	2320      	movs	r3, #32
 8003602:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003604:	463b      	mov	r3, r7
 8003606:	2101      	movs	r1, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff71 	bl	80034f0 <ILI9341_SendData>

    // Power Control 1
    ILI9341_SendCommand(0xC0);
 800360e:	20c0      	movs	r0, #192	@ 0xc0
 8003610:	f7ff ff48 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x23;
 8003614:	2323      	movs	r3, #35	@ 0x23
 8003616:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003618:	463b      	mov	r3, r7
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff67 	bl	80034f0 <ILI9341_SendData>

    // Power Control 2
    ILI9341_SendCommand(0xC1);
 8003622:	20c1      	movs	r0, #193	@ 0xc1
 8003624:	f7ff ff3e 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x10;
 8003628:	2310      	movs	r3, #16
 800362a:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 800362c:	463b      	mov	r3, r7
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <ILI9341_SendData>

    // VCOM Control 1
    ILI9341_SendCommand(0xC5);
 8003636:	20c5      	movs	r0, #197	@ 0xc5
 8003638:	f7ff ff34 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x3E; data[1] = 0x28;
 800363c:	233e      	movs	r3, #62	@ 0x3e
 800363e:	703b      	strb	r3, [r7, #0]
 8003640:	2328      	movs	r3, #40	@ 0x28
 8003642:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8003644:	463b      	mov	r3, r7
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff51 	bl	80034f0 <ILI9341_SendData>

    // VCOM Control 2
    ILI9341_SendCommand(0xC7);
 800364e:	20c7      	movs	r0, #199	@ 0xc7
 8003650:	f7ff ff28 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x86;
 8003654:	2386      	movs	r3, #134	@ 0x86
 8003656:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003658:	463b      	mov	r3, r7
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff47 	bl	80034f0 <ILI9341_SendData>

    // Memory Access Control
    ILI9341_SendCommand(0x36);
 8003662:	2036      	movs	r0, #54	@ 0x36
 8003664:	f7ff ff1e 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x48;
 8003668:	2348      	movs	r3, #72	@ 0x48
 800366a:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 800366c:	463b      	mov	r3, r7
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff3d 	bl	80034f0 <ILI9341_SendData>

    // Pixel Format Set
    ILI9341_SendCommand(0x3A);
 8003676:	203a      	movs	r0, #58	@ 0x3a
 8003678:	f7ff ff14 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x55;  // 16-bit RGB565
 800367c:	2355      	movs	r3, #85	@ 0x55
 800367e:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8003680:	463b      	mov	r3, r7
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff33 	bl	80034f0 <ILI9341_SendData>

    // Frame Rate Control
    ILI9341_SendCommand(0xB1);
 800368a:	20b1      	movs	r0, #177	@ 0xb1
 800368c:	f7ff ff0a 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x18;
 8003690:	2300      	movs	r3, #0
 8003692:	703b      	strb	r3, [r7, #0]
 8003694:	2318      	movs	r3, #24
 8003696:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8003698:	463b      	mov	r3, r7
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff27 	bl	80034f0 <ILI9341_SendData>

    // Display Function Control
    ILI9341_SendCommand(0xB6);
 80036a2:	20b6      	movs	r0, #182	@ 0xb6
 80036a4:	f7ff fefe 	bl	80034a4 <ILI9341_SendCommand>
    data[0] = 0x08; data[1] = 0x82; data[2] = 0x27;
 80036a8:	2308      	movs	r3, #8
 80036aa:	703b      	strb	r3, [r7, #0]
 80036ac:	2382      	movs	r3, #130	@ 0x82
 80036ae:	707b      	strb	r3, [r7, #1]
 80036b0:	2327      	movs	r3, #39	@ 0x27
 80036b2:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 80036b4:	463b      	mov	r3, r7
 80036b6:	2103      	movs	r1, #3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff19 	bl	80034f0 <ILI9341_SendData>

    // Exit Sleep Mode
    ILI9341_SendCommand(0x11);
 80036be:	2011      	movs	r0, #17
 80036c0:	f7ff fef0 	bl	80034a4 <ILI9341_SendCommand>
    HAL_Delay(120);
 80036c4:	2078      	movs	r0, #120	@ 0x78
 80036c6:	f001 fb49 	bl	8004d5c <HAL_Delay>

    // Turn on Display
    ILI9341_SendCommand(0x29);
 80036ca:	2029      	movs	r0, #41	@ 0x29
 80036cc:	f7ff feea 	bl	80034a4 <ILI9341_SendCommand>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40020800 	.word	0x40020800

080036dc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4602      	mov	r2, r0
 80036e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036ea:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 80036ee:	801a      	strh	r2, [r3, #0]
    // Combine the color bytes to save redundant operations
    uint8_t buffer[512]; // Buffer to send 256 pixels (512 bytes for RGB565)
    uint8_t high_byte = color >> 8;
 80036f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036f4:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t low_byte = color & 0xFF;
 8003702:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003706:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

    // Fill the buffer once
    for (uint16_t i = 0; i < 256; i++) {
 8003710:	2300      	movs	r3, #0
 8003712:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8003716:	e019      	b.n	800374c <ILI9341_FillScreen+0x70>
        buffer[i * 2] = high_byte;
 8003718:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003722:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8003726:	f897 1217 	ldrb.w	r1, [r7, #535]	@ 0x217
 800372a:	54d1      	strb	r1, [r2, r3]
        buffer[i * 2 + 1] = low_byte;
 800372c:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	3301      	adds	r3, #1
 8003734:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003738:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800373c:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 8003740:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < 256; i++) {
 8003742:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003746:	3301      	adds	r3, #1
 8003748:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 800374c:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8003750:	2bff      	cmp	r3, #255	@ 0xff
 8003752:	d9e1      	bls.n	8003718 <ILI9341_FillScreen+0x3c>
    }

    // Set column address (entire width of the display)
    uint8_t col_data[4] = {0x00, 0x00, 0x00, 0xEF}; // Start: 0x0000, End: 239
 8003754:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003758:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800375c:	f04f 426f 	mov.w	r2, #4009754624	@ 0xef000000
 8003760:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2A); // Column Address Set
 8003762:	202a      	movs	r0, #42	@ 0x2a
 8003764:	f7ff fe9e 	bl	80034a4 <ILI9341_SendCommand>
    ILI9341_SendData(col_data, sizeof(col_data));
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	2104      	movs	r1, #4
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff febe 	bl	80034f0 <ILI9341_SendData>

    // Set page address (entire height of the display)
    uint8_t page_data[4] = {0x00, 0x00, 0x01, 0x3F}; // Start: 0x0000, End: 319
 8003774:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003778:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800377c:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <ILI9341_FillScreen+0xfc>)
 800377e:	601a      	str	r2, [r3, #0]
    ILI9341_SendCommand(0x2B); // Page Address Set
 8003780:	202b      	movs	r0, #43	@ 0x2b
 8003782:	f7ff fe8f 	bl	80034a4 <ILI9341_SendCommand>
    ILI9341_SendData(page_data, sizeof(page_data));
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	2104      	movs	r1, #4
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff feaf 	bl	80034f0 <ILI9341_SendData>

    // Start memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 8003792:	202c      	movs	r0, #44	@ 0x2c
 8003794:	f7ff fe86 	bl	80034a4 <ILI9341_SendCommand>

    // Send buffer in chunks
    uint32_t num_chunks = (240 * 320) / 256; // Total pixels divided by buffer size
 8003798:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800379c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    for (uint32_t i = 0; i < num_chunks; i++) {
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80037a6:	e00b      	b.n	80037c0 <ILI9341_FillScreen+0xe4>
        ILI9341_SendData(buffer, sizeof(buffer));
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe9d 	bl	80034f0 <ILI9341_SendData>
    for (uint32_t i = 0; i < num_chunks; i++) {
 80037b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80037ba:	3301      	adds	r3, #1
 80037bc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80037c0:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80037c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3ed      	bcc.n	80037a8 <ILI9341_FillScreen+0xcc>
    }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	3f010000 	.word	0x3f010000

080037dc <ILI9341_SetAddressWindow>:


void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	80fb      	strh	r3, [r7, #6]
 80037ee:	4603      	mov	r3, r0
 80037f0:	80bb      	strh	r3, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	807b      	strh	r3, [r7, #2]
 80037f6:	4613      	mov	r3, r2
 80037f8:	803b      	strh	r3, [r7, #0]
    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 80037fa:	202a      	movs	r0, #42	@ 0x2a
 80037fc:	f7ff fe52 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t columnData[4] = {
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	733b      	strb	r3, [r7, #12]
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	737b      	strb	r3, [r7, #13]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	73bb      	strb	r3, [r7, #14]
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	73fb      	strb	r3, [r7, #15]
        (x0 >> 8) & 0xFF, x0 & 0xFF, // Start column
        (x1 >> 8) & 0xFF, x1 & 0xFF  // End column
    };
    ILI9341_SendData(columnData, 4);
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	2104      	movs	r1, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fe62 	bl	80034f0 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 800382c:	202b      	movs	r0, #43	@ 0x2b
 800382e:	f7ff fe39 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t rowData[4] = {
 8003832:	88bb      	ldrh	r3, [r7, #4]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	723b      	strb	r3, [r7, #8]
 800383c:	88bb      	ldrh	r3, [r7, #4]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	727b      	strb	r3, [r7, #9]
 8003842:	883b      	ldrh	r3, [r7, #0]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	72bb      	strb	r3, [r7, #10]
 800384c:	883b      	ldrh	r3, [r7, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	72fb      	strb	r3, [r7, #11]
        (y0 >> 8) & 0xFF, y0 & 0xFF, // Start row
        (y1 >> 8) & 0xFF, y1 & 0xFF  // End row
    };
    ILI9341_SendData(rowData, 4);
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	2104      	movs	r1, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fe49 	bl	80034f0 <ILI9341_SendData>

    // Prepare for memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 800385e:	202c      	movs	r0, #44	@ 0x2c
 8003860:	f7ff fe20 	bl	80034a4 <ILI9341_SendCommand>
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}

0800386c <ILI9341_DrawPixel>:
#include "lcd_functions.h"
#include "fatfs.h"
#include "gfxfont.h"

bool FadeTextComplete = false;
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
 8003876:	460b      	mov	r3, r1
 8003878:	80bb      	strh	r3, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	807b      	strh	r3, [r7, #2]
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2bef      	cmp	r3, #239	@ 0xef
 8003882:	d847      	bhi.n	8003914 <ILI9341_DrawPixel+0xa8>
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800388a:	d243      	bcs.n	8003914 <ILI9341_DrawPixel+0xa8>

    ILI9341_SendCommand(0x2A); // Column Address Set
 800388c:	202a      	movs	r0, #42	@ 0x2a
 800388e:	f7ff fe09 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t data_x[] = {(x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF};
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	b29b      	uxth	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	753b      	strb	r3, [r7, #20]
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	757b      	strb	r3, [r7, #21]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	75bb      	strb	r3, [r7, #22]
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	75fb      	strb	r3, [r7, #23]
    ILI9341_SendData(data_x, 4);
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	2104      	movs	r1, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe19 	bl	80034f0 <ILI9341_SendData>

    ILI9341_SendCommand(0x2B); // Page Address Set
 80038be:	202b      	movs	r0, #43	@ 0x2b
 80038c0:	f7ff fdf0 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t data_y[] = {(y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF};
 80038c4:	88bb      	ldrh	r3, [r7, #4]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	743b      	strb	r3, [r7, #16]
 80038ce:	88bb      	ldrh	r3, [r7, #4]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	747b      	strb	r3, [r7, #17]
 80038d4:	88bb      	ldrh	r3, [r7, #4]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b29b      	uxth	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	74bb      	strb	r3, [r7, #18]
 80038de:	88bb      	ldrh	r3, [r7, #4]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(data_y, 4);
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	2104      	movs	r1, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fe00 	bl	80034f0 <ILI9341_SendData>

    ILI9341_SendCommand(0x2C); // Memory Write
 80038f0:	202c      	movs	r0, #44	@ 0x2c
 80038f2:	f7ff fdd7 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t color_data[] = {(color >> 8) & 0xFF, color & 0xFF};
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	733b      	strb	r3, [r7, #12]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(color_data, 2);
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	2102      	movs	r1, #2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fdef 	bl	80034f0 <ILI9341_SendData>
 8003912:	e000      	b.n	8003916 <ILI9341_DrawPixel+0xaa>
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 8003914:	bf00      	nop
}
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <DrawChar>:
void DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t scale) {
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	4603      	mov	r3, r0
 8003930:	80bb      	strh	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]
 8003936:	4613      	mov	r3, r2
 8003938:	803b      	strh	r3, [r7, #0]
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 800393a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f2c0 80c7 	blt.w	8003ad2 <DrawChar+0x1b6>

    // Map ASCII character to the font array
    const unsigned char *charBitmap = &font[c * 5];
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	4a63      	ldr	r2, [pc, #396]	@ (8003adc <DrawChar+0x1c0>)
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

    // Draw each column of the character
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]
 8003956:	e089      	b.n	8003a6c <DrawChar+0x150>
        uint8_t columnData = charBitmap[col];
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	72fb      	strb	r3, [r7, #11]
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8003962:	2300      	movs	r3, #0
 8003964:	75bb      	strb	r3, [r7, #22]
 8003966:	e07b      	b.n	8003a60 <DrawChar+0x144>
            if (columnData & (1 << row)) { // Check if pixel is ON
 8003968:	7afa      	ldrb	r2, [r7, #11]
 800396a:	7dbb      	ldrb	r3, [r7, #22]
 800396c:	fa42 f303 	asr.w	r3, r2, r3
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d038      	beq.n	80039ea <DrawChar+0xce>
                // Draw a scaled block for the ON pixel
                for (uint8_t i = 0; i < scale; i++) {
 8003978:	2300      	movs	r3, #0
 800397a:	757b      	strb	r3, [r7, #21]
 800397c:	e02f      	b.n	80039de <DrawChar+0xc2>
                    for (uint8_t j = 0; j < scale; j++) {
 800397e:	2300      	movs	r3, #0
 8003980:	753b      	strb	r3, [r7, #20]
 8003982:	e024      	b.n	80039ce <DrawChar+0xb2>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, color);
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	b29a      	uxth	r2, r3
 8003988:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800398c:	b29b      	uxth	r3, r3
 800398e:	fb12 f303 	smulbb	r3, r2, r3
 8003992:	b29a      	uxth	r2, r3
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	4413      	add	r3, r2
 8003998:	b29a      	uxth	r2, r3
 800399a:	7d7b      	ldrb	r3, [r7, #21]
 800399c:	b29b      	uxth	r3, r3
 800399e:	4413      	add	r3, r2
 80039a0:	b298      	uxth	r0, r3
 80039a2:	7dbb      	ldrb	r3, [r7, #22]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	fb12 f303 	smulbb	r3, r2, r3
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	88bb      	ldrh	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	7d3b      	ldrb	r3, [r7, #20]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	883a      	ldrh	r2, [r7, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	f7ff ff52 	bl	800386c <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 80039c8:	7d3b      	ldrb	r3, [r7, #20]
 80039ca:	3301      	adds	r3, #1
 80039cc:	753b      	strb	r3, [r7, #20]
 80039ce:	7d3a      	ldrb	r2, [r7, #20]
 80039d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3d5      	bcc.n	8003984 <DrawChar+0x68>
                for (uint8_t i = 0; i < scale; i++) {
 80039d8:	7d7b      	ldrb	r3, [r7, #21]
 80039da:	3301      	adds	r3, #1
 80039dc:	757b      	strb	r3, [r7, #21]
 80039de:	7d7a      	ldrb	r2, [r7, #21]
 80039e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3ca      	bcc.n	800397e <DrawChar+0x62>
 80039e8:	e037      	b.n	8003a5a <DrawChar+0x13e>
                    }
                }
            } else {
                // Draw a scaled block for the OFF pixel (background)
                for (uint8_t i = 0; i < scale; i++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	74fb      	strb	r3, [r7, #19]
 80039ee:	e02f      	b.n	8003a50 <DrawChar+0x134>
                    for (uint8_t j = 0; j < scale; j++) {
 80039f0:	2300      	movs	r3, #0
 80039f2:	74bb      	strb	r3, [r7, #18]
 80039f4:	e024      	b.n	8003a40 <DrawChar+0x124>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, bg);
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	fb12 f303 	smulbb	r3, r2, r3
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	4413      	add	r3, r2
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	b298      	uxth	r0, r3
 8003a14:	7dbb      	ldrb	r3, [r7, #22]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	fb12 f303 	smulbb	r3, r2, r3
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	88bb      	ldrh	r3, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	7cbb      	ldrb	r3, [r7, #18]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7ff ff19 	bl	800386c <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8003a3a:	7cbb      	ldrb	r3, [r7, #18]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	74bb      	strb	r3, [r7, #18]
 8003a40:	7cba      	ldrb	r2, [r7, #18]
 8003a42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3d5      	bcc.n	80039f6 <DrawChar+0xda>
                for (uint8_t i = 0; i < scale; i++) {
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	74fb      	strb	r3, [r7, #19]
 8003a50:	7cfa      	ldrb	r2, [r7, #19]
 8003a52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d3ca      	bcc.n	80039f0 <DrawChar+0xd4>
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8003a5a:	7dbb      	ldrb	r3, [r7, #22]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	75bb      	strb	r3, [r7, #22]
 8003a60:	7dbb      	ldrb	r3, [r7, #22]
 8003a62:	2b07      	cmp	r3, #7
 8003a64:	d980      	bls.n	8003968 <DrawChar+0x4c>
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	f67f af72 	bls.w	8003958 <DrawChar+0x3c>
            }
        }
    }

    // Add scaled spacing after each character
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8003a74:	2300      	movs	r3, #0
 8003a76:	747b      	strb	r3, [r7, #17]
 8003a78:	e024      	b.n	8003ac4 <DrawChar+0x1a8>
        for (uint8_t i = 0; i < scale; i++) {
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	743b      	strb	r3, [r7, #16]
 8003a7e:	e019      	b.n	8003ab4 <DrawChar+0x198>
            ILI9341_DrawPixel(x + 5 * scale + i, y + row, bg);
 8003a80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	0092      	lsls	r2, r2, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	4413      	add	r3, r2
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	7c3b      	ldrb	r3, [r7, #16]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	b298      	uxth	r0, r3
 8003a9c:	7c7b      	ldrb	r3, [r7, #17]
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	88bb      	ldrh	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7ff fedf 	bl	800386c <ILI9341_DrawPixel>
        for (uint8_t i = 0; i < scale; i++) {
 8003aae:	7c3b      	ldrb	r3, [r7, #16]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	743b      	strb	r3, [r7, #16]
 8003ab4:	7c3a      	ldrb	r2, [r7, #16]
 8003ab6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3e0      	bcc.n	8003a80 <DrawChar+0x164>
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8003abe:	7c7b      	ldrb	r3, [r7, #17]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	747b      	strb	r3, [r7, #17]
 8003ac4:	7c7a      	ldrb	r2, [r7, #17]
 8003ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	429a      	cmp	r2, r3
 8003ace:	dbd4      	blt.n	8003a7a <DrawChar+0x15e>
 8003ad0:	e000      	b.n	8003ad4 <DrawChar+0x1b8>
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8003ad2:	bf00      	nop
        }
    }
}
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}
 8003ada:	bf00      	nop
 8003adc:	0800fde8 	.word	0x0800fde8

08003ae0 <DrawString>:


void DrawString(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bg, uint8_t scale) {
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	81fb      	strh	r3, [r7, #14]
 8003aee:	460b      	mov	r3, r1
 8003af0:	81bb      	strh	r3, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 8003af6:	e01a      	b.n	8003b2e <DrawString+0x4e>
        DrawChar(x, y, *str, color, bg, scale);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	88fc      	ldrh	r4, [r7, #6]
 8003afe:	89b9      	ldrh	r1, [r7, #12]
 8003b00:	89f8      	ldrh	r0, [r7, #14]
 8003b02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	8c3b      	ldrh	r3, [r7, #32]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	f7ff ff05 	bl	800391c <DrawChar>
        x += 6 * scale; // Adjust character spacing based on scale
 8003b12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	0052      	lsls	r2, r2, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	89fb      	ldrh	r3, [r7, #14]
 8003b24:	4413      	add	r3, r2
 8003b26:	81fb      	strh	r3, [r7, #14]
        str++;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e0      	bne.n	8003af8 <DrawString+0x18>
    }
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}

08003b40 <ILI9341_FillRect>:


void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4623      	mov	r3, r4
 8003b50:	80fb      	strh	r3, [r7, #6]
 8003b52:	4603      	mov	r3, r0
 8003b54:	80bb      	strh	r3, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	803b      	strh	r3, [r7, #0]
    // Ensure the rectangle lies within the screen boundaries
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2bef      	cmp	r3, #239	@ 0xef
 8003b62:	d879      	bhi.n	8003c58 <ILI9341_FillRect+0x118>
 8003b64:	88bb      	ldrh	r3, [r7, #4]
 8003b66:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b6a:	d275      	bcs.n	8003c58 <ILI9341_FillRect+0x118>

    // Clip width and height if the rectangle extends beyond screen boundaries
    if ((x + width - 1) >= ILI9341_WIDTH) {
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	4413      	add	r3, r2
 8003b72:	2bf0      	cmp	r3, #240	@ 0xf0
 8003b74:	dd03      	ble.n	8003b7e <ILI9341_FillRect+0x3e>
        width = ILI9341_WIDTH - x;
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003b7c:	807b      	strh	r3, [r7, #2]
    }
    if ((y + height - 1) >= ILI9341_HEIGHT) {
 8003b7e:	88ba      	ldrh	r2, [r7, #4]
 8003b80:	883b      	ldrh	r3, [r7, #0]
 8003b82:	4413      	add	r3, r2
 8003b84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b88:	dd03      	ble.n	8003b92 <ILI9341_FillRect+0x52>
        height = ILI9341_HEIGHT - y;
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003b90:	803b      	strh	r3, [r7, #0]
    }

    // Set column address
    ILI9341_SendCommand(0x2A); // Column Address Set
 8003b92:	202a      	movs	r0, #42	@ 0x2a
 8003b94:	f7ff fc86 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t colData[4] = { (x >> 8) & 0xFF, x & 0xFF, ((x + width - 1) >> 8) & 0xFF, (x + width - 1) & 0xFF };
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	743b      	strb	r3, [r7, #16]
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	747b      	strb	r3, [r7, #17]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	4413      	add	r3, r2
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	121b      	asrs	r3, r3, #8
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	74bb      	strb	r3, [r7, #18]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(colData, 4);
 8003bc8:	f107 0310 	add.w	r3, r7, #16
 8003bcc:	2104      	movs	r1, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fc8e 	bl	80034f0 <ILI9341_SendData>

    // Set row address
    ILI9341_SendCommand(0x2B); // Page Address Set
 8003bd4:	202b      	movs	r0, #43	@ 0x2b
 8003bd6:	f7ff fc65 	bl	80034a4 <ILI9341_SendCommand>
    uint8_t rowData[4] = { (y >> 8) & 0xFF, y & 0xFF, ((y + height - 1) >> 8) & 0xFF, (y + height - 1) & 0xFF };
 8003bda:	88bb      	ldrh	r3, [r7, #4]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	733b      	strb	r3, [r7, #12]
 8003be4:	88bb      	ldrh	r3, [r7, #4]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	737b      	strb	r3, [r7, #13]
 8003bea:	88ba      	ldrh	r2, [r7, #4]
 8003bec:	883b      	ldrh	r3, [r7, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	121b      	asrs	r3, r3, #8
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	73bb      	strb	r3, [r7, #14]
 8003bf8:	88bb      	ldrh	r3, [r7, #4]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	883b      	ldrh	r3, [r7, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	73fb      	strb	r3, [r7, #15]
    ILI9341_SendData(rowData, 4);
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	2104      	movs	r1, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fc6d 	bl	80034f0 <ILI9341_SendData>

    // Write memory
    ILI9341_SendCommand(0x2C); // Memory Write
 8003c16:	202c      	movs	r0, #44	@ 0x2c
 8003c18:	f7ff fc44 	bl	80034a4 <ILI9341_SendCommand>

    // Fill the rectangle with color
    uint16_t pixelCount = width * height;
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	883b      	ldrh	r3, [r7, #0]
 8003c20:	fb12 f303 	smulbb	r3, r2, r3
 8003c24:	82bb      	strh	r3, [r7, #20]
    uint8_t colorData[2] = { (color >> 8) & 0xFF, color & 0xFF }; // Split color into 2 bytes
 8003c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	723b      	strb	r3, [r7, #8]
 8003c30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	727b      	strb	r3, [r7, #9]
    for (uint16_t i = 0; i < pixelCount; i++) {
 8003c36:	2300      	movs	r3, #0
 8003c38:	82fb      	strh	r3, [r7, #22]
 8003c3a:	e008      	b.n	8003c4e <ILI9341_FillRect+0x10e>
        ILI9341_SendData(colorData, 2);
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	2102      	movs	r1, #2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fc54 	bl	80034f0 <ILI9341_SendData>
    for (uint16_t i = 0; i < pixelCount; i++) {
 8003c48:	8afb      	ldrh	r3, [r7, #22]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	82fb      	strh	r3, [r7, #22]
 8003c4e:	8afa      	ldrh	r2, [r7, #22]
 8003c50:	8abb      	ldrh	r3, [r7, #20]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3f2      	bcc.n	8003c3c <ILI9341_FillRect+0xfc>
 8003c56:	e000      	b.n	8003c5a <ILI9341_FillRect+0x11a>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003c58:	bf00      	nop
    }
}
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}

08003c60 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(int x, int y, int length, uint16_t color) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e00e      	b.n	8003c92 <ILI9341_DrawVLine+0x32>
        ILI9341_DrawPixel(x, y + i, color);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	b298      	uxth	r0, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	4619      	mov	r1, r3
 8003c88:	f7ff fdf0 	bl	800386c <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dbec      	blt.n	8003c74 <ILI9341_DrawVLine+0x14>
    }
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(int x, int y, int length, uint16_t color) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < length; i++) {
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e00e      	b.n	8003cd6 <ILI9341_DrawHLine+0x32>
        ILI9341_DrawPixel(x + i, y, color);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	b291      	uxth	r1, r2
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fdce 	bl	800386c <ILI9341_DrawPixel>
    for (int i = 0; i < length; i++) {
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	dbec      	blt.n	8003cb8 <ILI9341_DrawHLine+0x14>
    }
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <ILI9341_DrawRect>:

void ILI9341_DrawRect(int x, int y, int width, int height, uint16_t color) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
    // Draw top horizontal line
    ILI9341_DrawHLine(x, y, width, color);
 8003cf6:	8b3b      	ldrh	r3, [r7, #24]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff ffd1 	bl	8003ca4 <ILI9341_DrawHLine>

    // Draw bottom horizontal line
    ILI9341_DrawHLine(x, y + height - 1, width, color);
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	8b3b      	ldrh	r3, [r7, #24]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ffc8 	bl	8003ca4 <ILI9341_DrawHLine>

    // Draw left vertical line
    ILI9341_DrawVLine(x, y, height, color);
 8003d14:	8b3b      	ldrh	r3, [r7, #24]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ffa0 	bl	8003c60 <ILI9341_DrawVLine>

    // Draw right vertical line
    ILI9341_DrawVLine(x + width - 1, y, height, color);
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	8b3b      	ldrh	r3, [r7, #24]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	f7ff ff97 	bl	8003c60 <ILI9341_DrawVLine>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <progress_bar>:
        DrawString(x, y_pos, text, color, bg_color, 1); // Draw text at new position
        HAL_Delay(50); // Adjust speed of sliding
    }
}

void progress_bar(int x, int y, int width, int height, uint16_t fill_color, uint16_t bg_color, int percentage) {
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b089      	sub	sp, #36	@ 0x24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
    int progress_width = (width * percentage) / 100;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc4 <progress_bar+0x88>)
 8003d54:	fb82 1203 	smull	r1, r2, r2, r3
 8003d58:	1152      	asrs	r2, r2, #5
 8003d5a:	17db      	asrs	r3, r3, #31
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]

    // Draw only the progress portion
    ILI9341_FillRect(x, y, progress_width, height, fill_color);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	b298      	uxth	r0, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	b299      	uxth	r1, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b29c      	uxth	r4, r3
 8003d70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4623      	mov	r3, r4
 8003d76:	f7ff fee3 	bl	8003b40 <ILI9341_FillRect>

    // Optionally draw the remaining portion (if needed)
    if (percentage < 100) {
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	2b63      	cmp	r3, #99	@ 0x63
 8003d7e:	dc14      	bgt.n	8003daa <progress_bar+0x6e>
        ILI9341_FillRect(x + progress_width, y, width - progress_width, height, bg_color);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	b298      	uxth	r0, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	b299      	uxth	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b29c      	uxth	r4, r3
 8003da0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4623      	mov	r3, r4
 8003da6:	f7ff fecb 	bl	8003b40 <ILI9341_FillRect>
    }

    // Draw a border if necessary
    ILI9341_DrawRect(x, y, width, height, 0xFFFF);
 8003daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff ff96 	bl	8003ce8 <ILI9341_DrawRect>
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd90      	pop	{r4, r7, pc}
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <FlashScreen>:
        }
    }
}

void FlashScreen(int flashes, int duration)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < flashes; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	e019      	b.n	8003e0c <FlashScreen+0x44>
    {
        ILI9341_FillScreen(0xFFFF); // White screen
 8003dd8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003ddc:	f7ff fc7e 	bl	80036dc <ILI9341_FillScreen>
        HAL_Delay(duration-(duration/2));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	0fda      	lsrs	r2, r3, #31
 8003de4:	4413      	add	r3, r2
 8003de6:	105b      	asrs	r3, r3, #1
 8003de8:	425b      	negs	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 ffb3 	bl	8004d5c <HAL_Delay>
        ILI9341_FillScreen(0xF7BE); // Black screen
 8003df6:	f24f 70be 	movw	r0, #63422	@ 0xf7be
 8003dfa:	f7ff fc6f 	bl	80036dc <ILI9341_FillScreen>
        HAL_Delay(duration);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 ffab 	bl	8004d5c <HAL_Delay>
    for (int i = 0; i < flashes; i++)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dbe1      	blt.n	8003dd8 <FlashScreen+0x10>
    }
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e22:	f000 ff29 	bl	8004c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e26:	f000 f813 	bl	8003e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e2a:	f000 f979 	bl	8004120 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e2e:	f000 f931 	bl	8004094 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003e32:	f000 f8db 	bl	8003fec <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003e36:	f000 f8a3 	bl	8003f80 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003e3a:	f000 f873 	bl	8003f24 <MX_I2C1_Init>
  MX_FATFS_Init();
 8003e3e:	f005 f9ab 	bl	8009198 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8003e42:	f000 f8fd 	bl	8004040 <MX_USART2_UART_Init>
  init_game();
 8003e46:	f7fe fa33 	bl	80022b0 <init_game>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  game_state_machine();
 8003e4a:	f7fe fa87 	bl	800235c <game_state_machine>
 8003e4e:	e7fc      	b.n	8003e4a <main+0x2c>

08003e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b094      	sub	sp, #80	@ 0x50
 8003e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e56:	f107 0320 	add.w	r3, r7, #32
 8003e5a:	2230      	movs	r2, #48	@ 0x30
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f009 f9fe 	bl	800d260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <SystemClock_Config+0xcc>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	4a27      	ldr	r2, [pc, #156]	@ (8003f1c <SystemClock_Config+0xcc>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e84:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <SystemClock_Config+0xcc>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e90:	2300      	movs	r3, #0
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <SystemClock_Config+0xd0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a21      	ldr	r2, [pc, #132]	@ (8003f20 <SystemClock_Config+0xd0>)
 8003e9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <SystemClock_Config+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eac:	2302      	movs	r3, #2
 8003eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003ec4:	2360      	movs	r3, #96	@ 0x60
 8003ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003ecc:	2308      	movs	r3, #8
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f002 ff13 	bl	8006d00 <HAL_RCC_OscConfig>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ee0:	f000 fa56 	bl	8004390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	2103      	movs	r1, #3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 f974 	bl	80071f0 <HAL_RCC_ClockConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003f0e:	f000 fa3f 	bl	8004390 <Error_Handler>
  }
}
 8003f12:	bf00      	nop
 8003f14:	3750      	adds	r7, #80	@ 0x50
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000

08003f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <MX_I2C1_Init+0x54>)
 8003f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003f2e:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f30:	4a12      	ldr	r2, [pc, #72]	@ (8003f7c <MX_I2C1_Init+0x58>)
 8003f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f34:	4b0f      	ldr	r3, [pc, #60]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f48:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f54:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f5a:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f60:	4804      	ldr	r0, [pc, #16]	@ (8003f74 <MX_I2C1_Init+0x50>)
 8003f62:	f001 fd7b 	bl	8005a5c <HAL_I2C_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f6c:	f000 fa10 	bl	8004390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20001328 	.word	0x20001328
 8003f78:	40005400 	.word	0x40005400
 8003f7c:	000186a0 	.word	0x000186a0

08003f80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f84:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003f86:	4a18      	ldr	r2, [pc, #96]	@ (8003fe8 <MX_SPI2_Init+0x68>)
 8003f88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f92:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f98:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fcc:	220a      	movs	r2, #10
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	@ (8003fe4 <MX_SPI2_Init+0x64>)
 8003fd2:	f003 fb2d 	bl	8007630 <HAL_SPI_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fdc:	f000 f9d8 	bl	8004390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	2000137c 	.word	0x2000137c
 8003fe8:	40003800 	.word	0x40003800

08003fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <MX_USART1_UART_Init+0x50>)
 8003ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8003ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004010:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8004012:	220c      	movs	r2, #12
 8004014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004022:	4805      	ldr	r0, [pc, #20]	@ (8004038 <MX_USART1_UART_Init+0x4c>)
 8004024:	f004 f8b8 	bl	8008198 <HAL_HalfDuplex_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800402e:	f000 f9af 	bl	8004390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20001494 	.word	0x20001494
 800403c:	40011000 	.word	0x40011000

08004040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004046:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <MX_USART2_UART_Init+0x50>)
 8004048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800404a:	4b10      	ldr	r3, [pc, #64]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 800404c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b0e      	ldr	r3, [pc, #56]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	@ (800408c <MX_USART2_UART_Init+0x4c>)
 8004078:	f004 f83e 	bl	80080f8 <HAL_UART_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004082:	f000 f985 	bl	8004390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200014dc 	.word	0x200014dc
 8004090:	40004400 	.word	0x40004400

08004094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <MX_DMA_Init+0x88>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <MX_DMA_Init+0x88>)
 80040a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040aa:	4b1c      	ldr	r3, [pc, #112]	@ (800411c <MX_DMA_Init+0x88>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4b18      	ldr	r3, [pc, #96]	@ (800411c <MX_DMA_Init+0x88>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	4a17      	ldr	r2, [pc, #92]	@ (800411c <MX_DMA_Init+0x88>)
 80040c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c6:	4b15      	ldr	r3, [pc, #84]	@ (800411c <MX_DMA_Init+0x88>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2100      	movs	r1, #0
 80040d6:	200e      	movs	r0, #14
 80040d8:	f000 ff3f 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80040dc:	200e      	movs	r0, #14
 80040de:	f000 ff58 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80040e2:	2200      	movs	r2, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	200f      	movs	r0, #15
 80040e8:	f000 ff37 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80040ec:	200f      	movs	r0, #15
 80040ee:	f000 ff50 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	203a      	movs	r0, #58	@ 0x3a
 80040f8:	f000 ff2f 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80040fc:	203a      	movs	r0, #58	@ 0x3a
 80040fe:	f000 ff48 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	2046      	movs	r0, #70	@ 0x46
 8004108:	f000 ff27 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800410c:	2046      	movs	r0, #70	@ 0x46
 800410e:	f000 ff40 	bl	8004f92 <HAL_NVIC_EnableIRQ>

}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	@ 0x30
 8004124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	4b86      	ldr	r3, [pc, #536]	@ (8004354 <MX_GPIO_Init+0x234>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	4a85      	ldr	r2, [pc, #532]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6313      	str	r3, [r2, #48]	@ 0x30
 8004146:	4b83      	ldr	r3, [pc, #524]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4b7f      	ldr	r3, [pc, #508]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	4a7e      	ldr	r2, [pc, #504]	@ (8004354 <MX_GPIO_Init+0x234>)
 800415c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004160:	6313      	str	r3, [r2, #48]	@ 0x30
 8004162:	4b7c      	ldr	r3, [pc, #496]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b78      	ldr	r3, [pc, #480]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	4a77      	ldr	r2, [pc, #476]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6313      	str	r3, [r2, #48]	@ 0x30
 800417e:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b71      	ldr	r3, [pc, #452]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a70      	ldr	r2, [pc, #448]	@ (8004354 <MX_GPIO_Init+0x234>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b6e      	ldr	r3, [pc, #440]	@ (8004354 <MX_GPIO_Init+0x234>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	4a69      	ldr	r2, [pc, #420]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041b0:	f043 0308 	orr.w	r3, r3, #8
 80041b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b6:	4b67      	ldr	r3, [pc, #412]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	4b63      	ldr	r3, [pc, #396]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	4a62      	ldr	r2, [pc, #392]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041cc:	f043 0310 	orr.w	r3, r3, #16
 80041d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <MX_GPIO_Init+0x234>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80041de:	2201      	movs	r2, #1
 80041e0:	2101      	movs	r1, #1
 80041e2:	485d      	ldr	r0, [pc, #372]	@ (8004358 <MX_GPIO_Init+0x238>)
 80041e4:	f001 fc08 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80041e8:	2200      	movs	r2, #0
 80041ea:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80041ee:	485b      	ldr	r0, [pc, #364]	@ (800435c <MX_GPIO_Init+0x23c>)
 80041f0:	f001 fc02 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80041f4:	2200      	movs	r2, #0
 80041f6:	f24f 2110 	movw	r1, #61968	@ 0xf210
 80041fa:	4859      	ldr	r0, [pc, #356]	@ (8004360 <MX_GPIO_Init+0x240>)
 80041fc:	f001 fbfc 	bl	80059f8 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	4854      	ldr	r0, [pc, #336]	@ (8004358 <MX_GPIO_Init+0x238>)
 8004206:	f001 fbf7 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800420a:	2200      	movs	r2, #0
 800420c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004210:	4854      	ldr	r0, [pc, #336]	@ (8004364 <MX_GPIO_Init+0x244>)
 8004212:	f001 fbf1 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8004216:	2381      	movs	r3, #129	@ 0x81
 8004218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421a:	2301      	movs	r3, #1
 800421c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004226:	f107 031c 	add.w	r3, r7, #28
 800422a:	4619      	mov	r1, r3
 800422c:	484a      	ldr	r0, [pc, #296]	@ (8004358 <MX_GPIO_Init+0x238>)
 800422e:	f001 fa47 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004232:	2308      	movs	r3, #8
 8004234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004242:	2305      	movs	r3, #5
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	4842      	ldr	r0, [pc, #264]	@ (8004358 <MX_GPIO_Init+0x238>)
 800424e:	f001 fa37 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004252:	2301      	movs	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004256:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800425a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004260:	f107 031c 	add.w	r3, r7, #28
 8004264:	4619      	mov	r1, r3
 8004266:	483f      	ldr	r0, [pc, #252]	@ (8004364 <MX_GPIO_Init+0x244>)
 8004268:	f001 fa2a 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800426c:	2320      	movs	r3, #32
 800426e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	4619      	mov	r1, r3
 800427e:	4836      	ldr	r0, [pc, #216]	@ (8004358 <MX_GPIO_Init+0x238>)
 8004280:	f001 fa1e 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004284:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428a:	2301      	movs	r3, #1
 800428c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004292:	2300      	movs	r3, #0
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004296:	f107 031c 	add.w	r3, r7, #28
 800429a:	4619      	mov	r1, r3
 800429c:	482f      	ldr	r0, [pc, #188]	@ (800435c <MX_GPIO_Init+0x23c>)
 800429e:	f001 fa0f 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80042a2:	f24f 2310 	movw	r3, #61968	@ 0xf210
 80042a6:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a8:	2301      	movs	r3, #1
 80042aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042b4:	f107 031c 	add.w	r3, r7, #28
 80042b8:	4619      	mov	r1, r3
 80042ba:	4829      	ldr	r0, [pc, #164]	@ (8004360 <MX_GPIO_Init+0x240>)
 80042bc:	f001 fa00 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80042c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c6:	2300      	movs	r3, #0
 80042c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	4823      	ldr	r0, [pc, #140]	@ (8004364 <MX_GPIO_Init+0x244>)
 80042d6:	f001 f9f3 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e0:	2301      	movs	r3, #1
 80042e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ec:	f107 031c 	add.w	r3, r7, #28
 80042f0:	4619      	mov	r1, r3
 80042f2:	481c      	ldr	r0, [pc, #112]	@ (8004364 <MX_GPIO_Init+0x244>)
 80042f4:	f001 f9e4 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80042f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80042fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004306:	2303      	movs	r3, #3
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800430a:	230a      	movs	r3, #10
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430e:	f107 031c 	add.w	r3, r7, #28
 8004312:	4619      	mov	r1, r3
 8004314:	4813      	ldr	r0, [pc, #76]	@ (8004364 <MX_GPIO_Init+0x244>)
 8004316:	f001 f9d3 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800431a:	2320      	movs	r3, #32
 800431c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004326:	f107 031c 	add.w	r3, r7, #28
 800432a:	4619      	mov	r1, r3
 800432c:	480c      	ldr	r0, [pc, #48]	@ (8004360 <MX_GPIO_Init+0x240>)
 800432e:	f001 f9c7 	bl	80056c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004332:	2302      	movs	r3, #2
 8004334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004336:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800433a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004340:	f107 031c 	add.w	r3, r7, #28
 8004344:	4619      	mov	r1, r3
 8004346:	4808      	ldr	r0, [pc, #32]	@ (8004368 <MX_GPIO_Init+0x248>)
 8004348:	f001 f9ba 	bl	80056c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800434c:	bf00      	nop
 800434e:	3730      	adds	r7, #48	@ 0x30
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	40020800 	.word	0x40020800
 800435c:	40020400 	.word	0x40020400
 8004360:	40020c00 	.word	0x40020c00
 8004364:	40020000 	.word	0x40020000
 8004368:	40021000 	.word	0x40021000

0800436c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004374:	1d39      	adds	r1, r7, #4
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	2201      	movs	r2, #1
 800437c:	4803      	ldr	r0, [pc, #12]	@ (800438c <__io_putchar+0x20>)
 800437e:	f003 ff63 	bl	8008248 <HAL_UART_Transmit>
  return ch;
 8004382:	687b      	ldr	r3, [r7, #4]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200014dc 	.word	0x200014dc

08004390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004394:	b672      	cpsid	i
}
 8004396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <Error_Handler+0x8>

0800439c <Push_Button_Init>:
// Variables to track button states
volatile uint8_t battle_button_state = 0; // For PC13 (Battle)
volatile uint8_t capture_button_state = 0; // For PC14 (Capture)

// Initialize both buttons: PC13 for Battle, PC14 for Capture
void Push_Button_Init(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]

    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b0:	2300      	movs	r3, #0
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <Push_Button_Init+0x7c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <Push_Button_Init+0x7c>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c0:	4b15      	ldr	r3, [pc, #84]	@ (8004418 <Push_Button_Init+0x7c>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]

    // Configure PC13 as input with pull-up resistor (Battle Button)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 80043d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80043d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043d8:	2301      	movs	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	480e      	ldr	r0, [pc, #56]	@ (800441c <Push_Button_Init+0x80>)
 80043e2:	f001 f96d 	bl	80056c0 <HAL_GPIO_Init>

    // Configure PC14 as input with pull-up resistor (Capture Button)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80043e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ea:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Falling edge trigger
 80043ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80043f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043f2:	2301      	movs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4808      	ldr	r0, [pc, #32]	@ (800441c <Push_Button_Init+0x80>)
 80043fc:	f001 f960 	bl	80056c0 <HAL_GPIO_Init>

    // Enable and set EXTI Line 15-10 Interrupt to the lowest priority
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8004400:	2200      	movs	r2, #0
 8004402:	2102      	movs	r1, #2
 8004404:	2028      	movs	r0, #40	@ 0x28
 8004406:	f000 fda8 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800440a:	2028      	movs	r0, #40	@ 0x28
 800440c:	f000 fdc1 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	40020800 	.word	0x40020800

08004420 <EXTI15_10_IRQHandler>:

// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8004424:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <EXTI15_10_IRQHandler+0x48>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 8004430:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <EXTI15_10_IRQHandler+0x48>)
 8004432:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004436:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 8004438:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <EXTI15_10_IRQHandler+0x4c>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 800443e:	480c      	ldr	r0, [pc, #48]	@ (8004470 <EXTI15_10_IRQHandler+0x50>)
 8004440:	f000 fbd0 	bl	8004be4 <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <EXTI15_10_IRQHandler+0x48>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <EXTI15_10_IRQHandler+0x48>)
 8004452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004456:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <EXTI15_10_IRQHandler+0x54>)
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 800445e:	4806      	ldr	r0, [pc, #24]	@ (8004478 <EXTI15_10_IRQHandler+0x58>)
 8004460:	f000 fbc0 	bl	8004be4 <uart_send_string>
    }
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40013c00 	.word	0x40013c00
 800446c:	200015e4 	.word	0x200015e4
 8004470:	0800fd68 	.word	0x0800fd68
 8004474:	200015e5 	.word	0x200015e5
 8004478:	0800fd84 	.word	0x0800fd84

0800447c <Get_Battle_Button_State>:

// Getter functions for button states
uint8_t Get_Battle_Button_State(void) {
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
    return battle_button_state;
 8004480:	4b03      	ldr	r3, [pc, #12]	@ (8004490 <Get_Battle_Button_State+0x14>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	200015e4 	.word	0x200015e4

08004494 <Get_Capture_Button_State>:

uint8_t Get_Capture_Button_State(void) {
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
    return capture_button_state;
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <Get_Capture_Button_State+0x14>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	200015e5 	.word	0x200015e5

080044ac <Reset_Button_State>:

// Reset both button states
void Reset_Button_State(void) {
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
    battle_button_state = 0;
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <Reset_Button_State+0x1c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
    capture_button_state = 0;
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <Reset_Button_State+0x20>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	200015e4 	.word	0x200015e4
 80044cc:	200015e5 	.word	0x200015e5

080044d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_MspInit+0x4c>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	4a0f      	ldr	r2, [pc, #60]	@ (800451c <HAL_MspInit+0x4c>)
 80044e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <HAL_MspInit+0x4c>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <HAL_MspInit+0x4c>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	4a08      	ldr	r2, [pc, #32]	@ (800451c <HAL_MspInit+0x4c>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	@ 0x40
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_MspInit+0x4c>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800450e:	2007      	movs	r0, #7
 8004510:	f000 fd18 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800

08004520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_I2C_MspInit+0x84>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d12c      	bne.n	800459c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	4b18      	ldr	r3, [pc, #96]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6313      	str	r3, [r2, #48]	@ 0x30
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800455e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004564:	2312      	movs	r3, #18
 8004566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456c:	2303      	movs	r3, #3
 800456e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004570:	2304      	movs	r3, #4
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4619      	mov	r1, r3
 800457a:	480c      	ldr	r0, [pc, #48]	@ (80045ac <HAL_I2C_MspInit+0x8c>)
 800457c:	f001 f8a0 	bl	80056c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	4a07      	ldr	r2, [pc, #28]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 800458a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800458e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_I2C_MspInit+0x88>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	@ 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40005400 	.word	0x40005400
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020400 	.word	0x40020400

080045b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004700 <HAL_SPI_MspInit+0x150>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f040 8091 	bne.w	80046f6 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	4a49      	ldr	r2, [pc, #292]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 80045de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e4:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	4a42      	ldr	r2, [pc, #264]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004600:	4b40      	ldr	r3, [pc, #256]	@ (8004704 <HAL_SPI_MspInit+0x154>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800460c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800461e:	2305      	movs	r3, #5
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004622:	f107 0314 	add.w	r3, r7, #20
 8004626:	4619      	mov	r1, r3
 8004628:	4837      	ldr	r0, [pc, #220]	@ (8004708 <HAL_SPI_MspInit+0x158>)
 800462a:	f001 f849 	bl	80056c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800462e:	4b37      	ldr	r3, [pc, #220]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004630:	4a37      	ldr	r2, [pc, #220]	@ (8004710 <HAL_SPI_MspInit+0x160>)
 8004632:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004634:	4b35      	ldr	r3, [pc, #212]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004636:	2200      	movs	r2, #0
 8004638:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 800463c:	2240      	movs	r2, #64	@ 0x40
 800463e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004640:	4b32      	ldr	r3, [pc, #200]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800464c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800464e:	4b2f      	ldr	r3, [pc, #188]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004654:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004656:	2200      	movs	r2, #0
 8004658:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800465a:	4b2c      	ldr	r3, [pc, #176]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 800465c:	2200      	movs	r2, #0
 800465e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004660:	4b2a      	ldr	r3, [pc, #168]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004662:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004666:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 800466a:	2200      	movs	r2, #0
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800466e:	4827      	ldr	r0, [pc, #156]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004670:	f000 fcaa 	bl	8004fc8 <HAL_DMA_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800467a:	f7ff fe89 	bl	8004390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004682:	649a      	str	r2, [r3, #72]	@ 0x48
 8004684:	4a21      	ldr	r2, [pc, #132]	@ (800470c <HAL_SPI_MspInit+0x15c>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800468a:	4b22      	ldr	r3, [pc, #136]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HAL_SPI_MspInit+0x168>)
 800468e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004690:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004696:	4b1f      	ldr	r3, [pc, #124]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 8004698:	2200      	movs	r2, #0
 800469a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800469c:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 800469e:	2200      	movs	r2, #0
 80046a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046b0:	4b18      	ldr	r3, [pc, #96]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80046b6:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046c2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80046ca:	4812      	ldr	r0, [pc, #72]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046cc:	f000 fc7c 	bl	8004fc8 <HAL_DMA_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80046d6:	f7ff fe5b 	bl	8004390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <HAL_SPI_MspInit+0x164>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2100      	movs	r1, #0
 80046ea:	2024      	movs	r0, #36	@ 0x24
 80046ec:	f000 fc35 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046f0:	2024      	movs	r0, #36	@ 0x24
 80046f2:	f000 fc4e 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046f6:	bf00      	nop
 80046f8:	3728      	adds	r7, #40	@ 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40003800 	.word	0x40003800
 8004704:	40023800 	.word	0x40023800
 8004708:	40020400 	.word	0x40020400
 800470c:	200013d4 	.word	0x200013d4
 8004710:	40026070 	.word	0x40026070
 8004714:	20001434 	.word	0x20001434
 8004718:	40026058 	.word	0x40026058

0800471c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08c      	sub	sp, #48	@ 0x30
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f107 031c 	add.w	r3, r7, #28
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a65      	ldr	r2, [pc, #404]	@ (80048d0 <HAL_UART_MspInit+0x1b4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f040 8092 	bne.w	8004864 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	4b63      	ldr	r3, [pc, #396]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004748:	4a62      	ldr	r2, [pc, #392]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 800474a:	f043 0310 	orr.w	r3, r3, #16
 800474e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004750:	4b60      	ldr	r3, [pc, #384]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	4b5c      	ldr	r3, [pc, #368]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	4a5b      	ldr	r2, [pc, #364]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6313      	str	r3, [r2, #48]	@ 0x30
 800476c:	4b59      	ldr	r3, [pc, #356]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800477e:	2312      	movs	r3, #18
 8004780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004786:	2303      	movs	r3, #3
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800478a:	2307      	movs	r3, #7
 800478c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f107 031c 	add.w	r3, r7, #28
 8004792:	4619      	mov	r1, r3
 8004794:	4850      	ldr	r0, [pc, #320]	@ (80048d8 <HAL_UART_MspInit+0x1bc>)
 8004796:	f000 ff93 	bl	80056c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800479a:	4b50      	ldr	r3, [pc, #320]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 800479c:	4a50      	ldr	r2, [pc, #320]	@ (80048e0 <HAL_UART_MspInit+0x1c4>)
 800479e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047a0:	4b4e      	ldr	r3, [pc, #312]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a8:	4b4c      	ldr	r3, [pc, #304]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ae:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047b4:	4b49      	ldr	r3, [pc, #292]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047bc:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c2:	4b46      	ldr	r3, [pc, #280]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80047c8:	4b44      	ldr	r3, [pc, #272]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047ce:	4b43      	ldr	r3, [pc, #268]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047d4:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047da:	4840      	ldr	r0, [pc, #256]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047dc:	f000 fbf4 	bl	8004fc8 <HAL_DMA_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80047e6:	f7ff fdd3 	bl	8004390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047f0:	4a3a      	ldr	r2, [pc, #232]	@ (80048dc <HAL_UART_MspInit+0x1c0>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 80047f8:	4a3b      	ldr	r2, [pc, #236]	@ (80048e8 <HAL_UART_MspInit+0x1cc>)
 80047fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 80047fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004802:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004804:	4b37      	ldr	r3, [pc, #220]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004806:	2240      	movs	r2, #64	@ 0x40
 8004808:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800480a:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 800480c:	2200      	movs	r2, #0
 800480e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004816:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 800481a:	2200      	movs	r2, #0
 800481c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800481e:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004824:	4b2f      	ldr	r3, [pc, #188]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800482a:	4b2e      	ldr	r3, [pc, #184]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 800482c:	2200      	movs	r2, #0
 800482e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004830:	4b2c      	ldr	r3, [pc, #176]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004832:	2200      	movs	r2, #0
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004836:	482b      	ldr	r0, [pc, #172]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 8004838:	f000 fbc6 	bl	8004fc8 <HAL_DMA_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004842:	f7ff fda5 	bl	8004390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
 800484c:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <HAL_UART_MspInit+0x1c8>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	2025      	movs	r0, #37	@ 0x25
 8004858:	f000 fb7f 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800485c:	2025      	movs	r0, #37	@ 0x25
 800485e:	f000 fb98 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004862:	e030      	b.n	80048c6 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a20      	ldr	r2, [pc, #128]	@ (80048ec <HAL_UART_MspInit+0x1d0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12b      	bne.n	80048c6 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487c:	6413      	str	r3, [r2, #64]	@ 0x40
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6313      	str	r3, [r2, #48]	@ 0x30
 800489a:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <HAL_UART_MspInit+0x1b8>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048a6:	230c      	movs	r3, #12
 80048a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048b6:	2307      	movs	r3, #7
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f107 031c 	add.w	r3, r7, #28
 80048be:	4619      	mov	r1, r3
 80048c0:	4805      	ldr	r0, [pc, #20]	@ (80048d8 <HAL_UART_MspInit+0x1bc>)
 80048c2:	f000 fefd 	bl	80056c0 <HAL_GPIO_Init>
}
 80048c6:	bf00      	nop
 80048c8:	3730      	adds	r7, #48	@ 0x30
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40011000 	.word	0x40011000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40020000 	.word	0x40020000
 80048dc:	20001524 	.word	0x20001524
 80048e0:	40026440 	.word	0x40026440
 80048e4:	20001584 	.word	0x20001584
 80048e8:	400264b8 	.word	0x400264b8
 80048ec:	40004400 	.word	0x40004400

080048f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <NMI_Handler+0x4>

080048f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <HardFault_Handler+0x4>

08004900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <MemManage_Handler+0x4>

08004908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <BusFault_Handler+0x4>

08004910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <UsageFault_Handler+0x4>

08004918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <SysTick_Handler+0x34>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <SysTick_Handler+0x18>
	  Timer1--;
 8004950:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <SysTick_Handler+0x34>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <SysTick_Handler+0x34>)
 800495a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <SysTick_Handler+0x38>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <SysTick_Handler+0x2c>
	  Timer2--;
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <SysTick_Handler+0x38>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	4b03      	ldr	r3, [pc, #12]	@ (800497c <SysTick_Handler+0x38>)
 800496e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004970:	f000 f9d4 	bl	8004d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000294 	.word	0x20000294
 800497c:	20000296 	.word	0x20000296

08004980 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004984:	4802      	ldr	r0, [pc, #8]	@ (8004990 <DMA1_Stream3_IRQHandler+0x10>)
 8004986:	f000 fc5f 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20001434 	.word	0x20001434

08004994 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004998:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <DMA1_Stream4_IRQHandler+0x10>)
 800499a:	f000 fc55 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	200013d4 	.word	0x200013d4

080049a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049ac:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <SPI2_IRQHandler+0x10>)
 80049ae:	f003 f9b5 	bl	8007d1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000137c 	.word	0x2000137c

080049bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049c0:	4802      	ldr	r0, [pc, #8]	@ (80049cc <USART1_IRQHandler+0x10>)
 80049c2:	f003 fccd 	bl	8008360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20001494 	.word	0x20001494

080049d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80049d4:	4802      	ldr	r0, [pc, #8]	@ (80049e0 <DMA2_Stream2_IRQHandler+0x10>)
 80049d6:	f000 fc37 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20001524 	.word	0x20001524

080049e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049e8:	4802      	ldr	r0, [pc, #8]	@ (80049f4 <DMA2_Stream7_IRQHandler+0x10>)
 80049ea:	f000 fc2d 	bl	8005248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20001584 	.word	0x20001584

080049f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return 1;
 80049fc:	2301      	movs	r3, #1
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_kill>:

int _kill(int pid, int sig)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a12:	f008 fc77 	bl	800d304 <__errno>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2216      	movs	r2, #22
 8004a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_exit>:

void _exit (int status)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a30:	f04f 31ff 	mov.w	r1, #4294967295
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ffe7 	bl	8004a08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <_exit+0x12>

08004a3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e00a      	b.n	8004a66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a50:	f3af 8000 	nop.w
 8004a54:	4601      	mov	r1, r0
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	60ba      	str	r2, [r7, #8]
 8004a5c:	b2ca      	uxtb	r2, r1
 8004a5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3301      	adds	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	dbf0      	blt.n	8004a50 <_read+0x12>
  }

  return len;
 8004a6e:	687b      	ldr	r3, [r7, #4]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e009      	b.n	8004a9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	60ba      	str	r2, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fc6a 	bl	800436c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	dbf1      	blt.n	8004a8a <_write+0x12>
  }
  return len;
 8004aa6:	687b      	ldr	r3, [r7, #4]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_close>:

int _close(int file)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ad8:	605a      	str	r2, [r3, #4]
  return 0;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <_isatty>:

int _isatty(int file)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b20:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <_sbrk+0x5c>)
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <_sbrk+0x60>)
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b2c:	4b13      	ldr	r3, [pc, #76]	@ (8004b7c <_sbrk+0x64>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <_sbrk+0x64>)
 8004b36:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <_sbrk+0x68>)
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <_sbrk+0x64>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d207      	bcs.n	8004b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b48:	f008 fbdc 	bl	800d304 <__errno>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	220c      	movs	r2, #12
 8004b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	e009      	b.n	8004b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b58:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <_sbrk+0x64>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b5e:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <_sbrk+0x64>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	4a05      	ldr	r2, [pc, #20]	@ (8004b7c <_sbrk+0x64>)
 8004b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20020000 	.word	0x20020000
 8004b78:	00000400 	.word	0x00000400
 8004b7c:	200015e8 	.word	0x200015e8
 8004b80:	20001978 	.word	0x20001978

08004b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <SystemInit+0x20>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	4a05      	ldr	r2, [pc, #20]	@ (8004ba4 <SystemInit+0x20>)
 8004b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <USART2_IRQHandler>:
// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
}

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <USART2_IRQHandler+0x38>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 8004bba:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <USART2_IRQHandler+0x38>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 8004bc0:	bf00      	nop
 8004bc2:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <USART2_IRQHandler+0x38>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f9      	beq.n	8004bc2 <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 8004bce:	4a04      	ldr	r2, [pc, #16]	@ (8004be0 <USART2_IRQHandler+0x38>)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	6053      	str	r3, [r2, #4]
    }
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40004400 	.word	0x40004400

08004be4 <uart_send_string>:

void uart_send_string(const char *str) {
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    while (*str) {
 8004bec:	e00c      	b.n	8004c08 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 8004bee:	bf00      	nop
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <uart_send_string+0x3c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f9      	beq.n	8004bf0 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <uart_send_string+0x3c>)
 8004c06:	605a      	str	r2, [r3, #4]
    while (*str) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ee      	bne.n	8004bee <uart_send_string+0xa>
    }
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40004400 	.word	0x40004400

08004c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c28:	f7ff ffac 	bl	8004b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c2c:	480c      	ldr	r0, [pc, #48]	@ (8004c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c2e:	490d      	ldr	r1, [pc, #52]	@ (8004c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c30:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c34:	e002      	b.n	8004c3c <LoopCopyDataInit>

08004c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c3a:	3304      	adds	r3, #4

08004c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c40:	d3f9      	bcc.n	8004c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c42:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c44:	4c0a      	ldr	r4, [pc, #40]	@ (8004c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c48:	e001      	b.n	8004c4e <LoopFillZerobss>

08004c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c4c:	3204      	adds	r2, #4

08004c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c50:	d3fb      	bcc.n	8004c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c52:	f008 fb5d 	bl	800d310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c56:	f7ff f8e2 	bl	8003e1e <main>
  bx  lr    
 8004c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c64:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8004c68:	08010b24 	.word	0x08010b24
  ldr r2, =_sbss
 8004c6c:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8004c70:	20001978 	.word	0x20001978

08004c74 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c74:	e7fe      	b.n	8004c74 <DMA1_Stream0_IRQHandler>
	...

08004c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <HAL_Init+0x40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb8 <HAL_Init+0x40>)
 8004c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_Init+0x40>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <HAL_Init+0x40>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c94:	4b08      	ldr	r3, [pc, #32]	@ (8004cb8 <HAL_Init+0x40>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <HAL_Init+0x40>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	f000 f94f 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f000 f808 	bl	8004cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cac:	f7ff fc10 	bl	80044d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00

08004cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cc4:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <HAL_InitTick+0x54>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <HAL_InitTick+0x58>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f967 	bl	8004fae <HAL_SYSTICK_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e00e      	b.n	8004d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d80a      	bhi.n	8004d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	f000 f92f 	bl	8004f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cfc:	4a06      	ldr	r2, [pc, #24]	@ (8004d18 <HAL_InitTick+0x5c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000080 	.word	0x20000080
 8004d14:	20000088 	.word	0x20000088
 8004d18:	20000084 	.word	0x20000084

08004d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_IncTick+0x20>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_IncTick+0x24>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <HAL_IncTick+0x24>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000088 	.word	0x20000088
 8004d40:	200015ec 	.word	0x200015ec

08004d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return uwTick;
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <HAL_GetTick+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	200015ec 	.word	0x200015ec

08004d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff ffee 	bl	8004d44 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d005      	beq.n	8004d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d76:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <HAL_Delay+0x44>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d82:	bf00      	nop
 8004d84:	f7ff ffde 	bl	8004d44 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d8f7      	bhi.n	8004d84 <HAL_Delay+0x28>
  {
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000088 	.word	0x20000088

08004da4 <__NVIC_SetPriorityGrouping>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd6:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60d3      	str	r3, [r2, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_GetPriorityGrouping>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <__NVIC_GetPriorityGrouping+0x18>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 0307 	and.w	r3, r3, #7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_EnableIRQ>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db0b      	blt.n	8004e32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4907      	ldr	r1, [pc, #28]	@ (8004e40 <__NVIC_EnableIRQ+0x38>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2001      	movs	r0, #1
 8004e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	@ (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	@ (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	@ 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
         );
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	@ 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f10:	d301      	bcc.n	8004f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f16:	4a0a      	ldr	r2, [pc, #40]	@ (8004f40 <SysTick_Config+0x40>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1e:	210f      	movs	r1, #15
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f7ff ff8e 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <SysTick_Config+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <SysTick_Config+0x40>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff29 	bl	8004da4 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f6c:	f7ff ff3e 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8004f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff8e 	bl	8004e98 <NVIC_EncodePriority>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff5d 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff31 	bl	8004e08 <__NVIC_EnableIRQ>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ffa2 	bl	8004f00 <SysTick_Config>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fd4:	f7ff feb6 	bl	8004d44 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e099      	b.n	8005118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005004:	e00f      	b.n	8005026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005006:	f7ff fe9d 	bl	8004d44 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b05      	cmp	r3, #5
 8005012:	d908      	bls.n	8005026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e078      	b.n	8005118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e8      	bne.n	8005006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_DMA_Init+0x158>)
 8005040:	4013      	ands	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	4313      	orrs	r3, r2
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d117      	bne.n	80050ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fa7b 	bl	80055c8 <DMA_CheckFifoParam>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80050e6:	2301      	movs	r3, #1
 80050e8:	e016      	b.n	8005118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa32 	bl	800555c <DMA_CalcBaseAndBitshift>
 80050f8:	4603      	mov	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005100:	223f      	movs	r2, #63	@ 0x3f
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	f010803f 	.word	0xf010803f

08005124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005132:	f7ff fe07 	bl	8004d44 <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d008      	beq.n	8005156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2280      	movs	r2, #128	@ 0x80
 8005148:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e052      	b.n	80051fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0216 	bic.w	r2, r2, #22
 8005164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_DMA_Abort+0x62>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0208 	bic.w	r2, r2, #8
 8005194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051a6:	e013      	b.n	80051d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051a8:	f7ff fdcc 	bl	8004d44 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d90c      	bls.n	80051d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2203      	movs	r2, #3
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e015      	b.n	80051fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e4      	bne.n	80051a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e2:	223f      	movs	r2, #63	@ 0x3f
 80051e4:	409a      	lsls	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d004      	beq.n	8005222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	@ 0x80
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e00c      	b.n	800523c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2205      	movs	r2, #5
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005254:	4b8e      	ldr	r3, [pc, #568]	@ (8005490 <HAL_DMA_IRQHandler+0x248>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a8e      	ldr	r2, [pc, #568]	@ (8005494 <HAL_DMA_IRQHandler+0x24c>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	0a9b      	lsrs	r3, r3, #10
 8005260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005272:	2208      	movs	r2, #8
 8005274:	409a      	lsls	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01a      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0204 	bic.w	r2, r2, #4
 800529a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	2208      	movs	r2, #8
 80052a2:	409a      	lsls	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f043 0201 	orr.w	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b8:	2201      	movs	r2, #1
 80052ba:	409a      	lsls	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	f043 0202 	orr.w	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ee:	2204      	movs	r2, #4
 80052f0:	409a      	lsls	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d012      	beq.n	8005320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00b      	beq.n	8005320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530c:	2204      	movs	r2, #4
 800530e:	409a      	lsls	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	f043 0204 	orr.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005324:	2210      	movs	r2, #16
 8005326:	409a      	lsls	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d043      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03c      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	2210      	movs	r2, #16
 8005344:	409a      	lsls	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d018      	beq.n	800538a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d108      	bne.n	8005378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d024      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
 8005376:	e01f      	b.n	80053b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
 8005388:	e016      	b.n	80053b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0208 	bic.w	r2, r2, #8
 80053a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	2220      	movs	r2, #32
 80053be:	409a      	lsls	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 808f 	beq.w	80054e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8087 	beq.w	80054e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053de:	2220      	movs	r2, #32
 80053e0:	409a      	lsls	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d136      	bne.n	8005460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0216 	bic.w	r2, r2, #22
 8005400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_DMA_IRQHandler+0x1da>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0208 	bic.w	r2, r2, #8
 8005430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	223f      	movs	r2, #63	@ 0x3f
 8005438:	409a      	lsls	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005452:	2b00      	cmp	r3, #0
 8005454:	d07e      	beq.n	8005554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
        }
        return;
 800545e:	e079      	b.n	8005554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005480:	2b00      	cmp	r3, #0
 8005482:	d031      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
 800548c:	e02c      	b.n	80054e8 <HAL_DMA_IRQHandler+0x2a0>
 800548e:	bf00      	nop
 8005490:	20000080 	.word	0x20000080
 8005494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d023      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
 80054a8:	e01e      	b.n	80054e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10f      	bne.n	80054d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0210 	bic.w	r2, r2, #16
 80054c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d032      	beq.n	8005556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d022      	beq.n	8005542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2205      	movs	r2, #5
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3301      	adds	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	429a      	cmp	r2, r3
 800551e:	d307      	bcc.n	8005530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <HAL_DMA_IRQHandler+0x2cc>
 800552e:	e000      	b.n	8005532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
 8005552:	e000      	b.n	8005556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005554:	bf00      	nop
    }
  }
}
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	3b10      	subs	r3, #16
 800556c:	4a14      	ldr	r2, [pc, #80]	@ (80055c0 <DMA_CalcBaseAndBitshift+0x64>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005576:	4a13      	ldr	r2, [pc, #76]	@ (80055c4 <DMA_CalcBaseAndBitshift+0x68>)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d909      	bls.n	800559e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	1d1a      	adds	r2, r3, #4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	659a      	str	r2, [r3, #88]	@ 0x58
 800559c:	e007      	b.n	80055ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	aaaaaaab 	.word	0xaaaaaaab
 80055c4:	08010300 	.word	0x08010300

080055c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11f      	bne.n	8005622 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d856      	bhi.n	8005696 <DMA_CheckFifoParam+0xce>
 80055e8:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <DMA_CheckFifoParam+0x28>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005613 	.word	0x08005613
 80055f8:	08005601 	.word	0x08005601
 80055fc:	08005697 	.word	0x08005697
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d046      	beq.n	800569a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005610:	e043      	b.n	800569a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800561a:	d140      	bne.n	800569e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005620:	e03d      	b.n	800569e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562a:	d121      	bne.n	8005670 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d837      	bhi.n	80056a2 <DMA_CheckFifoParam+0xda>
 8005632:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <DMA_CheckFifoParam+0x70>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	08005649 	.word	0x08005649
 800563c:	0800564f 	.word	0x0800564f
 8005640:	08005649 	.word	0x08005649
 8005644:	08005661 	.word	0x08005661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e030      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d025      	beq.n	80056a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565e:	e022      	b.n	80056a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005668:	d11f      	bne.n	80056aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800566e:	e01c      	b.n	80056aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d903      	bls.n	800567e <DMA_CheckFifoParam+0xb6>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d003      	beq.n	8005684 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800567c:	e018      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e015      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e00b      	b.n	80056ae <DMA_CheckFifoParam+0xe6>
      break;
 8005696:	bf00      	nop
 8005698:	e00a      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;
 800569a:	bf00      	nop
 800569c:	e008      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;
 800569e:	bf00      	nop
 80056a0:	e006      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;
 80056a2:	bf00      	nop
 80056a4:	e004      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <DMA_CheckFifoParam+0xe8>
      break;
 80056ae:	bf00      	nop
    }
  } 
  
  return status; 
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop

080056c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	@ 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e159      	b.n	8005990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056dc:	2201      	movs	r2, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	f040 8148 	bne.w	800598a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d005      	beq.n	8005712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800570e:	2b02      	cmp	r3, #2
 8005710:	d130      	bne.n	8005774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	2203      	movs	r2, #3
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005748:	2201      	movs	r2, #1
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 0201 	and.w	r2, r3, #1
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	2b03      	cmp	r3, #3
 800577e:	d017      	beq.n	80057b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d123      	bne.n	8005804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	08da      	lsrs	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3208      	adds	r2, #8
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	220f      	movs	r2, #15
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2203      	movs	r2, #3
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 0203 	and.w	r2, r3, #3
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a2 	beq.w	800598a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	4b57      	ldr	r3, [pc, #348]	@ (80059a8 <HAL_GPIO_Init+0x2e8>)
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	4a56      	ldr	r2, [pc, #344]	@ (80059a8 <HAL_GPIO_Init+0x2e8>)
 8005850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005854:	6453      	str	r3, [r2, #68]	@ 0x44
 8005856:	4b54      	ldr	r3, [pc, #336]	@ (80059a8 <HAL_GPIO_Init+0x2e8>)
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005862:	4a52      	ldr	r2, [pc, #328]	@ (80059ac <HAL_GPIO_Init+0x2ec>)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	220f      	movs	r2, #15
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a49      	ldr	r2, [pc, #292]	@ (80059b0 <HAL_GPIO_Init+0x2f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d019      	beq.n	80058c2 <HAL_GPIO_Init+0x202>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a48      	ldr	r2, [pc, #288]	@ (80059b4 <HAL_GPIO_Init+0x2f4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_GPIO_Init+0x1fe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a47      	ldr	r2, [pc, #284]	@ (80059b8 <HAL_GPIO_Init+0x2f8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00d      	beq.n	80058ba <HAL_GPIO_Init+0x1fa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a46      	ldr	r2, [pc, #280]	@ (80059bc <HAL_GPIO_Init+0x2fc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <HAL_GPIO_Init+0x1f6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a45      	ldr	r2, [pc, #276]	@ (80059c0 <HAL_GPIO_Init+0x300>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_GPIO_Init+0x1f2>
 80058ae:	2304      	movs	r3, #4
 80058b0:	e008      	b.n	80058c4 <HAL_GPIO_Init+0x204>
 80058b2:	2307      	movs	r3, #7
 80058b4:	e006      	b.n	80058c4 <HAL_GPIO_Init+0x204>
 80058b6:	2303      	movs	r3, #3
 80058b8:	e004      	b.n	80058c4 <HAL_GPIO_Init+0x204>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e002      	b.n	80058c4 <HAL_GPIO_Init+0x204>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_GPIO_Init+0x204>
 80058c2:	2300      	movs	r3, #0
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	f002 0203 	and.w	r2, r2, #3
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	4093      	lsls	r3, r2
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058d4:	4935      	ldr	r1, [pc, #212]	@ (80059ac <HAL_GPIO_Init+0x2ec>)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	3302      	adds	r3, #2
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058e2:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005906:	4a2f      	ldr	r2, [pc, #188]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800590c:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005936:	4b23      	ldr	r3, [pc, #140]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	43db      	mvns	r3, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4013      	ands	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800595a:	4a1a      	ldr	r2, [pc, #104]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	43db      	mvns	r3, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4013      	ands	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005984:	4a0f      	ldr	r2, [pc, #60]	@ (80059c4 <HAL_GPIO_Init+0x304>)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	f67f aea2 	bls.w	80056dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	3724      	adds	r7, #36	@ 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40020000 	.word	0x40020000
 80059b4:	40020400 	.word	0x40020400
 80059b8:	40020800 	.word	0x40020800
 80059bc:	40020c00 	.word	0x40020c00
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40013c00 	.word	0x40013c00

080059c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a14:	e003      	b.n	8005a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	041a      	lsls	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	619a      	str	r2, [r3, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a36:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a42:	4a05      	ldr	r2, [pc, #20]	@ (8005a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fc00 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40013c00 	.word	0x40013c00

08005a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e12b      	b.n	8005cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fe fd4c 	bl	8004520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	@ 0x24
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f001 fd8e 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4a81      	ldr	r2, [pc, #516]	@ (8005cd0 <HAL_I2C_Init+0x274>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d807      	bhi.n	8005ae0 <HAL_I2C_Init+0x84>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a80      	ldr	r2, [pc, #512]	@ (8005cd4 <HAL_I2C_Init+0x278>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bf94      	ite	ls
 8005ad8:	2301      	movls	r3, #1
 8005ada:	2300      	movhi	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e006      	b.n	8005aee <HAL_I2C_Init+0x92>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8005cd8 <HAL_I2C_Init+0x27c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bf94      	ite	ls
 8005ae8:	2301      	movls	r3, #1
 8005aea:	2300      	movhi	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0e7      	b.n	8005cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a78      	ldr	r2, [pc, #480]	@ (8005cdc <HAL_I2C_Init+0x280>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0c9b      	lsrs	r3, r3, #18
 8005b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a6a      	ldr	r2, [pc, #424]	@ (8005cd0 <HAL_I2C_Init+0x274>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d802      	bhi.n	8005b30 <HAL_I2C_Init+0xd4>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	e009      	b.n	8005b44 <HAL_I2C_Init+0xe8>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	4a69      	ldr	r2, [pc, #420]	@ (8005ce0 <HAL_I2C_Init+0x284>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	3301      	adds	r3, #1
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	495c      	ldr	r1, [pc, #368]	@ (8005cd0 <HAL_I2C_Init+0x274>)
 8005b60:	428b      	cmp	r3, r1
 8005b62:	d819      	bhi.n	8005b98 <HAL_I2C_Init+0x13c>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1e59      	subs	r1, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b78:	400b      	ands	r3, r1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_I2C_Init+0x138>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e59      	subs	r1, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b92:	e051      	b.n	8005c38 <HAL_I2C_Init+0x1dc>
 8005b94:	2304      	movs	r3, #4
 8005b96:	e04f      	b.n	8005c38 <HAL_I2C_Init+0x1dc>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d111      	bne.n	8005bc4 <HAL_I2C_Init+0x168>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1e58      	subs	r0, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	440b      	add	r3, r1
 8005bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e012      	b.n	8005bea <HAL_I2C_Init+0x18e>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1e58      	subs	r0, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	0099      	lsls	r1, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_I2C_Init+0x196>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e022      	b.n	8005c38 <HAL_I2C_Init+0x1dc>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <HAL_I2C_Init+0x1bc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1e58      	subs	r0, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	440b      	add	r3, r1
 8005c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c16:	e00f      	b.n	8005c38 <HAL_I2C_Init+0x1dc>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1e58      	subs	r0, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	0099      	lsls	r1, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6809      	ldr	r1, [r1, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6911      	ldr	r1, [r2, #16]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68d2      	ldr	r2, [r2, #12]
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	000186a0 	.word	0x000186a0
 8005cd4:	001e847f 	.word	0x001e847f
 8005cd8:	003d08ff 	.word	0x003d08ff
 8005cdc:	431bde83 	.word	0x431bde83
 8005ce0:	10624dd3 	.word	0x10624dd3

08005ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	813b      	strh	r3, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cfe:	f7ff f821 	bl	8004d44 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	f040 80d9 	bne.w	8005ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	2319      	movs	r3, #25
 8005d18:	2201      	movs	r2, #1
 8005d1a:	496d      	ldr	r1, [pc, #436]	@ (8005ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fdb9 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0cc      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_I2C_Mem_Write+0x56>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0c5      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d007      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2221      	movs	r2, #33	@ 0x21
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2240      	movs	r2, #64	@ 0x40
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a3a      	ldr	r2, [r7, #32]
 8005d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8005da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005da2:	88f8      	ldrh	r0, [r7, #6]
 8005da4:	893a      	ldrh	r2, [r7, #8]
 8005da6:	8979      	ldrh	r1, [r7, #10]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	4603      	mov	r3, r0
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fbf0 	bl	8006598 <I2C_RequestMemoryWrite>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d052      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e081      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fe7e 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d107      	bne.n	8005dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e06b      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d11b      	bne.n	8005e64 <HAL_I2C_Mem_Write+0x180>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d017      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1aa      	bne.n	8005dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fe71 	bl	8006b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d107      	bne.n	8005e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e016      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e000      	b.n	8005ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	00100002 	.word	0x00100002
 8005ed4:	ffff0000 	.word	0xffff0000

08005ed8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	@ 0x30
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	817b      	strh	r3, [r7, #10]
 8005eea:	460b      	mov	r3, r1
 8005eec:	813b      	strh	r3, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ef2:	f7fe ff27 	bl	8004d44 <HAL_GetTick>
 8005ef6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	f040 8214 	bne.w	800632e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2319      	movs	r3, #25
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	497b      	ldr	r1, [pc, #492]	@ (80060fc <HAL_I2C_Mem_Read+0x224>)
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fcbf 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e207      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_I2C_Mem_Read+0x56>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e200      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d007      	beq.n	8005f54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2222      	movs	r2, #34	@ 0x22
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2240      	movs	r2, #64	@ 0x40
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a5b      	ldr	r2, [pc, #364]	@ (8006100 <HAL_I2C_Mem_Read+0x228>)
 8005f94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f96:	88f8      	ldrh	r0, [r7, #6]
 8005f98:	893a      	ldrh	r2, [r7, #8]
 8005f9a:	8979      	ldrh	r1, [r7, #10]
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fb8c 	bl	80066c4 <I2C_RequestMemoryRead>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e1bc      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d113      	bne.n	8005fe6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	623b      	str	r3, [r7, #32]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e190      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d11b      	bne.n	8006026 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e170      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	2b02      	cmp	r3, #2
 800602c:	d11b      	bne.n	8006066 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800604c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	e150      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800607c:	e144      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006082:	2b03      	cmp	r3, #3
 8006084:	f200 80f1 	bhi.w	800626a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800608c:	2b01      	cmp	r3, #1
 800608e:	d123      	bne.n	80060d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fda7 	bl	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e145      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060d6:	e117      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d14e      	bne.n	800617e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	2200      	movs	r2, #0
 80060e8:	4906      	ldr	r1, [pc, #24]	@ (8006104 <HAL_I2C_Mem_Read+0x22c>)
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fbd2 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e11a      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
 80060fa:	bf00      	nop
 80060fc:	00100002 	.word	0x00100002
 8006100:	ffff0000 	.word	0xffff0000
 8006104:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800617c:	e0c4      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	2200      	movs	r2, #0
 8006186:	496c      	ldr	r1, [pc, #432]	@ (8006338 <HAL_I2C_Mem_Read+0x460>)
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fb83 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0cb      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	2200      	movs	r2, #0
 80061e2:	4955      	ldr	r1, [pc, #340]	@ (8006338 <HAL_I2C_Mem_Read+0x460>)
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fb55 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e09d      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006268:	e04e      	b.n	8006308 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fcba 	bl	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e058      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d124      	bne.n	8006308 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d107      	bne.n	80062d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f aeb6 	bne.w	800607e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e000      	b.n	8006330 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800632e:	2302      	movs	r3, #2
  }
}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	@ 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	00010004 	.word	0x00010004

0800633c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	@ 0x28
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	460b      	mov	r3, r1
 800634a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800634c:	f7fe fcfa 	bl	8004d44 <HAL_GetTick>
 8006350:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	f040 8111 	bne.w	8006586 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2319      	movs	r3, #25
 800636a:	2201      	movs	r2, #1
 800636c:	4988      	ldr	r1, [pc, #544]	@ (8006590 <HAL_I2C_IsDeviceReady+0x254>)
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fa90 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	e104      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_I2C_IsDeviceReady+0x50>
 8006388:	2302      	movs	r3, #2
 800638a:	e0fd      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d007      	beq.n	80063b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2224      	movs	r2, #36	@ 0x24
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a70      	ldr	r2, [pc, #448]	@ (8006594 <HAL_I2C_IsDeviceReady+0x258>)
 80063d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fa4e 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00d      	beq.n	800641a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640c:	d103      	bne.n	8006416 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006414:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e0b6      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006428:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800642a:	f7fe fc8b 	bl	8004d44 <HAL_GetTick>
 800642e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800645e:	e025      	b.n	80064ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006460:	f7fe fc70 	bl	8004d44 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <HAL_I2C_IsDeviceReady+0x13a>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	22a0      	movs	r2, #160	@ 0xa0
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80064b6:	d005      	beq.n	80064c4 <HAL_I2C_IsDeviceReady+0x188>
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_I2C_IsDeviceReady+0x188>
 80064be:	7dbb      	ldrb	r3, [r7, #22]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0cd      	beq.n	8006460 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d129      	bne.n	800652e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2319      	movs	r3, #25
 8006506:	2201      	movs	r2, #1
 8006508:	4921      	ldr	r1, [pc, #132]	@ (8006590 <HAL_I2C_IsDeviceReady+0x254>)
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f9c2 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e036      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e02c      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006546:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2319      	movs	r3, #25
 800654e:	2201      	movs	r2, #1
 8006550:	490f      	ldr	r1, [pc, #60]	@ (8006590 <HAL_I2C_IsDeviceReady+0x254>)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f99e 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e012      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	3301      	adds	r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	f4ff af32 	bcc.w	80063d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	00100002 	.word	0x00100002
 8006594:	ffff0000 	.word	0xffff0000

08006598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	4608      	mov	r0, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	817b      	strh	r3, [r7, #10]
 80065aa:	460b      	mov	r3, r1
 80065ac:	813b      	strh	r3, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f960 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e8:	d103      	bne.n	80065f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e05f      	b.n	80066b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	492d      	ldr	r1, [pc, #180]	@ (80066c0 <I2C_RequestMemoryWrite+0x128>)
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f9bb 	bl	8006988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e04c      	b.n	80066b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	6a39      	ldr	r1, [r7, #32]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fa46 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	2b04      	cmp	r3, #4
 8006648:	d107      	bne.n	800665a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e02b      	b.n	80066b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006664:	893b      	ldrh	r3, [r7, #8]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]
 800666e:	e021      	b.n	80066b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	b29b      	uxth	r3, r3
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	6a39      	ldr	r1, [r7, #32]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fa20 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b04      	cmp	r3, #4
 8006694:	d107      	bne.n	80066a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e005      	b.n	80066b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066aa:	893b      	ldrh	r3, [r7, #8]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	00010002 	.word	0x00010002

080066c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	817b      	strh	r3, [r7, #10]
 80066d6:	460b      	mov	r3, r1
 80066d8:	813b      	strh	r3, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	2200      	movs	r2, #0
 8006706:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f8c2 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006724:	d103      	bne.n	800672e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800672c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e0aa      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006732:	897b      	ldrh	r3, [r7, #10]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	4952      	ldr	r1, [pc, #328]	@ (8006890 <I2C_RequestMemoryRead+0x1cc>)
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f91d 	bl	8006988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e097      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006770:	6a39      	ldr	r1, [r7, #32]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f9a8 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006782:	2b04      	cmp	r3, #4
 8006784:	d107      	bne.n	8006796 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e076      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d105      	bne.n	80067ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067a0:	893b      	ldrh	r3, [r7, #8]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	611a      	str	r2, [r3, #16]
 80067aa:	e021      	b.n	80067f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067bc:	6a39      	ldr	r1, [r7, #32]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f982 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d107      	bne.n	80067e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e050      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067e6:	893b      	ldrh	r3, [r7, #8]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f2:	6a39      	ldr	r1, [r7, #32]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f967 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006804:	2b04      	cmp	r3, #4
 8006806:	d107      	bne.n	8006818 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006816:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e035      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800682a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2200      	movs	r2, #0
 8006834:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f82b 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006852:	d103      	bne.n	800685c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800685a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e013      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006860:	897b      	ldrh	r3, [r7, #10]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	4906      	ldr	r1, [pc, #24]	@ (8006890 <I2C_RequestMemoryRead+0x1cc>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f886 	bl	8006988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	00010002 	.word	0x00010002

08006894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a4:	e048      	b.n	8006938 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d044      	beq.n	8006938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fe fa49 	bl	8004d44 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d139      	bne.n	8006938 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d10d      	bne.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	43da      	mvns	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	e00c      	b.n	8006904 <I2C_WaitOnFlagUntilTimeout+0x70>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	43da      	mvns	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4013      	ands	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	429a      	cmp	r2, r3
 8006908:	d116      	bne.n	8006938 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e023      	b.n	8006980 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	0c1b      	lsrs	r3, r3, #16
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b01      	cmp	r3, #1
 8006940:	d10d      	bne.n	800695e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	43da      	mvns	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	e00c      	b.n	8006978 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	43da      	mvns	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4013      	ands	r3, r2
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	429a      	cmp	r2, r3
 800697c:	d093      	beq.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006996:	e071      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a6:	d123      	bne.n	80069f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	f043 0204 	orr.w	r2, r3, #4
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e067      	b.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d041      	beq.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f8:	f7fe f9a4 	bl	8004d44 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d136      	bne.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10c      	bne.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e00b      	b.n	8006a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	43da      	mvns	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e021      	b.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10c      	bne.n	8006aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	43da      	mvns	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bf14      	ite	ne
 8006a98:	2301      	movne	r3, #1
 8006a9a:	2300      	moveq	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	e00b      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bf14      	ite	ne
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	2300      	moveq	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af6d 	bne.w	8006998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad4:	e034      	b.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8e3 	bl	8006ca2 <I2C_IsAcknowledgeFailed>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e034      	b.n	8006b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d028      	beq.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fe f929 	bl	8004d44 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d11d      	bne.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0e:	2b80      	cmp	r3, #128	@ 0x80
 8006b10:	d016      	beq.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e007      	b.n	8006b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4a:	2b80      	cmp	r3, #128	@ 0x80
 8006b4c:	d1c3      	bne.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b64:	e034      	b.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f89b 	bl	8006ca2 <I2C_IsAcknowledgeFailed>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e034      	b.n	8006be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d028      	beq.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7e:	f7fe f8e1 	bl	8004d44 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11d      	bne.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d016      	beq.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e007      	b.n	8006be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d1c3      	bne.n	8006b66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bf4:	e049      	b.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d119      	bne.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e030      	b.n	8006c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c38:	f7fe f884 	bl	8004d44 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d11d      	bne.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d016      	beq.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	f043 0220 	orr.w	r2, r3, #32
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e007      	b.n	8006c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b40      	cmp	r3, #64	@ 0x40
 8006c96:	d1ae      	bne.n	8006bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb8:	d11b      	bne.n	8006cf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	f043 0204 	orr.w	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e267      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d075      	beq.n	8006e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d1e:	4b88      	ldr	r3, [pc, #544]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d00c      	beq.n	8006d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2a:	4b85      	ldr	r3, [pc, #532]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d112      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d36:	4b82      	ldr	r3, [pc, #520]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d42:	d10b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	4b7e      	ldr	r3, [pc, #504]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05b      	beq.n	8006e08 <HAL_RCC_OscConfig+0x108>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d157      	bne.n	8006e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e242      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x74>
 8006d66:	4b76      	ldr	r3, [pc, #472]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a75      	ldr	r2, [pc, #468]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e01d      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x98>
 8006d7e:	4b70      	ldr	r3, [pc, #448]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a6f      	ldr	r2, [pc, #444]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e00b      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d98:	4b69      	ldr	r3, [pc, #420]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a68      	ldr	r2, [pc, #416]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b66      	ldr	r3, [pc, #408]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a65      	ldr	r2, [pc, #404]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db8:	f7fd ffc4 	bl	8004d44 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc0:	f7fd ffc0 	bl	8004d44 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b64      	cmp	r3, #100	@ 0x64
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e207      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xc0>
 8006dde:	e014      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fd ffb0 	bl	8004d44 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fd ffac 	bl	8004d44 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	@ 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e1f3      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfa:	4b51      	ldr	r3, [pc, #324]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0xe8>
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d063      	beq.n	8006ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e16:	4b4a      	ldr	r3, [pc, #296]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e22:	4b47      	ldr	r3, [pc, #284]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d11c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e2e:	4b44      	ldr	r3, [pc, #272]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d116      	bne.n	8006e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e3a:	4b41      	ldr	r3, [pc, #260]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_RCC_OscConfig+0x152>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d001      	beq.n	8006e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e1c7      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e52:	4b3b      	ldr	r3, [pc, #236]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4937      	ldr	r1, [pc, #220]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e66:	e03a      	b.n	8006ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e70:	4b34      	ldr	r3, [pc, #208]	@ (8006f44 <HAL_RCC_OscConfig+0x244>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e76:	f7fd ff65 	bl	8004d44 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e7e:	f7fd ff61 	bl	8004d44 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e1a8      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4925      	ldr	r1, [pc, #148]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]
 8006eb0:	e015      	b.n	8006ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <HAL_RCC_OscConfig+0x244>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fd ff44 	bl	8004d44 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec0:	f7fd ff40 	bl	8004d44 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e187      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d036      	beq.n	8006f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef2:	4b15      	ldr	r3, [pc, #84]	@ (8006f48 <HAL_RCC_OscConfig+0x248>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fd ff24 	bl	8004d44 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f00:	f7fd ff20 	bl	8004d44 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e167      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <HAL_RCC_OscConfig+0x240>)
 8006f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x200>
 8006f1e:	e01b      	b.n	8006f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f20:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <HAL_RCC_OscConfig+0x248>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f26:	f7fd ff0d 	bl	8004d44 <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	e00e      	b.n	8006f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2e:	f7fd ff09 	bl	8004d44 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d907      	bls.n	8006f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e150      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
 8006f40:	40023800 	.word	0x40023800
 8006f44:	42470000 	.word	0x42470000
 8006f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f4c:	4b88      	ldr	r3, [pc, #544]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1ea      	bne.n	8006f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8097 	beq.w	8007094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f6a:	4b81      	ldr	r3, [pc, #516]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10f      	bne.n	8006f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f86:	4b7a      	ldr	r3, [pc, #488]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f96:	4b77      	ldr	r3, [pc, #476]	@ (8007174 <HAL_RCC_OscConfig+0x474>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d118      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fa2:	4b74      	ldr	r3, [pc, #464]	@ (8007174 <HAL_RCC_OscConfig+0x474>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a73      	ldr	r2, [pc, #460]	@ (8007174 <HAL_RCC_OscConfig+0x474>)
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fae:	f7fd fec9 	bl	8004d44 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb6:	f7fd fec5 	bl	8004d44 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e10c      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8007174 <HAL_RCC_OscConfig+0x474>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <HAL_RCC_OscConfig+0x2ea>
 8006fdc:	4b64      	ldr	r3, [pc, #400]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe0:	4a63      	ldr	r2, [pc, #396]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe8:	e01c      	b.n	8007024 <HAL_RCC_OscConfig+0x324>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d10c      	bne.n	800700c <HAL_RCC_OscConfig+0x30c>
 8006ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	f043 0304 	orr.w	r3, r3, #4
 8006ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007002:	4a5b      	ldr	r2, [pc, #364]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	6713      	str	r3, [r2, #112]	@ 0x70
 800700a:	e00b      	b.n	8007024 <HAL_RCC_OscConfig+0x324>
 800700c:	4b58      	ldr	r3, [pc, #352]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007010:	4a57      	ldr	r2, [pc, #348]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	6713      	str	r3, [r2, #112]	@ 0x70
 8007018:	4b55      	ldr	r3, [pc, #340]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701c:	4a54      	ldr	r2, [pc, #336]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d015      	beq.n	8007058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702c:	f7fd fe8a 	bl	8004d44 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007032:	e00a      	b.n	800704a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007034:	f7fd fe86 	bl	8004d44 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e0cb      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704a:	4b49      	ldr	r3, [pc, #292]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0ee      	beq.n	8007034 <HAL_RCC_OscConfig+0x334>
 8007056:	e014      	b.n	8007082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007058:	f7fd fe74 	bl	8004d44 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800705e:	e00a      	b.n	8007076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fd fe70 	bl	8004d44 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e0b5      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007076:	4b3e      	ldr	r3, [pc, #248]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ee      	bne.n	8007060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d105      	bne.n	8007094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007088:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800708a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708c:	4a38      	ldr	r2, [pc, #224]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800708e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80a1 	beq.w	80071e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800709e:	4b34      	ldr	r3, [pc, #208]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d05c      	beq.n	8007164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d141      	bne.n	8007136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b2:	4b31      	ldr	r3, [pc, #196]	@ (8007178 <HAL_RCC_OscConfig+0x478>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7fd fe44 	bl	8004d44 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c0:	f7fd fe40 	bl	8004d44 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e087      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	4b27      	ldr	r3, [pc, #156]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69da      	ldr	r2, [r3, #28]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	3b01      	subs	r3, #1
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	491b      	ldr	r1, [pc, #108]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007108:	4b1b      	ldr	r3, [pc, #108]	@ (8007178 <HAL_RCC_OscConfig+0x478>)
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710e:	f7fd fe19 	bl	8004d44 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007116:	f7fd fe15 	bl	8004d44 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e05c      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007128:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0f0      	beq.n	8007116 <HAL_RCC_OscConfig+0x416>
 8007134:	e054      	b.n	80071e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007136:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <HAL_RCC_OscConfig+0x478>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713c:	f7fd fe02 	bl	8004d44 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007144:	f7fd fdfe 	bl	8004d44 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e045      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007156:	4b06      	ldr	r3, [pc, #24]	@ (8007170 <HAL_RCC_OscConfig+0x470>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f0      	bne.n	8007144 <HAL_RCC_OscConfig+0x444>
 8007162:	e03d      	b.n	80071e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d107      	bne.n	800717c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e038      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
 8007170:	40023800 	.word	0x40023800
 8007174:	40007000 	.word	0x40007000
 8007178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800717c:	4b1b      	ldr	r3, [pc, #108]	@ (80071ec <HAL_RCC_OscConfig+0x4ec>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d028      	beq.n	80071dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007194:	429a      	cmp	r2, r3
 8007196:	d121      	bne.n	80071dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d11a      	bne.n	80071dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071ac:	4013      	ands	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d111      	bne.n	80071dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	3b01      	subs	r3, #1
 80071c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d107      	bne.n	80071dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800

080071f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0cc      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007204:	4b68      	ldr	r3, [pc, #416]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d90c      	bls.n	800722c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007212:	4b65      	ldr	r3, [pc, #404]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	4b63      	ldr	r3, [pc, #396]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0b8      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d020      	beq.n	800727a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007244:	4b59      	ldr	r3, [pc, #356]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4a58      	ldr	r2, [pc, #352]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800724e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800725c:	4b53      	ldr	r3, [pc, #332]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4a52      	ldr	r2, [pc, #328]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007268:	4b50      	ldr	r3, [pc, #320]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	494d      	ldr	r1, [pc, #308]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	4313      	orrs	r3, r2
 8007278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d044      	beq.n	8007310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	4b47      	ldr	r3, [pc, #284]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d119      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e07f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d003      	beq.n	80072ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ae:	4b3f      	ldr	r3, [pc, #252]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e06f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072be:	4b3b      	ldr	r3, [pc, #236]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e067      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ce:	4b37      	ldr	r3, [pc, #220]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f023 0203 	bic.w	r2, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4934      	ldr	r1, [pc, #208]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072e0:	f7fd fd30 	bl	8004d44 <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	e00a      	b.n	80072fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e8:	f7fd fd2c 	bl	8004d44 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e04f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	4b2b      	ldr	r3, [pc, #172]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 020c 	and.w	r2, r3, #12
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	429a      	cmp	r2, r3
 800730e:	d1eb      	bne.n	80072e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007310:	4b25      	ldr	r3, [pc, #148]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d20c      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b22      	ldr	r3, [pc, #136]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007326:	4b20      	ldr	r3, [pc, #128]	@ (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d001      	beq.n	8007338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e032      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007344:	4b19      	ldr	r3, [pc, #100]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4916      	ldr	r1, [pc, #88]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	490e      	ldr	r1, [pc, #56]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007376:	f000 f821 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 800737a:	4602      	mov	r2, r0
 800737c:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	490a      	ldr	r1, [pc, #40]	@ (80073b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007388:	5ccb      	ldrb	r3, [r1, r3]
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	4a09      	ldr	r2, [pc, #36]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fd fc90 	bl	8004cbc <HAL_InitTick>

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40023c00 	.word	0x40023c00
 80073ac:	40023800 	.word	0x40023800
 80073b0:	080102e8 	.word	0x080102e8
 80073b4:	20000080 	.word	0x20000080
 80073b8:	20000084 	.word	0x20000084

080073bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c0:	b094      	sub	sp, #80	@ 0x50
 80073c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073d4:	4b79      	ldr	r3, [pc, #484]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d00d      	beq.n	80073fc <HAL_RCC_GetSysClockFreq+0x40>
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	f200 80e1 	bhi.w	80075a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_RCC_GetSysClockFreq+0x34>
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d003      	beq.n	80073f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073ee:	e0db      	b.n	80075a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b73      	ldr	r3, [pc, #460]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073f4:	e0db      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073f6:	4b73      	ldr	r3, [pc, #460]	@ (80075c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80073f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073fa:	e0d8      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073fc:	4b6f      	ldr	r3, [pc, #444]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007404:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007406:	4b6d      	ldr	r3, [pc, #436]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d063      	beq.n	80074da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007412:	4b6a      	ldr	r3, [pc, #424]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	099b      	lsrs	r3, r3, #6
 8007418:	2200      	movs	r2, #0
 800741a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800741c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	633b      	str	r3, [r7, #48]	@ 0x30
 8007426:	2300      	movs	r3, #0
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
 800742a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	0159      	lsls	r1, r3, #5
 800743c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007440:	0150      	lsls	r0, r2, #5
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4621      	mov	r1, r4
 8007448:	1a51      	subs	r1, r2, r1
 800744a:	6139      	str	r1, [r7, #16]
 800744c:	4629      	mov	r1, r5
 800744e:	eb63 0301 	sbc.w	r3, r3, r1
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007460:	4659      	mov	r1, fp
 8007462:	018b      	lsls	r3, r1, #6
 8007464:	4651      	mov	r1, sl
 8007466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800746a:	4651      	mov	r1, sl
 800746c:	018a      	lsls	r2, r1, #6
 800746e:	4651      	mov	r1, sl
 8007470:	ebb2 0801 	subs.w	r8, r2, r1
 8007474:	4659      	mov	r1, fp
 8007476:	eb63 0901 	sbc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	462b      	mov	r3, r5
 800749c:	eb49 0303 	adc.w	r3, r9, r3
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074ae:	4629      	mov	r1, r5
 80074b0:	024b      	lsls	r3, r1, #9
 80074b2:	4621      	mov	r1, r4
 80074b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074b8:	4621      	mov	r1, r4
 80074ba:	024a      	lsls	r2, r1, #9
 80074bc:	4610      	mov	r0, r2
 80074be:	4619      	mov	r1, r3
 80074c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c2:	2200      	movs	r2, #0
 80074c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074cc:	f7f9 fb74 	bl	8000bb8 <__aeabi_uldivmod>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4613      	mov	r3, r2
 80074d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d8:	e058      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074da:	4b38      	ldr	r3, [pc, #224]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	099b      	lsrs	r3, r3, #6
 80074e0:	2200      	movs	r2, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	4611      	mov	r1, r2
 80074e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074ea:	623b      	str	r3, [r7, #32]
 80074ec:	2300      	movs	r3, #0
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	f04f 0000 	mov.w	r0, #0
 80074fc:	f04f 0100 	mov.w	r1, #0
 8007500:	0159      	lsls	r1, r3, #5
 8007502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007506:	0150      	lsls	r0, r2, #5
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4641      	mov	r1, r8
 800750e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007512:	4649      	mov	r1, r9
 8007514:	eb63 0b01 	sbc.w	fp, r3, r1
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800752c:	ebb2 040a 	subs.w	r4, r2, sl
 8007530:	eb63 050b 	sbc.w	r5, r3, fp
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	00eb      	lsls	r3, r5, #3
 800753e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007542:	00e2      	lsls	r2, r4, #3
 8007544:	4614      	mov	r4, r2
 8007546:	461d      	mov	r5, r3
 8007548:	4643      	mov	r3, r8
 800754a:	18e3      	adds	r3, r4, r3
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	464b      	mov	r3, r9
 8007550:	eb45 0303 	adc.w	r3, r5, r3
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007562:	4629      	mov	r1, r5
 8007564:	028b      	lsls	r3, r1, #10
 8007566:	4621      	mov	r1, r4
 8007568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800756c:	4621      	mov	r1, r4
 800756e:	028a      	lsls	r2, r1, #10
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007576:	2200      	movs	r2, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	61fa      	str	r2, [r7, #28]
 800757c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007580:	f7f9 fb1a 	bl	8000bb8 <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4613      	mov	r3, r2
 800758a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800758c:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <HAL_RCC_GetSysClockFreq+0x200>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	3301      	adds	r3, #1
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800759c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800759e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075a6:	e002      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80075aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3750      	adds	r7, #80	@ 0x50
 80075b4:	46bd      	mov	sp, r7
 80075b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ba:	bf00      	nop
 80075bc:	40023800 	.word	0x40023800
 80075c0:	00f42400 	.word	0x00f42400
 80075c4:	007a1200 	.word	0x007a1200

080075c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075cc:	4b03      	ldr	r3, [pc, #12]	@ (80075dc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000080 	.word	0x20000080

080075e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075e4:	f7ff fff0 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0a9b      	lsrs	r3, r3, #10
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4903      	ldr	r1, [pc, #12]	@ (8007604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40023800 	.word	0x40023800
 8007604:	080102f8 	.word	0x080102f8

08007608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800760c:	f7ff ffdc 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	0b5b      	lsrs	r3, r3, #13
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	4903      	ldr	r1, [pc, #12]	@ (800762c <HAL_RCC_GetPCLK2Freq+0x24>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40023800 	.word	0x40023800
 800762c:	080102f8 	.word	0x080102f8

08007630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e07b      	b.n	800773a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007652:	d009      	beq.n	8007668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	61da      	str	r2, [r3, #28]
 800765a:	e005      	b.n	8007668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fc ff94 	bl	80045b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800769e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ec:	ea42 0103 	orr.w	r1, r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	f003 0104 	and.w	r1, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	f003 0210 	and.w	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b088      	sub	sp, #32
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007752:	f7fd faf7 	bl	8004d44 <HAL_GetTick>
 8007756:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	d001      	beq.n	800776c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007768:	2302      	movs	r3, #2
 800776a:	e12a      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_SPI_Transmit+0x36>
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e122      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_SPI_Transmit+0x48>
 8007786:	2302      	movs	r3, #2
 8007788:	e11b      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2203      	movs	r2, #3
 8007796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d8:	d10f      	bne.n	80077fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b40      	cmp	r3, #64	@ 0x40
 8007806:	d007      	beq.n	8007818 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007820:	d152      	bne.n	80078c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_SPI_Transmit+0xee>
 800782a:	8b7b      	ldrh	r3, [r7, #26]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d145      	bne.n	80078bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007834:	881a      	ldrh	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007840:	1c9a      	adds	r2, r3, #2
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007854:	e032      	b.n	80078bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b02      	cmp	r3, #2
 8007862:	d112      	bne.n	800788a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007888:	e018      	b.n	80078bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800788a:	f7fd fa5b 	bl	8004d44 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d803      	bhi.n	80078a2 <HAL_SPI_Transmit+0x160>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d102      	bne.n	80078a8 <HAL_SPI_Transmit+0x166>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e082      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1c7      	bne.n	8007856 <HAL_SPI_Transmit+0x114>
 80078c6:	e053      	b.n	8007970 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_SPI_Transmit+0x194>
 80078d0:	8b7b      	ldrh	r3, [r7, #26]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d147      	bne.n	8007966 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078fc:	e033      	b.n	8007966 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b02      	cmp	r3, #2
 800790a:	d113      	bne.n	8007934 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007932:	e018      	b.n	8007966 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007934:	f7fd fa06 	bl	8004d44 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d803      	bhi.n	800794c <HAL_SPI_Transmit+0x20a>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d102      	bne.n	8007952 <HAL_SPI_Transmit+0x210>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e02d      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1c6      	bne.n	80078fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fb6b 	bl	8008050 <SPI_EndRxTxTransaction>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80079c0:	2300      	movs	r3, #0
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b08a      	sub	sp, #40	@ 0x28
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079d8:	2301      	movs	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079dc:	f7fd f9b2 	bl	8004d44 <HAL_GetTick>
 80079e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80079f0:	887b      	ldrh	r3, [r7, #2]
 80079f2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079f4:	7ffb      	ldrb	r3, [r7, #31]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d00c      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x4a>
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a00:	d106      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x46>
 8007a0a:	7ffb      	ldrb	r3, [r7, #31]
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d001      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007a10:	2302      	movs	r3, #2
 8007a12:	e17f      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x5c>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x5c>
 8007a20:	887b      	ldrh	r3, [r7, #2]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e174      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x6e>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e16d      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d003      	beq.n	8007a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2205      	movs	r2, #5
 8007a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	887a      	ldrh	r2, [r7, #2]
 8007a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	887a      	ldrh	r2, [r7, #2]
 8007a76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	887a      	ldrh	r2, [r7, #2]
 8007a7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a94:	2b40      	cmp	r3, #64	@ 0x40
 8007a96:	d007      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab0:	d17e      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0xf6>
 8007aba:	8afb      	ldrh	r3, [r7, #22]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d16c      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac4:	881a      	ldrh	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad0:	1c9a      	adds	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae4:	e059      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d11b      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x162>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d016      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x162>
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d113      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b14:	1c9a      	adds	r2, r3, #2
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d119      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x1a4>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d014      	beq.n	8007b6e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b6e:	f7fd f8e9 	bl	8004d44 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d80d      	bhi.n	8007b9a <HAL_SPI_TransmitReceive+0x1d0>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d009      	beq.n	8007b9a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e0bc      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1a0      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x11c>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d19b      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x11c>
 8007bae:	e082      	b.n	8007cb6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <HAL_SPI_TransmitReceive+0x1f4>
 8007bb8:	8afb      	ldrh	r3, [r7, #22]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d171      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	7812      	ldrb	r2, [r2, #0]
 8007bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be4:	e05d      	b.n	8007ca2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d11c      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x264>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d017      	beq.n	8007c2e <HAL_SPI_TransmitReceive+0x264>
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d114      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d119      	bne.n	8007c70 <HAL_SPI_TransmitReceive+0x2a6>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d014      	beq.n	8007c70 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c70:	f7fd f868 	bl	8004d44 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d803      	bhi.n	8007c88 <HAL_SPI_TransmitReceive+0x2be>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x2c4>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e038      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d19c      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x21c>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d197      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f9c8 	bl	8008050 <SPI_EndRxTxTransaction>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e01d      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007d12:	2300      	movs	r3, #0
  }
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3728      	adds	r7, #40	@ 0x28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10e      	bne.n	8007d5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
    return;
 8007d5a:	e0ce      	b.n	8007efa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <HAL_SPI_IRQHandler+0x5e>
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
    return;
 8007d78:	e0bf      	b.n	8007efa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <HAL_SPI_IRQHandler+0x7e>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80b0 	beq.w	8007efa <HAL_SPI_IRQHandler+0x1de>
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80aa 	beq.w	8007efa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d023      	beq.n	8007df8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d011      	beq.n	8007de0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc0:	f043 0204 	orr.w	r2, r3, #4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	e00b      	b.n	8007df8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	693b      	ldr	r3, [r7, #16]
        return;
 8007df6:	e080      	b.n	8007efa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d014      	beq.n	8007e2c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f043 0201 	orr.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3a:	f043 0208 	orr.w	r2, r3, #8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	60bb      	str	r3, [r7, #8]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d04f      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <HAL_SPI_IRQHandler+0x168>
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d034      	beq.n	8007eee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0203 	bic.w	r2, r2, #3
 8007e92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea0:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <HAL_SPI_IRQHandler+0x1e4>)
 8007ea2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd f9ab 	bl	8005204 <HAL_DMA_Abort_IT>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d016      	beq.n	8007ef6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8007f00 <HAL_SPI_IRQHandler+0x1e4>)
 8007ece:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd f995 	bl	8005204 <HAL_DMA_Abort_IT>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007eec:	e003      	b.n	8007ef6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f808 	bl	8007f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ef4:	e000      	b.n	8007ef8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007ef6:	bf00      	nop
    return;
 8007ef8:	bf00      	nop
  }
}
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08007f19 	.word	0x08007f19

08007f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff ffe6 	bl	8007f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f50:	f7fc fef8 	bl	8004d44 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f60:	f7fc fef0 	bl	8004d44 <HAL_GetTick>
 8007f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f66:	4b39      	ldr	r3, [pc, #228]	@ (800804c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	015b      	lsls	r3, r3, #5
 8007f6c:	0d1b      	lsrs	r3, r3, #20
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f76:	e054      	b.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d050      	beq.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f80:	f7fc fee0 	bl	8004d44 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d902      	bls.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d13d      	bne.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fae:	d111      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb8:	d004      	beq.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc2:	d107      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fdc:	d10f      	bne.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e017      	b.n	8008042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3b01      	subs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	429a      	cmp	r2, r3
 800803e:	d19b      	bne.n	8007f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000080 	.word	0x20000080

08008050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2201      	movs	r2, #1
 8008064:	2102      	movs	r1, #2
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ff6a 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	f043 0220 	orr.w	r2, r3, #32
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e032      	b.n	80080e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008082:	4b1b      	ldr	r3, [pc, #108]	@ (80080f0 <SPI_EndRxTxTransaction+0xa0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1b      	ldr	r2, [pc, #108]	@ (80080f4 <SPI_EndRxTxTransaction+0xa4>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	0d5b      	lsrs	r3, r3, #21
 800808e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080a0:	d112      	bne.n	80080c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	2180      	movs	r1, #128	@ 0x80
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff ff47 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d016      	beq.n	80080e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e00f      	b.n	80080e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080de:	2b80      	cmp	r3, #128	@ 0x80
 80080e0:	d0f2      	beq.n	80080c8 <SPI_EndRxTxTransaction+0x78>
 80080e2:	e000      	b.n	80080e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80080e4:	bf00      	nop
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000080 	.word	0x20000080
 80080f4:	165e9f81 	.word	0x165e9f81

080080f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e042      	b.n	8008190 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fc fafc 	bl	800471c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2224      	movs	r2, #36	@ 0x24
 8008128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800813a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fdb7 	bl	8008cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e04a      	b.n	8008240 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fc faac 	bl	800471c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2224      	movs	r2, #36	@ 0x24
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd67 	bl	8008cb0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695a      	ldr	r2, [r3, #20]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008200:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0208 	orr.w	r2, r2, #8
 8008210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2220      	movs	r2, #32
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	@ 0x28
 800824c:	af02      	add	r7, sp, #8
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	4613      	mov	r3, r2
 8008256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b20      	cmp	r3, #32
 8008266:	d175      	bne.n	8008354 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_UART_Transmit+0x2c>
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e06e      	b.n	8008356 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2221      	movs	r2, #33	@ 0x21
 8008282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008286:	f7fc fd5d 	bl	8004d44 <HAL_GetTick>
 800828a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	88fa      	ldrh	r2, [r7, #6]
 8008296:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a0:	d108      	bne.n	80082b4 <HAL_UART_Transmit+0x6c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	e003      	b.n	80082bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082bc:	e02e      	b.n	800831c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2200      	movs	r2, #0
 80082c6:	2180      	movs	r1, #128	@ 0x80
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fafb 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e03a      	b.n	8008356 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	3302      	adds	r3, #2
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	e007      	b.n	800830e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1cb      	bne.n	80082be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2200      	movs	r2, #0
 800832e:	2140      	movs	r1, #64	@ 0x40
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fac7 	bl	80088c4 <UART_WaitOnFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e006      	b.n	8008356 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	e000      	b.n	8008356 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008354:	2302      	movs	r3, #2
  }
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b0ba      	sub	sp, #232	@ 0xe8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008396:	f003 030f 	and.w	r3, r3, #15
 800839a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800839e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10f      	bne.n	80083c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <HAL_UART_IRQHandler+0x66>
 80083b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbb8 	bl	8008b34 <UART_Receive_IT>
      return;
 80083c4:	e25b      	b.n	800887e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80de 	beq.w	800858c <HAL_UART_IRQHandler+0x22c>
 80083d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80d1 	beq.w	800858c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <HAL_UART_IRQHandler+0xae>
 80083f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008406:	f043 0201 	orr.w	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <HAL_UART_IRQHandler+0xd2>
 800841a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842a:	f043 0202 	orr.w	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <HAL_UART_IRQHandler+0xf6>
 800843e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844e:	f043 0204 	orr.w	r2, r3, #4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d011      	beq.n	8008486 <HAL_UART_IRQHandler+0x126>
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800846e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847e:	f043 0208 	orr.w	r2, r3, #8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 81f2 	beq.w	8008874 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <HAL_UART_IRQHandler+0x14e>
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb43 	bl	8008b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b8:	2b40      	cmp	r3, #64	@ 0x40
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <HAL_UART_IRQHandler+0x17a>
 80084d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d04f      	beq.n	800857a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa4b 	bl	8008976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ea:	2b40      	cmp	r3, #64	@ 0x40
 80084ec:	d141      	bne.n	8008572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800850c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3314      	adds	r3, #20
 8008516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800851a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800851e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1d9      	bne.n	80084ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d013      	beq.n	800856a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008546:	4a7e      	ldr	r2, [pc, #504]	@ (8008740 <HAL_UART_IRQHandler+0x3e0>)
 8008548:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854e:	4618      	mov	r0, r3
 8008550:	f7fc fe58 	bl	8005204 <HAL_DMA_Abort_IT>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e00e      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f994 	bl	8008898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e00a      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f990 	bl	8008898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008578:	e006      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f98c 	bl	8008898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008586:	e175      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	bf00      	nop
    return;
 800858a:	e173      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008590:	2b01      	cmp	r3, #1
 8008592:	f040 814f 	bne.w	8008834 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8148 	beq.w	8008834 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8141 	beq.w	8008834 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60bb      	str	r3, [r7, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d2:	2b40      	cmp	r3, #64	@ 0x40
 80085d4:	f040 80b6 	bne.w	8008744 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8145 	beq.w	8008878 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f080 813e 	bcs.w	8008878 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008602:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800860e:	f000 8088 	beq.w	8008722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800862c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800863e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800864a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d9      	bne.n	8008612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800866e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008682:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008686:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800868a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e1      	bne.n	800865e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3314      	adds	r3, #20
 80086a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e3      	bne.n	800869a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f2:	f023 0310 	bic.w	r3, r3, #16
 80086f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008704:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008706:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800870a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e3      	bne.n	80086e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871c:	4618      	mov	r0, r3
 800871e:	f7fc fd01 	bl	8005124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008730:	b29b      	uxth	r3, r3
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	b29b      	uxth	r3, r3
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8b7 	bl	80088ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800873e:	e09b      	b.n	8008878 <HAL_UART_IRQHandler+0x518>
 8008740:	08008a3d 	.word	0x08008a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800874c:	b29b      	uxth	r3, r3
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 808e 	beq.w	800887c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8089 	beq.w	800887c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800877a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008780:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800878e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008790:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800879c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e3      	bne.n	800876a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	623b      	str	r3, [r7, #32]
   return(result);
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3314      	adds	r3, #20
 80087c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80087c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e3      	bne.n	80087a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	330c      	adds	r3, #12
 80087ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0310 	bic.w	r3, r3, #16
 80087fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800880c:	61fa      	str	r2, [r7, #28]
 800880e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	69b9      	ldr	r1, [r7, #24]
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	617b      	str	r3, [r7, #20]
   return(result);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e3      	bne.n	80087e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f83d 	bl	80088ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008832:	e023      	b.n	800887c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <HAL_UART_IRQHandler+0x4f4>
 8008840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f909 	bl	8008a64 <UART_Transmit_IT>
    return;
 8008852:	e014      	b.n	800887e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <HAL_UART_IRQHandler+0x51e>
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f949 	bl	8008b04 <UART_EndTransmit_IT>
    return;
 8008872:	e004      	b.n	800887e <HAL_UART_IRQHandler+0x51e>
    return;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_UART_IRQHandler+0x51e>
      return;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_UART_IRQHandler+0x51e>
      return;
 800887c:	bf00      	nop
  }
}
 800887e:	37e8      	adds	r7, #232	@ 0xe8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d4:	e03b      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d037      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7fc fa31 	bl	8004d44 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e03a      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b00      	cmp	r3, #0
 8008904:	d023      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b80      	cmp	r3, #128	@ 0x80
 800890a:	d020      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b40      	cmp	r3, #64	@ 0x40
 8008910:	d01d      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b08      	cmp	r3, #8
 800891e:	d116      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f81d 	bl	8008976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2208      	movs	r2, #8
 8008940:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e00f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d0b4      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b095      	sub	sp, #84	@ 0x54
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	330c      	adds	r3, #12
 800899c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800899e:	643a      	str	r2, [r7, #64]	@ 0x40
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3314      	adds	r3, #20
 80089b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3314      	adds	r3, #20
 80089d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e5      	bne.n	80089b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d119      	bne.n	8008a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	330c      	adds	r3, #12
 80089f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0310 	bic.w	r3, r3, #16
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a0e:	61ba      	str	r2, [r7, #24]
 8008a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a30:	bf00      	nop
 8008a32:	3754      	adds	r7, #84	@ 0x54
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff ff1e 	bl	8008898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b21      	cmp	r3, #33	@ 0x21
 8008a76:	d13e      	bne.n	8008af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a80:	d114      	bne.n	8008aac <UART_Transmit_IT+0x48>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d110      	bne.n	8008aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	1c9a      	adds	r2, r3, #2
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]
 8008aaa:	e008      	b.n	8008abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	1c59      	adds	r1, r3, #1
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6211      	str	r1, [r2, #32]
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	4619      	mov	r1, r3
 8008acc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10f      	bne.n	8008af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e000      	b.n	8008af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008af6:	2302      	movs	r3, #2
  }
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fead 	bl	8008884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08c      	sub	sp, #48	@ 0x30
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b22      	cmp	r3, #34	@ 0x22
 8008b46:	f040 80ae 	bne.w	8008ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b52:	d117      	bne.n	8008b84 <UART_Receive_IT+0x50>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d113      	bne.n	8008b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	1c9a      	adds	r2, r3, #2
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b82:	e026      	b.n	8008bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b96:	d007      	beq.n	8008ba8 <UART_Receive_IT+0x74>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <UART_Receive_IT+0x82>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e008      	b.n	8008bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4619      	mov	r1, r3
 8008be0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d15d      	bne.n	8008ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0220 	bic.w	r2, r2, #32
 8008bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0201 	bic.w	r2, r2, #1
 8008c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d135      	bne.n	8008c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f023 0310 	bic.w	r3, r3, #16
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c52:	623a      	str	r2, [r7, #32]
 8008c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	69f9      	ldr	r1, [r7, #28]
 8008c58:	6a3a      	ldr	r2, [r7, #32]
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e5      	bne.n	8008c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d10a      	bne.n	8008c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fe0b 	bl	80088ac <HAL_UARTEx_RxEventCallback>
 8008c96:	e002      	b.n	8008c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f8 fa8b 	bl	80011b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e002      	b.n	8008ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3730      	adds	r7, #48	@ 0x30
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb4:	b0c0      	sub	sp, #256	@ 0x100
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ccc:	68d9      	ldr	r1, [r3, #12]
 8008cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	ea40 0301 	orr.w	r3, r0, r1
 8008cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d08:	f021 010c 	bic.w	r1, r1, #12
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d16:	430b      	orrs	r3, r1
 8008d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d2a:	6999      	ldr	r1, [r3, #24]
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	ea40 0301 	orr.w	r3, r0, r1
 8008d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8008f7c <UART_SetConfig+0x2cc>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d005      	beq.n	8008d50 <UART_SetConfig+0xa0>
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008f80 <UART_SetConfig+0x2d0>)
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d104      	bne.n	8008d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d50:	f7fe fc5a 	bl	8007608 <HAL_RCC_GetPCLK2Freq>
 8008d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008d58:	e003      	b.n	8008d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d5a:	f7fe fc41 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 8008d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d6c:	f040 810c 	bne.w	8008f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	1891      	adds	r1, r2, r2
 8008d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d92:	4621      	mov	r1, r4
 8008d94:	eb12 0801 	adds.w	r8, r2, r1
 8008d98:	4629      	mov	r1, r5
 8008d9a:	eb43 0901 	adc.w	r9, r3, r1
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008db2:	4690      	mov	r8, r2
 8008db4:	4699      	mov	r9, r3
 8008db6:	4623      	mov	r3, r4
 8008db8:	eb18 0303 	adds.w	r3, r8, r3
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	eb49 0303 	adc.w	r3, r9, r3
 8008dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008dde:	460b      	mov	r3, r1
 8008de0:	18db      	adds	r3, r3, r3
 8008de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008de4:	4613      	mov	r3, r2
 8008de6:	eb42 0303 	adc.w	r3, r2, r3
 8008dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008df4:	f7f7 fee0 	bl	8000bb8 <__aeabi_uldivmod>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4b61      	ldr	r3, [pc, #388]	@ (8008f84 <UART_SetConfig+0x2d4>)
 8008dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	011c      	lsls	r4, r3, #4
 8008e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008e20:	415b      	adcs	r3, r3
 8008e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e28:	4641      	mov	r1, r8
 8008e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e2e:	4649      	mov	r1, r9
 8008e30:	eb43 0b01 	adc.w	fp, r3, r1
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e48:	4692      	mov	sl, r2
 8008e4a:	469b      	mov	fp, r3
 8008e4c:	4643      	mov	r3, r8
 8008e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8008e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e56:	464b      	mov	r3, r9
 8008e58:	eb4b 0303 	adc.w	r3, fp, r3
 8008e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e74:	460b      	mov	r3, r1
 8008e76:	18db      	adds	r3, r3, r3
 8008e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	eb42 0303 	adc.w	r3, r2, r3
 8008e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e8a:	f7f7 fe95 	bl	8000bb8 <__aeabi_uldivmod>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	4b3b      	ldr	r3, [pc, #236]	@ (8008f84 <UART_SetConfig+0x2d4>)
 8008e96:	fba3 2301 	umull	r2, r3, r3, r1
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	2264      	movs	r2, #100	@ 0x64
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	1acb      	subs	r3, r1, r3
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008eaa:	4b36      	ldr	r3, [pc, #216]	@ (8008f84 <UART_SetConfig+0x2d4>)
 8008eac:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008eb8:	441c      	add	r4, r3
 8008eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ecc:	4642      	mov	r2, r8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008edc:	4641      	mov	r1, r8
 8008ede:	1851      	adds	r1, r2, r1
 8008ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	414b      	adcs	r3, r1
 8008ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee8:	f04f 0200 	mov.w	r2, #0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	00cb      	lsls	r3, r1, #3
 8008ef8:	4651      	mov	r1, sl
 8008efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008efe:	4651      	mov	r1, sl
 8008f00:	00ca      	lsls	r2, r1, #3
 8008f02:	4610      	mov	r0, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	4642      	mov	r2, r8
 8008f0a:	189b      	adds	r3, r3, r2
 8008f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f10:	464b      	mov	r3, r9
 8008f12:	460a      	mov	r2, r1
 8008f14:	eb42 0303 	adc.w	r3, r2, r3
 8008f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f30:	460b      	mov	r3, r1
 8008f32:	18db      	adds	r3, r3, r3
 8008f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f36:	4613      	mov	r3, r2
 8008f38:	eb42 0303 	adc.w	r3, r2, r3
 8008f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008f46:	f7f7 fe37 	bl	8000bb8 <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f84 <UART_SetConfig+0x2d4>)
 8008f50:	fba3 1302 	umull	r1, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	2164      	movs	r1, #100	@ 0x64
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	3332      	adds	r3, #50	@ 0x32
 8008f62:	4a08      	ldr	r2, [pc, #32]	@ (8008f84 <UART_SetConfig+0x2d4>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f003 0207 	and.w	r2, r3, #7
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4422      	add	r2, r4
 8008f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f78:	e106      	b.n	8009188 <UART_SetConfig+0x4d8>
 8008f7a:	bf00      	nop
 8008f7c:	40011000 	.word	0x40011000
 8008f80:	40011400 	.word	0x40011400
 8008f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f9a:	4642      	mov	r2, r8
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	1891      	adds	r1, r2, r2
 8008fa0:	6239      	str	r1, [r7, #32]
 8008fa2:	415b      	adcs	r3, r3
 8008fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008faa:	4641      	mov	r1, r8
 8008fac:	1854      	adds	r4, r2, r1
 8008fae:	4649      	mov	r1, r9
 8008fb0:	eb43 0501 	adc.w	r5, r3, r1
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	00eb      	lsls	r3, r5, #3
 8008fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fc2:	00e2      	lsls	r2, r4, #3
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	461d      	mov	r5, r3
 8008fc8:	4643      	mov	r3, r8
 8008fca:	18e3      	adds	r3, r4, r3
 8008fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	eb45 0303 	adc.w	r3, r5, r3
 8008fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	008b      	lsls	r3, r1, #2
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009000:	4621      	mov	r1, r4
 8009002:	008a      	lsls	r2, r1, #2
 8009004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009008:	f7f7 fdd6 	bl	8000bb8 <__aeabi_uldivmod>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4b60      	ldr	r3, [pc, #384]	@ (8009194 <UART_SetConfig+0x4e4>)
 8009012:	fba3 2302 	umull	r2, r3, r3, r2
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	011c      	lsls	r4, r3, #4
 800901a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800901e:	2200      	movs	r2, #0
 8009020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	1891      	adds	r1, r2, r2
 8009032:	61b9      	str	r1, [r7, #24]
 8009034:	415b      	adcs	r3, r3
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800903c:	4641      	mov	r1, r8
 800903e:	1851      	adds	r1, r2, r1
 8009040:	6139      	str	r1, [r7, #16]
 8009042:	4649      	mov	r1, r9
 8009044:	414b      	adcs	r3, r1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009054:	4659      	mov	r1, fp
 8009056:	00cb      	lsls	r3, r1, #3
 8009058:	4651      	mov	r1, sl
 800905a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905e:	4651      	mov	r1, sl
 8009060:	00ca      	lsls	r2, r1, #3
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	4603      	mov	r3, r0
 8009068:	4642      	mov	r2, r8
 800906a:	189b      	adds	r3, r3, r2
 800906c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009070:	464b      	mov	r3, r9
 8009072:	460a      	mov	r2, r1
 8009074:	eb42 0303 	adc.w	r3, r2, r3
 8009078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009094:	4649      	mov	r1, r9
 8009096:	008b      	lsls	r3, r1, #2
 8009098:	4641      	mov	r1, r8
 800909a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800909e:	4641      	mov	r1, r8
 80090a0:	008a      	lsls	r2, r1, #2
 80090a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80090a6:	f7f7 fd87 	bl	8000bb8 <__aeabi_uldivmod>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	4b38      	ldr	r3, [pc, #224]	@ (8009194 <UART_SetConfig+0x4e4>)
 80090b2:	fba3 2301 	umull	r2, r3, r3, r1
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2264      	movs	r2, #100	@ 0x64
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	1acb      	subs	r3, r1, r3
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	3332      	adds	r3, #50	@ 0x32
 80090c4:	4a33      	ldr	r2, [pc, #204]	@ (8009194 <UART_SetConfig+0x4e4>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090d0:	441c      	add	r4, r3
 80090d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090d6:	2200      	movs	r2, #0
 80090d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80090da:	677a      	str	r2, [r7, #116]	@ 0x74
 80090dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	415b      	adcs	r3, r3
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090f0:	4641      	mov	r1, r8
 80090f2:	1851      	adds	r1, r2, r1
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	4649      	mov	r1, r9
 80090f8:	414b      	adcs	r3, r1
 80090fa:	607b      	str	r3, [r7, #4]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009108:	4659      	mov	r1, fp
 800910a:	00cb      	lsls	r3, r1, #3
 800910c:	4651      	mov	r1, sl
 800910e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009112:	4651      	mov	r1, sl
 8009114:	00ca      	lsls	r2, r1, #3
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	4603      	mov	r3, r0
 800911c:	4642      	mov	r2, r8
 800911e:	189b      	adds	r3, r3, r2
 8009120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009122:	464b      	mov	r3, r9
 8009124:	460a      	mov	r2, r1
 8009126:	eb42 0303 	adc.w	r3, r2, r3
 800912a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	663b      	str	r3, [r7, #96]	@ 0x60
 8009136:	667a      	str	r2, [r7, #100]	@ 0x64
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009144:	4649      	mov	r1, r9
 8009146:	008b      	lsls	r3, r1, #2
 8009148:	4641      	mov	r1, r8
 800914a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800914e:	4641      	mov	r1, r8
 8009150:	008a      	lsls	r2, r1, #2
 8009152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009156:	f7f7 fd2f 	bl	8000bb8 <__aeabi_uldivmod>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <UART_SetConfig+0x4e4>)
 8009160:	fba3 1302 	umull	r1, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	2164      	movs	r1, #100	@ 0x64
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	3332      	adds	r3, #50	@ 0x32
 8009172:	4a08      	ldr	r2, [pc, #32]	@ (8009194 <UART_SetConfig+0x4e4>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	f003 020f 	and.w	r2, r3, #15
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4422      	add	r2, r4
 8009186:	609a      	str	r2, [r3, #8]
}
 8009188:	bf00      	nop
 800918a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800918e:	46bd      	mov	sp, r7
 8009190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009194:	51eb851f 	.word	0x51eb851f

08009198 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800919c:	4904      	ldr	r1, [pc, #16]	@ (80091b0 <MX_FATFS_Init+0x18>)
 800919e:	4805      	ldr	r0, [pc, #20]	@ (80091b4 <MX_FATFS_Init+0x1c>)
 80091a0:	f003 f8c8 	bl	800c334 <FATFS_LinkDriver>
 80091a4:	4603      	mov	r3, r0
 80091a6:	461a      	mov	r2, r3
 80091a8:	4b03      	ldr	r3, [pc, #12]	@ (80091b8 <MX_FATFS_Init+0x20>)
 80091aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80091ac:	bf00      	nop
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200015f4 	.word	0x200015f4
 80091b4:	2000008c 	.word	0x2000008c
 80091b8:	200015f0 	.word	0x200015f0

080091bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80091c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f8 f9b3 	bl	8001544 <SD_disk_initialize>
 80091de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f8 fa8b 	bl	8001710 <SD_disk_status>
 80091fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009214:	7bf8      	ldrb	r0, [r7, #15]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	f7f8 fa8e 	bl	800173c <SD_disk_read>
 8009220:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 800923a:	7bf8      	ldrb	r0, [r7, #15]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	f7f8 fae5 	bl	8001810 <SD_disk_write>
 8009246:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	603a      	str	r2, [r7, #0]
 800925a:	71fb      	strb	r3, [r7, #7]
 800925c:	460b      	mov	r3, r1
 800925e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8009260:	79b9      	ldrb	r1, [r7, #6]
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	4618      	mov	r0, r3
 8009268:	f7f8 fb56 	bl	8001918 <SD_disk_ioctl>
 800926c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	4a08      	ldr	r2, [pc, #32]	@ (80092a8 <disk_status+0x30>)
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	79fa      	ldrb	r2, [r7, #7]
 8009290:	4905      	ldr	r1, [pc, #20]	@ (80092a8 <disk_status+0x30>)
 8009292:	440a      	add	r2, r1
 8009294:	7a12      	ldrb	r2, [r2, #8]
 8009296:	4610      	mov	r0, r2
 8009298:	4798      	blx	r3
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20001820 	.word	0x20001820

080092ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	4a0e      	ldr	r2, [pc, #56]	@ (80092f8 <disk_initialize+0x4c>)
 80092be:	5cd3      	ldrb	r3, [r2, r3]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d114      	bne.n	80092ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	4a0c      	ldr	r2, [pc, #48]	@ (80092f8 <disk_initialize+0x4c>)
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	79fa      	ldrb	r2, [r7, #7]
 80092d2:	4909      	ldr	r1, [pc, #36]	@ (80092f8 <disk_initialize+0x4c>)
 80092d4:	440a      	add	r2, r1
 80092d6:	7a12      	ldrb	r2, [r2, #8]
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d103      	bne.n	80092ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	4a03      	ldr	r2, [pc, #12]	@ (80092f8 <disk_initialize+0x4c>)
 80092ea:	2101      	movs	r1, #1
 80092ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20001820 	.word	0x20001820

080092fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80092fc:	b590      	push	{r4, r7, lr}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	4a0a      	ldr	r2, [pc, #40]	@ (8009338 <disk_read+0x3c>)
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	689c      	ldr	r4, [r3, #8]
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	4a07      	ldr	r2, [pc, #28]	@ (8009338 <disk_read+0x3c>)
 800931c:	4413      	add	r3, r2
 800931e:	7a18      	ldrb	r0, [r3, #8]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	47a0      	blx	r4
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]
  return res;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd90      	pop	{r4, r7, pc}
 8009336:	bf00      	nop
 8009338:	20001820 	.word	0x20001820

0800933c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800933c:	b590      	push	{r4, r7, lr}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	4a0a      	ldr	r2, [pc, #40]	@ (8009378 <disk_write+0x3c>)
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	68dc      	ldr	r4, [r3, #12]
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	4a07      	ldr	r2, [pc, #28]	@ (8009378 <disk_write+0x3c>)
 800935c:	4413      	add	r3, r2
 800935e:	7a18      	ldrb	r0, [r3, #8]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	68b9      	ldr	r1, [r7, #8]
 8009366:	47a0      	blx	r4
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
  return res;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
}
 800936e:	4618      	mov	r0, r3
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd90      	pop	{r4, r7, pc}
 8009376:	bf00      	nop
 8009378:	20001820 	.word	0x20001820

0800937c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	603a      	str	r2, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
 8009388:	460b      	mov	r3, r1
 800938a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	4a09      	ldr	r2, [pc, #36]	@ (80093b4 <disk_ioctl+0x38>)
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	79fa      	ldrb	r2, [r7, #7]
 800939a:	4906      	ldr	r1, [pc, #24]	@ (80093b4 <disk_ioctl+0x38>)
 800939c:	440a      	add	r2, r1
 800939e:	7a10      	ldrb	r0, [r2, #8]
 80093a0:	79b9      	ldrb	r1, [r7, #6]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4798      	blx	r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20001820 	.word	0x20001820

080093b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3301      	adds	r3, #1
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80093c8:	89fb      	ldrh	r3, [r7, #14]
 80093ca:	021b      	lsls	r3, r3, #8
 80093cc:	b21a      	sxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	4313      	orrs	r3, r2
 80093d6:	b21b      	sxth	r3, r3
 80093d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80093da:	89fb      	ldrh	r3, [r7, #14]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3303      	adds	r3, #3
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	3202      	adds	r2, #2
 8009400:	7812      	ldrb	r2, [r2, #0]
 8009402:	4313      	orrs	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	3201      	adds	r2, #1
 800940e:	7812      	ldrb	r2, [r2, #0]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	021b      	lsls	r3, r3, #8
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009420:	68fb      	ldr	r3, [r7, #12]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	887a      	ldrh	r2, [r7, #2]
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	887b      	ldrh	r3, [r7, #2]
 8009448:	0a1b      	lsrs	r3, r3, #8
 800944a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	887a      	ldrh	r2, [r7, #2]
 8009454:	b2d2      	uxtb	r2, r2
 8009456:	701a      	strb	r2, [r3, #0]
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	0a1b      	lsrs	r3, r3, #8
 80094a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	701a      	strb	r2, [r3, #0]
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	1c53      	adds	r3, r2, #1
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	6179      	str	r1, [r7, #20]
 80094e2:	7812      	ldrb	r2, [r2, #0]
 80094e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	607b      	str	r3, [r7, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f1      	bne.n	80094d6 <mem_cpy+0x1a>
	}
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80094fe:	b480      	push	{r7}
 8009500:	b087      	sub	sp, #28
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	617a      	str	r2, [r7, #20]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3b01      	subs	r3, #1
 800951e:	607b      	str	r3, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1f3      	bne.n	800950e <mem_set+0x10>
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009534:	b480      	push	{r7}
 8009536:	b089      	sub	sp, #36	@ 0x24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	61fa      	str	r2, [r7, #28]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	4619      	mov	r1, r3
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	61ba      	str	r2, [r7, #24]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	1acb      	subs	r3, r1, r3
 8009560:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	607b      	str	r3, [r7, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <mem_cmp+0x40>
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0eb      	beq.n	800954c <mem_cmp+0x18>

	return r;
 8009574:	697b      	ldr	r3, [r7, #20]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3724      	adds	r7, #36	@ 0x24
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800958c:	e002      	b.n	8009594 <chk_chr+0x12>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3301      	adds	r3, #1
 8009592:	607b      	str	r3, [r7, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <chk_chr+0x26>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d1f2      	bne.n	800958e <chk_chr+0xc>
	return *str;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	781b      	ldrb	r3, [r3, #0]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e029      	b.n	8009620 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80095cc:	4a27      	ldr	r2, [pc, #156]	@ (800966c <chk_lock+0xb4>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	4413      	add	r3, r2
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01d      	beq.n	8009616 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80095da:	4a24      	ldr	r2, [pc, #144]	@ (800966c <chk_lock+0xb4>)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	4413      	add	r3, r2
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d116      	bne.n	800961a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80095ec:	4a1f      	ldr	r2, [pc, #124]	@ (800966c <chk_lock+0xb4>)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	4413      	add	r3, r2
 80095f4:	3304      	adds	r3, #4
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d10c      	bne.n	800961a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009600:	4a1a      	ldr	r2, [pc, #104]	@ (800966c <chk_lock+0xb4>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	4413      	add	r3, r2
 8009608:	3308      	adds	r3, #8
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009610:	429a      	cmp	r2, r3
 8009612:	d102      	bne.n	800961a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009614:	e007      	b.n	8009626 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009616:	2301      	movs	r3, #1
 8009618:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d9d2      	bls.n	80095cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d109      	bne.n	8009640 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <chk_lock+0x80>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d101      	bne.n	800963c <chk_lock+0x84>
 8009638:	2300      	movs	r3, #0
 800963a:	e010      	b.n	800965e <chk_lock+0xa6>
 800963c:	2312      	movs	r3, #18
 800963e:	e00e      	b.n	800965e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d108      	bne.n	8009658 <chk_lock+0xa0>
 8009646:	4a09      	ldr	r2, [pc, #36]	@ (800966c <chk_lock+0xb4>)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	4413      	add	r3, r2
 800964e:	330c      	adds	r3, #12
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009656:	d101      	bne.n	800965c <chk_lock+0xa4>
 8009658:	2310      	movs	r3, #16
 800965a:	e000      	b.n	800965e <chk_lock+0xa6>
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	20001600 	.word	0x20001600

08009670 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	e002      	b.n	8009682 <enq_lock+0x12>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d806      	bhi.n	8009696 <enq_lock+0x26>
 8009688:	4a09      	ldr	r2, [pc, #36]	@ (80096b0 <enq_lock+0x40>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	4413      	add	r3, r2
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1f2      	bne.n	800967c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b02      	cmp	r3, #2
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20001600 	.word	0x20001600

080096b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e01f      	b.n	8009704 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80096c4:	4a41      	ldr	r2, [pc, #260]	@ (80097cc <inc_lock+0x118>)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	4413      	add	r3, r2
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d113      	bne.n	80096fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80096d6:	4a3d      	ldr	r2, [pc, #244]	@ (80097cc <inc_lock+0x118>)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	4413      	add	r3, r2
 80096de:	3304      	adds	r3, #4
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d109      	bne.n	80096fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80096ea:	4a38      	ldr	r2, [pc, #224]	@ (80097cc <inc_lock+0x118>)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	4413      	add	r3, r2
 80096f2:	3308      	adds	r3, #8
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d006      	beq.n	800970c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d9dc      	bls.n	80096c4 <inc_lock+0x10>
 800970a:	e000      	b.n	800970e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800970c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d132      	bne.n	800977a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e002      	b.n	8009720 <inc_lock+0x6c>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d806      	bhi.n	8009734 <inc_lock+0x80>
 8009726:	4a29      	ldr	r2, [pc, #164]	@ (80097cc <inc_lock+0x118>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	4413      	add	r3, r2
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f2      	bne.n	800971a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d101      	bne.n	800973e <inc_lock+0x8a>
 800973a:	2300      	movs	r3, #0
 800973c:	e040      	b.n	80097c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4922      	ldr	r1, [pc, #136]	@ (80097cc <inc_lock+0x118>)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	011b      	lsls	r3, r3, #4
 8009748:	440b      	add	r3, r1
 800974a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	491e      	ldr	r1, [pc, #120]	@ (80097cc <inc_lock+0x118>)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	440b      	add	r3, r1
 8009758:	3304      	adds	r3, #4
 800975a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	491a      	ldr	r1, [pc, #104]	@ (80097cc <inc_lock+0x118>)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	440b      	add	r3, r1
 8009768:	3308      	adds	r3, #8
 800976a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800976c:	4a17      	ldr	r2, [pc, #92]	@ (80097cc <inc_lock+0x118>)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	011b      	lsls	r3, r3, #4
 8009772:	4413      	add	r3, r2
 8009774:	330c      	adds	r3, #12
 8009776:	2200      	movs	r2, #0
 8009778:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d009      	beq.n	8009794 <inc_lock+0xe0>
 8009780:	4a12      	ldr	r2, [pc, #72]	@ (80097cc <inc_lock+0x118>)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	4413      	add	r3, r2
 8009788:	330c      	adds	r3, #12
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <inc_lock+0xe0>
 8009790:	2300      	movs	r3, #0
 8009792:	e015      	b.n	80097c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d108      	bne.n	80097ac <inc_lock+0xf8>
 800979a:	4a0c      	ldr	r2, [pc, #48]	@ (80097cc <inc_lock+0x118>)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	4413      	add	r3, r2
 80097a2:	330c      	adds	r3, #12
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	e001      	b.n	80097b0 <inc_lock+0xfc>
 80097ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097b0:	4906      	ldr	r1, [pc, #24]	@ (80097cc <inc_lock+0x118>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	440b      	add	r3, r1
 80097b8:	330c      	adds	r3, #12
 80097ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20001600 	.word	0x20001600

080097d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	3b01      	subs	r3, #1
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d825      	bhi.n	8009830 <dec_lock+0x60>
		n = Files[i].ctr;
 80097e4:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <dec_lock+0x74>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	4413      	add	r3, r2
 80097ec:	330c      	adds	r3, #12
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80097f2:	89fb      	ldrh	r3, [r7, #14]
 80097f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097f8:	d101      	bne.n	80097fe <dec_lock+0x2e>
 80097fa:	2300      	movs	r3, #0
 80097fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80097fe:	89fb      	ldrh	r3, [r7, #14]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <dec_lock+0x3a>
 8009804:	89fb      	ldrh	r3, [r7, #14]
 8009806:	3b01      	subs	r3, #1
 8009808:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800980a:	4a0e      	ldr	r2, [pc, #56]	@ (8009844 <dec_lock+0x74>)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	4413      	add	r3, r2
 8009812:	330c      	adds	r3, #12
 8009814:	89fa      	ldrh	r2, [r7, #14]
 8009816:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <dec_lock+0x5a>
 800981e:	4a09      	ldr	r2, [pc, #36]	@ (8009844 <dec_lock+0x74>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	4413      	add	r3, r2
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	737b      	strb	r3, [r7, #13]
 800982e:	e001      	b.n	8009834 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009830:	2302      	movs	r3, #2
 8009832:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009834:	7b7b      	ldrb	r3, [r7, #13]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20001600 	.word	0x20001600

08009848 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e010      	b.n	8009878 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009856:	4a0d      	ldr	r2, [pc, #52]	@ (800988c <clear_lock+0x44>)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	4413      	add	r3, r2
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	429a      	cmp	r2, r3
 8009864:	d105      	bne.n	8009872 <clear_lock+0x2a>
 8009866:	4a09      	ldr	r2, [pc, #36]	@ (800988c <clear_lock+0x44>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	4413      	add	r3, r2
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d9eb      	bls.n	8009856 <clear_lock+0xe>
	}
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20001600 	.word	0x20001600

08009890 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	78db      	ldrb	r3, [r3, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d034      	beq.n	800990e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7858      	ldrb	r0, [r3, #1]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80098b4:	2301      	movs	r3, #1
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	f7ff fd40 	bl	800933c <disk_write>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
 80098c6:	e022      	b.n	800990e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d217      	bcs.n	800990e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	789b      	ldrb	r3, [r3, #2]
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	e010      	b.n	8009908 <sync_window+0x78>
					wsect += fs->fsize;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7858      	ldrb	r0, [r3, #1]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80098fa:	2301      	movs	r3, #1
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	f7ff fd1d 	bl	800933c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	3b01      	subs	r3, #1
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d8eb      	bhi.n	80098e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d01b      	beq.n	8009968 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ffad 	bl	8009890 <sync_window>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d113      	bne.n	8009968 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	7858      	ldrb	r0, [r3, #1]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800994a:	2301      	movs	r3, #1
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	f7ff fcd5 	bl	80092fc <disk_read>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d004      	beq.n	8009962 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009958:	f04f 33ff 	mov.w	r3, #4294967295
 800995c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800995e:	2301      	movs	r3, #1
 8009960:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff87 	bl	8009890 <sync_window>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d159      	bne.n	8009a40 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b03      	cmp	r3, #3
 8009992:	d149      	bne.n	8009a28 <sync_fs+0xb4>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	791b      	ldrb	r3, [r3, #4]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d145      	bne.n	8009a28 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	899b      	ldrh	r3, [r3, #12]
 80099a6:	461a      	mov	r2, r3
 80099a8:	2100      	movs	r1, #0
 80099aa:	f7ff fda8 	bl	80094fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3338      	adds	r3, #56	@ 0x38
 80099b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80099b6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fd37 	bl	800942e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3338      	adds	r3, #56	@ 0x38
 80099c4:	4921      	ldr	r1, [pc, #132]	@ (8009a4c <sync_fs+0xd8>)
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fd4c 	bl	8009464 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3338      	adds	r3, #56	@ 0x38
 80099d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099d4:	491e      	ldr	r1, [pc, #120]	@ (8009a50 <sync_fs+0xdc>)
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fd44 	bl	8009464 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3338      	adds	r3, #56	@ 0x38
 80099e0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	4619      	mov	r1, r3
 80099ea:	4610      	mov	r0, r2
 80099ec:	f7ff fd3a 	bl	8009464 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3338      	adds	r3, #56	@ 0x38
 80099f4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	4619      	mov	r1, r3
 80099fe:	4610      	mov	r0, r2
 8009a00:	f7ff fd30 	bl	8009464 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7858      	ldrb	r0, [r3, #1]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f7ff fc8d 	bl	800933c <disk_write>
			fs->fsi_flag = 0;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff fca3 	bl	800937c <disk_ioctl>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <sync_fs+0xcc>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	41615252 	.word	0x41615252
 8009a50:	61417272 	.word	0x61417272

08009a54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	3b02      	subs	r3, #2
 8009a62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	3b02      	subs	r3, #2
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d301      	bcc.n	8009a74 <clust2sect+0x20>
 8009a70:	2300      	movs	r3, #0
 8009a72:	e008      	b.n	8009a86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	895b      	ldrh	r3, [r3, #10]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	fb03 f202 	mul.w	r2, r3, r2
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a84:	4413      	add	r3, r2
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d904      	bls.n	8009ab2 <get_fat+0x20>
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	e0ba      	b.n	8009c2e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	f000 8082 	beq.w	8009bcc <get_fat+0x13a>
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	f300 80a6 	bgt.w	8009c1a <get_fat+0x188>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d002      	beq.n	8009ad8 <get_fat+0x46>
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d055      	beq.n	8009b82 <get_fat+0xf0>
 8009ad6:	e0a0      	b.n	8009c1a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	899b      	ldrh	r3, [r3, #12]
 8009aee:	4619      	mov	r1, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009af6:	4413      	add	r3, r2
 8009af8:	4619      	mov	r1, r3
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f7ff ff0c 	bl	8009918 <move_window>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 808c 	bne.w	8009c20 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	60fa      	str	r2, [r7, #12]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	8992      	ldrh	r2, [r2, #12]
 8009b12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b16:	fb01 f202 	mul.w	r2, r1, r2
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b24:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	899b      	ldrh	r3, [r3, #12]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b36:	4413      	add	r3, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6938      	ldr	r0, [r7, #16]
 8009b3c:	f7ff feec 	bl	8009918 <move_window>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d16e      	bne.n	8009c24 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	899b      	ldrh	r3, [r3, #12]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b52:	fb01 f202 	mul.w	r2, r1, r2
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <get_fat+0xe6>
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	091b      	lsrs	r3, r3, #4
 8009b76:	e002      	b.n	8009b7e <get_fat+0xec>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b7e:	617b      	str	r3, [r7, #20]
			break;
 8009b80:	e055      	b.n	8009c2e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	899b      	ldrh	r3, [r3, #12]
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	4619      	mov	r1, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b96:	4413      	add	r3, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6938      	ldr	r0, [r7, #16]
 8009b9c:	f7ff febc 	bl	8009918 <move_window>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d140      	bne.n	8009c28 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	8992      	ldrh	r2, [r2, #12]
 8009bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bb8:	fb00 f202 	mul.w	r2, r0, r2
 8009bbc:	1a9b      	subs	r3, r3, r2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fbf9 	bl	80093b8 <ld_word>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	617b      	str	r3, [r7, #20]
			break;
 8009bca:	e030      	b.n	8009c2e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	899b      	ldrh	r3, [r3, #12]
 8009bd4:	089b      	lsrs	r3, r3, #2
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4619      	mov	r1, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009be0:	4413      	add	r3, r2
 8009be2:	4619      	mov	r1, r3
 8009be4:	6938      	ldr	r0, [r7, #16]
 8009be6:	f7ff fe97 	bl	8009918 <move_window>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d11d      	bne.n	8009c2c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	8992      	ldrh	r2, [r2, #12]
 8009bfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c02:	fb00 f202 	mul.w	r2, r0, r2
 8009c06:	1a9b      	subs	r3, r3, r2
 8009c08:	440b      	add	r3, r1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff fbec 	bl	80093e8 <ld_dword>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009c16:	617b      	str	r3, [r7, #20]
			break;
 8009c18:	e009      	b.n	8009c2e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e006      	b.n	8009c2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c20:	bf00      	nop
 8009c22:	e004      	b.n	8009c2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c24:	bf00      	nop
 8009c26:	e002      	b.n	8009c2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c28:	bf00      	nop
 8009c2a:	e000      	b.n	8009c2e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009c2c:	bf00      	nop
		}
	}

	return val;
 8009c2e:	697b      	ldr	r3, [r7, #20]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b089      	sub	sp, #36	@ 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009c44:	2302      	movs	r3, #2
 8009c46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	f240 8109 	bls.w	8009e62 <put_fat+0x22a>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	f080 8103 	bcs.w	8009e62 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	f000 80b6 	beq.w	8009dd2 <put_fat+0x19a>
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	f300 80fb 	bgt.w	8009e62 <put_fat+0x22a>
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d003      	beq.n	8009c78 <put_fat+0x40>
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	f000 8083 	beq.w	8009d7c <put_fat+0x144>
 8009c76:	e0f4      	b.n	8009e62 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	61bb      	str	r3, [r7, #24]
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	4413      	add	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	899b      	ldrh	r3, [r3, #12]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c96:	4413      	add	r3, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff fe3c 	bl	8009918 <move_window>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ca4:	7ffb      	ldrb	r3, [r7, #31]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 80d4 	bne.w	8009e54 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	61ba      	str	r2, [r7, #24]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	8992      	ldrh	r2, [r2, #12]
 8009cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cc0:	fb00 f202 	mul.w	r2, r0, r2
 8009cc4:	1a9b      	subs	r3, r3, r2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00d      	beq.n	8009cf0 <put_fat+0xb8>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	f003 030f 	and.w	r3, r3, #15
 8009cde:	b25a      	sxtb	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	b25b      	sxtb	r3, r3
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	b25b      	sxtb	r3, r3
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	e001      	b.n	8009cf4 <put_fat+0xbc>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	899b      	ldrh	r3, [r3, #12]
 8009d06:	4619      	mov	r1, r3
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d0e:	4413      	add	r3, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff fe00 	bl	8009918 <move_window>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d1c:	7ffb      	ldrb	r3, [r7, #31]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 809a 	bne.w	8009e58 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	899b      	ldrh	r3, [r3, #12]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d36:	fb00 f202 	mul.w	r2, r0, r2
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <put_fat+0x11a>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	091b      	lsrs	r3, r3, #4
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	e00e      	b.n	8009d70 <put_fat+0x138>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	f023 030f 	bic.w	r3, r3, #15
 8009d5c:	b25a      	sxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	b25b      	sxtb	r3, r3
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	b25b      	sxtb	r3, r3
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b25b      	sxtb	r3, r3
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	70da      	strb	r2, [r3, #3]
			break;
 8009d7a:	e072      	b.n	8009e62 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	899b      	ldrh	r3, [r3, #12]
 8009d84:	085b      	lsrs	r3, r3, #1
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	4619      	mov	r1, r3
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d90:	4413      	add	r3, r2
 8009d92:	4619      	mov	r1, r3
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff fdbf 	bl	8009918 <move_window>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d9e:	7ffb      	ldrb	r3, [r7, #31]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d15b      	bne.n	8009e5c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	8992      	ldrh	r2, [r2, #12]
 8009db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009db6:	fb00 f202 	mul.w	r2, r0, r2
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	440b      	add	r3, r1
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	b292      	uxth	r2, r2
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff fb32 	bl	800942e <st_word>
			fs->wflag = 1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	70da      	strb	r2, [r3, #3]
			break;
 8009dd0:	e047      	b.n	8009e62 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4619      	mov	r1, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009de6:	4413      	add	r3, r2
 8009de8:	4619      	mov	r1, r3
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fd94 	bl	8009918 <move_window>
 8009df0:	4603      	mov	r3, r0
 8009df2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009df4:	7ffb      	ldrb	r3, [r7, #31]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d132      	bne.n	8009e60 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	8992      	ldrh	r2, [r2, #12]
 8009e0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e12:	fb00 f202 	mul.w	r2, r0, r2
 8009e16:	1a9b      	subs	r3, r3, r2
 8009e18:	440b      	add	r3, r1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fae4 	bl	80093e8 <ld_dword>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009e26:	4323      	orrs	r3, r4
 8009e28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	8992      	ldrh	r2, [r2, #12]
 8009e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e3c:	fb00 f202 	mul.w	r2, r0, r2
 8009e40:	1a9b      	subs	r3, r3, r2
 8009e42:	440b      	add	r3, r1
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fb0c 	bl	8009464 <st_dword>
			fs->wflag = 1;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	70da      	strb	r2, [r3, #3]
			break;
 8009e52:	e006      	b.n	8009e62 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009e54:	bf00      	nop
 8009e56:	e004      	b.n	8009e62 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009e58:	bf00      	nop
 8009e5a:	e002      	b.n	8009e62 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009e5c:	bf00      	nop
 8009e5e:	e000      	b.n	8009e62 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009e60:	bf00      	nop
		}
	}
	return res;
 8009e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3724      	adds	r7, #36	@ 0x24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd90      	pop	{r4, r7, pc}

08009e6c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d904      	bls.n	8009e92 <remove_chain+0x26>
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d301      	bcc.n	8009e96 <remove_chain+0x2a>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e04b      	b.n	8009f2e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00c      	beq.n	8009eb6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	69b8      	ldr	r0, [r7, #24]
 8009ea4:	f7ff fec8 	bl	8009c38 <put_fat>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009eac:	7ffb      	ldrb	r3, [r7, #31]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <remove_chain+0x4a>
 8009eb2:	7ffb      	ldrb	r3, [r7, #31]
 8009eb4:	e03b      	b.n	8009f2e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7ff fdea 	bl	8009a92 <get_fat>
 8009ebe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d031      	beq.n	8009f2a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <remove_chain+0x64>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e02e      	b.n	8009f2e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed6:	d101      	bne.n	8009edc <remove_chain+0x70>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e028      	b.n	8009f2e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009edc:	2200      	movs	r2, #0
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	69b8      	ldr	r0, [r7, #24]
 8009ee2:	f7ff fea9 	bl	8009c38 <put_fat>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <remove_chain+0x88>
 8009ef0:	7ffb      	ldrb	r3, [r7, #31]
 8009ef2:	e01c      	b.n	8009f2e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	3b02      	subs	r3, #2
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d20b      	bcs.n	8009f1a <remove_chain+0xae>
			fs->free_clst++;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	f043 0301 	orr.w	r3, r3, #1
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d3c6      	bcc.n	8009eb6 <remove_chain+0x4a>
 8009f28:	e000      	b.n	8009f2c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009f2a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b088      	sub	sp, #32
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <create_chain+0x2c>
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	69ba      	ldr	r2, [r7, #24]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d31b      	bcc.n	8009f9a <create_chain+0x64>
 8009f62:	2301      	movs	r3, #1
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	e018      	b.n	8009f9a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff fd91 	bl	8009a92 <get_fat>
 8009f70:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d801      	bhi.n	8009f7c <create_chain+0x46>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e070      	b.n	800a05e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f82:	d101      	bne.n	8009f88 <create_chain+0x52>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	e06a      	b.n	800a05e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d201      	bcs.n	8009f96 <create_chain+0x60>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	e063      	b.n	800a05e <create_chain+0x128>
		scl = clst;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d307      	bcc.n	8009fbe <create_chain+0x88>
				ncl = 2;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d901      	bls.n	8009fbe <create_chain+0x88>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e04f      	b.n	800a05e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009fbe:	69f9      	ldr	r1, [r7, #28]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff fd66 	bl	8009a92 <get_fat>
 8009fc6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00e      	beq.n	8009fec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d003      	beq.n	8009fdc <create_chain+0xa6>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d101      	bne.n	8009fe0 <create_chain+0xaa>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	e03e      	b.n	800a05e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d1da      	bne.n	8009f9e <create_chain+0x68>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e038      	b.n	800a05e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009fec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009fee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff2:	69f9      	ldr	r1, [r7, #28]
 8009ff4:	6938      	ldr	r0, [r7, #16]
 8009ff6:	f7ff fe1f 	bl	8009c38 <put_fat>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <create_chain+0xe2>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6938      	ldr	r0, [r7, #16]
 800a010:	f7ff fe12 	bl	8009c38 <put_fat>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d116      	bne.n	800a04c <create_chain+0x116>
		fs->last_clst = ncl;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	699a      	ldr	r2, [r3, #24]
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	3b02      	subs	r3, #2
 800a02e:	429a      	cmp	r2, r3
 800a030:	d804      	bhi.n	800a03c <create_chain+0x106>
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	1e5a      	subs	r2, r3, #1
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	f043 0301 	orr.w	r3, r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	711a      	strb	r2, [r3, #4]
 800a04a:	e007      	b.n	800a05c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d102      	bne.n	800a058 <create_chain+0x122>
 800a052:	f04f 33ff 	mov.w	r3, #4294967295
 800a056:	e000      	b.n	800a05a <create_chain+0x124>
 800a058:	2301      	movs	r3, #1
 800a05a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a05c:	69fb      	ldr	r3, [r7, #28]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a066:	b480      	push	{r7}
 800a068:	b087      	sub	sp, #28
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	3304      	adds	r3, #4
 800a07c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	899b      	ldrh	r3, [r3, #12]
 800a082:	461a      	mov	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	fbb3 f3f2 	udiv	r3, r3, r2
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	8952      	ldrh	r2, [r2, #10]
 800a08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a092:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	613a      	str	r2, [r7, #16]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <clmt_clust+0x42>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e010      	b.n	800a0ca <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d307      	bcc.n	800a0c0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a0be:	e7e9      	b.n	800a094 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a0c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	4413      	add	r3, r2
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b086      	sub	sp, #24
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0ec:	d204      	bcs.n	800a0f8 <dir_sdi+0x22>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	f003 031f 	and.w	r3, r3, #31
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <dir_sdi+0x26>
		return FR_INT_ERR;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e071      	b.n	800a1e0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <dir_sdi+0x46>
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d902      	bls.n	800a11c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10c      	bne.n	800a13c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	8912      	ldrh	r2, [r2, #8]
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d301      	bcc.n	800a132 <dir_sdi+0x5c>
 800a12e:	2302      	movs	r3, #2
 800a130:	e056      	b.n	800a1e0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	61da      	str	r2, [r3, #28]
 800a13a:	e02d      	b.n	800a198 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	895b      	ldrh	r3, [r3, #10]
 800a140:	461a      	mov	r2, r3
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	899b      	ldrh	r3, [r3, #12]
 800a146:	fb02 f303 	mul.w	r3, r2, r3
 800a14a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a14c:	e019      	b.n	800a182 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6979      	ldr	r1, [r7, #20]
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff fc9d 	bl	8009a92 <get_fat>
 800a158:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a160:	d101      	bne.n	800a166 <dir_sdi+0x90>
 800a162:	2301      	movs	r3, #1
 800a164:	e03c      	b.n	800a1e0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d904      	bls.n	800a176 <dir_sdi+0xa0>
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	429a      	cmp	r2, r3
 800a174:	d301      	bcc.n	800a17a <dir_sdi+0xa4>
 800a176:	2302      	movs	r3, #2
 800a178:	e032      	b.n	800a1e0 <dir_sdi+0x10a>
			ofs -= csz;
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	429a      	cmp	r2, r3
 800a188:	d2e1      	bcs.n	800a14e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	6938      	ldr	r0, [r7, #16]
 800a18e:	f7ff fc61 	bl	8009a54 <clust2sect>
 800a192:	4602      	mov	r2, r0
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <dir_sdi+0xd4>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e01a      	b.n	800a1e0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69da      	ldr	r2, [r3, #28]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	899b      	ldrh	r3, [r3, #12]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1ba:	441a      	add	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1d2:	fb00 f202 	mul.w	r2, r0, r2
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	18ca      	adds	r2, r1, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	3320      	adds	r3, #32
 800a1fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <dir_next+0x28>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a20e:	d301      	bcc.n	800a214 <dir_next+0x2c>
 800a210:	2304      	movs	r3, #4
 800a212:	e0bb      	b.n	800a38c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	461a      	mov	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a220:	fb01 f202 	mul.w	r2, r1, r2
 800a224:	1a9b      	subs	r3, r3, r2
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 809d 	bne.w	800a366 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10b      	bne.n	800a256 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	8912      	ldrh	r2, [r2, #8]
 800a246:	4293      	cmp	r3, r2
 800a248:	f0c0 808d 	bcc.w	800a366 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	61da      	str	r2, [r3, #28]
 800a252:	2304      	movs	r3, #4
 800a254:	e09a      	b.n	800a38c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	899b      	ldrh	r3, [r3, #12]
 800a25a:	461a      	mov	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	8952      	ldrh	r2, [r2, #10]
 800a266:	3a01      	subs	r2, #1
 800a268:	4013      	ands	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d17b      	bne.n	800a366 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f7ff fc0b 	bl	8009a92 <get_fat>
 800a27c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d801      	bhi.n	800a288 <dir_next+0xa0>
 800a284:	2302      	movs	r3, #2
 800a286:	e081      	b.n	800a38c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d101      	bne.n	800a294 <dir_next+0xac>
 800a290:	2301      	movs	r3, #1
 800a292:	e07b      	b.n	800a38c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d359      	bcc.n	800a352 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	61da      	str	r2, [r3, #28]
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	e06e      	b.n	800a38c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f7ff fe3d 	bl	8009f36 <create_chain>
 800a2bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <dir_next+0xe0>
 800a2c4:	2307      	movs	r3, #7
 800a2c6:	e061      	b.n	800a38c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <dir_next+0xea>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e05c      	b.n	800a38c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d101      	bne.n	800a2de <dir_next+0xf6>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e056      	b.n	800a38c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f7ff fad6 	bl	8009890 <sync_window>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <dir_next+0x106>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e04e      	b.n	800a38c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	899b      	ldrh	r3, [r3, #12]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	f7ff f8ff 	bl	80094fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a300:	2300      	movs	r3, #0
 800a302:	613b      	str	r3, [r7, #16]
 800a304:	6979      	ldr	r1, [r7, #20]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fba4 	bl	8009a54 <clust2sect>
 800a30c:	4602      	mov	r2, r0
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	635a      	str	r2, [r3, #52]	@ 0x34
 800a312:	e012      	b.n	800a33a <dir_next+0x152>
						fs->wflag = 1;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff fab8 	bl	8009890 <sync_window>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <dir_next+0x142>
 800a326:	2301      	movs	r3, #1
 800a328:	e030      	b.n	800a38c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3301      	adds	r3, #1
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	635a      	str	r2, [r3, #52]	@ 0x34
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	461a      	mov	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4293      	cmp	r3, r2
 800a344:	d3e6      	bcc.n	800a314 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a358:	6979      	ldr	r1, [r7, #20]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fb7a 	bl	8009a54 <clust2sect>
 800a360:	4602      	mov	r2, r0
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	899b      	ldrh	r3, [r3, #12]
 800a376:	461a      	mov	r2, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a37e:	fb00 f202 	mul.w	r2, r0, r2
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	18ca      	adds	r2, r1, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff fe95 	bl	800a0d6 <dir_sdi>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d12b      	bne.n	800a40e <dir_alloc+0x7a>
		n = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff faa9 	bl	8009918 <move_window>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11d      	bne.n	800a40c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2be5      	cmp	r3, #229	@ 0xe5
 800a3d8:	d004      	beq.n	800a3e4 <dir_alloc+0x50>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d107      	bne.n	800a3f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	613b      	str	r3, [r7, #16]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d102      	bne.n	800a3f8 <dir_alloc+0x64>
 800a3f2:	e00c      	b.n	800a40e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff fef4 	bl	800a1e8 <dir_next>
 800a400:	4603      	mov	r3, r0
 800a402:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0d7      	beq.n	800a3ba <dir_alloc+0x26>
 800a40a:	e000      	b.n	800a40e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a40c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d101      	bne.n	800a418 <dir_alloc+0x84>
 800a414:	2307      	movs	r3, #7
 800a416:	75fb      	strb	r3, [r7, #23]
	return res;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	331a      	adds	r3, #26
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe ffc1 	bl	80093b8 <ld_word>
 800a436:	4603      	mov	r3, r0
 800a438:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d109      	bne.n	800a456 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	3314      	adds	r3, #20
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe ffb6 	bl	80093b8 <ld_word>
 800a44c:	4603      	mov	r3, r0
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a456:	68fb      	ldr	r3, [r7, #12]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	331a      	adds	r3, #26
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	b292      	uxth	r2, r2
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe ffd9 	bl	800942e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b03      	cmp	r3, #3
 800a482:	d109      	bne.n	800a498 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f103 0214 	add.w	r2, r3, #20
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	0c1b      	lsrs	r3, r3, #16
 800a48e:	b29b      	uxth	r3, r3
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7fe ffcb 	bl	800942e <st_word>
	}
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	331a      	adds	r3, #26
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe ff82 	bl	80093b8 <ld_word>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <cmp_lfn+0x1e>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e059      	b.n	800a572 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4c6:	1e5a      	subs	r2, r3, #1
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	81fb      	strh	r3, [r7, #14]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	613b      	str	r3, [r7, #16]
 800a4dc:	e033      	b.n	800a546 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a4de:	4a27      	ldr	r2, [pc, #156]	@ (800a57c <cmp_lfn+0xdc>)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe ff63 	bl	80093b8 <ld_word>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a4f6:	89fb      	ldrh	r3, [r7, #14]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01a      	beq.n	800a532 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2bfe      	cmp	r3, #254	@ 0xfe
 800a500:	d812      	bhi.n	800a528 <cmp_lfn+0x88>
 800a502:	89bb      	ldrh	r3, [r7, #12]
 800a504:	4618      	mov	r0, r3
 800a506:	f001 ff61 	bl	800c3cc <ff_wtoupper>
 800a50a:	4603      	mov	r3, r0
 800a50c:	461c      	mov	r4, r3
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	617a      	str	r2, [r7, #20]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f001 ff55 	bl	800c3cc <ff_wtoupper>
 800a522:	4603      	mov	r3, r0
 800a524:	429c      	cmp	r4, r3
 800a526:	d001      	beq.n	800a52c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a528:	2300      	movs	r3, #0
 800a52a:	e022      	b.n	800a572 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a52c:	89bb      	ldrh	r3, [r7, #12]
 800a52e:	81fb      	strh	r3, [r7, #14]
 800a530:	e006      	b.n	800a540 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a538:	4293      	cmp	r3, r2
 800a53a:	d001      	beq.n	800a540 <cmp_lfn+0xa0>
 800a53c:	2300      	movs	r3, #0
 800a53e:	e018      	b.n	800a572 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	3301      	adds	r3, #1
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b0c      	cmp	r3, #12
 800a54a:	d9c8      	bls.n	800a4de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00b      	beq.n	800a570 <cmp_lfn+0xd0>
 800a558:	89fb      	ldrh	r3, [r7, #14]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <cmp_lfn+0xd0>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <cmp_lfn+0xd0>
 800a56c:	2300      	movs	r3, #0
 800a56e:	e000      	b.n	800a572 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a570:	2301      	movs	r3, #1
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}
 800a57a:	bf00      	nop
 800a57c:	08010388 	.word	0x08010388

0800a580 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4611      	mov	r1, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	460b      	mov	r3, r1
 800a590:	71fb      	strb	r3, [r7, #7]
 800a592:	4613      	mov	r3, r2
 800a594:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	330d      	adds	r3, #13
 800a59a:	79ba      	ldrb	r2, [r7, #6]
 800a59c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	330b      	adds	r3, #11
 800a5a2:	220f      	movs	r2, #15
 800a5a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	331a      	adds	r3, #26
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe ff3a 	bl	800942e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	4613      	mov	r3, r2
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	82fb      	strh	r3, [r7, #22]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a5d2:	8afb      	ldrh	r3, [r7, #22]
 800a5d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d007      	beq.n	800a5ec <put_lfn+0x6c>
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	61fa      	str	r2, [r7, #28]
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a5ec:	4a17      	ldr	r2, [pc, #92]	@ (800a64c <put_lfn+0xcc>)
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	8afa      	ldrh	r2, [r7, #22]
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe ff15 	bl	800942e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a604:	8afb      	ldrh	r3, [r7, #22]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <put_lfn+0x90>
 800a60a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a60e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	3301      	adds	r3, #1
 800a614:	61bb      	str	r3, [r7, #24]
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	2b0c      	cmp	r3, #12
 800a61a:	d9da      	bls.n	800a5d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a61c:	8afb      	ldrh	r3, [r7, #22]
 800a61e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a622:	4293      	cmp	r3, r2
 800a624:	d006      	beq.n	800a634 <put_lfn+0xb4>
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <put_lfn+0xbc>
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	79fa      	ldrb	r2, [r7, #7]
 800a640:	701a      	strb	r2, [r3, #0]
}
 800a642:	bf00      	nop
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	08010388 	.word	0x08010388

0800a650 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	@ 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a65e:	220b      	movs	r2, #11
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7fe ff2a 	bl	80094bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	d92b      	bls.n	800a6c6 <gen_numname+0x76>
		sr = seq;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a672:	e022      	b.n	800a6ba <gen_numname+0x6a>
			wc = *lfn++;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1c9a      	adds	r2, r3, #2
 800a678:	607a      	str	r2, [r7, #4]
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a67e:	2300      	movs	r3, #0
 800a680:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a682:	e017      	b.n	800a6b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	005a      	lsls	r2, r3, #1
 800a688:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	4413      	add	r3, r2
 800a690:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a692:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <gen_numname+0x5e>
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a6a8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a6ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	2b0f      	cmp	r3, #15
 800a6b8:	d9e4      	bls.n	800a684 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1d8      	bne.n	800a674 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a6c6:	2307      	movs	r3, #7
 800a6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	3330      	adds	r3, #48	@ 0x30
 800a6d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a6da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6de:	2b39      	cmp	r3, #57	@ 0x39
 800a6e0:	d904      	bls.n	800a6ec <gen_numname+0x9c>
 800a6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6e6:	3307      	adds	r3, #7
 800a6e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6f2:	3330      	adds	r3, #48	@ 0x30
 800a6f4:	443b      	add	r3, r7
 800a6f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a6fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	091b      	lsrs	r3, r3, #4
 800a702:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1df      	bne.n	800a6ca <gen_numname+0x7a>
	ns[i] = '~';
 800a70a:	f107 0214 	add.w	r2, r7, #20
 800a70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a710:	4413      	add	r3, r2
 800a712:	227e      	movs	r2, #126	@ 0x7e
 800a714:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a716:	2300      	movs	r3, #0
 800a718:	627b      	str	r3, [r7, #36]	@ 0x24
 800a71a:	e002      	b.n	800a722 <gen_numname+0xd2>
 800a71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71e:	3301      	adds	r3, #1
 800a720:	627b      	str	r3, [r7, #36]	@ 0x24
 800a722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	429a      	cmp	r2, r3
 800a728:	d205      	bcs.n	800a736 <gen_numname+0xe6>
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	4413      	add	r3, r2
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b20      	cmp	r3, #32
 800a734:	d1f2      	bne.n	800a71c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a738:	2b07      	cmp	r3, #7
 800a73a:	d807      	bhi.n	800a74c <gen_numname+0xfc>
 800a73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a742:	3330      	adds	r3, #48	@ 0x30
 800a744:	443b      	add	r3, r7
 800a746:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a74a:	e000      	b.n	800a74e <gen_numname+0xfe>
 800a74c:	2120      	movs	r1, #32
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	627a      	str	r2, [r7, #36]	@ 0x24
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	460a      	mov	r2, r1
 800a75a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75e:	2b07      	cmp	r3, #7
 800a760:	d9e9      	bls.n	800a736 <gen_numname+0xe6>
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	3730      	adds	r7, #48	@ 0x30
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a778:	230b      	movs	r3, #11
 800a77a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	0852      	lsrs	r2, r2, #1
 800a782:	01db      	lsls	r3, r3, #7
 800a784:	4313      	orrs	r3, r2
 800a786:	b2da      	uxtb	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	1c59      	adds	r1, r3, #1
 800a78c:	6079      	str	r1, [r7, #4]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	4413      	add	r3, r2
 800a792:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	3b01      	subs	r3, #1
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1ed      	bne.n	800a77c <sum_sfn+0x10>
	return sum;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fc89 	bl	800a0d6 <dir_sdi>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <dir_find+0x24>
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	e0a9      	b.n	800a926 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a7d2:	23ff      	movs	r3, #255	@ 0xff
 800a7d4:	753b      	strb	r3, [r7, #20]
 800a7d6:	7d3b      	ldrb	r3, [r7, #20]
 800a7d8:	757b      	strb	r3, [r7, #21]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6938      	ldr	r0, [r7, #16]
 800a7ea:	f7ff f895 	bl	8009918 <move_window>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f040 8090 	bne.w	800a91a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a802:	7dbb      	ldrb	r3, [r7, #22]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <dir_find+0x60>
 800a808:	2304      	movs	r3, #4
 800a80a:	75fb      	strb	r3, [r7, #23]
 800a80c:	e08a      	b.n	800a924 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	330b      	adds	r3, #11
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a81a:	73fb      	strb	r3, [r7, #15]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7bfa      	ldrb	r2, [r7, #15]
 800a820:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a822:	7dbb      	ldrb	r3, [r7, #22]
 800a824:	2be5      	cmp	r3, #229	@ 0xe5
 800a826:	d007      	beq.n	800a838 <dir_find+0x8a>
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	f003 0308 	and.w	r3, r3, #8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <dir_find+0x98>
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b0f      	cmp	r3, #15
 800a836:	d006      	beq.n	800a846 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a838:	23ff      	movs	r3, #255	@ 0xff
 800a83a:	757b      	strb	r3, [r7, #21]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295
 800a842:	631a      	str	r2, [r3, #48]	@ 0x30
 800a844:	e05e      	b.n	800a904 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	2b0f      	cmp	r3, #15
 800a84a:	d136      	bne.n	800a8ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a856:	2b00      	cmp	r3, #0
 800a858:	d154      	bne.n	800a904 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
 800a85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00d      	beq.n	800a880 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	7b5b      	ldrb	r3, [r3, #13]
 800a86a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a86c:	7dbb      	ldrb	r3, [r7, #22]
 800a86e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a872:	75bb      	strb	r3, [r7, #22]
 800a874:	7dbb      	ldrb	r3, [r7, #22]
 800a876:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	695a      	ldr	r2, [r3, #20]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a880:	7dba      	ldrb	r2, [r7, #22]
 800a882:	7d7b      	ldrb	r3, [r7, #21]
 800a884:	429a      	cmp	r2, r3
 800a886:	d115      	bne.n	800a8b4 <dir_find+0x106>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	330d      	adds	r3, #13
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	7d3a      	ldrb	r2, [r7, #20]
 800a892:	429a      	cmp	r2, r3
 800a894:	d10e      	bne.n	800a8b4 <dir_find+0x106>
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f7ff fdfd 	bl	800a4a0 <cmp_lfn>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <dir_find+0x106>
 800a8ac:	7d7b      	ldrb	r3, [r7, #21]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	e000      	b.n	800a8b6 <dir_find+0x108>
 800a8b4:	23ff      	movs	r3, #255	@ 0xff
 800a8b6:	757b      	strb	r3, [r7, #21]
 800a8b8:	e024      	b.n	800a904 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a8ba:	7d7b      	ldrb	r3, [r7, #21]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <dir_find+0x126>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff ff51 	bl	800a76c <sum_sfn>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	7d3b      	ldrb	r3, [r7, #20]
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d024      	beq.n	800a91e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <dir_find+0x14a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a18      	ldr	r0, [r3, #32]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3324      	adds	r3, #36	@ 0x24
 800a8ea:	220b      	movs	r2, #11
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7fe fe21 	bl	8009534 <mem_cmp>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d014      	beq.n	800a922 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a8f8:	23ff      	movs	r3, #255	@ 0xff
 800a8fa:	757b      	strb	r3, [r7, #21]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a904:	2100      	movs	r1, #0
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fc6e 	bl	800a1e8 <dir_next>
 800a90c:	4603      	mov	r3, r0
 800a90e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f43f af65 	beq.w	800a7e2 <dir_find+0x34>
 800a918:	e004      	b.n	800a924 <dir_find+0x176>
		if (res != FR_OK) break;
 800a91a:	bf00      	nop
 800a91c:	e002      	b.n	800a924 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a922:	bf00      	nop

	return res;
 800a924:	7dfb      	ldrb	r3, [r7, #23]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08c      	sub	sp, #48	@ 0x30
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a944:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <dir_register+0x20>
 800a94c:	2306      	movs	r3, #6
 800a94e:	e0e0      	b.n	800ab12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a950:	2300      	movs	r3, #0
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
 800a954:	e002      	b.n	800a95c <dir_register+0x2c>
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	3301      	adds	r3, #1
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	691a      	ldr	r2, [r3, #16]
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	4413      	add	r3, r2
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f4      	bne.n	800a956 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a972:	f107 030c 	add.w	r3, r7, #12
 800a976:	220c      	movs	r2, #12
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe fd9f 	bl	80094bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d032      	beq.n	800a9ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2240      	movs	r2, #64	@ 0x40
 800a98c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800a990:	2301      	movs	r3, #1
 800a992:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a994:	e016      	b.n	800a9c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	f107 010c 	add.w	r1, r7, #12
 800a9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a6:	f7ff fe53 	bl	800a650 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff feff 	bl	800a7ae <dir_find>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800a9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	2b63      	cmp	r3, #99	@ 0x63
 800a9c8:	d9e5      	bls.n	800a996 <dir_register+0x66>
 800a9ca:	e000      	b.n	800a9ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800a9cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	2b64      	cmp	r3, #100	@ 0x64
 800a9d2:	d101      	bne.n	800a9d8 <dir_register+0xa8>
 800a9d4:	2307      	movs	r3, #7
 800a9d6:	e09c      	b.n	800ab12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a9d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d002      	beq.n	800a9e6 <dir_register+0xb6>
 800a9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9e4:	e095      	b.n	800ab12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a9e6:	7dfa      	ldrb	r2, [r7, #23]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d007      	beq.n	800aa08 <dir_register+0xd8>
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	330c      	adds	r3, #12
 800a9fc:	4a47      	ldr	r2, [pc, #284]	@ (800ab1c <dir_register+0x1ec>)
 800a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800aa02:	089b      	lsrs	r3, r3, #2
 800aa04:	3301      	adds	r3, #1
 800aa06:	e000      	b.n	800aa0a <dir_register+0xda>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aa0c:	6a39      	ldr	r1, [r7, #32]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fcc0 	bl	800a394 <dir_alloc>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d148      	bne.n	800aab4 <dir_register+0x184>
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	623b      	str	r3, [r7, #32]
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d042      	beq.n	800aab4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695a      	ldr	r2, [r3, #20]
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	015b      	lsls	r3, r3, #5
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff fb4b 	bl	800a0d6 <dir_sdi>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800aa46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d132      	bne.n	800aab4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3324      	adds	r3, #36	@ 0x24
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff fe8a 	bl	800a76c <sum_sfn>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4619      	mov	r1, r3
 800aa62:	69f8      	ldr	r0, [r7, #28]
 800aa64:	f7fe ff58 	bl	8009918 <move_window>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800aa6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11d      	bne.n	800aab2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	6918      	ldr	r0, [r3, #16]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a19      	ldr	r1, [r3, #32]
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	7efb      	ldrb	r3, [r7, #27]
 800aa84:	f7ff fd7c 	bl	800a580 <put_lfn>
				fs->wflag = 1;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800aa8e:	2100      	movs	r1, #0
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fba9 	bl	800a1e8 <dir_next>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800aa9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d107      	bne.n	800aab4 <dir_register+0x184>
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	623b      	str	r3, [r7, #32]
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1d5      	bne.n	800aa5c <dir_register+0x12c>
 800aab0:	e000      	b.n	800aab4 <dir_register+0x184>
				if (res != FR_OK) break;
 800aab2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aab4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d128      	bne.n	800ab0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4619      	mov	r1, r3
 800aac2:	69f8      	ldr	r0, [r7, #28]
 800aac4:	f7fe ff28 	bl	8009918 <move_window>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800aace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d11b      	bne.n	800ab0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	2220      	movs	r2, #32
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fd0d 	bl	80094fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a18      	ldr	r0, [r3, #32]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3324      	adds	r3, #36	@ 0x24
 800aaec:	220b      	movs	r2, #11
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f7fe fce4 	bl	80094bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	330c      	adds	r3, #12
 800ab00:	f002 0218 	and.w	r2, r2, #24
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3730      	adds	r7, #48	@ 0x30
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ab20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08a      	sub	sp, #40	@ 0x28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	613b      	str	r3, [r7, #16]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	61ba      	str	r2, [r7, #24]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	4413      	add	r3, r2
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ab4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab50:	2b1f      	cmp	r3, #31
 800ab52:	d940      	bls.n	800abd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ab54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab56:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab58:	d006      	beq.n	800ab68 <create_name+0x48>
 800ab5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab5c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab5e:	d110      	bne.n	800ab82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ab60:	e002      	b.n	800ab68 <create_name+0x48>
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	3301      	adds	r3, #1
 800ab66:	61bb      	str	r3, [r7, #24]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab72:	d0f6      	beq.n	800ab62 <create_name+0x42>
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	4413      	add	r3, r2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab7e:	d0f0      	beq.n	800ab62 <create_name+0x42>
			break;
 800ab80:	e02a      	b.n	800abd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab86:	d901      	bls.n	800ab8c <create_name+0x6c>
 800ab88:	2306      	movs	r3, #6
 800ab8a:	e17d      	b.n	800ae88 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ab8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ab92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab94:	2101      	movs	r1, #1
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 fbdc 	bl	800c354 <ff_convert>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <create_name+0x8a>
 800aba6:	2306      	movs	r3, #6
 800aba8:	e16e      	b.n	800ae88 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800abaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abac:	2b7f      	cmp	r3, #127	@ 0x7f
 800abae:	d809      	bhi.n	800abc4 <create_name+0xa4>
 800abb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abb2:	4619      	mov	r1, r3
 800abb4:	488d      	ldr	r0, [pc, #564]	@ (800adec <create_name+0x2cc>)
 800abb6:	f7fe fce4 	bl	8009582 <chk_chr>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <create_name+0xa4>
 800abc0:	2306      	movs	r3, #6
 800abc2:	e161      	b.n	800ae88 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	617a      	str	r2, [r7, #20]
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800abd4:	e7b4      	b.n	800ab40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800abd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	441a      	add	r2, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800abe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abe4:	2b1f      	cmp	r3, #31
 800abe6:	d801      	bhi.n	800abec <create_name+0xcc>
 800abe8:	2304      	movs	r3, #4
 800abea:	e000      	b.n	800abee <create_name+0xce>
 800abec:	2300      	movs	r3, #0
 800abee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800abf2:	e011      	b.n	800ac18 <create_name+0xf8>
		w = lfn[di - 1];
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800abfa:	3b01      	subs	r3, #1
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ac06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d002      	beq.n	800ac12 <create_name+0xf2>
 800ac0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac10:	d106      	bne.n	800ac20 <create_name+0x100>
		di--;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1ea      	bne.n	800abf4 <create_name+0xd4>
 800ac1e:	e000      	b.n	800ac22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ac20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <create_name+0x118>
 800ac34:	2306      	movs	r3, #6
 800ac36:	e127      	b.n	800ae88 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3324      	adds	r3, #36	@ 0x24
 800ac3c:	220b      	movs	r2, #11
 800ac3e:	2120      	movs	r1, #32
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe fc5c 	bl	80094fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ac46:	2300      	movs	r3, #0
 800ac48:	61bb      	str	r3, [r7, #24]
 800ac4a:	e002      	b.n	800ac52 <create_name+0x132>
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d0f5      	beq.n	800ac4c <create_name+0x12c>
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4413      	add	r3, r2
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac6c:	d0ee      	beq.n	800ac4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <create_name+0x168>
 800ac74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac78:	f043 0303 	orr.w	r3, r3, #3
 800ac7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ac80:	e002      	b.n	800ac88 <create_name+0x168>
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d009      	beq.n	800aca2 <create_name+0x182>
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac94:	3b01      	subs	r3, #1
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aca0:	d1ef      	bne.n	800ac82 <create_name+0x162>

	i = b = 0; ni = 8;
 800aca2:	2300      	movs	r3, #0
 800aca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aca8:	2300      	movs	r3, #0
 800acaa:	623b      	str	r3, [r7, #32]
 800acac:	2308      	movs	r3, #8
 800acae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	61ba      	str	r2, [r7, #24]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4413      	add	r3, r2
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800acc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8090 	beq.w	800ade8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800acc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acca:	2b20      	cmp	r3, #32
 800accc:	d006      	beq.n	800acdc <create_name+0x1bc>
 800acce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800acd2:	d10a      	bne.n	800acea <create_name+0x1ca>
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d006      	beq.n	800acea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800acdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ace0:	f043 0303 	orr.w	r3, r3, #3
 800ace4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ace8:	e07d      	b.n	800ade6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800acea:	6a3a      	ldr	r2, [r7, #32]
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d203      	bcs.n	800acfa <create_name+0x1da>
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d123      	bne.n	800ad42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	2b0b      	cmp	r3, #11
 800acfe:	d106      	bne.n	800ad0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad04:	f043 0303 	orr.w	r3, r3, #3
 800ad08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad0c:	e075      	b.n	800adfa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d005      	beq.n	800ad22 <create_name+0x202>
 800ad16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad1a:	f043 0303 	orr.w	r3, r3, #3
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d866      	bhi.n	800adf8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	61bb      	str	r3, [r7, #24]
 800ad2e:	2308      	movs	r3, #8
 800ad30:	623b      	str	r3, [r7, #32]
 800ad32:	230b      	movs	r3, #11
 800ad34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ad36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ad40:	e051      	b.n	800ade6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ad42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad44:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad46:	d914      	bls.n	800ad72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ad48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f001 fb01 	bl	800c354 <ff_convert>
 800ad52:	4603      	mov	r3, r0
 800ad54:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ad56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <create_name+0x246>
 800ad5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad5e:	3b80      	subs	r3, #128	@ 0x80
 800ad60:	4a23      	ldr	r2, [pc, #140]	@ (800adf0 <create_name+0x2d0>)
 800ad62:	5cd3      	ldrb	r3, [r2, r3]
 800ad64:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ad66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad6a:	f043 0302 	orr.w	r3, r3, #2
 800ad6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ad72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <create_name+0x268>
 800ad78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	481d      	ldr	r0, [pc, #116]	@ (800adf4 <create_name+0x2d4>)
 800ad7e:	f7fe fc00 	bl	8009582 <chk_chr>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d008      	beq.n	800ad9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ad88:	235f      	movs	r3, #95	@ 0x5f
 800ad8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad90:	f043 0303 	orr.w	r3, r3, #3
 800ad94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad98:	e01b      	b.n	800add2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ad9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad9c:	2b40      	cmp	r3, #64	@ 0x40
 800ad9e:	d909      	bls.n	800adb4 <create_name+0x294>
 800ada0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ada2:	2b5a      	cmp	r3, #90	@ 0x5a
 800ada4:	d806      	bhi.n	800adb4 <create_name+0x294>
					b |= 2;
 800ada6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800adb2:	e00e      	b.n	800add2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800adb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800adb6:	2b60      	cmp	r3, #96	@ 0x60
 800adb8:	d90b      	bls.n	800add2 <create_name+0x2b2>
 800adba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800adbc:	2b7a      	cmp	r3, #122	@ 0x7a
 800adbe:	d808      	bhi.n	800add2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800adc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800adcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800adce:	3b20      	subs	r3, #32
 800add0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	623a      	str	r2, [r7, #32]
 800add8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800adda:	b2d1      	uxtb	r1, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4413      	add	r3, r2
 800ade0:	460a      	mov	r2, r1
 800ade2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ade6:	e763      	b.n	800acb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ade8:	bf00      	nop
 800adea:	e006      	b.n	800adfa <create_name+0x2da>
 800adec:	0800fda0 	.word	0x0800fda0
 800adf0:	08010308 	.word	0x08010308
 800adf4:	0800fdac 	.word	0x0800fdac
			if (si > di) break;			/* No extension */
 800adf8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ae00:	2be5      	cmp	r3, #229	@ 0xe5
 800ae02:	d103      	bne.n	800ae0c <create_name+0x2ec>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2205      	movs	r2, #5
 800ae08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2b08      	cmp	r3, #8
 800ae10:	d104      	bne.n	800ae1c <create_name+0x2fc>
 800ae12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ae1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae20:	f003 030c 	and.w	r3, r3, #12
 800ae24:	2b0c      	cmp	r3, #12
 800ae26:	d005      	beq.n	800ae34 <create_name+0x314>
 800ae28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d105      	bne.n	800ae40 <create_name+0x320>
 800ae34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ae40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d117      	bne.n	800ae7c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ae4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d105      	bne.n	800ae64 <create_name+0x344>
 800ae58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae5c:	f043 0310 	orr.w	r3, r3, #16
 800ae60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ae64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae68:	f003 030c 	and.w	r3, r3, #12
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d105      	bne.n	800ae7c <create_name+0x35c>
 800ae70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae74:	f043 0308 	orr.w	r3, r3, #8
 800ae78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ae86:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3728      	adds	r7, #40	@ 0x28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aea4:	e002      	b.n	800aeac <follow_path+0x1c>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b2f      	cmp	r3, #47	@ 0x2f
 800aeb2:	d0f8      	beq.n	800aea6 <follow_path+0x16>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b5c      	cmp	r3, #92	@ 0x5c
 800aeba:	d0f4      	beq.n	800aea6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2200      	movs	r2, #0
 800aec0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b1f      	cmp	r3, #31
 800aec8:	d80a      	bhi.n	800aee0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2280      	movs	r2, #128	@ 0x80
 800aece:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aed2:	2100      	movs	r1, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff f8fe 	bl	800a0d6 <dir_sdi>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
 800aede:	e048      	b.n	800af72 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aee0:	463b      	mov	r3, r7
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fe1b 	bl	800ab20 <create_name>
 800aeea:	4603      	mov	r3, r0
 800aeec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d139      	bne.n	800af68 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff fc5a 	bl	800a7ae <dir_find>
 800aefa:	4603      	mov	r3, r0
 800aefc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00a      	beq.n	800af22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d12c      	bne.n	800af6c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d127      	bne.n	800af6c <follow_path+0xdc>
 800af1c:	2305      	movs	r3, #5
 800af1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af20:	e024      	b.n	800af6c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af22:	7afb      	ldrb	r3, [r7, #11]
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d121      	bne.n	800af70 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	799b      	ldrb	r3, [r3, #6]
 800af30:	f003 0310 	and.w	r3, r3, #16
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af38:	2305      	movs	r3, #5
 800af3a:	75fb      	strb	r3, [r7, #23]
 800af3c:	e019      	b.n	800af72 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	8992      	ldrh	r2, [r2, #12]
 800af4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af50:	fb00 f202 	mul.w	r2, r0, r2
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	440b      	add	r3, r1
 800af58:	4619      	mov	r1, r3
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fa61 	bl	800a422 <ld_clust>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af66:	e7bb      	b.n	800aee0 <follow_path+0x50>
			if (res != FR_OK) break;
 800af68:	bf00      	nop
 800af6a:	e002      	b.n	800af72 <follow_path+0xe2>
				break;
 800af6c:	bf00      	nop
 800af6e:	e000      	b.n	800af72 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af70:	bf00      	nop
			}
		}
	}

	return res;
 800af72:	7dfb      	ldrb	r3, [r7, #23]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af84:	f04f 33ff 	mov.w	r3, #4294967295
 800af88:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d031      	beq.n	800aff6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e002      	b.n	800afa0 <get_ldnumber+0x24>
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	3301      	adds	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b1f      	cmp	r3, #31
 800afa6:	d903      	bls.n	800afb0 <get_ldnumber+0x34>
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b3a      	cmp	r3, #58	@ 0x3a
 800afae:	d1f4      	bne.n	800af9a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b3a      	cmp	r3, #58	@ 0x3a
 800afb6:	d11c      	bne.n	800aff2 <get_ldnumber+0x76>
			tp = *path;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	60fa      	str	r2, [r7, #12]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	3b30      	subs	r3, #48	@ 0x30
 800afc8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b09      	cmp	r3, #9
 800afce:	d80e      	bhi.n	800afee <get_ldnumber+0x72>
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d10a      	bne.n	800afee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d107      	bne.n	800afee <get_ldnumber+0x72>
					vol = (int)i;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	3301      	adds	r3, #1
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	e002      	b.n	800aff8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aff2:	2300      	movs	r3, #0
 800aff4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aff6:	693b      	ldr	r3, [r7, #16]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	70da      	strb	r2, [r3, #3]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7fe fc7a 	bl	8009918 <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <check_fs+0x2a>
 800b02a:	2304      	movs	r3, #4
 800b02c:	e038      	b.n	800b0a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3338      	adds	r3, #56	@ 0x38
 800b032:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe f9be 	bl	80093b8 <ld_word>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b044:	429a      	cmp	r2, r3
 800b046:	d001      	beq.n	800b04c <check_fs+0x48>
 800b048:	2303      	movs	r3, #3
 800b04a:	e029      	b.n	800b0a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b052:	2be9      	cmp	r3, #233	@ 0xe9
 800b054:	d009      	beq.n	800b06a <check_fs+0x66>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b05c:	2beb      	cmp	r3, #235	@ 0xeb
 800b05e:	d11e      	bne.n	800b09e <check_fs+0x9a>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b066:	2b90      	cmp	r3, #144	@ 0x90
 800b068:	d119      	bne.n	800b09e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3338      	adds	r3, #56	@ 0x38
 800b06e:	3336      	adds	r3, #54	@ 0x36
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe f9b9 	bl	80093e8 <ld_dword>
 800b076:	4603      	mov	r3, r0
 800b078:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b07c:	4a0a      	ldr	r2, [pc, #40]	@ (800b0a8 <check_fs+0xa4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d101      	bne.n	800b086 <check_fs+0x82>
 800b082:	2300      	movs	r3, #0
 800b084:	e00c      	b.n	800b0a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3338      	adds	r3, #56	@ 0x38
 800b08a:	3352      	adds	r3, #82	@ 0x52
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe f9ab 	bl	80093e8 <ld_dword>
 800b092:	4603      	mov	r3, r0
 800b094:	4a05      	ldr	r2, [pc, #20]	@ (800b0ac <check_fs+0xa8>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d101      	bne.n	800b09e <check_fs+0x9a>
 800b09a:	2300      	movs	r3, #0
 800b09c:	e000      	b.n	800b0a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b09e:	2302      	movs	r3, #2
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	00544146 	.word	0x00544146
 800b0ac:	33544146 	.word	0x33544146

0800b0b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b096      	sub	sp, #88	@ 0x58
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff ff59 	bl	800af7c <get_ldnumber>
 800b0ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da01      	bge.n	800b0d6 <find_volume+0x26>
 800b0d2:	230b      	movs	r3, #11
 800b0d4:	e265      	b.n	800b5a2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b0d6:	4a9f      	ldr	r2, [pc, #636]	@ (800b354 <find_volume+0x2a4>)
 800b0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0de:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <find_volume+0x3a>
 800b0e6:	230c      	movs	r3, #12
 800b0e8:	e25b      	b.n	800b5a2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0f0:	79fb      	ldrb	r3, [r7, #7]
 800b0f2:	f023 0301 	bic.w	r3, r3, #1
 800b0f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01a      	beq.n	800b136 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe f8b7 	bl	8009278 <disk_status>
 800b10a:	4603      	mov	r3, r0
 800b10c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10c      	bne.n	800b136 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d007      	beq.n	800b132 <find_volume+0x82>
 800b122:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b126:	f003 0304 	and.w	r3, r3, #4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b12e:	230a      	movs	r3, #10
 800b130:	e237      	b.n	800b5a2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b132:	2300      	movs	r3, #0
 800b134:	e235      	b.n	800b5a2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe f8af 	bl	80092ac <disk_initialize>
 800b14e:	4603      	mov	r3, r0
 800b150:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b154:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b160:	2303      	movs	r3, #3
 800b162:	e21e      	b.n	800b5a2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <find_volume+0xca>
 800b16a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b176:	230a      	movs	r3, #10
 800b178:	e213      	b.n	800b5a2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	7858      	ldrb	r0, [r3, #1]
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	330c      	adds	r3, #12
 800b182:	461a      	mov	r2, r3
 800b184:	2102      	movs	r1, #2
 800b186:	f7fe f8f9 	bl	800937c <disk_ioctl>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <find_volume+0xe4>
 800b190:	2301      	movs	r3, #1
 800b192:	e206      	b.n	800b5a2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	899b      	ldrh	r3, [r3, #12]
 800b198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b19c:	d80d      	bhi.n	800b1ba <find_volume+0x10a>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	899b      	ldrh	r3, [r3, #12]
 800b1a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a6:	d308      	bcc.n	800b1ba <find_volume+0x10a>
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	899b      	ldrh	r3, [r3, #12]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <find_volume+0x10e>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e1f1      	b.n	800b5a2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b1c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1c6:	f7ff ff1d 	bl	800b004 <check_fs>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d149      	bne.n	800b26c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1d8:	2300      	movs	r3, #0
 800b1da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1dc:	e01e      	b.n	800b21c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b1e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b1ec:	4413      	add	r3, r2
 800b1ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d006      	beq.n	800b208 <find_volume+0x158>
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe f8f2 	bl	80093e8 <ld_dword>
 800b204:	4602      	mov	r2, r0
 800b206:	e000      	b.n	800b20a <find_volume+0x15a>
 800b208:	2200      	movs	r2, #0
 800b20a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	3358      	adds	r3, #88	@ 0x58
 800b210:	443b      	add	r3, r7
 800b212:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b218:	3301      	adds	r3, #1
 800b21a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d9dd      	bls.n	800b1de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b222:	2300      	movs	r3, #0
 800b224:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <find_volume+0x182>
 800b22c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b22e:	3b01      	subs	r3, #1
 800b230:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	3358      	adds	r3, #88	@ 0x58
 800b238:	443b      	add	r3, r7
 800b23a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b23e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b242:	2b00      	cmp	r3, #0
 800b244:	d005      	beq.n	800b252 <find_volume+0x1a2>
 800b246:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b248:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b24a:	f7ff fedb 	bl	800b004 <check_fs>
 800b24e:	4603      	mov	r3, r0
 800b250:	e000      	b.n	800b254 <find_volume+0x1a4>
 800b252:	2303      	movs	r3, #3
 800b254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b258:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d905      	bls.n	800b26c <find_volume+0x1bc>
 800b260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b262:	3301      	adds	r3, #1
 800b264:	643b      	str	r3, [r7, #64]	@ 0x40
 800b266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d9e2      	bls.n	800b232 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b26c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b270:	2b04      	cmp	r3, #4
 800b272:	d101      	bne.n	800b278 <find_volume+0x1c8>
 800b274:	2301      	movs	r3, #1
 800b276:	e194      	b.n	800b5a2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b278:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d901      	bls.n	800b284 <find_volume+0x1d4>
 800b280:	230d      	movs	r3, #13
 800b282:	e18e      	b.n	800b5a2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b286:	3338      	adds	r3, #56	@ 0x38
 800b288:	330b      	adds	r3, #11
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fe f894 	bl	80093b8 <ld_word>
 800b290:	4603      	mov	r3, r0
 800b292:	461a      	mov	r2, r3
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	899b      	ldrh	r3, [r3, #12]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d001      	beq.n	800b2a0 <find_volume+0x1f0>
 800b29c:	230d      	movs	r3, #13
 800b29e:	e180      	b.n	800b5a2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	3338      	adds	r3, #56	@ 0x38
 800b2a4:	3316      	adds	r3, #22
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe f886 	bl	80093b8 <ld_word>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <find_volume+0x214>
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b8:	3338      	adds	r3, #56	@ 0x38
 800b2ba:	3324      	adds	r3, #36	@ 0x24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe f893 	bl	80093e8 <ld_dword>
 800b2c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	789b      	ldrb	r3, [r3, #2]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d005      	beq.n	800b2e8 <find_volume+0x238>
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2de:	789b      	ldrb	r3, [r3, #2]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d001      	beq.n	800b2e8 <find_volume+0x238>
 800b2e4:	230d      	movs	r3, #13
 800b2e6:	e15c      	b.n	800b5a2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	789b      	ldrb	r3, [r3, #2]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2f0:	fb02 f303 	mul.w	r3, r2, r3
 800b2f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b300:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b304:	895b      	ldrh	r3, [r3, #10]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d008      	beq.n	800b31c <find_volume+0x26c>
 800b30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30c:	895b      	ldrh	r3, [r3, #10]
 800b30e:	461a      	mov	r2, r3
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	895b      	ldrh	r3, [r3, #10]
 800b314:	3b01      	subs	r3, #1
 800b316:	4013      	ands	r3, r2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <find_volume+0x270>
 800b31c:	230d      	movs	r3, #13
 800b31e:	e140      	b.n	800b5a2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b322:	3338      	adds	r3, #56	@ 0x38
 800b324:	3311      	adds	r3, #17
 800b326:	4618      	mov	r0, r3
 800b328:	f7fe f846 	bl	80093b8 <ld_word>
 800b32c:	4603      	mov	r3, r0
 800b32e:	461a      	mov	r2, r3
 800b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b332:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b336:	891b      	ldrh	r3, [r3, #8]
 800b338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b33a:	8992      	ldrh	r2, [r2, #12]
 800b33c:	0952      	lsrs	r2, r2, #5
 800b33e:	b292      	uxth	r2, r2
 800b340:	fbb3 f1f2 	udiv	r1, r3, r2
 800b344:	fb01 f202 	mul.w	r2, r1, r2
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <find_volume+0x2a8>
 800b350:	230d      	movs	r3, #13
 800b352:	e126      	b.n	800b5a2 <find_volume+0x4f2>
 800b354:	200015f8 	.word	0x200015f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35a:	3338      	adds	r3, #56	@ 0x38
 800b35c:	3313      	adds	r3, #19
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe f82a 	bl	80093b8 <ld_word>
 800b364:	4603      	mov	r3, r0
 800b366:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <find_volume+0x2cc>
 800b36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b370:	3338      	adds	r3, #56	@ 0x38
 800b372:	3320      	adds	r3, #32
 800b374:	4618      	mov	r0, r3
 800b376:	f7fe f837 	bl	80093e8 <ld_dword>
 800b37a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	3338      	adds	r3, #56	@ 0x38
 800b380:	330e      	adds	r3, #14
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe f818 	bl	80093b8 <ld_word>
 800b388:	4603      	mov	r3, r0
 800b38a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b38c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <find_volume+0x2e6>
 800b392:	230d      	movs	r3, #13
 800b394:	e105      	b.n	800b5a2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b396:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b39a:	4413      	add	r3, r2
 800b39c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b39e:	8911      	ldrh	r1, [r2, #8]
 800b3a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3a2:	8992      	ldrh	r2, [r2, #12]
 800b3a4:	0952      	lsrs	r2, r2, #5
 800b3a6:	b292      	uxth	r2, r2
 800b3a8:	fbb1 f2f2 	udiv	r2, r1, r2
 800b3ac:	b292      	uxth	r2, r2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b3b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d201      	bcs.n	800b3be <find_volume+0x30e>
 800b3ba:	230d      	movs	r3, #13
 800b3bc:	e0f1      	b.n	800b5a2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b3be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3c6:	8952      	ldrh	r2, [r2, #10]
 800b3c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <find_volume+0x328>
 800b3d4:	230d      	movs	r3, #13
 800b3d6:	e0e4      	b.n	800b5a2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d802      	bhi.n	800b3ee <find_volume+0x33e>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d802      	bhi.n	800b3fe <find_volume+0x34e>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	1c9a      	adds	r2, r3, #2
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b40a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b40c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b40e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b410:	441a      	add	r2, r3
 800b412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b414:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	441a      	add	r2, r3
 800b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b420:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b424:	2b03      	cmp	r3, #3
 800b426:	d11e      	bne.n	800b466 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42a:	3338      	adds	r3, #56	@ 0x38
 800b42c:	332a      	adds	r3, #42	@ 0x2a
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd ffc2 	bl	80093b8 <ld_word>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <find_volume+0x38e>
 800b43a:	230d      	movs	r3, #13
 800b43c:	e0b1      	b.n	800b5a2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b440:	891b      	ldrh	r3, [r3, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <find_volume+0x39a>
 800b446:	230d      	movs	r3, #13
 800b448:	e0ab      	b.n	800b5a2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	3338      	adds	r3, #56	@ 0x38
 800b44e:	332c      	adds	r3, #44	@ 0x2c
 800b450:	4618      	mov	r0, r3
 800b452:	f7fd ffc9 	bl	80093e8 <ld_dword>
 800b456:	4602      	mov	r2, r0
 800b458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	647b      	str	r3, [r7, #68]	@ 0x44
 800b464:	e01f      	b.n	800b4a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	891b      	ldrh	r3, [r3, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <find_volume+0x3c2>
 800b46e:	230d      	movs	r3, #13
 800b470:	e097      	b.n	800b5a2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b478:	441a      	add	r2, r3
 800b47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b47e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b482:	2b02      	cmp	r3, #2
 800b484:	d103      	bne.n	800b48e <find_volume+0x3de>
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	69db      	ldr	r3, [r3, #28]
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	e00a      	b.n	800b4a4 <find_volume+0x3f4>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b490:	69da      	ldr	r2, [r3, #28]
 800b492:	4613      	mov	r3, r2
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	4413      	add	r3, r2
 800b498:	085a      	lsrs	r2, r3, #1
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b4a4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a8:	6a1a      	ldr	r2, [r3, #32]
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ac:	899b      	ldrh	r3, [r3, #12]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4b2:	440b      	add	r3, r1
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b4b8:	8989      	ldrh	r1, [r1, #12]
 800b4ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d201      	bcs.n	800b4c6 <find_volume+0x416>
 800b4c2:	230d      	movs	r3, #13
 800b4c4:	e06d      	b.n	800b5a2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4cc:	619a      	str	r2, [r3, #24]
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	2280      	movs	r2, #128	@ 0x80
 800b4da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d149      	bne.n	800b578 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	3338      	adds	r3, #56	@ 0x38
 800b4e8:	3330      	adds	r3, #48	@ 0x30
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd ff64 	bl	80093b8 <ld_word>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d140      	bne.n	800b578 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4fe:	f7fe fa0b 	bl	8009918 <move_window>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d137      	bne.n	800b578 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	2200      	movs	r2, #0
 800b50c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b510:	3338      	adds	r3, #56	@ 0x38
 800b512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b516:	4618      	mov	r0, r3
 800b518:	f7fd ff4e 	bl	80093b8 <ld_word>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b524:	429a      	cmp	r2, r3
 800b526:	d127      	bne.n	800b578 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52a:	3338      	adds	r3, #56	@ 0x38
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fd ff5b 	bl	80093e8 <ld_dword>
 800b532:	4603      	mov	r3, r0
 800b534:	4a1d      	ldr	r2, [pc, #116]	@ (800b5ac <find_volume+0x4fc>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d11e      	bne.n	800b578 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53c:	3338      	adds	r3, #56	@ 0x38
 800b53e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b542:	4618      	mov	r0, r3
 800b544:	f7fd ff50 	bl	80093e8 <ld_dword>
 800b548:	4603      	mov	r3, r0
 800b54a:	4a19      	ldr	r2, [pc, #100]	@ (800b5b0 <find_volume+0x500>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d113      	bne.n	800b578 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	3338      	adds	r3, #56	@ 0x38
 800b554:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fd ff45 	bl	80093e8 <ld_dword>
 800b55e:	4602      	mov	r2, r0
 800b560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b562:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	3338      	adds	r3, #56	@ 0x38
 800b568:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fd ff3b 	bl	80093e8 <ld_dword>
 800b572:	4602      	mov	r2, r0
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b57e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b580:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b4 <find_volume+0x504>)
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b4 <find_volume+0x504>)
 800b58a:	801a      	strh	r2, [r3, #0]
 800b58c:	4b09      	ldr	r3, [pc, #36]	@ (800b5b4 <find_volume+0x504>)
 800b58e:	881a      	ldrh	r2, [r3, #0]
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	4a08      	ldr	r2, [pc, #32]	@ (800b5b8 <find_volume+0x508>)
 800b598:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b59a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b59c:	f7fe f954 	bl	8009848 <clear_lock>
#endif
	return FR_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3758      	adds	r7, #88	@ 0x58
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	41615252 	.word	0x41615252
 800b5b0:	61417272 	.word	0x61417272
 800b5b4:	200015fc 	.word	0x200015fc
 800b5b8:	20001620 	.word	0x20001620

0800b5bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b5c6:	2309      	movs	r3, #9
 800b5c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01c      	beq.n	800b60a <validate+0x4e>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d018      	beq.n	800b60a <validate+0x4e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d013      	beq.n	800b60a <validate+0x4e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	889a      	ldrh	r2, [r3, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	88db      	ldrh	r3, [r3, #6]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d10c      	bne.n	800b60a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	785b      	ldrb	r3, [r3, #1]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fd fe3e 	bl	8009278 <disk_status>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <validate+0x4e>
			res = FR_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <validate+0x5a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	e000      	b.n	800b618 <validate+0x5c>
 800b616:	2300      	movs	r3, #0
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	6013      	str	r3, [r2, #0]
	return res;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b63a:	f107 0310 	add.w	r3, r7, #16
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fc9c 	bl	800af7c <get_ldnumber>
 800b644:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	da01      	bge.n	800b650 <f_mount+0x28>
 800b64c:	230b      	movs	r3, #11
 800b64e:	e02b      	b.n	800b6a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b650:	4a17      	ldr	r2, [pc, #92]	@ (800b6b0 <f_mount+0x88>)
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b658:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b660:	69b8      	ldr	r0, [r7, #24]
 800b662:	f7fe f8f1 	bl	8009848 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	490d      	ldr	r1, [pc, #52]	@ (800b6b0 <f_mount+0x88>)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <f_mount+0x66>
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d001      	beq.n	800b692 <f_mount+0x6a>
 800b68e:	2300      	movs	r3, #0
 800b690:	e00a      	b.n	800b6a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b692:	f107 010c 	add.w	r1, r7, #12
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	2200      	movs	r2, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff fd07 	bl	800b0b0 <find_volume>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	200015f8 	.word	0x200015f8

0800b6b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b09a      	sub	sp, #104	@ 0x68
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <f_open+0x18>
 800b6c8:	2309      	movs	r3, #9
 800b6ca:	e1b7      	b.n	800ba3c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b6d4:	79fa      	ldrb	r2, [r7, #7]
 800b6d6:	f107 0114 	add.w	r1, r7, #20
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fce6 	bl	800b0b0 <find_volume>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f040 819b 	bne.w	800ba2a <f_open+0x376>
		dj.obj.fs = fs;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	f107 0318 	add.w	r3, r7, #24
 800b6fe:	4611      	mov	r1, r2
 800b700:	4618      	mov	r0, r3
 800b702:	f7ff fbc5 	bl	800ae90 <follow_path>
 800b706:	4603      	mov	r3, r0
 800b708:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b70c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b710:	2b00      	cmp	r3, #0
 800b712:	d118      	bne.n	800b746 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b714:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b718:	b25b      	sxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	da03      	bge.n	800b726 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b71e:	2306      	movs	r3, #6
 800b720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b724:	e00f      	b.n	800b746 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	bf8c      	ite	hi
 800b72c:	2301      	movhi	r3, #1
 800b72e:	2300      	movls	r3, #0
 800b730:	b2db      	uxtb	r3, r3
 800b732:	461a      	mov	r2, r3
 800b734:	f107 0318 	add.w	r3, r7, #24
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fd ff3c 	bl	80095b8 <chk_lock>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	f003 031c 	and.w	r3, r3, #28
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d07f      	beq.n	800b850 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b750:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b754:	2b00      	cmp	r3, #0
 800b756:	d017      	beq.n	800b788 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b758:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d10e      	bne.n	800b77e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b760:	f7fd ff86 	bl	8009670 <enq_lock>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d006      	beq.n	800b778 <f_open+0xc4>
 800b76a:	f107 0318 	add.w	r3, r7, #24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff f8de 	bl	800a930 <dir_register>
 800b774:	4603      	mov	r3, r0
 800b776:	e000      	b.n	800b77a <f_open+0xc6>
 800b778:	2312      	movs	r3, #18
 800b77a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	f043 0308 	orr.w	r3, r3, #8
 800b784:	71fb      	strb	r3, [r7, #7]
 800b786:	e010      	b.n	800b7aa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b788:	7fbb      	ldrb	r3, [r7, #30]
 800b78a:	f003 0311 	and.w	r3, r3, #17
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <f_open+0xe6>
					res = FR_DENIED;
 800b792:	2307      	movs	r3, #7
 800b794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b798:	e007      	b.n	800b7aa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b79a:	79fb      	ldrb	r3, [r7, #7]
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <f_open+0xf6>
 800b7a4:	2308      	movs	r3, #8
 800b7a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b7aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d168      	bne.n	800b884 <f_open+0x1d0>
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	f003 0308 	and.w	r3, r3, #8
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d063      	beq.n	800b884 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b7bc:	f7fd fcfe 	bl	80091bc <get_fattime>
 800b7c0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c4:	330e      	adds	r3, #14
 800b7c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fd fe4b 	bl	8009464 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d0:	3316      	adds	r3, #22
 800b7d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fd fe45 	bl	8009464 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7dc:	330b      	adds	r3, #11
 800b7de:	2220      	movs	r2, #32
 800b7e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fe1a 	bl	800a422 <ld_clust>
 800b7ee:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fe fe32 	bl	800a460 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fe:	331c      	adds	r3, #28
 800b800:	2100      	movs	r1, #0
 800b802:	4618      	mov	r0, r3
 800b804:	f7fd fe2e 	bl	8009464 <st_dword>
					fs->wflag = 1;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2201      	movs	r2, #1
 800b80c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b810:	2b00      	cmp	r3, #0
 800b812:	d037      	beq.n	800b884 <f_open+0x1d0>
						dw = fs->winsect;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b818:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b81a:	f107 0318 	add.w	r3, r7, #24
 800b81e:	2200      	movs	r2, #0
 800b820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fb22 	bl	8009e6c <remove_chain>
 800b828:	4603      	mov	r3, r0
 800b82a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b82e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b832:	2b00      	cmp	r3, #0
 800b834:	d126      	bne.n	800b884 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f86c 	bl	8009918 <move_window>
 800b840:	4603      	mov	r3, r0
 800b842:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b84a:	3a01      	subs	r2, #1
 800b84c:	615a      	str	r2, [r3, #20]
 800b84e:	e019      	b.n	800b884 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b850:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b854:	2b00      	cmp	r3, #0
 800b856:	d115      	bne.n	800b884 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b858:	7fbb      	ldrb	r3, [r7, #30]
 800b85a:	f003 0310 	and.w	r3, r3, #16
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <f_open+0x1b6>
					res = FR_NO_FILE;
 800b862:	2304      	movs	r3, #4
 800b864:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b868:	e00c      	b.n	800b884 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b86a:	79fb      	ldrb	r3, [r7, #7]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b00      	cmp	r3, #0
 800b872:	d007      	beq.n	800b884 <f_open+0x1d0>
 800b874:	7fbb      	ldrb	r3, [r7, #30]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <f_open+0x1d0>
						res = FR_DENIED;
 800b87e:	2307      	movs	r3, #7
 800b880:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d126      	bne.n	800b8da <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	f003 0308 	and.w	r3, r3, #8
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b89c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b8a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	bf8c      	ite	hi
 800b8b2:	2301      	movhi	r3, #1
 800b8b4:	2300      	movls	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4611      	mov	r1, r2
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fd fef7 	bl	80096b4 <inc_lock>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <f_open+0x226>
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b8da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f040 80a3 	bne.w	800ba2a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fd99 	bl	800a422 <ld_clust>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f8:	331c      	adds	r3, #28
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fd fd74 	bl	80093e8 <ld_dword>
 800b900:	4602      	mov	r2, r0
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	88da      	ldrh	r2, [r3, #6]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	79fa      	ldrb	r2, [r7, #7]
 800b91e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3330      	adds	r3, #48	@ 0x30
 800b936:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fd fdde 	bl	80094fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b942:	79fb      	ldrb	r3, [r7, #7]
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d06e      	beq.n	800ba2a <f_open+0x376>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d06a      	beq.n	800ba2a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	895b      	ldrh	r3, [r3, #10]
 800b960:	461a      	mov	r2, r3
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	899b      	ldrh	r3, [r3, #12]
 800b966:	fb02 f303 	mul.w	r3, r2, r3
 800b96a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b978:	e016      	b.n	800b9a8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe f887 	bl	8009a92 <get_fat>
 800b984:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d802      	bhi.n	800b992 <f_open+0x2de>
 800b98c:	2302      	movs	r3, #2
 800b98e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d102      	bne.n	800b9a0 <f_open+0x2ec>
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b9a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b9a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <f_open+0x304>
 800b9b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d8e0      	bhi.n	800b97a <f_open+0x2c6>
				}
				fp->clust = clst;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b9bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b9be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d131      	bne.n	800ba2a <f_open+0x376>
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	899b      	ldrh	r3, [r3, #12]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9d2:	fb01 f202 	mul.w	r2, r1, r2
 800b9d6:	1a9b      	subs	r3, r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d026      	beq.n	800ba2a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fe f837 	bl	8009a54 <clust2sect>
 800b9e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d103      	bne.n	800b9f6 <f_open+0x342>
						res = FR_INT_ERR;
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b9f4:	e019      	b.n	800ba2a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	899b      	ldrh	r3, [r3, #12]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba04:	441a      	add	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	7858      	ldrb	r0, [r3, #1]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a1a      	ldr	r2, [r3, #32]
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f7fd fc6f 	bl	80092fc <disk_read>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <f_open+0x376>
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ba2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <f_open+0x384>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ba38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3768      	adds	r7, #104	@ 0x68
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08e      	sub	sp, #56	@ 0x38
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f107 0214 	add.w	r2, r7, #20
 800ba62:	4611      	mov	r1, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fda9 	bl	800b5bc <validate>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <f_read+0x44>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	7d5b      	ldrb	r3, [r3, #21]
 800ba7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <f_read+0x4a>
 800ba88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba8c:	e135      	b.n	800bcfa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	7d1b      	ldrb	r3, [r3, #20]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <f_read+0x5a>
 800ba9a:	2307      	movs	r3, #7
 800ba9c:	e12d      	b.n	800bcfa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	429a      	cmp	r2, r3
 800bab0:	f240 811e 	bls.w	800bcf0 <f_read+0x2ac>
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bab8:	e11a      	b.n	800bcf0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	8992      	ldrh	r2, [r2, #12]
 800bac2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac6:	fb01 f202 	mul.w	r2, r1, r2
 800baca:	1a9b      	subs	r3, r3, r2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f040 80d5 	bne.w	800bc7c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	8992      	ldrh	r2, [r2, #12]
 800bada:	fbb3 f3f2 	udiv	r3, r3, r2
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	8952      	ldrh	r2, [r2, #10]
 800bae2:	3a01      	subs	r2, #1
 800bae4:	4013      	ands	r3, r2
 800bae6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d12f      	bne.n	800bb4e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d103      	bne.n	800bafe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	633b      	str	r3, [r7, #48]	@ 0x30
 800bafc:	e013      	b.n	800bb26 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f7fe faaa 	bl	800a066 <clmt_clust>
 800bb12:	6338      	str	r0, [r7, #48]	@ 0x30
 800bb14:	e007      	b.n	800bb26 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fd ffb7 	bl	8009a92 <get_fat>
 800bb24:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d804      	bhi.n	800bb36 <f_read+0xf2>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2202      	movs	r2, #2
 800bb30:	755a      	strb	r2, [r3, #21]
 800bb32:	2302      	movs	r3, #2
 800bb34:	e0e1      	b.n	800bcfa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3c:	d104      	bne.n	800bb48 <f_read+0x104>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2201      	movs	r2, #1
 800bb42:	755a      	strb	r2, [r3, #21]
 800bb44:	2301      	movs	r3, #1
 800bb46:	e0d8      	b.n	800bcfa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb4c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f7fd ff7c 	bl	8009a54 <clust2sect>
 800bb5c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d104      	bne.n	800bb6e <f_read+0x12a>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2202      	movs	r2, #2
 800bb68:	755a      	strb	r2, [r3, #21]
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e0c5      	b.n	800bcfa <f_read+0x2b6>
			sect += csect;
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	4413      	add	r3, r2
 800bb74:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb82:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d041      	beq.n	800bc0e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8e:	4413      	add	r3, r2
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	8952      	ldrh	r2, [r2, #10]
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d905      	bls.n	800bba4 <f_read+0x160>
					cc = fs->csize - csect;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	895b      	ldrh	r3, [r3, #10]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	7858      	ldrb	r0, [r3, #1]
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbae:	f7fd fba5 	bl	80092fc <disk_read>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d004      	beq.n	800bbc2 <f_read+0x17e>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	755a      	strb	r2, [r3, #21]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e09b      	b.n	800bcfa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	7d1b      	ldrb	r3, [r3, #20]
 800bbc6:	b25b      	sxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	da18      	bge.n	800bbfe <f_read+0x1ba>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a1a      	ldr	r2, [r3, #32]
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d911      	bls.n	800bbfe <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a1a      	ldr	r2, [r3, #32]
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	8992      	ldrh	r2, [r2, #12]
 800bbe6:	fb02 f303 	mul.w	r3, r2, r3
 800bbea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbec:	18d0      	adds	r0, r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	899b      	ldrh	r3, [r3, #12]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f7fd fc5f 	bl	80094bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	899b      	ldrh	r3, [r3, #12]
 800bc02:	461a      	mov	r2, r3
 800bc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc06:	fb02 f303 	mul.w	r3, r2, r3
 800bc0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bc0c:	e05c      	b.n	800bcc8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	69ba      	ldr	r2, [r7, #24]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d02e      	beq.n	800bc76 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	7d1b      	ldrb	r3, [r3, #20]
 800bc1c:	b25b      	sxtb	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	da18      	bge.n	800bc54 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	7858      	ldrb	r0, [r3, #1]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6a1a      	ldr	r2, [r3, #32]
 800bc30:	2301      	movs	r3, #1
 800bc32:	f7fd fb83 	bl	800933c <disk_write>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d004      	beq.n	800bc46 <f_read+0x202>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	755a      	strb	r2, [r3, #21]
 800bc42:	2301      	movs	r3, #1
 800bc44:	e059      	b.n	800bcfa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	7858      	ldrb	r0, [r3, #1]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc5e:	2301      	movs	r3, #1
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	f7fd fb4b 	bl	80092fc <disk_read>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <f_read+0x232>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	755a      	strb	r2, [r3, #21]
 800bc72:	2301      	movs	r3, #1
 800bc74:	e041      	b.n	800bcfa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	899b      	ldrh	r3, [r3, #12]
 800bc80:	4618      	mov	r0, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	8992      	ldrh	r2, [r2, #12]
 800bc8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc8e:	fb01 f202 	mul.w	r2, r1, r2
 800bc92:	1a9b      	subs	r3, r3, r2
 800bc94:	1ac3      	subs	r3, r0, r3
 800bc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bc98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d901      	bls.n	800bca4 <f_read+0x260>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	8992      	ldrh	r2, [r2, #12]
 800bcb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcb6:	fb00 f202 	mul.w	r2, r0, r2
 800bcba:	1a9b      	subs	r3, r3, r2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcc4:	f7fd fbfa 	bl	80094bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bcc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bccc:	4413      	add	r3, r2
 800bcce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	699a      	ldr	r2, [r3, #24]
 800bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd6:	441a      	add	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	619a      	str	r2, [r3, #24]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce2:	441a      	add	r2, r3
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f47f aee1 	bne.w	800baba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3738      	adds	r7, #56	@ 0x38
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f107 0208 	add.w	r2, r7, #8
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fc52 	bl	800b5bc <validate>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d168      	bne.n	800bdf4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	7d1b      	ldrb	r3, [r3, #20]
 800bd26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d062      	beq.n	800bdf4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	7d1b      	ldrb	r3, [r3, #20]
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	da15      	bge.n	800bd64 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	7858      	ldrb	r0, [r3, #1]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	2301      	movs	r3, #1
 800bd48:	f7fd faf8 	bl	800933c <disk_write>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <f_sync+0x54>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e04f      	b.n	800bdf6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7d1b      	ldrb	r3, [r3, #20]
 800bd5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bd64:	f7fd fa2a 	bl	80091bc <get_fattime>
 800bd68:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7fd fdd0 	bl	8009918 <move_window>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d138      	bne.n	800bdf4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	330b      	adds	r3, #11
 800bd8c:	781a      	ldrb	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	330b      	adds	r3, #11
 800bd92:	f042 0220 	orr.w	r2, r2, #32
 800bd96:	b2d2      	uxtb	r2, r2
 800bd98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	461a      	mov	r2, r3
 800bda4:	68f9      	ldr	r1, [r7, #12]
 800bda6:	f7fe fb5b 	bl	800a460 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f103 021c 	add.w	r2, r3, #28
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f7fd fb54 	bl	8009464 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3316      	adds	r3, #22
 800bdc0:	6939      	ldr	r1, [r7, #16]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fd fb4e 	bl	8009464 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3312      	adds	r3, #18
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fd fb2d 	bl	800942e <st_word>
					fs->wflag = 1;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fd fdc9 	bl	8009974 <sync_fs>
 800bde2:	4603      	mov	r3, r0
 800bde4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	7d1b      	ldrb	r3, [r3, #20]
 800bdea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7ff ff7b 	bl	800bd02 <f_sync>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d118      	bne.n	800be48 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f107 0208 	add.w	r2, r7, #8
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff fbcc 	bl	800b5bc <validate>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10c      	bne.n	800be48 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	4618      	mov	r0, r3
 800be34:	f7fd fccc 	bl	80097d0 <dec_lock>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d102      	bne.n	800be48 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b090      	sub	sp, #64	@ 0x40
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f107 0208 	add.w	r2, r7, #8
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fba9 	bl	800b5bc <validate>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800be70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be74:	2b00      	cmp	r3, #0
 800be76:	d103      	bne.n	800be80 <f_lseek+0x2e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7d5b      	ldrb	r3, [r3, #21]
 800be7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800be80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <f_lseek+0x3c>
 800be88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be8c:	e201      	b.n	800c292 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 80d9 	beq.w	800c04a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d15a      	bne.n	800bf56 <f_lseek+0x104>
			tbl = fp->cltbl;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea8:	1d1a      	adds	r2, r3, #4
 800beaa:	627a      	str	r2, [r7, #36]	@ 0x24
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	617b      	str	r3, [r7, #20]
 800beb0:	2302      	movs	r3, #2
 800beb2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d03a      	beq.n	800bf36 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec2:	613b      	str	r3, [r7, #16]
 800bec4:	2300      	movs	r3, #0
 800bec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	3302      	adds	r3, #2
 800becc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	3301      	adds	r3, #1
 800bed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fd fdd8 	bl	8009a92 <get_fat>
 800bee2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d804      	bhi.n	800bef4 <f_lseek+0xa2>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2202      	movs	r2, #2
 800beee:	755a      	strb	r2, [r3, #21]
 800bef0:	2302      	movs	r3, #2
 800bef2:	e1ce      	b.n	800c292 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befa:	d104      	bne.n	800bf06 <f_lseek+0xb4>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	755a      	strb	r2, [r3, #21]
 800bf02:	2301      	movs	r3, #1
 800bf04:	e1c5      	b.n	800c292 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d0de      	beq.n	800bece <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bf10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d809      	bhi.n	800bf2c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf24:	1d1a      	adds	r2, r3, #4
 800bf26:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d3c4      	bcc.n	800bec0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf3c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bf3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d803      	bhi.n	800bf4e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e19f      	b.n	800c28e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bf4e:	2311      	movs	r3, #17
 800bf50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bf54:	e19b      	b.n	800c28e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d902      	bls.n	800bf66 <f_lseek+0x114>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 818d 	beq.w	800c28e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7fe f873 	bl	800a066 <clmt_clust>
 800bf80:	4602      	mov	r2, r0
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f7fd fd60 	bl	8009a54 <clust2sect>
 800bf94:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d104      	bne.n	800bfa6 <f_lseek+0x154>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	755a      	strb	r2, [r3, #21]
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	e175      	b.n	800c292 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	8992      	ldrh	r2, [r2, #12]
 800bfae:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	8952      	ldrh	r2, [r2, #10]
 800bfb6:	3a01      	subs	r2, #1
 800bfb8:	4013      	ands	r3, r2
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	8992      	ldrh	r2, [r2, #12]
 800bfc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfcc:	fb01 f202 	mul.w	r2, r1, r2
 800bfd0:	1a9b      	subs	r3, r3, r2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 815b 	beq.w	800c28e <f_lseek+0x43c>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a1b      	ldr	r3, [r3, #32]
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	f000 8155 	beq.w	800c28e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7d1b      	ldrb	r3, [r3, #20]
 800bfe8:	b25b      	sxtb	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	da18      	bge.n	800c020 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	7858      	ldrb	r0, [r3, #1]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a1a      	ldr	r2, [r3, #32]
 800bffc:	2301      	movs	r3, #1
 800bffe:	f7fd f99d 	bl	800933c <disk_write>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d004      	beq.n	800c012 <f_lseek+0x1c0>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	755a      	strb	r2, [r3, #21]
 800c00e:	2301      	movs	r3, #1
 800c010:	e13f      	b.n	800c292 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	7d1b      	ldrb	r3, [r3, #20]
 800c016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	7858      	ldrb	r0, [r3, #1]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c02a:	2301      	movs	r3, #1
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	f7fd f965 	bl	80092fc <disk_read>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d004      	beq.n	800c042 <f_lseek+0x1f0>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	755a      	strb	r2, [r3, #21]
 800c03e:	2301      	movs	r3, #1
 800c040:	e127      	b.n	800c292 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	621a      	str	r2, [r3, #32]
 800c048:	e121      	b.n	800c28e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d908      	bls.n	800c066 <f_lseek+0x214>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7d1b      	ldrb	r3, [r3, #20]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d102      	bne.n	800c066 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c074:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 80b5 	beq.w	800c1e8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	895b      	ldrh	r3, [r3, #10]
 800c082:	461a      	mov	r2, r3
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	899b      	ldrh	r3, [r3, #12]
 800c088:	fb02 f303 	mul.w	r3, r2, r3
 800c08c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01b      	beq.n	800c0cc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	1e5a      	subs	r2, r3, #1
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	1e59      	subs	r1, r3, #1
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d30f      	bcc.n	800c0cc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	1e5a      	subs	r2, r3, #1
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	425b      	negs	r3, r3
 800c0b4:	401a      	ands	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0ca:	e022      	b.n	800c112 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d119      	bne.n	800c10c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fd ff2a 	bl	8009f36 <create_chain>
 800c0e2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d104      	bne.n	800c0f4 <f_lseek+0x2a2>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	755a      	strb	r2, [r3, #21]
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e0ce      	b.n	800c292 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fa:	d104      	bne.n	800c106 <f_lseek+0x2b4>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	755a      	strb	r2, [r3, #21]
 800c102:	2301      	movs	r3, #1
 800c104:	e0c5      	b.n	800c292 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c10a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c110:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d067      	beq.n	800c1e8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c118:	e03a      	b.n	800c190 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	603b      	str	r3, [r7, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	441a      	add	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7d1b      	ldrb	r3, [r3, #20]
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00b      	beq.n	800c152 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fd fef9 	bl	8009f36 <create_chain>
 800c144:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d108      	bne.n	800c15e <f_lseek+0x30c>
							ofs = 0; break;
 800c14c:	2300      	movs	r3, #0
 800c14e:	603b      	str	r3, [r7, #0]
 800c150:	e022      	b.n	800c198 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c156:	4618      	mov	r0, r3
 800c158:	f7fd fc9b 	bl	8009a92 <get_fat>
 800c15c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c164:	d104      	bne.n	800c170 <f_lseek+0x31e>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	755a      	strb	r2, [r3, #21]
 800c16c:	2301      	movs	r3, #1
 800c16e:	e090      	b.n	800c292 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	2b01      	cmp	r3, #1
 800c174:	d904      	bls.n	800c180 <f_lseek+0x32e>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d304      	bcc.n	800c18a <f_lseek+0x338>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	755a      	strb	r2, [r3, #21]
 800c186:	2302      	movs	r3, #2
 800c188:	e083      	b.n	800c292 <f_lseek+0x440>
					fp->clust = clst;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c18e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c190:	683a      	ldr	r2, [r7, #0]
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	429a      	cmp	r2, r3
 800c196:	d8c0      	bhi.n	800c11a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	699a      	ldr	r2, [r3, #24]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	441a      	add	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	899b      	ldrh	r3, [r3, #12]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1b0:	fb01 f202 	mul.w	r2, r1, r2
 800c1b4:	1a9b      	subs	r3, r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d016      	beq.n	800c1e8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fd fc48 	bl	8009a54 <clust2sect>
 800c1c4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <f_lseek+0x384>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	755a      	strb	r2, [r3, #21]
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	e05d      	b.n	800c292 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	899b      	ldrh	r3, [r3, #12]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1e4:	4413      	add	r3, r2
 800c1e6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	699a      	ldr	r2, [r3, #24]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d90a      	bls.n	800c20a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7d1b      	ldrb	r3, [r3, #20]
 800c200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c204:	b2da      	uxtb	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	8992      	ldrh	r2, [r2, #12]
 800c212:	fbb3 f1f2 	udiv	r1, r3, r2
 800c216:	fb01 f202 	mul.w	r2, r1, r2
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d036      	beq.n	800c28e <f_lseek+0x43c>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c226:	429a      	cmp	r2, r3
 800c228:	d031      	beq.n	800c28e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7d1b      	ldrb	r3, [r3, #20]
 800c22e:	b25b      	sxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	da18      	bge.n	800c266 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	7858      	ldrb	r0, [r3, #1]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1a      	ldr	r2, [r3, #32]
 800c242:	2301      	movs	r3, #1
 800c244:	f7fd f87a 	bl	800933c <disk_write>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <f_lseek+0x406>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	755a      	strb	r2, [r3, #21]
 800c254:	2301      	movs	r3, #1
 800c256:	e01c      	b.n	800c292 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7d1b      	ldrb	r3, [r3, #20]
 800c25c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c260:	b2da      	uxtb	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	7858      	ldrb	r0, [r3, #1]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c270:	2301      	movs	r3, #1
 800c272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c274:	f7fd f842 	bl	80092fc <disk_read>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <f_lseek+0x436>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	755a      	strb	r2, [r3, #21]
 800c284:	2301      	movs	r3, #1
 800c286:	e004      	b.n	800c292 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c28c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c28e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c292:	4618      	mov	r0, r3
 800c294:	3740      	adds	r7, #64	@ 0x40
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2b4:	7a5b      	ldrb	r3, [r3, #9]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d131      	bne.n	800c320 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c2bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2be:	7a5b      	ldrb	r3, [r3, #9]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2ca:	4b19      	ldr	r3, [pc, #100]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2cc:	7a5b      	ldrb	r3, [r3, #9]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	4a17      	ldr	r2, [pc, #92]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2da:	4b15      	ldr	r3, [pc, #84]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2dc:	7a5b      	ldrb	r3, [r3, #9]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4b13      	ldr	r3, [pc, #76]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	79fa      	ldrb	r2, [r7, #7]
 800c2e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2ea:	4b11      	ldr	r3, [pc, #68]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	b2d1      	uxtb	r1, r2
 800c2f4:	4a0e      	ldr	r2, [pc, #56]	@ (800c330 <FATFS_LinkDriverEx+0x94>)
 800c2f6:	7251      	strb	r1, [r2, #9]
 800c2f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2fa:	7dbb      	ldrb	r3, [r7, #22]
 800c2fc:	3330      	adds	r3, #48	@ 0x30
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	3301      	adds	r3, #1
 800c308:	223a      	movs	r2, #58	@ 0x3a
 800c30a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	3302      	adds	r3, #2
 800c310:	222f      	movs	r2, #47	@ 0x2f
 800c312:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3303      	adds	r3, #3
 800c318:	2200      	movs	r2, #0
 800c31a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c320:	7dfb      	ldrb	r3, [r7, #23]
}
 800c322:	4618      	mov	r0, r3
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	20001820 	.word	0x20001820

0800c334 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c33e:	2200      	movs	r2, #0
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff ffaa 	bl	800c29c <FATFS_LinkDriverEx>
 800c348:	4603      	mov	r3, r0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c360:	88fb      	ldrh	r3, [r7, #6]
 800c362:	2b7f      	cmp	r3, #127	@ 0x7f
 800c364:	d802      	bhi.n	800c36c <ff_convert+0x18>
		c = chr;
 800c366:	88fb      	ldrh	r3, [r7, #6]
 800c368:	81fb      	strh	r3, [r7, #14]
 800c36a:	e025      	b.n	800c3b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00b      	beq.n	800c38a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c372:	88fb      	ldrh	r3, [r7, #6]
 800c374:	2bff      	cmp	r3, #255	@ 0xff
 800c376:	d805      	bhi.n	800c384 <ff_convert+0x30>
 800c378:	88fb      	ldrh	r3, [r7, #6]
 800c37a:	3b80      	subs	r3, #128	@ 0x80
 800c37c:	4a12      	ldr	r2, [pc, #72]	@ (800c3c8 <ff_convert+0x74>)
 800c37e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c382:	e000      	b.n	800c386 <ff_convert+0x32>
 800c384:	2300      	movs	r3, #0
 800c386:	81fb      	strh	r3, [r7, #14]
 800c388:	e016      	b.n	800c3b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c38a:	2300      	movs	r3, #0
 800c38c:	81fb      	strh	r3, [r7, #14]
 800c38e:	e009      	b.n	800c3a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c390:	89fb      	ldrh	r3, [r7, #14]
 800c392:	4a0d      	ldr	r2, [pc, #52]	@ (800c3c8 <ff_convert+0x74>)
 800c394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c398:	88fa      	ldrh	r2, [r7, #6]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d006      	beq.n	800c3ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c39e:	89fb      	ldrh	r3, [r7, #14]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	81fb      	strh	r3, [r7, #14]
 800c3a4:	89fb      	ldrh	r3, [r7, #14]
 800c3a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3a8:	d9f2      	bls.n	800c390 <ff_convert+0x3c>
 800c3aa:	e000      	b.n	800c3ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c3ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c3ae:	89fb      	ldrh	r3, [r7, #14]
 800c3b0:	3380      	adds	r3, #128	@ 0x80
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c3b8:	89fb      	ldrh	r3, [r7, #14]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	08010398 	.word	0x08010398

0800c3cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c3d6:	88fb      	ldrh	r3, [r7, #6]
 800c3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3dc:	d201      	bcs.n	800c3e2 <ff_wtoupper+0x16>
 800c3de:	4b3e      	ldr	r3, [pc, #248]	@ (800c4d8 <ff_wtoupper+0x10c>)
 800c3e0:	e000      	b.n	800c3e4 <ff_wtoupper+0x18>
 800c3e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4dc <ff_wtoupper+0x110>)
 800c3e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	1c9a      	adds	r2, r3, #2
 800c3ea:	617a      	str	r2, [r7, #20]
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c3f0:	8a7b      	ldrh	r3, [r7, #18]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d068      	beq.n	800c4c8 <ff_wtoupper+0xfc>
 800c3f6:	88fa      	ldrh	r2, [r7, #6]
 800c3f8:	8a7b      	ldrh	r3, [r7, #18]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d364      	bcc.n	800c4c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	1c9a      	adds	r2, r3, #2
 800c402:	617a      	str	r2, [r7, #20]
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	823b      	strh	r3, [r7, #16]
 800c408:	8a3b      	ldrh	r3, [r7, #16]
 800c40a:	0a1b      	lsrs	r3, r3, #8
 800c40c:	81fb      	strh	r3, [r7, #14]
 800c40e:	8a3b      	ldrh	r3, [r7, #16]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c414:	88fa      	ldrh	r2, [r7, #6]
 800c416:	8a79      	ldrh	r1, [r7, #18]
 800c418:	8a3b      	ldrh	r3, [r7, #16]
 800c41a:	440b      	add	r3, r1
 800c41c:	429a      	cmp	r2, r3
 800c41e:	da49      	bge.n	800c4b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c420:	89fb      	ldrh	r3, [r7, #14]
 800c422:	2b08      	cmp	r3, #8
 800c424:	d84f      	bhi.n	800c4c6 <ff_wtoupper+0xfa>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <ff_wtoupper+0x60>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c451 	.word	0x0800c451
 800c430:	0800c463 	.word	0x0800c463
 800c434:	0800c479 	.word	0x0800c479
 800c438:	0800c481 	.word	0x0800c481
 800c43c:	0800c489 	.word	0x0800c489
 800c440:	0800c491 	.word	0x0800c491
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c4a1 	.word	0x0800c4a1
 800c44c:	0800c4a9 	.word	0x0800c4a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c450:	88fa      	ldrh	r2, [r7, #6]
 800c452:	8a7b      	ldrh	r3, [r7, #18]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4413      	add	r3, r2
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	80fb      	strh	r3, [r7, #6]
 800c460:	e027      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c462:	88fa      	ldrh	r2, [r7, #6]
 800c464:	8a7b      	ldrh	r3, [r7, #18]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	b29b      	uxth	r3, r3
 800c470:	88fa      	ldrh	r2, [r7, #6]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	80fb      	strh	r3, [r7, #6]
 800c476:	e01c      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	3b10      	subs	r3, #16
 800c47c:	80fb      	strh	r3, [r7, #6]
 800c47e:	e018      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c480:	88fb      	ldrh	r3, [r7, #6]
 800c482:	3b20      	subs	r3, #32
 800c484:	80fb      	strh	r3, [r7, #6]
 800c486:	e014      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c488:	88fb      	ldrh	r3, [r7, #6]
 800c48a:	3b30      	subs	r3, #48	@ 0x30
 800c48c:	80fb      	strh	r3, [r7, #6]
 800c48e:	e010      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c490:	88fb      	ldrh	r3, [r7, #6]
 800c492:	3b1a      	subs	r3, #26
 800c494:	80fb      	strh	r3, [r7, #6]
 800c496:	e00c      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c498:	88fb      	ldrh	r3, [r7, #6]
 800c49a:	3308      	adds	r3, #8
 800c49c:	80fb      	strh	r3, [r7, #6]
 800c49e:	e008      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c4a0:	88fb      	ldrh	r3, [r7, #6]
 800c4a2:	3b50      	subs	r3, #80	@ 0x50
 800c4a4:	80fb      	strh	r3, [r7, #6]
 800c4a6:	e004      	b.n	800c4b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c4a8:	88fb      	ldrh	r3, [r7, #6]
 800c4aa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c4ae:	80fb      	strh	r3, [r7, #6]
 800c4b0:	bf00      	nop
			}
			break;
 800c4b2:	e008      	b.n	800c4c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c4b4:	89fb      	ldrh	r3, [r7, #14]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d195      	bne.n	800c3e6 <ff_wtoupper+0x1a>
 800c4ba:	8a3b      	ldrh	r3, [r7, #16]
 800c4bc:	005b      	lsls	r3, r3, #1
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c4c4:	e78f      	b.n	800c3e6 <ff_wtoupper+0x1a>
			break;
 800c4c6:	bf00      	nop
	}

	return chr;
 800c4c8:	88fb      	ldrh	r3, [r7, #6]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	08010498 	.word	0x08010498
 800c4dc:	0801068c 	.word	0x0801068c

0800c4e0 <rand>:
 800c4e0:	4b16      	ldr	r3, [pc, #88]	@ (800c53c <rand+0x5c>)
 800c4e2:	b510      	push	{r4, lr}
 800c4e4:	681c      	ldr	r4, [r3, #0]
 800c4e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4e8:	b9b3      	cbnz	r3, 800c518 <rand+0x38>
 800c4ea:	2018      	movs	r0, #24
 800c4ec:	f001 fdf6 	bl	800e0dc <malloc>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	6320      	str	r0, [r4, #48]	@ 0x30
 800c4f4:	b920      	cbnz	r0, 800c500 <rand+0x20>
 800c4f6:	4b12      	ldr	r3, [pc, #72]	@ (800c540 <rand+0x60>)
 800c4f8:	4812      	ldr	r0, [pc, #72]	@ (800c544 <rand+0x64>)
 800c4fa:	2152      	movs	r1, #82	@ 0x52
 800c4fc:	f000 ff38 	bl	800d370 <__assert_func>
 800c500:	4911      	ldr	r1, [pc, #68]	@ (800c548 <rand+0x68>)
 800c502:	4b12      	ldr	r3, [pc, #72]	@ (800c54c <rand+0x6c>)
 800c504:	e9c0 1300 	strd	r1, r3, [r0]
 800c508:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <rand+0x70>)
 800c50a:	6083      	str	r3, [r0, #8]
 800c50c:	230b      	movs	r3, #11
 800c50e:	8183      	strh	r3, [r0, #12]
 800c510:	2100      	movs	r1, #0
 800c512:	2001      	movs	r0, #1
 800c514:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c518:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c51a:	480e      	ldr	r0, [pc, #56]	@ (800c554 <rand+0x74>)
 800c51c:	690b      	ldr	r3, [r1, #16]
 800c51e:	694c      	ldr	r4, [r1, #20]
 800c520:	4a0d      	ldr	r2, [pc, #52]	@ (800c558 <rand+0x78>)
 800c522:	4358      	muls	r0, r3
 800c524:	fb02 0004 	mla	r0, r2, r4, r0
 800c528:	fba3 3202 	umull	r3, r2, r3, r2
 800c52c:	3301      	adds	r3, #1
 800c52e:	eb40 0002 	adc.w	r0, r0, r2
 800c532:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c536:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	200000ac 	.word	0x200000ac
 800c540:	08010748 	.word	0x08010748
 800c544:	0801075f 	.word	0x0801075f
 800c548:	abcd330e 	.word	0xabcd330e
 800c54c:	e66d1234 	.word	0xe66d1234
 800c550:	0005deec 	.word	0x0005deec
 800c554:	5851f42d 	.word	0x5851f42d
 800c558:	4c957f2d 	.word	0x4c957f2d

0800c55c <__cvt>:
 800c55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c560:	ec57 6b10 	vmov	r6, r7, d0
 800c564:	2f00      	cmp	r7, #0
 800c566:	460c      	mov	r4, r1
 800c568:	4619      	mov	r1, r3
 800c56a:	463b      	mov	r3, r7
 800c56c:	bfbb      	ittet	lt
 800c56e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c572:	461f      	movlt	r7, r3
 800c574:	2300      	movge	r3, #0
 800c576:	232d      	movlt	r3, #45	@ 0x2d
 800c578:	700b      	strb	r3, [r1, #0]
 800c57a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c57c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c580:	4691      	mov	r9, r2
 800c582:	f023 0820 	bic.w	r8, r3, #32
 800c586:	bfbc      	itt	lt
 800c588:	4632      	movlt	r2, r6
 800c58a:	4616      	movlt	r6, r2
 800c58c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c590:	d005      	beq.n	800c59e <__cvt+0x42>
 800c592:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c596:	d100      	bne.n	800c59a <__cvt+0x3e>
 800c598:	3401      	adds	r4, #1
 800c59a:	2102      	movs	r1, #2
 800c59c:	e000      	b.n	800c5a0 <__cvt+0x44>
 800c59e:	2103      	movs	r1, #3
 800c5a0:	ab03      	add	r3, sp, #12
 800c5a2:	9301      	str	r3, [sp, #4]
 800c5a4:	ab02      	add	r3, sp, #8
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	ec47 6b10 	vmov	d0, r6, r7
 800c5ac:	4653      	mov	r3, sl
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	f000 ff86 	bl	800d4c0 <_dtoa_r>
 800c5b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	d119      	bne.n	800c5f0 <__cvt+0x94>
 800c5bc:	f019 0f01 	tst.w	r9, #1
 800c5c0:	d00e      	beq.n	800c5e0 <__cvt+0x84>
 800c5c2:	eb00 0904 	add.w	r9, r0, r4
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5d2:	b108      	cbz	r0, 800c5d8 <__cvt+0x7c>
 800c5d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5d8:	2230      	movs	r2, #48	@ 0x30
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	454b      	cmp	r3, r9
 800c5de:	d31e      	bcc.n	800c61e <__cvt+0xc2>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e4:	1b5b      	subs	r3, r3, r5
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	b004      	add	sp, #16
 800c5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5f4:	eb00 0904 	add.w	r9, r0, r4
 800c5f8:	d1e5      	bne.n	800c5c6 <__cvt+0x6a>
 800c5fa:	7803      	ldrb	r3, [r0, #0]
 800c5fc:	2b30      	cmp	r3, #48	@ 0x30
 800c5fe:	d10a      	bne.n	800c616 <__cvt+0xba>
 800c600:	2200      	movs	r2, #0
 800c602:	2300      	movs	r3, #0
 800c604:	4630      	mov	r0, r6
 800c606:	4639      	mov	r1, r7
 800c608:	f7f4 fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800c60c:	b918      	cbnz	r0, 800c616 <__cvt+0xba>
 800c60e:	f1c4 0401 	rsb	r4, r4, #1
 800c612:	f8ca 4000 	str.w	r4, [sl]
 800c616:	f8da 3000 	ldr.w	r3, [sl]
 800c61a:	4499      	add	r9, r3
 800c61c:	e7d3      	b.n	800c5c6 <__cvt+0x6a>
 800c61e:	1c59      	adds	r1, r3, #1
 800c620:	9103      	str	r1, [sp, #12]
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	e7d9      	b.n	800c5da <__cvt+0x7e>

0800c626 <__exponent>:
 800c626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c628:	2900      	cmp	r1, #0
 800c62a:	bfba      	itte	lt
 800c62c:	4249      	neglt	r1, r1
 800c62e:	232d      	movlt	r3, #45	@ 0x2d
 800c630:	232b      	movge	r3, #43	@ 0x2b
 800c632:	2909      	cmp	r1, #9
 800c634:	7002      	strb	r2, [r0, #0]
 800c636:	7043      	strb	r3, [r0, #1]
 800c638:	dd29      	ble.n	800c68e <__exponent+0x68>
 800c63a:	f10d 0307 	add.w	r3, sp, #7
 800c63e:	461d      	mov	r5, r3
 800c640:	270a      	movs	r7, #10
 800c642:	461a      	mov	r2, r3
 800c644:	fbb1 f6f7 	udiv	r6, r1, r7
 800c648:	fb07 1416 	mls	r4, r7, r6, r1
 800c64c:	3430      	adds	r4, #48	@ 0x30
 800c64e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c652:	460c      	mov	r4, r1
 800c654:	2c63      	cmp	r4, #99	@ 0x63
 800c656:	f103 33ff 	add.w	r3, r3, #4294967295
 800c65a:	4631      	mov	r1, r6
 800c65c:	dcf1      	bgt.n	800c642 <__exponent+0x1c>
 800c65e:	3130      	adds	r1, #48	@ 0x30
 800c660:	1e94      	subs	r4, r2, #2
 800c662:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c666:	1c41      	adds	r1, r0, #1
 800c668:	4623      	mov	r3, r4
 800c66a:	42ab      	cmp	r3, r5
 800c66c:	d30a      	bcc.n	800c684 <__exponent+0x5e>
 800c66e:	f10d 0309 	add.w	r3, sp, #9
 800c672:	1a9b      	subs	r3, r3, r2
 800c674:	42ac      	cmp	r4, r5
 800c676:	bf88      	it	hi
 800c678:	2300      	movhi	r3, #0
 800c67a:	3302      	adds	r3, #2
 800c67c:	4403      	add	r3, r0
 800c67e:	1a18      	subs	r0, r3, r0
 800c680:	b003      	add	sp, #12
 800c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c684:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c688:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c68c:	e7ed      	b.n	800c66a <__exponent+0x44>
 800c68e:	2330      	movs	r3, #48	@ 0x30
 800c690:	3130      	adds	r1, #48	@ 0x30
 800c692:	7083      	strb	r3, [r0, #2]
 800c694:	70c1      	strb	r1, [r0, #3]
 800c696:	1d03      	adds	r3, r0, #4
 800c698:	e7f1      	b.n	800c67e <__exponent+0x58>
	...

0800c69c <_printf_float>:
 800c69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a0:	b08d      	sub	sp, #52	@ 0x34
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6a8:	4616      	mov	r6, r2
 800c6aa:	461f      	mov	r7, r3
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	f000 fddf 	bl	800d270 <_localeconv_r>
 800c6b2:	6803      	ldr	r3, [r0, #0]
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f3 fde2 	bl	8000280 <strlen>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6c4:	9005      	str	r0, [sp, #20]
 800c6c6:	3307      	adds	r3, #7
 800c6c8:	f023 0307 	bic.w	r3, r3, #7
 800c6cc:	f103 0208 	add.w	r2, r3, #8
 800c6d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6d4:	f8d4 b000 	ldr.w	fp, [r4]
 800c6d8:	f8c8 2000 	str.w	r2, [r8]
 800c6dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c6e4:	9307      	str	r3, [sp, #28]
 800c6e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c6ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6f2:	4b9c      	ldr	r3, [pc, #624]	@ (800c964 <_printf_float+0x2c8>)
 800c6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f8:	f7f4 fa20 	bl	8000b3c <__aeabi_dcmpun>
 800c6fc:	bb70      	cbnz	r0, 800c75c <_printf_float+0xc0>
 800c6fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c702:	4b98      	ldr	r3, [pc, #608]	@ (800c964 <_printf_float+0x2c8>)
 800c704:	f04f 32ff 	mov.w	r2, #4294967295
 800c708:	f7f4 f9fa 	bl	8000b00 <__aeabi_dcmple>
 800c70c:	bb30      	cbnz	r0, 800c75c <_printf_float+0xc0>
 800c70e:	2200      	movs	r2, #0
 800c710:	2300      	movs	r3, #0
 800c712:	4640      	mov	r0, r8
 800c714:	4649      	mov	r1, r9
 800c716:	f7f4 f9e9 	bl	8000aec <__aeabi_dcmplt>
 800c71a:	b110      	cbz	r0, 800c722 <_printf_float+0x86>
 800c71c:	232d      	movs	r3, #45	@ 0x2d
 800c71e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c722:	4a91      	ldr	r2, [pc, #580]	@ (800c968 <_printf_float+0x2cc>)
 800c724:	4b91      	ldr	r3, [pc, #580]	@ (800c96c <_printf_float+0x2d0>)
 800c726:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c72a:	bf94      	ite	ls
 800c72c:	4690      	movls	r8, r2
 800c72e:	4698      	movhi	r8, r3
 800c730:	2303      	movs	r3, #3
 800c732:	6123      	str	r3, [r4, #16]
 800c734:	f02b 0304 	bic.w	r3, fp, #4
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	f04f 0900 	mov.w	r9, #0
 800c73e:	9700      	str	r7, [sp, #0]
 800c740:	4633      	mov	r3, r6
 800c742:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c744:	4621      	mov	r1, r4
 800c746:	4628      	mov	r0, r5
 800c748:	f000 f9d2 	bl	800caf0 <_printf_common>
 800c74c:	3001      	adds	r0, #1
 800c74e:	f040 808d 	bne.w	800c86c <_printf_float+0x1d0>
 800c752:	f04f 30ff 	mov.w	r0, #4294967295
 800c756:	b00d      	add	sp, #52	@ 0x34
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	4642      	mov	r2, r8
 800c75e:	464b      	mov	r3, r9
 800c760:	4640      	mov	r0, r8
 800c762:	4649      	mov	r1, r9
 800c764:	f7f4 f9ea 	bl	8000b3c <__aeabi_dcmpun>
 800c768:	b140      	cbz	r0, 800c77c <_printf_float+0xe0>
 800c76a:	464b      	mov	r3, r9
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfbc      	itt	lt
 800c770:	232d      	movlt	r3, #45	@ 0x2d
 800c772:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c776:	4a7e      	ldr	r2, [pc, #504]	@ (800c970 <_printf_float+0x2d4>)
 800c778:	4b7e      	ldr	r3, [pc, #504]	@ (800c974 <_printf_float+0x2d8>)
 800c77a:	e7d4      	b.n	800c726 <_printf_float+0x8a>
 800c77c:	6863      	ldr	r3, [r4, #4]
 800c77e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c782:	9206      	str	r2, [sp, #24]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	d13b      	bne.n	800c800 <_printf_float+0x164>
 800c788:	2306      	movs	r3, #6
 800c78a:	6063      	str	r3, [r4, #4]
 800c78c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c790:	2300      	movs	r3, #0
 800c792:	6022      	str	r2, [r4, #0]
 800c794:	9303      	str	r3, [sp, #12]
 800c796:	ab0a      	add	r3, sp, #40	@ 0x28
 800c798:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c79c:	ab09      	add	r3, sp, #36	@ 0x24
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	6861      	ldr	r1, [r4, #4]
 800c7a2:	ec49 8b10 	vmov	d0, r8, r9
 800c7a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f7ff fed6 	bl	800c55c <__cvt>
 800c7b0:	9b06      	ldr	r3, [sp, #24]
 800c7b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7b4:	2b47      	cmp	r3, #71	@ 0x47
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	d129      	bne.n	800c80e <_printf_float+0x172>
 800c7ba:	1cc8      	adds	r0, r1, #3
 800c7bc:	db02      	blt.n	800c7c4 <_printf_float+0x128>
 800c7be:	6863      	ldr	r3, [r4, #4]
 800c7c0:	4299      	cmp	r1, r3
 800c7c2:	dd41      	ble.n	800c848 <_printf_float+0x1ac>
 800c7c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7c8:	fa5f fa8a 	uxtb.w	sl, sl
 800c7cc:	3901      	subs	r1, #1
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7d6:	f7ff ff26 	bl	800c626 <__exponent>
 800c7da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7dc:	1813      	adds	r3, r2, r0
 800c7de:	2a01      	cmp	r2, #1
 800c7e0:	4681      	mov	r9, r0
 800c7e2:	6123      	str	r3, [r4, #16]
 800c7e4:	dc02      	bgt.n	800c7ec <_printf_float+0x150>
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	07d2      	lsls	r2, r2, #31
 800c7ea:	d501      	bpl.n	800c7f0 <_printf_float+0x154>
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	6123      	str	r3, [r4, #16]
 800c7f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d0a2      	beq.n	800c73e <_printf_float+0xa2>
 800c7f8:	232d      	movs	r3, #45	@ 0x2d
 800c7fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7fe:	e79e      	b.n	800c73e <_printf_float+0xa2>
 800c800:	9a06      	ldr	r2, [sp, #24]
 800c802:	2a47      	cmp	r2, #71	@ 0x47
 800c804:	d1c2      	bne.n	800c78c <_printf_float+0xf0>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1c0      	bne.n	800c78c <_printf_float+0xf0>
 800c80a:	2301      	movs	r3, #1
 800c80c:	e7bd      	b.n	800c78a <_printf_float+0xee>
 800c80e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c812:	d9db      	bls.n	800c7cc <_printf_float+0x130>
 800c814:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c818:	d118      	bne.n	800c84c <_printf_float+0x1b0>
 800c81a:	2900      	cmp	r1, #0
 800c81c:	6863      	ldr	r3, [r4, #4]
 800c81e:	dd0b      	ble.n	800c838 <_printf_float+0x19c>
 800c820:	6121      	str	r1, [r4, #16]
 800c822:	b913      	cbnz	r3, 800c82a <_printf_float+0x18e>
 800c824:	6822      	ldr	r2, [r4, #0]
 800c826:	07d0      	lsls	r0, r2, #31
 800c828:	d502      	bpl.n	800c830 <_printf_float+0x194>
 800c82a:	3301      	adds	r3, #1
 800c82c:	440b      	add	r3, r1
 800c82e:	6123      	str	r3, [r4, #16]
 800c830:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c832:	f04f 0900 	mov.w	r9, #0
 800c836:	e7db      	b.n	800c7f0 <_printf_float+0x154>
 800c838:	b913      	cbnz	r3, 800c840 <_printf_float+0x1a4>
 800c83a:	6822      	ldr	r2, [r4, #0]
 800c83c:	07d2      	lsls	r2, r2, #31
 800c83e:	d501      	bpl.n	800c844 <_printf_float+0x1a8>
 800c840:	3302      	adds	r3, #2
 800c842:	e7f4      	b.n	800c82e <_printf_float+0x192>
 800c844:	2301      	movs	r3, #1
 800c846:	e7f2      	b.n	800c82e <_printf_float+0x192>
 800c848:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c84e:	4299      	cmp	r1, r3
 800c850:	db05      	blt.n	800c85e <_printf_float+0x1c2>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	6121      	str	r1, [r4, #16]
 800c856:	07d8      	lsls	r0, r3, #31
 800c858:	d5ea      	bpl.n	800c830 <_printf_float+0x194>
 800c85a:	1c4b      	adds	r3, r1, #1
 800c85c:	e7e7      	b.n	800c82e <_printf_float+0x192>
 800c85e:	2900      	cmp	r1, #0
 800c860:	bfd4      	ite	le
 800c862:	f1c1 0202 	rsble	r2, r1, #2
 800c866:	2201      	movgt	r2, #1
 800c868:	4413      	add	r3, r2
 800c86a:	e7e0      	b.n	800c82e <_printf_float+0x192>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	055a      	lsls	r2, r3, #21
 800c870:	d407      	bmi.n	800c882 <_printf_float+0x1e6>
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	4642      	mov	r2, r8
 800c876:	4631      	mov	r1, r6
 800c878:	4628      	mov	r0, r5
 800c87a:	47b8      	blx	r7
 800c87c:	3001      	adds	r0, #1
 800c87e:	d12b      	bne.n	800c8d8 <_printf_float+0x23c>
 800c880:	e767      	b.n	800c752 <_printf_float+0xb6>
 800c882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c886:	f240 80dd 	bls.w	800ca44 <_printf_float+0x3a8>
 800c88a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c88e:	2200      	movs	r2, #0
 800c890:	2300      	movs	r3, #0
 800c892:	f7f4 f921 	bl	8000ad8 <__aeabi_dcmpeq>
 800c896:	2800      	cmp	r0, #0
 800c898:	d033      	beq.n	800c902 <_printf_float+0x266>
 800c89a:	4a37      	ldr	r2, [pc, #220]	@ (800c978 <_printf_float+0x2dc>)
 800c89c:	2301      	movs	r3, #1
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f43f af54 	beq.w	800c752 <_printf_float+0xb6>
 800c8aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8ae:	4543      	cmp	r3, r8
 800c8b0:	db02      	blt.n	800c8b8 <_printf_float+0x21c>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	07d8      	lsls	r0, r3, #31
 800c8b6:	d50f      	bpl.n	800c8d8 <_printf_float+0x23c>
 800c8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8bc:	4631      	mov	r1, r6
 800c8be:	4628      	mov	r0, r5
 800c8c0:	47b8      	blx	r7
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	f43f af45 	beq.w	800c752 <_printf_float+0xb6>
 800c8c8:	f04f 0900 	mov.w	r9, #0
 800c8cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8d0:	f104 0a1a 	add.w	sl, r4, #26
 800c8d4:	45c8      	cmp	r8, r9
 800c8d6:	dc09      	bgt.n	800c8ec <_printf_float+0x250>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	079b      	lsls	r3, r3, #30
 800c8dc:	f100 8103 	bmi.w	800cae6 <_printf_float+0x44a>
 800c8e0:	68e0      	ldr	r0, [r4, #12]
 800c8e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8e4:	4298      	cmp	r0, r3
 800c8e6:	bfb8      	it	lt
 800c8e8:	4618      	movlt	r0, r3
 800c8ea:	e734      	b.n	800c756 <_printf_float+0xba>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	47b8      	blx	r7
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	f43f af2b 	beq.w	800c752 <_printf_float+0xb6>
 800c8fc:	f109 0901 	add.w	r9, r9, #1
 800c900:	e7e8      	b.n	800c8d4 <_printf_float+0x238>
 800c902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c904:	2b00      	cmp	r3, #0
 800c906:	dc39      	bgt.n	800c97c <_printf_float+0x2e0>
 800c908:	4a1b      	ldr	r2, [pc, #108]	@ (800c978 <_printf_float+0x2dc>)
 800c90a:	2301      	movs	r3, #1
 800c90c:	4631      	mov	r1, r6
 800c90e:	4628      	mov	r0, r5
 800c910:	47b8      	blx	r7
 800c912:	3001      	adds	r0, #1
 800c914:	f43f af1d 	beq.w	800c752 <_printf_float+0xb6>
 800c918:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c91c:	ea59 0303 	orrs.w	r3, r9, r3
 800c920:	d102      	bne.n	800c928 <_printf_float+0x28c>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	07d9      	lsls	r1, r3, #31
 800c926:	d5d7      	bpl.n	800c8d8 <_printf_float+0x23c>
 800c928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af0d 	beq.w	800c752 <_printf_float+0xb6>
 800c938:	f04f 0a00 	mov.w	sl, #0
 800c93c:	f104 0b1a 	add.w	fp, r4, #26
 800c940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c942:	425b      	negs	r3, r3
 800c944:	4553      	cmp	r3, sl
 800c946:	dc01      	bgt.n	800c94c <_printf_float+0x2b0>
 800c948:	464b      	mov	r3, r9
 800c94a:	e793      	b.n	800c874 <_printf_float+0x1d8>
 800c94c:	2301      	movs	r3, #1
 800c94e:	465a      	mov	r2, fp
 800c950:	4631      	mov	r1, r6
 800c952:	4628      	mov	r0, r5
 800c954:	47b8      	blx	r7
 800c956:	3001      	adds	r0, #1
 800c958:	f43f aefb 	beq.w	800c752 <_printf_float+0xb6>
 800c95c:	f10a 0a01 	add.w	sl, sl, #1
 800c960:	e7ee      	b.n	800c940 <_printf_float+0x2a4>
 800c962:	bf00      	nop
 800c964:	7fefffff 	.word	0x7fefffff
 800c968:	080107b7 	.word	0x080107b7
 800c96c:	080107bb 	.word	0x080107bb
 800c970:	080107bf 	.word	0x080107bf
 800c974:	080107c3 	.word	0x080107c3
 800c978:	080107c7 	.word	0x080107c7
 800c97c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c97e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c982:	4553      	cmp	r3, sl
 800c984:	bfa8      	it	ge
 800c986:	4653      	movge	r3, sl
 800c988:	2b00      	cmp	r3, #0
 800c98a:	4699      	mov	r9, r3
 800c98c:	dc36      	bgt.n	800c9fc <_printf_float+0x360>
 800c98e:	f04f 0b00 	mov.w	fp, #0
 800c992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c996:	f104 021a 	add.w	r2, r4, #26
 800c99a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c99c:	9306      	str	r3, [sp, #24]
 800c99e:	eba3 0309 	sub.w	r3, r3, r9
 800c9a2:	455b      	cmp	r3, fp
 800c9a4:	dc31      	bgt.n	800ca0a <_printf_float+0x36e>
 800c9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a8:	459a      	cmp	sl, r3
 800c9aa:	dc3a      	bgt.n	800ca22 <_printf_float+0x386>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	07da      	lsls	r2, r3, #31
 800c9b0:	d437      	bmi.n	800ca22 <_printf_float+0x386>
 800c9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b4:	ebaa 0903 	sub.w	r9, sl, r3
 800c9b8:	9b06      	ldr	r3, [sp, #24]
 800c9ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c9be:	4599      	cmp	r9, r3
 800c9c0:	bfa8      	it	ge
 800c9c2:	4699      	movge	r9, r3
 800c9c4:	f1b9 0f00 	cmp.w	r9, #0
 800c9c8:	dc33      	bgt.n	800ca32 <_printf_float+0x396>
 800c9ca:	f04f 0800 	mov.w	r8, #0
 800c9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9d2:	f104 0b1a 	add.w	fp, r4, #26
 800c9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d8:	ebaa 0303 	sub.w	r3, sl, r3
 800c9dc:	eba3 0309 	sub.w	r3, r3, r9
 800c9e0:	4543      	cmp	r3, r8
 800c9e2:	f77f af79 	ble.w	800c8d8 <_printf_float+0x23c>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	465a      	mov	r2, fp
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	f43f aeae 	beq.w	800c752 <_printf_float+0xb6>
 800c9f6:	f108 0801 	add.w	r8, r8, #1
 800c9fa:	e7ec      	b.n	800c9d6 <_printf_float+0x33a>
 800c9fc:	4642      	mov	r2, r8
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4628      	mov	r0, r5
 800ca02:	47b8      	blx	r7
 800ca04:	3001      	adds	r0, #1
 800ca06:	d1c2      	bne.n	800c98e <_printf_float+0x2f2>
 800ca08:	e6a3      	b.n	800c752 <_printf_float+0xb6>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4628      	mov	r0, r5
 800ca10:	9206      	str	r2, [sp, #24]
 800ca12:	47b8      	blx	r7
 800ca14:	3001      	adds	r0, #1
 800ca16:	f43f ae9c 	beq.w	800c752 <_printf_float+0xb6>
 800ca1a:	9a06      	ldr	r2, [sp, #24]
 800ca1c:	f10b 0b01 	add.w	fp, fp, #1
 800ca20:	e7bb      	b.n	800c99a <_printf_float+0x2fe>
 800ca22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca26:	4631      	mov	r1, r6
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b8      	blx	r7
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	d1c0      	bne.n	800c9b2 <_printf_float+0x316>
 800ca30:	e68f      	b.n	800c752 <_printf_float+0xb6>
 800ca32:	9a06      	ldr	r2, [sp, #24]
 800ca34:	464b      	mov	r3, r9
 800ca36:	4442      	add	r2, r8
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d1c3      	bne.n	800c9ca <_printf_float+0x32e>
 800ca42:	e686      	b.n	800c752 <_printf_float+0xb6>
 800ca44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca48:	f1ba 0f01 	cmp.w	sl, #1
 800ca4c:	dc01      	bgt.n	800ca52 <_printf_float+0x3b6>
 800ca4e:	07db      	lsls	r3, r3, #31
 800ca50:	d536      	bpl.n	800cac0 <_printf_float+0x424>
 800ca52:	2301      	movs	r3, #1
 800ca54:	4642      	mov	r2, r8
 800ca56:	4631      	mov	r1, r6
 800ca58:	4628      	mov	r0, r5
 800ca5a:	47b8      	blx	r7
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	f43f ae78 	beq.w	800c752 <_printf_float+0xb6>
 800ca62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca66:	4631      	mov	r1, r6
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b8      	blx	r7
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	f43f ae70 	beq.w	800c752 <_printf_float+0xb6>
 800ca72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca76:	2200      	movs	r2, #0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca7e:	f7f4 f82b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca82:	b9c0      	cbnz	r0, 800cab6 <_printf_float+0x41a>
 800ca84:	4653      	mov	r3, sl
 800ca86:	f108 0201 	add.w	r2, r8, #1
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	47b8      	blx	r7
 800ca90:	3001      	adds	r0, #1
 800ca92:	d10c      	bne.n	800caae <_printf_float+0x412>
 800ca94:	e65d      	b.n	800c752 <_printf_float+0xb6>
 800ca96:	2301      	movs	r3, #1
 800ca98:	465a      	mov	r2, fp
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	47b8      	blx	r7
 800caa0:	3001      	adds	r0, #1
 800caa2:	f43f ae56 	beq.w	800c752 <_printf_float+0xb6>
 800caa6:	f108 0801 	add.w	r8, r8, #1
 800caaa:	45d0      	cmp	r8, sl
 800caac:	dbf3      	blt.n	800ca96 <_printf_float+0x3fa>
 800caae:	464b      	mov	r3, r9
 800cab0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cab4:	e6df      	b.n	800c876 <_printf_float+0x1da>
 800cab6:	f04f 0800 	mov.w	r8, #0
 800caba:	f104 0b1a 	add.w	fp, r4, #26
 800cabe:	e7f4      	b.n	800caaa <_printf_float+0x40e>
 800cac0:	2301      	movs	r3, #1
 800cac2:	4642      	mov	r2, r8
 800cac4:	e7e1      	b.n	800ca8a <_printf_float+0x3ee>
 800cac6:	2301      	movs	r3, #1
 800cac8:	464a      	mov	r2, r9
 800caca:	4631      	mov	r1, r6
 800cacc:	4628      	mov	r0, r5
 800cace:	47b8      	blx	r7
 800cad0:	3001      	adds	r0, #1
 800cad2:	f43f ae3e 	beq.w	800c752 <_printf_float+0xb6>
 800cad6:	f108 0801 	add.w	r8, r8, #1
 800cada:	68e3      	ldr	r3, [r4, #12]
 800cadc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cade:	1a5b      	subs	r3, r3, r1
 800cae0:	4543      	cmp	r3, r8
 800cae2:	dcf0      	bgt.n	800cac6 <_printf_float+0x42a>
 800cae4:	e6fc      	b.n	800c8e0 <_printf_float+0x244>
 800cae6:	f04f 0800 	mov.w	r8, #0
 800caea:	f104 0919 	add.w	r9, r4, #25
 800caee:	e7f4      	b.n	800cada <_printf_float+0x43e>

0800caf0 <_printf_common>:
 800caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	4616      	mov	r6, r2
 800caf6:	4698      	mov	r8, r3
 800caf8:	688a      	ldr	r2, [r1, #8]
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	bfb8      	it	lt
 800cb04:	4613      	movlt	r3, r2
 800cb06:	6033      	str	r3, [r6, #0]
 800cb08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	460c      	mov	r4, r1
 800cb10:	b10a      	cbz	r2, 800cb16 <_printf_common+0x26>
 800cb12:	3301      	adds	r3, #1
 800cb14:	6033      	str	r3, [r6, #0]
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	0699      	lsls	r1, r3, #26
 800cb1a:	bf42      	ittt	mi
 800cb1c:	6833      	ldrmi	r3, [r6, #0]
 800cb1e:	3302      	addmi	r3, #2
 800cb20:	6033      	strmi	r3, [r6, #0]
 800cb22:	6825      	ldr	r5, [r4, #0]
 800cb24:	f015 0506 	ands.w	r5, r5, #6
 800cb28:	d106      	bne.n	800cb38 <_printf_common+0x48>
 800cb2a:	f104 0a19 	add.w	sl, r4, #25
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	6832      	ldr	r2, [r6, #0]
 800cb32:	1a9b      	subs	r3, r3, r2
 800cb34:	42ab      	cmp	r3, r5
 800cb36:	dc26      	bgt.n	800cb86 <_printf_common+0x96>
 800cb38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb3c:	6822      	ldr	r2, [r4, #0]
 800cb3e:	3b00      	subs	r3, #0
 800cb40:	bf18      	it	ne
 800cb42:	2301      	movne	r3, #1
 800cb44:	0692      	lsls	r2, r2, #26
 800cb46:	d42b      	bmi.n	800cba0 <_printf_common+0xb0>
 800cb48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	4638      	mov	r0, r7
 800cb50:	47c8      	blx	r9
 800cb52:	3001      	adds	r0, #1
 800cb54:	d01e      	beq.n	800cb94 <_printf_common+0xa4>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	6922      	ldr	r2, [r4, #16]
 800cb5a:	f003 0306 	and.w	r3, r3, #6
 800cb5e:	2b04      	cmp	r3, #4
 800cb60:	bf02      	ittt	eq
 800cb62:	68e5      	ldreq	r5, [r4, #12]
 800cb64:	6833      	ldreq	r3, [r6, #0]
 800cb66:	1aed      	subeq	r5, r5, r3
 800cb68:	68a3      	ldr	r3, [r4, #8]
 800cb6a:	bf0c      	ite	eq
 800cb6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb70:	2500      	movne	r5, #0
 800cb72:	4293      	cmp	r3, r2
 800cb74:	bfc4      	itt	gt
 800cb76:	1a9b      	subgt	r3, r3, r2
 800cb78:	18ed      	addgt	r5, r5, r3
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	341a      	adds	r4, #26
 800cb7e:	42b5      	cmp	r5, r6
 800cb80:	d11a      	bne.n	800cbb8 <_printf_common+0xc8>
 800cb82:	2000      	movs	r0, #0
 800cb84:	e008      	b.n	800cb98 <_printf_common+0xa8>
 800cb86:	2301      	movs	r3, #1
 800cb88:	4652      	mov	r2, sl
 800cb8a:	4641      	mov	r1, r8
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	47c8      	blx	r9
 800cb90:	3001      	adds	r0, #1
 800cb92:	d103      	bne.n	800cb9c <_printf_common+0xac>
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	e7c6      	b.n	800cb2e <_printf_common+0x3e>
 800cba0:	18e1      	adds	r1, r4, r3
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	2030      	movs	r0, #48	@ 0x30
 800cba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbaa:	4422      	add	r2, r4
 800cbac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbb4:	3302      	adds	r3, #2
 800cbb6:	e7c7      	b.n	800cb48 <_printf_common+0x58>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	4622      	mov	r2, r4
 800cbbc:	4641      	mov	r1, r8
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	47c8      	blx	r9
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d0e6      	beq.n	800cb94 <_printf_common+0xa4>
 800cbc6:	3601      	adds	r6, #1
 800cbc8:	e7d9      	b.n	800cb7e <_printf_common+0x8e>
	...

0800cbcc <_printf_i>:
 800cbcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd0:	7e0f      	ldrb	r7, [r1, #24]
 800cbd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbd4:	2f78      	cmp	r7, #120	@ 0x78
 800cbd6:	4691      	mov	r9, r2
 800cbd8:	4680      	mov	r8, r0
 800cbda:	460c      	mov	r4, r1
 800cbdc:	469a      	mov	sl, r3
 800cbde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbe2:	d807      	bhi.n	800cbf4 <_printf_i+0x28>
 800cbe4:	2f62      	cmp	r7, #98	@ 0x62
 800cbe6:	d80a      	bhi.n	800cbfe <_printf_i+0x32>
 800cbe8:	2f00      	cmp	r7, #0
 800cbea:	f000 80d2 	beq.w	800cd92 <_printf_i+0x1c6>
 800cbee:	2f58      	cmp	r7, #88	@ 0x58
 800cbf0:	f000 80b9 	beq.w	800cd66 <_printf_i+0x19a>
 800cbf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbfc:	e03a      	b.n	800cc74 <_printf_i+0xa8>
 800cbfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc02:	2b15      	cmp	r3, #21
 800cc04:	d8f6      	bhi.n	800cbf4 <_printf_i+0x28>
 800cc06:	a101      	add	r1, pc, #4	@ (adr r1, 800cc0c <_printf_i+0x40>)
 800cc08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc0c:	0800cc65 	.word	0x0800cc65
 800cc10:	0800cc79 	.word	0x0800cc79
 800cc14:	0800cbf5 	.word	0x0800cbf5
 800cc18:	0800cbf5 	.word	0x0800cbf5
 800cc1c:	0800cbf5 	.word	0x0800cbf5
 800cc20:	0800cbf5 	.word	0x0800cbf5
 800cc24:	0800cc79 	.word	0x0800cc79
 800cc28:	0800cbf5 	.word	0x0800cbf5
 800cc2c:	0800cbf5 	.word	0x0800cbf5
 800cc30:	0800cbf5 	.word	0x0800cbf5
 800cc34:	0800cbf5 	.word	0x0800cbf5
 800cc38:	0800cd79 	.word	0x0800cd79
 800cc3c:	0800cca3 	.word	0x0800cca3
 800cc40:	0800cd33 	.word	0x0800cd33
 800cc44:	0800cbf5 	.word	0x0800cbf5
 800cc48:	0800cbf5 	.word	0x0800cbf5
 800cc4c:	0800cd9b 	.word	0x0800cd9b
 800cc50:	0800cbf5 	.word	0x0800cbf5
 800cc54:	0800cca3 	.word	0x0800cca3
 800cc58:	0800cbf5 	.word	0x0800cbf5
 800cc5c:	0800cbf5 	.word	0x0800cbf5
 800cc60:	0800cd3b 	.word	0x0800cd3b
 800cc64:	6833      	ldr	r3, [r6, #0]
 800cc66:	1d1a      	adds	r2, r3, #4
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6032      	str	r2, [r6, #0]
 800cc6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc74:	2301      	movs	r3, #1
 800cc76:	e09d      	b.n	800cdb4 <_printf_i+0x1e8>
 800cc78:	6833      	ldr	r3, [r6, #0]
 800cc7a:	6820      	ldr	r0, [r4, #0]
 800cc7c:	1d19      	adds	r1, r3, #4
 800cc7e:	6031      	str	r1, [r6, #0]
 800cc80:	0606      	lsls	r6, r0, #24
 800cc82:	d501      	bpl.n	800cc88 <_printf_i+0xbc>
 800cc84:	681d      	ldr	r5, [r3, #0]
 800cc86:	e003      	b.n	800cc90 <_printf_i+0xc4>
 800cc88:	0645      	lsls	r5, r0, #25
 800cc8a:	d5fb      	bpl.n	800cc84 <_printf_i+0xb8>
 800cc8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc90:	2d00      	cmp	r5, #0
 800cc92:	da03      	bge.n	800cc9c <_printf_i+0xd0>
 800cc94:	232d      	movs	r3, #45	@ 0x2d
 800cc96:	426d      	negs	r5, r5
 800cc98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc9c:	4859      	ldr	r0, [pc, #356]	@ (800ce04 <_printf_i+0x238>)
 800cc9e:	230a      	movs	r3, #10
 800cca0:	e011      	b.n	800ccc6 <_printf_i+0xfa>
 800cca2:	6821      	ldr	r1, [r4, #0]
 800cca4:	6833      	ldr	r3, [r6, #0]
 800cca6:	0608      	lsls	r0, r1, #24
 800cca8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccac:	d402      	bmi.n	800ccb4 <_printf_i+0xe8>
 800ccae:	0649      	lsls	r1, r1, #25
 800ccb0:	bf48      	it	mi
 800ccb2:	b2ad      	uxthmi	r5, r5
 800ccb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccb6:	4853      	ldr	r0, [pc, #332]	@ (800ce04 <_printf_i+0x238>)
 800ccb8:	6033      	str	r3, [r6, #0]
 800ccba:	bf14      	ite	ne
 800ccbc:	230a      	movne	r3, #10
 800ccbe:	2308      	moveq	r3, #8
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccc6:	6866      	ldr	r6, [r4, #4]
 800ccc8:	60a6      	str	r6, [r4, #8]
 800ccca:	2e00      	cmp	r6, #0
 800cccc:	bfa2      	ittt	ge
 800ccce:	6821      	ldrge	r1, [r4, #0]
 800ccd0:	f021 0104 	bicge.w	r1, r1, #4
 800ccd4:	6021      	strge	r1, [r4, #0]
 800ccd6:	b90d      	cbnz	r5, 800ccdc <_printf_i+0x110>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	d04b      	beq.n	800cd74 <_printf_i+0x1a8>
 800ccdc:	4616      	mov	r6, r2
 800ccde:	fbb5 f1f3 	udiv	r1, r5, r3
 800cce2:	fb03 5711 	mls	r7, r3, r1, r5
 800cce6:	5dc7      	ldrb	r7, [r0, r7]
 800cce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccec:	462f      	mov	r7, r5
 800ccee:	42bb      	cmp	r3, r7
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	d9f4      	bls.n	800ccde <_printf_i+0x112>
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d10b      	bne.n	800cd10 <_printf_i+0x144>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	07df      	lsls	r7, r3, #31
 800ccfc:	d508      	bpl.n	800cd10 <_printf_i+0x144>
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	6861      	ldr	r1, [r4, #4]
 800cd02:	4299      	cmp	r1, r3
 800cd04:	bfde      	ittt	le
 800cd06:	2330      	movle	r3, #48	@ 0x30
 800cd08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd10:	1b92      	subs	r2, r2, r6
 800cd12:	6122      	str	r2, [r4, #16]
 800cd14:	f8cd a000 	str.w	sl, [sp]
 800cd18:	464b      	mov	r3, r9
 800cd1a:	aa03      	add	r2, sp, #12
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4640      	mov	r0, r8
 800cd20:	f7ff fee6 	bl	800caf0 <_printf_common>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d14a      	bne.n	800cdbe <_printf_i+0x1f2>
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2c:	b004      	add	sp, #16
 800cd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	4833      	ldr	r0, [pc, #204]	@ (800ce08 <_printf_i+0x23c>)
 800cd3c:	2778      	movs	r7, #120	@ 0x78
 800cd3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	6831      	ldr	r1, [r6, #0]
 800cd46:	061f      	lsls	r7, r3, #24
 800cd48:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd4c:	d402      	bmi.n	800cd54 <_printf_i+0x188>
 800cd4e:	065f      	lsls	r7, r3, #25
 800cd50:	bf48      	it	mi
 800cd52:	b2ad      	uxthmi	r5, r5
 800cd54:	6031      	str	r1, [r6, #0]
 800cd56:	07d9      	lsls	r1, r3, #31
 800cd58:	bf44      	itt	mi
 800cd5a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd5e:	6023      	strmi	r3, [r4, #0]
 800cd60:	b11d      	cbz	r5, 800cd6a <_printf_i+0x19e>
 800cd62:	2310      	movs	r3, #16
 800cd64:	e7ac      	b.n	800ccc0 <_printf_i+0xf4>
 800cd66:	4827      	ldr	r0, [pc, #156]	@ (800ce04 <_printf_i+0x238>)
 800cd68:	e7e9      	b.n	800cd3e <_printf_i+0x172>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	f023 0320 	bic.w	r3, r3, #32
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	e7f6      	b.n	800cd62 <_printf_i+0x196>
 800cd74:	4616      	mov	r6, r2
 800cd76:	e7bd      	b.n	800ccf4 <_printf_i+0x128>
 800cd78:	6833      	ldr	r3, [r6, #0]
 800cd7a:	6825      	ldr	r5, [r4, #0]
 800cd7c:	6961      	ldr	r1, [r4, #20]
 800cd7e:	1d18      	adds	r0, r3, #4
 800cd80:	6030      	str	r0, [r6, #0]
 800cd82:	062e      	lsls	r6, r5, #24
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	d501      	bpl.n	800cd8c <_printf_i+0x1c0>
 800cd88:	6019      	str	r1, [r3, #0]
 800cd8a:	e002      	b.n	800cd92 <_printf_i+0x1c6>
 800cd8c:	0668      	lsls	r0, r5, #25
 800cd8e:	d5fb      	bpl.n	800cd88 <_printf_i+0x1bc>
 800cd90:	8019      	strh	r1, [r3, #0]
 800cd92:	2300      	movs	r3, #0
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	4616      	mov	r6, r2
 800cd98:	e7bc      	b.n	800cd14 <_printf_i+0x148>
 800cd9a:	6833      	ldr	r3, [r6, #0]
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	6032      	str	r2, [r6, #0]
 800cda0:	681e      	ldr	r6, [r3, #0]
 800cda2:	6862      	ldr	r2, [r4, #4]
 800cda4:	2100      	movs	r1, #0
 800cda6:	4630      	mov	r0, r6
 800cda8:	f7f3 fa1a 	bl	80001e0 <memchr>
 800cdac:	b108      	cbz	r0, 800cdb2 <_printf_i+0x1e6>
 800cdae:	1b80      	subs	r0, r0, r6
 800cdb0:	6060      	str	r0, [r4, #4]
 800cdb2:	6863      	ldr	r3, [r4, #4]
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdbc:	e7aa      	b.n	800cd14 <_printf_i+0x148>
 800cdbe:	6923      	ldr	r3, [r4, #16]
 800cdc0:	4632      	mov	r2, r6
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	47d0      	blx	sl
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d0ad      	beq.n	800cd28 <_printf_i+0x15c>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	079b      	lsls	r3, r3, #30
 800cdd0:	d413      	bmi.n	800cdfa <_printf_i+0x22e>
 800cdd2:	68e0      	ldr	r0, [r4, #12]
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	4298      	cmp	r0, r3
 800cdd8:	bfb8      	it	lt
 800cdda:	4618      	movlt	r0, r3
 800cddc:	e7a6      	b.n	800cd2c <_printf_i+0x160>
 800cdde:	2301      	movs	r3, #1
 800cde0:	4632      	mov	r2, r6
 800cde2:	4649      	mov	r1, r9
 800cde4:	4640      	mov	r0, r8
 800cde6:	47d0      	blx	sl
 800cde8:	3001      	adds	r0, #1
 800cdea:	d09d      	beq.n	800cd28 <_printf_i+0x15c>
 800cdec:	3501      	adds	r5, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	9903      	ldr	r1, [sp, #12]
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	42ab      	cmp	r3, r5
 800cdf6:	dcf2      	bgt.n	800cdde <_printf_i+0x212>
 800cdf8:	e7eb      	b.n	800cdd2 <_printf_i+0x206>
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	f104 0619 	add.w	r6, r4, #25
 800ce00:	e7f5      	b.n	800cdee <_printf_i+0x222>
 800ce02:	bf00      	nop
 800ce04:	080107c9 	.word	0x080107c9
 800ce08:	080107da 	.word	0x080107da

0800ce0c <std>:
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	e9c0 3300 	strd	r3, r3, [r0]
 800ce16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce1a:	6083      	str	r3, [r0, #8]
 800ce1c:	8181      	strh	r1, [r0, #12]
 800ce1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce20:	81c2      	strh	r2, [r0, #14]
 800ce22:	6183      	str	r3, [r0, #24]
 800ce24:	4619      	mov	r1, r3
 800ce26:	2208      	movs	r2, #8
 800ce28:	305c      	adds	r0, #92	@ 0x5c
 800ce2a:	f000 fa19 	bl	800d260 <memset>
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <std+0x58>)
 800ce30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <std+0x5c>)
 800ce34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <std+0x60>)
 800ce38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce70 <std+0x64>)
 800ce3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce74 <std+0x68>)
 800ce40:	6224      	str	r4, [r4, #32]
 800ce42:	429c      	cmp	r4, r3
 800ce44:	d006      	beq.n	800ce54 <std+0x48>
 800ce46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce4a:	4294      	cmp	r4, r2
 800ce4c:	d002      	beq.n	800ce54 <std+0x48>
 800ce4e:	33d0      	adds	r3, #208	@ 0xd0
 800ce50:	429c      	cmp	r4, r3
 800ce52:	d105      	bne.n	800ce60 <std+0x54>
 800ce54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce5c:	f000 ba7c 	b.w	800d358 <__retarget_lock_init_recursive>
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	bf00      	nop
 800ce64:	0800d0b1 	.word	0x0800d0b1
 800ce68:	0800d0d3 	.word	0x0800d0d3
 800ce6c:	0800d10b 	.word	0x0800d10b
 800ce70:	0800d12f 	.word	0x0800d12f
 800ce74:	2000182c 	.word	0x2000182c

0800ce78 <stdio_exit_handler>:
 800ce78:	4a02      	ldr	r2, [pc, #8]	@ (800ce84 <stdio_exit_handler+0xc>)
 800ce7a:	4903      	ldr	r1, [pc, #12]	@ (800ce88 <stdio_exit_handler+0x10>)
 800ce7c:	4803      	ldr	r0, [pc, #12]	@ (800ce8c <stdio_exit_handler+0x14>)
 800ce7e:	f000 b869 	b.w	800cf54 <_fwalk_sglue>
 800ce82:	bf00      	nop
 800ce84:	200000a0 	.word	0x200000a0
 800ce88:	0800ef89 	.word	0x0800ef89
 800ce8c:	200000b0 	.word	0x200000b0

0800ce90 <cleanup_stdio>:
 800ce90:	6841      	ldr	r1, [r0, #4]
 800ce92:	4b0c      	ldr	r3, [pc, #48]	@ (800cec4 <cleanup_stdio+0x34>)
 800ce94:	4299      	cmp	r1, r3
 800ce96:	b510      	push	{r4, lr}
 800ce98:	4604      	mov	r4, r0
 800ce9a:	d001      	beq.n	800cea0 <cleanup_stdio+0x10>
 800ce9c:	f002 f874 	bl	800ef88 <_fflush_r>
 800cea0:	68a1      	ldr	r1, [r4, #8]
 800cea2:	4b09      	ldr	r3, [pc, #36]	@ (800cec8 <cleanup_stdio+0x38>)
 800cea4:	4299      	cmp	r1, r3
 800cea6:	d002      	beq.n	800ceae <cleanup_stdio+0x1e>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f002 f86d 	bl	800ef88 <_fflush_r>
 800ceae:	68e1      	ldr	r1, [r4, #12]
 800ceb0:	4b06      	ldr	r3, [pc, #24]	@ (800cecc <cleanup_stdio+0x3c>)
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	d004      	beq.n	800cec0 <cleanup_stdio+0x30>
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cebc:	f002 b864 	b.w	800ef88 <_fflush_r>
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	bf00      	nop
 800cec4:	2000182c 	.word	0x2000182c
 800cec8:	20001894 	.word	0x20001894
 800cecc:	200018fc 	.word	0x200018fc

0800ced0 <global_stdio_init.part.0>:
 800ced0:	b510      	push	{r4, lr}
 800ced2:	4b0b      	ldr	r3, [pc, #44]	@ (800cf00 <global_stdio_init.part.0+0x30>)
 800ced4:	4c0b      	ldr	r4, [pc, #44]	@ (800cf04 <global_stdio_init.part.0+0x34>)
 800ced6:	4a0c      	ldr	r2, [pc, #48]	@ (800cf08 <global_stdio_init.part.0+0x38>)
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	4620      	mov	r0, r4
 800cedc:	2200      	movs	r2, #0
 800cede:	2104      	movs	r1, #4
 800cee0:	f7ff ff94 	bl	800ce0c <std>
 800cee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cee8:	2201      	movs	r2, #1
 800ceea:	2109      	movs	r1, #9
 800ceec:	f7ff ff8e 	bl	800ce0c <std>
 800cef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cef4:	2202      	movs	r2, #2
 800cef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cefa:	2112      	movs	r1, #18
 800cefc:	f7ff bf86 	b.w	800ce0c <std>
 800cf00:	20001964 	.word	0x20001964
 800cf04:	2000182c 	.word	0x2000182c
 800cf08:	0800ce79 	.word	0x0800ce79

0800cf0c <__sfp_lock_acquire>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	@ (800cf14 <__sfp_lock_acquire+0x8>)
 800cf0e:	f000 ba24 	b.w	800d35a <__retarget_lock_acquire_recursive>
 800cf12:	bf00      	nop
 800cf14:	2000196d 	.word	0x2000196d

0800cf18 <__sfp_lock_release>:
 800cf18:	4801      	ldr	r0, [pc, #4]	@ (800cf20 <__sfp_lock_release+0x8>)
 800cf1a:	f000 ba1f 	b.w	800d35c <__retarget_lock_release_recursive>
 800cf1e:	bf00      	nop
 800cf20:	2000196d 	.word	0x2000196d

0800cf24 <__sinit>:
 800cf24:	b510      	push	{r4, lr}
 800cf26:	4604      	mov	r4, r0
 800cf28:	f7ff fff0 	bl	800cf0c <__sfp_lock_acquire>
 800cf2c:	6a23      	ldr	r3, [r4, #32]
 800cf2e:	b11b      	cbz	r3, 800cf38 <__sinit+0x14>
 800cf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf34:	f7ff bff0 	b.w	800cf18 <__sfp_lock_release>
 800cf38:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <__sinit+0x28>)
 800cf3a:	6223      	str	r3, [r4, #32]
 800cf3c:	4b04      	ldr	r3, [pc, #16]	@ (800cf50 <__sinit+0x2c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1f5      	bne.n	800cf30 <__sinit+0xc>
 800cf44:	f7ff ffc4 	bl	800ced0 <global_stdio_init.part.0>
 800cf48:	e7f2      	b.n	800cf30 <__sinit+0xc>
 800cf4a:	bf00      	nop
 800cf4c:	0800ce91 	.word	0x0800ce91
 800cf50:	20001964 	.word	0x20001964

0800cf54 <_fwalk_sglue>:
 800cf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf58:	4607      	mov	r7, r0
 800cf5a:	4688      	mov	r8, r1
 800cf5c:	4614      	mov	r4, r2
 800cf5e:	2600      	movs	r6, #0
 800cf60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf64:	f1b9 0901 	subs.w	r9, r9, #1
 800cf68:	d505      	bpl.n	800cf76 <_fwalk_sglue+0x22>
 800cf6a:	6824      	ldr	r4, [r4, #0]
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	d1f7      	bne.n	800cf60 <_fwalk_sglue+0xc>
 800cf70:	4630      	mov	r0, r6
 800cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf76:	89ab      	ldrh	r3, [r5, #12]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d907      	bls.n	800cf8c <_fwalk_sglue+0x38>
 800cf7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf80:	3301      	adds	r3, #1
 800cf82:	d003      	beq.n	800cf8c <_fwalk_sglue+0x38>
 800cf84:	4629      	mov	r1, r5
 800cf86:	4638      	mov	r0, r7
 800cf88:	47c0      	blx	r8
 800cf8a:	4306      	orrs	r6, r0
 800cf8c:	3568      	adds	r5, #104	@ 0x68
 800cf8e:	e7e9      	b.n	800cf64 <_fwalk_sglue+0x10>

0800cf90 <iprintf>:
 800cf90:	b40f      	push	{r0, r1, r2, r3}
 800cf92:	b507      	push	{r0, r1, r2, lr}
 800cf94:	4906      	ldr	r1, [pc, #24]	@ (800cfb0 <iprintf+0x20>)
 800cf96:	ab04      	add	r3, sp, #16
 800cf98:	6808      	ldr	r0, [r1, #0]
 800cf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9e:	6881      	ldr	r1, [r0, #8]
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	f001 fe55 	bl	800ec50 <_vfiprintf_r>
 800cfa6:	b003      	add	sp, #12
 800cfa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfac:	b004      	add	sp, #16
 800cfae:	4770      	bx	lr
 800cfb0:	200000ac 	.word	0x200000ac

0800cfb4 <_puts_r>:
 800cfb4:	6a03      	ldr	r3, [r0, #32]
 800cfb6:	b570      	push	{r4, r5, r6, lr}
 800cfb8:	6884      	ldr	r4, [r0, #8]
 800cfba:	4605      	mov	r5, r0
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	b90b      	cbnz	r3, 800cfc4 <_puts_r+0x10>
 800cfc0:	f7ff ffb0 	bl	800cf24 <__sinit>
 800cfc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfc6:	07db      	lsls	r3, r3, #31
 800cfc8:	d405      	bmi.n	800cfd6 <_puts_r+0x22>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	0598      	lsls	r0, r3, #22
 800cfce:	d402      	bmi.n	800cfd6 <_puts_r+0x22>
 800cfd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfd2:	f000 f9c2 	bl	800d35a <__retarget_lock_acquire_recursive>
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	0719      	lsls	r1, r3, #28
 800cfda:	d502      	bpl.n	800cfe2 <_puts_r+0x2e>
 800cfdc:	6923      	ldr	r3, [r4, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d135      	bne.n	800d04e <_puts_r+0x9a>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f000 f8e5 	bl	800d1b4 <__swsetup_r>
 800cfea:	b380      	cbz	r0, 800d04e <_puts_r+0x9a>
 800cfec:	f04f 35ff 	mov.w	r5, #4294967295
 800cff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cff2:	07da      	lsls	r2, r3, #31
 800cff4:	d405      	bmi.n	800d002 <_puts_r+0x4e>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	059b      	lsls	r3, r3, #22
 800cffa:	d402      	bmi.n	800d002 <_puts_r+0x4e>
 800cffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cffe:	f000 f9ad 	bl	800d35c <__retarget_lock_release_recursive>
 800d002:	4628      	mov	r0, r5
 800d004:	bd70      	pop	{r4, r5, r6, pc}
 800d006:	2b00      	cmp	r3, #0
 800d008:	da04      	bge.n	800d014 <_puts_r+0x60>
 800d00a:	69a2      	ldr	r2, [r4, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	dc17      	bgt.n	800d040 <_puts_r+0x8c>
 800d010:	290a      	cmp	r1, #10
 800d012:	d015      	beq.n	800d040 <_puts_r+0x8c>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	6022      	str	r2, [r4, #0]
 800d01a:	7019      	strb	r1, [r3, #0]
 800d01c:	68a3      	ldr	r3, [r4, #8]
 800d01e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d022:	3b01      	subs	r3, #1
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	2900      	cmp	r1, #0
 800d028:	d1ed      	bne.n	800d006 <_puts_r+0x52>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da11      	bge.n	800d052 <_puts_r+0x9e>
 800d02e:	4622      	mov	r2, r4
 800d030:	210a      	movs	r1, #10
 800d032:	4628      	mov	r0, r5
 800d034:	f000 f87f 	bl	800d136 <__swbuf_r>
 800d038:	3001      	adds	r0, #1
 800d03a:	d0d7      	beq.n	800cfec <_puts_r+0x38>
 800d03c:	250a      	movs	r5, #10
 800d03e:	e7d7      	b.n	800cff0 <_puts_r+0x3c>
 800d040:	4622      	mov	r2, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f877 	bl	800d136 <__swbuf_r>
 800d048:	3001      	adds	r0, #1
 800d04a:	d1e7      	bne.n	800d01c <_puts_r+0x68>
 800d04c:	e7ce      	b.n	800cfec <_puts_r+0x38>
 800d04e:	3e01      	subs	r6, #1
 800d050:	e7e4      	b.n	800d01c <_puts_r+0x68>
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	6022      	str	r2, [r4, #0]
 800d058:	220a      	movs	r2, #10
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	e7ee      	b.n	800d03c <_puts_r+0x88>
	...

0800d060 <puts>:
 800d060:	4b02      	ldr	r3, [pc, #8]	@ (800d06c <puts+0xc>)
 800d062:	4601      	mov	r1, r0
 800d064:	6818      	ldr	r0, [r3, #0]
 800d066:	f7ff bfa5 	b.w	800cfb4 <_puts_r>
 800d06a:	bf00      	nop
 800d06c:	200000ac 	.word	0x200000ac

0800d070 <siprintf>:
 800d070:	b40e      	push	{r1, r2, r3}
 800d072:	b500      	push	{lr}
 800d074:	b09c      	sub	sp, #112	@ 0x70
 800d076:	ab1d      	add	r3, sp, #116	@ 0x74
 800d078:	9002      	str	r0, [sp, #8]
 800d07a:	9006      	str	r0, [sp, #24]
 800d07c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d080:	4809      	ldr	r0, [pc, #36]	@ (800d0a8 <siprintf+0x38>)
 800d082:	9107      	str	r1, [sp, #28]
 800d084:	9104      	str	r1, [sp, #16]
 800d086:	4909      	ldr	r1, [pc, #36]	@ (800d0ac <siprintf+0x3c>)
 800d088:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08c:	9105      	str	r1, [sp, #20]
 800d08e:	6800      	ldr	r0, [r0, #0]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	a902      	add	r1, sp, #8
 800d094:	f001 fcb6 	bl	800ea04 <_svfiprintf_r>
 800d098:	9b02      	ldr	r3, [sp, #8]
 800d09a:	2200      	movs	r2, #0
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	b01c      	add	sp, #112	@ 0x70
 800d0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a4:	b003      	add	sp, #12
 800d0a6:	4770      	bx	lr
 800d0a8:	200000ac 	.word	0x200000ac
 800d0ac:	ffff0208 	.word	0xffff0208

0800d0b0 <__sread>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b8:	f000 f900 	bl	800d2bc <_read_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	bfab      	itete	ge
 800d0c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0c4:	181b      	addge	r3, r3, r0
 800d0c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0ca:	bfac      	ite	ge
 800d0cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0ce:	81a3      	strhlt	r3, [r4, #12]
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <__swrite>:
 800d0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d6:	461f      	mov	r7, r3
 800d0d8:	898b      	ldrh	r3, [r1, #12]
 800d0da:	05db      	lsls	r3, r3, #23
 800d0dc:	4605      	mov	r5, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	4616      	mov	r6, r2
 800d0e2:	d505      	bpl.n	800d0f0 <__swrite+0x1e>
 800d0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f000 f8d4 	bl	800d298 <_lseek_r>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0fa:	81a3      	strh	r3, [r4, #12]
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	4628      	mov	r0, r5
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	f000 b8eb 	b.w	800d2e0 <_write_r>

0800d10a <__sseek>:
 800d10a:	b510      	push	{r4, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d112:	f000 f8c1 	bl	800d298 <_lseek_r>
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	bf15      	itete	ne
 800d11c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d11e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d126:	81a3      	strheq	r3, [r4, #12]
 800d128:	bf18      	it	ne
 800d12a:	81a3      	strhne	r3, [r4, #12]
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <__sclose>:
 800d12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d132:	f000 b8a1 	b.w	800d278 <_close_r>

0800d136 <__swbuf_r>:
 800d136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d138:	460e      	mov	r6, r1
 800d13a:	4614      	mov	r4, r2
 800d13c:	4605      	mov	r5, r0
 800d13e:	b118      	cbz	r0, 800d148 <__swbuf_r+0x12>
 800d140:	6a03      	ldr	r3, [r0, #32]
 800d142:	b90b      	cbnz	r3, 800d148 <__swbuf_r+0x12>
 800d144:	f7ff feee 	bl	800cf24 <__sinit>
 800d148:	69a3      	ldr	r3, [r4, #24]
 800d14a:	60a3      	str	r3, [r4, #8]
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	071a      	lsls	r2, r3, #28
 800d150:	d501      	bpl.n	800d156 <__swbuf_r+0x20>
 800d152:	6923      	ldr	r3, [r4, #16]
 800d154:	b943      	cbnz	r3, 800d168 <__swbuf_r+0x32>
 800d156:	4621      	mov	r1, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	f000 f82b 	bl	800d1b4 <__swsetup_r>
 800d15e:	b118      	cbz	r0, 800d168 <__swbuf_r+0x32>
 800d160:	f04f 37ff 	mov.w	r7, #4294967295
 800d164:	4638      	mov	r0, r7
 800d166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	6922      	ldr	r2, [r4, #16]
 800d16c:	1a98      	subs	r0, r3, r2
 800d16e:	6963      	ldr	r3, [r4, #20]
 800d170:	b2f6      	uxtb	r6, r6
 800d172:	4283      	cmp	r3, r0
 800d174:	4637      	mov	r7, r6
 800d176:	dc05      	bgt.n	800d184 <__swbuf_r+0x4e>
 800d178:	4621      	mov	r1, r4
 800d17a:	4628      	mov	r0, r5
 800d17c:	f001 ff04 	bl	800ef88 <_fflush_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	d1ed      	bne.n	800d160 <__swbuf_r+0x2a>
 800d184:	68a3      	ldr	r3, [r4, #8]
 800d186:	3b01      	subs	r3, #1
 800d188:	60a3      	str	r3, [r4, #8]
 800d18a:	6823      	ldr	r3, [r4, #0]
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	6022      	str	r2, [r4, #0]
 800d190:	701e      	strb	r6, [r3, #0]
 800d192:	6962      	ldr	r2, [r4, #20]
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	429a      	cmp	r2, r3
 800d198:	d004      	beq.n	800d1a4 <__swbuf_r+0x6e>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	07db      	lsls	r3, r3, #31
 800d19e:	d5e1      	bpl.n	800d164 <__swbuf_r+0x2e>
 800d1a0:	2e0a      	cmp	r6, #10
 800d1a2:	d1df      	bne.n	800d164 <__swbuf_r+0x2e>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f001 feee 	bl	800ef88 <_fflush_r>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d0d9      	beq.n	800d164 <__swbuf_r+0x2e>
 800d1b0:	e7d6      	b.n	800d160 <__swbuf_r+0x2a>
	...

0800d1b4 <__swsetup_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4b29      	ldr	r3, [pc, #164]	@ (800d25c <__swsetup_r+0xa8>)
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	460c      	mov	r4, r1
 800d1be:	b118      	cbz	r0, 800d1c8 <__swsetup_r+0x14>
 800d1c0:	6a03      	ldr	r3, [r0, #32]
 800d1c2:	b90b      	cbnz	r3, 800d1c8 <__swsetup_r+0x14>
 800d1c4:	f7ff feae 	bl	800cf24 <__sinit>
 800d1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1cc:	0719      	lsls	r1, r3, #28
 800d1ce:	d422      	bmi.n	800d216 <__swsetup_r+0x62>
 800d1d0:	06da      	lsls	r2, r3, #27
 800d1d2:	d407      	bmi.n	800d1e4 <__swsetup_r+0x30>
 800d1d4:	2209      	movs	r2, #9
 800d1d6:	602a      	str	r2, [r5, #0]
 800d1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1dc:	81a3      	strh	r3, [r4, #12]
 800d1de:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e2:	e033      	b.n	800d24c <__swsetup_r+0x98>
 800d1e4:	0758      	lsls	r0, r3, #29
 800d1e6:	d512      	bpl.n	800d20e <__swsetup_r+0x5a>
 800d1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ea:	b141      	cbz	r1, 800d1fe <__swsetup_r+0x4a>
 800d1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1f0:	4299      	cmp	r1, r3
 800d1f2:	d002      	beq.n	800d1fa <__swsetup_r+0x46>
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	f000 ff27 	bl	800e048 <_free_r>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d204:	81a3      	strh	r3, [r4, #12]
 800d206:	2300      	movs	r3, #0
 800d208:	6063      	str	r3, [r4, #4]
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f043 0308 	orr.w	r3, r3, #8
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	6923      	ldr	r3, [r4, #16]
 800d218:	b94b      	cbnz	r3, 800d22e <__swsetup_r+0x7a>
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d224:	d003      	beq.n	800d22e <__swsetup_r+0x7a>
 800d226:	4621      	mov	r1, r4
 800d228:	4628      	mov	r0, r5
 800d22a:	f001 ff0d 	bl	800f048 <__smakebuf_r>
 800d22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d232:	f013 0201 	ands.w	r2, r3, #1
 800d236:	d00a      	beq.n	800d24e <__swsetup_r+0x9a>
 800d238:	2200      	movs	r2, #0
 800d23a:	60a2      	str	r2, [r4, #8]
 800d23c:	6962      	ldr	r2, [r4, #20]
 800d23e:	4252      	negs	r2, r2
 800d240:	61a2      	str	r2, [r4, #24]
 800d242:	6922      	ldr	r2, [r4, #16]
 800d244:	b942      	cbnz	r2, 800d258 <__swsetup_r+0xa4>
 800d246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d24a:	d1c5      	bne.n	800d1d8 <__swsetup_r+0x24>
 800d24c:	bd38      	pop	{r3, r4, r5, pc}
 800d24e:	0799      	lsls	r1, r3, #30
 800d250:	bf58      	it	pl
 800d252:	6962      	ldrpl	r2, [r4, #20]
 800d254:	60a2      	str	r2, [r4, #8]
 800d256:	e7f4      	b.n	800d242 <__swsetup_r+0x8e>
 800d258:	2000      	movs	r0, #0
 800d25a:	e7f7      	b.n	800d24c <__swsetup_r+0x98>
 800d25c:	200000ac 	.word	0x200000ac

0800d260 <memset>:
 800d260:	4402      	add	r2, r0
 800d262:	4603      	mov	r3, r0
 800d264:	4293      	cmp	r3, r2
 800d266:	d100      	bne.n	800d26a <memset+0xa>
 800d268:	4770      	bx	lr
 800d26a:	f803 1b01 	strb.w	r1, [r3], #1
 800d26e:	e7f9      	b.n	800d264 <memset+0x4>

0800d270 <_localeconv_r>:
 800d270:	4800      	ldr	r0, [pc, #0]	@ (800d274 <_localeconv_r+0x4>)
 800d272:	4770      	bx	lr
 800d274:	200001ec 	.word	0x200001ec

0800d278 <_close_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d06      	ldr	r5, [pc, #24]	@ (800d294 <_close_r+0x1c>)
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	f7f7 fc14 	bl	8004ab0 <_close>
 800d288:	1c43      	adds	r3, r0, #1
 800d28a:	d102      	bne.n	800d292 <_close_r+0x1a>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b103      	cbz	r3, 800d292 <_close_r+0x1a>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	20001968 	.word	0x20001968

0800d298 <_lseek_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d07      	ldr	r5, [pc, #28]	@ (800d2b8 <_lseek_r+0x20>)
 800d29c:	4604      	mov	r4, r0
 800d29e:	4608      	mov	r0, r1
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	602a      	str	r2, [r5, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f7f7 fc29 	bl	8004afe <_lseek>
 800d2ac:	1c43      	adds	r3, r0, #1
 800d2ae:	d102      	bne.n	800d2b6 <_lseek_r+0x1e>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	b103      	cbz	r3, 800d2b6 <_lseek_r+0x1e>
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}
 800d2b8:	20001968 	.word	0x20001968

0800d2bc <_read_r>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	4d07      	ldr	r5, [pc, #28]	@ (800d2dc <_read_r+0x20>)
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	4608      	mov	r0, r1
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	602a      	str	r2, [r5, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f7f7 fbb7 	bl	8004a3e <_read>
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	d102      	bne.n	800d2da <_read_r+0x1e>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b103      	cbz	r3, 800d2da <_read_r+0x1e>
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	20001968 	.word	0x20001968

0800d2e0 <_write_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d07      	ldr	r5, [pc, #28]	@ (800d300 <_write_r+0x20>)
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4608      	mov	r0, r1
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	602a      	str	r2, [r5, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f7f7 fbc2 	bl	8004a78 <_write>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	d102      	bne.n	800d2fe <_write_r+0x1e>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	b103      	cbz	r3, 800d2fe <_write_r+0x1e>
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
 800d300:	20001968 	.word	0x20001968

0800d304 <__errno>:
 800d304:	4b01      	ldr	r3, [pc, #4]	@ (800d30c <__errno+0x8>)
 800d306:	6818      	ldr	r0, [r3, #0]
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	200000ac 	.word	0x200000ac

0800d310 <__libc_init_array>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	4d0d      	ldr	r5, [pc, #52]	@ (800d348 <__libc_init_array+0x38>)
 800d314:	4c0d      	ldr	r4, [pc, #52]	@ (800d34c <__libc_init_array+0x3c>)
 800d316:	1b64      	subs	r4, r4, r5
 800d318:	10a4      	asrs	r4, r4, #2
 800d31a:	2600      	movs	r6, #0
 800d31c:	42a6      	cmp	r6, r4
 800d31e:	d109      	bne.n	800d334 <__libc_init_array+0x24>
 800d320:	4d0b      	ldr	r5, [pc, #44]	@ (800d350 <__libc_init_array+0x40>)
 800d322:	4c0c      	ldr	r4, [pc, #48]	@ (800d354 <__libc_init_array+0x44>)
 800d324:	f001 ffda 	bl	800f2dc <_init>
 800d328:	1b64      	subs	r4, r4, r5
 800d32a:	10a4      	asrs	r4, r4, #2
 800d32c:	2600      	movs	r6, #0
 800d32e:	42a6      	cmp	r6, r4
 800d330:	d105      	bne.n	800d33e <__libc_init_array+0x2e>
 800d332:	bd70      	pop	{r4, r5, r6, pc}
 800d334:	f855 3b04 	ldr.w	r3, [r5], #4
 800d338:	4798      	blx	r3
 800d33a:	3601      	adds	r6, #1
 800d33c:	e7ee      	b.n	800d31c <__libc_init_array+0xc>
 800d33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d342:	4798      	blx	r3
 800d344:	3601      	adds	r6, #1
 800d346:	e7f2      	b.n	800d32e <__libc_init_array+0x1e>
 800d348:	08010b1c 	.word	0x08010b1c
 800d34c:	08010b1c 	.word	0x08010b1c
 800d350:	08010b1c 	.word	0x08010b1c
 800d354:	08010b20 	.word	0x08010b20

0800d358 <__retarget_lock_init_recursive>:
 800d358:	4770      	bx	lr

0800d35a <__retarget_lock_acquire_recursive>:
 800d35a:	4770      	bx	lr

0800d35c <__retarget_lock_release_recursive>:
 800d35c:	4770      	bx	lr

0800d35e <strcpy>:
 800d35e:	4603      	mov	r3, r0
 800d360:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d364:	f803 2b01 	strb.w	r2, [r3], #1
 800d368:	2a00      	cmp	r2, #0
 800d36a:	d1f9      	bne.n	800d360 <strcpy+0x2>
 800d36c:	4770      	bx	lr
	...

0800d370 <__assert_func>:
 800d370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d372:	4614      	mov	r4, r2
 800d374:	461a      	mov	r2, r3
 800d376:	4b09      	ldr	r3, [pc, #36]	@ (800d39c <__assert_func+0x2c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4605      	mov	r5, r0
 800d37c:	68d8      	ldr	r0, [r3, #12]
 800d37e:	b954      	cbnz	r4, 800d396 <__assert_func+0x26>
 800d380:	4b07      	ldr	r3, [pc, #28]	@ (800d3a0 <__assert_func+0x30>)
 800d382:	461c      	mov	r4, r3
 800d384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d388:	9100      	str	r1, [sp, #0]
 800d38a:	462b      	mov	r3, r5
 800d38c:	4905      	ldr	r1, [pc, #20]	@ (800d3a4 <__assert_func+0x34>)
 800d38e:	f001 fe23 	bl	800efd8 <fiprintf>
 800d392:	f001 feef 	bl	800f174 <abort>
 800d396:	4b04      	ldr	r3, [pc, #16]	@ (800d3a8 <__assert_func+0x38>)
 800d398:	e7f4      	b.n	800d384 <__assert_func+0x14>
 800d39a:	bf00      	nop
 800d39c:	200000ac 	.word	0x200000ac
 800d3a0:	08010826 	.word	0x08010826
 800d3a4:	080107f8 	.word	0x080107f8
 800d3a8:	080107eb 	.word	0x080107eb

0800d3ac <quorem>:
 800d3ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	6903      	ldr	r3, [r0, #16]
 800d3b2:	690c      	ldr	r4, [r1, #16]
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	db7e      	blt.n	800d4b8 <quorem+0x10c>
 800d3ba:	3c01      	subs	r4, #1
 800d3bc:	f101 0814 	add.w	r8, r1, #20
 800d3c0:	00a3      	lsls	r3, r4, #2
 800d3c2:	f100 0514 	add.w	r5, r0, #20
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3de:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3e2:	d32e      	bcc.n	800d442 <quorem+0x96>
 800d3e4:	f04f 0a00 	mov.w	sl, #0
 800d3e8:	46c4      	mov	ip, r8
 800d3ea:	46ae      	mov	lr, r5
 800d3ec:	46d3      	mov	fp, sl
 800d3ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3f2:	b298      	uxth	r0, r3
 800d3f4:	fb06 a000 	mla	r0, r6, r0, sl
 800d3f8:	0c02      	lsrs	r2, r0, #16
 800d3fa:	0c1b      	lsrs	r3, r3, #16
 800d3fc:	fb06 2303 	mla	r3, r6, r3, r2
 800d400:	f8de 2000 	ldr.w	r2, [lr]
 800d404:	b280      	uxth	r0, r0
 800d406:	b292      	uxth	r2, r2
 800d408:	1a12      	subs	r2, r2, r0
 800d40a:	445a      	add	r2, fp
 800d40c:	f8de 0000 	ldr.w	r0, [lr]
 800d410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d414:	b29b      	uxth	r3, r3
 800d416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d41a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d41e:	b292      	uxth	r2, r2
 800d420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d424:	45e1      	cmp	r9, ip
 800d426:	f84e 2b04 	str.w	r2, [lr], #4
 800d42a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d42e:	d2de      	bcs.n	800d3ee <quorem+0x42>
 800d430:	9b00      	ldr	r3, [sp, #0]
 800d432:	58eb      	ldr	r3, [r5, r3]
 800d434:	b92b      	cbnz	r3, 800d442 <quorem+0x96>
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	3b04      	subs	r3, #4
 800d43a:	429d      	cmp	r5, r3
 800d43c:	461a      	mov	r2, r3
 800d43e:	d32f      	bcc.n	800d4a0 <quorem+0xf4>
 800d440:	613c      	str	r4, [r7, #16]
 800d442:	4638      	mov	r0, r7
 800d444:	f001 f97a 	bl	800e73c <__mcmp>
 800d448:	2800      	cmp	r0, #0
 800d44a:	db25      	blt.n	800d498 <quorem+0xec>
 800d44c:	4629      	mov	r1, r5
 800d44e:	2000      	movs	r0, #0
 800d450:	f858 2b04 	ldr.w	r2, [r8], #4
 800d454:	f8d1 c000 	ldr.w	ip, [r1]
 800d458:	fa1f fe82 	uxth.w	lr, r2
 800d45c:	fa1f f38c 	uxth.w	r3, ip
 800d460:	eba3 030e 	sub.w	r3, r3, lr
 800d464:	4403      	add	r3, r0
 800d466:	0c12      	lsrs	r2, r2, #16
 800d468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d46c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d470:	b29b      	uxth	r3, r3
 800d472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d476:	45c1      	cmp	r9, r8
 800d478:	f841 3b04 	str.w	r3, [r1], #4
 800d47c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d480:	d2e6      	bcs.n	800d450 <quorem+0xa4>
 800d482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d48a:	b922      	cbnz	r2, 800d496 <quorem+0xea>
 800d48c:	3b04      	subs	r3, #4
 800d48e:	429d      	cmp	r5, r3
 800d490:	461a      	mov	r2, r3
 800d492:	d30b      	bcc.n	800d4ac <quorem+0x100>
 800d494:	613c      	str	r4, [r7, #16]
 800d496:	3601      	adds	r6, #1
 800d498:	4630      	mov	r0, r6
 800d49a:	b003      	add	sp, #12
 800d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a0:	6812      	ldr	r2, [r2, #0]
 800d4a2:	3b04      	subs	r3, #4
 800d4a4:	2a00      	cmp	r2, #0
 800d4a6:	d1cb      	bne.n	800d440 <quorem+0x94>
 800d4a8:	3c01      	subs	r4, #1
 800d4aa:	e7c6      	b.n	800d43a <quorem+0x8e>
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	3b04      	subs	r3, #4
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	d1ef      	bne.n	800d494 <quorem+0xe8>
 800d4b4:	3c01      	subs	r4, #1
 800d4b6:	e7ea      	b.n	800d48e <quorem+0xe2>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7ee      	b.n	800d49a <quorem+0xee>
 800d4bc:	0000      	movs	r0, r0
	...

0800d4c0 <_dtoa_r>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	69c7      	ldr	r7, [r0, #28]
 800d4c6:	b099      	sub	sp, #100	@ 0x64
 800d4c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4cc:	ec55 4b10 	vmov	r4, r5, d0
 800d4d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d4d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4d4:	4683      	mov	fp, r0
 800d4d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4da:	b97f      	cbnz	r7, 800d4fc <_dtoa_r+0x3c>
 800d4dc:	2010      	movs	r0, #16
 800d4de:	f000 fdfd 	bl	800e0dc <malloc>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4e8:	b920      	cbnz	r0, 800d4f4 <_dtoa_r+0x34>
 800d4ea:	4ba7      	ldr	r3, [pc, #668]	@ (800d788 <_dtoa_r+0x2c8>)
 800d4ec:	21ef      	movs	r1, #239	@ 0xef
 800d4ee:	48a7      	ldr	r0, [pc, #668]	@ (800d78c <_dtoa_r+0x2cc>)
 800d4f0:	f7ff ff3e 	bl	800d370 <__assert_func>
 800d4f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4f8:	6007      	str	r7, [r0, #0]
 800d4fa:	60c7      	str	r7, [r0, #12]
 800d4fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d500:	6819      	ldr	r1, [r3, #0]
 800d502:	b159      	cbz	r1, 800d51c <_dtoa_r+0x5c>
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	604a      	str	r2, [r1, #4]
 800d508:	2301      	movs	r3, #1
 800d50a:	4093      	lsls	r3, r2
 800d50c:	608b      	str	r3, [r1, #8]
 800d50e:	4658      	mov	r0, fp
 800d510:	f000 feda 	bl	800e2c8 <_Bfree>
 800d514:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	1e2b      	subs	r3, r5, #0
 800d51e:	bfb9      	ittee	lt
 800d520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d524:	9303      	strlt	r3, [sp, #12]
 800d526:	2300      	movge	r3, #0
 800d528:	6033      	strge	r3, [r6, #0]
 800d52a:	9f03      	ldr	r7, [sp, #12]
 800d52c:	4b98      	ldr	r3, [pc, #608]	@ (800d790 <_dtoa_r+0x2d0>)
 800d52e:	bfbc      	itt	lt
 800d530:	2201      	movlt	r2, #1
 800d532:	6032      	strlt	r2, [r6, #0]
 800d534:	43bb      	bics	r3, r7
 800d536:	d112      	bne.n	800d55e <_dtoa_r+0x9e>
 800d538:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d53a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d544:	4323      	orrs	r3, r4
 800d546:	f000 854d 	beq.w	800dfe4 <_dtoa_r+0xb24>
 800d54a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d54c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d7a4 <_dtoa_r+0x2e4>
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 854f 	beq.w	800dff4 <_dtoa_r+0xb34>
 800d556:	f10a 0303 	add.w	r3, sl, #3
 800d55a:	f000 bd49 	b.w	800dff0 <_dtoa_r+0xb30>
 800d55e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d562:	2200      	movs	r2, #0
 800d564:	ec51 0b17 	vmov	r0, r1, d7
 800d568:	2300      	movs	r3, #0
 800d56a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d56e:	f7f3 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d572:	4680      	mov	r8, r0
 800d574:	b158      	cbz	r0, 800d58e <_dtoa_r+0xce>
 800d576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d578:	2301      	movs	r3, #1
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d57e:	b113      	cbz	r3, 800d586 <_dtoa_r+0xc6>
 800d580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d582:	4b84      	ldr	r3, [pc, #528]	@ (800d794 <_dtoa_r+0x2d4>)
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d7a8 <_dtoa_r+0x2e8>
 800d58a:	f000 bd33 	b.w	800dff4 <_dtoa_r+0xb34>
 800d58e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d592:	aa16      	add	r2, sp, #88	@ 0x58
 800d594:	a917      	add	r1, sp, #92	@ 0x5c
 800d596:	4658      	mov	r0, fp
 800d598:	f001 f980 	bl	800e89c <__d2b>
 800d59c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5a0:	4681      	mov	r9, r0
 800d5a2:	2e00      	cmp	r6, #0
 800d5a4:	d077      	beq.n	800d696 <_dtoa_r+0x1d6>
 800d5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d5bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4b74      	ldr	r3, [pc, #464]	@ (800d798 <_dtoa_r+0x2d8>)
 800d5c6:	f7f2 fe67 	bl	8000298 <__aeabi_dsub>
 800d5ca:	a369      	add	r3, pc, #420	@ (adr r3, 800d770 <_dtoa_r+0x2b0>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	f7f3 f81a 	bl	8000608 <__aeabi_dmul>
 800d5d4:	a368      	add	r3, pc, #416	@ (adr r3, 800d778 <_dtoa_r+0x2b8>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f2 fe5f 	bl	800029c <__adddf3>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	f7f2 ffa6 	bl	8000534 <__aeabi_i2d>
 800d5e8:	a365      	add	r3, pc, #404	@ (adr r3, 800d780 <_dtoa_r+0x2c0>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f3 f80b 	bl	8000608 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f2 fe4f 	bl	800029c <__adddf3>
 800d5fe:	4604      	mov	r4, r0
 800d600:	460d      	mov	r5, r1
 800d602:	f7f3 fab1 	bl	8000b68 <__aeabi_d2iz>
 800d606:	2200      	movs	r2, #0
 800d608:	4607      	mov	r7, r0
 800d60a:	2300      	movs	r3, #0
 800d60c:	4620      	mov	r0, r4
 800d60e:	4629      	mov	r1, r5
 800d610:	f7f3 fa6c 	bl	8000aec <__aeabi_dcmplt>
 800d614:	b140      	cbz	r0, 800d628 <_dtoa_r+0x168>
 800d616:	4638      	mov	r0, r7
 800d618:	f7f2 ff8c 	bl	8000534 <__aeabi_i2d>
 800d61c:	4622      	mov	r2, r4
 800d61e:	462b      	mov	r3, r5
 800d620:	f7f3 fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d624:	b900      	cbnz	r0, 800d628 <_dtoa_r+0x168>
 800d626:	3f01      	subs	r7, #1
 800d628:	2f16      	cmp	r7, #22
 800d62a:	d851      	bhi.n	800d6d0 <_dtoa_r+0x210>
 800d62c:	4b5b      	ldr	r3, [pc, #364]	@ (800d79c <_dtoa_r+0x2dc>)
 800d62e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d63a:	f7f3 fa57 	bl	8000aec <__aeabi_dcmplt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d048      	beq.n	800d6d4 <_dtoa_r+0x214>
 800d642:	3f01      	subs	r7, #1
 800d644:	2300      	movs	r3, #0
 800d646:	9312      	str	r3, [sp, #72]	@ 0x48
 800d648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d64a:	1b9b      	subs	r3, r3, r6
 800d64c:	1e5a      	subs	r2, r3, #1
 800d64e:	bf44      	itt	mi
 800d650:	f1c3 0801 	rsbmi	r8, r3, #1
 800d654:	2300      	movmi	r3, #0
 800d656:	9208      	str	r2, [sp, #32]
 800d658:	bf54      	ite	pl
 800d65a:	f04f 0800 	movpl.w	r8, #0
 800d65e:	9308      	strmi	r3, [sp, #32]
 800d660:	2f00      	cmp	r7, #0
 800d662:	db39      	blt.n	800d6d8 <_dtoa_r+0x218>
 800d664:	9b08      	ldr	r3, [sp, #32]
 800d666:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d668:	443b      	add	r3, r7
 800d66a:	9308      	str	r3, [sp, #32]
 800d66c:	2300      	movs	r3, #0
 800d66e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d672:	2b09      	cmp	r3, #9
 800d674:	d864      	bhi.n	800d740 <_dtoa_r+0x280>
 800d676:	2b05      	cmp	r3, #5
 800d678:	bfc4      	itt	gt
 800d67a:	3b04      	subgt	r3, #4
 800d67c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d680:	f1a3 0302 	sub.w	r3, r3, #2
 800d684:	bfcc      	ite	gt
 800d686:	2400      	movgt	r4, #0
 800d688:	2401      	movle	r4, #1
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d863      	bhi.n	800d756 <_dtoa_r+0x296>
 800d68e:	e8df f003 	tbb	[pc, r3]
 800d692:	372a      	.short	0x372a
 800d694:	5535      	.short	0x5535
 800d696:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d69a:	441e      	add	r6, r3
 800d69c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6a0:	2b20      	cmp	r3, #32
 800d6a2:	bfc1      	itttt	gt
 800d6a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6a8:	409f      	lslgt	r7, r3
 800d6aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d6ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d6b2:	bfd6      	itet	le
 800d6b4:	f1c3 0320 	rsble	r3, r3, #32
 800d6b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800d6bc:	fa04 f003 	lslle.w	r0, r4, r3
 800d6c0:	f7f2 ff28 	bl	8000514 <__aeabi_ui2d>
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d6ca:	3e01      	subs	r6, #1
 800d6cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800d6ce:	e777      	b.n	800d5c0 <_dtoa_r+0x100>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e7b8      	b.n	800d646 <_dtoa_r+0x186>
 800d6d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d6d6:	e7b7      	b.n	800d648 <_dtoa_r+0x188>
 800d6d8:	427b      	negs	r3, r7
 800d6da:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6dc:	2300      	movs	r3, #0
 800d6de:	eba8 0807 	sub.w	r8, r8, r7
 800d6e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6e4:	e7c4      	b.n	800d670 <_dtoa_r+0x1b0>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dc35      	bgt.n	800d75c <_dtoa_r+0x29c>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	9307      	str	r3, [sp, #28]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6fa:	e00b      	b.n	800d714 <_dtoa_r+0x254>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e7f3      	b.n	800d6e8 <_dtoa_r+0x228>
 800d700:	2300      	movs	r3, #0
 800d702:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d706:	18fb      	adds	r3, r7, r3
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	3301      	adds	r3, #1
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	9307      	str	r3, [sp, #28]
 800d710:	bfb8      	it	lt
 800d712:	2301      	movlt	r3, #1
 800d714:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d718:	2100      	movs	r1, #0
 800d71a:	2204      	movs	r2, #4
 800d71c:	f102 0514 	add.w	r5, r2, #20
 800d720:	429d      	cmp	r5, r3
 800d722:	d91f      	bls.n	800d764 <_dtoa_r+0x2a4>
 800d724:	6041      	str	r1, [r0, #4]
 800d726:	4658      	mov	r0, fp
 800d728:	f000 fd8e 	bl	800e248 <_Balloc>
 800d72c:	4682      	mov	sl, r0
 800d72e:	2800      	cmp	r0, #0
 800d730:	d13c      	bne.n	800d7ac <_dtoa_r+0x2ec>
 800d732:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a0 <_dtoa_r+0x2e0>)
 800d734:	4602      	mov	r2, r0
 800d736:	f240 11af 	movw	r1, #431	@ 0x1af
 800d73a:	e6d8      	b.n	800d4ee <_dtoa_r+0x2e>
 800d73c:	2301      	movs	r3, #1
 800d73e:	e7e0      	b.n	800d702 <_dtoa_r+0x242>
 800d740:	2401      	movs	r4, #1
 800d742:	2300      	movs	r3, #0
 800d744:	9309      	str	r3, [sp, #36]	@ 0x24
 800d746:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d748:	f04f 33ff 	mov.w	r3, #4294967295
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	9307      	str	r3, [sp, #28]
 800d750:	2200      	movs	r2, #0
 800d752:	2312      	movs	r3, #18
 800d754:	e7d0      	b.n	800d6f8 <_dtoa_r+0x238>
 800d756:	2301      	movs	r3, #1
 800d758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d75a:	e7f5      	b.n	800d748 <_dtoa_r+0x288>
 800d75c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	9307      	str	r3, [sp, #28]
 800d762:	e7d7      	b.n	800d714 <_dtoa_r+0x254>
 800d764:	3101      	adds	r1, #1
 800d766:	0052      	lsls	r2, r2, #1
 800d768:	e7d8      	b.n	800d71c <_dtoa_r+0x25c>
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w
 800d770:	636f4361 	.word	0x636f4361
 800d774:	3fd287a7 	.word	0x3fd287a7
 800d778:	8b60c8b3 	.word	0x8b60c8b3
 800d77c:	3fc68a28 	.word	0x3fc68a28
 800d780:	509f79fb 	.word	0x509f79fb
 800d784:	3fd34413 	.word	0x3fd34413
 800d788:	08010748 	.word	0x08010748
 800d78c:	08010834 	.word	0x08010834
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	080107c8 	.word	0x080107c8
 800d798:	3ff80000 	.word	0x3ff80000
 800d79c:	08010930 	.word	0x08010930
 800d7a0:	0801088c 	.word	0x0801088c
 800d7a4:	08010830 	.word	0x08010830
 800d7a8:	080107c7 	.word	0x080107c7
 800d7ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d7b0:	6018      	str	r0, [r3, #0]
 800d7b2:	9b07      	ldr	r3, [sp, #28]
 800d7b4:	2b0e      	cmp	r3, #14
 800d7b6:	f200 80a4 	bhi.w	800d902 <_dtoa_r+0x442>
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	f000 80a1 	beq.w	800d902 <_dtoa_r+0x442>
 800d7c0:	2f00      	cmp	r7, #0
 800d7c2:	dd33      	ble.n	800d82c <_dtoa_r+0x36c>
 800d7c4:	4bad      	ldr	r3, [pc, #692]	@ (800da7c <_dtoa_r+0x5bc>)
 800d7c6:	f007 020f 	and.w	r2, r7, #15
 800d7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7ce:	ed93 7b00 	vldr	d7, [r3]
 800d7d2:	05f8      	lsls	r0, r7, #23
 800d7d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7dc:	d516      	bpl.n	800d80c <_dtoa_r+0x34c>
 800d7de:	4ba8      	ldr	r3, [pc, #672]	@ (800da80 <_dtoa_r+0x5c0>)
 800d7e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7e8:	f7f3 f838 	bl	800085c <__aeabi_ddiv>
 800d7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f0:	f004 040f 	and.w	r4, r4, #15
 800d7f4:	2603      	movs	r6, #3
 800d7f6:	4da2      	ldr	r5, [pc, #648]	@ (800da80 <_dtoa_r+0x5c0>)
 800d7f8:	b954      	cbnz	r4, 800d810 <_dtoa_r+0x350>
 800d7fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d802:	f7f3 f82b 	bl	800085c <__aeabi_ddiv>
 800d806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80a:	e028      	b.n	800d85e <_dtoa_r+0x39e>
 800d80c:	2602      	movs	r6, #2
 800d80e:	e7f2      	b.n	800d7f6 <_dtoa_r+0x336>
 800d810:	07e1      	lsls	r1, r4, #31
 800d812:	d508      	bpl.n	800d826 <_dtoa_r+0x366>
 800d814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d81c:	f7f2 fef4 	bl	8000608 <__aeabi_dmul>
 800d820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d824:	3601      	adds	r6, #1
 800d826:	1064      	asrs	r4, r4, #1
 800d828:	3508      	adds	r5, #8
 800d82a:	e7e5      	b.n	800d7f8 <_dtoa_r+0x338>
 800d82c:	f000 80d2 	beq.w	800d9d4 <_dtoa_r+0x514>
 800d830:	427c      	negs	r4, r7
 800d832:	4b92      	ldr	r3, [pc, #584]	@ (800da7c <_dtoa_r+0x5bc>)
 800d834:	4d92      	ldr	r5, [pc, #584]	@ (800da80 <_dtoa_r+0x5c0>)
 800d836:	f004 020f 	and.w	r2, r4, #15
 800d83a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d846:	f7f2 fedf 	bl	8000608 <__aeabi_dmul>
 800d84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d84e:	1124      	asrs	r4, r4, #4
 800d850:	2300      	movs	r3, #0
 800d852:	2602      	movs	r6, #2
 800d854:	2c00      	cmp	r4, #0
 800d856:	f040 80b2 	bne.w	800d9be <_dtoa_r+0x4fe>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1d3      	bne.n	800d806 <_dtoa_r+0x346>
 800d85e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d860:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 80b7 	beq.w	800d9d8 <_dtoa_r+0x518>
 800d86a:	4b86      	ldr	r3, [pc, #536]	@ (800da84 <_dtoa_r+0x5c4>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	4620      	mov	r0, r4
 800d870:	4629      	mov	r1, r5
 800d872:	f7f3 f93b 	bl	8000aec <__aeabi_dcmplt>
 800d876:	2800      	cmp	r0, #0
 800d878:	f000 80ae 	beq.w	800d9d8 <_dtoa_r+0x518>
 800d87c:	9b07      	ldr	r3, [sp, #28]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f000 80aa 	beq.w	800d9d8 <_dtoa_r+0x518>
 800d884:	9b00      	ldr	r3, [sp, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	dd37      	ble.n	800d8fa <_dtoa_r+0x43a>
 800d88a:	1e7b      	subs	r3, r7, #1
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	4620      	mov	r0, r4
 800d890:	4b7d      	ldr	r3, [pc, #500]	@ (800da88 <_dtoa_r+0x5c8>)
 800d892:	2200      	movs	r2, #0
 800d894:	4629      	mov	r1, r5
 800d896:	f7f2 feb7 	bl	8000608 <__aeabi_dmul>
 800d89a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d89e:	9c00      	ldr	r4, [sp, #0]
 800d8a0:	3601      	adds	r6, #1
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7f2 fe46 	bl	8000534 <__aeabi_i2d>
 800d8a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8ac:	f7f2 feac 	bl	8000608 <__aeabi_dmul>
 800d8b0:	4b76      	ldr	r3, [pc, #472]	@ (800da8c <_dtoa_r+0x5cc>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f7f2 fcf2 	bl	800029c <__adddf3>
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d8be:	2c00      	cmp	r4, #0
 800d8c0:	f040 808d 	bne.w	800d9de <_dtoa_r+0x51e>
 800d8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8c8:	4b71      	ldr	r3, [pc, #452]	@ (800da90 <_dtoa_r+0x5d0>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f7f2 fce4 	bl	8000298 <__aeabi_dsub>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8d8:	462a      	mov	r2, r5
 800d8da:	4633      	mov	r3, r6
 800d8dc:	f7f3 f924 	bl	8000b28 <__aeabi_dcmpgt>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f040 828b 	bne.w	800ddfc <_dtoa_r+0x93c>
 800d8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ea:	462a      	mov	r2, r5
 800d8ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8f0:	f7f3 f8fc 	bl	8000aec <__aeabi_dcmplt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f040 8128 	bne.w	800db4a <_dtoa_r+0x68a>
 800d8fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d904:	2b00      	cmp	r3, #0
 800d906:	f2c0 815a 	blt.w	800dbbe <_dtoa_r+0x6fe>
 800d90a:	2f0e      	cmp	r7, #14
 800d90c:	f300 8157 	bgt.w	800dbbe <_dtoa_r+0x6fe>
 800d910:	4b5a      	ldr	r3, [pc, #360]	@ (800da7c <_dtoa_r+0x5bc>)
 800d912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d916:	ed93 7b00 	vldr	d7, [r3]
 800d91a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	ed8d 7b00 	vstr	d7, [sp]
 800d922:	da03      	bge.n	800d92c <_dtoa_r+0x46c>
 800d924:	9b07      	ldr	r3, [sp, #28]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f340 8101 	ble.w	800db2e <_dtoa_r+0x66e>
 800d92c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d930:	4656      	mov	r6, sl
 800d932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d936:	4620      	mov	r0, r4
 800d938:	4629      	mov	r1, r5
 800d93a:	f7f2 ff8f 	bl	800085c <__aeabi_ddiv>
 800d93e:	f7f3 f913 	bl	8000b68 <__aeabi_d2iz>
 800d942:	4680      	mov	r8, r0
 800d944:	f7f2 fdf6 	bl	8000534 <__aeabi_i2d>
 800d948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d94c:	f7f2 fe5c 	bl	8000608 <__aeabi_dmul>
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	4620      	mov	r0, r4
 800d956:	4629      	mov	r1, r5
 800d958:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d95c:	f7f2 fc9c 	bl	8000298 <__aeabi_dsub>
 800d960:	f806 4b01 	strb.w	r4, [r6], #1
 800d964:	9d07      	ldr	r5, [sp, #28]
 800d966:	eba6 040a 	sub.w	r4, r6, sl
 800d96a:	42a5      	cmp	r5, r4
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	f040 8117 	bne.w	800dba2 <_dtoa_r+0x6e2>
 800d974:	f7f2 fc92 	bl	800029c <__adddf3>
 800d978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d97c:	4604      	mov	r4, r0
 800d97e:	460d      	mov	r5, r1
 800d980:	f7f3 f8d2 	bl	8000b28 <__aeabi_dcmpgt>
 800d984:	2800      	cmp	r0, #0
 800d986:	f040 80f9 	bne.w	800db7c <_dtoa_r+0x6bc>
 800d98a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d98e:	4620      	mov	r0, r4
 800d990:	4629      	mov	r1, r5
 800d992:	f7f3 f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d996:	b118      	cbz	r0, 800d9a0 <_dtoa_r+0x4e0>
 800d998:	f018 0f01 	tst.w	r8, #1
 800d99c:	f040 80ee 	bne.w	800db7c <_dtoa_r+0x6bc>
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4658      	mov	r0, fp
 800d9a4:	f000 fc90 	bl	800e2c8 <_Bfree>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	7033      	strb	r3, [r6, #0]
 800d9ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d9ae:	3701      	adds	r7, #1
 800d9b0:	601f      	str	r7, [r3, #0]
 800d9b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 831d 	beq.w	800dff4 <_dtoa_r+0xb34>
 800d9ba:	601e      	str	r6, [r3, #0]
 800d9bc:	e31a      	b.n	800dff4 <_dtoa_r+0xb34>
 800d9be:	07e2      	lsls	r2, r4, #31
 800d9c0:	d505      	bpl.n	800d9ce <_dtoa_r+0x50e>
 800d9c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9c6:	f7f2 fe1f 	bl	8000608 <__aeabi_dmul>
 800d9ca:	3601      	adds	r6, #1
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	1064      	asrs	r4, r4, #1
 800d9d0:	3508      	adds	r5, #8
 800d9d2:	e73f      	b.n	800d854 <_dtoa_r+0x394>
 800d9d4:	2602      	movs	r6, #2
 800d9d6:	e742      	b.n	800d85e <_dtoa_r+0x39e>
 800d9d8:	9c07      	ldr	r4, [sp, #28]
 800d9da:	9704      	str	r7, [sp, #16]
 800d9dc:	e761      	b.n	800d8a2 <_dtoa_r+0x3e2>
 800d9de:	4b27      	ldr	r3, [pc, #156]	@ (800da7c <_dtoa_r+0x5bc>)
 800d9e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9ea:	4454      	add	r4, sl
 800d9ec:	2900      	cmp	r1, #0
 800d9ee:	d053      	beq.n	800da98 <_dtoa_r+0x5d8>
 800d9f0:	4928      	ldr	r1, [pc, #160]	@ (800da94 <_dtoa_r+0x5d4>)
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f7f2 ff32 	bl	800085c <__aeabi_ddiv>
 800d9f8:	4633      	mov	r3, r6
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	f7f2 fc4c 	bl	8000298 <__aeabi_dsub>
 800da00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da04:	4656      	mov	r6, sl
 800da06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da0a:	f7f3 f8ad 	bl	8000b68 <__aeabi_d2iz>
 800da0e:	4605      	mov	r5, r0
 800da10:	f7f2 fd90 	bl	8000534 <__aeabi_i2d>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1c:	f7f2 fc3c 	bl	8000298 <__aeabi_dsub>
 800da20:	3530      	adds	r5, #48	@ 0x30
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da2a:	f806 5b01 	strb.w	r5, [r6], #1
 800da2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da32:	f7f3 f85b 	bl	8000aec <__aeabi_dcmplt>
 800da36:	2800      	cmp	r0, #0
 800da38:	d171      	bne.n	800db1e <_dtoa_r+0x65e>
 800da3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da3e:	4911      	ldr	r1, [pc, #68]	@ (800da84 <_dtoa_r+0x5c4>)
 800da40:	2000      	movs	r0, #0
 800da42:	f7f2 fc29 	bl	8000298 <__aeabi_dsub>
 800da46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da4a:	f7f3 f84f 	bl	8000aec <__aeabi_dcmplt>
 800da4e:	2800      	cmp	r0, #0
 800da50:	f040 8095 	bne.w	800db7e <_dtoa_r+0x6be>
 800da54:	42a6      	cmp	r6, r4
 800da56:	f43f af50 	beq.w	800d8fa <_dtoa_r+0x43a>
 800da5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da5e:	4b0a      	ldr	r3, [pc, #40]	@ (800da88 <_dtoa_r+0x5c8>)
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fdd1 	bl	8000608 <__aeabi_dmul>
 800da66:	4b08      	ldr	r3, [pc, #32]	@ (800da88 <_dtoa_r+0x5c8>)
 800da68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da6c:	2200      	movs	r2, #0
 800da6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da72:	f7f2 fdc9 	bl	8000608 <__aeabi_dmul>
 800da76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da7a:	e7c4      	b.n	800da06 <_dtoa_r+0x546>
 800da7c:	08010930 	.word	0x08010930
 800da80:	08010908 	.word	0x08010908
 800da84:	3ff00000 	.word	0x3ff00000
 800da88:	40240000 	.word	0x40240000
 800da8c:	401c0000 	.word	0x401c0000
 800da90:	40140000 	.word	0x40140000
 800da94:	3fe00000 	.word	0x3fe00000
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	f7f2 fdb4 	bl	8000608 <__aeabi_dmul>
 800daa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800daa4:	9415      	str	r4, [sp, #84]	@ 0x54
 800daa6:	4656      	mov	r6, sl
 800daa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daac:	f7f3 f85c 	bl	8000b68 <__aeabi_d2iz>
 800dab0:	4605      	mov	r5, r0
 800dab2:	f7f2 fd3f 	bl	8000534 <__aeabi_i2d>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dabe:	f7f2 fbeb 	bl	8000298 <__aeabi_dsub>
 800dac2:	3530      	adds	r5, #48	@ 0x30
 800dac4:	f806 5b01 	strb.w	r5, [r6], #1
 800dac8:	4602      	mov	r2, r0
 800daca:	460b      	mov	r3, r1
 800dacc:	42a6      	cmp	r6, r4
 800dace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dad2:	f04f 0200 	mov.w	r2, #0
 800dad6:	d124      	bne.n	800db22 <_dtoa_r+0x662>
 800dad8:	4bac      	ldr	r3, [pc, #688]	@ (800dd8c <_dtoa_r+0x8cc>)
 800dada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dade:	f7f2 fbdd 	bl	800029c <__adddf3>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daea:	f7f3 f81d 	bl	8000b28 <__aeabi_dcmpgt>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d145      	bne.n	800db7e <_dtoa_r+0x6be>
 800daf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daf6:	49a5      	ldr	r1, [pc, #660]	@ (800dd8c <_dtoa_r+0x8cc>)
 800daf8:	2000      	movs	r0, #0
 800dafa:	f7f2 fbcd 	bl	8000298 <__aeabi_dsub>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db06:	f7f2 fff1 	bl	8000aec <__aeabi_dcmplt>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	f43f aef5 	beq.w	800d8fa <_dtoa_r+0x43a>
 800db10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800db12:	1e73      	subs	r3, r6, #1
 800db14:	9315      	str	r3, [sp, #84]	@ 0x54
 800db16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db1a:	2b30      	cmp	r3, #48	@ 0x30
 800db1c:	d0f8      	beq.n	800db10 <_dtoa_r+0x650>
 800db1e:	9f04      	ldr	r7, [sp, #16]
 800db20:	e73e      	b.n	800d9a0 <_dtoa_r+0x4e0>
 800db22:	4b9b      	ldr	r3, [pc, #620]	@ (800dd90 <_dtoa_r+0x8d0>)
 800db24:	f7f2 fd70 	bl	8000608 <__aeabi_dmul>
 800db28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db2c:	e7bc      	b.n	800daa8 <_dtoa_r+0x5e8>
 800db2e:	d10c      	bne.n	800db4a <_dtoa_r+0x68a>
 800db30:	4b98      	ldr	r3, [pc, #608]	@ (800dd94 <_dtoa_r+0x8d4>)
 800db32:	2200      	movs	r2, #0
 800db34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db38:	f7f2 fd66 	bl	8000608 <__aeabi_dmul>
 800db3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db40:	f7f2 ffe8 	bl	8000b14 <__aeabi_dcmpge>
 800db44:	2800      	cmp	r0, #0
 800db46:	f000 8157 	beq.w	800ddf8 <_dtoa_r+0x938>
 800db4a:	2400      	movs	r4, #0
 800db4c:	4625      	mov	r5, r4
 800db4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db50:	43db      	mvns	r3, r3
 800db52:	9304      	str	r3, [sp, #16]
 800db54:	4656      	mov	r6, sl
 800db56:	2700      	movs	r7, #0
 800db58:	4621      	mov	r1, r4
 800db5a:	4658      	mov	r0, fp
 800db5c:	f000 fbb4 	bl	800e2c8 <_Bfree>
 800db60:	2d00      	cmp	r5, #0
 800db62:	d0dc      	beq.n	800db1e <_dtoa_r+0x65e>
 800db64:	b12f      	cbz	r7, 800db72 <_dtoa_r+0x6b2>
 800db66:	42af      	cmp	r7, r5
 800db68:	d003      	beq.n	800db72 <_dtoa_r+0x6b2>
 800db6a:	4639      	mov	r1, r7
 800db6c:	4658      	mov	r0, fp
 800db6e:	f000 fbab 	bl	800e2c8 <_Bfree>
 800db72:	4629      	mov	r1, r5
 800db74:	4658      	mov	r0, fp
 800db76:	f000 fba7 	bl	800e2c8 <_Bfree>
 800db7a:	e7d0      	b.n	800db1e <_dtoa_r+0x65e>
 800db7c:	9704      	str	r7, [sp, #16]
 800db7e:	4633      	mov	r3, r6
 800db80:	461e      	mov	r6, r3
 800db82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db86:	2a39      	cmp	r2, #57	@ 0x39
 800db88:	d107      	bne.n	800db9a <_dtoa_r+0x6da>
 800db8a:	459a      	cmp	sl, r3
 800db8c:	d1f8      	bne.n	800db80 <_dtoa_r+0x6c0>
 800db8e:	9a04      	ldr	r2, [sp, #16]
 800db90:	3201      	adds	r2, #1
 800db92:	9204      	str	r2, [sp, #16]
 800db94:	2230      	movs	r2, #48	@ 0x30
 800db96:	f88a 2000 	strb.w	r2, [sl]
 800db9a:	781a      	ldrb	r2, [r3, #0]
 800db9c:	3201      	adds	r2, #1
 800db9e:	701a      	strb	r2, [r3, #0]
 800dba0:	e7bd      	b.n	800db1e <_dtoa_r+0x65e>
 800dba2:	4b7b      	ldr	r3, [pc, #492]	@ (800dd90 <_dtoa_r+0x8d0>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	f7f2 fd2f 	bl	8000608 <__aeabi_dmul>
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2300      	movs	r3, #0
 800dbae:	4604      	mov	r4, r0
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	f7f2 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f43f aebb 	beq.w	800d932 <_dtoa_r+0x472>
 800dbbc:	e6f0      	b.n	800d9a0 <_dtoa_r+0x4e0>
 800dbbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dbc0:	2a00      	cmp	r2, #0
 800dbc2:	f000 80db 	beq.w	800dd7c <_dtoa_r+0x8bc>
 800dbc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbc8:	2a01      	cmp	r2, #1
 800dbca:	f300 80bf 	bgt.w	800dd4c <_dtoa_r+0x88c>
 800dbce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	f000 80b7 	beq.w	800dd44 <_dtoa_r+0x884>
 800dbd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dbda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbdc:	4646      	mov	r6, r8
 800dbde:	9a08      	ldr	r2, [sp, #32]
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	441a      	add	r2, r3
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	4498      	add	r8, r3
 800dbe8:	9208      	str	r2, [sp, #32]
 800dbea:	f000 fc21 	bl	800e430 <__i2b>
 800dbee:	4605      	mov	r5, r0
 800dbf0:	b15e      	cbz	r6, 800dc0a <_dtoa_r+0x74a>
 800dbf2:	9b08      	ldr	r3, [sp, #32]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dd08      	ble.n	800dc0a <_dtoa_r+0x74a>
 800dbf8:	42b3      	cmp	r3, r6
 800dbfa:	9a08      	ldr	r2, [sp, #32]
 800dbfc:	bfa8      	it	ge
 800dbfe:	4633      	movge	r3, r6
 800dc00:	eba8 0803 	sub.w	r8, r8, r3
 800dc04:	1af6      	subs	r6, r6, r3
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	9308      	str	r3, [sp, #32]
 800dc0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc0c:	b1f3      	cbz	r3, 800dc4c <_dtoa_r+0x78c>
 800dc0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 80b7 	beq.w	800dd84 <_dtoa_r+0x8c4>
 800dc16:	b18c      	cbz	r4, 800dc3c <_dtoa_r+0x77c>
 800dc18:	4629      	mov	r1, r5
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	4658      	mov	r0, fp
 800dc1e:	f000 fcc7 	bl	800e5b0 <__pow5mult>
 800dc22:	464a      	mov	r2, r9
 800dc24:	4601      	mov	r1, r0
 800dc26:	4605      	mov	r5, r0
 800dc28:	4658      	mov	r0, fp
 800dc2a:	f000 fc17 	bl	800e45c <__multiply>
 800dc2e:	4649      	mov	r1, r9
 800dc30:	9004      	str	r0, [sp, #16]
 800dc32:	4658      	mov	r0, fp
 800dc34:	f000 fb48 	bl	800e2c8 <_Bfree>
 800dc38:	9b04      	ldr	r3, [sp, #16]
 800dc3a:	4699      	mov	r9, r3
 800dc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc3e:	1b1a      	subs	r2, r3, r4
 800dc40:	d004      	beq.n	800dc4c <_dtoa_r+0x78c>
 800dc42:	4649      	mov	r1, r9
 800dc44:	4658      	mov	r0, fp
 800dc46:	f000 fcb3 	bl	800e5b0 <__pow5mult>
 800dc4a:	4681      	mov	r9, r0
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	4658      	mov	r0, fp
 800dc50:	f000 fbee 	bl	800e430 <__i2b>
 800dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc56:	4604      	mov	r4, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 81cf 	beq.w	800dffc <_dtoa_r+0xb3c>
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4601      	mov	r1, r0
 800dc62:	4658      	mov	r0, fp
 800dc64:	f000 fca4 	bl	800e5b0 <__pow5mult>
 800dc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	f300 8095 	bgt.w	800dd9c <_dtoa_r+0x8dc>
 800dc72:	9b02      	ldr	r3, [sp, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f040 8087 	bne.w	800dd88 <_dtoa_r+0x8c8>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 8089 	bne.w	800dd98 <_dtoa_r+0x8d8>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc8c:	0d1b      	lsrs	r3, r3, #20
 800dc8e:	051b      	lsls	r3, r3, #20
 800dc90:	b12b      	cbz	r3, 800dc9e <_dtoa_r+0x7de>
 800dc92:	9b08      	ldr	r3, [sp, #32]
 800dc94:	3301      	adds	r3, #1
 800dc96:	9308      	str	r3, [sp, #32]
 800dc98:	f108 0801 	add.w	r8, r8, #1
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 81b0 	beq.w	800e008 <_dtoa_r+0xb48>
 800dca8:	6923      	ldr	r3, [r4, #16]
 800dcaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcae:	6918      	ldr	r0, [r3, #16]
 800dcb0:	f000 fb72 	bl	800e398 <__hi0bits>
 800dcb4:	f1c0 0020 	rsb	r0, r0, #32
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	4418      	add	r0, r3
 800dcbc:	f010 001f 	ands.w	r0, r0, #31
 800dcc0:	d077      	beq.n	800ddb2 <_dtoa_r+0x8f2>
 800dcc2:	f1c0 0320 	rsb	r3, r0, #32
 800dcc6:	2b04      	cmp	r3, #4
 800dcc8:	dd6b      	ble.n	800dda2 <_dtoa_r+0x8e2>
 800dcca:	9b08      	ldr	r3, [sp, #32]
 800dccc:	f1c0 001c 	rsb	r0, r0, #28
 800dcd0:	4403      	add	r3, r0
 800dcd2:	4480      	add	r8, r0
 800dcd4:	4406      	add	r6, r0
 800dcd6:	9308      	str	r3, [sp, #32]
 800dcd8:	f1b8 0f00 	cmp.w	r8, #0
 800dcdc:	dd05      	ble.n	800dcea <_dtoa_r+0x82a>
 800dcde:	4649      	mov	r1, r9
 800dce0:	4642      	mov	r2, r8
 800dce2:	4658      	mov	r0, fp
 800dce4:	f000 fcbe 	bl	800e664 <__lshift>
 800dce8:	4681      	mov	r9, r0
 800dcea:	9b08      	ldr	r3, [sp, #32]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd05      	ble.n	800dcfc <_dtoa_r+0x83c>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4658      	mov	r0, fp
 800dcf6:	f000 fcb5 	bl	800e664 <__lshift>
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d059      	beq.n	800ddb6 <_dtoa_r+0x8f6>
 800dd02:	4621      	mov	r1, r4
 800dd04:	4648      	mov	r0, r9
 800dd06:	f000 fd19 	bl	800e73c <__mcmp>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	da53      	bge.n	800ddb6 <_dtoa_r+0x8f6>
 800dd0e:	1e7b      	subs	r3, r7, #1
 800dd10:	9304      	str	r3, [sp, #16]
 800dd12:	4649      	mov	r1, r9
 800dd14:	2300      	movs	r3, #0
 800dd16:	220a      	movs	r2, #10
 800dd18:	4658      	mov	r0, fp
 800dd1a:	f000 faf7 	bl	800e30c <__multadd>
 800dd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd20:	4681      	mov	r9, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 8172 	beq.w	800e00c <_dtoa_r+0xb4c>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	220a      	movs	r2, #10
 800dd2e:	4658      	mov	r0, fp
 800dd30:	f000 faec 	bl	800e30c <__multadd>
 800dd34:	9b00      	ldr	r3, [sp, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	4605      	mov	r5, r0
 800dd3a:	dc67      	bgt.n	800de0c <_dtoa_r+0x94c>
 800dd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	dc41      	bgt.n	800ddc6 <_dtoa_r+0x906>
 800dd42:	e063      	b.n	800de0c <_dtoa_r+0x94c>
 800dd44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd4a:	e746      	b.n	800dbda <_dtoa_r+0x71a>
 800dd4c:	9b07      	ldr	r3, [sp, #28]
 800dd4e:	1e5c      	subs	r4, r3, #1
 800dd50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd52:	42a3      	cmp	r3, r4
 800dd54:	bfbf      	itttt	lt
 800dd56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd5c:	1ae3      	sublt	r3, r4, r3
 800dd5e:	bfb4      	ite	lt
 800dd60:	18d2      	addlt	r2, r2, r3
 800dd62:	1b1c      	subge	r4, r3, r4
 800dd64:	9b07      	ldr	r3, [sp, #28]
 800dd66:	bfbc      	itt	lt
 800dd68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd6a:	2400      	movlt	r4, #0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bfb5      	itete	lt
 800dd70:	eba8 0603 	sublt.w	r6, r8, r3
 800dd74:	9b07      	ldrge	r3, [sp, #28]
 800dd76:	2300      	movlt	r3, #0
 800dd78:	4646      	movge	r6, r8
 800dd7a:	e730      	b.n	800dbde <_dtoa_r+0x71e>
 800dd7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd80:	4646      	mov	r6, r8
 800dd82:	e735      	b.n	800dbf0 <_dtoa_r+0x730>
 800dd84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd86:	e75c      	b.n	800dc42 <_dtoa_r+0x782>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e788      	b.n	800dc9e <_dtoa_r+0x7de>
 800dd8c:	3fe00000 	.word	0x3fe00000
 800dd90:	40240000 	.word	0x40240000
 800dd94:	40140000 	.word	0x40140000
 800dd98:	9b02      	ldr	r3, [sp, #8]
 800dd9a:	e780      	b.n	800dc9e <_dtoa_r+0x7de>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dda0:	e782      	b.n	800dca8 <_dtoa_r+0x7e8>
 800dda2:	d099      	beq.n	800dcd8 <_dtoa_r+0x818>
 800dda4:	9a08      	ldr	r2, [sp, #32]
 800dda6:	331c      	adds	r3, #28
 800dda8:	441a      	add	r2, r3
 800ddaa:	4498      	add	r8, r3
 800ddac:	441e      	add	r6, r3
 800ddae:	9208      	str	r2, [sp, #32]
 800ddb0:	e792      	b.n	800dcd8 <_dtoa_r+0x818>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	e7f6      	b.n	800dda4 <_dtoa_r+0x8e4>
 800ddb6:	9b07      	ldr	r3, [sp, #28]
 800ddb8:	9704      	str	r7, [sp, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dc20      	bgt.n	800de00 <_dtoa_r+0x940>
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	dd1e      	ble.n	800de04 <_dtoa_r+0x944>
 800ddc6:	9b00      	ldr	r3, [sp, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f47f aec0 	bne.w	800db4e <_dtoa_r+0x68e>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	2205      	movs	r2, #5
 800ddd2:	4658      	mov	r0, fp
 800ddd4:	f000 fa9a 	bl	800e30c <__multadd>
 800ddd8:	4601      	mov	r1, r0
 800ddda:	4604      	mov	r4, r0
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 fcad 	bl	800e73c <__mcmp>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	f77f aeb3 	ble.w	800db4e <_dtoa_r+0x68e>
 800dde8:	4656      	mov	r6, sl
 800ddea:	2331      	movs	r3, #49	@ 0x31
 800ddec:	f806 3b01 	strb.w	r3, [r6], #1
 800ddf0:	9b04      	ldr	r3, [sp, #16]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	e6ae      	b.n	800db56 <_dtoa_r+0x696>
 800ddf8:	9c07      	ldr	r4, [sp, #28]
 800ddfa:	9704      	str	r7, [sp, #16]
 800ddfc:	4625      	mov	r5, r4
 800ddfe:	e7f3      	b.n	800dde8 <_dtoa_r+0x928>
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de06:	2b00      	cmp	r3, #0
 800de08:	f000 8104 	beq.w	800e014 <_dtoa_r+0xb54>
 800de0c:	2e00      	cmp	r6, #0
 800de0e:	dd05      	ble.n	800de1c <_dtoa_r+0x95c>
 800de10:	4629      	mov	r1, r5
 800de12:	4632      	mov	r2, r6
 800de14:	4658      	mov	r0, fp
 800de16:	f000 fc25 	bl	800e664 <__lshift>
 800de1a:	4605      	mov	r5, r0
 800de1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d05a      	beq.n	800ded8 <_dtoa_r+0xa18>
 800de22:	6869      	ldr	r1, [r5, #4]
 800de24:	4658      	mov	r0, fp
 800de26:	f000 fa0f 	bl	800e248 <_Balloc>
 800de2a:	4606      	mov	r6, r0
 800de2c:	b928      	cbnz	r0, 800de3a <_dtoa_r+0x97a>
 800de2e:	4b84      	ldr	r3, [pc, #528]	@ (800e040 <_dtoa_r+0xb80>)
 800de30:	4602      	mov	r2, r0
 800de32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de36:	f7ff bb5a 	b.w	800d4ee <_dtoa_r+0x2e>
 800de3a:	692a      	ldr	r2, [r5, #16]
 800de3c:	3202      	adds	r2, #2
 800de3e:	0092      	lsls	r2, r2, #2
 800de40:	f105 010c 	add.w	r1, r5, #12
 800de44:	300c      	adds	r0, #12
 800de46:	f001 f987 	bl	800f158 <memcpy>
 800de4a:	2201      	movs	r2, #1
 800de4c:	4631      	mov	r1, r6
 800de4e:	4658      	mov	r0, fp
 800de50:	f000 fc08 	bl	800e664 <__lshift>
 800de54:	f10a 0301 	add.w	r3, sl, #1
 800de58:	9307      	str	r3, [sp, #28]
 800de5a:	9b00      	ldr	r3, [sp, #0]
 800de5c:	4453      	add	r3, sl
 800de5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	462f      	mov	r7, r5
 800de68:	930a      	str	r3, [sp, #40]	@ 0x28
 800de6a:	4605      	mov	r5, r0
 800de6c:	9b07      	ldr	r3, [sp, #28]
 800de6e:	4621      	mov	r1, r4
 800de70:	3b01      	subs	r3, #1
 800de72:	4648      	mov	r0, r9
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	f7ff fa99 	bl	800d3ac <quorem>
 800de7a:	4639      	mov	r1, r7
 800de7c:	9002      	str	r0, [sp, #8]
 800de7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de82:	4648      	mov	r0, r9
 800de84:	f000 fc5a 	bl	800e73c <__mcmp>
 800de88:	462a      	mov	r2, r5
 800de8a:	9008      	str	r0, [sp, #32]
 800de8c:	4621      	mov	r1, r4
 800de8e:	4658      	mov	r0, fp
 800de90:	f000 fc70 	bl	800e774 <__mdiff>
 800de94:	68c2      	ldr	r2, [r0, #12]
 800de96:	4606      	mov	r6, r0
 800de98:	bb02      	cbnz	r2, 800dedc <_dtoa_r+0xa1c>
 800de9a:	4601      	mov	r1, r0
 800de9c:	4648      	mov	r0, r9
 800de9e:	f000 fc4d 	bl	800e73c <__mcmp>
 800dea2:	4602      	mov	r2, r0
 800dea4:	4631      	mov	r1, r6
 800dea6:	4658      	mov	r0, fp
 800dea8:	920e      	str	r2, [sp, #56]	@ 0x38
 800deaa:	f000 fa0d 	bl	800e2c8 <_Bfree>
 800deae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deb2:	9e07      	ldr	r6, [sp, #28]
 800deb4:	ea43 0102 	orr.w	r1, r3, r2
 800deb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deba:	4319      	orrs	r1, r3
 800debc:	d110      	bne.n	800dee0 <_dtoa_r+0xa20>
 800debe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dec2:	d029      	beq.n	800df18 <_dtoa_r+0xa58>
 800dec4:	9b08      	ldr	r3, [sp, #32]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dd02      	ble.n	800ded0 <_dtoa_r+0xa10>
 800deca:	9b02      	ldr	r3, [sp, #8]
 800decc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ded0:	9b00      	ldr	r3, [sp, #0]
 800ded2:	f883 8000 	strb.w	r8, [r3]
 800ded6:	e63f      	b.n	800db58 <_dtoa_r+0x698>
 800ded8:	4628      	mov	r0, r5
 800deda:	e7bb      	b.n	800de54 <_dtoa_r+0x994>
 800dedc:	2201      	movs	r2, #1
 800dede:	e7e1      	b.n	800dea4 <_dtoa_r+0x9e4>
 800dee0:	9b08      	ldr	r3, [sp, #32]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	db04      	blt.n	800def0 <_dtoa_r+0xa30>
 800dee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dee8:	430b      	orrs	r3, r1
 800deea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deec:	430b      	orrs	r3, r1
 800deee:	d120      	bne.n	800df32 <_dtoa_r+0xa72>
 800def0:	2a00      	cmp	r2, #0
 800def2:	dded      	ble.n	800ded0 <_dtoa_r+0xa10>
 800def4:	4649      	mov	r1, r9
 800def6:	2201      	movs	r2, #1
 800def8:	4658      	mov	r0, fp
 800defa:	f000 fbb3 	bl	800e664 <__lshift>
 800defe:	4621      	mov	r1, r4
 800df00:	4681      	mov	r9, r0
 800df02:	f000 fc1b 	bl	800e73c <__mcmp>
 800df06:	2800      	cmp	r0, #0
 800df08:	dc03      	bgt.n	800df12 <_dtoa_r+0xa52>
 800df0a:	d1e1      	bne.n	800ded0 <_dtoa_r+0xa10>
 800df0c:	f018 0f01 	tst.w	r8, #1
 800df10:	d0de      	beq.n	800ded0 <_dtoa_r+0xa10>
 800df12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df16:	d1d8      	bne.n	800deca <_dtoa_r+0xa0a>
 800df18:	9a00      	ldr	r2, [sp, #0]
 800df1a:	2339      	movs	r3, #57	@ 0x39
 800df1c:	7013      	strb	r3, [r2, #0]
 800df1e:	4633      	mov	r3, r6
 800df20:	461e      	mov	r6, r3
 800df22:	3b01      	subs	r3, #1
 800df24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df28:	2a39      	cmp	r2, #57	@ 0x39
 800df2a:	d052      	beq.n	800dfd2 <_dtoa_r+0xb12>
 800df2c:	3201      	adds	r2, #1
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	e612      	b.n	800db58 <_dtoa_r+0x698>
 800df32:	2a00      	cmp	r2, #0
 800df34:	dd07      	ble.n	800df46 <_dtoa_r+0xa86>
 800df36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df3a:	d0ed      	beq.n	800df18 <_dtoa_r+0xa58>
 800df3c:	9a00      	ldr	r2, [sp, #0]
 800df3e:	f108 0301 	add.w	r3, r8, #1
 800df42:	7013      	strb	r3, [r2, #0]
 800df44:	e608      	b.n	800db58 <_dtoa_r+0x698>
 800df46:	9b07      	ldr	r3, [sp, #28]
 800df48:	9a07      	ldr	r2, [sp, #28]
 800df4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df50:	4293      	cmp	r3, r2
 800df52:	d028      	beq.n	800dfa6 <_dtoa_r+0xae6>
 800df54:	4649      	mov	r1, r9
 800df56:	2300      	movs	r3, #0
 800df58:	220a      	movs	r2, #10
 800df5a:	4658      	mov	r0, fp
 800df5c:	f000 f9d6 	bl	800e30c <__multadd>
 800df60:	42af      	cmp	r7, r5
 800df62:	4681      	mov	r9, r0
 800df64:	f04f 0300 	mov.w	r3, #0
 800df68:	f04f 020a 	mov.w	r2, #10
 800df6c:	4639      	mov	r1, r7
 800df6e:	4658      	mov	r0, fp
 800df70:	d107      	bne.n	800df82 <_dtoa_r+0xac2>
 800df72:	f000 f9cb 	bl	800e30c <__multadd>
 800df76:	4607      	mov	r7, r0
 800df78:	4605      	mov	r5, r0
 800df7a:	9b07      	ldr	r3, [sp, #28]
 800df7c:	3301      	adds	r3, #1
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	e774      	b.n	800de6c <_dtoa_r+0x9ac>
 800df82:	f000 f9c3 	bl	800e30c <__multadd>
 800df86:	4629      	mov	r1, r5
 800df88:	4607      	mov	r7, r0
 800df8a:	2300      	movs	r3, #0
 800df8c:	220a      	movs	r2, #10
 800df8e:	4658      	mov	r0, fp
 800df90:	f000 f9bc 	bl	800e30c <__multadd>
 800df94:	4605      	mov	r5, r0
 800df96:	e7f0      	b.n	800df7a <_dtoa_r+0xaba>
 800df98:	9b00      	ldr	r3, [sp, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bfcc      	ite	gt
 800df9e:	461e      	movgt	r6, r3
 800dfa0:	2601      	movle	r6, #1
 800dfa2:	4456      	add	r6, sl
 800dfa4:	2700      	movs	r7, #0
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	4658      	mov	r0, fp
 800dfac:	f000 fb5a 	bl	800e664 <__lshift>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4681      	mov	r9, r0
 800dfb4:	f000 fbc2 	bl	800e73c <__mcmp>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	dcb0      	bgt.n	800df1e <_dtoa_r+0xa5e>
 800dfbc:	d102      	bne.n	800dfc4 <_dtoa_r+0xb04>
 800dfbe:	f018 0f01 	tst.w	r8, #1
 800dfc2:	d1ac      	bne.n	800df1e <_dtoa_r+0xa5e>
 800dfc4:	4633      	mov	r3, r6
 800dfc6:	461e      	mov	r6, r3
 800dfc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfcc:	2a30      	cmp	r2, #48	@ 0x30
 800dfce:	d0fa      	beq.n	800dfc6 <_dtoa_r+0xb06>
 800dfd0:	e5c2      	b.n	800db58 <_dtoa_r+0x698>
 800dfd2:	459a      	cmp	sl, r3
 800dfd4:	d1a4      	bne.n	800df20 <_dtoa_r+0xa60>
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9304      	str	r3, [sp, #16]
 800dfdc:	2331      	movs	r3, #49	@ 0x31
 800dfde:	f88a 3000 	strb.w	r3, [sl]
 800dfe2:	e5b9      	b.n	800db58 <_dtoa_r+0x698>
 800dfe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e044 <_dtoa_r+0xb84>
 800dfea:	b11b      	cbz	r3, 800dff4 <_dtoa_r+0xb34>
 800dfec:	f10a 0308 	add.w	r3, sl, #8
 800dff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	4650      	mov	r0, sl
 800dff6:	b019      	add	sp, #100	@ 0x64
 800dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffe:	2b01      	cmp	r3, #1
 800e000:	f77f ae37 	ble.w	800dc72 <_dtoa_r+0x7b2>
 800e004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e006:	930a      	str	r3, [sp, #40]	@ 0x28
 800e008:	2001      	movs	r0, #1
 800e00a:	e655      	b.n	800dcb8 <_dtoa_r+0x7f8>
 800e00c:	9b00      	ldr	r3, [sp, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f77f aed6 	ble.w	800ddc0 <_dtoa_r+0x900>
 800e014:	4656      	mov	r6, sl
 800e016:	4621      	mov	r1, r4
 800e018:	4648      	mov	r0, r9
 800e01a:	f7ff f9c7 	bl	800d3ac <quorem>
 800e01e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e022:	f806 8b01 	strb.w	r8, [r6], #1
 800e026:	9b00      	ldr	r3, [sp, #0]
 800e028:	eba6 020a 	sub.w	r2, r6, sl
 800e02c:	4293      	cmp	r3, r2
 800e02e:	ddb3      	ble.n	800df98 <_dtoa_r+0xad8>
 800e030:	4649      	mov	r1, r9
 800e032:	2300      	movs	r3, #0
 800e034:	220a      	movs	r2, #10
 800e036:	4658      	mov	r0, fp
 800e038:	f000 f968 	bl	800e30c <__multadd>
 800e03c:	4681      	mov	r9, r0
 800e03e:	e7ea      	b.n	800e016 <_dtoa_r+0xb56>
 800e040:	0801088c 	.word	0x0801088c
 800e044:	08010827 	.word	0x08010827

0800e048 <_free_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4605      	mov	r5, r0
 800e04c:	2900      	cmp	r1, #0
 800e04e:	d041      	beq.n	800e0d4 <_free_r+0x8c>
 800e050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e054:	1f0c      	subs	r4, r1, #4
 800e056:	2b00      	cmp	r3, #0
 800e058:	bfb8      	it	lt
 800e05a:	18e4      	addlt	r4, r4, r3
 800e05c:	f000 f8e8 	bl	800e230 <__malloc_lock>
 800e060:	4a1d      	ldr	r2, [pc, #116]	@ (800e0d8 <_free_r+0x90>)
 800e062:	6813      	ldr	r3, [r2, #0]
 800e064:	b933      	cbnz	r3, 800e074 <_free_r+0x2c>
 800e066:	6063      	str	r3, [r4, #4]
 800e068:	6014      	str	r4, [r2, #0]
 800e06a:	4628      	mov	r0, r5
 800e06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e070:	f000 b8e4 	b.w	800e23c <__malloc_unlock>
 800e074:	42a3      	cmp	r3, r4
 800e076:	d908      	bls.n	800e08a <_free_r+0x42>
 800e078:	6820      	ldr	r0, [r4, #0]
 800e07a:	1821      	adds	r1, r4, r0
 800e07c:	428b      	cmp	r3, r1
 800e07e:	bf01      	itttt	eq
 800e080:	6819      	ldreq	r1, [r3, #0]
 800e082:	685b      	ldreq	r3, [r3, #4]
 800e084:	1809      	addeq	r1, r1, r0
 800e086:	6021      	streq	r1, [r4, #0]
 800e088:	e7ed      	b.n	800e066 <_free_r+0x1e>
 800e08a:	461a      	mov	r2, r3
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	b10b      	cbz	r3, 800e094 <_free_r+0x4c>
 800e090:	42a3      	cmp	r3, r4
 800e092:	d9fa      	bls.n	800e08a <_free_r+0x42>
 800e094:	6811      	ldr	r1, [r2, #0]
 800e096:	1850      	adds	r0, r2, r1
 800e098:	42a0      	cmp	r0, r4
 800e09a:	d10b      	bne.n	800e0b4 <_free_r+0x6c>
 800e09c:	6820      	ldr	r0, [r4, #0]
 800e09e:	4401      	add	r1, r0
 800e0a0:	1850      	adds	r0, r2, r1
 800e0a2:	4283      	cmp	r3, r0
 800e0a4:	6011      	str	r1, [r2, #0]
 800e0a6:	d1e0      	bne.n	800e06a <_free_r+0x22>
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	6053      	str	r3, [r2, #4]
 800e0ae:	4408      	add	r0, r1
 800e0b0:	6010      	str	r0, [r2, #0]
 800e0b2:	e7da      	b.n	800e06a <_free_r+0x22>
 800e0b4:	d902      	bls.n	800e0bc <_free_r+0x74>
 800e0b6:	230c      	movs	r3, #12
 800e0b8:	602b      	str	r3, [r5, #0]
 800e0ba:	e7d6      	b.n	800e06a <_free_r+0x22>
 800e0bc:	6820      	ldr	r0, [r4, #0]
 800e0be:	1821      	adds	r1, r4, r0
 800e0c0:	428b      	cmp	r3, r1
 800e0c2:	bf04      	itt	eq
 800e0c4:	6819      	ldreq	r1, [r3, #0]
 800e0c6:	685b      	ldreq	r3, [r3, #4]
 800e0c8:	6063      	str	r3, [r4, #4]
 800e0ca:	bf04      	itt	eq
 800e0cc:	1809      	addeq	r1, r1, r0
 800e0ce:	6021      	streq	r1, [r4, #0]
 800e0d0:	6054      	str	r4, [r2, #4]
 800e0d2:	e7ca      	b.n	800e06a <_free_r+0x22>
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20001974 	.word	0x20001974

0800e0dc <malloc>:
 800e0dc:	4b02      	ldr	r3, [pc, #8]	@ (800e0e8 <malloc+0xc>)
 800e0de:	4601      	mov	r1, r0
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	f000 b825 	b.w	800e130 <_malloc_r>
 800e0e6:	bf00      	nop
 800e0e8:	200000ac 	.word	0x200000ac

0800e0ec <sbrk_aligned>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	4e0f      	ldr	r6, [pc, #60]	@ (800e12c <sbrk_aligned+0x40>)
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	6831      	ldr	r1, [r6, #0]
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	b911      	cbnz	r1, 800e0fe <sbrk_aligned+0x12>
 800e0f8:	f001 f81e 	bl	800f138 <_sbrk_r>
 800e0fc:	6030      	str	r0, [r6, #0]
 800e0fe:	4621      	mov	r1, r4
 800e100:	4628      	mov	r0, r5
 800e102:	f001 f819 	bl	800f138 <_sbrk_r>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	d103      	bne.n	800e112 <sbrk_aligned+0x26>
 800e10a:	f04f 34ff 	mov.w	r4, #4294967295
 800e10e:	4620      	mov	r0, r4
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	1cc4      	adds	r4, r0, #3
 800e114:	f024 0403 	bic.w	r4, r4, #3
 800e118:	42a0      	cmp	r0, r4
 800e11a:	d0f8      	beq.n	800e10e <sbrk_aligned+0x22>
 800e11c:	1a21      	subs	r1, r4, r0
 800e11e:	4628      	mov	r0, r5
 800e120:	f001 f80a 	bl	800f138 <_sbrk_r>
 800e124:	3001      	adds	r0, #1
 800e126:	d1f2      	bne.n	800e10e <sbrk_aligned+0x22>
 800e128:	e7ef      	b.n	800e10a <sbrk_aligned+0x1e>
 800e12a:	bf00      	nop
 800e12c:	20001970 	.word	0x20001970

0800e130 <_malloc_r>:
 800e130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e134:	1ccd      	adds	r5, r1, #3
 800e136:	f025 0503 	bic.w	r5, r5, #3
 800e13a:	3508      	adds	r5, #8
 800e13c:	2d0c      	cmp	r5, #12
 800e13e:	bf38      	it	cc
 800e140:	250c      	movcc	r5, #12
 800e142:	2d00      	cmp	r5, #0
 800e144:	4606      	mov	r6, r0
 800e146:	db01      	blt.n	800e14c <_malloc_r+0x1c>
 800e148:	42a9      	cmp	r1, r5
 800e14a:	d904      	bls.n	800e156 <_malloc_r+0x26>
 800e14c:	230c      	movs	r3, #12
 800e14e:	6033      	str	r3, [r6, #0]
 800e150:	2000      	movs	r0, #0
 800e152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e22c <_malloc_r+0xfc>
 800e15a:	f000 f869 	bl	800e230 <__malloc_lock>
 800e15e:	f8d8 3000 	ldr.w	r3, [r8]
 800e162:	461c      	mov	r4, r3
 800e164:	bb44      	cbnz	r4, 800e1b8 <_malloc_r+0x88>
 800e166:	4629      	mov	r1, r5
 800e168:	4630      	mov	r0, r6
 800e16a:	f7ff ffbf 	bl	800e0ec <sbrk_aligned>
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	4604      	mov	r4, r0
 800e172:	d158      	bne.n	800e226 <_malloc_r+0xf6>
 800e174:	f8d8 4000 	ldr.w	r4, [r8]
 800e178:	4627      	mov	r7, r4
 800e17a:	2f00      	cmp	r7, #0
 800e17c:	d143      	bne.n	800e206 <_malloc_r+0xd6>
 800e17e:	2c00      	cmp	r4, #0
 800e180:	d04b      	beq.n	800e21a <_malloc_r+0xea>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	4639      	mov	r1, r7
 800e186:	4630      	mov	r0, r6
 800e188:	eb04 0903 	add.w	r9, r4, r3
 800e18c:	f000 ffd4 	bl	800f138 <_sbrk_r>
 800e190:	4581      	cmp	r9, r0
 800e192:	d142      	bne.n	800e21a <_malloc_r+0xea>
 800e194:	6821      	ldr	r1, [r4, #0]
 800e196:	1a6d      	subs	r5, r5, r1
 800e198:	4629      	mov	r1, r5
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff ffa6 	bl	800e0ec <sbrk_aligned>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d03a      	beq.n	800e21a <_malloc_r+0xea>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	442b      	add	r3, r5
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	bb62      	cbnz	r2, 800e20c <_malloc_r+0xdc>
 800e1b2:	f8c8 7000 	str.w	r7, [r8]
 800e1b6:	e00f      	b.n	800e1d8 <_malloc_r+0xa8>
 800e1b8:	6822      	ldr	r2, [r4, #0]
 800e1ba:	1b52      	subs	r2, r2, r5
 800e1bc:	d420      	bmi.n	800e200 <_malloc_r+0xd0>
 800e1be:	2a0b      	cmp	r2, #11
 800e1c0:	d917      	bls.n	800e1f2 <_malloc_r+0xc2>
 800e1c2:	1961      	adds	r1, r4, r5
 800e1c4:	42a3      	cmp	r3, r4
 800e1c6:	6025      	str	r5, [r4, #0]
 800e1c8:	bf18      	it	ne
 800e1ca:	6059      	strne	r1, [r3, #4]
 800e1cc:	6863      	ldr	r3, [r4, #4]
 800e1ce:	bf08      	it	eq
 800e1d0:	f8c8 1000 	streq.w	r1, [r8]
 800e1d4:	5162      	str	r2, [r4, r5]
 800e1d6:	604b      	str	r3, [r1, #4]
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f000 f82f 	bl	800e23c <__malloc_unlock>
 800e1de:	f104 000b 	add.w	r0, r4, #11
 800e1e2:	1d23      	adds	r3, r4, #4
 800e1e4:	f020 0007 	bic.w	r0, r0, #7
 800e1e8:	1ac2      	subs	r2, r0, r3
 800e1ea:	bf1c      	itt	ne
 800e1ec:	1a1b      	subne	r3, r3, r0
 800e1ee:	50a3      	strne	r3, [r4, r2]
 800e1f0:	e7af      	b.n	800e152 <_malloc_r+0x22>
 800e1f2:	6862      	ldr	r2, [r4, #4]
 800e1f4:	42a3      	cmp	r3, r4
 800e1f6:	bf0c      	ite	eq
 800e1f8:	f8c8 2000 	streq.w	r2, [r8]
 800e1fc:	605a      	strne	r2, [r3, #4]
 800e1fe:	e7eb      	b.n	800e1d8 <_malloc_r+0xa8>
 800e200:	4623      	mov	r3, r4
 800e202:	6864      	ldr	r4, [r4, #4]
 800e204:	e7ae      	b.n	800e164 <_malloc_r+0x34>
 800e206:	463c      	mov	r4, r7
 800e208:	687f      	ldr	r7, [r7, #4]
 800e20a:	e7b6      	b.n	800e17a <_malloc_r+0x4a>
 800e20c:	461a      	mov	r2, r3
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	42a3      	cmp	r3, r4
 800e212:	d1fb      	bne.n	800e20c <_malloc_r+0xdc>
 800e214:	2300      	movs	r3, #0
 800e216:	6053      	str	r3, [r2, #4]
 800e218:	e7de      	b.n	800e1d8 <_malloc_r+0xa8>
 800e21a:	230c      	movs	r3, #12
 800e21c:	6033      	str	r3, [r6, #0]
 800e21e:	4630      	mov	r0, r6
 800e220:	f000 f80c 	bl	800e23c <__malloc_unlock>
 800e224:	e794      	b.n	800e150 <_malloc_r+0x20>
 800e226:	6005      	str	r5, [r0, #0]
 800e228:	e7d6      	b.n	800e1d8 <_malloc_r+0xa8>
 800e22a:	bf00      	nop
 800e22c:	20001974 	.word	0x20001974

0800e230 <__malloc_lock>:
 800e230:	4801      	ldr	r0, [pc, #4]	@ (800e238 <__malloc_lock+0x8>)
 800e232:	f7ff b892 	b.w	800d35a <__retarget_lock_acquire_recursive>
 800e236:	bf00      	nop
 800e238:	2000196c 	.word	0x2000196c

0800e23c <__malloc_unlock>:
 800e23c:	4801      	ldr	r0, [pc, #4]	@ (800e244 <__malloc_unlock+0x8>)
 800e23e:	f7ff b88d 	b.w	800d35c <__retarget_lock_release_recursive>
 800e242:	bf00      	nop
 800e244:	2000196c 	.word	0x2000196c

0800e248 <_Balloc>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	69c6      	ldr	r6, [r0, #28]
 800e24c:	4604      	mov	r4, r0
 800e24e:	460d      	mov	r5, r1
 800e250:	b976      	cbnz	r6, 800e270 <_Balloc+0x28>
 800e252:	2010      	movs	r0, #16
 800e254:	f7ff ff42 	bl	800e0dc <malloc>
 800e258:	4602      	mov	r2, r0
 800e25a:	61e0      	str	r0, [r4, #28]
 800e25c:	b920      	cbnz	r0, 800e268 <_Balloc+0x20>
 800e25e:	4b18      	ldr	r3, [pc, #96]	@ (800e2c0 <_Balloc+0x78>)
 800e260:	4818      	ldr	r0, [pc, #96]	@ (800e2c4 <_Balloc+0x7c>)
 800e262:	216b      	movs	r1, #107	@ 0x6b
 800e264:	f7ff f884 	bl	800d370 <__assert_func>
 800e268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e26c:	6006      	str	r6, [r0, #0]
 800e26e:	60c6      	str	r6, [r0, #12]
 800e270:	69e6      	ldr	r6, [r4, #28]
 800e272:	68f3      	ldr	r3, [r6, #12]
 800e274:	b183      	cbz	r3, 800e298 <_Balloc+0x50>
 800e276:	69e3      	ldr	r3, [r4, #28]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e27e:	b9b8      	cbnz	r0, 800e2b0 <_Balloc+0x68>
 800e280:	2101      	movs	r1, #1
 800e282:	fa01 f605 	lsl.w	r6, r1, r5
 800e286:	1d72      	adds	r2, r6, #5
 800e288:	0092      	lsls	r2, r2, #2
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 ff79 	bl	800f182 <_calloc_r>
 800e290:	b160      	cbz	r0, 800e2ac <_Balloc+0x64>
 800e292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e296:	e00e      	b.n	800e2b6 <_Balloc+0x6e>
 800e298:	2221      	movs	r2, #33	@ 0x21
 800e29a:	2104      	movs	r1, #4
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 ff70 	bl	800f182 <_calloc_r>
 800e2a2:	69e3      	ldr	r3, [r4, #28]
 800e2a4:	60f0      	str	r0, [r6, #12]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1e4      	bne.n	800e276 <_Balloc+0x2e>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	6802      	ldr	r2, [r0, #0]
 800e2b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2bc:	e7f7      	b.n	800e2ae <_Balloc+0x66>
 800e2be:	bf00      	nop
 800e2c0:	08010748 	.word	0x08010748
 800e2c4:	0801089d 	.word	0x0801089d

0800e2c8 <_Bfree>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	69c6      	ldr	r6, [r0, #28]
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	b976      	cbnz	r6, 800e2f0 <_Bfree+0x28>
 800e2d2:	2010      	movs	r0, #16
 800e2d4:	f7ff ff02 	bl	800e0dc <malloc>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	61e8      	str	r0, [r5, #28]
 800e2dc:	b920      	cbnz	r0, 800e2e8 <_Bfree+0x20>
 800e2de:	4b09      	ldr	r3, [pc, #36]	@ (800e304 <_Bfree+0x3c>)
 800e2e0:	4809      	ldr	r0, [pc, #36]	@ (800e308 <_Bfree+0x40>)
 800e2e2:	218f      	movs	r1, #143	@ 0x8f
 800e2e4:	f7ff f844 	bl	800d370 <__assert_func>
 800e2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2ec:	6006      	str	r6, [r0, #0]
 800e2ee:	60c6      	str	r6, [r0, #12]
 800e2f0:	b13c      	cbz	r4, 800e302 <_Bfree+0x3a>
 800e2f2:	69eb      	ldr	r3, [r5, #28]
 800e2f4:	6862      	ldr	r2, [r4, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2fc:	6021      	str	r1, [r4, #0]
 800e2fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	08010748 	.word	0x08010748
 800e308:	0801089d 	.word	0x0801089d

0800e30c <__multadd>:
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e310:	690d      	ldr	r5, [r1, #16]
 800e312:	4607      	mov	r7, r0
 800e314:	460c      	mov	r4, r1
 800e316:	461e      	mov	r6, r3
 800e318:	f101 0c14 	add.w	ip, r1, #20
 800e31c:	2000      	movs	r0, #0
 800e31e:	f8dc 3000 	ldr.w	r3, [ip]
 800e322:	b299      	uxth	r1, r3
 800e324:	fb02 6101 	mla	r1, r2, r1, r6
 800e328:	0c1e      	lsrs	r6, r3, #16
 800e32a:	0c0b      	lsrs	r3, r1, #16
 800e32c:	fb02 3306 	mla	r3, r2, r6, r3
 800e330:	b289      	uxth	r1, r1
 800e332:	3001      	adds	r0, #1
 800e334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e338:	4285      	cmp	r5, r0
 800e33a:	f84c 1b04 	str.w	r1, [ip], #4
 800e33e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e342:	dcec      	bgt.n	800e31e <__multadd+0x12>
 800e344:	b30e      	cbz	r6, 800e38a <__multadd+0x7e>
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	42ab      	cmp	r3, r5
 800e34a:	dc19      	bgt.n	800e380 <__multadd+0x74>
 800e34c:	6861      	ldr	r1, [r4, #4]
 800e34e:	4638      	mov	r0, r7
 800e350:	3101      	adds	r1, #1
 800e352:	f7ff ff79 	bl	800e248 <_Balloc>
 800e356:	4680      	mov	r8, r0
 800e358:	b928      	cbnz	r0, 800e366 <__multadd+0x5a>
 800e35a:	4602      	mov	r2, r0
 800e35c:	4b0c      	ldr	r3, [pc, #48]	@ (800e390 <__multadd+0x84>)
 800e35e:	480d      	ldr	r0, [pc, #52]	@ (800e394 <__multadd+0x88>)
 800e360:	21ba      	movs	r1, #186	@ 0xba
 800e362:	f7ff f805 	bl	800d370 <__assert_func>
 800e366:	6922      	ldr	r2, [r4, #16]
 800e368:	3202      	adds	r2, #2
 800e36a:	f104 010c 	add.w	r1, r4, #12
 800e36e:	0092      	lsls	r2, r2, #2
 800e370:	300c      	adds	r0, #12
 800e372:	f000 fef1 	bl	800f158 <memcpy>
 800e376:	4621      	mov	r1, r4
 800e378:	4638      	mov	r0, r7
 800e37a:	f7ff ffa5 	bl	800e2c8 <_Bfree>
 800e37e:	4644      	mov	r4, r8
 800e380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e384:	3501      	adds	r5, #1
 800e386:	615e      	str	r6, [r3, #20]
 800e388:	6125      	str	r5, [r4, #16]
 800e38a:	4620      	mov	r0, r4
 800e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e390:	0801088c 	.word	0x0801088c
 800e394:	0801089d 	.word	0x0801089d

0800e398 <__hi0bits>:
 800e398:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e39c:	4603      	mov	r3, r0
 800e39e:	bf36      	itet	cc
 800e3a0:	0403      	lslcc	r3, r0, #16
 800e3a2:	2000      	movcs	r0, #0
 800e3a4:	2010      	movcc	r0, #16
 800e3a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3aa:	bf3c      	itt	cc
 800e3ac:	021b      	lslcc	r3, r3, #8
 800e3ae:	3008      	addcc	r0, #8
 800e3b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3b4:	bf3c      	itt	cc
 800e3b6:	011b      	lslcc	r3, r3, #4
 800e3b8:	3004      	addcc	r0, #4
 800e3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3be:	bf3c      	itt	cc
 800e3c0:	009b      	lslcc	r3, r3, #2
 800e3c2:	3002      	addcc	r0, #2
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	db05      	blt.n	800e3d4 <__hi0bits+0x3c>
 800e3c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e3cc:	f100 0001 	add.w	r0, r0, #1
 800e3d0:	bf08      	it	eq
 800e3d2:	2020      	moveq	r0, #32
 800e3d4:	4770      	bx	lr

0800e3d6 <__lo0bits>:
 800e3d6:	6803      	ldr	r3, [r0, #0]
 800e3d8:	4602      	mov	r2, r0
 800e3da:	f013 0007 	ands.w	r0, r3, #7
 800e3de:	d00b      	beq.n	800e3f8 <__lo0bits+0x22>
 800e3e0:	07d9      	lsls	r1, r3, #31
 800e3e2:	d421      	bmi.n	800e428 <__lo0bits+0x52>
 800e3e4:	0798      	lsls	r0, r3, #30
 800e3e6:	bf49      	itett	mi
 800e3e8:	085b      	lsrmi	r3, r3, #1
 800e3ea:	089b      	lsrpl	r3, r3, #2
 800e3ec:	2001      	movmi	r0, #1
 800e3ee:	6013      	strmi	r3, [r2, #0]
 800e3f0:	bf5c      	itt	pl
 800e3f2:	6013      	strpl	r3, [r2, #0]
 800e3f4:	2002      	movpl	r0, #2
 800e3f6:	4770      	bx	lr
 800e3f8:	b299      	uxth	r1, r3
 800e3fa:	b909      	cbnz	r1, 800e400 <__lo0bits+0x2a>
 800e3fc:	0c1b      	lsrs	r3, r3, #16
 800e3fe:	2010      	movs	r0, #16
 800e400:	b2d9      	uxtb	r1, r3
 800e402:	b909      	cbnz	r1, 800e408 <__lo0bits+0x32>
 800e404:	3008      	adds	r0, #8
 800e406:	0a1b      	lsrs	r3, r3, #8
 800e408:	0719      	lsls	r1, r3, #28
 800e40a:	bf04      	itt	eq
 800e40c:	091b      	lsreq	r3, r3, #4
 800e40e:	3004      	addeq	r0, #4
 800e410:	0799      	lsls	r1, r3, #30
 800e412:	bf04      	itt	eq
 800e414:	089b      	lsreq	r3, r3, #2
 800e416:	3002      	addeq	r0, #2
 800e418:	07d9      	lsls	r1, r3, #31
 800e41a:	d403      	bmi.n	800e424 <__lo0bits+0x4e>
 800e41c:	085b      	lsrs	r3, r3, #1
 800e41e:	f100 0001 	add.w	r0, r0, #1
 800e422:	d003      	beq.n	800e42c <__lo0bits+0x56>
 800e424:	6013      	str	r3, [r2, #0]
 800e426:	4770      	bx	lr
 800e428:	2000      	movs	r0, #0
 800e42a:	4770      	bx	lr
 800e42c:	2020      	movs	r0, #32
 800e42e:	4770      	bx	lr

0800e430 <__i2b>:
 800e430:	b510      	push	{r4, lr}
 800e432:	460c      	mov	r4, r1
 800e434:	2101      	movs	r1, #1
 800e436:	f7ff ff07 	bl	800e248 <_Balloc>
 800e43a:	4602      	mov	r2, r0
 800e43c:	b928      	cbnz	r0, 800e44a <__i2b+0x1a>
 800e43e:	4b05      	ldr	r3, [pc, #20]	@ (800e454 <__i2b+0x24>)
 800e440:	4805      	ldr	r0, [pc, #20]	@ (800e458 <__i2b+0x28>)
 800e442:	f240 1145 	movw	r1, #325	@ 0x145
 800e446:	f7fe ff93 	bl	800d370 <__assert_func>
 800e44a:	2301      	movs	r3, #1
 800e44c:	6144      	str	r4, [r0, #20]
 800e44e:	6103      	str	r3, [r0, #16]
 800e450:	bd10      	pop	{r4, pc}
 800e452:	bf00      	nop
 800e454:	0801088c 	.word	0x0801088c
 800e458:	0801089d 	.word	0x0801089d

0800e45c <__multiply>:
 800e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	4614      	mov	r4, r2
 800e462:	690a      	ldr	r2, [r1, #16]
 800e464:	6923      	ldr	r3, [r4, #16]
 800e466:	429a      	cmp	r2, r3
 800e468:	bfa8      	it	ge
 800e46a:	4623      	movge	r3, r4
 800e46c:	460f      	mov	r7, r1
 800e46e:	bfa4      	itt	ge
 800e470:	460c      	movge	r4, r1
 800e472:	461f      	movge	r7, r3
 800e474:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e478:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e47c:	68a3      	ldr	r3, [r4, #8]
 800e47e:	6861      	ldr	r1, [r4, #4]
 800e480:	eb0a 0609 	add.w	r6, sl, r9
 800e484:	42b3      	cmp	r3, r6
 800e486:	b085      	sub	sp, #20
 800e488:	bfb8      	it	lt
 800e48a:	3101      	addlt	r1, #1
 800e48c:	f7ff fedc 	bl	800e248 <_Balloc>
 800e490:	b930      	cbnz	r0, 800e4a0 <__multiply+0x44>
 800e492:	4602      	mov	r2, r0
 800e494:	4b44      	ldr	r3, [pc, #272]	@ (800e5a8 <__multiply+0x14c>)
 800e496:	4845      	ldr	r0, [pc, #276]	@ (800e5ac <__multiply+0x150>)
 800e498:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e49c:	f7fe ff68 	bl	800d370 <__assert_func>
 800e4a0:	f100 0514 	add.w	r5, r0, #20
 800e4a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4a8:	462b      	mov	r3, r5
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	4543      	cmp	r3, r8
 800e4ae:	d321      	bcc.n	800e4f4 <__multiply+0x98>
 800e4b0:	f107 0114 	add.w	r1, r7, #20
 800e4b4:	f104 0214 	add.w	r2, r4, #20
 800e4b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e4bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e4c0:	9302      	str	r3, [sp, #8]
 800e4c2:	1b13      	subs	r3, r2, r4
 800e4c4:	3b15      	subs	r3, #21
 800e4c6:	f023 0303 	bic.w	r3, r3, #3
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	f104 0715 	add.w	r7, r4, #21
 800e4d0:	42ba      	cmp	r2, r7
 800e4d2:	bf38      	it	cc
 800e4d4:	2304      	movcc	r3, #4
 800e4d6:	9301      	str	r3, [sp, #4]
 800e4d8:	9b02      	ldr	r3, [sp, #8]
 800e4da:	9103      	str	r1, [sp, #12]
 800e4dc:	428b      	cmp	r3, r1
 800e4de:	d80c      	bhi.n	800e4fa <__multiply+0x9e>
 800e4e0:	2e00      	cmp	r6, #0
 800e4e2:	dd03      	ble.n	800e4ec <__multiply+0x90>
 800e4e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d05b      	beq.n	800e5a4 <__multiply+0x148>
 800e4ec:	6106      	str	r6, [r0, #16]
 800e4ee:	b005      	add	sp, #20
 800e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f4:	f843 2b04 	str.w	r2, [r3], #4
 800e4f8:	e7d8      	b.n	800e4ac <__multiply+0x50>
 800e4fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4fe:	f1ba 0f00 	cmp.w	sl, #0
 800e502:	d024      	beq.n	800e54e <__multiply+0xf2>
 800e504:	f104 0e14 	add.w	lr, r4, #20
 800e508:	46a9      	mov	r9, r5
 800e50a:	f04f 0c00 	mov.w	ip, #0
 800e50e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e512:	f8d9 3000 	ldr.w	r3, [r9]
 800e516:	fa1f fb87 	uxth.w	fp, r7
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e520:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e524:	f8d9 7000 	ldr.w	r7, [r9]
 800e528:	4463      	add	r3, ip
 800e52a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e52e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e532:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e536:	b29b      	uxth	r3, r3
 800e538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e53c:	4572      	cmp	r2, lr
 800e53e:	f849 3b04 	str.w	r3, [r9], #4
 800e542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e546:	d8e2      	bhi.n	800e50e <__multiply+0xb2>
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	f845 c003 	str.w	ip, [r5, r3]
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e554:	3104      	adds	r1, #4
 800e556:	f1b9 0f00 	cmp.w	r9, #0
 800e55a:	d021      	beq.n	800e5a0 <__multiply+0x144>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	f104 0c14 	add.w	ip, r4, #20
 800e562:	46ae      	mov	lr, r5
 800e564:	f04f 0a00 	mov.w	sl, #0
 800e568:	f8bc b000 	ldrh.w	fp, [ip]
 800e56c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e570:	fb09 770b 	mla	r7, r9, fp, r7
 800e574:	4457      	add	r7, sl
 800e576:	b29b      	uxth	r3, r3
 800e578:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e57c:	f84e 3b04 	str.w	r3, [lr], #4
 800e580:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e588:	f8be 3000 	ldrh.w	r3, [lr]
 800e58c:	fb09 330a 	mla	r3, r9, sl, r3
 800e590:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e594:	4562      	cmp	r2, ip
 800e596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e59a:	d8e5      	bhi.n	800e568 <__multiply+0x10c>
 800e59c:	9f01      	ldr	r7, [sp, #4]
 800e59e:	51eb      	str	r3, [r5, r7]
 800e5a0:	3504      	adds	r5, #4
 800e5a2:	e799      	b.n	800e4d8 <__multiply+0x7c>
 800e5a4:	3e01      	subs	r6, #1
 800e5a6:	e79b      	b.n	800e4e0 <__multiply+0x84>
 800e5a8:	0801088c 	.word	0x0801088c
 800e5ac:	0801089d 	.word	0x0801089d

0800e5b0 <__pow5mult>:
 800e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b4:	4615      	mov	r5, r2
 800e5b6:	f012 0203 	ands.w	r2, r2, #3
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	460e      	mov	r6, r1
 800e5be:	d007      	beq.n	800e5d0 <__pow5mult+0x20>
 800e5c0:	4c25      	ldr	r4, [pc, #148]	@ (800e658 <__pow5mult+0xa8>)
 800e5c2:	3a01      	subs	r2, #1
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5ca:	f7ff fe9f 	bl	800e30c <__multadd>
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	10ad      	asrs	r5, r5, #2
 800e5d2:	d03d      	beq.n	800e650 <__pow5mult+0xa0>
 800e5d4:	69fc      	ldr	r4, [r7, #28]
 800e5d6:	b97c      	cbnz	r4, 800e5f8 <__pow5mult+0x48>
 800e5d8:	2010      	movs	r0, #16
 800e5da:	f7ff fd7f 	bl	800e0dc <malloc>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	61f8      	str	r0, [r7, #28]
 800e5e2:	b928      	cbnz	r0, 800e5f0 <__pow5mult+0x40>
 800e5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e65c <__pow5mult+0xac>)
 800e5e6:	481e      	ldr	r0, [pc, #120]	@ (800e660 <__pow5mult+0xb0>)
 800e5e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e5ec:	f7fe fec0 	bl	800d370 <__assert_func>
 800e5f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5f4:	6004      	str	r4, [r0, #0]
 800e5f6:	60c4      	str	r4, [r0, #12]
 800e5f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e600:	b94c      	cbnz	r4, 800e616 <__pow5mult+0x66>
 800e602:	f240 2171 	movw	r1, #625	@ 0x271
 800e606:	4638      	mov	r0, r7
 800e608:	f7ff ff12 	bl	800e430 <__i2b>
 800e60c:	2300      	movs	r3, #0
 800e60e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e612:	4604      	mov	r4, r0
 800e614:	6003      	str	r3, [r0, #0]
 800e616:	f04f 0900 	mov.w	r9, #0
 800e61a:	07eb      	lsls	r3, r5, #31
 800e61c:	d50a      	bpl.n	800e634 <__pow5mult+0x84>
 800e61e:	4631      	mov	r1, r6
 800e620:	4622      	mov	r2, r4
 800e622:	4638      	mov	r0, r7
 800e624:	f7ff ff1a 	bl	800e45c <__multiply>
 800e628:	4631      	mov	r1, r6
 800e62a:	4680      	mov	r8, r0
 800e62c:	4638      	mov	r0, r7
 800e62e:	f7ff fe4b 	bl	800e2c8 <_Bfree>
 800e632:	4646      	mov	r6, r8
 800e634:	106d      	asrs	r5, r5, #1
 800e636:	d00b      	beq.n	800e650 <__pow5mult+0xa0>
 800e638:	6820      	ldr	r0, [r4, #0]
 800e63a:	b938      	cbnz	r0, 800e64c <__pow5mult+0x9c>
 800e63c:	4622      	mov	r2, r4
 800e63e:	4621      	mov	r1, r4
 800e640:	4638      	mov	r0, r7
 800e642:	f7ff ff0b 	bl	800e45c <__multiply>
 800e646:	6020      	str	r0, [r4, #0]
 800e648:	f8c0 9000 	str.w	r9, [r0]
 800e64c:	4604      	mov	r4, r0
 800e64e:	e7e4      	b.n	800e61a <__pow5mult+0x6a>
 800e650:	4630      	mov	r0, r6
 800e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e656:	bf00      	nop
 800e658:	080108f8 	.word	0x080108f8
 800e65c:	08010748 	.word	0x08010748
 800e660:	0801089d 	.word	0x0801089d

0800e664 <__lshift>:
 800e664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e668:	460c      	mov	r4, r1
 800e66a:	6849      	ldr	r1, [r1, #4]
 800e66c:	6923      	ldr	r3, [r4, #16]
 800e66e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e672:	68a3      	ldr	r3, [r4, #8]
 800e674:	4607      	mov	r7, r0
 800e676:	4691      	mov	r9, r2
 800e678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e67c:	f108 0601 	add.w	r6, r8, #1
 800e680:	42b3      	cmp	r3, r6
 800e682:	db0b      	blt.n	800e69c <__lshift+0x38>
 800e684:	4638      	mov	r0, r7
 800e686:	f7ff fddf 	bl	800e248 <_Balloc>
 800e68a:	4605      	mov	r5, r0
 800e68c:	b948      	cbnz	r0, 800e6a2 <__lshift+0x3e>
 800e68e:	4602      	mov	r2, r0
 800e690:	4b28      	ldr	r3, [pc, #160]	@ (800e734 <__lshift+0xd0>)
 800e692:	4829      	ldr	r0, [pc, #164]	@ (800e738 <__lshift+0xd4>)
 800e694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e698:	f7fe fe6a 	bl	800d370 <__assert_func>
 800e69c:	3101      	adds	r1, #1
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	e7ee      	b.n	800e680 <__lshift+0x1c>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f100 0114 	add.w	r1, r0, #20
 800e6a8:	f100 0210 	add.w	r2, r0, #16
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	4553      	cmp	r3, sl
 800e6b0:	db33      	blt.n	800e71a <__lshift+0xb6>
 800e6b2:	6920      	ldr	r0, [r4, #16]
 800e6b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6b8:	f104 0314 	add.w	r3, r4, #20
 800e6bc:	f019 091f 	ands.w	r9, r9, #31
 800e6c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6c8:	d02b      	beq.n	800e722 <__lshift+0xbe>
 800e6ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ce:	468a      	mov	sl, r1
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	6818      	ldr	r0, [r3, #0]
 800e6d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e6d8:	4310      	orrs	r0, r2
 800e6da:	f84a 0b04 	str.w	r0, [sl], #4
 800e6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e2:	459c      	cmp	ip, r3
 800e6e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6e8:	d8f3      	bhi.n	800e6d2 <__lshift+0x6e>
 800e6ea:	ebac 0304 	sub.w	r3, ip, r4
 800e6ee:	3b15      	subs	r3, #21
 800e6f0:	f023 0303 	bic.w	r3, r3, #3
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	f104 0015 	add.w	r0, r4, #21
 800e6fa:	4584      	cmp	ip, r0
 800e6fc:	bf38      	it	cc
 800e6fe:	2304      	movcc	r3, #4
 800e700:	50ca      	str	r2, [r1, r3]
 800e702:	b10a      	cbz	r2, 800e708 <__lshift+0xa4>
 800e704:	f108 0602 	add.w	r6, r8, #2
 800e708:	3e01      	subs	r6, #1
 800e70a:	4638      	mov	r0, r7
 800e70c:	612e      	str	r6, [r5, #16]
 800e70e:	4621      	mov	r1, r4
 800e710:	f7ff fdda 	bl	800e2c8 <_Bfree>
 800e714:	4628      	mov	r0, r5
 800e716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e71e:	3301      	adds	r3, #1
 800e720:	e7c5      	b.n	800e6ae <__lshift+0x4a>
 800e722:	3904      	subs	r1, #4
 800e724:	f853 2b04 	ldr.w	r2, [r3], #4
 800e728:	f841 2f04 	str.w	r2, [r1, #4]!
 800e72c:	459c      	cmp	ip, r3
 800e72e:	d8f9      	bhi.n	800e724 <__lshift+0xc0>
 800e730:	e7ea      	b.n	800e708 <__lshift+0xa4>
 800e732:	bf00      	nop
 800e734:	0801088c 	.word	0x0801088c
 800e738:	0801089d 	.word	0x0801089d

0800e73c <__mcmp>:
 800e73c:	690a      	ldr	r2, [r1, #16]
 800e73e:	4603      	mov	r3, r0
 800e740:	6900      	ldr	r0, [r0, #16]
 800e742:	1a80      	subs	r0, r0, r2
 800e744:	b530      	push	{r4, r5, lr}
 800e746:	d10e      	bne.n	800e766 <__mcmp+0x2a>
 800e748:	3314      	adds	r3, #20
 800e74a:	3114      	adds	r1, #20
 800e74c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e75c:	4295      	cmp	r5, r2
 800e75e:	d003      	beq.n	800e768 <__mcmp+0x2c>
 800e760:	d205      	bcs.n	800e76e <__mcmp+0x32>
 800e762:	f04f 30ff 	mov.w	r0, #4294967295
 800e766:	bd30      	pop	{r4, r5, pc}
 800e768:	42a3      	cmp	r3, r4
 800e76a:	d3f3      	bcc.n	800e754 <__mcmp+0x18>
 800e76c:	e7fb      	b.n	800e766 <__mcmp+0x2a>
 800e76e:	2001      	movs	r0, #1
 800e770:	e7f9      	b.n	800e766 <__mcmp+0x2a>
	...

0800e774 <__mdiff>:
 800e774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	4689      	mov	r9, r1
 800e77a:	4606      	mov	r6, r0
 800e77c:	4611      	mov	r1, r2
 800e77e:	4648      	mov	r0, r9
 800e780:	4614      	mov	r4, r2
 800e782:	f7ff ffdb 	bl	800e73c <__mcmp>
 800e786:	1e05      	subs	r5, r0, #0
 800e788:	d112      	bne.n	800e7b0 <__mdiff+0x3c>
 800e78a:	4629      	mov	r1, r5
 800e78c:	4630      	mov	r0, r6
 800e78e:	f7ff fd5b 	bl	800e248 <_Balloc>
 800e792:	4602      	mov	r2, r0
 800e794:	b928      	cbnz	r0, 800e7a2 <__mdiff+0x2e>
 800e796:	4b3f      	ldr	r3, [pc, #252]	@ (800e894 <__mdiff+0x120>)
 800e798:	f240 2137 	movw	r1, #567	@ 0x237
 800e79c:	483e      	ldr	r0, [pc, #248]	@ (800e898 <__mdiff+0x124>)
 800e79e:	f7fe fde7 	bl	800d370 <__assert_func>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	b003      	add	sp, #12
 800e7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b0:	bfbc      	itt	lt
 800e7b2:	464b      	movlt	r3, r9
 800e7b4:	46a1      	movlt	r9, r4
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7bc:	bfba      	itte	lt
 800e7be:	461c      	movlt	r4, r3
 800e7c0:	2501      	movlt	r5, #1
 800e7c2:	2500      	movge	r5, #0
 800e7c4:	f7ff fd40 	bl	800e248 <_Balloc>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	b918      	cbnz	r0, 800e7d4 <__mdiff+0x60>
 800e7cc:	4b31      	ldr	r3, [pc, #196]	@ (800e894 <__mdiff+0x120>)
 800e7ce:	f240 2145 	movw	r1, #581	@ 0x245
 800e7d2:	e7e3      	b.n	800e79c <__mdiff+0x28>
 800e7d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e7d8:	6926      	ldr	r6, [r4, #16]
 800e7da:	60c5      	str	r5, [r0, #12]
 800e7dc:	f109 0310 	add.w	r3, r9, #16
 800e7e0:	f109 0514 	add.w	r5, r9, #20
 800e7e4:	f104 0e14 	add.w	lr, r4, #20
 800e7e8:	f100 0b14 	add.w	fp, r0, #20
 800e7ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e7f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	46d9      	mov	r9, fp
 800e7f8:	f04f 0c00 	mov.w	ip, #0
 800e7fc:	9b01      	ldr	r3, [sp, #4]
 800e7fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e802:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	fa1f f38a 	uxth.w	r3, sl
 800e80c:	4619      	mov	r1, r3
 800e80e:	b283      	uxth	r3, r0
 800e810:	1acb      	subs	r3, r1, r3
 800e812:	0c00      	lsrs	r0, r0, #16
 800e814:	4463      	add	r3, ip
 800e816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e81a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e81e:	b29b      	uxth	r3, r3
 800e820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e824:	4576      	cmp	r6, lr
 800e826:	f849 3b04 	str.w	r3, [r9], #4
 800e82a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e82e:	d8e5      	bhi.n	800e7fc <__mdiff+0x88>
 800e830:	1b33      	subs	r3, r6, r4
 800e832:	3b15      	subs	r3, #21
 800e834:	f023 0303 	bic.w	r3, r3, #3
 800e838:	3415      	adds	r4, #21
 800e83a:	3304      	adds	r3, #4
 800e83c:	42a6      	cmp	r6, r4
 800e83e:	bf38      	it	cc
 800e840:	2304      	movcc	r3, #4
 800e842:	441d      	add	r5, r3
 800e844:	445b      	add	r3, fp
 800e846:	461e      	mov	r6, r3
 800e848:	462c      	mov	r4, r5
 800e84a:	4544      	cmp	r4, r8
 800e84c:	d30e      	bcc.n	800e86c <__mdiff+0xf8>
 800e84e:	f108 0103 	add.w	r1, r8, #3
 800e852:	1b49      	subs	r1, r1, r5
 800e854:	f021 0103 	bic.w	r1, r1, #3
 800e858:	3d03      	subs	r5, #3
 800e85a:	45a8      	cmp	r8, r5
 800e85c:	bf38      	it	cc
 800e85e:	2100      	movcc	r1, #0
 800e860:	440b      	add	r3, r1
 800e862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e866:	b191      	cbz	r1, 800e88e <__mdiff+0x11a>
 800e868:	6117      	str	r7, [r2, #16]
 800e86a:	e79d      	b.n	800e7a8 <__mdiff+0x34>
 800e86c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e870:	46e6      	mov	lr, ip
 800e872:	0c08      	lsrs	r0, r1, #16
 800e874:	fa1c fc81 	uxtah	ip, ip, r1
 800e878:	4471      	add	r1, lr
 800e87a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e87e:	b289      	uxth	r1, r1
 800e880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e884:	f846 1b04 	str.w	r1, [r6], #4
 800e888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e88c:	e7dd      	b.n	800e84a <__mdiff+0xd6>
 800e88e:	3f01      	subs	r7, #1
 800e890:	e7e7      	b.n	800e862 <__mdiff+0xee>
 800e892:	bf00      	nop
 800e894:	0801088c 	.word	0x0801088c
 800e898:	0801089d 	.word	0x0801089d

0800e89c <__d2b>:
 800e89c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	460f      	mov	r7, r1
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	ec59 8b10 	vmov	r8, r9, d0
 800e8a8:	4616      	mov	r6, r2
 800e8aa:	f7ff fccd 	bl	800e248 <_Balloc>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	b930      	cbnz	r0, 800e8c0 <__d2b+0x24>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	4b23      	ldr	r3, [pc, #140]	@ (800e944 <__d2b+0xa8>)
 800e8b6:	4824      	ldr	r0, [pc, #144]	@ (800e948 <__d2b+0xac>)
 800e8b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8bc:	f7fe fd58 	bl	800d370 <__assert_func>
 800e8c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8c8:	b10d      	cbz	r5, 800e8ce <__d2b+0x32>
 800e8ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8ce:	9301      	str	r3, [sp, #4]
 800e8d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e8d4:	d023      	beq.n	800e91e <__d2b+0x82>
 800e8d6:	4668      	mov	r0, sp
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	f7ff fd7c 	bl	800e3d6 <__lo0bits>
 800e8de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8e2:	b1d0      	cbz	r0, 800e91a <__d2b+0x7e>
 800e8e4:	f1c0 0320 	rsb	r3, r0, #32
 800e8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ec:	430b      	orrs	r3, r1
 800e8ee:	40c2      	lsrs	r2, r0
 800e8f0:	6163      	str	r3, [r4, #20]
 800e8f2:	9201      	str	r2, [sp, #4]
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	61a3      	str	r3, [r4, #24]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	bf0c      	ite	eq
 800e8fc:	2201      	moveq	r2, #1
 800e8fe:	2202      	movne	r2, #2
 800e900:	6122      	str	r2, [r4, #16]
 800e902:	b1a5      	cbz	r5, 800e92e <__d2b+0x92>
 800e904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e908:	4405      	add	r5, r0
 800e90a:	603d      	str	r5, [r7, #0]
 800e90c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e910:	6030      	str	r0, [r6, #0]
 800e912:	4620      	mov	r0, r4
 800e914:	b003      	add	sp, #12
 800e916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e91a:	6161      	str	r1, [r4, #20]
 800e91c:	e7ea      	b.n	800e8f4 <__d2b+0x58>
 800e91e:	a801      	add	r0, sp, #4
 800e920:	f7ff fd59 	bl	800e3d6 <__lo0bits>
 800e924:	9b01      	ldr	r3, [sp, #4]
 800e926:	6163      	str	r3, [r4, #20]
 800e928:	3020      	adds	r0, #32
 800e92a:	2201      	movs	r2, #1
 800e92c:	e7e8      	b.n	800e900 <__d2b+0x64>
 800e92e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e936:	6038      	str	r0, [r7, #0]
 800e938:	6918      	ldr	r0, [r3, #16]
 800e93a:	f7ff fd2d 	bl	800e398 <__hi0bits>
 800e93e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e942:	e7e5      	b.n	800e910 <__d2b+0x74>
 800e944:	0801088c 	.word	0x0801088c
 800e948:	0801089d 	.word	0x0801089d

0800e94c <__ssputs_r>:
 800e94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	688e      	ldr	r6, [r1, #8]
 800e952:	461f      	mov	r7, r3
 800e954:	42be      	cmp	r6, r7
 800e956:	680b      	ldr	r3, [r1, #0]
 800e958:	4682      	mov	sl, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	4690      	mov	r8, r2
 800e95e:	d82d      	bhi.n	800e9bc <__ssputs_r+0x70>
 800e960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e968:	d026      	beq.n	800e9b8 <__ssputs_r+0x6c>
 800e96a:	6965      	ldr	r5, [r4, #20]
 800e96c:	6909      	ldr	r1, [r1, #16]
 800e96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e972:	eba3 0901 	sub.w	r9, r3, r1
 800e976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e97a:	1c7b      	adds	r3, r7, #1
 800e97c:	444b      	add	r3, r9
 800e97e:	106d      	asrs	r5, r5, #1
 800e980:	429d      	cmp	r5, r3
 800e982:	bf38      	it	cc
 800e984:	461d      	movcc	r5, r3
 800e986:	0553      	lsls	r3, r2, #21
 800e988:	d527      	bpl.n	800e9da <__ssputs_r+0x8e>
 800e98a:	4629      	mov	r1, r5
 800e98c:	f7ff fbd0 	bl	800e130 <_malloc_r>
 800e990:	4606      	mov	r6, r0
 800e992:	b360      	cbz	r0, 800e9ee <__ssputs_r+0xa2>
 800e994:	6921      	ldr	r1, [r4, #16]
 800e996:	464a      	mov	r2, r9
 800e998:	f000 fbde 	bl	800f158 <memcpy>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	6126      	str	r6, [r4, #16]
 800e9aa:	6165      	str	r5, [r4, #20]
 800e9ac:	444e      	add	r6, r9
 800e9ae:	eba5 0509 	sub.w	r5, r5, r9
 800e9b2:	6026      	str	r6, [r4, #0]
 800e9b4:	60a5      	str	r5, [r4, #8]
 800e9b6:	463e      	mov	r6, r7
 800e9b8:	42be      	cmp	r6, r7
 800e9ba:	d900      	bls.n	800e9be <__ssputs_r+0x72>
 800e9bc:	463e      	mov	r6, r7
 800e9be:	6820      	ldr	r0, [r4, #0]
 800e9c0:	4632      	mov	r2, r6
 800e9c2:	4641      	mov	r1, r8
 800e9c4:	f000 fb7c 	bl	800f0c0 <memmove>
 800e9c8:	68a3      	ldr	r3, [r4, #8]
 800e9ca:	1b9b      	subs	r3, r3, r6
 800e9cc:	60a3      	str	r3, [r4, #8]
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	4433      	add	r3, r6
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9da:	462a      	mov	r2, r5
 800e9dc:	f000 fbf7 	bl	800f1ce <_realloc_r>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d1e0      	bne.n	800e9a8 <__ssputs_r+0x5c>
 800e9e6:	6921      	ldr	r1, [r4, #16]
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	f7ff fb2d 	bl	800e048 <_free_r>
 800e9ee:	230c      	movs	r3, #12
 800e9f0:	f8ca 3000 	str.w	r3, [sl]
 800e9f4:	89a3      	ldrh	r3, [r4, #12]
 800e9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9fa:	81a3      	strh	r3, [r4, #12]
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	e7e9      	b.n	800e9d6 <__ssputs_r+0x8a>
	...

0800ea04 <_svfiprintf_r>:
 800ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	4698      	mov	r8, r3
 800ea0a:	898b      	ldrh	r3, [r1, #12]
 800ea0c:	061b      	lsls	r3, r3, #24
 800ea0e:	b09d      	sub	sp, #116	@ 0x74
 800ea10:	4607      	mov	r7, r0
 800ea12:	460d      	mov	r5, r1
 800ea14:	4614      	mov	r4, r2
 800ea16:	d510      	bpl.n	800ea3a <_svfiprintf_r+0x36>
 800ea18:	690b      	ldr	r3, [r1, #16]
 800ea1a:	b973      	cbnz	r3, 800ea3a <_svfiprintf_r+0x36>
 800ea1c:	2140      	movs	r1, #64	@ 0x40
 800ea1e:	f7ff fb87 	bl	800e130 <_malloc_r>
 800ea22:	6028      	str	r0, [r5, #0]
 800ea24:	6128      	str	r0, [r5, #16]
 800ea26:	b930      	cbnz	r0, 800ea36 <_svfiprintf_r+0x32>
 800ea28:	230c      	movs	r3, #12
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	b01d      	add	sp, #116	@ 0x74
 800ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea36:	2340      	movs	r3, #64	@ 0x40
 800ea38:	616b      	str	r3, [r5, #20]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea3e:	2320      	movs	r3, #32
 800ea40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea48:	2330      	movs	r3, #48	@ 0x30
 800ea4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ebe8 <_svfiprintf_r+0x1e4>
 800ea4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea52:	f04f 0901 	mov.w	r9, #1
 800ea56:	4623      	mov	r3, r4
 800ea58:	469a      	mov	sl, r3
 800ea5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea5e:	b10a      	cbz	r2, 800ea64 <_svfiprintf_r+0x60>
 800ea60:	2a25      	cmp	r2, #37	@ 0x25
 800ea62:	d1f9      	bne.n	800ea58 <_svfiprintf_r+0x54>
 800ea64:	ebba 0b04 	subs.w	fp, sl, r4
 800ea68:	d00b      	beq.n	800ea82 <_svfiprintf_r+0x7e>
 800ea6a:	465b      	mov	r3, fp
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	4629      	mov	r1, r5
 800ea70:	4638      	mov	r0, r7
 800ea72:	f7ff ff6b 	bl	800e94c <__ssputs_r>
 800ea76:	3001      	adds	r0, #1
 800ea78:	f000 80a7 	beq.w	800ebca <_svfiprintf_r+0x1c6>
 800ea7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea7e:	445a      	add	r2, fp
 800ea80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea82:	f89a 3000 	ldrb.w	r3, [sl]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 809f 	beq.w	800ebca <_svfiprintf_r+0x1c6>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea96:	f10a 0a01 	add.w	sl, sl, #1
 800ea9a:	9304      	str	r3, [sp, #16]
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eaa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eaa4:	4654      	mov	r4, sl
 800eaa6:	2205      	movs	r2, #5
 800eaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaac:	484e      	ldr	r0, [pc, #312]	@ (800ebe8 <_svfiprintf_r+0x1e4>)
 800eaae:	f7f1 fb97 	bl	80001e0 <memchr>
 800eab2:	9a04      	ldr	r2, [sp, #16]
 800eab4:	b9d8      	cbnz	r0, 800eaee <_svfiprintf_r+0xea>
 800eab6:	06d0      	lsls	r0, r2, #27
 800eab8:	bf44      	itt	mi
 800eaba:	2320      	movmi	r3, #32
 800eabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eac0:	0711      	lsls	r1, r2, #28
 800eac2:	bf44      	itt	mi
 800eac4:	232b      	movmi	r3, #43	@ 0x2b
 800eac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaca:	f89a 3000 	ldrb.w	r3, [sl]
 800eace:	2b2a      	cmp	r3, #42	@ 0x2a
 800ead0:	d015      	beq.n	800eafe <_svfiprintf_r+0xfa>
 800ead2:	9a07      	ldr	r2, [sp, #28]
 800ead4:	4654      	mov	r4, sl
 800ead6:	2000      	movs	r0, #0
 800ead8:	f04f 0c0a 	mov.w	ip, #10
 800eadc:	4621      	mov	r1, r4
 800eade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae2:	3b30      	subs	r3, #48	@ 0x30
 800eae4:	2b09      	cmp	r3, #9
 800eae6:	d94b      	bls.n	800eb80 <_svfiprintf_r+0x17c>
 800eae8:	b1b0      	cbz	r0, 800eb18 <_svfiprintf_r+0x114>
 800eaea:	9207      	str	r2, [sp, #28]
 800eaec:	e014      	b.n	800eb18 <_svfiprintf_r+0x114>
 800eaee:	eba0 0308 	sub.w	r3, r0, r8
 800eaf2:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	9304      	str	r3, [sp, #16]
 800eafa:	46a2      	mov	sl, r4
 800eafc:	e7d2      	b.n	800eaa4 <_svfiprintf_r+0xa0>
 800eafe:	9b03      	ldr	r3, [sp, #12]
 800eb00:	1d19      	adds	r1, r3, #4
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	9103      	str	r1, [sp, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	bfbb      	ittet	lt
 800eb0a:	425b      	neglt	r3, r3
 800eb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb10:	9307      	strge	r3, [sp, #28]
 800eb12:	9307      	strlt	r3, [sp, #28]
 800eb14:	bfb8      	it	lt
 800eb16:	9204      	strlt	r2, [sp, #16]
 800eb18:	7823      	ldrb	r3, [r4, #0]
 800eb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb1c:	d10a      	bne.n	800eb34 <_svfiprintf_r+0x130>
 800eb1e:	7863      	ldrb	r3, [r4, #1]
 800eb20:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb22:	d132      	bne.n	800eb8a <_svfiprintf_r+0x186>
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	1d1a      	adds	r2, r3, #4
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	9203      	str	r2, [sp, #12]
 800eb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb30:	3402      	adds	r4, #2
 800eb32:	9305      	str	r3, [sp, #20]
 800eb34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ebf8 <_svfiprintf_r+0x1f4>
 800eb38:	7821      	ldrb	r1, [r4, #0]
 800eb3a:	2203      	movs	r2, #3
 800eb3c:	4650      	mov	r0, sl
 800eb3e:	f7f1 fb4f 	bl	80001e0 <memchr>
 800eb42:	b138      	cbz	r0, 800eb54 <_svfiprintf_r+0x150>
 800eb44:	9b04      	ldr	r3, [sp, #16]
 800eb46:	eba0 000a 	sub.w	r0, r0, sl
 800eb4a:	2240      	movs	r2, #64	@ 0x40
 800eb4c:	4082      	lsls	r2, r0
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	3401      	adds	r4, #1
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb58:	4824      	ldr	r0, [pc, #144]	@ (800ebec <_svfiprintf_r+0x1e8>)
 800eb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb5e:	2206      	movs	r2, #6
 800eb60:	f7f1 fb3e 	bl	80001e0 <memchr>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d036      	beq.n	800ebd6 <_svfiprintf_r+0x1d2>
 800eb68:	4b21      	ldr	r3, [pc, #132]	@ (800ebf0 <_svfiprintf_r+0x1ec>)
 800eb6a:	bb1b      	cbnz	r3, 800ebb4 <_svfiprintf_r+0x1b0>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	3307      	adds	r3, #7
 800eb70:	f023 0307 	bic.w	r3, r3, #7
 800eb74:	3308      	adds	r3, #8
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb7a:	4433      	add	r3, r6
 800eb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb7e:	e76a      	b.n	800ea56 <_svfiprintf_r+0x52>
 800eb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb84:	460c      	mov	r4, r1
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7a8      	b.n	800eadc <_svfiprintf_r+0xd8>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	3401      	adds	r4, #1
 800eb8e:	9305      	str	r3, [sp, #20]
 800eb90:	4619      	mov	r1, r3
 800eb92:	f04f 0c0a 	mov.w	ip, #10
 800eb96:	4620      	mov	r0, r4
 800eb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb9c:	3a30      	subs	r2, #48	@ 0x30
 800eb9e:	2a09      	cmp	r2, #9
 800eba0:	d903      	bls.n	800ebaa <_svfiprintf_r+0x1a6>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c6      	beq.n	800eb34 <_svfiprintf_r+0x130>
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	e7c4      	b.n	800eb34 <_svfiprintf_r+0x130>
 800ebaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebae:	4604      	mov	r4, r0
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e7f0      	b.n	800eb96 <_svfiprintf_r+0x192>
 800ebb4:	ab03      	add	r3, sp, #12
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	462a      	mov	r2, r5
 800ebba:	4b0e      	ldr	r3, [pc, #56]	@ (800ebf4 <_svfiprintf_r+0x1f0>)
 800ebbc:	a904      	add	r1, sp, #16
 800ebbe:	4638      	mov	r0, r7
 800ebc0:	f7fd fd6c 	bl	800c69c <_printf_float>
 800ebc4:	1c42      	adds	r2, r0, #1
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	d1d6      	bne.n	800eb78 <_svfiprintf_r+0x174>
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	065b      	lsls	r3, r3, #25
 800ebce:	f53f af2d 	bmi.w	800ea2c <_svfiprintf_r+0x28>
 800ebd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebd4:	e72c      	b.n	800ea30 <_svfiprintf_r+0x2c>
 800ebd6:	ab03      	add	r3, sp, #12
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	462a      	mov	r2, r5
 800ebdc:	4b05      	ldr	r3, [pc, #20]	@ (800ebf4 <_svfiprintf_r+0x1f0>)
 800ebde:	a904      	add	r1, sp, #16
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f7fd fff3 	bl	800cbcc <_printf_i>
 800ebe6:	e7ed      	b.n	800ebc4 <_svfiprintf_r+0x1c0>
 800ebe8:	080109f8 	.word	0x080109f8
 800ebec:	08010a02 	.word	0x08010a02
 800ebf0:	0800c69d 	.word	0x0800c69d
 800ebf4:	0800e94d 	.word	0x0800e94d
 800ebf8:	080109fe 	.word	0x080109fe

0800ebfc <__sfputc_r>:
 800ebfc:	6893      	ldr	r3, [r2, #8]
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	b410      	push	{r4}
 800ec04:	6093      	str	r3, [r2, #8]
 800ec06:	da08      	bge.n	800ec1a <__sfputc_r+0x1e>
 800ec08:	6994      	ldr	r4, [r2, #24]
 800ec0a:	42a3      	cmp	r3, r4
 800ec0c:	db01      	blt.n	800ec12 <__sfputc_r+0x16>
 800ec0e:	290a      	cmp	r1, #10
 800ec10:	d103      	bne.n	800ec1a <__sfputc_r+0x1e>
 800ec12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec16:	f7fe ba8e 	b.w	800d136 <__swbuf_r>
 800ec1a:	6813      	ldr	r3, [r2, #0]
 800ec1c:	1c58      	adds	r0, r3, #1
 800ec1e:	6010      	str	r0, [r2, #0]
 800ec20:	7019      	strb	r1, [r3, #0]
 800ec22:	4608      	mov	r0, r1
 800ec24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <__sfputs_r>:
 800ec2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2c:	4606      	mov	r6, r0
 800ec2e:	460f      	mov	r7, r1
 800ec30:	4614      	mov	r4, r2
 800ec32:	18d5      	adds	r5, r2, r3
 800ec34:	42ac      	cmp	r4, r5
 800ec36:	d101      	bne.n	800ec3c <__sfputs_r+0x12>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e007      	b.n	800ec4c <__sfputs_r+0x22>
 800ec3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec40:	463a      	mov	r2, r7
 800ec42:	4630      	mov	r0, r6
 800ec44:	f7ff ffda 	bl	800ebfc <__sfputc_r>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d1f3      	bne.n	800ec34 <__sfputs_r+0xa>
 800ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec50 <_vfiprintf_r>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	460d      	mov	r5, r1
 800ec56:	b09d      	sub	sp, #116	@ 0x74
 800ec58:	4614      	mov	r4, r2
 800ec5a:	4698      	mov	r8, r3
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	b118      	cbz	r0, 800ec68 <_vfiprintf_r+0x18>
 800ec60:	6a03      	ldr	r3, [r0, #32]
 800ec62:	b90b      	cbnz	r3, 800ec68 <_vfiprintf_r+0x18>
 800ec64:	f7fe f95e 	bl	800cf24 <__sinit>
 800ec68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec6a:	07d9      	lsls	r1, r3, #31
 800ec6c:	d405      	bmi.n	800ec7a <_vfiprintf_r+0x2a>
 800ec6e:	89ab      	ldrh	r3, [r5, #12]
 800ec70:	059a      	lsls	r2, r3, #22
 800ec72:	d402      	bmi.n	800ec7a <_vfiprintf_r+0x2a>
 800ec74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec76:	f7fe fb70 	bl	800d35a <__retarget_lock_acquire_recursive>
 800ec7a:	89ab      	ldrh	r3, [r5, #12]
 800ec7c:	071b      	lsls	r3, r3, #28
 800ec7e:	d501      	bpl.n	800ec84 <_vfiprintf_r+0x34>
 800ec80:	692b      	ldr	r3, [r5, #16]
 800ec82:	b99b      	cbnz	r3, 800ecac <_vfiprintf_r+0x5c>
 800ec84:	4629      	mov	r1, r5
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7fe fa94 	bl	800d1b4 <__swsetup_r>
 800ec8c:	b170      	cbz	r0, 800ecac <_vfiprintf_r+0x5c>
 800ec8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec90:	07dc      	lsls	r4, r3, #31
 800ec92:	d504      	bpl.n	800ec9e <_vfiprintf_r+0x4e>
 800ec94:	f04f 30ff 	mov.w	r0, #4294967295
 800ec98:	b01d      	add	sp, #116	@ 0x74
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9e:	89ab      	ldrh	r3, [r5, #12]
 800eca0:	0598      	lsls	r0, r3, #22
 800eca2:	d4f7      	bmi.n	800ec94 <_vfiprintf_r+0x44>
 800eca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eca6:	f7fe fb59 	bl	800d35c <__retarget_lock_release_recursive>
 800ecaa:	e7f3      	b.n	800ec94 <_vfiprintf_r+0x44>
 800ecac:	2300      	movs	r3, #0
 800ecae:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecb0:	2320      	movs	r3, #32
 800ecb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecba:	2330      	movs	r3, #48	@ 0x30
 800ecbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee6c <_vfiprintf_r+0x21c>
 800ecc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecc4:	f04f 0901 	mov.w	r9, #1
 800ecc8:	4623      	mov	r3, r4
 800ecca:	469a      	mov	sl, r3
 800eccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecd0:	b10a      	cbz	r2, 800ecd6 <_vfiprintf_r+0x86>
 800ecd2:	2a25      	cmp	r2, #37	@ 0x25
 800ecd4:	d1f9      	bne.n	800ecca <_vfiprintf_r+0x7a>
 800ecd6:	ebba 0b04 	subs.w	fp, sl, r4
 800ecda:	d00b      	beq.n	800ecf4 <_vfiprintf_r+0xa4>
 800ecdc:	465b      	mov	r3, fp
 800ecde:	4622      	mov	r2, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	4630      	mov	r0, r6
 800ece4:	f7ff ffa1 	bl	800ec2a <__sfputs_r>
 800ece8:	3001      	adds	r0, #1
 800ecea:	f000 80a7 	beq.w	800ee3c <_vfiprintf_r+0x1ec>
 800ecee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecf0:	445a      	add	r2, fp
 800ecf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecf4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f000 809f 	beq.w	800ee3c <_vfiprintf_r+0x1ec>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f04f 32ff 	mov.w	r2, #4294967295
 800ed04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed08:	f10a 0a01 	add.w	sl, sl, #1
 800ed0c:	9304      	str	r3, [sp, #16]
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed16:	4654      	mov	r4, sl
 800ed18:	2205      	movs	r2, #5
 800ed1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed1e:	4853      	ldr	r0, [pc, #332]	@ (800ee6c <_vfiprintf_r+0x21c>)
 800ed20:	f7f1 fa5e 	bl	80001e0 <memchr>
 800ed24:	9a04      	ldr	r2, [sp, #16]
 800ed26:	b9d8      	cbnz	r0, 800ed60 <_vfiprintf_r+0x110>
 800ed28:	06d1      	lsls	r1, r2, #27
 800ed2a:	bf44      	itt	mi
 800ed2c:	2320      	movmi	r3, #32
 800ed2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed32:	0713      	lsls	r3, r2, #28
 800ed34:	bf44      	itt	mi
 800ed36:	232b      	movmi	r3, #43	@ 0x2b
 800ed38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed42:	d015      	beq.n	800ed70 <_vfiprintf_r+0x120>
 800ed44:	9a07      	ldr	r2, [sp, #28]
 800ed46:	4654      	mov	r4, sl
 800ed48:	2000      	movs	r0, #0
 800ed4a:	f04f 0c0a 	mov.w	ip, #10
 800ed4e:	4621      	mov	r1, r4
 800ed50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed54:	3b30      	subs	r3, #48	@ 0x30
 800ed56:	2b09      	cmp	r3, #9
 800ed58:	d94b      	bls.n	800edf2 <_vfiprintf_r+0x1a2>
 800ed5a:	b1b0      	cbz	r0, 800ed8a <_vfiprintf_r+0x13a>
 800ed5c:	9207      	str	r2, [sp, #28]
 800ed5e:	e014      	b.n	800ed8a <_vfiprintf_r+0x13a>
 800ed60:	eba0 0308 	sub.w	r3, r0, r8
 800ed64:	fa09 f303 	lsl.w	r3, r9, r3
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	46a2      	mov	sl, r4
 800ed6e:	e7d2      	b.n	800ed16 <_vfiprintf_r+0xc6>
 800ed70:	9b03      	ldr	r3, [sp, #12]
 800ed72:	1d19      	adds	r1, r3, #4
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	9103      	str	r1, [sp, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bfbb      	ittet	lt
 800ed7c:	425b      	neglt	r3, r3
 800ed7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ed82:	9307      	strge	r3, [sp, #28]
 800ed84:	9307      	strlt	r3, [sp, #28]
 800ed86:	bfb8      	it	lt
 800ed88:	9204      	strlt	r2, [sp, #16]
 800ed8a:	7823      	ldrb	r3, [r4, #0]
 800ed8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed8e:	d10a      	bne.n	800eda6 <_vfiprintf_r+0x156>
 800ed90:	7863      	ldrb	r3, [r4, #1]
 800ed92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed94:	d132      	bne.n	800edfc <_vfiprintf_r+0x1ac>
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	9203      	str	r2, [sp, #12]
 800ed9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eda2:	3402      	adds	r4, #2
 800eda4:	9305      	str	r3, [sp, #20]
 800eda6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee7c <_vfiprintf_r+0x22c>
 800edaa:	7821      	ldrb	r1, [r4, #0]
 800edac:	2203      	movs	r2, #3
 800edae:	4650      	mov	r0, sl
 800edb0:	f7f1 fa16 	bl	80001e0 <memchr>
 800edb4:	b138      	cbz	r0, 800edc6 <_vfiprintf_r+0x176>
 800edb6:	9b04      	ldr	r3, [sp, #16]
 800edb8:	eba0 000a 	sub.w	r0, r0, sl
 800edbc:	2240      	movs	r2, #64	@ 0x40
 800edbe:	4082      	lsls	r2, r0
 800edc0:	4313      	orrs	r3, r2
 800edc2:	3401      	adds	r4, #1
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edca:	4829      	ldr	r0, [pc, #164]	@ (800ee70 <_vfiprintf_r+0x220>)
 800edcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edd0:	2206      	movs	r2, #6
 800edd2:	f7f1 fa05 	bl	80001e0 <memchr>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d03f      	beq.n	800ee5a <_vfiprintf_r+0x20a>
 800edda:	4b26      	ldr	r3, [pc, #152]	@ (800ee74 <_vfiprintf_r+0x224>)
 800eddc:	bb1b      	cbnz	r3, 800ee26 <_vfiprintf_r+0x1d6>
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	3307      	adds	r3, #7
 800ede2:	f023 0307 	bic.w	r3, r3, #7
 800ede6:	3308      	adds	r3, #8
 800ede8:	9303      	str	r3, [sp, #12]
 800edea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edec:	443b      	add	r3, r7
 800edee:	9309      	str	r3, [sp, #36]	@ 0x24
 800edf0:	e76a      	b.n	800ecc8 <_vfiprintf_r+0x78>
 800edf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800edf6:	460c      	mov	r4, r1
 800edf8:	2001      	movs	r0, #1
 800edfa:	e7a8      	b.n	800ed4e <_vfiprintf_r+0xfe>
 800edfc:	2300      	movs	r3, #0
 800edfe:	3401      	adds	r4, #1
 800ee00:	9305      	str	r3, [sp, #20]
 800ee02:	4619      	mov	r1, r3
 800ee04:	f04f 0c0a 	mov.w	ip, #10
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee0e:	3a30      	subs	r2, #48	@ 0x30
 800ee10:	2a09      	cmp	r2, #9
 800ee12:	d903      	bls.n	800ee1c <_vfiprintf_r+0x1cc>
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d0c6      	beq.n	800eda6 <_vfiprintf_r+0x156>
 800ee18:	9105      	str	r1, [sp, #20]
 800ee1a:	e7c4      	b.n	800eda6 <_vfiprintf_r+0x156>
 800ee1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee20:	4604      	mov	r4, r0
 800ee22:	2301      	movs	r3, #1
 800ee24:	e7f0      	b.n	800ee08 <_vfiprintf_r+0x1b8>
 800ee26:	ab03      	add	r3, sp, #12
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	462a      	mov	r2, r5
 800ee2c:	4b12      	ldr	r3, [pc, #72]	@ (800ee78 <_vfiprintf_r+0x228>)
 800ee2e:	a904      	add	r1, sp, #16
 800ee30:	4630      	mov	r0, r6
 800ee32:	f7fd fc33 	bl	800c69c <_printf_float>
 800ee36:	4607      	mov	r7, r0
 800ee38:	1c78      	adds	r0, r7, #1
 800ee3a:	d1d6      	bne.n	800edea <_vfiprintf_r+0x19a>
 800ee3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee3e:	07d9      	lsls	r1, r3, #31
 800ee40:	d405      	bmi.n	800ee4e <_vfiprintf_r+0x1fe>
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	059a      	lsls	r2, r3, #22
 800ee46:	d402      	bmi.n	800ee4e <_vfiprintf_r+0x1fe>
 800ee48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee4a:	f7fe fa87 	bl	800d35c <__retarget_lock_release_recursive>
 800ee4e:	89ab      	ldrh	r3, [r5, #12]
 800ee50:	065b      	lsls	r3, r3, #25
 800ee52:	f53f af1f 	bmi.w	800ec94 <_vfiprintf_r+0x44>
 800ee56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee58:	e71e      	b.n	800ec98 <_vfiprintf_r+0x48>
 800ee5a:	ab03      	add	r3, sp, #12
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	462a      	mov	r2, r5
 800ee60:	4b05      	ldr	r3, [pc, #20]	@ (800ee78 <_vfiprintf_r+0x228>)
 800ee62:	a904      	add	r1, sp, #16
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7fd feb1 	bl	800cbcc <_printf_i>
 800ee6a:	e7e4      	b.n	800ee36 <_vfiprintf_r+0x1e6>
 800ee6c:	080109f8 	.word	0x080109f8
 800ee70:	08010a02 	.word	0x08010a02
 800ee74:	0800c69d 	.word	0x0800c69d
 800ee78:	0800ec2b 	.word	0x0800ec2b
 800ee7c:	080109fe 	.word	0x080109fe

0800ee80 <__sflush_r>:
 800ee80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	0716      	lsls	r6, r2, #28
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	d454      	bmi.n	800ef3a <__sflush_r+0xba>
 800ee90:	684b      	ldr	r3, [r1, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	dc02      	bgt.n	800ee9c <__sflush_r+0x1c>
 800ee96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	dd48      	ble.n	800ef2e <__sflush_r+0xae>
 800ee9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee9e:	2e00      	cmp	r6, #0
 800eea0:	d045      	beq.n	800ef2e <__sflush_r+0xae>
 800eea2:	2300      	movs	r3, #0
 800eea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eea8:	682f      	ldr	r7, [r5, #0]
 800eeaa:	6a21      	ldr	r1, [r4, #32]
 800eeac:	602b      	str	r3, [r5, #0]
 800eeae:	d030      	beq.n	800ef12 <__sflush_r+0x92>
 800eeb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	0759      	lsls	r1, r3, #29
 800eeb6:	d505      	bpl.n	800eec4 <__sflush_r+0x44>
 800eeb8:	6863      	ldr	r3, [r4, #4]
 800eeba:	1ad2      	subs	r2, r2, r3
 800eebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eebe:	b10b      	cbz	r3, 800eec4 <__sflush_r+0x44>
 800eec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eec2:	1ad2      	subs	r2, r2, r3
 800eec4:	2300      	movs	r3, #0
 800eec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eec8:	6a21      	ldr	r1, [r4, #32]
 800eeca:	4628      	mov	r0, r5
 800eecc:	47b0      	blx	r6
 800eece:	1c43      	adds	r3, r0, #1
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	d106      	bne.n	800eee2 <__sflush_r+0x62>
 800eed4:	6829      	ldr	r1, [r5, #0]
 800eed6:	291d      	cmp	r1, #29
 800eed8:	d82b      	bhi.n	800ef32 <__sflush_r+0xb2>
 800eeda:	4a2a      	ldr	r2, [pc, #168]	@ (800ef84 <__sflush_r+0x104>)
 800eedc:	410a      	asrs	r2, r1
 800eede:	07d6      	lsls	r6, r2, #31
 800eee0:	d427      	bmi.n	800ef32 <__sflush_r+0xb2>
 800eee2:	2200      	movs	r2, #0
 800eee4:	6062      	str	r2, [r4, #4]
 800eee6:	04d9      	lsls	r1, r3, #19
 800eee8:	6922      	ldr	r2, [r4, #16]
 800eeea:	6022      	str	r2, [r4, #0]
 800eeec:	d504      	bpl.n	800eef8 <__sflush_r+0x78>
 800eeee:	1c42      	adds	r2, r0, #1
 800eef0:	d101      	bne.n	800eef6 <__sflush_r+0x76>
 800eef2:	682b      	ldr	r3, [r5, #0]
 800eef4:	b903      	cbnz	r3, 800eef8 <__sflush_r+0x78>
 800eef6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eefa:	602f      	str	r7, [r5, #0]
 800eefc:	b1b9      	cbz	r1, 800ef2e <__sflush_r+0xae>
 800eefe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef02:	4299      	cmp	r1, r3
 800ef04:	d002      	beq.n	800ef0c <__sflush_r+0x8c>
 800ef06:	4628      	mov	r0, r5
 800ef08:	f7ff f89e 	bl	800e048 <_free_r>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef10:	e00d      	b.n	800ef2e <__sflush_r+0xae>
 800ef12:	2301      	movs	r3, #1
 800ef14:	4628      	mov	r0, r5
 800ef16:	47b0      	blx	r6
 800ef18:	4602      	mov	r2, r0
 800ef1a:	1c50      	adds	r0, r2, #1
 800ef1c:	d1c9      	bne.n	800eeb2 <__sflush_r+0x32>
 800ef1e:	682b      	ldr	r3, [r5, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d0c6      	beq.n	800eeb2 <__sflush_r+0x32>
 800ef24:	2b1d      	cmp	r3, #29
 800ef26:	d001      	beq.n	800ef2c <__sflush_r+0xac>
 800ef28:	2b16      	cmp	r3, #22
 800ef2a:	d11e      	bne.n	800ef6a <__sflush_r+0xea>
 800ef2c:	602f      	str	r7, [r5, #0]
 800ef2e:	2000      	movs	r0, #0
 800ef30:	e022      	b.n	800ef78 <__sflush_r+0xf8>
 800ef32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef36:	b21b      	sxth	r3, r3
 800ef38:	e01b      	b.n	800ef72 <__sflush_r+0xf2>
 800ef3a:	690f      	ldr	r7, [r1, #16]
 800ef3c:	2f00      	cmp	r7, #0
 800ef3e:	d0f6      	beq.n	800ef2e <__sflush_r+0xae>
 800ef40:	0793      	lsls	r3, r2, #30
 800ef42:	680e      	ldr	r6, [r1, #0]
 800ef44:	bf08      	it	eq
 800ef46:	694b      	ldreq	r3, [r1, #20]
 800ef48:	600f      	str	r7, [r1, #0]
 800ef4a:	bf18      	it	ne
 800ef4c:	2300      	movne	r3, #0
 800ef4e:	eba6 0807 	sub.w	r8, r6, r7
 800ef52:	608b      	str	r3, [r1, #8]
 800ef54:	f1b8 0f00 	cmp.w	r8, #0
 800ef58:	dde9      	ble.n	800ef2e <__sflush_r+0xae>
 800ef5a:	6a21      	ldr	r1, [r4, #32]
 800ef5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef5e:	4643      	mov	r3, r8
 800ef60:	463a      	mov	r2, r7
 800ef62:	4628      	mov	r0, r5
 800ef64:	47b0      	blx	r6
 800ef66:	2800      	cmp	r0, #0
 800ef68:	dc08      	bgt.n	800ef7c <__sflush_r+0xfc>
 800ef6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef72:	81a3      	strh	r3, [r4, #12]
 800ef74:	f04f 30ff 	mov.w	r0, #4294967295
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	4407      	add	r7, r0
 800ef7e:	eba8 0800 	sub.w	r8, r8, r0
 800ef82:	e7e7      	b.n	800ef54 <__sflush_r+0xd4>
 800ef84:	dfbffffe 	.word	0xdfbffffe

0800ef88 <_fflush_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	690b      	ldr	r3, [r1, #16]
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	460c      	mov	r4, r1
 800ef90:	b913      	cbnz	r3, 800ef98 <_fflush_r+0x10>
 800ef92:	2500      	movs	r5, #0
 800ef94:	4628      	mov	r0, r5
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	b118      	cbz	r0, 800efa2 <_fflush_r+0x1a>
 800ef9a:	6a03      	ldr	r3, [r0, #32]
 800ef9c:	b90b      	cbnz	r3, 800efa2 <_fflush_r+0x1a>
 800ef9e:	f7fd ffc1 	bl	800cf24 <__sinit>
 800efa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0f3      	beq.n	800ef92 <_fflush_r+0xa>
 800efaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efac:	07d0      	lsls	r0, r2, #31
 800efae:	d404      	bmi.n	800efba <_fflush_r+0x32>
 800efb0:	0599      	lsls	r1, r3, #22
 800efb2:	d402      	bmi.n	800efba <_fflush_r+0x32>
 800efb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efb6:	f7fe f9d0 	bl	800d35a <__retarget_lock_acquire_recursive>
 800efba:	4628      	mov	r0, r5
 800efbc:	4621      	mov	r1, r4
 800efbe:	f7ff ff5f 	bl	800ee80 <__sflush_r>
 800efc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efc4:	07da      	lsls	r2, r3, #31
 800efc6:	4605      	mov	r5, r0
 800efc8:	d4e4      	bmi.n	800ef94 <_fflush_r+0xc>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	059b      	lsls	r3, r3, #22
 800efce:	d4e1      	bmi.n	800ef94 <_fflush_r+0xc>
 800efd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efd2:	f7fe f9c3 	bl	800d35c <__retarget_lock_release_recursive>
 800efd6:	e7dd      	b.n	800ef94 <_fflush_r+0xc>

0800efd8 <fiprintf>:
 800efd8:	b40e      	push	{r1, r2, r3}
 800efda:	b503      	push	{r0, r1, lr}
 800efdc:	4601      	mov	r1, r0
 800efde:	ab03      	add	r3, sp, #12
 800efe0:	4805      	ldr	r0, [pc, #20]	@ (800eff8 <fiprintf+0x20>)
 800efe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efe6:	6800      	ldr	r0, [r0, #0]
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	f7ff fe31 	bl	800ec50 <_vfiprintf_r>
 800efee:	b002      	add	sp, #8
 800eff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eff4:	b003      	add	sp, #12
 800eff6:	4770      	bx	lr
 800eff8:	200000ac 	.word	0x200000ac

0800effc <__swhatbuf_r>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	460c      	mov	r4, r1
 800f000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f004:	2900      	cmp	r1, #0
 800f006:	b096      	sub	sp, #88	@ 0x58
 800f008:	4615      	mov	r5, r2
 800f00a:	461e      	mov	r6, r3
 800f00c:	da0d      	bge.n	800f02a <__swhatbuf_r+0x2e>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f014:	f04f 0100 	mov.w	r1, #0
 800f018:	bf14      	ite	ne
 800f01a:	2340      	movne	r3, #64	@ 0x40
 800f01c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f020:	2000      	movs	r0, #0
 800f022:	6031      	str	r1, [r6, #0]
 800f024:	602b      	str	r3, [r5, #0]
 800f026:	b016      	add	sp, #88	@ 0x58
 800f028:	bd70      	pop	{r4, r5, r6, pc}
 800f02a:	466a      	mov	r2, sp
 800f02c:	f000 f862 	bl	800f0f4 <_fstat_r>
 800f030:	2800      	cmp	r0, #0
 800f032:	dbec      	blt.n	800f00e <__swhatbuf_r+0x12>
 800f034:	9901      	ldr	r1, [sp, #4]
 800f036:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f03a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f03e:	4259      	negs	r1, r3
 800f040:	4159      	adcs	r1, r3
 800f042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f046:	e7eb      	b.n	800f020 <__swhatbuf_r+0x24>

0800f048 <__smakebuf_r>:
 800f048:	898b      	ldrh	r3, [r1, #12]
 800f04a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f04c:	079d      	lsls	r5, r3, #30
 800f04e:	4606      	mov	r6, r0
 800f050:	460c      	mov	r4, r1
 800f052:	d507      	bpl.n	800f064 <__smakebuf_r+0x1c>
 800f054:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	6123      	str	r3, [r4, #16]
 800f05c:	2301      	movs	r3, #1
 800f05e:	6163      	str	r3, [r4, #20]
 800f060:	b003      	add	sp, #12
 800f062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f064:	ab01      	add	r3, sp, #4
 800f066:	466a      	mov	r2, sp
 800f068:	f7ff ffc8 	bl	800effc <__swhatbuf_r>
 800f06c:	9f00      	ldr	r7, [sp, #0]
 800f06e:	4605      	mov	r5, r0
 800f070:	4639      	mov	r1, r7
 800f072:	4630      	mov	r0, r6
 800f074:	f7ff f85c 	bl	800e130 <_malloc_r>
 800f078:	b948      	cbnz	r0, 800f08e <__smakebuf_r+0x46>
 800f07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07e:	059a      	lsls	r2, r3, #22
 800f080:	d4ee      	bmi.n	800f060 <__smakebuf_r+0x18>
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	f043 0302 	orr.w	r3, r3, #2
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	e7e2      	b.n	800f054 <__smakebuf_r+0xc>
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	6020      	str	r0, [r4, #0]
 800f092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f096:	81a3      	strh	r3, [r4, #12]
 800f098:	9b01      	ldr	r3, [sp, #4]
 800f09a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f09e:	b15b      	cbz	r3, 800f0b8 <__smakebuf_r+0x70>
 800f0a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f000 f837 	bl	800f118 <_isatty_r>
 800f0aa:	b128      	cbz	r0, 800f0b8 <__smakebuf_r+0x70>
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	f023 0303 	bic.w	r3, r3, #3
 800f0b2:	f043 0301 	orr.w	r3, r3, #1
 800f0b6:	81a3      	strh	r3, [r4, #12]
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	431d      	orrs	r5, r3
 800f0bc:	81a5      	strh	r5, [r4, #12]
 800f0be:	e7cf      	b.n	800f060 <__smakebuf_r+0x18>

0800f0c0 <memmove>:
 800f0c0:	4288      	cmp	r0, r1
 800f0c2:	b510      	push	{r4, lr}
 800f0c4:	eb01 0402 	add.w	r4, r1, r2
 800f0c8:	d902      	bls.n	800f0d0 <memmove+0x10>
 800f0ca:	4284      	cmp	r4, r0
 800f0cc:	4623      	mov	r3, r4
 800f0ce:	d807      	bhi.n	800f0e0 <memmove+0x20>
 800f0d0:	1e43      	subs	r3, r0, #1
 800f0d2:	42a1      	cmp	r1, r4
 800f0d4:	d008      	beq.n	800f0e8 <memmove+0x28>
 800f0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0de:	e7f8      	b.n	800f0d2 <memmove+0x12>
 800f0e0:	4402      	add	r2, r0
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	428a      	cmp	r2, r1
 800f0e6:	d100      	bne.n	800f0ea <memmove+0x2a>
 800f0e8:	bd10      	pop	{r4, pc}
 800f0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0f2:	e7f7      	b.n	800f0e4 <memmove+0x24>

0800f0f4 <_fstat_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d07      	ldr	r5, [pc, #28]	@ (800f114 <_fstat_r+0x20>)
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	4611      	mov	r1, r2
 800f100:	602b      	str	r3, [r5, #0]
 800f102:	f7f5 fce1 	bl	8004ac8 <_fstat>
 800f106:	1c43      	adds	r3, r0, #1
 800f108:	d102      	bne.n	800f110 <_fstat_r+0x1c>
 800f10a:	682b      	ldr	r3, [r5, #0]
 800f10c:	b103      	cbz	r3, 800f110 <_fstat_r+0x1c>
 800f10e:	6023      	str	r3, [r4, #0]
 800f110:	bd38      	pop	{r3, r4, r5, pc}
 800f112:	bf00      	nop
 800f114:	20001968 	.word	0x20001968

0800f118 <_isatty_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4d06      	ldr	r5, [pc, #24]	@ (800f134 <_isatty_r+0x1c>)
 800f11c:	2300      	movs	r3, #0
 800f11e:	4604      	mov	r4, r0
 800f120:	4608      	mov	r0, r1
 800f122:	602b      	str	r3, [r5, #0]
 800f124:	f7f5 fce0 	bl	8004ae8 <_isatty>
 800f128:	1c43      	adds	r3, r0, #1
 800f12a:	d102      	bne.n	800f132 <_isatty_r+0x1a>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b103      	cbz	r3, 800f132 <_isatty_r+0x1a>
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	20001968 	.word	0x20001968

0800f138 <_sbrk_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4d06      	ldr	r5, [pc, #24]	@ (800f154 <_sbrk_r+0x1c>)
 800f13c:	2300      	movs	r3, #0
 800f13e:	4604      	mov	r4, r0
 800f140:	4608      	mov	r0, r1
 800f142:	602b      	str	r3, [r5, #0]
 800f144:	f7f5 fce8 	bl	8004b18 <_sbrk>
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	d102      	bne.n	800f152 <_sbrk_r+0x1a>
 800f14c:	682b      	ldr	r3, [r5, #0]
 800f14e:	b103      	cbz	r3, 800f152 <_sbrk_r+0x1a>
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	bd38      	pop	{r3, r4, r5, pc}
 800f154:	20001968 	.word	0x20001968

0800f158 <memcpy>:
 800f158:	440a      	add	r2, r1
 800f15a:	4291      	cmp	r1, r2
 800f15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f160:	d100      	bne.n	800f164 <memcpy+0xc>
 800f162:	4770      	bx	lr
 800f164:	b510      	push	{r4, lr}
 800f166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f16e:	4291      	cmp	r1, r2
 800f170:	d1f9      	bne.n	800f166 <memcpy+0xe>
 800f172:	bd10      	pop	{r4, pc}

0800f174 <abort>:
 800f174:	b508      	push	{r3, lr}
 800f176:	2006      	movs	r0, #6
 800f178:	f000 f88c 	bl	800f294 <raise>
 800f17c:	2001      	movs	r0, #1
 800f17e:	f7f5 fc53 	bl	8004a28 <_exit>

0800f182 <_calloc_r>:
 800f182:	b570      	push	{r4, r5, r6, lr}
 800f184:	fba1 5402 	umull	r5, r4, r1, r2
 800f188:	b93c      	cbnz	r4, 800f19a <_calloc_r+0x18>
 800f18a:	4629      	mov	r1, r5
 800f18c:	f7fe ffd0 	bl	800e130 <_malloc_r>
 800f190:	4606      	mov	r6, r0
 800f192:	b928      	cbnz	r0, 800f1a0 <_calloc_r+0x1e>
 800f194:	2600      	movs	r6, #0
 800f196:	4630      	mov	r0, r6
 800f198:	bd70      	pop	{r4, r5, r6, pc}
 800f19a:	220c      	movs	r2, #12
 800f19c:	6002      	str	r2, [r0, #0]
 800f19e:	e7f9      	b.n	800f194 <_calloc_r+0x12>
 800f1a0:	462a      	mov	r2, r5
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	f7fe f85c 	bl	800d260 <memset>
 800f1a8:	e7f5      	b.n	800f196 <_calloc_r+0x14>

0800f1aa <__ascii_mbtowc>:
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	b901      	cbnz	r1, 800f1b0 <__ascii_mbtowc+0x6>
 800f1ae:	a901      	add	r1, sp, #4
 800f1b0:	b142      	cbz	r2, 800f1c4 <__ascii_mbtowc+0x1a>
 800f1b2:	b14b      	cbz	r3, 800f1c8 <__ascii_mbtowc+0x1e>
 800f1b4:	7813      	ldrb	r3, [r2, #0]
 800f1b6:	600b      	str	r3, [r1, #0]
 800f1b8:	7812      	ldrb	r2, [r2, #0]
 800f1ba:	1e10      	subs	r0, r2, #0
 800f1bc:	bf18      	it	ne
 800f1be:	2001      	movne	r0, #1
 800f1c0:	b002      	add	sp, #8
 800f1c2:	4770      	bx	lr
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	e7fb      	b.n	800f1c0 <__ascii_mbtowc+0x16>
 800f1c8:	f06f 0001 	mvn.w	r0, #1
 800f1cc:	e7f8      	b.n	800f1c0 <__ascii_mbtowc+0x16>

0800f1ce <_realloc_r>:
 800f1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	4615      	mov	r5, r2
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	b921      	cbnz	r1, 800f1e4 <_realloc_r+0x16>
 800f1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1de:	4611      	mov	r1, r2
 800f1e0:	f7fe bfa6 	b.w	800e130 <_malloc_r>
 800f1e4:	b92a      	cbnz	r2, 800f1f2 <_realloc_r+0x24>
 800f1e6:	f7fe ff2f 	bl	800e048 <_free_r>
 800f1ea:	2400      	movs	r4, #0
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f2:	f000 f86b 	bl	800f2cc <_malloc_usable_size_r>
 800f1f6:	4285      	cmp	r5, r0
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	d802      	bhi.n	800f202 <_realloc_r+0x34>
 800f1fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f200:	d8f4      	bhi.n	800f1ec <_realloc_r+0x1e>
 800f202:	4629      	mov	r1, r5
 800f204:	4640      	mov	r0, r8
 800f206:	f7fe ff93 	bl	800e130 <_malloc_r>
 800f20a:	4607      	mov	r7, r0
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d0ec      	beq.n	800f1ea <_realloc_r+0x1c>
 800f210:	42b5      	cmp	r5, r6
 800f212:	462a      	mov	r2, r5
 800f214:	4621      	mov	r1, r4
 800f216:	bf28      	it	cs
 800f218:	4632      	movcs	r2, r6
 800f21a:	f7ff ff9d 	bl	800f158 <memcpy>
 800f21e:	4621      	mov	r1, r4
 800f220:	4640      	mov	r0, r8
 800f222:	f7fe ff11 	bl	800e048 <_free_r>
 800f226:	463c      	mov	r4, r7
 800f228:	e7e0      	b.n	800f1ec <_realloc_r+0x1e>

0800f22a <__ascii_wctomb>:
 800f22a:	4603      	mov	r3, r0
 800f22c:	4608      	mov	r0, r1
 800f22e:	b141      	cbz	r1, 800f242 <__ascii_wctomb+0x18>
 800f230:	2aff      	cmp	r2, #255	@ 0xff
 800f232:	d904      	bls.n	800f23e <__ascii_wctomb+0x14>
 800f234:	228a      	movs	r2, #138	@ 0x8a
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	f04f 30ff 	mov.w	r0, #4294967295
 800f23c:	4770      	bx	lr
 800f23e:	700a      	strb	r2, [r1, #0]
 800f240:	2001      	movs	r0, #1
 800f242:	4770      	bx	lr

0800f244 <_raise_r>:
 800f244:	291f      	cmp	r1, #31
 800f246:	b538      	push	{r3, r4, r5, lr}
 800f248:	4605      	mov	r5, r0
 800f24a:	460c      	mov	r4, r1
 800f24c:	d904      	bls.n	800f258 <_raise_r+0x14>
 800f24e:	2316      	movs	r3, #22
 800f250:	6003      	str	r3, [r0, #0]
 800f252:	f04f 30ff 	mov.w	r0, #4294967295
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f25a:	b112      	cbz	r2, 800f262 <_raise_r+0x1e>
 800f25c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f260:	b94b      	cbnz	r3, 800f276 <_raise_r+0x32>
 800f262:	4628      	mov	r0, r5
 800f264:	f000 f830 	bl	800f2c8 <_getpid_r>
 800f268:	4622      	mov	r2, r4
 800f26a:	4601      	mov	r1, r0
 800f26c:	4628      	mov	r0, r5
 800f26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f272:	f000 b817 	b.w	800f2a4 <_kill_r>
 800f276:	2b01      	cmp	r3, #1
 800f278:	d00a      	beq.n	800f290 <_raise_r+0x4c>
 800f27a:	1c59      	adds	r1, r3, #1
 800f27c:	d103      	bne.n	800f286 <_raise_r+0x42>
 800f27e:	2316      	movs	r3, #22
 800f280:	6003      	str	r3, [r0, #0]
 800f282:	2001      	movs	r0, #1
 800f284:	e7e7      	b.n	800f256 <_raise_r+0x12>
 800f286:	2100      	movs	r1, #0
 800f288:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f28c:	4620      	mov	r0, r4
 800f28e:	4798      	blx	r3
 800f290:	2000      	movs	r0, #0
 800f292:	e7e0      	b.n	800f256 <_raise_r+0x12>

0800f294 <raise>:
 800f294:	4b02      	ldr	r3, [pc, #8]	@ (800f2a0 <raise+0xc>)
 800f296:	4601      	mov	r1, r0
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	f7ff bfd3 	b.w	800f244 <_raise_r>
 800f29e:	bf00      	nop
 800f2a0:	200000ac 	.word	0x200000ac

0800f2a4 <_kill_r>:
 800f2a4:	b538      	push	{r3, r4, r5, lr}
 800f2a6:	4d07      	ldr	r5, [pc, #28]	@ (800f2c4 <_kill_r+0x20>)
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	4608      	mov	r0, r1
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	602b      	str	r3, [r5, #0]
 800f2b2:	f7f5 fba9 	bl	8004a08 <_kill>
 800f2b6:	1c43      	adds	r3, r0, #1
 800f2b8:	d102      	bne.n	800f2c0 <_kill_r+0x1c>
 800f2ba:	682b      	ldr	r3, [r5, #0]
 800f2bc:	b103      	cbz	r3, 800f2c0 <_kill_r+0x1c>
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	bd38      	pop	{r3, r4, r5, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20001968 	.word	0x20001968

0800f2c8 <_getpid_r>:
 800f2c8:	f7f5 bb96 	b.w	80049f8 <_getpid>

0800f2cc <_malloc_usable_size_r>:
 800f2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d0:	1f18      	subs	r0, r3, #4
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bfbc      	itt	lt
 800f2d6:	580b      	ldrlt	r3, [r1, r0]
 800f2d8:	18c0      	addlt	r0, r0, r3
 800f2da:	4770      	bx	lr

0800f2dc <_init>:
 800f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2de:	bf00      	nop
 800f2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2e2:	bc08      	pop	{r3}
 800f2e4:	469e      	mov	lr, r3
 800f2e6:	4770      	bx	lr

0800f2e8 <_fini>:
 800f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ea:	bf00      	nop
 800f2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ee:	bc08      	pop	{r3}
 800f2f0:	469e      	mov	lr, r3
 800f2f2:	4770      	bx	lr
