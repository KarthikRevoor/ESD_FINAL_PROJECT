
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b50c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800b6b0  0800b6b0  0000c6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c03c  0800c03c  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c03c  0800c03c  0000d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c044  0800c044  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c044  0800c044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c048  0800c048  0000d048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c04c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200001ec  0800c238  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800c238  0000e764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d69  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003452  00000000  00000000  00021f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  000253d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d75  00000000  00000000  00026550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006874  00000000  00000000  000272c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaaa  00000000  00000000  0002db39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e22e  00000000  00000000  000485e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  000d6854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dbfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b694 	.word	0x0800b694

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800b694 	.word	0x0800b694

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	is_received=1;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000208 	.word	0x20000208

08000f08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <SELECT+0x1c>)
 8000f14:	f002 fab0 	bl	8003478 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 fc77 	bl	800280c <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400

08000f28 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <DESELECT+0x1c>)
 8000f34:	f002 faa0 	bl	8003478 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f001 fc67 	bl	800280c <HAL_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40020400 	.word	0x40020400

08000f48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f52:	bf00      	nop
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d1f8      	bne.n	8000f54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f62:	1df9      	adds	r1, r7, #7
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	2201      	movs	r2, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f6a:	f003 f91c 	bl	80041a6 <HAL_SPI_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000270 	.word	0x20000270

08000f7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f88:	bf00      	nop
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d1f8      	bne.n	8000f8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000fa0:	f003 f901 	bl	80041a6 <HAL_SPI_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000270 	.word	0x20000270

08000fb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fba:	bf00      	nop
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d1f8      	bne.n	8000fbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fca:	1dba      	adds	r2, r7, #6
 8000fcc:	1df9      	adds	r1, r7, #7
 8000fce:	2364      	movs	r3, #100	@ 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fd6:	f003 fa2a 	bl	800442e <HAL_SPI_TransmitReceive>

  return data;
 8000fda:	79bb      	ldrb	r3, [r7, #6]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000270 	.word	0x20000270

08000fe8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ff0:	f7ff ffde 	bl	8000fb0 <SPI_RxByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <SD_ReadyWait+0x30>)
 800100c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001010:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8001012:	f7ff ffcd 	bl	8000fb0 <SPI_RxByte>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d003      	beq.n	8001028 <SD_ReadyWait+0x24>
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SD_ReadyWait+0x30>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <SD_ReadyWait+0xe>

  return res;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020e 	.word	0x2000020e

08001038 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800103e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001042:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001044:	f7ff ff70 	bl	8000f28 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e005      	b.n	800105a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800104e:	20ff      	movs	r0, #255	@ 0xff
 8001050:	f7ff ff7a 	bl	8000f48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b09      	cmp	r3, #9
 800105e:	ddf6      	ble.n	800104e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001060:	f7ff ff52 	bl	8000f08 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001078:	2395      	movs	r3, #149	@ 0x95
 800107a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800107c:	463b      	mov	r3, r7
 800107e:	2106      	movs	r1, #6
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff7b 	bl	8000f7c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001086:	e002      	b.n	800108e <SD_PowerOn+0x56>
  {
    cnt--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3b01      	subs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800108e:	f7ff ff8f 	bl	8000fb0 <SPI_RxByte>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d002      	beq.n	800109e <SD_PowerOn+0x66>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <SD_PowerOn+0x50>
  }

  DESELECT();
 800109e:	f7ff ff43 	bl	8000f28 <DESELECT>
  SPI_TxByte(0XFF);
 80010a2:	20ff      	movs	r0, #255	@ 0xff
 80010a4:	f7ff ff50 	bl	8000f48 <SPI_TxByte>

  PowerFlag = 1;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <SD_PowerOn+0x80>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000211 	.word	0x20000211

080010bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <SD_PowerOff+0x14>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000211 	.word	0x20000211

080010d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <SD_CheckPower+0x14>)
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000211 	.word	0x20000211

080010ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <SD_RxDataBlock+0x58>)
 80010f8:	22c8      	movs	r2, #200	@ 0xc8
 80010fa:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80010fc:	f7ff ff58 	bl	8000fb0 <SPI_RxByte>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2bff      	cmp	r3, #255	@ 0xff
 8001108:	d103      	bne.n	8001112 <SD_RxDataBlock+0x26>
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <SD_RxDataBlock+0x58>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2bfe      	cmp	r3, #254	@ 0xfe
 8001116:	d001      	beq.n	800111c <SD_RxDataBlock+0x30>
 8001118:	2300      	movs	r3, #0
 800111a:	e00f      	b.n	800113c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff60 	bl	8000fe8 <SPI_RxBytePtr>
  } while(len--);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8001132:	f7ff ff3d 	bl	8000fb0 <SPI_RxByte>
  SPI_RxByte();
 8001136:	f7ff ff3b 	bl	8000fb0 <SPI_RxByte>

  return TRUE;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000020c 	.word	0x2000020c

08001148 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001158:	f7ff ff54 	bl	8001004 <SD_ReadyWait>
 800115c:	4603      	mov	r3, r0
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d001      	beq.n	8001166 <SD_TxDataBlock+0x1e>
 8001162:	2300      	movs	r3, #0
 8001164:	e02f      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feed 	bl	8000f48 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	2bfd      	cmp	r3, #253	@ 0xfd
 8001172:	d020      	beq.n	80011b6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff feff 	bl	8000f7c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800117e:	f7ff ff17 	bl	8000fb0 <SPI_RxByte>
    SPI_RxByte();
 8001182:	f7ff ff15 	bl	8000fb0 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001186:	e00b      	b.n	80011a0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001188:	f7ff ff12 	bl	8000fb0 <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2b05      	cmp	r3, #5
 8001198:	d006      	beq.n	80011a8 <SD_TxDataBlock+0x60>
      i++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b40      	cmp	r3, #64	@ 0x40
 80011a4:	d9f0      	bls.n	8001188 <SD_TxDataBlock+0x40>
 80011a6:	e000      	b.n	80011aa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80011a8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80011aa:	bf00      	nop
 80011ac:	f7ff ff00 	bl	8000fb0 <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0fa      	beq.n	80011ac <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d101      	bne.n	80011c4 <SD_TxDataBlock+0x7c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011da:	f7ff ff13 	bl	8001004 <SD_ReadyWait>
 80011de:	4603      	mov	r3, r0
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	d001      	beq.n	80011e8 <SD_SendCmd+0x1a>
 80011e4:	23ff      	movs	r3, #255	@ 0xff
 80011e6:	e042      	b.n	800126e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff feac 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fea6 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fea0 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe9a 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe95 	bl	8000f48 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b40      	cmp	r3, #64	@ 0x40
 8001222:	d102      	bne.n	800122a <SD_SendCmd+0x5c>
 8001224:	2395      	movs	r3, #149	@ 0x95
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e007      	b.n	800123a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b48      	cmp	r3, #72	@ 0x48
 800122e:	d102      	bne.n	8001236 <SD_SendCmd+0x68>
 8001230:	2387      	movs	r3, #135	@ 0x87
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <SD_SendCmd+0x6c>
  else crc = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe83 	bl	8000f48 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b4c      	cmp	r3, #76	@ 0x4c
 8001246:	d101      	bne.n	800124c <SD_SendCmd+0x7e>
 8001248:	f7ff feb2 	bl	8000fb0 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800124c:	230a      	movs	r3, #10
 800124e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001250:	f7ff feae 	bl	8000fb0 <SPI_RxByte>
 8001254:	4603      	mov	r3, r0
 8001256:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001258:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da05      	bge.n	800126c <SD_SendCmd+0x9e>
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3b01      	subs	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f1      	bne.n	8001250 <SD_SendCmd+0x82>

  return res;
 800126c:	7b7b      	ldrb	r3, [r7, #13]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_disk_initialize+0x14>
 8001288:	2301      	movs	r3, #1
 800128a:	e0d1      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800128c:	4b6a      	ldr	r3, [pc, #424]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <SD_disk_initialize+0x2a>
 800129a:	4b67      	ldr	r3, [pc, #412]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	e0c6      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80012a2:	f7ff fec9 	bl	8001038 <SD_PowerOn>

  /* slave select */
  SELECT();
 80012a6:	f7ff fe2f 	bl	8000f08 <SELECT>

  /* check disk type */
  type = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80012ae:	2100      	movs	r1, #0
 80012b0:	2040      	movs	r0, #64	@ 0x40
 80012b2:	f7ff ff8c 	bl	80011ce <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 80a1 	bne.w	8001400 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80012be:	4b5f      	ldr	r3, [pc, #380]	@ (800143c <SD_disk_initialize+0x1c4>)
 80012c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012c4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012c6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80012ca:	2048      	movs	r0, #72	@ 0x48
 80012cc:	f7ff ff7f 	bl	80011ce <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d155      	bne.n	8001382 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00c      	b.n	80012f6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80012dc:	7bfc      	ldrb	r4, [r7, #15]
 80012de:	f7ff fe67 	bl	8000fb0 <SPI_RxByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	f104 0310 	add.w	r3, r4, #16
 80012ea:	443b      	add	r3, r7
 80012ec:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d9ef      	bls.n	80012dc <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d17e      	bne.n	8001400 <SD_disk_initialize+0x188>
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2baa      	cmp	r3, #170	@ 0xaa
 8001306:	d17b      	bne.n	8001400 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001308:	2100      	movs	r1, #0
 800130a:	2077      	movs	r0, #119	@ 0x77
 800130c:	f7ff ff5f 	bl	80011ce <SD_SendCmd>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d807      	bhi.n	8001326 <SD_disk_initialize+0xae>
 8001316:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800131a:	2069      	movs	r0, #105	@ 0x69
 800131c:	f7ff ff57 	bl	80011ce <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001326:	4b45      	ldr	r3, [pc, #276]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ec      	bne.n	8001308 <SD_disk_initialize+0x90>
 800132e:	e000      	b.n	8001332 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001330:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d062      	beq.n	8001400 <SD_disk_initialize+0x188>
 800133a:	2100      	movs	r1, #0
 800133c:	207a      	movs	r0, #122	@ 0x7a
 800133e:	f7ff ff46 	bl	80011ce <SD_SendCmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15b      	bne.n	8001400 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e00c      	b.n	8001368 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800134e:	7bfc      	ldrb	r4, [r7, #15]
 8001350:	f7ff fe2e 	bl	8000fb0 <SPI_RxByte>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	f104 0310 	add.w	r3, r4, #16
 800135c:	443b      	add	r3, r7
 800135e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d9ef      	bls.n	800134e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800136e:	7a3b      	ldrb	r3, [r7, #8]
 8001370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x104>
 8001378:	230c      	movs	r3, #12
 800137a:	e000      	b.n	800137e <SD_disk_initialize+0x106>
 800137c:	2304      	movs	r3, #4
 800137e:	73bb      	strb	r3, [r7, #14]
 8001380:	e03e      	b.n	8001400 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	@ 0x77
 8001386:	f7ff ff22 	bl	80011ce <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d808      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 8001390:	2100      	movs	r1, #0
 8001392:	2069      	movs	r0, #105	@ 0x69
 8001394:	f7ff ff1b 	bl	80011ce <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d801      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e000      	b.n	80013a4 <SD_disk_initialize+0x12c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d10e      	bne.n	80013ca <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013ac:	2100      	movs	r1, #0
 80013ae:	2077      	movs	r0, #119	@ 0x77
 80013b0:	f7ff ff0d 	bl	80011ce <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d80e      	bhi.n	80013d8 <SD_disk_initialize+0x160>
 80013ba:	2100      	movs	r1, #0
 80013bc:	2069      	movs	r0, #105	@ 0x69
 80013be:	f7ff ff06 	bl	80011ce <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <SD_disk_initialize+0x160>
 80013c8:	e00c      	b.n	80013e4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ca:	2100      	movs	r1, #0
 80013cc:	2041      	movs	r0, #65	@ 0x41
 80013ce:	f7ff fefe 	bl	80011ce <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e2      	bne.n	80013a6 <SD_disk_initialize+0x12e>
 80013e0:	e000      	b.n	80013e4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013e2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <SD_disk_initialize+0x184>
 80013ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f0:	2050      	movs	r0, #80	@ 0x50
 80013f2:	f7ff feec 	bl	80011ce <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SD_disk_initialize+0x188>
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <SD_disk_initialize+0x1c8>)
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001406:	f7ff fd8f 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800140a:	f7ff fdd1 	bl	8000fb0 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e001      	b.n	800142a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001426:	f7ff fe49 	bl	80010bc <SD_PowerOff>
  }

  return Stat;
 800142a:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	2000020c 	.word	0x2000020c
 8001440:	20000210 	.word	0x20000210

08001444 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SD_disk_status+0x14>
 8001454:	2301      	movs	r3, #1
 8001456:	e002      	b.n	800145e <SD_disk_status+0x1a>
  return Stat;
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SD_disk_status+0x28>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <SD_disk_read+0x1c>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <SD_disk_read+0x20>
 800148c:	2304      	movs	r3, #4
 800148e:	e051      	b.n	8001534 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SD_disk_read+0xcc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_read+0x32>
 800149e:	2303      	movs	r3, #3
 80014a0:	e048      	b.n	8001534 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80014a2:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <SD_disk_read+0xd0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_read+0x44>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80014b4:	f7ff fd28 	bl	8000f08 <SELECT>

  if (count == 1)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d111      	bne.n	80014e2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff fe84 	bl	80011ce <SD_SendCmd>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d129      	bne.n	8001520 <SD_disk_read+0xb0>
 80014cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f7ff fe0b 	bl	80010ec <SD_RxDataBlock>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d021      	beq.n	8001520 <SD_disk_read+0xb0>
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	e01e      	b.n	8001520 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2052      	movs	r0, #82	@ 0x52
 80014e6:	f7ff fe72 	bl	80011ce <SD_SendCmd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d117      	bne.n	8001520 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f7ff fdf9 	bl	80010ec <SD_RxDataBlock>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <SD_disk_read+0xa6>
        buff += 512;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001506:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ed      	bne.n	80014f0 <SD_disk_read+0x80>
 8001514:	e000      	b.n	8001518 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001516:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	204c      	movs	r0, #76	@ 0x4c
 800151c:	f7ff fe57 	bl	80011ce <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001520:	f7ff fd02 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 8001524:	f7ff fd44 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000210 	.word	0x20000210

08001544 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <SD_disk_write+0x1c>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SD_disk_write+0x20>
 8001560:	2304      	movs	r3, #4
 8001562:	e06b      	b.n	800163c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <SD_disk_write+0x100>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_write+0x32>
 8001572:	2303      	movs	r3, #3
 8001574:	e062      	b.n	800163c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <SD_disk_write+0x100>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_write+0x44>
 8001584:	2302      	movs	r3, #2
 8001586:	e059      	b.n	800163c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001588:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <SD_disk_write+0x104>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <SD_disk_write+0x56>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	607b      	str	r3, [r7, #4]

  SELECT();
 800159a:	f7ff fcb5 	bl	8000f08 <SELECT>

  if (count == 1)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d110      	bne.n	80015c6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	2058      	movs	r0, #88	@ 0x58
 80015a8:	f7ff fe11 	bl	80011ce <SD_SendCmd>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d13a      	bne.n	8001628 <SD_disk_write+0xe4>
 80015b2:	21fe      	movs	r1, #254	@ 0xfe
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fdc7 	bl	8001148 <SD_TxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d033      	beq.n	8001628 <SD_disk_write+0xe4>
      count = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e030      	b.n	8001628 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <SD_disk_write+0x104>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2077      	movs	r0, #119	@ 0x77
 80015d6:	f7ff fdfa 	bl	80011ce <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	2057      	movs	r0, #87	@ 0x57
 80015de:	f7ff fdf6 	bl	80011ce <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2059      	movs	r0, #89	@ 0x59
 80015e6:	f7ff fdf2 	bl	80011ce <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f0:	21fc      	movs	r1, #252	@ 0xfc
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7ff fda8 	bl	8001148 <SD_TxDataBlock>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <SD_disk_write+0xd0>
        buff += 512;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001604:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <SD_disk_write+0xac>
 8001612:	e000      	b.n	8001616 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001614:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001616:	21fd      	movs	r1, #253	@ 0xfd
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fd95 	bl	8001148 <SD_TxDataBlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <SD_disk_write+0xe4>
      {
        count = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001628:	f7ff fc7e 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800162c:	f7ff fcc0 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000210 	.word	0x20000210

0800164c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b08b      	sub	sp, #44	@ 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	460b      	mov	r3, r1
 800165a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SD_disk_ioctl+0x1e>
 8001666:	2304      	movs	r3, #4
 8001668:	e113      	b.n	8001892 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d124      	bne.n	80016c0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d012      	beq.n	80016a4 <SD_disk_ioctl+0x58>
 800167e:	2b02      	cmp	r3, #2
 8001680:	dc1a      	bgt.n	80016b8 <SD_disk_ioctl+0x6c>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <SD_disk_ioctl+0x40>
 8001686:	2b01      	cmp	r3, #1
 8001688:	d006      	beq.n	8001698 <SD_disk_ioctl+0x4c>
 800168a:	e015      	b.n	80016b8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800168c:	f7ff fd16 	bl	80010bc <SD_PowerOff>
      res = RES_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001696:	e0fa      	b.n	800188e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001698:	f7ff fcce 	bl	8001038 <SD_PowerOn>
      res = RES_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016a2:	e0f4      	b.n	800188e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	1c5c      	adds	r4, r3, #1
 80016a8:	f7ff fd14 	bl	80010d4 <SD_CheckPower>
 80016ac:	4603      	mov	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016b6:	e0ea      	b.n	800188e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016be:	e0e6      	b.n	800188e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c0:	4b76      	ldr	r3, [pc, #472]	@ (800189c <SD_disk_ioctl+0x250>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SD_disk_ioctl+0x86>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0df      	b.n	8001892 <SD_disk_ioctl+0x246>

    SELECT();
 80016d2:	f7ff fc19 	bl	8000f08 <SELECT>

    switch (ctrl)
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	2b0d      	cmp	r3, #13
 80016da:	f200 80c9 	bhi.w	8001870 <SD_disk_ioctl+0x224>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <SD_disk_ioctl+0x98>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080017db 	.word	0x080017db
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	080017cb 	.word	0x080017cb
 80016f0:	08001871 	.word	0x08001871
 80016f4:	08001871 	.word	0x08001871
 80016f8:	08001871 	.word	0x08001871
 80016fc:	08001871 	.word	0x08001871
 8001700:	08001871 	.word	0x08001871
 8001704:	08001871 	.word	0x08001871
 8001708:	08001871 	.word	0x08001871
 800170c:	08001871 	.word	0x08001871
 8001710:	080017ed 	.word	0x080017ed
 8001714:	08001811 	.word	0x08001811
 8001718:	08001835 	.word	0x08001835
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800171c:	2100      	movs	r1, #0
 800171e:	2049      	movs	r0, #73	@ 0x49
 8001720:	f7ff fd55 	bl	80011ce <SD_SendCmd>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80a6 	bne.w	8001878 <SD_disk_ioctl+0x22c>
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2110      	movs	r1, #16
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcda 	bl	80010ec <SD_RxDataBlock>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809c 	beq.w	8001878 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001740:	7b3b      	ldrb	r3, [r7, #12]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10d      	bne.n	8001766 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800174a:	7d7b      	ldrb	r3, [r7, #21]
 800174c:	461a      	mov	r2, r3
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	029a      	lsls	r2, r3, #10
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e02d      	b.n	80017c2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001766:	7c7b      	ldrb	r3, [r7, #17]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7dbb      	ldrb	r3, [r7, #22]
 8001770:	09db      	lsrs	r3, r3, #7
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2da      	uxtb	r2, r3
 8001778:	7d7b      	ldrb	r3, [r7, #21]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0306 	and.w	r3, r3, #6
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3302      	adds	r3, #2
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800178e:	7d3b      	ldrb	r3, [r7, #20]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017b4:	8bfa      	ldrh	r2, [r7, #30]
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	3b09      	subs	r3, #9
 80017bc:	409a      	lsls	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80017c8:	e056      	b.n	8001878 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017d8:	e055      	b.n	8001886 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017da:	f7ff fc13 	bl	8001004 <SD_ReadyWait>
 80017de:	4603      	mov	r3, r0
 80017e0:	2bff      	cmp	r3, #255	@ 0xff
 80017e2:	d14b      	bne.n	800187c <SD_disk_ioctl+0x230>
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ea:	e047      	b.n	800187c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017ec:	2100      	movs	r1, #0
 80017ee:	2049      	movs	r0, #73	@ 0x49
 80017f0:	f7ff fced 	bl	80011ce <SD_SendCmd>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d142      	bne.n	8001880 <SD_disk_ioctl+0x234>
 80017fa:	2110      	movs	r1, #16
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f7ff fc75 	bl	80010ec <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03b      	beq.n	8001880 <SD_disk_ioctl+0x234>
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800180e:	e037      	b.n	8001880 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001810:	2100      	movs	r1, #0
 8001812:	204a      	movs	r0, #74	@ 0x4a
 8001814:	f7ff fcdb 	bl	80011ce <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d132      	bne.n	8001884 <SD_disk_ioctl+0x238>
 800181e:	2110      	movs	r1, #16
 8001820:	6a38      	ldr	r0, [r7, #32]
 8001822:	f7ff fc63 	bl	80010ec <SD_RxDataBlock>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02b      	beq.n	8001884 <SD_disk_ioctl+0x238>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001832:	e027      	b.n	8001884 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001834:	2100      	movs	r1, #0
 8001836:	207a      	movs	r0, #122	@ 0x7a
 8001838:	f7ff fcc9 	bl	80011ce <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001848:	e00b      	b.n	8001862 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800184a:	6a3c      	ldr	r4, [r7, #32]
 800184c:	1c63      	adds	r3, r4, #1
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	f7ff fbae 	bl	8000fb0 <SPI_RxByte>
 8001854:	4603      	mov	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800185c:	3301      	adds	r3, #1
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001866:	2b03      	cmp	r3, #3
 8001868:	d9ef      	bls.n	800184a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001870:	2304      	movs	r3, #4
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001876:	e006      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001878:	bf00      	nop
 800187a:	e004      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001884:	bf00      	nop
    }

    DESELECT();
 8001886:	f7ff fb4f 	bl	8000f28 <DESELECT>
    SPI_RxByte();
 800188a:	f7ff fb91 	bl	8000fb0 <SPI_RxByte>
  }

  return res;
 800188e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001892:	4618      	mov	r0, r3
 8001894:	372c      	adds	r7, #44	@ 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_GPIO_EXTI_Callback>:
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
}

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d102      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000214 	.word	0x20000214

080018c8 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 80018cc:	2080      	movs	r0, #128	@ 0x80
 80018ce:	f001 fded 	bl	80034ac <HAL_GPIO_EXTI_IRQHandler>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <ADC_IRQHandler>:
    NVIC_EnableIRQ(ADC_IRQn);
    //NVIC_SetPriority(ADC_IRQn, 1);
}

// ADC interrupt handler
void ADC_IRQHandler(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 80018dc:	bf00      	nop
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <ADC_IRQHandler+0x3c>)
 80018f2:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <ADC_IRQHandler+0x40>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <ADC_IRQHandler+0x38>)
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012000 	.word	0x40012000
 8001914:	20000218 	.word	0x20000218
 8001918:	2000021a 	.word	0x2000021a

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001920:	f000 ff02 	bl	8002728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001924:	f000 f810 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001928:	f000 f930 	bl	8001b8c <MX_GPIO_Init>
  MX_DMA_Init();
 800192c:	f000 f906 	bl	8001b3c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001930:	f000 f8da 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001934:	f000 f8a0 	bl	8001a78 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001938:	f000 f870 	bl	8001a1c <MX_I2C1_Init>
  MX_FATFS_Init();
 800193c:	f003 ff18 	bl	8005770 <MX_FATFS_Init>
  process_SD_card();
 8001940:	f000 fa9a 	bl	8001e78 <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <main+0x28>

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	2230      	movs	r2, #48	@ 0x30
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f008 f80e 	bl	8009978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <SystemClock_Config+0xcc>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	4a27      	ldr	r2, [pc, #156]	@ (8001a14 <SystemClock_Config+0xcc>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	@ 0x40
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <SystemClock_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001992:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ac:	2310      	movs	r3, #16
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b0:	2302      	movs	r3, #2
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019b8:	2308      	movs	r3, #8
 80019ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019bc:	23c0      	movs	r3, #192	@ 0xc0
 80019be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019c4:	2308      	movs	r3, #8
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 fec9 	bl	8003764 <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019d8:	f000 fb5e 	bl	8002098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019dc:	230f      	movs	r3, #15
 80019de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2302      	movs	r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2103      	movs	r1, #3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 f92a 	bl	8003c54 <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a06:	f000 fb47 	bl	8002098 <Error_Handler>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3750      	adds	r7, #80	@ 0x50
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <MX_I2C1_Init+0x54>)
 8001a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a28:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <MX_I2C1_Init+0x58>)
 8001a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <MX_I2C1_Init+0x50>)
 8001a5a:	f001 fd3f 	bl	80034dc <HAL_I2C_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a64:	f000 fb18 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000021c 	.word	0x2000021c
 8001a70:	40005400 	.word	0x40005400
 8001a74:	000186a0 	.word	0x000186a0

08001a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001a7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <MX_SPI2_Init+0x6c>)
 8001a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001a84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001a8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001ac6:	220a      	movs	r2, #10
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_SPI2_Init+0x68>)
 8001acc:	f002 fae2 	bl	8004094 <HAL_SPI_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001ad6:	f000 fadf 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000270 	.word	0x20000270
 8001ae4:	40003800 	.word	0x40003800

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <MX_USART1_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b20:	f002 ff0a 	bl	8004938 <HAL_HalfDuplex_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f000 fab5 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002c8 	.word	0x200002c8
 8001b38:	40011000 	.word	0x40011000

08001b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <MX_DMA_Init+0x4c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <MX_DMA_Init+0x4c>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <MX_DMA_Init+0x4c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	203a      	movs	r0, #58	@ 0x3a
 8001b64:	f000 ff51 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b68:	203a      	movs	r0, #58	@ 0x3a
 8001b6a:	f000 ff6a 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2046      	movs	r0, #70	@ 0x46
 8001b74:	f000 ff49 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b78:	2046      	movs	r0, #70	@ 0x46
 8001b7a:	f000 ff62 	bl	8002a42 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	4bae      	ldr	r3, [pc, #696]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4aad      	ldr	r2, [pc, #692]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4bab      	ldr	r3, [pc, #684]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4aa6      	ldr	r2, [pc, #664]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4ba4      	ldr	r3, [pc, #656]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4ba0      	ldr	r3, [pc, #640]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a9f      	ldr	r2, [pc, #636]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b9d      	ldr	r3, [pc, #628]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b99      	ldr	r3, [pc, #612]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a98      	ldr	r2, [pc, #608]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b96      	ldr	r3, [pc, #600]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b92      	ldr	r3, [pc, #584]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a91      	ldr	r2, [pc, #580]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b8f      	ldr	r3, [pc, #572]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b8b      	ldr	r3, [pc, #556]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a8a      	ldr	r2, [pc, #552]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b88      	ldr	r3, [pc, #544]	@ (8001e60 <MX_GPIO_Init+0x2d4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	4885      	ldr	r0, [pc, #532]	@ (8001e64 <MX_GPIO_Init+0x2d8>)
 8001c50:	f001 fc12 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2101      	movs	r1, #1
 8001c58:	4883      	ldr	r0, [pc, #524]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001c5a:	f001 fc0d 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001c64:	4881      	ldr	r0, [pc, #516]	@ (8001e6c <MX_GPIO_Init+0x2e0>)
 8001c66:	f001 fc07 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001c70:	487f      	ldr	r0, [pc, #508]	@ (8001e70 <MX_GPIO_Init+0x2e4>)
 8001c72:	f001 fc01 	bl	8003478 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	487b      	ldr	r0, [pc, #492]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001c7c:	f001 fbfc 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c86:	487b      	ldr	r0, [pc, #492]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001c88:	f001 fbf6 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4871      	ldr	r0, [pc, #452]	@ (8001e64 <MX_GPIO_Init+0x2d8>)
 8001ca0:	f001 fa66 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	486a      	ldr	r0, [pc, #424]	@ (8001e64 <MX_GPIO_Init+0x2d8>)
 8001cbc:	f001 fa58 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001cc0:	2332      	movs	r3, #50	@ 0x32
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cc4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4863      	ldr	r0, [pc, #396]	@ (8001e64 <MX_GPIO_Init+0x2d8>)
 8001cd6:	f001 fa4b 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8001cda:	2381      	movs	r3, #129	@ 0x81
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	485d      	ldr	r0, [pc, #372]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001cf2:	f001 fa3d 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d06:	2305      	movs	r3, #5
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4855      	ldr	r0, [pc, #340]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001d12:	f001 fa2d 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4852      	ldr	r0, [pc, #328]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001d2c:	f001 fa20 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d30:	2310      	movs	r3, #16
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d40:	2306      	movs	r3, #6
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	484a      	ldr	r0, [pc, #296]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001d4c:	f001 fa10 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d50:	23e0      	movs	r3, #224	@ 0xe0
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d60:	2305      	movs	r3, #5
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4842      	ldr	r0, [pc, #264]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001d6c:	f001 fa00 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d70:	2320      	movs	r3, #32
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4839      	ldr	r0, [pc, #228]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001d84:	f001 f9f4 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4832      	ldr	r0, [pc, #200]	@ (8001e6c <MX_GPIO_Init+0x2e0>)
 8001da2:	f001 f9e5 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001da6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001daa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	482c      	ldr	r0, [pc, #176]	@ (8001e70 <MX_GPIO_Init+0x2e4>)
 8001dc0:	f001 f9d6 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4826      	ldr	r0, [pc, #152]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001dda:	f001 f9c9 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	481f      	ldr	r0, [pc, #124]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001df8:	f001 f9ba 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001dfc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <MX_GPIO_Init+0x2e8>)
 8001e1a:	f001 f9a9 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e30:	2306      	movs	r3, #6
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480b      	ldr	r0, [pc, #44]	@ (8001e68 <MX_GPIO_Init+0x2dc>)
 8001e3c:	f001 f998 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e40:	2320      	movs	r3, #32
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_GPIO_Init+0x2e4>)
 8001e54:	f001 f98c 	bl	8003170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	@ 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40020000 	.word	0x40020000

08001e78 <process_SD_card>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
void process_SD_card( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001e82:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001e86:	3b04      	subs	r3, #4
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4976      	ldr	r1, [pc, #472]	@ (8002064 <process_SD_card+0x1ec>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 feb7 	bl	8007c00 <f_mount>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001e98:	f102 021f 	add.w	r2, r2, #31
 8001e9c:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001e9e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001ea2:	f103 031f 	add.w	r3, r3, #31
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 8001eac:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001eb0:	f103 031f 	add.w	r3, r3, #31
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	486b      	ldr	r0, [pc, #428]	@ (8002068 <process_SD_card+0x1f0>)
 8001eba:	f007 fc15 	bl	80096e8 <iprintf>
      break;
 8001ebe:	e0c2      	b.n	8002046 <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001ec0:	486a      	ldr	r0, [pc, #424]	@ (800206c <process_SD_card+0x1f4>)
 8001ec2:	f007 fc79 	bl	80097b8 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 8001ec6:	f107 0220 	add.w	r2, r7, #32
 8001eca:	3a1c      	subs	r2, #28
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	3b20      	subs	r3, #32
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4863      	ldr	r0, [pc, #396]	@ (8002064 <process_SD_card+0x1ec>)
 8001ed6:	f006 fc3c 	bl	8008752 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001eda:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001ede:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	3b02      	subs	r3, #2
 8001ee6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001eea:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8001eee:	8952      	ldrh	r2, [r2, #10]
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb0d 	bl	8000514 <__aeabi_ui2d>
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	4b5c      	ldr	r3, [pc, #368]	@ (8002070 <process_SD_card+0x1f8>)
 8001f00:	f7fe fb82 	bl	8000608 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fe54 	bl	8000bb8 <__aeabi_d2uiz>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f16:	f102 0218 	add.w	r2, r2, #24
 8001f1a:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001f1c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001f20:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001f24:	895b      	ldrh	r3, [r3, #10]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001f2c:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe faed 	bl	8000514 <__aeabi_ui2d>
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <process_SD_card+0x1f8>)
 8001f40:	f7fe fb62 	bl	8000608 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fe34 	bl	8000bb8 <__aeabi_d2uiz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f56:	f102 0214 	add.w	r2, r2, #20
 8001f5a:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8001f5c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001f60:	f103 0314 	add.w	r3, r3, #20
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001f6a:	f103 0318 	add.w	r3, r3, #24
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	4840      	ldr	r0, [pc, #256]	@ (8002074 <process_SD_card+0x1fc>)
 8001f72:	f007 fbb9 	bl	80096e8 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001f76:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001f7a:	3b34      	subs	r3, #52	@ 0x34
 8001f7c:	220b      	movs	r2, #11
 8001f7e:	493e      	ldr	r1, [pc, #248]	@ (8002078 <process_SD_card+0x200>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f005 fe83 	bl	8007c8c <f_open>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f8c:	f102 021f 	add.w	r2, r2, #31
 8001f90:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001f92:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001f96:	f103 031f 	add.w	r3, r3, #31
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001fa0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001fa4:	f103 031f 	add.w	r3, r3, #31
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4833      	ldr	r0, [pc, #204]	@ (800207c <process_SD_card+0x204>)
 8001fae:	f007 fb9b 	bl	80096e8 <iprintf>
      break;
 8001fb2:	e048      	b.n	8002046 <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 8001fb4:	4832      	ldr	r0, [pc, #200]	@ (8002080 <process_SD_card+0x208>)
 8001fb6:	f007 fbff 	bl	80097b8 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 8001fba:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fbe:	3b34      	subs	r3, #52	@ 0x34
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4830      	ldr	r0, [pc, #192]	@ (8002084 <process_SD_card+0x20c>)
 8001fc4:	f006 fd2f 	bl	8008a26 <f_puts>

    //close your file
    f_close(&fil);
 8001fc8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fcc:	3b34      	subs	r3, #52	@ 0x34
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f006 fb95 	bl	80086fe <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001fd4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fd8:	3b34      	subs	r3, #52	@ 0x34
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4926      	ldr	r1, [pc, #152]	@ (8002078 <process_SD_card+0x200>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 fe54 	bl	8007c8c <f_open>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001fea:	f102 021f 	add.w	r2, r2, #31
 8001fee:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001ff0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001ff4:	f103 031f 	add.w	r3, r3, #31
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8001ffe:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002002:	f103 031f 	add.w	r3, r3, #31
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	481f      	ldr	r0, [pc, #124]	@ (8002088 <process_SD_card+0x210>)
 800200c:	f007 fb6c 	bl	80096e8 <iprintf>
      break;
 8002010:	e019      	b.n	8002046 <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8002012:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002016:	3a34      	subs	r2, #52	@ 0x34
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	3b18      	subs	r3, #24
 800201e:	2164      	movs	r1, #100	@ 0x64
 8002020:	4618      	mov	r0, r3
 8002022:	f006 fc4b 	bl	80088bc <f_gets>

    printf("Read Data : %s\n", buf);
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	3b18      	subs	r3, #24
 800202c:	4619      	mov	r1, r3
 800202e:	4817      	ldr	r0, [pc, #92]	@ (800208c <process_SD_card+0x214>)
 8002030:	f007 fb5a 	bl	80096e8 <iprintf>

    //close your file
    f_close(&fil);
 8002034:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002038:	3b34      	subs	r3, #52	@ 0x34
 800203a:	4618      	mov	r0, r3
 800203c:	f006 fb5f 	bl	80086fe <f_close>
    printf("Closing File!!!\r\n");
 8002040:	4813      	ldr	r0, [pc, #76]	@ (8002090 <process_SD_card+0x218>)
 8002042:	f007 fbb9 	bl	80097b8 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8002046:	2200      	movs	r2, #0
 8002048:	4906      	ldr	r1, [pc, #24]	@ (8002064 <process_SD_card+0x1ec>)
 800204a:	2000      	movs	r0, #0
 800204c:	f005 fdd8 	bl	8007c00 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8002050:	4810      	ldr	r0, [pc, #64]	@ (8002094 <process_SD_card+0x21c>)
 8002052:	f007 fbb1 	bl	80097b8 <puts>
}
 8002056:	bf00      	nop
 8002058:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800b6b0 	.word	0x0800b6b0
 8002068:	0800b6b4 	.word	0x0800b6b4
 800206c:	0800b6d0 	.word	0x0800b6d0
 8002070:	3fe00000 	.word	0x3fe00000
 8002074:	0800b6f4 	.word	0x0800b6f4
 8002078:	0800b724 	.word	0x0800b724
 800207c:	0800b734 	.word	0x0800b734
 8002080:	0800b758 	.word	0x0800b758
 8002084:	0800b76c 	.word	0x0800b76c
 8002088:	0800b784 	.word	0x0800b784
 800208c:	0800b7a0 	.word	0x0800b7a0
 8002090:	0800b7b0 	.word	0x0800b7b0
 8002094:	0800b7c4 	.word	0x0800b7c4

08002098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <Error_Handler+0x8>

080020a4 <EXTI15_10_IRQHandler>:
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <EXTI15_10_IRQHandler+0x48>)
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <EXTI15_10_IRQHandler+0x48>)
 80020b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ba:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <EXTI15_10_IRQHandler+0x4c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 80020c2:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <EXTI15_10_IRQHandler+0x50>)
 80020c4:	f000 fae6 	bl	8002694 <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <EXTI15_10_IRQHandler+0x48>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <EXTI15_10_IRQHandler+0x48>)
 80020d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020da:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <EXTI15_10_IRQHandler+0x54>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 80020e2:	4806      	ldr	r0, [pc, #24]	@ (80020fc <EXTI15_10_IRQHandler+0x58>)
 80020e4:	f000 fad6 	bl	8002694 <uart_send_string>
    }
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013c00 	.word	0x40013c00
 80020f0:	200003d0 	.word	0x200003d0
 80020f4:	0800b7e8 	.word	0x0800b7e8
 80020f8:	200003d1 	.word	0x200003d1
 80020fc:	0800b804 	.word	0x0800b804

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_MspInit+0x4c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_MspInit+0x4c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_MspInit+0x4c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213e:	2007      	movs	r0, #7
 8002140:	f000 fc58 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_I2C_MspInit+0x84>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12c      	bne.n	80021cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002194:	2312      	movs	r3, #18
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021a0:	2304      	movs	r3, #4
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	480c      	ldr	r0, [pc, #48]	@ (80021dc <HAL_I2C_MspInit+0x8c>)
 80021ac:	f000 ffe0 	bl	8003170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 80021ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_I2C_MspInit+0x88>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	@ 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40005400 	.word	0x40005400
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020400 	.word	0x40020400

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_SPI_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12c      	bne.n	800225c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002210:	6413      	str	r3, [r2, #64]	@ 0x40
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800223a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224c:	2305      	movs	r3, #5
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	@ (800226c <HAL_SPI_MspInit+0x8c>)
 8002258:	f000 ff8a 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40003800 	.word	0x40003800
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400

08002270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <HAL_UART_MspInit+0x150>)
 800228e:	4293      	cmp	r3, r2
 8002290:	f040 8091 	bne.w	80023b6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	4b4a      	ldr	r3, [pc, #296]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c0:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <HAL_UART_MspInit+0x154>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d2:	2312      	movs	r3, #18
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022de:	2307      	movs	r3, #7
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4837      	ldr	r0, [pc, #220]	@ (80023c8 <HAL_UART_MspInit+0x158>)
 80022ea:	f000 ff41 	bl	8003170 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 80022f0:	4a37      	ldr	r2, [pc, #220]	@ (80023d0 <HAL_UART_MspInit+0x160>)
 80022f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022f4:	4b35      	ldr	r3, [pc, #212]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022fc:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b32      	ldr	r3, [pc, #200]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002310:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002312:	2200      	movs	r2, #0
 8002314:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002316:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002322:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800232e:	4827      	ldr	r0, [pc, #156]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002330:	f000 fba2 	bl	8002a78 <HAL_DMA_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800233a:	f7ff fead 	bl	8002098 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002342:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002344:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_UART_MspInit+0x15c>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800234a:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_UART_MspInit+0x168>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002350:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002352:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002356:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800235a:	2240      	movs	r2, #64	@ 0x40
 800235c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235e:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800236a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800238a:	4812      	ldr	r0, [pc, #72]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800238c:	f000 fb74 	bl	8002a78 <HAL_DMA_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002396:	f7ff fe7f 	bl	8002098 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 800239e:	639a      	str	r2, [r3, #56]	@ 0x38
 80023a0:	4a0c      	ldr	r2, [pc, #48]	@ (80023d4 <HAL_UART_MspInit+0x164>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2025      	movs	r0, #37	@ 0x25
 80023ac:	f000 fb2d 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023b0:	2025      	movs	r0, #37	@ 0x25
 80023b2:	f000 fb46 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	@ 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	20000310 	.word	0x20000310
 80023d0:	40026440 	.word	0x40026440
 80023d4:	20000370 	.word	0x20000370
 80023d8:	400264b8 	.word	0x400264b8

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <SysTick_Handler+0x34>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <SysTick_Handler+0x18>
	  Timer1--;
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <SysTick_Handler+0x34>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <SysTick_Handler+0x34>)
 8002446:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <SysTick_Handler+0x38>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <SysTick_Handler+0x2c>
	  Timer2--;
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Handler+0x38>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <SysTick_Handler+0x38>)
 800245a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245c:	f000 f9b6 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000020c 	.word	0x2000020c
 8002468:	2000020e 	.word	0x2000020e

0800246c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <USART1_IRQHandler+0x10>)
 8002472:	f002 fab9 	bl	80049e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002c8 	.word	0x200002c8

08002480 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <DMA2_Stream2_IRQHandler+0x10>)
 8002486:	f000 fc37 	bl	8002cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000310 	.word	0x20000310

08002494 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <DMA2_Stream7_IRQHandler+0x10>)
 800249a:	f000 fc2d 	bl	8002cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000370 	.word	0x20000370

080024a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_kill>:

int _kill(int pid, int sig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c2:	f007 faab 	bl	8009a1c <__errno>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2216      	movs	r2, #22
 80024ca:	601a      	str	r2, [r3, #0]
  return -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_exit>:

void _exit (int status)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ffe7 	bl	80024b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ea:	bf00      	nop
 80024ec:	e7fd      	b.n	80024ea <_exit+0x12>

080024ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00a      	b.n	8002516 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002500:	f3af 8000 	nop.w
 8002504:	4601      	mov	r1, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbf0      	blt.n	8002500 <_read+0x12>
  }

  return len;
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e009      	b.n	800254e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	60ba      	str	r2, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf1      	blt.n	800253a <_write+0x12>
  }
  return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_close>:

int _close(int file)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002588:	605a      	str	r2, [r3, #4]
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_isatty>:

int _isatty(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f007 fa10 	bl	8009a1c <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20020000 	.word	0x20020000
 8002628:	00000400 	.word	0x00000400
 800262c:	200003d4 	.word	0x200003d4
 8002630:	20000768 	.word	0x20000768

08002634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <SystemInit+0x20>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <SystemInit+0x20>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <USART2_IRQHandler>:
// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
}

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <USART2_IRQHandler+0x38>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <USART2_IRQHandler+0x38>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 8002670:	bf00      	nop
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <USART2_IRQHandler+0x38>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f9      	beq.n	8002672 <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <USART2_IRQHandler+0x38>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	6053      	str	r3, [r2, #4]
    }
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40004400 	.word	0x40004400

08002694 <uart_send_string>:

void uart_send_string(const char *str) {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800269c:	e00c      	b.n	80026b8 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 800269e:	bf00      	nop
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <uart_send_string+0x3c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f9      	beq.n	80026a0 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <uart_send_string+0x3c>)
 80026b6:	605a      	str	r2, [r3, #4]
    while (*str) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <uart_send_string+0xa>
    }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40004400 	.word	0x40004400

080026d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800270c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d8:	f7ff ffac 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026dc:	480c      	ldr	r0, [pc, #48]	@ (8002710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026de:	490d      	ldr	r1, [pc, #52]	@ (8002714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002702:	f007 f991 	bl	8009a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002706:	f7ff f909 	bl	800191c <main>
  bx  lr    
 800270a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800270c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002714:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002718:	0800c04c 	.word	0x0800c04c
  ldr r2, =_sbss
 800271c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002720:	20000764 	.word	0x20000764

08002724 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002724:	e7fe      	b.n	8002724 <DMA1_Stream0_IRQHandler>
	...

08002728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800272c:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <HAL_Init+0x40>)
 8002732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_Init+0x40>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <HAL_Init+0x40>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 f94f 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f808 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275c:	f7ff fcd0 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_InitTick+0x54>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_InitTick+0x58>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f967 	bl	8002a5e <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00e      	b.n	80027b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d80a      	bhi.n	80027b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 f92f 	bl	8002a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ac:	4a06      	ldr	r2, [pc, #24]	@ (80027c8 <HAL_InitTick+0x5c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000004 	.word	0x20000004
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	20000008 	.word	0x20000008

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	200003d8 	.word	0x200003d8

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200003d8 	.word	0x200003d8

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000000c 	.word	0x2000000c

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	@ (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff29 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff3e 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff8e 	bl	8002948 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5d 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff31 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffa2 	bl	80029b0 <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff feb6 	bl	80027f4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e099      	b.n	8002bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	e00f      	b.n	8002ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab6:	f7ff fe9d 	bl	80027f4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d908      	bls.n	8002ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e078      	b.n	8002bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e8      	bne.n	8002ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <HAL_DMA_Init+0x158>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d117      	bne.n	8002b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa7b 	bl	8003078 <DMA_CheckFifoParam>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b96:	2301      	movs	r3, #1
 8002b98:	e016      	b.n	8002bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa32 	bl	800300c <DMA_CalcBaseAndBitshift>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	223f      	movs	r2, #63	@ 0x3f
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	f010803f 	.word	0xf010803f

08002bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fe07 	bl	80027f4 <HAL_GetTick>
 8002be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d008      	beq.n	8002c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e052      	b.n	8002cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0216 	bic.w	r2, r2, #22
 8002c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_DMA_Abort+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	e013      	b.n	8002c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c58:	f7ff fdcc 	bl	80027f4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d90c      	bls.n	8002c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e015      	b.n	8002cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e4      	bne.n	8002c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	223f      	movs	r2, #63	@ 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00c      	b.n	8002cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d04:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_DMA_IRQHandler+0x248>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a8e      	ldr	r2, [pc, #568]	@ (8002f44 <HAL_DMA_IRQHandler+0x24c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0a9b      	lsrs	r3, r3, #10
 8002d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2208      	movs	r2, #8
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2204      	movs	r2, #4
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d043      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03c      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2210      	movs	r2, #16
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
 8002e26:	e01f      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
 8002e38:	e016      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0208 	bic.w	r2, r2, #8
 8002e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 808f 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8087 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	2220      	movs	r2, #32
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d136      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0216 	bic.w	r2, r2, #22
 8002eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x1da>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0208 	bic.w	r2, r2, #8
 8002ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	223f      	movs	r2, #63	@ 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07e      	beq.n	8003004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
        }
        return;
 8002f0e:	e079      	b.n	8003004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	e02c      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
 8002f3e:	bf00      	nop
 8002f40:	20000004 	.word	0x20000004
 8002f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e01e      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d032      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2205      	movs	r2, #5
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d307      	bcc.n	8002fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f2      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x2cc>
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e000      	b.n	8003006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003004:	bf00      	nop
    }
  }
}
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3b10      	subs	r3, #16
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <DMA_CalcBaseAndBitshift+0x64>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003026:	4a13      	ldr	r2, [pc, #76]	@ (8003074 <DMA_CalcBaseAndBitshift+0x68>)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d909      	bls.n	800304e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58
 800304c:	e007      	b.n	800305e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	aaaaaaab 	.word	0xaaaaaaab
 8003074:	0800b880 	.word	0x0800b880

08003078 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11f      	bne.n	80030d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d856      	bhi.n	8003146 <DMA_CheckFifoParam+0xce>
 8003098:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <DMA_CheckFifoParam+0x28>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030c3 	.word	0x080030c3
 80030a8:	080030b1 	.word	0x080030b1
 80030ac:	08003147 	.word	0x08003147
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d046      	beq.n	800314a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e043      	b.n	800314a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ca:	d140      	bne.n	800314e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e03d      	b.n	800314e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030da:	d121      	bne.n	8003120 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d837      	bhi.n	8003152 <DMA_CheckFifoParam+0xda>
 80030e2:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <DMA_CheckFifoParam+0x70>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	080030ff 	.word	0x080030ff
 80030f0:	080030f9 	.word	0x080030f9
 80030f4:	08003111 	.word	0x08003111
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e030      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d025      	beq.n	8003156 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310e:	e022      	b.n	8003156 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003118:	d11f      	bne.n	800315a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800311e:	e01c      	b.n	800315a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d903      	bls.n	800312e <DMA_CheckFifoParam+0xb6>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d003      	beq.n	8003134 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800312c:	e018      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      break;
 8003132:	e015      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e00b      	b.n	800315e <DMA_CheckFifoParam+0xe6>
      break;
 8003146:	bf00      	nop
 8003148:	e00a      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
 800314c:	e008      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e006      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;
 8003152:	bf00      	nop
 8003154:	e004      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
 8003158:	e002      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;   
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
    }
  } 
  
  return status; 
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e159      	b.n	8003440 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f040 8148 	bne.w	800343a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d005      	beq.n	80031c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d017      	beq.n	8003260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d123      	bne.n	80032b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a2 	beq.w	800343a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <HAL_GPIO_Init+0x2e8>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	4a56      	ldr	r2, [pc, #344]	@ (8003458 <HAL_GPIO_Init+0x2e8>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003304:	6453      	str	r3, [r2, #68]	@ 0x44
 8003306:	4b54      	ldr	r3, [pc, #336]	@ (8003458 <HAL_GPIO_Init+0x2e8>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003312:	4a52      	ldr	r2, [pc, #328]	@ (800345c <HAL_GPIO_Init+0x2ec>)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a49      	ldr	r2, [pc, #292]	@ (8003460 <HAL_GPIO_Init+0x2f0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d019      	beq.n	8003372 <HAL_GPIO_Init+0x202>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a48      	ldr	r2, [pc, #288]	@ (8003464 <HAL_GPIO_Init+0x2f4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_GPIO_Init+0x1fe>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a47      	ldr	r2, [pc, #284]	@ (8003468 <HAL_GPIO_Init+0x2f8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00d      	beq.n	800336a <HAL_GPIO_Init+0x1fa>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a46      	ldr	r2, [pc, #280]	@ (800346c <HAL_GPIO_Init+0x2fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <HAL_GPIO_Init+0x1f6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a45      	ldr	r2, [pc, #276]	@ (8003470 <HAL_GPIO_Init+0x300>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_GPIO_Init+0x1f2>
 800335e:	2304      	movs	r3, #4
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x204>
 8003362:	2307      	movs	r3, #7
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x204>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x204>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x204>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x204>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	@ (800345c <HAL_GPIO_Init+0x2ec>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <HAL_GPIO_Init+0x304>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003474 <HAL_GPIO_Init+0x304>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <HAL_GPIO_Init+0x304>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a24      	ldr	r2, [pc, #144]	@ (8003474 <HAL_GPIO_Init+0x304>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <HAL_GPIO_Init+0x304>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1a      	ldr	r2, [pc, #104]	@ (8003474 <HAL_GPIO_Init+0x304>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <HAL_GPIO_Init+0x304>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <HAL_GPIO_Init+0x304>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f aea2 	bls.w	800318c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40013c00 	.word	0x40013c00

08003478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
 8003484:	4613      	mov	r3, r2
 8003486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003488:	787b      	ldrb	r3, [r7, #1]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003494:	e003      	b.n	800349e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	041a      	lsls	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	619a      	str	r2, [r3, #24]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f9e8 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e12b      	b.n	8003746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe fe24 	bl	8002150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	@ 0x24
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800353e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003540:	f000 fd80 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8003544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a81      	ldr	r2, [pc, #516]	@ (8003750 <HAL_I2C_Init+0x274>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d807      	bhi.n	8003560 <HAL_I2C_Init+0x84>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a80      	ldr	r2, [pc, #512]	@ (8003754 <HAL_I2C_Init+0x278>)
 8003554:	4293      	cmp	r3, r2
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e006      	b.n	800356e <HAL_I2C_Init+0x92>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a7d      	ldr	r2, [pc, #500]	@ (8003758 <HAL_I2C_Init+0x27c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0e7      	b.n	8003746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a78      	ldr	r2, [pc, #480]	@ (800375c <HAL_I2C_Init+0x280>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9b      	lsrs	r3, r3, #18
 8003580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003750 <HAL_I2C_Init+0x274>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d802      	bhi.n	80035b0 <HAL_I2C_Init+0xd4>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3301      	adds	r3, #1
 80035ae:	e009      	b.n	80035c4 <HAL_I2C_Init+0xe8>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a69      	ldr	r2, [pc, #420]	@ (8003760 <HAL_I2C_Init+0x284>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	495c      	ldr	r1, [pc, #368]	@ (8003750 <HAL_I2C_Init+0x274>)
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d819      	bhi.n	8003618 <HAL_I2C_Init+0x13c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e59      	subs	r1, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035f8:	400b      	ands	r3, r1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_I2C_Init+0x138>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e59      	subs	r1, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fbb1 f3f3 	udiv	r3, r1, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	e051      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003614:	2304      	movs	r3, #4
 8003616:	e04f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HAL_I2C_Init+0x168>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e012      	b.n	800366a <HAL_I2C_Init+0x18e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Init+0x196>
 800366e:	2301      	movs	r3, #1
 8003670:	e022      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10e      	bne.n	8003698 <HAL_I2C_Init+0x1bc>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e58      	subs	r0, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	440b      	add	r3, r1
 8003688:	fbb0 f3f3 	udiv	r3, r0, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003696:	e00f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e58      	subs	r0, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	0099      	lsls	r1, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	6809      	ldr	r1, [r1, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6911      	ldr	r1, [r2, #16]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	000186a0 	.word	0x000186a0
 8003754:	001e847f 	.word	0x001e847f
 8003758:	003d08ff 	.word	0x003d08ff
 800375c:	431bde83 	.word	0x431bde83
 8003760:	10624dd3 	.word	0x10624dd3

08003764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e267      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d075      	beq.n	800386e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d00c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b85      	ldr	r3, [pc, #532]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003796:	2b08      	cmp	r3, #8
 8003798:	d112      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b82      	ldr	r3, [pc, #520]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b7e      	ldr	r3, [pc, #504]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05b      	beq.n	800386c <HAL_RCC_OscConfig+0x108>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d157      	bne.n	800386c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e242      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x74>
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6f      	ldr	r2, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6c      	ldr	r2, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037fc:	4b69      	ldr	r3, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a68      	ldr	r2, [pc, #416]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe ffea 	bl	80027f4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe ffe6 	bl	80027f4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e207      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0xc0>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe ffd6 	bl	80027f4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe ffd2 	bl	80027f4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1f3      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0xe8>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d063      	beq.n	8003942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe ff8b 	bl	80027f4 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe ff87 	bl	80027f4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1a8      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe ff6a 	bl	80027f4 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe ff66 	bl	80027f4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e187      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe ff4a 	bl	80027f4 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fe ff46 	bl	80027f4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e167      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x200>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe ff33 	bl	80027f4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00e      	b.n	80039b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe ff2f 	bl	80027f4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d907      	bls.n	80039b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e150      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470000 	.word	0x42470000
 80039ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ea      	bne.n	8003992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b81      	ldr	r3, [pc, #516]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b77      	ldr	r3, [pc, #476]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a73      	ldr	r2, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe feef 	bl	80027f4 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe feeb 	bl	80027f4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e10c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2ea>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x30c>
 8003a56:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	4b55      	ldr	r3, [pc, #340]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a54      	ldr	r2, [pc, #336]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe feb0 	bl	80027f4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe feac 	bl	80027f4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0cb      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe fe9a 	bl	80027f4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe fe96 	bl	80027f4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0b5      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a1 	beq.w	8003c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d05c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d141      	bne.n	8003b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fe6a 	bl	80027f4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fe66 	bl	80027f4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e087      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	491b      	ldr	r1, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fe3f 	bl	80027f4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fe3b 	bl	80027f4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e05c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x416>
 8003b98:	e054      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fe28 	bl	80027f4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe fe24 	bl	80027f4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e045      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e038      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x4ec>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cc      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d90c      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b8      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b50      	ldr	r3, [pc, #320]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	494d      	ldr	r1, [pc, #308]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d044      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d119      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e067      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4934      	ldr	r1, [pc, #208]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fd56 	bl	80027f4 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe fd52 	bl	80027f4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d20c      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4916      	ldr	r1, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fcb6 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023c00 	.word	0x40023c00
 8003e10:	40023800 	.word	0x40023800
 8003e14:	0800b868 	.word	0x0800b868
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	20000008 	.word	0x20000008

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b094      	sub	sp, #80	@ 0x50
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e38:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x40>
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	f200 80e1 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e52:	e0db      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e58:	e0db      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e5e:	e0d8      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4b6f      	ldr	r3, [pc, #444]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b6a      	ldr	r3, [pc, #424]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0159      	lsls	r1, r3, #5
 8003ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea4:	0150      	lsls	r0, r2, #5
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4621      	mov	r1, r4
 8003eac:	1a51      	subs	r1, r2, r1
 8003eae:	6139      	str	r1, [r7, #16]
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ece:	4651      	mov	r1, sl
 8003ed0:	018a      	lsls	r2, r1, #6
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed8:	4659      	mov	r1, fp
 8003eda:	eb63 0901 	sbc.w	r9, r3, r1
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef2:	4690      	mov	r8, r2
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	eb18 0303 	adds.w	r3, r8, r3
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	462b      	mov	r3, r5
 8003f00:	eb49 0303 	adc.w	r3, r9, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f12:	4629      	mov	r1, r5
 8003f14:	024b      	lsls	r3, r1, #9
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	024a      	lsls	r2, r1, #9
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2200      	movs	r2, #0
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f30:	f7fc fe62 	bl	8000bf8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	e058      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3e:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	2200      	movs	r2, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	4611      	mov	r1, r2
 8003f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6a:	0150      	lsls	r0, r2, #5
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4641      	mov	r1, r8
 8003f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f76:	4649      	mov	r1, r9
 8003f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f90:	ebb2 040a 	subs.w	r4, r2, sl
 8003f94:	eb63 050b 	sbc.w	r5, r3, fp
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	eb45 0303 	adc.w	r3, r5, r3
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	028b      	lsls	r3, r1, #10
 8003fca:	4621      	mov	r1, r4
 8003fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	028a      	lsls	r2, r1, #10
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	61fa      	str	r2, [r7, #28]
 8003fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe4:	f7fc fe08 	bl	8000bf8 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 800400e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004014:	4618      	mov	r0, r3
 8004016:	3750      	adds	r7, #80	@ 0x50
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000004 	.word	0x20000004

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	0800b878 	.word	0x0800b878

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	0800b878 	.word	0x0800b878

08004094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07b      	b.n	800419e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b6:	d009      	beq.n	80040cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
 80040be:	e005      	b.n	80040cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe f87a 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0104 	and.w	r1, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	f003 0210 	and.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b088      	sub	sp, #32
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b6:	f7fe fb1d 	bl	80027f4 <HAL_GetTick>
 80041ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e12a      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x36>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e122      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_SPI_Transmit+0x48>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e11b      	b.n	8004426 <HAL_SPI_Transmit+0x280>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423c:	d10f      	bne.n	800425e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800424c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d007      	beq.n	800427c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004284:	d152      	bne.n	800432c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0xee>
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d145      	bne.n	8004320 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b8:	e032      	b.n	8004320 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d112      	bne.n	80042ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042ec:	e018      	b.n	8004320 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ee:	f7fe fa81 	bl	80027f4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d803      	bhi.n	8004306 <HAL_SPI_Transmit+0x160>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d102      	bne.n	800430c <HAL_SPI_Transmit+0x166>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e082      	b.n	8004426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1c7      	bne.n	80042ba <HAL_SPI_Transmit+0x114>
 800432a:	e053      	b.n	80043d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_SPI_Transmit+0x194>
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d147      	bne.n	80043ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004360:	e033      	b.n	80043ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d113      	bne.n	8004398 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004396:	e018      	b.n	80043ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004398:	f7fe fa2c 	bl	80027f4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d803      	bhi.n	80043b0 <HAL_SPI_Transmit+0x20a>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d102      	bne.n	80043b6 <HAL_SPI_Transmit+0x210>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e02d      	b.n	8004426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1c6      	bne.n	8004362 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fa59 	bl	8004890 <SPI_EndRxTxTransaction>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004424:	2300      	movs	r3, #0
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b08a      	sub	sp, #40	@ 0x28
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800443c:	2301      	movs	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004440:	f7fe f9d8 	bl	80027f4 <HAL_GetTick>
 8004444:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800444c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d00c      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x4a>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004464:	d106      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x46>
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d001      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	e17f      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_SPI_TransmitReceive+0x5c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_TransmitReceive+0x5c>
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e174      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_SPI_TransmitReceive+0x6e>
 8004498:	2302      	movs	r3, #2
 800449a:	e16d      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d003      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2205      	movs	r2, #5
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	887a      	ldrh	r2, [r7, #2]
 80044ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d007      	beq.n	800450c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d17e      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_TransmitReceive+0xf6>
 800451e:	8afb      	ldrh	r3, [r7, #22]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d16c      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	1c9a      	adds	r2, r3, #2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004548:	e059      	b.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x162>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_SPI_TransmitReceive+0x162>
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	2b01      	cmp	r3, #1
 8004566:	d113      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d119      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x1a4>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	b292      	uxth	r2, r2
 80045b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ce:	2301      	movs	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045d2:	f7fe f90f 	bl	80027f4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045de:	429a      	cmp	r2, r3
 80045e0:	d80d      	bhi.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d009      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0bc      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1a0      	bne.n	800454a <HAL_SPI_TransmitReceive+0x11c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d19b      	bne.n	800454a <HAL_SPI_TransmitReceive+0x11c>
 8004612:	e082      	b.n	800471a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x1f4>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d171      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004648:	e05d      	b.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11c      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x264>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x264>
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b01      	cmp	r3, #1
 8004666:	d114      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	7812      	ldrb	r2, [r2, #0]
 8004674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d119      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x2a6>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d014      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046d4:	f7fe f88e 	bl	80027f4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d803      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x2be>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x2c4>
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e038      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d19c      	bne.n	800464a <HAL_SPI_TransmitReceive+0x21c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d197      	bne.n	800464a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f8b6 	bl	8004890 <SPI_EndRxTxTransaction>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e01d      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004776:	2300      	movs	r3, #0
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004790:	f7fe f830 	bl	80027f4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047a0:	f7fe f828 	bl	80027f4 <HAL_GetTick>
 80047a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	015b      	lsls	r3, r3, #5
 80047ac:	0d1b      	lsrs	r3, r3, #20
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b6:	e054      	b.n	8004862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d050      	beq.n	8004862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c0:	f7fe f818 	bl	80027f4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d13d      	bne.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ee:	d111      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f8:	d004      	beq.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004802:	d107      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481c:	d10f      	bne.n	800483e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800483c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e017      	b.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3b01      	subs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d19b      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000004 	.word	0x20000004

08004890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2201      	movs	r2, #1
 80048a4:	2102      	movs	r1, #2
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff6a 	bl	8004780 <SPI_WaitFlagStateUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e032      	b.n	8004928 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <SPI_EndRxTxTransaction+0xa0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004934 <SPI_EndRxTxTransaction+0xa4>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	0d5b      	lsrs	r3, r3, #21
 80048ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e0:	d112      	bne.n	8004908 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff47 	bl	8004780 <SPI_WaitFlagStateUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e00f      	b.n	8004928 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3b01      	subs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d0f2      	beq.n	8004908 <SPI_EndRxTxTransaction+0x78>
 8004922:	e000      	b.n	8004926 <SPI_EndRxTxTransaction+0x96>
        break;
 8004924:	bf00      	nop
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000004 	.word	0x20000004
 8004934:	165e9f81 	.word	0x165e9f81

08004938 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e04a      	b.n	80049e0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd fc86 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	@ 0x24
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800497a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fc83 	bl	8005288 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80049a0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0208 	orr.w	r2, r2, #8
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b0ba      	sub	sp, #232	@ 0xe8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HAL_UART_IRQHandler+0x66>
 8004a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fb5f 	bl	800510a <UART_Receive_IT>
      return;
 8004a4c:	e25b      	b.n	8004f06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80de 	beq.w	8004c14 <HAL_UART_IRQHandler+0x22c>
 8004a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80d1 	beq.w	8004c14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_UART_IRQHandler+0xae>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f043 0201 	orr.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0xd2>
 8004aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0202 	orr.w	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_UART_IRQHandler+0xf6>
 8004ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d011      	beq.n	8004b0e <HAL_UART_IRQHandler+0x126>
 8004aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f043 0208 	orr.w	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 81f2 	beq.w	8004efc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x14e>
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 faea 	bl	800510a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <HAL_UART_IRQHandler+0x17a>
 8004b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d04f      	beq.n	8004c02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9f2 	bl	8004f4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d141      	bne.n	8004bfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1d9      	bne.n	8004b76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d013      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc8 <HAL_UART_IRQHandler+0x3e0>)
 8004bd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe f86c 	bl	8002cb4 <HAL_DMA_Abort_IT>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	e00e      	b.n	8004c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f994 	bl	8004f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	e00a      	b.n	8004c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f990 	bl	8004f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	e006      	b.n	8004c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f98c 	bl	8004f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c0e:	e175      	b.n	8004efc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	bf00      	nop
    return;
 8004c12:	e173      	b.n	8004efc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	f040 814f 	bne.w	8004ebc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8148 	beq.w	8004ebc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8141 	beq.w	8004ebc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	2b40      	cmp	r3, #64	@ 0x40
 8004c5c:	f040 80b6 	bne.w	8004dcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8145 	beq.w	8004f00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	f080 813e 	bcs.w	8004f00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c96:	f000 8088 	beq.w	8004daa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1d9      	bne.n	8004c9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e1      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e3      	bne.n	8004d22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d7a:	f023 0310 	bic.w	r3, r3, #16
 8004d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e3      	bne.n	8004d68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fd ff15 	bl	8002bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8b7 	bl	8004f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dc6:	e09b      	b.n	8004f00 <HAL_UART_IRQHandler+0x518>
 8004dc8:	08005013 	.word	0x08005013
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 808e 	beq.w	8004f04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8089 	beq.w	8004f04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e16:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e3      	bne.n	8004df2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	623b      	str	r3, [r7, #32]
   return(result);
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0310 	bic.w	r3, r3, #16
 8004e86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e94:	61fa      	str	r2, [r7, #28]
 8004e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e3      	bne.n	8004e70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f83d 	bl	8004f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eba:	e023      	b.n	8004f04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_UART_IRQHandler+0x4f4>
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f8b0 	bl	800503a <UART_Transmit_IT>
    return;
 8004eda:	e014      	b.n	8004f06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <HAL_UART_IRQHandler+0x51e>
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8f0 	bl	80050da <UART_EndTransmit_IT>
    return;
 8004efa:	e004      	b.n	8004f06 <HAL_UART_IRQHandler+0x51e>
    return;
 8004efc:	bf00      	nop
 8004efe:	e002      	b.n	8004f06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f00:	bf00      	nop
 8004f02:	e000      	b.n	8004f06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f04:	bf00      	nop
  }
}
 8004f06:	37e8      	adds	r7, #232	@ 0xe8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b095      	sub	sp, #84	@ 0x54
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f74:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d119      	bne.n	8004ff8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0310 	bic.w	r3, r3, #16
 8004fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe4:	61ba      	str	r2, [r7, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005006:	bf00      	nop
 8005008:	3754      	adds	r7, #84	@ 0x54
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff ff77 	bl	8004f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b21      	cmp	r3, #33	@ 0x21
 800504c:	d13e      	bne.n	80050cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005056:	d114      	bne.n	8005082 <UART_Transmit_IT+0x48>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005074:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	1c9a      	adds	r2, r3, #2
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]
 8005080:	e008      	b.n	8005094 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6211      	str	r1, [r2, #32]
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4619      	mov	r1, r3
 80050a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10f      	bne.n	80050c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff ff06 	bl	8004f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b08c      	sub	sp, #48	@ 0x30
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b22      	cmp	r3, #34	@ 0x22
 800511c:	f040 80ae 	bne.w	800527c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005128:	d117      	bne.n	800515a <UART_Receive_IT+0x50>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b29b      	uxth	r3, r3
 8005144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005148:	b29a      	uxth	r2, r3
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	@ 0x28
 8005158:	e026      	b.n	80051a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516c:	d007      	beq.n	800517e <UART_Receive_IT+0x74>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <UART_Receive_IT+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e008      	b.n	800519e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005198:	b2da      	uxtb	r2, r3
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4619      	mov	r1, r3
 80051b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d15d      	bne.n	8005278 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0220 	bic.w	r2, r2, #32
 80051ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d135      	bne.n	800526e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	613b      	str	r3, [r7, #16]
   return(result);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	623a      	str	r2, [r7, #32]
 800522a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	61bb      	str	r3, [r7, #24]
   return(result);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d10a      	bne.n	8005260 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fe64 	bl	8004f34 <HAL_UARTEx_RxEventCallback>
 800526c:	e002      	b.n	8005274 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fe3a 	bl	8000ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e002      	b.n	800527e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3730      	adds	r7, #48	@ 0x30
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b0c0      	sub	sp, #256	@ 0x100
 800528e:	af00      	add	r7, sp, #0
 8005290:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	68d9      	ldr	r1, [r3, #12]
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	ea40 0301 	orr.w	r3, r0, r1
 80052b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	431a      	orrs	r2, r3
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052e0:	f021 010c 	bic.w	r1, r1, #12
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ee:	430b      	orrs	r3, r1
 80052f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	6999      	ldr	r1, [r3, #24]
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	ea40 0301 	orr.w	r3, r0, r1
 800530e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b8f      	ldr	r3, [pc, #572]	@ (8005554 <UART_SetConfig+0x2cc>)
 8005318:	429a      	cmp	r2, r3
 800531a:	d005      	beq.n	8005328 <UART_SetConfig+0xa0>
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8d      	ldr	r3, [pc, #564]	@ (8005558 <UART_SetConfig+0x2d0>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d104      	bne.n	8005332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005328:	f7fe fea0 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 800532c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005330:	e003      	b.n	800533a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005332:	f7fe fe87 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005336:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005344:	f040 810c 	bne.w	8005560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005352:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	1891      	adds	r1, r2, r2
 8005360:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005362:	415b      	adcs	r3, r3
 8005364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800536a:	4621      	mov	r1, r4
 800536c:	eb12 0801 	adds.w	r8, r2, r1
 8005370:	4629      	mov	r1, r5
 8005372:	eb43 0901 	adc.w	r9, r3, r1
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800538a:	4690      	mov	r8, r2
 800538c:	4699      	mov	r9, r3
 800538e:	4623      	mov	r3, r4
 8005390:	eb18 0303 	adds.w	r3, r8, r3
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005398:	462b      	mov	r3, r5
 800539a:	eb49 0303 	adc.w	r3, r9, r3
 800539e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053b6:	460b      	mov	r3, r1
 80053b8:	18db      	adds	r3, r3, r3
 80053ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80053bc:	4613      	mov	r3, r2
 80053be:	eb42 0303 	adc.w	r3, r2, r3
 80053c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053cc:	f7fb fc14 	bl	8000bf8 <__aeabi_uldivmod>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4b61      	ldr	r3, [pc, #388]	@ (800555c <UART_SetConfig+0x2d4>)
 80053d6:	fba3 2302 	umull	r2, r3, r3, r2
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	011c      	lsls	r4, r3, #4
 80053de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	1891      	adds	r1, r2, r2
 80053f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053f8:	415b      	adcs	r3, r3
 80053fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005400:	4641      	mov	r1, r8
 8005402:	eb12 0a01 	adds.w	sl, r2, r1
 8005406:	4649      	mov	r1, r9
 8005408:	eb43 0b01 	adc.w	fp, r3, r1
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800541c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005420:	4692      	mov	sl, r2
 8005422:	469b      	mov	fp, r3
 8005424:	4643      	mov	r3, r8
 8005426:	eb1a 0303 	adds.w	r3, sl, r3
 800542a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800542e:	464b      	mov	r3, r9
 8005430:	eb4b 0303 	adc.w	r3, fp, r3
 8005434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005444:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800544c:	460b      	mov	r3, r1
 800544e:	18db      	adds	r3, r3, r3
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	4613      	mov	r3, r2
 8005454:	eb42 0303 	adc.w	r3, r2, r3
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800545e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005462:	f7fb fbc9 	bl	8000bf8 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4611      	mov	r1, r2
 800546c:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <UART_SetConfig+0x2d4>)
 800546e:	fba3 2301 	umull	r2, r3, r3, r1
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2264      	movs	r2, #100	@ 0x64
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	1acb      	subs	r3, r1, r3
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005482:	4b36      	ldr	r3, [pc, #216]	@ (800555c <UART_SetConfig+0x2d4>)
 8005484:	fba3 2302 	umull	r2, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005490:	441c      	add	r4, r3
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800549c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054ac:	415b      	adcs	r3, r3
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054b4:	4641      	mov	r1, r8
 80054b6:	1851      	adds	r1, r2, r1
 80054b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80054ba:	4649      	mov	r1, r9
 80054bc:	414b      	adcs	r3, r1
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054cc:	4659      	mov	r1, fp
 80054ce:	00cb      	lsls	r3, r1, #3
 80054d0:	4651      	mov	r1, sl
 80054d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d6:	4651      	mov	r1, sl
 80054d8:	00ca      	lsls	r2, r1, #3
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	4642      	mov	r2, r8
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e8:	464b      	mov	r3, r9
 80054ea:	460a      	mov	r2, r1
 80054ec:	eb42 0303 	adc.w	r3, r2, r3
 80054f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005500:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005508:	460b      	mov	r3, r1
 800550a:	18db      	adds	r3, r3, r3
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550e:	4613      	mov	r3, r2
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800551a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800551e:	f7fb fb6b 	bl	8000bf8 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <UART_SetConfig+0x2d4>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	@ 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	3332      	adds	r3, #50	@ 0x32
 800553a:	4a08      	ldr	r2, [pc, #32]	@ (800555c <UART_SetConfig+0x2d4>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f003 0207 	and.w	r2, r3, #7
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4422      	add	r2, r4
 800554e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005550:	e106      	b.n	8005760 <UART_SetConfig+0x4d8>
 8005552:	bf00      	nop
 8005554:	40011000 	.word	0x40011000
 8005558:	40011400 	.word	0x40011400
 800555c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800556a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800556e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005572:	4642      	mov	r2, r8
 8005574:	464b      	mov	r3, r9
 8005576:	1891      	adds	r1, r2, r2
 8005578:	6239      	str	r1, [r7, #32]
 800557a:	415b      	adcs	r3, r3
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
 800557e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005582:	4641      	mov	r1, r8
 8005584:	1854      	adds	r4, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb43 0501 	adc.w	r5, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	00eb      	lsls	r3, r5, #3
 8005596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559a:	00e2      	lsls	r2, r4, #3
 800559c:	4614      	mov	r4, r2
 800559e:	461d      	mov	r5, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	18e3      	adds	r3, r4, r3
 80055a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055a8:	464b      	mov	r3, r9
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055ce:	4629      	mov	r1, r5
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	4621      	mov	r1, r4
 80055d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d8:	4621      	mov	r1, r4
 80055da:	008a      	lsls	r2, r1, #2
 80055dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055e0:	f7fb fb0a 	bl	8000bf8 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4b60      	ldr	r3, [pc, #384]	@ (800576c <UART_SetConfig+0x4e4>)
 80055ea:	fba3 2302 	umull	r2, r3, r3, r2
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	011c      	lsls	r4, r3, #4
 80055f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	1891      	adds	r1, r2, r2
 800560a:	61b9      	str	r1, [r7, #24]
 800560c:	415b      	adcs	r3, r3
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005614:	4641      	mov	r1, r8
 8005616:	1851      	adds	r1, r2, r1
 8005618:	6139      	str	r1, [r7, #16]
 800561a:	4649      	mov	r1, r9
 800561c:	414b      	adcs	r3, r1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800562c:	4659      	mov	r1, fp
 800562e:	00cb      	lsls	r3, r1, #3
 8005630:	4651      	mov	r1, sl
 8005632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005636:	4651      	mov	r1, sl
 8005638:	00ca      	lsls	r2, r1, #3
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	4603      	mov	r3, r0
 8005640:	4642      	mov	r2, r8
 8005642:	189b      	adds	r3, r3, r2
 8005644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005648:	464b      	mov	r3, r9
 800564a:	460a      	mov	r2, r1
 800564c:	eb42 0303 	adc.w	r3, r2, r3
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800565e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800566c:	4649      	mov	r1, r9
 800566e:	008b      	lsls	r3, r1, #2
 8005670:	4641      	mov	r1, r8
 8005672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005676:	4641      	mov	r1, r8
 8005678:	008a      	lsls	r2, r1, #2
 800567a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800567e:	f7fb fabb 	bl	8000bf8 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4611      	mov	r1, r2
 8005688:	4b38      	ldr	r3, [pc, #224]	@ (800576c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2301 	umull	r2, r3, r3, r1
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2264      	movs	r2, #100	@ 0x64
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	1acb      	subs	r3, r1, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	@ 0x32
 800569c:	4a33      	ldr	r2, [pc, #204]	@ (800576c <UART_SetConfig+0x4e4>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056a8:	441c      	add	r4, r3
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80056b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80056b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	1891      	adds	r1, r2, r2
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	415b      	adcs	r3, r3
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c8:	4641      	mov	r1, r8
 80056ca:	1851      	adds	r1, r2, r1
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	4649      	mov	r1, r9
 80056d0:	414b      	adcs	r3, r1
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056e0:	4659      	mov	r1, fp
 80056e2:	00cb      	lsls	r3, r1, #3
 80056e4:	4651      	mov	r1, sl
 80056e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ea:	4651      	mov	r1, sl
 80056ec:	00ca      	lsls	r2, r1, #3
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	4642      	mov	r2, r8
 80056f6:	189b      	adds	r3, r3, r2
 80056f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056fa:	464b      	mov	r3, r9
 80056fc:	460a      	mov	r2, r1
 80056fe:	eb42 0303 	adc.w	r3, r2, r3
 8005702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	663b      	str	r3, [r7, #96]	@ 0x60
 800570e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800571c:	4649      	mov	r1, r9
 800571e:	008b      	lsls	r3, r1, #2
 8005720:	4641      	mov	r1, r8
 8005722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005726:	4641      	mov	r1, r8
 8005728:	008a      	lsls	r2, r1, #2
 800572a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800572e:	f7fb fa63 	bl	8000bf8 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <UART_SetConfig+0x4e4>)
 8005738:	fba3 1302 	umull	r1, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	2164      	movs	r1, #100	@ 0x64
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	3332      	adds	r3, #50	@ 0x32
 800574a:	4a08      	ldr	r2, [pc, #32]	@ (800576c <UART_SetConfig+0x4e4>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	f003 020f 	and.w	r2, r3, #15
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4422      	add	r2, r4
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576c:	51eb851f 	.word	0x51eb851f

08005770 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005774:	4904      	ldr	r1, [pc, #16]	@ (8005788 <MX_FATFS_Init+0x18>)
 8005776:	4805      	ldr	r0, [pc, #20]	@ (800578c <MX_FATFS_Init+0x1c>)
 8005778:	f003 f9c6 	bl	8008b08 <FATFS_LinkDriver>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	4b03      	ldr	r3, [pc, #12]	@ (8005790 <MX_FATFS_Init+0x20>)
 8005782:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200003e0 	.word	0x200003e0
 800578c:	20000010 	.word	0x20000010
 8005790:	200003dc 	.word	0x200003dc

08005794 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005798:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fb fd61 	bl	8001278 <SD_disk_initialize>
 80057b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb fe39 	bl	8001444 <SD_disk_status>
 80057d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /*Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80057ec:	7bf8      	ldrb	r0, [r7, #15]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	f7fb fe3c 	bl	8001470 <SD_disk_read>
 80057f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USER_write>:
  BYTE pdrv,          /* Physical drive nmuber to identify the drive */
  const BYTE *buff,   /* Data to be written */
  DWORD sector,       /* Sector address in LBA */
  UINT count          /* Number of sectors to write */
)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8005812:	7bf8      	ldrb	r0, [r7, #15]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	f7fb fe93 	bl	8001544 <SD_disk_write>
 800581e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USER_ioctl>:
DRESULT USER_ioctl (
  BYTE pdrv,      /* Physical drive nmuber (0..) */
  BYTE cmd,       /* Control code */
  void *buff      /* Buffer to send/receive control data */
)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	603a      	str	r2, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
 8005834:	460b      	mov	r3, r1
 8005836:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8005838:	79b9      	ldrb	r1, [r7, #6]
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fb ff04 	bl	800164c <SD_disk_ioctl>
 8005844:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	4a08      	ldr	r2, [pc, #32]	@ (8005880 <disk_status+0x30>)
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	79fa      	ldrb	r2, [r7, #7]
 8005868:	4905      	ldr	r1, [pc, #20]	@ (8005880 <disk_status+0x30>)
 800586a:	440a      	add	r2, r1
 800586c:	7a12      	ldrb	r2, [r2, #8]
 800586e:	4610      	mov	r0, r2
 8005870:	4798      	blx	r3
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	2000060c 	.word	0x2000060c

08005884 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	4a0e      	ldr	r2, [pc, #56]	@ (80058d0 <disk_initialize+0x4c>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d114      	bne.n	80058c6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <disk_initialize+0x4c>)
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	79fa      	ldrb	r2, [r7, #7]
 80058aa:	4909      	ldr	r1, [pc, #36]	@ (80058d0 <disk_initialize+0x4c>)
 80058ac:	440a      	add	r2, r1
 80058ae:	7a12      	ldrb	r2, [r2, #8]
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	4a03      	ldr	r2, [pc, #12]	@ (80058d0 <disk_initialize+0x4c>)
 80058c2:	2101      	movs	r1, #1
 80058c4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000060c 	.word	0x2000060c

080058d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <disk_read+0x3c>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	689c      	ldr	r4, [r3, #8]
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <disk_read+0x3c>)
 80058f4:	4413      	add	r3, r2
 80058f6:	7a18      	ldrb	r0, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	47a0      	blx	r4
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]
  return res;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd90      	pop	{r4, r7, pc}
 800590e:	bf00      	nop
 8005910:	2000060c 	.word	0x2000060c

08005914 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <disk_write+0x3c>)
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68dc      	ldr	r4, [r3, #12]
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <disk_write+0x3c>)
 8005934:	4413      	add	r3, r2
 8005936:	7a18      	ldrb	r0, [r3, #8]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	47a0      	blx	r4
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
  return res;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	2000060c 	.word	0x2000060c

08005954 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	603a      	str	r2, [r7, #0]
 800595e:	71fb      	strb	r3, [r7, #7]
 8005960:	460b      	mov	r3, r1
 8005962:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	4a09      	ldr	r2, [pc, #36]	@ (800598c <disk_ioctl+0x38>)
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	79fa      	ldrb	r2, [r7, #7]
 8005972:	4906      	ldr	r1, [pc, #24]	@ (800598c <disk_ioctl+0x38>)
 8005974:	440a      	add	r2, r1
 8005976:	7a10      	ldrb	r0, [r2, #8]
 8005978:	79b9      	ldrb	r1, [r7, #6]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	4798      	blx	r3
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
  return res;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000060c 	.word	0x2000060c

08005990 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3301      	adds	r3, #1
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	b21a      	sxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b21b      	sxth	r3, r3
 80059ac:	4313      	orrs	r3, r2
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80059b2:	89fb      	ldrh	r3, [r7, #14]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3303      	adds	r3, #3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	3202      	adds	r2, #2
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	3201      	adds	r2, #1
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	1c53      	adds	r3, r2, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	6179      	str	r1, [r7, #20]
 8005aba:	7812      	ldrb	r2, [r2, #0]
 8005abc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	607b      	str	r3, [r7, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f1      	bne.n	8005aae <mem_cpy+0x1a>
	}
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	617a      	str	r2, [r7, #20]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f3      	bne.n	8005ae6 <mem_set+0x10>
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b0c:	b480      	push	{r7}
 8005b0e:	b089      	sub	sp, #36	@ 0x24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	61ba      	str	r2, [r7, #24]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	1acb      	subs	r3, r1, r3
 8005b38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <mem_cmp+0x40>
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0eb      	beq.n	8005b24 <mem_cmp+0x18>

	return r;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3724      	adds	r7, #36	@ 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b64:	e002      	b.n	8005b6c <chk_chr+0x12>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <chk_chr+0x26>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d1f2      	bne.n	8005b66 <chk_chr+0xc>
	return *str;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	781b      	ldrb	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e029      	b.n	8005bf8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ba4:	4a27      	ldr	r2, [pc, #156]	@ (8005c44 <chk_lock+0xb4>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	4413      	add	r3, r2
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01d      	beq.n	8005bee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005bb2:	4a24      	ldr	r2, [pc, #144]	@ (8005c44 <chk_lock+0xb4>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d116      	bne.n	8005bf2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c44 <chk_lock+0xb4>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	4413      	add	r3, r2
 8005bcc:	3304      	adds	r3, #4
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10c      	bne.n	8005bf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c44 <chk_lock+0xb4>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4413      	add	r3, r2
 8005be0:	3308      	adds	r3, #8
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d102      	bne.n	8005bf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bec:	e007      	b.n	8005bfe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d9d2      	bls.n	8005ba4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d109      	bne.n	8005c18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <chk_lock+0x80>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d101      	bne.n	8005c14 <chk_lock+0x84>
 8005c10:	2300      	movs	r3, #0
 8005c12:	e010      	b.n	8005c36 <chk_lock+0xa6>
 8005c14:	2312      	movs	r3, #18
 8005c16:	e00e      	b.n	8005c36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <chk_lock+0xa0>
 8005c1e:	4a09      	ldr	r2, [pc, #36]	@ (8005c44 <chk_lock+0xb4>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	4413      	add	r3, r2
 8005c26:	330c      	adds	r3, #12
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c2e:	d101      	bne.n	8005c34 <chk_lock+0xa4>
 8005c30:	2310      	movs	r3, #16
 8005c32:	e000      	b.n	8005c36 <chk_lock+0xa6>
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	200003ec 	.word	0x200003ec

08005c48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	e002      	b.n	8005c5a <enq_lock+0x12>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3301      	adds	r3, #1
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d806      	bhi.n	8005c6e <enq_lock+0x26>
 8005c60:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <enq_lock+0x40>)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f2      	bne.n	8005c54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	200003ec 	.word	0x200003ec

08005c8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e01f      	b.n	8005cdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c9c:	4a41      	ldr	r2, [pc, #260]	@ (8005da4 <inc_lock+0x118>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	4413      	add	r3, r2
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d113      	bne.n	8005cd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005cae:	4a3d      	ldr	r2, [pc, #244]	@ (8005da4 <inc_lock+0x118>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d109      	bne.n	8005cd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005cc2:	4a38      	ldr	r2, [pc, #224]	@ (8005da4 <inc_lock+0x118>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	3308      	adds	r3, #8
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d006      	beq.n	8005ce4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d9dc      	bls.n	8005c9c <inc_lock+0x10>
 8005ce2:	e000      	b.n	8005ce6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005ce4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d132      	bne.n	8005d52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e002      	b.n	8005cf8 <inc_lock+0x6c>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d806      	bhi.n	8005d0c <inc_lock+0x80>
 8005cfe:	4a29      	ldr	r2, [pc, #164]	@ (8005da4 <inc_lock+0x118>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f2      	bne.n	8005cf2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d101      	bne.n	8005d16 <inc_lock+0x8a>
 8005d12:	2300      	movs	r3, #0
 8005d14:	e040      	b.n	8005d98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4922      	ldr	r1, [pc, #136]	@ (8005da4 <inc_lock+0x118>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	440b      	add	r3, r1
 8005d22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	491e      	ldr	r1, [pc, #120]	@ (8005da4 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	440b      	add	r3, r1
 8005d30:	3304      	adds	r3, #4
 8005d32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	491a      	ldr	r1, [pc, #104]	@ (8005da4 <inc_lock+0x118>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	440b      	add	r3, r1
 8005d40:	3308      	adds	r3, #8
 8005d42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d44:	4a17      	ldr	r2, [pc, #92]	@ (8005da4 <inc_lock+0x118>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	2200      	movs	r2, #0
 8005d50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <inc_lock+0xe0>
 8005d58:	4a12      	ldr	r2, [pc, #72]	@ (8005da4 <inc_lock+0x118>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	4413      	add	r3, r2
 8005d60:	330c      	adds	r3, #12
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <inc_lock+0xe0>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e015      	b.n	8005d98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <inc_lock+0xf8>
 8005d72:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <inc_lock+0x118>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	e001      	b.n	8005d88 <inc_lock+0xfc>
 8005d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d88:	4906      	ldr	r1, [pc, #24]	@ (8005da4 <inc_lock+0x118>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	440b      	add	r3, r1
 8005d90:	330c      	adds	r3, #12
 8005d92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200003ec 	.word	0x200003ec

08005da8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d825      	bhi.n	8005e08 <dec_lock+0x60>
		n = Files[i].ctr;
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <dec_lock+0x74>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	4413      	add	r3, r2
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005dca:	89fb      	ldrh	r3, [r7, #14]
 8005dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd0:	d101      	bne.n	8005dd6 <dec_lock+0x2e>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <dec_lock+0x3a>
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005de2:	4a0e      	ldr	r2, [pc, #56]	@ (8005e1c <dec_lock+0x74>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4413      	add	r3, r2
 8005dea:	330c      	adds	r3, #12
 8005dec:	89fa      	ldrh	r2, [r7, #14]
 8005dee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005df0:	89fb      	ldrh	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d105      	bne.n	8005e02 <dec_lock+0x5a>
 8005df6:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <dec_lock+0x74>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	4413      	add	r3, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	737b      	strb	r3, [r7, #13]
 8005e06:	e001      	b.n	8005e0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e08:	2302      	movs	r3, #2
 8005e0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200003ec 	.word	0x200003ec

08005e20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e010      	b.n	8005e50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e64 <clear_lock+0x44>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	4413      	add	r3, r2
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d105      	bne.n	8005e4a <clear_lock+0x2a>
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <clear_lock+0x44>)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	4413      	add	r3, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d9eb      	bls.n	8005e2e <clear_lock+0xe>
	}
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	200003ec 	.word	0x200003ec

08005e68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	78db      	ldrb	r3, [r3, #3]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d034      	beq.n	8005ee6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7858      	ldrb	r0, [r3, #1]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	f7ff fd40 	bl	8005914 <disk_write>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	e022      	b.n	8005ee6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d217      	bcs.n	8005ee6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	789b      	ldrb	r3, [r3, #2]
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e010      	b.n	8005ee0 <sync_window+0x78>
					wsect += fs->fsize;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	7858      	ldrb	r0, [r3, #1]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	f7ff fd1d 	bl	8005914 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d8eb      	bhi.n	8005ebe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d01b      	beq.n	8005f40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ffad 	bl	8005e68 <sync_window>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d113      	bne.n	8005f40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7858      	ldrb	r0, [r3, #1]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f22:	2301      	movs	r3, #1
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	f7ff fcd5 	bl	80058d4 <disk_read>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ff87 	bl	8005e68 <sync_window>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d159      	bne.n	8006018 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d149      	bne.n	8006000 <sync_fs+0xb4>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	791b      	ldrb	r3, [r3, #4]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d145      	bne.n	8006000 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	899b      	ldrh	r3, [r3, #12]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2100      	movs	r1, #0
 8005f82:	f7ff fda8 	bl	8005ad6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3338      	adds	r3, #56	@ 0x38
 8005f8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f8e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fd37 	bl	8005a06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3338      	adds	r3, #56	@ 0x38
 8005f9c:	4921      	ldr	r1, [pc, #132]	@ (8006024 <sync_fs+0xd8>)
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fd4c 	bl	8005a3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3338      	adds	r3, #56	@ 0x38
 8005fa8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005fac:	491e      	ldr	r1, [pc, #120]	@ (8006028 <sync_fs+0xdc>)
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fd44 	bl	8005a3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3338      	adds	r3, #56	@ 0x38
 8005fb8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7ff fd3a 	bl	8005a3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3338      	adds	r3, #56	@ 0x38
 8005fcc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f7ff fd30 	bl	8005a3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7858      	ldrb	r0, [r3, #1]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f7ff fc8d 	bl	8005914 <disk_write>
			fs->fsi_flag = 0;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2200      	movs	r2, #0
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fca3 	bl	8005954 <disk_ioctl>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <sync_fs+0xcc>
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	41615252 	.word	0x41615252
 8006028:	61417272 	.word	0x61417272

0800602c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3b02      	subs	r3, #2
 800603a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	3b02      	subs	r3, #2
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d301      	bcc.n	800604c <clust2sect+0x20>
 8006048:	2300      	movs	r3, #0
 800604a:	e008      	b.n	800605e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	895b      	ldrh	r3, [r3, #10]
 8006050:	461a      	mov	r2, r3
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	fb03 f202 	mul.w	r2, r3, r2
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	4413      	add	r3, r2
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d904      	bls.n	800608a <get_fat+0x20>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <get_fat+0x26>
		val = 1;	/* Internal error */
 800608a:	2301      	movs	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e0ba      	b.n	8006206 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006090:	f04f 33ff 	mov.w	r3, #4294967295
 8006094:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	f000 8082 	beq.w	80061a4 <get_fat+0x13a>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	f300 80a6 	bgt.w	80061f2 <get_fat+0x188>
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d002      	beq.n	80060b0 <get_fat+0x46>
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d055      	beq.n	800615a <get_fat+0xf0>
 80060ae:	e0a0      	b.n	80061f2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	899b      	ldrh	r3, [r3, #12]
 80060c6:	4619      	mov	r1, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ce:	4413      	add	r3, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	6938      	ldr	r0, [r7, #16]
 80060d4:	f7ff ff0c 	bl	8005ef0 <move_window>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 808c 	bne.w	80061f8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	60fa      	str	r2, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	8992      	ldrh	r2, [r2, #12]
 80060ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ee:	fb01 f202 	mul.w	r2, r1, r2
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	899b      	ldrh	r3, [r3, #12]
 8006106:	4619      	mov	r1, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	fbb3 f3f1 	udiv	r3, r3, r1
 800610e:	4413      	add	r3, r2
 8006110:	4619      	mov	r1, r3
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f7ff feec 	bl	8005ef0 <move_window>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d16e      	bne.n	80061fc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	899b      	ldrh	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	fbb3 f1f2 	udiv	r1, r3, r2
 800612a:	fb01 f202 	mul.w	r2, r1, r2
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <get_fat+0xe6>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	e002      	b.n	8006156 <get_fat+0xec>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006156:	617b      	str	r3, [r7, #20]
			break;
 8006158:	e055      	b.n	8006206 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	899b      	ldrh	r3, [r3, #12]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	b29b      	uxth	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	fbb3 f3f1 	udiv	r3, r3, r1
 800616e:	4413      	add	r3, r2
 8006170:	4619      	mov	r1, r3
 8006172:	6938      	ldr	r0, [r7, #16]
 8006174:	f7ff febc 	bl	8005ef0 <move_window>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d140      	bne.n	8006200 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	8992      	ldrh	r2, [r2, #12]
 800618c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006190:	fb00 f202 	mul.w	r2, r0, r2
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	440b      	add	r3, r1
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fbf9 	bl	8005990 <ld_word>
 800619e:	4603      	mov	r3, r0
 80061a0:	617b      	str	r3, [r7, #20]
			break;
 80061a2:	e030      	b.n	8006206 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	899b      	ldrh	r3, [r3, #12]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b8:	4413      	add	r3, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	6938      	ldr	r0, [r7, #16]
 80061be:	f7ff fe97 	bl	8005ef0 <move_window>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11d      	bne.n	8006204 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	8992      	ldrh	r2, [r2, #12]
 80061d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80061da:	fb00 f202 	mul.w	r2, r0, r2
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	440b      	add	r3, r1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fbec 	bl	80059c0 <ld_dword>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80061ee:	617b      	str	r3, [r7, #20]
			break;
 80061f0:	e009      	b.n	8006206 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e006      	b.n	8006206 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f8:	bf00      	nop
 80061fa:	e004      	b.n	8006206 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061fc:	bf00      	nop
 80061fe:	e002      	b.n	8006206 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006200:	bf00      	nop
 8006202:	e000      	b.n	8006206 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006204:	bf00      	nop
		}
	}

	return val;
 8006206:	697b      	ldr	r3, [r7, #20]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800621c:	2302      	movs	r3, #2
 800621e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b01      	cmp	r3, #1
 8006224:	f240 8109 	bls.w	800643a <put_fat+0x22a>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	f080 8103 	bcs.w	800643a <put_fat+0x22a>
		switch (fs->fs_type) {
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b03      	cmp	r3, #3
 800623a:	f000 80b6 	beq.w	80063aa <put_fat+0x19a>
 800623e:	2b03      	cmp	r3, #3
 8006240:	f300 80fb 	bgt.w	800643a <put_fat+0x22a>
 8006244:	2b01      	cmp	r3, #1
 8006246:	d003      	beq.n	8006250 <put_fat+0x40>
 8006248:	2b02      	cmp	r3, #2
 800624a:	f000 8083 	beq.w	8006354 <put_fat+0x144>
 800624e:	e0f4      	b.n	800643a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4413      	add	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	899b      	ldrh	r3, [r3, #12]
 8006266:	4619      	mov	r1, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	fbb3 f3f1 	udiv	r3, r3, r1
 800626e:	4413      	add	r3, r2
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fe3c 	bl	8005ef0 <move_window>
 8006278:	4603      	mov	r3, r0
 800627a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800627c:	7ffb      	ldrb	r3, [r7, #31]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 80d4 	bne.w	800642c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	61ba      	str	r2, [r7, #24]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	8992      	ldrh	r2, [r2, #12]
 8006294:	fbb3 f0f2 	udiv	r0, r3, r2
 8006298:	fb00 f202 	mul.w	r2, r0, r2
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	440b      	add	r3, r1
 80062a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <put_fat+0xb8>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b25a      	sxtb	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e001      	b.n	80062cc <put_fat+0xbc>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	899b      	ldrh	r3, [r3, #12]
 80062de:	4619      	mov	r1, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062e6:	4413      	add	r3, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff fe00 	bl	8005ef0 <move_window>
 80062f0:	4603      	mov	r3, r0
 80062f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062f4:	7ffb      	ldrb	r3, [r7, #31]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 809a 	bne.w	8006430 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	899b      	ldrh	r3, [r3, #12]
 8006306:	461a      	mov	r2, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	fbb3 f0f2 	udiv	r0, r3, r2
 800630e:	fb00 f202 	mul.w	r2, r0, r2
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	440b      	add	r3, r1
 8006316:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <put_fat+0x11a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	b2db      	uxtb	r3, r3
 8006328:	e00e      	b.n	8006348 <put_fat+0x138>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	b25b      	sxtb	r3, r3
 8006330:	f023 030f 	bic.w	r3, r3, #15
 8006334:	b25a      	sxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	b25b      	sxtb	r3, r3
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	b25b      	sxtb	r3, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	b25b      	sxtb	r3, r3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	70da      	strb	r2, [r3, #3]
			break;
 8006352:	e072      	b.n	800643a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	899b      	ldrh	r3, [r3, #12]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	4619      	mov	r1, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	fbb3 f3f1 	udiv	r3, r3, r1
 8006368:	4413      	add	r3, r2
 800636a:	4619      	mov	r1, r3
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff fdbf 	bl	8005ef0 <move_window>
 8006372:	4603      	mov	r3, r0
 8006374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d15b      	bne.n	8006434 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	8992      	ldrh	r2, [r2, #12]
 800638a:	fbb3 f0f2 	udiv	r0, r3, r2
 800638e:	fb00 f202 	mul.w	r2, r0, r2
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	440b      	add	r3, r1
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	b292      	uxth	r2, r2
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fb32 	bl	8005a06 <st_word>
			fs->wflag = 1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	70da      	strb	r2, [r3, #3]
			break;
 80063a8:	e047      	b.n	800643a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	899b      	ldrh	r3, [r3, #12]
 80063b2:	089b      	lsrs	r3, r3, #2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80063be:	4413      	add	r3, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fd94 	bl	8005ef0 <move_window>
 80063c8:	4603      	mov	r3, r0
 80063ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063cc:	7ffb      	ldrb	r3, [r7, #31]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d132      	bne.n	8006438 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	8992      	ldrh	r2, [r2, #12]
 80063e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80063ea:	fb00 f202 	mul.w	r2, r0, r2
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	440b      	add	r3, r1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fae4 	bl	80059c0 <ld_dword>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80063fe:	4323      	orrs	r3, r4
 8006400:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	8992      	ldrh	r2, [r2, #12]
 8006410:	fbb3 f0f2 	udiv	r0, r3, r2
 8006414:	fb00 f202 	mul.w	r2, r0, r2
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	440b      	add	r3, r1
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fb0c 	bl	8005a3c <st_dword>
			fs->wflag = 1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	70da      	strb	r2, [r3, #3]
			break;
 800642a:	e006      	b.n	800643a <put_fat+0x22a>
			if (res != FR_OK) break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006438:	bf00      	nop
		}
	}
	return res;
 800643a:	7ffb      	ldrb	r3, [r7, #31]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3724      	adds	r7, #36	@ 0x24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd90      	pop	{r4, r7, pc}

08006444 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d904      	bls.n	800646a <remove_chain+0x26>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	d301      	bcc.n	800646e <remove_chain+0x2a>
 800646a:	2302      	movs	r3, #2
 800646c:	e04b      	b.n	8006506 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	69b8      	ldr	r0, [r7, #24]
 800647c:	f7ff fec8 	bl	8006210 <put_fat>
 8006480:	4603      	mov	r3, r0
 8006482:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006484:	7ffb      	ldrb	r3, [r7, #31]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <remove_chain+0x4a>
 800648a:	7ffb      	ldrb	r3, [r7, #31]
 800648c:	e03b      	b.n	8006506 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fdea 	bl	800606a <get_fat>
 8006496:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d031      	beq.n	8006502 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <remove_chain+0x64>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e02e      	b.n	8006506 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d101      	bne.n	80064b4 <remove_chain+0x70>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e028      	b.n	8006506 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064b4:	2200      	movs	r2, #0
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	69b8      	ldr	r0, [r7, #24]
 80064ba:	f7ff fea9 	bl	8006210 <put_fat>
 80064be:	4603      	mov	r3, r0
 80064c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80064c2:	7ffb      	ldrb	r3, [r7, #31]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <remove_chain+0x88>
 80064c8:	7ffb      	ldrb	r3, [r7, #31]
 80064ca:	e01c      	b.n	8006506 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	3b02      	subs	r3, #2
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d20b      	bcs.n	80064f2 <remove_chain+0xae>
			fs->free_clst++;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3c6      	bcc.n	800648e <remove_chain+0x4a>
 8006500:	e000      	b.n	8006504 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006502:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <create_chain+0x2c>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d31b      	bcc.n	8006572 <create_chain+0x64>
 800653a:	2301      	movs	r3, #1
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e018      	b.n	8006572 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fd91 	bl	800606a <get_fat>
 8006548:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d801      	bhi.n	8006554 <create_chain+0x46>
 8006550:	2301      	movs	r3, #1
 8006552:	e070      	b.n	8006636 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d101      	bne.n	8006560 <create_chain+0x52>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	e06a      	b.n	8006636 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	d201      	bcs.n	800656e <create_chain+0x60>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	e063      	b.n	8006636 <create_chain+0x128>
		scl = clst;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	429a      	cmp	r2, r3
 8006584:	d307      	bcc.n	8006596 <create_chain+0x88>
				ncl = 2;
 8006586:	2302      	movs	r3, #2
 8006588:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	429a      	cmp	r2, r3
 8006590:	d901      	bls.n	8006596 <create_chain+0x88>
 8006592:	2300      	movs	r3, #0
 8006594:	e04f      	b.n	8006636 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006596:	69f9      	ldr	r1, [r7, #28]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fd66 	bl	800606a <get_fat>
 800659e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d003      	beq.n	80065b4 <create_chain+0xa6>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d101      	bne.n	80065b8 <create_chain+0xaa>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	e03e      	b.n	8006636 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d1da      	bne.n	8006576 <create_chain+0x68>
 80065c0:	2300      	movs	r3, #0
 80065c2:	e038      	b.n	8006636 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80065c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	69f9      	ldr	r1, [r7, #28]
 80065cc:	6938      	ldr	r0, [r7, #16]
 80065ce:	f7ff fe1f 	bl	8006210 <put_fat>
 80065d2:	4603      	mov	r3, r0
 80065d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <create_chain+0xe2>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6938      	ldr	r0, [r7, #16]
 80065e8:	f7ff fe12 	bl	8006210 <put_fat>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d116      	bne.n	8006624 <create_chain+0x116>
		fs->last_clst = ncl;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	3b02      	subs	r3, #2
 8006606:	429a      	cmp	r2, r3
 8006608:	d804      	bhi.n	8006614 <create_chain+0x106>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	711a      	strb	r2, [r3, #4]
 8006622:	e007      	b.n	8006634 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d102      	bne.n	8006630 <create_chain+0x122>
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	e000      	b.n	8006632 <create_chain+0x124>
 8006630:	2301      	movs	r3, #1
 8006632:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006634:	69fb      	ldr	r3, [r7, #28]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	3304      	adds	r3, #4
 8006654:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	899b      	ldrh	r3, [r3, #12]
 800665a:	461a      	mov	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	8952      	ldrh	r2, [r2, #10]
 8006666:	fbb3 f3f2 	udiv	r3, r3, r2
 800666a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	613a      	str	r2, [r7, #16]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <clmt_clust+0x42>
 800667c:	2300      	movs	r3, #0
 800667e:	e010      	b.n	80066a2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	429a      	cmp	r2, r3
 8006686:	d307      	bcc.n	8006698 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3304      	adds	r3, #4
 8006694:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006696:	e7e9      	b.n	800666c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006698:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c4:	d204      	bcs.n	80066d0 <dir_sdi+0x22>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80066d0:	2302      	movs	r3, #2
 80066d2:	e071      	b.n	80067b8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <dir_sdi+0x46>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d902      	bls.n	80066f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10c      	bne.n	8006714 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	8912      	ldrh	r2, [r2, #8]
 8006702:	4293      	cmp	r3, r2
 8006704:	d301      	bcc.n	800670a <dir_sdi+0x5c>
 8006706:	2302      	movs	r3, #2
 8006708:	e056      	b.n	80067b8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	61da      	str	r2, [r3, #28]
 8006712:	e02d      	b.n	8006770 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	895b      	ldrh	r3, [r3, #10]
 8006718:	461a      	mov	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	899b      	ldrh	r3, [r3, #12]
 800671e:	fb02 f303 	mul.w	r3, r2, r3
 8006722:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006724:	e019      	b.n	800675a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fc9d 	bl	800606a <get_fat>
 8006730:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d101      	bne.n	800673e <dir_sdi+0x90>
 800673a:	2301      	movs	r3, #1
 800673c:	e03c      	b.n	80067b8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d904      	bls.n	800674e <dir_sdi+0xa0>
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	429a      	cmp	r2, r3
 800674c:	d301      	bcc.n	8006752 <dir_sdi+0xa4>
 800674e:	2302      	movs	r3, #2
 8006750:	e032      	b.n	80067b8 <dir_sdi+0x10a>
			ofs -= csz;
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	429a      	cmp	r2, r3
 8006760:	d2e1      	bcs.n	8006726 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006762:	6979      	ldr	r1, [r7, #20]
 8006764:	6938      	ldr	r0, [r7, #16]
 8006766:	f7ff fc61 	bl	800602c <clust2sect>
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <dir_sdi+0xd4>
 800677e:	2302      	movs	r3, #2
 8006780:	e01a      	b.n	80067b8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69da      	ldr	r2, [r3, #28]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	4619      	mov	r1, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006792:	441a      	add	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	899b      	ldrh	r3, [r3, #12]
 80067a2:	461a      	mov	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80067aa:	fb00 f202 	mul.w	r2, r0, r2
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	18ca      	adds	r2, r1, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	3320      	adds	r3, #32
 80067d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <dir_next+0x28>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067e6:	d301      	bcc.n	80067ec <dir_next+0x2c>
 80067e8:	2304      	movs	r3, #4
 80067ea:	e0bb      	b.n	8006964 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	899b      	ldrh	r3, [r3, #12]
 80067f0:	461a      	mov	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f8:	fb01 f202 	mul.w	r2, r1, r2
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 809d 	bne.w	800693e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	8912      	ldrh	r2, [r2, #8]
 800681e:	4293      	cmp	r3, r2
 8006820:	f0c0 808d 	bcc.w	800693e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	61da      	str	r2, [r3, #28]
 800682a:	2304      	movs	r3, #4
 800682c:	e09a      	b.n	8006964 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	899b      	ldrh	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	fbb3 f3f2 	udiv	r3, r3, r2
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	8952      	ldrh	r2, [r2, #10]
 800683e:	3a01      	subs	r2, #1
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d17b      	bne.n	800693e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7ff fc0b 	bl	800606a <get_fat>
 8006854:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d801      	bhi.n	8006860 <dir_next+0xa0>
 800685c:	2302      	movs	r3, #2
 800685e:	e081      	b.n	8006964 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d101      	bne.n	800686c <dir_next+0xac>
 8006868:	2301      	movs	r3, #1
 800686a:	e07b      	b.n	8006964 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	429a      	cmp	r2, r3
 8006874:	d359      	bcc.n	800692a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	61da      	str	r2, [r3, #28]
 8006882:	2304      	movs	r3, #4
 8006884:	e06e      	b.n	8006964 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7ff fe3d 	bl	800650e <create_chain>
 8006894:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <dir_next+0xe0>
 800689c:	2307      	movs	r3, #7
 800689e:	e061      	b.n	8006964 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <dir_next+0xea>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e05c      	b.n	8006964 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d101      	bne.n	80068b6 <dir_next+0xf6>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e056      	b.n	8006964 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fad6 	bl	8005e68 <sync_window>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <dir_next+0x106>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e04e      	b.n	8006964 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	899b      	ldrh	r3, [r3, #12]
 80068d0:	461a      	mov	r2, r3
 80068d2:	2100      	movs	r1, #0
 80068d4:	f7ff f8ff 	bl	8005ad6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fba4 	bl	800602c <clust2sect>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80068ea:	e012      	b.n	8006912 <dir_next+0x152>
						fs->wflag = 1;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fab8 	bl	8005e68 <sync_window>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <dir_next+0x142>
 80068fe:	2301      	movs	r3, #1
 8006900:	e030      	b.n	8006964 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	3301      	adds	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	635a      	str	r2, [r3, #52]	@ 0x34
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	895b      	ldrh	r3, [r3, #10]
 8006916:	461a      	mov	r2, r3
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4293      	cmp	r3, r2
 800691c:	d3e6      	bcc.n	80068ec <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad2      	subs	r2, r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fb7a 	bl	800602c <clust2sect>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	899b      	ldrh	r3, [r3, #12]
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	fbb3 f0f2 	udiv	r0, r3, r2
 8006956:	fb00 f202 	mul.w	r2, r0, r2
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	18ca      	adds	r2, r1, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe95 	bl	80066ae <dir_sdi>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d12b      	bne.n	80069e6 <dir_alloc+0x7a>
		n = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff faa9 	bl	8005ef0 <move_window>
 800699e:	4603      	mov	r3, r0
 80069a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d11d      	bne.n	80069e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2be5      	cmp	r3, #229	@ 0xe5
 80069b0:	d004      	beq.n	80069bc <dir_alloc+0x50>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d107      	bne.n	80069cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3301      	adds	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d102      	bne.n	80069d0 <dir_alloc+0x64>
 80069ca:	e00c      	b.n	80069e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069d0:	2101      	movs	r1, #1
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fef4 	bl	80067c0 <dir_next>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0d7      	beq.n	8006992 <dir_alloc+0x26>
 80069e2:	e000      	b.n	80069e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80069e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d101      	bne.n	80069f0 <dir_alloc+0x84>
 80069ec:	2307      	movs	r3, #7
 80069ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	331a      	adds	r3, #26
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe ffc1 	bl	8005990 <ld_word>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d109      	bne.n	8006a2e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	3314      	adds	r3, #20
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe ffb6 	bl	8005990 <ld_word>
 8006a24:	4603      	mov	r3, r0
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	331a      	adds	r3, #26
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe ffd9 	bl	8005a06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d109      	bne.n	8006a70 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f103 0214 	add.w	r2, r3, #20
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fe ffcb 	bl	8005a06 <st_word>
	}
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	331a      	adds	r3, #26
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe ff82 	bl	8005990 <ld_word>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <cmp_lfn+0x1e>
 8006a92:	2300      	movs	r3, #0
 8006a94:	e059      	b.n	8006b4a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a9e:	1e5a      	subs	r2, r3, #1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006aac:	2301      	movs	r3, #1
 8006aae:	81fb      	strh	r3, [r7, #14]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	e033      	b.n	8006b1e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006ab6:	4a27      	ldr	r2, [pc, #156]	@ (8006b54 <cmp_lfn+0xdc>)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe ff63 	bl	8005990 <ld_word>
 8006aca:	4603      	mov	r3, r0
 8006acc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006ace:	89fb      	ldrh	r3, [r7, #14]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01a      	beq.n	8006b0a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2bfe      	cmp	r3, #254	@ 0xfe
 8006ad8:	d812      	bhi.n	8006b00 <cmp_lfn+0x88>
 8006ada:	89bb      	ldrh	r3, [r7, #12]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 f85f 	bl	8008ba0 <ff_wtoupper>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	617a      	str	r2, [r7, #20]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f002 f853 	bl	8008ba0 <ff_wtoupper>
 8006afa:	4603      	mov	r3, r0
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d001      	beq.n	8006b04 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006b00:	2300      	movs	r3, #0
 8006b02:	e022      	b.n	8006b4a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006b04:	89bb      	ldrh	r3, [r7, #12]
 8006b06:	81fb      	strh	r3, [r7, #14]
 8006b08:	e006      	b.n	8006b18 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006b0a:	89bb      	ldrh	r3, [r7, #12]
 8006b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d001      	beq.n	8006b18 <cmp_lfn+0xa0>
 8006b14:	2300      	movs	r3, #0
 8006b16:	e018      	b.n	8006b4a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d9c8      	bls.n	8006ab6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <cmp_lfn+0xd0>
 8006b30:	89fb      	ldrh	r3, [r7, #14]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <cmp_lfn+0xd0>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <cmp_lfn+0xd0>
 8006b44:	2300      	movs	r3, #0
 8006b46:	e000      	b.n	8006b4a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006b48:	2301      	movs	r3, #1
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}
 8006b52:	bf00      	nop
 8006b54:	0800b908 	.word	0x0800b908

08006b58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	460b      	mov	r3, r1
 8006b68:	71fb      	strb	r3, [r7, #7]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	330d      	adds	r3, #13
 8006b72:	79ba      	ldrb	r2, [r7, #6]
 8006b74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	330b      	adds	r3, #11
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	330c      	adds	r3, #12
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	331a      	adds	r3, #26
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe ff3a 	bl	8005a06 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	4613      	mov	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	82fb      	strh	r3, [r7, #22]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006baa:	8afb      	ldrh	r3, [r7, #22]
 8006bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <put_lfn+0x6c>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	61fa      	str	r2, [r7, #28]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006bc4:	4a17      	ldr	r2, [pc, #92]	@ (8006c24 <put_lfn+0xcc>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4413      	add	r3, r2
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	8afa      	ldrh	r2, [r7, #22]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe ff15 	bl	8005a06 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006bdc:	8afb      	ldrh	r3, [r7, #22]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <put_lfn+0x90>
 8006be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006be6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d9da      	bls.n	8006baa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006bf4:	8afb      	ldrh	r3, [r7, #22]
 8006bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d006      	beq.n	8006c0c <put_lfn+0xb4>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <put_lfn+0xbc>
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	701a      	strb	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	0800b908 	.word	0x0800b908

08006c28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08c      	sub	sp, #48	@ 0x30
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006c36:	220b      	movs	r2, #11
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7fe ff2a 	bl	8005a94 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d92b      	bls.n	8006c9e <gen_numname+0x76>
		sr = seq;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006c4a:	e022      	b.n	8006c92 <gen_numname+0x6a>
			wc = *lfn++;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006c56:	2300      	movs	r3, #0
 8006c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c5a:	e017      	b.n	8006c8c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	005a      	lsls	r2, r3, #1
 8006c60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006c6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <gen_numname+0x5e>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006c80:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006c84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c88:	3301      	adds	r3, #1
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	2b0f      	cmp	r3, #15
 8006c90:	d9e4      	bls.n	8006c5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d8      	bne.n	8006c4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c9e:	2307      	movs	r3, #7
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	3330      	adds	r3, #48	@ 0x30
 8006cae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cb6:	2b39      	cmp	r3, #57	@ 0x39
 8006cb8:	d904      	bls.n	8006cc4 <gen_numname+0x9c>
 8006cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc6:	1e5a      	subs	r2, r3, #1
 8006cc8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cca:	3330      	adds	r3, #48	@ 0x30
 8006ccc:	443b      	add	r3, r7
 8006cce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006cd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1df      	bne.n	8006ca2 <gen_numname+0x7a>
	ns[i] = '~';
 8006ce2:	f107 0214 	add.w	r2, r7, #20
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	4413      	add	r3, r2
 8006cea:	227e      	movs	r2, #126	@ 0x7e
 8006cec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf2:	e002      	b.n	8006cfa <gen_numname+0xd2>
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d205      	bcs.n	8006d0e <gen_numname+0xe6>
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	4413      	add	r3, r2
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d1f2      	bne.n	8006cf4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	2b07      	cmp	r3, #7
 8006d12:	d807      	bhi.n	8006d24 <gen_numname+0xfc>
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d1a:	3330      	adds	r3, #48	@ 0x30
 8006d1c:	443b      	add	r3, r7
 8006d1e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006d22:	e000      	b.n	8006d26 <gen_numname+0xfe>
 8006d24:	2120      	movs	r1, #32
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	460a      	mov	r2, r1
 8006d32:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	2b07      	cmp	r3, #7
 8006d38:	d9e9      	bls.n	8006d0e <gen_numname+0xe6>
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	3730      	adds	r7, #48	@ 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006d50:	230b      	movs	r3, #11
 8006d52:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	0852      	lsrs	r2, r2, #1
 8006d5a:	01db      	lsls	r3, r3, #7
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	6079      	str	r1, [r7, #4]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4413      	add	r3, r2
 8006d6a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ed      	bne.n	8006d54 <sum_sfn+0x10>
	return sum;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fc89 	bl	80066ae <dir_sdi>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <dir_find+0x24>
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	e0a9      	b.n	8006efe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006daa:	23ff      	movs	r3, #255	@ 0xff
 8006dac:	753b      	strb	r3, [r7, #20]
 8006dae:	7d3b      	ldrb	r3, [r7, #20]
 8006db0:	757b      	strb	r3, [r7, #21]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6938      	ldr	r0, [r7, #16]
 8006dc2:	f7ff f895 	bl	8005ef0 <move_window>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 8090 	bne.w	8006ef2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dda:	7dbb      	ldrb	r3, [r7, #22]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <dir_find+0x60>
 8006de0:	2304      	movs	r3, #4
 8006de2:	75fb      	strb	r3, [r7, #23]
 8006de4:	e08a      	b.n	8006efc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	330b      	adds	r3, #11
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006df2:	73fb      	strb	r3, [r7, #15]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7bfa      	ldrb	r2, [r7, #15]
 8006df8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006dfa:	7dbb      	ldrb	r3, [r7, #22]
 8006dfc:	2be5      	cmp	r3, #229	@ 0xe5
 8006dfe:	d007      	beq.n	8006e10 <dir_find+0x8a>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <dir_find+0x98>
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b0f      	cmp	r3, #15
 8006e0e:	d006      	beq.n	8006e1e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e10:	23ff      	movs	r3, #255	@ 0xff
 8006e12:	757b      	strb	r3, [r7, #21]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e1c:	e05e      	b.n	8006edc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b0f      	cmp	r3, #15
 8006e22:	d136      	bne.n	8006e92 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d154      	bne.n	8006edc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e32:	7dbb      	ldrb	r3, [r7, #22]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	7b5b      	ldrb	r3, [r3, #13]
 8006e42:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e44:	7dbb      	ldrb	r3, [r7, #22]
 8006e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e4a:	75bb      	strb	r3, [r7, #22]
 8006e4c:	7dbb      	ldrb	r3, [r7, #22]
 8006e4e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e58:	7dba      	ldrb	r2, [r7, #22]
 8006e5a:	7d7b      	ldrb	r3, [r7, #21]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d115      	bne.n	8006e8c <dir_find+0x106>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	330d      	adds	r3, #13
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	7d3a      	ldrb	r2, [r7, #20]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d10e      	bne.n	8006e8c <dir_find+0x106>
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7ff fdfd 	bl	8006a78 <cmp_lfn>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <dir_find+0x106>
 8006e84:	7d7b      	ldrb	r3, [r7, #21]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e000      	b.n	8006e8e <dir_find+0x108>
 8006e8c:	23ff      	movs	r3, #255	@ 0xff
 8006e8e:	757b      	strb	r3, [r7, #21]
 8006e90:	e024      	b.n	8006edc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e92:	7d7b      	ldrb	r3, [r7, #21]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <dir_find+0x126>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff ff51 	bl	8006d44 <sum_sfn>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	7d3b      	ldrb	r3, [r7, #20]
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d024      	beq.n	8006ef6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <dir_find+0x14a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a18      	ldr	r0, [r3, #32]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3324      	adds	r3, #36	@ 0x24
 8006ec2:	220b      	movs	r2, #11
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f7fe fe21 	bl	8005b0c <mem_cmp>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d014      	beq.n	8006efa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ed0:	23ff      	movs	r3, #255	@ 0xff
 8006ed2:	757b      	strb	r3, [r7, #21]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fc6e 	bl	80067c0 <dir_next>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f43f af65 	beq.w	8006dba <dir_find+0x34>
 8006ef0:	e004      	b.n	8006efc <dir_find+0x176>
		if (res != FR_OK) break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006efa:	bf00      	nop

	return res;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08c      	sub	sp, #48	@ 0x30
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006f1c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <dir_register+0x20>
 8006f24:	2306      	movs	r3, #6
 8006f26:	e0e0      	b.n	80070ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f28:	2300      	movs	r3, #0
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2c:	e002      	b.n	8006f34 <dir_register+0x2c>
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	3301      	adds	r3, #1
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f4      	bne.n	8006f2e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006f4a:	f107 030c 	add.w	r3, r7, #12
 8006f4e:	220c      	movs	r2, #12
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fd9f 	bl	8005a94 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d032      	beq.n	8006fc6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006f68:	2301      	movs	r3, #1
 8006f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f6c:	e016      	b.n	8006f9c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	f107 010c 	add.w	r1, r7, #12
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	f7ff fe53 	bl	8006c28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff feff 	bl	8006d86 <dir_find>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	3301      	adds	r3, #1
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b63      	cmp	r3, #99	@ 0x63
 8006fa0:	d9e5      	bls.n	8006f6e <dir_register+0x66>
 8006fa2:	e000      	b.n	8006fa6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006fa4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	2b64      	cmp	r3, #100	@ 0x64
 8006faa:	d101      	bne.n	8006fb0 <dir_register+0xa8>
 8006fac:	2307      	movs	r3, #7
 8006fae:	e09c      	b.n	80070ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d002      	beq.n	8006fbe <dir_register+0xb6>
 8006fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fbc:	e095      	b.n	80070ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006fbe:	7dfa      	ldrb	r2, [r7, #23]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <dir_register+0xd8>
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	4a47      	ldr	r2, [pc, #284]	@ (80070f4 <dir_register+0x1ec>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	3301      	adds	r3, #1
 8006fde:	e000      	b.n	8006fe2 <dir_register+0xda>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006fe4:	6a39      	ldr	r1, [r7, #32]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fcc0 	bl	800696c <dir_alloc>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d148      	bne.n	800708c <dir_register+0x184>
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d042      	beq.n	800708c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	015b      	lsls	r3, r3, #5
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fb4b 	bl	80066ae <dir_sdi>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800701e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007022:	2b00      	cmp	r3, #0
 8007024:	d132      	bne.n	800708c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3324      	adds	r3, #36	@ 0x24
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fe8a 	bl	8006d44 <sum_sfn>
 8007030:	4603      	mov	r3, r0
 8007032:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4619      	mov	r1, r3
 800703a:	69f8      	ldr	r0, [r7, #28]
 800703c:	f7fe ff58 	bl	8005ef0 <move_window>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800704a:	2b00      	cmp	r3, #0
 800704c:	d11d      	bne.n	800708a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	6918      	ldr	r0, [r3, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a19      	ldr	r1, [r3, #32]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	7efb      	ldrb	r3, [r7, #27]
 800705c:	f7ff fd7c 	bl	8006b58 <put_lfn>
				fs->wflag = 1;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2201      	movs	r2, #1
 8007064:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007066:	2100      	movs	r1, #0
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff fba9 	bl	80067c0 <dir_next>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007074:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007078:	2b00      	cmp	r3, #0
 800707a:	d107      	bne.n	800708c <dir_register+0x184>
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	3b01      	subs	r3, #1
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1d5      	bne.n	8007034 <dir_register+0x12c>
 8007088:	e000      	b.n	800708c <dir_register+0x184>
				if (res != FR_OK) break;
 800708a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800708c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007090:	2b00      	cmp	r3, #0
 8007092:	d128      	bne.n	80070e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	4619      	mov	r1, r3
 800709a:	69f8      	ldr	r0, [r7, #28]
 800709c:	f7fe ff28 	bl	8005ef0 <move_window>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80070a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11b      	bne.n	80070e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	2220      	movs	r2, #32
 80070b4:	2100      	movs	r1, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fd0d 	bl	8005ad6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a18      	ldr	r0, [r3, #32]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3324      	adds	r3, #36	@ 0x24
 80070c4:	220b      	movs	r2, #11
 80070c6:	4619      	mov	r1, r3
 80070c8:	f7fe fce4 	bl	8005a94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	330c      	adds	r3, #12
 80070d8:	f002 0218 	and.w	r2, r2, #24
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2201      	movs	r2, #1
 80070e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80070e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3730      	adds	r7, #48	@ 0x30
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	4ec4ec4f 	.word	0x4ec4ec4f

080070f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	@ 0x28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	61ba      	str	r2, [r7, #24]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007126:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007128:	2b1f      	cmp	r3, #31
 800712a:	d940      	bls.n	80071ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800712c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800712e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007130:	d006      	beq.n	8007140 <create_name+0x48>
 8007132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007134:	2b5c      	cmp	r3, #92	@ 0x5c
 8007136:	d110      	bne.n	800715a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007138:	e002      	b.n	8007140 <create_name+0x48>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	3301      	adds	r3, #1
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	4413      	add	r3, r2
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b2f      	cmp	r3, #47	@ 0x2f
 800714a:	d0f6      	beq.n	800713a <create_name+0x42>
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b5c      	cmp	r3, #92	@ 0x5c
 8007156:	d0f0      	beq.n	800713a <create_name+0x42>
			break;
 8007158:	e02a      	b.n	80071b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2bfe      	cmp	r3, #254	@ 0xfe
 800715e:	d901      	bls.n	8007164 <create_name+0x6c>
 8007160:	2306      	movs	r3, #6
 8007162:	e17d      	b.n	8007460 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800716a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800716c:	2101      	movs	r1, #1
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fcda 	bl	8008b28 <ff_convert>
 8007174:	4603      	mov	r3, r0
 8007176:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <create_name+0x8a>
 800717e:	2306      	movs	r3, #6
 8007180:	e16e      	b.n	8007460 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007182:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007184:	2b7f      	cmp	r3, #127	@ 0x7f
 8007186:	d809      	bhi.n	800719c <create_name+0xa4>
 8007188:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800718a:	4619      	mov	r1, r3
 800718c:	488d      	ldr	r0, [pc, #564]	@ (80073c4 <create_name+0x2cc>)
 800718e:	f7fe fce4 	bl	8005b5a <chk_chr>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <create_name+0xa4>
 8007198:	2306      	movs	r3, #6
 800719a:	e161      	b.n	8007460 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	617a      	str	r2, [r7, #20]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80071ac:	e7b4      	b.n	8007118 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80071ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	441a      	add	r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071bc:	2b1f      	cmp	r3, #31
 80071be:	d801      	bhi.n	80071c4 <create_name+0xcc>
 80071c0:	2304      	movs	r3, #4
 80071c2:	e000      	b.n	80071c6 <create_name+0xce>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071ca:	e011      	b.n	80071f0 <create_name+0xf8>
		w = lfn[di - 1];
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80071d2:	3b01      	subs	r3, #1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80071de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d002      	beq.n	80071ea <create_name+0xf2>
 80071e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80071e8:	d106      	bne.n	80071f8 <create_name+0x100>
		di--;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ea      	bne.n	80071cc <create_name+0xd4>
 80071f6:	e000      	b.n	80071fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80071f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <create_name+0x118>
 800720c:	2306      	movs	r3, #6
 800720e:	e127      	b.n	8007460 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3324      	adds	r3, #36	@ 0x24
 8007214:	220b      	movs	r2, #11
 8007216:	2120      	movs	r1, #32
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fc5c 	bl	8005ad6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	e002      	b.n	800722a <create_name+0x132>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3301      	adds	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2b20      	cmp	r3, #32
 8007236:	d0f5      	beq.n	8007224 <create_name+0x12c>
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2b2e      	cmp	r3, #46	@ 0x2e
 8007244:	d0ee      	beq.n	8007224 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d009      	beq.n	8007260 <create_name+0x168>
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007250:	f043 0303 	orr.w	r3, r3, #3
 8007254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007258:	e002      	b.n	8007260 <create_name+0x168>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	3b01      	subs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <create_name+0x182>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800726c:	3b01      	subs	r3, #1
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	2b2e      	cmp	r3, #46	@ 0x2e
 8007278:	d1ef      	bne.n	800725a <create_name+0x162>

	i = b = 0; ni = 8;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	2308      	movs	r3, #8
 8007286:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	61ba      	str	r2, [r7, #24]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8090 	beq.w	80073c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80072a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d006      	beq.n	80072b4 <create_name+0x1bc>
 80072a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072aa:	d10a      	bne.n	80072c2 <create_name+0x1ca>
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d006      	beq.n	80072c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80072b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072b8:	f043 0303 	orr.w	r3, r3, #3
 80072bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072c0:	e07d      	b.n	80073be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d203      	bcs.n	80072d2 <create_name+0x1da>
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d123      	bne.n	800731a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b0b      	cmp	r3, #11
 80072d6:	d106      	bne.n	80072e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072dc:	f043 0303 	orr.w	r3, r3, #3
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072e4:	e075      	b.n	80073d2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d005      	beq.n	80072fa <create_name+0x202>
 80072ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072f2:	f043 0303 	orr.w	r3, r3, #3
 80072f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d866      	bhi.n	80073d0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	2308      	movs	r3, #8
 8007308:	623b      	str	r3, [r7, #32]
 800730a:	230b      	movs	r3, #11
 800730c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800730e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007318:	e051      	b.n	80073be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800731a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800731c:	2b7f      	cmp	r3, #127	@ 0x7f
 800731e:	d914      	bls.n	800734a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fbff 	bl	8008b28 <ff_convert>
 800732a:	4603      	mov	r3, r0
 800732c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800732e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <create_name+0x246>
 8007334:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007336:	3b80      	subs	r3, #128	@ 0x80
 8007338:	4a23      	ldr	r2, [pc, #140]	@ (80073c8 <create_name+0x2d0>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800733e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007342:	f043 0302 	orr.w	r3, r3, #2
 8007346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800734a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <create_name+0x268>
 8007350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007352:	4619      	mov	r1, r3
 8007354:	481d      	ldr	r0, [pc, #116]	@ (80073cc <create_name+0x2d4>)
 8007356:	f7fe fc00 	bl	8005b5a <chk_chr>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007360:	235f      	movs	r3, #95	@ 0x5f
 8007362:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007368:	f043 0303 	orr.w	r3, r3, #3
 800736c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007370:	e01b      	b.n	80073aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007372:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007374:	2b40      	cmp	r3, #64	@ 0x40
 8007376:	d909      	bls.n	800738c <create_name+0x294>
 8007378:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800737a:	2b5a      	cmp	r3, #90	@ 0x5a
 800737c:	d806      	bhi.n	800738c <create_name+0x294>
					b |= 2;
 800737e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800738a:	e00e      	b.n	80073aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800738c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800738e:	2b60      	cmp	r3, #96	@ 0x60
 8007390:	d90b      	bls.n	80073aa <create_name+0x2b2>
 8007392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007394:	2b7a      	cmp	r3, #122	@ 0x7a
 8007396:	d808      	bhi.n	80073aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80073a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073a6:	3b20      	subs	r3, #32
 80073a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	623a      	str	r2, [r7, #32]
 80073b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073b2:	b2d1      	uxtb	r1, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	4413      	add	r3, r2
 80073b8:	460a      	mov	r2, r1
 80073ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80073be:	e763      	b.n	8007288 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80073c0:	bf00      	nop
 80073c2:	e006      	b.n	80073d2 <create_name+0x2da>
 80073c4:	0800b820 	.word	0x0800b820
 80073c8:	0800b888 	.word	0x0800b888
 80073cc:	0800b82c 	.word	0x0800b82c
			if (si > di) break;			/* No extension */
 80073d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073d8:	2be5      	cmp	r3, #229	@ 0xe5
 80073da:	d103      	bne.n	80073e4 <create_name+0x2ec>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2205      	movs	r2, #5
 80073e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d104      	bne.n	80073f4 <create_name+0x2fc>
 80073ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80073f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f8:	f003 030c 	and.w	r3, r3, #12
 80073fc:	2b0c      	cmp	r3, #12
 80073fe:	d005      	beq.n	800740c <create_name+0x314>
 8007400:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d105      	bne.n	8007418 <create_name+0x320>
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d117      	bne.n	8007454 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d105      	bne.n	800743c <create_name+0x344>
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007434:	f043 0310 	orr.w	r3, r3, #16
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800743c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007440:	f003 030c 	and.w	r3, r3, #12
 8007444:	2b04      	cmp	r3, #4
 8007446:	d105      	bne.n	8007454 <create_name+0x35c>
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800744c:	f043 0308 	orr.w	r3, r3, #8
 8007450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800745a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800745e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007460:	4618      	mov	r0, r3
 8007462:	3728      	adds	r7, #40	@ 0x28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800747c:	e002      	b.n	8007484 <follow_path+0x1c>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b2f      	cmp	r3, #47	@ 0x2f
 800748a:	d0f8      	beq.n	800747e <follow_path+0x16>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b5c      	cmp	r3, #92	@ 0x5c
 8007492:	d0f4      	beq.n	800747e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2200      	movs	r2, #0
 8007498:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b1f      	cmp	r3, #31
 80074a0:	d80a      	bhi.n	80074b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2280      	movs	r2, #128	@ 0x80
 80074a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff f8fe 	bl	80066ae <dir_sdi>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
 80074b6:	e048      	b.n	800754a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074b8:	463b      	mov	r3, r7
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff fe1b 	bl	80070f8 <create_name>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d139      	bne.n	8007540 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fc5a 	bl	8006d86 <dir_find>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80074dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d12c      	bne.n	8007544 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d127      	bne.n	8007544 <follow_path+0xdc>
 80074f4:	2305      	movs	r3, #5
 80074f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80074f8:	e024      	b.n	8007544 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d121      	bne.n	8007548 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	799b      	ldrb	r3, [r3, #6]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007510:	2305      	movs	r3, #5
 8007512:	75fb      	strb	r3, [r7, #23]
 8007514:	e019      	b.n	800754a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	8992      	ldrh	r2, [r2, #12]
 8007524:	fbb3 f0f2 	udiv	r0, r3, r2
 8007528:	fb00 f202 	mul.w	r2, r0, r2
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	440b      	add	r3, r1
 8007530:	4619      	mov	r1, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fa61 	bl	80069fa <ld_clust>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800753e:	e7bb      	b.n	80074b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007540:	bf00      	nop
 8007542:	e002      	b.n	800754a <follow_path+0xe2>
				break;
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007548:	bf00      	nop
			}
		}
	}

	return res;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d031      	beq.n	80075ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	e002      	b.n	8007578 <get_ldnumber+0x24>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b1f      	cmp	r3, #31
 800757e:	d903      	bls.n	8007588 <get_ldnumber+0x34>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b3a      	cmp	r3, #58	@ 0x3a
 8007586:	d1f4      	bne.n	8007572 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b3a      	cmp	r3, #58	@ 0x3a
 800758e:	d11c      	bne.n	80075ca <get_ldnumber+0x76>
			tp = *path;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	60fa      	str	r2, [r7, #12]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	3b30      	subs	r3, #48	@ 0x30
 80075a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b09      	cmp	r3, #9
 80075a6:	d80e      	bhi.n	80075c6 <get_ldnumber+0x72>
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d10a      	bne.n	80075c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <get_ldnumber+0x72>
					vol = (int)i;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	3301      	adds	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	e002      	b.n	80075d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80075ce:	693b      	ldr	r3, [r7, #16]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	70da      	strb	r2, [r3, #3]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fe fc7a 	bl	8005ef0 <move_window>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <check_fs+0x2a>
 8007602:	2304      	movs	r3, #4
 8007604:	e038      	b.n	8007678 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3338      	adds	r3, #56	@ 0x38
 800760a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe f9be 	bl	8005990 <ld_word>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <check_fs+0x48>
 8007620:	2303      	movs	r3, #3
 8007622:	e029      	b.n	8007678 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800762a:	2be9      	cmp	r3, #233	@ 0xe9
 800762c:	d009      	beq.n	8007642 <check_fs+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007634:	2beb      	cmp	r3, #235	@ 0xeb
 8007636:	d11e      	bne.n	8007676 <check_fs+0x9a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800763e:	2b90      	cmp	r3, #144	@ 0x90
 8007640:	d119      	bne.n	8007676 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3338      	adds	r3, #56	@ 0x38
 8007646:	3336      	adds	r3, #54	@ 0x36
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe f9b9 	bl	80059c0 <ld_dword>
 800764e:	4603      	mov	r3, r0
 8007650:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007654:	4a0a      	ldr	r2, [pc, #40]	@ (8007680 <check_fs+0xa4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <check_fs+0x82>
 800765a:	2300      	movs	r3, #0
 800765c:	e00c      	b.n	8007678 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3338      	adds	r3, #56	@ 0x38
 8007662:	3352      	adds	r3, #82	@ 0x52
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe f9ab 	bl	80059c0 <ld_dword>
 800766a:	4603      	mov	r3, r0
 800766c:	4a05      	ldr	r2, [pc, #20]	@ (8007684 <check_fs+0xa8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d101      	bne.n	8007676 <check_fs+0x9a>
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007676:	2302      	movs	r3, #2
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	00544146 	.word	0x00544146
 8007684:	33544146 	.word	0x33544146

08007688 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b096      	sub	sp, #88	@ 0x58
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff ff59 	bl	8007554 <get_ldnumber>
 80076a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da01      	bge.n	80076ae <find_volume+0x26>
 80076aa:	230b      	movs	r3, #11
 80076ac:	e265      	b.n	8007b7a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076ae:	4a9f      	ldr	r2, [pc, #636]	@ (800792c <find_volume+0x2a4>)
 80076b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <find_volume+0x3a>
 80076be:	230c      	movs	r3, #12
 80076c0:	e25b      	b.n	8007b7a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f8b7 	bl	8005850 <disk_status>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80076e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10c      	bne.n	800770e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <find_volume+0x82>
 80076fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007706:	230a      	movs	r3, #10
 8007708:	e237      	b.n	8007b7a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800770a:	2300      	movs	r3, #0
 800770c:	e235      	b.n	8007b7a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe f8af 	bl	8005884 <disk_initialize>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800772c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007738:	2303      	movs	r3, #3
 800773a:	e21e      	b.n	8007b7a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <find_volume+0xca>
 8007742:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800774e:	230a      	movs	r3, #10
 8007750:	e213      	b.n	8007b7a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	7858      	ldrb	r0, [r3, #1]
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	330c      	adds	r3, #12
 800775a:	461a      	mov	r2, r3
 800775c:	2102      	movs	r1, #2
 800775e:	f7fe f8f9 	bl	8005954 <disk_ioctl>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <find_volume+0xe4>
 8007768:	2301      	movs	r3, #1
 800776a:	e206      	b.n	8007b7a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	899b      	ldrh	r3, [r3, #12]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007774:	d80d      	bhi.n	8007792 <find_volume+0x10a>
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	899b      	ldrh	r3, [r3, #12]
 800777a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777e:	d308      	bcc.n	8007792 <find_volume+0x10a>
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	899b      	ldrh	r3, [r3, #12]
 8007784:	461a      	mov	r2, r3
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	3b01      	subs	r3, #1
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <find_volume+0x10e>
 8007792:	2301      	movs	r3, #1
 8007794:	e1f1      	b.n	8007b7a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800779a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800779c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800779e:	f7ff ff1d 	bl	80075dc <check_fs>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d149      	bne.n	8007844 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077b0:	2300      	movs	r3, #0
 80077b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077b4:	e01e      	b.n	80077f4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80077c4:	4413      	add	r3, r2
 80077c6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	3304      	adds	r3, #4
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d006      	beq.n	80077e0 <find_volume+0x158>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	3308      	adds	r3, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe f8f2 	bl	80059c0 <ld_dword>
 80077dc:	4602      	mov	r2, r0
 80077de:	e000      	b.n	80077e2 <find_volume+0x15a>
 80077e0:	2200      	movs	r2, #0
 80077e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	3358      	adds	r3, #88	@ 0x58
 80077e8:	443b      	add	r3, r7
 80077ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f0:	3301      	adds	r3, #1
 80077f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d9dd      	bls.n	80077b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80077fa:	2300      	movs	r3, #0
 80077fc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80077fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <find_volume+0x182>
 8007804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007806:	3b01      	subs	r3, #1
 8007808:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800780a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	3358      	adds	r3, #88	@ 0x58
 8007810:	443b      	add	r3, r7
 8007812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007816:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <find_volume+0x1a2>
 800781e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007820:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007822:	f7ff fedb 	bl	80075dc <check_fs>
 8007826:	4603      	mov	r3, r0
 8007828:	e000      	b.n	800782c <find_volume+0x1a4>
 800782a:	2303      	movs	r3, #3
 800782c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007834:	2b01      	cmp	r3, #1
 8007836:	d905      	bls.n	8007844 <find_volume+0x1bc>
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	3301      	adds	r3, #1
 800783c:	643b      	str	r3, [r7, #64]	@ 0x40
 800783e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007840:	2b03      	cmp	r3, #3
 8007842:	d9e2      	bls.n	800780a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007848:	2b04      	cmp	r3, #4
 800784a:	d101      	bne.n	8007850 <find_volume+0x1c8>
 800784c:	2301      	movs	r3, #1
 800784e:	e194      	b.n	8007b7a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007854:	2b01      	cmp	r3, #1
 8007856:	d901      	bls.n	800785c <find_volume+0x1d4>
 8007858:	230d      	movs	r3, #13
 800785a:	e18e      	b.n	8007b7a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	3338      	adds	r3, #56	@ 0x38
 8007860:	330b      	adds	r3, #11
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe f894 	bl	8005990 <ld_word>
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	899b      	ldrh	r3, [r3, #12]
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <find_volume+0x1f0>
 8007874:	230d      	movs	r3, #13
 8007876:	e180      	b.n	8007b7a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	3338      	adds	r3, #56	@ 0x38
 800787c:	3316      	adds	r3, #22
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe f886 	bl	8005990 <ld_word>
 8007884:	4603      	mov	r3, r0
 8007886:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <find_volume+0x214>
 800788e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007890:	3338      	adds	r3, #56	@ 0x38
 8007892:	3324      	adds	r3, #36	@ 0x24
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f893 	bl	80059c0 <ld_dword>
 800789a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800789c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	789b      	ldrb	r3, [r3, #2]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d005      	beq.n	80078c0 <find_volume+0x238>
 80078b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b6:	789b      	ldrb	r3, [r3, #2]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d001      	beq.n	80078c0 <find_volume+0x238>
 80078bc:	230d      	movs	r3, #13
 80078be:	e15c      	b.n	8007b7a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c2:	789b      	ldrb	r3, [r3, #2]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078d4:	461a      	mov	r2, r3
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	895b      	ldrh	r3, [r3, #10]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <find_volume+0x26c>
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	895b      	ldrh	r3, [r3, #10]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <find_volume+0x270>
 80078f4:	230d      	movs	r3, #13
 80078f6:	e140      	b.n	8007b7a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	3338      	adds	r3, #56	@ 0x38
 80078fc:	3311      	adds	r3, #17
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe f846 	bl	8005990 <ld_word>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800790c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790e:	891b      	ldrh	r3, [r3, #8]
 8007910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007912:	8992      	ldrh	r2, [r2, #12]
 8007914:	0952      	lsrs	r2, r2, #5
 8007916:	b292      	uxth	r2, r2
 8007918:	fbb3 f1f2 	udiv	r1, r3, r2
 800791c:	fb01 f202 	mul.w	r2, r1, r2
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <find_volume+0x2a8>
 8007928:	230d      	movs	r3, #13
 800792a:	e126      	b.n	8007b7a <find_volume+0x4f2>
 800792c:	200003e4 	.word	0x200003e4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	3338      	adds	r3, #56	@ 0x38
 8007934:	3313      	adds	r3, #19
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe f82a 	bl	8005990 <ld_word>
 800793c:	4603      	mov	r3, r0
 800793e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <find_volume+0x2cc>
 8007946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007948:	3338      	adds	r3, #56	@ 0x38
 800794a:	3320      	adds	r3, #32
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe f837 	bl	80059c0 <ld_dword>
 8007952:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	3338      	adds	r3, #56	@ 0x38
 8007958:	330e      	adds	r3, #14
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f818 	bl	8005990 <ld_word>
 8007960:	4603      	mov	r3, r0
 8007962:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007964:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <find_volume+0x2e6>
 800796a:	230d      	movs	r3, #13
 800796c:	e105      	b.n	8007b7a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800796e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007972:	4413      	add	r3, r2
 8007974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007976:	8911      	ldrh	r1, [r2, #8]
 8007978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800797a:	8992      	ldrh	r2, [r2, #12]
 800797c:	0952      	lsrs	r2, r2, #5
 800797e:	b292      	uxth	r2, r2
 8007980:	fbb1 f2f2 	udiv	r2, r1, r2
 8007984:	b292      	uxth	r2, r2
 8007986:	4413      	add	r3, r2
 8007988:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800798a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	429a      	cmp	r2, r3
 8007990:	d201      	bcs.n	8007996 <find_volume+0x30e>
 8007992:	230d      	movs	r3, #13
 8007994:	e0f1      	b.n	8007b7a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800799e:	8952      	ldrh	r2, [r2, #10]
 80079a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <find_volume+0x328>
 80079ac:	230d      	movs	r3, #13
 80079ae:	e0e4      	b.n	8007b7a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80079b0:	2303      	movs	r3, #3
 80079b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80079bc:	4293      	cmp	r3, r2
 80079be:	d802      	bhi.n	80079c6 <find_volume+0x33e>
 80079c0:	2302      	movs	r3, #2
 80079c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d802      	bhi.n	80079d6 <find_volume+0x34e>
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	1c9a      	adds	r2, r3, #2
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079e2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80079e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079e8:	441a      	add	r2, r3
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80079ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	441a      	add	r2, r3
 80079f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80079f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d11e      	bne.n	8007a3e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a02:	3338      	adds	r3, #56	@ 0x38
 8007a04:	332a      	adds	r3, #42	@ 0x2a
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd ffc2 	bl	8005990 <ld_word>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <find_volume+0x38e>
 8007a12:	230d      	movs	r3, #13
 8007a14:	e0b1      	b.n	8007b7a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	891b      	ldrh	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <find_volume+0x39a>
 8007a1e:	230d      	movs	r3, #13
 8007a20:	e0ab      	b.n	8007b7a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	3338      	adds	r3, #56	@ 0x38
 8007a26:	332c      	adds	r3, #44	@ 0x2c
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fd ffc9 	bl	80059c0 <ld_dword>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a3c:	e01f      	b.n	8007a7e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	891b      	ldrh	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <find_volume+0x3c2>
 8007a46:	230d      	movs	r3, #13
 8007a48:	e097      	b.n	8007b7a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a50:	441a      	add	r2, r3
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d103      	bne.n	8007a66 <find_volume+0x3de>
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	e00a      	b.n	8007a7c <find_volume+0x3f4>
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	69da      	ldr	r2, [r3, #28]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4413      	add	r3, r2
 8007a70:	085a      	lsrs	r2, r3, #1
 8007a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a7c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	899b      	ldrh	r3, [r3, #12]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a8a:	440b      	add	r3, r1
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a90:	8989      	ldrh	r1, [r1, #12]
 8007a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d201      	bcs.n	8007a9e <find_volume+0x416>
 8007a9a:	230d      	movs	r3, #13
 8007a9c:	e06d      	b.n	8007b7a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	619a      	str	r2, [r3, #24]
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	2280      	movs	r2, #128	@ 0x80
 8007ab2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d149      	bne.n	8007b50 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	3338      	adds	r3, #56	@ 0x38
 8007ac0:	3330      	adds	r3, #48	@ 0x30
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd ff64 	bl	8005990 <ld_word>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d140      	bne.n	8007b50 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ad6:	f7fe fa0b 	bl	8005ef0 <move_window>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d137      	bne.n	8007b50 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	3338      	adds	r3, #56	@ 0x38
 8007aea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd ff4e 	bl	8005990 <ld_word>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d127      	bne.n	8007b50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	3338      	adds	r3, #56	@ 0x38
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd ff5b 	bl	80059c0 <ld_dword>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b84 <find_volume+0x4fc>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d11e      	bne.n	8007b50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	3338      	adds	r3, #56	@ 0x38
 8007b16:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd ff50 	bl	80059c0 <ld_dword>
 8007b20:	4603      	mov	r3, r0
 8007b22:	4a19      	ldr	r2, [pc, #100]	@ (8007b88 <find_volume+0x500>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d113      	bne.n	8007b50 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	3338      	adds	r3, #56	@ 0x38
 8007b2c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd ff45 	bl	80059c0 <ld_dword>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	3338      	adds	r3, #56	@ 0x38
 8007b40:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fd ff3b 	bl	80059c0 <ld_dword>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007b56:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b58:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <find_volume+0x504>)
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <find_volume+0x504>)
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	4b09      	ldr	r3, [pc, #36]	@ (8007b8c <find_volume+0x504>)
 8007b66:	881a      	ldrh	r2, [r3, #0]
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	4a08      	ldr	r2, [pc, #32]	@ (8007b90 <find_volume+0x508>)
 8007b70:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b74:	f7fe f954 	bl	8005e20 <clear_lock>
#endif
	return FR_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3758      	adds	r7, #88	@ 0x58
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	41615252 	.word	0x41615252
 8007b88:	61417272 	.word	0x61417272
 8007b8c:	200003e8 	.word	0x200003e8
 8007b90:	2000040c 	.word	0x2000040c

08007b94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b9e:	2309      	movs	r3, #9
 8007ba0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01c      	beq.n	8007be2 <validate+0x4e>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d018      	beq.n	8007be2 <validate+0x4e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <validate+0x4e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	889a      	ldrh	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	88db      	ldrh	r3, [r3, #6]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10c      	bne.n	8007be2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fd fe3e 	bl	8005850 <disk_status>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <validate+0x4e>
			res = FR_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <validate+0x5a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	e000      	b.n	8007bf0 <validate+0x5c>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	6013      	str	r3, [r2, #0]
	return res;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c12:	f107 0310 	add.w	r3, r7, #16
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fc9c 	bl	8007554 <get_ldnumber>
 8007c1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da01      	bge.n	8007c28 <f_mount+0x28>
 8007c24:	230b      	movs	r3, #11
 8007c26:	e02b      	b.n	8007c80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c28:	4a17      	ldr	r2, [pc, #92]	@ (8007c88 <f_mount+0x88>)
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c38:	69b8      	ldr	r0, [r7, #24]
 8007c3a:	f7fe f8f1 	bl	8005e20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	490d      	ldr	r1, [pc, #52]	@ (8007c88 <f_mount+0x88>)
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <f_mount+0x66>
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d001      	beq.n	8007c6a <f_mount+0x6a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e00a      	b.n	8007c80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c6a:	f107 010c 	add.w	r1, r7, #12
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	2200      	movs	r2, #0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fd07 	bl	8007688 <find_volume>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	200003e4 	.word	0x200003e4

08007c8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b09a      	sub	sp, #104	@ 0x68
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <f_open+0x18>
 8007ca0:	2309      	movs	r3, #9
 8007ca2:	e1b7      	b.n	8008014 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007caa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	f107 0114 	add.w	r1, r7, #20
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fce6 	bl	8007688 <find_volume>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 819b 	bne.w	8008002 <f_open+0x376>
		dj.obj.fs = fs;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	f107 0318 	add.w	r3, r7, #24
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff fbc5 	bl	8007468 <follow_path>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ce4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d118      	bne.n	8007d1e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007cf0:	b25b      	sxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da03      	bge.n	8007cfe <f_open+0x72>
				res = FR_INVALID_NAME;
 8007cf6:	2306      	movs	r3, #6
 8007cf8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cfc:	e00f      	b.n	8007d1e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	bf8c      	ite	hi
 8007d04:	2301      	movhi	r3, #1
 8007d06:	2300      	movls	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f107 0318 	add.w	r3, r7, #24
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fd ff3c 	bl	8005b90 <chk_lock>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	f003 031c 	and.w	r3, r3, #28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d07f      	beq.n	8007e28 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007d28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d017      	beq.n	8007d60 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d10e      	bne.n	8007d56 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d38:	f7fd ff86 	bl	8005c48 <enq_lock>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <f_open+0xc4>
 8007d42:	f107 0318 	add.w	r3, r7, #24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f8de 	bl	8006f08 <dir_register>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	e000      	b.n	8007d52 <f_open+0xc6>
 8007d50:	2312      	movs	r3, #18
 8007d52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	f043 0308 	orr.w	r3, r3, #8
 8007d5c:	71fb      	strb	r3, [r7, #7]
 8007d5e:	e010      	b.n	8007d82 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d60:	7fbb      	ldrb	r3, [r7, #30]
 8007d62:	f003 0311 	and.w	r3, r3, #17
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <f_open+0xe6>
					res = FR_DENIED;
 8007d6a:	2307      	movs	r3, #7
 8007d6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d70:	e007      	b.n	8007d82 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <f_open+0xf6>
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d168      	bne.n	8007e5c <f_open+0x1d0>
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d063      	beq.n	8007e5c <f_open+0x1d0>
				dw = GET_FATTIME();
 8007d94:	f7fd fcfe 	bl	8005794 <get_fattime>
 8007d98:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	330e      	adds	r3, #14
 8007d9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd fe4b 	bl	8005a3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	3316      	adds	r3, #22
 8007daa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fd fe45 	bl	8005a3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	330b      	adds	r3, #11
 8007db6:	2220      	movs	r2, #32
 8007db8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fe1a 	bl	80069fa <ld_clust>
 8007dc6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fe32 	bl	8006a38 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	331c      	adds	r3, #28
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fd fe2e 	bl	8005a3c <st_dword>
					fs->wflag = 1;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2201      	movs	r2, #1
 8007de4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d037      	beq.n	8007e5c <f_open+0x1d0>
						dw = fs->winsect;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007df2:	f107 0318 	add.w	r3, r7, #24
 8007df6:	2200      	movs	r2, #0
 8007df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fb22 	bl	8006444 <remove_chain>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d126      	bne.n	8007e5c <f_open+0x1d0>
							res = move_window(fs, dw);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe f86c 	bl	8005ef0 <move_window>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e22:	3a01      	subs	r2, #1
 8007e24:	615a      	str	r2, [r3, #20]
 8007e26:	e019      	b.n	8007e5c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d115      	bne.n	8007e5c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e30:	7fbb      	ldrb	r3, [r7, #30]
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e40:	e00c      	b.n	8007e5c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <f_open+0x1d0>
 8007e4c:	7fbb      	ldrb	r3, [r7, #30]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <f_open+0x1d0>
						res = FR_DENIED;
 8007e56:	2307      	movs	r3, #7
 8007e58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d126      	bne.n	8007eb2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007e7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	bf8c      	ite	hi
 8007e8a:	2301      	movhi	r3, #1
 8007e8c:	2300      	movls	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd fef7 	bl	8005c8c <inc_lock>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <f_open+0x226>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f040 80a3 	bne.w	8008002 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fd99 	bl	80069fa <ld_clust>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	331c      	adds	r3, #28
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fd fd74 	bl	80059c0 <ld_dword>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	88da      	ldrh	r2, [r3, #6]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	79fa      	ldrb	r2, [r7, #7]
 8007ef6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3330      	adds	r3, #48	@ 0x30
 8007f0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd fdde 	bl	8005ad6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d06e      	beq.n	8008002 <f_open+0x376>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d06a      	beq.n	8008002 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	895b      	ldrh	r3, [r3, #10]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	899b      	ldrh	r3, [r3, #12]
 8007f3e:	fb02 f303 	mul.w	r3, r2, r3
 8007f42:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f50:	e016      	b.n	8007f80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe f887 	bl	800606a <get_fat>
 8007f5c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d802      	bhi.n	8007f6a <f_open+0x2de>
 8007f64:	2302      	movs	r3, #2
 8007f66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d102      	bne.n	8007f78 <f_open+0x2ec>
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <f_open+0x304>
 8007f88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d8e0      	bhi.n	8007f52 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d131      	bne.n	8008002 <f_open+0x376>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	899b      	ldrh	r3, [r3, #12]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007faa:	fb01 f202 	mul.w	r2, r1, r2
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d026      	beq.n	8008002 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe f837 	bl	800602c <clust2sect>
 8007fbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <f_open+0x342>
						res = FR_INT_ERR;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007fcc:	e019      	b.n	8008002 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	899b      	ldrh	r3, [r3, #12]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	7858      	ldrb	r0, [r3, #1]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f7fd fc6f 	bl	80058d4 <disk_read>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <f_open+0x376>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008002:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <f_open+0x384>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008010:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008014:	4618      	mov	r0, r3
 8008016:	3768      	adds	r7, #104	@ 0x68
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08e      	sub	sp, #56	@ 0x38
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f107 0214 	add.w	r2, r7, #20
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fda9 	bl	8007b94 <validate>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800804c:	2b00      	cmp	r3, #0
 800804e:	d107      	bne.n	8008060 <f_read+0x44>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7d5b      	ldrb	r3, [r3, #21]
 8008054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008058:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <f_read+0x4a>
 8008060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008064:	e135      	b.n	80082d2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	7d1b      	ldrb	r3, [r3, #20]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <f_read+0x5a>
 8008072:	2307      	movs	r3, #7
 8008074:	e12d      	b.n	80082d2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	429a      	cmp	r2, r3
 8008088:	f240 811e 	bls.w	80082c8 <f_read+0x2ac>
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008090:	e11a      	b.n	80082c8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	8992      	ldrh	r2, [r2, #12]
 800809a:	fbb3 f1f2 	udiv	r1, r3, r2
 800809e:	fb01 f202 	mul.w	r2, r1, r2
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 80d5 	bne.w	8008254 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	8992      	ldrh	r2, [r2, #12]
 80080b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	8952      	ldrh	r2, [r2, #10]
 80080ba:	3a01      	subs	r2, #1
 80080bc:	4013      	ands	r3, r2
 80080be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d12f      	bne.n	8008126 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d4:	e013      	b.n	80080fe <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	4619      	mov	r1, r3
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7fe faaa 	bl	800663e <clmt_clust>
 80080ea:	6338      	str	r0, [r7, #48]	@ 0x30
 80080ec:	e007      	b.n	80080fe <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f7fd ffb7 	bl	800606a <get_fat>
 80080fc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2b01      	cmp	r3, #1
 8008102:	d804      	bhi.n	800810e <f_read+0xf2>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2202      	movs	r2, #2
 8008108:	755a      	strb	r2, [r3, #21]
 800810a:	2302      	movs	r3, #2
 800810c:	e0e1      	b.n	80082d2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d104      	bne.n	8008120 <f_read+0x104>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	755a      	strb	r2, [r3, #21]
 800811c:	2301      	movs	r3, #1
 800811e:	e0d8      	b.n	80082d2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fd ff7c 	bl	800602c <clust2sect>
 8008134:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <f_read+0x12a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2202      	movs	r2, #2
 8008140:	755a      	strb	r2, [r3, #21]
 8008142:	2302      	movs	r3, #2
 8008144:	e0c5      	b.n	80082d2 <f_read+0x2b6>
			sect += csect;
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	4413      	add	r3, r2
 800814c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	899b      	ldrh	r3, [r3, #12]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	fbb3 f3f2 	udiv	r3, r3, r2
 800815a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d041      	beq.n	80081e6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	4413      	add	r3, r2
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	8952      	ldrh	r2, [r2, #10]
 800816c:	4293      	cmp	r3, r2
 800816e:	d905      	bls.n	800817c <f_read+0x160>
					cc = fs->csize - csect;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	895b      	ldrh	r3, [r3, #10]
 8008174:	461a      	mov	r2, r3
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	7858      	ldrb	r0, [r3, #1]
 8008180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008186:	f7fd fba5 	bl	80058d4 <disk_read>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <f_read+0x17e>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	755a      	strb	r2, [r3, #21]
 8008196:	2301      	movs	r3, #1
 8008198:	e09b      	b.n	80082d2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	7d1b      	ldrb	r3, [r3, #20]
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da18      	bge.n	80081d6 <f_read+0x1ba>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d911      	bls.n	80081d6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a1a      	ldr	r2, [r3, #32]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	8992      	ldrh	r2, [r2, #12]
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c4:	18d0      	adds	r0, r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	899b      	ldrh	r3, [r3, #12]
 80081d0:	461a      	mov	r2, r3
 80081d2:	f7fd fc5f 	bl	8005a94 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	899b      	ldrh	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80081e4:	e05c      	b.n	80082a0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d02e      	beq.n	800824e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da18      	bge.n	800822c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	7858      	ldrb	r0, [r3, #1]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	2301      	movs	r3, #1
 800820a:	f7fd fb83 	bl	8005914 <disk_write>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <f_read+0x202>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	755a      	strb	r2, [r3, #21]
 800821a:	2301      	movs	r3, #1
 800821c:	e059      	b.n	80082d2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	7d1b      	ldrb	r3, [r3, #20]
 8008222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008226:	b2da      	uxtb	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	7858      	ldrb	r0, [r3, #1]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008236:	2301      	movs	r3, #1
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	f7fd fb4b 	bl	80058d4 <disk_read>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <f_read+0x232>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	755a      	strb	r2, [r3, #21]
 800824a:	2301      	movs	r3, #1
 800824c:	e041      	b.n	80082d2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	899b      	ldrh	r3, [r3, #12]
 8008258:	4618      	mov	r0, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	8992      	ldrh	r2, [r2, #12]
 8008262:	fbb3 f1f2 	udiv	r1, r3, r2
 8008266:	fb01 f202 	mul.w	r2, r1, r2
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	1ac3      	subs	r3, r0, r3
 800826e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d901      	bls.n	800827c <f_read+0x260>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	8992      	ldrh	r2, [r2, #12]
 800828a:	fbb3 f0f2 	udiv	r0, r3, r2
 800828e:	fb00 f202 	mul.w	r2, r0, r2
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	440b      	add	r3, r1
 8008296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008298:	4619      	mov	r1, r3
 800829a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800829c:	f7fd fbfa 	bl	8005a94 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a4:	4413      	add	r3, r2
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	619a      	str	r2, [r3, #24]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ba:	441a      	add	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f aee1 	bne.w	8008092 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3738      	adds	r7, #56	@ 0x38
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b08c      	sub	sp, #48	@ 0x30
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f107 0210 	add.w	r2, r7, #16
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff fc4a 	bl	8007b94 <validate>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800830a:	2b00      	cmp	r3, #0
 800830c:	d107      	bne.n	800831e <f_write+0x44>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	7d5b      	ldrb	r3, [r3, #21]
 8008312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <f_write+0x4a>
 800831e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008322:	e16a      	b.n	80085fa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	7d1b      	ldrb	r3, [r3, #20]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <f_write+0x5a>
 8008330:	2307      	movs	r3, #7
 8008332:	e162      	b.n	80085fa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	441a      	add	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	429a      	cmp	r2, r3
 8008342:	f080 814c 	bcs.w	80085de <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	43db      	mvns	r3, r3
 800834c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800834e:	e146      	b.n	80085de <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	8992      	ldrh	r2, [r2, #12]
 8008358:	fbb3 f1f2 	udiv	r1, r3, r2
 800835c:	fb01 f202 	mul.w	r2, r1, r2
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 80f1 	bne.w	800854a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	8992      	ldrh	r2, [r2, #12]
 8008370:	fbb3 f3f2 	udiv	r3, r3, r2
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	8952      	ldrh	r2, [r2, #10]
 8008378:	3a01      	subs	r2, #1
 800837a:	4013      	ands	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d143      	bne.n	800840c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10c      	bne.n	80083a6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11a      	bne.n	80083ce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe f8b6 	bl	800650e <create_chain>
 80083a2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80083a4:	e013      	b.n	80083ce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	4619      	mov	r1, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7fe f942 	bl	800663e <clmt_clust>
 80083ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 80083bc:	e007      	b.n	80083ce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f7fe f8a1 	bl	800650e <create_chain>
 80083cc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8109 	beq.w	80085e8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d104      	bne.n	80083e6 <f_write+0x10c>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2202      	movs	r2, #2
 80083e0:	755a      	strb	r2, [r3, #21]
 80083e2:	2302      	movs	r3, #2
 80083e4:	e109      	b.n	80085fa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d104      	bne.n	80083f8 <f_write+0x11e>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	755a      	strb	r2, [r3, #21]
 80083f4:	2301      	movs	r3, #1
 80083f6:	e100      	b.n	80085fa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <f_write+0x132>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800840a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	7d1b      	ldrb	r3, [r3, #20]
 8008410:	b25b      	sxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	da18      	bge.n	8008448 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	7858      	ldrb	r0, [r3, #1]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a1a      	ldr	r2, [r3, #32]
 8008424:	2301      	movs	r3, #1
 8008426:	f7fd fa75 	bl	8005914 <disk_write>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <f_write+0x160>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	755a      	strb	r2, [r3, #21]
 8008436:	2301      	movs	r3, #1
 8008438:	e0df      	b.n	80085fa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	7d1b      	ldrb	r3, [r3, #20]
 800843e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008442:	b2da      	uxtb	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fd fdeb 	bl	800602c <clust2sect>
 8008456:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <f_write+0x18e>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2202      	movs	r2, #2
 8008462:	755a      	strb	r2, [r3, #21]
 8008464:	2302      	movs	r3, #2
 8008466:	e0c8      	b.n	80085fa <f_write+0x320>
			sect += csect;
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	4413      	add	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	899b      	ldrh	r3, [r3, #12]
 8008474:	461a      	mov	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	fbb3 f3f2 	udiv	r3, r3, r2
 800847c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d043      	beq.n	800850c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	4413      	add	r3, r2
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	8952      	ldrh	r2, [r2, #10]
 800848e:	4293      	cmp	r3, r2
 8008490:	d905      	bls.n	800849e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	895b      	ldrh	r3, [r3, #10]
 8008496:	461a      	mov	r2, r3
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	7858      	ldrb	r0, [r3, #1]
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	69f9      	ldr	r1, [r7, #28]
 80084a8:	f7fd fa34 	bl	8005914 <disk_write>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <f_write+0x1e2>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	755a      	strb	r2, [r3, #21]
 80084b8:	2301      	movs	r3, #1
 80084ba:	e09e      	b.n	80085fa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1a      	ldr	r2, [r3, #32]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d918      	bls.n	80084fc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a1a      	ldr	r2, [r3, #32]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	8992      	ldrh	r2, [r2, #12]
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	18d1      	adds	r1, r2, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	899b      	ldrh	r3, [r3, #12]
 80084e8:	461a      	mov	r2, r3
 80084ea:	f7fd fad3 	bl	8005a94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7d1b      	ldrb	r3, [r3, #20]
 80084f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	899b      	ldrh	r3, [r3, #12]
 8008500:	461a      	mov	r2, r3
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	fb02 f303 	mul.w	r3, r2, r3
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800850a:	e04b      	b.n	80085a4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	429a      	cmp	r2, r3
 8008514:	d016      	beq.n	8008544 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800851e:	429a      	cmp	r2, r3
 8008520:	d210      	bcs.n	8008544 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	7858      	ldrb	r0, [r3, #1]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800852c:	2301      	movs	r3, #1
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	f7fd f9d0 	bl	80058d4 <disk_read>
 8008534:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	755a      	strb	r2, [r3, #21]
 8008540:	2301      	movs	r3, #1
 8008542:	e05a      	b.n	80085fa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	899b      	ldrh	r3, [r3, #12]
 800854e:	4618      	mov	r0, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	8992      	ldrh	r2, [r2, #12]
 8008558:	fbb3 f1f2 	udiv	r1, r3, r2
 800855c:	fb01 f202 	mul.w	r2, r1, r2
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	1ac3      	subs	r3, r0, r3
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d901      	bls.n	8008572 <f_write+0x298>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	8992      	ldrh	r2, [r2, #12]
 8008580:	fbb3 f0f2 	udiv	r0, r3, r2
 8008584:	fb00 f202 	mul.w	r2, r0, r2
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	440b      	add	r3, r1
 800858c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	4618      	mov	r0, r3
 8008592:	f7fd fa7f 	bl	8005a94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	7d1b      	ldrb	r3, [r3, #20]
 800859a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	4413      	add	r3, r2
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	441a      	add	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	619a      	str	r2, [r3, #24]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	bf38      	it	cc
 80085c4:	461a      	movcc	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	441a      	add	r2, r3
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f47f aeb5 	bne.w	8008350 <f_write+0x76>
 80085e6:	e000      	b.n	80085ea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7d1b      	ldrb	r3, [r3, #20]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3730      	adds	r7, #48	@ 0x30
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b086      	sub	sp, #24
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f107 0208 	add.w	r2, r7, #8
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff fabe 	bl	8007b94 <validate>
 8008618:	4603      	mov	r3, r0
 800861a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d168      	bne.n	80086f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7d1b      	ldrb	r3, [r3, #20]
 8008626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d062      	beq.n	80086f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	7d1b      	ldrb	r3, [r3, #20]
 8008632:	b25b      	sxtb	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	da15      	bge.n	8008664 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	7858      	ldrb	r0, [r3, #1]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	2301      	movs	r3, #1
 8008648:	f7fd f964 	bl	8005914 <disk_write>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <f_sync+0x54>
 8008652:	2301      	movs	r3, #1
 8008654:	e04f      	b.n	80086f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7d1b      	ldrb	r3, [r3, #20]
 800865a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865e:	b2da      	uxtb	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008664:	f7fd f896 	bl	8005794 <get_fattime>
 8008668:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fd fc3c 	bl	8005ef0 <move_window>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d138      	bne.n	80086f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	330b      	adds	r3, #11
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	330b      	adds	r3, #11
 8008692:	f042 0220 	orr.w	r2, r2, #32
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	461a      	mov	r2, r3
 80086a4:	68f9      	ldr	r1, [r7, #12]
 80086a6:	f7fe f9c7 	bl	8006a38 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f103 021c 	add.w	r2, r3, #28
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fd f9c0 	bl	8005a3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3316      	adds	r3, #22
 80086c0:	6939      	ldr	r1, [r7, #16]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fd f9ba 	bl	8005a3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3312      	adds	r3, #18
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fd f999 	bl	8005a06 <st_word>
					fs->wflag = 1;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2201      	movs	r2, #1
 80086d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fd fc35 	bl	8005f4c <sync_fs>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7d1b      	ldrb	r3, [r3, #20]
 80086ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff ff7b 	bl	8008602 <f_sync>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d118      	bne.n	8008748 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f107 0208 	add.w	r2, r7, #8
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fa38 	bl	8007b94 <validate>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10c      	bne.n	8008748 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fb38 	bl	8005da8 <dec_lock>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d102      	bne.n	8008748 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b092      	sub	sp, #72	@ 0x48
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800875e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	2200      	movs	r2, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe ff8d 	bl	8007688 <find_volume>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008774:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008778:	2b00      	cmp	r3, #0
 800877a:	f040 8099 	bne.w	80088b0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800877e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	3b02      	subs	r3, #2
 800878e:	429a      	cmp	r2, r3
 8008790:	d804      	bhi.n	800879c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e089      	b.n	80088b0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d128      	bne.n	80087fa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80087a8:	2302      	movs	r3, #2
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fd fc57 	bl	800606a <get_fat>
 80087bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80087be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d103      	bne.n	80087ce <f_getfree+0x7c>
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087cc:	e063      	b.n	8008896 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80087ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d103      	bne.n	80087dc <f_getfree+0x8a>
 80087d4:	2302      	movs	r3, #2
 80087d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087da:	e05c      	b.n	8008896 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80087dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <f_getfree+0x96>
 80087e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e4:	3301      	adds	r3, #1
 80087e6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	3301      	adds	r3, #1
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3db      	bcc.n	80087b0 <f_getfree+0x5e>
 80087f8:	e04d      	b.n	8008896 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008804:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	637b      	str	r3, [r7, #52]	@ 0x34
 800880a:	2300      	movs	r3, #0
 800880c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800880e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008810:	2b00      	cmp	r3, #0
 8008812:	d113      	bne.n	800883c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800881c:	4619      	mov	r1, r3
 800881e:	f7fd fb67 	bl	8005ef0 <move_window>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008828:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800882c:	2b00      	cmp	r3, #0
 800882e:	d131      	bne.n	8008894 <f_getfree+0x142>
							p = fs->win;
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	3338      	adds	r3, #56	@ 0x38
 8008834:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	899b      	ldrh	r3, [r3, #12]
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d10f      	bne.n	8008864 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008846:	f7fd f8a3 	bl	8005990 <ld_word>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <f_getfree+0x104>
 8008850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008852:	3301      	adds	r3, #1
 8008854:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	3302      	adds	r3, #2
 800885a:	633b      	str	r3, [r7, #48]	@ 0x30
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	3b02      	subs	r3, #2
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
 8008862:	e010      	b.n	8008886 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008866:	f7fd f8ab 	bl	80059c0 <ld_dword>
 800886a:	4603      	mov	r3, r0
 800886c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <f_getfree+0x128>
 8008874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008876:	3301      	adds	r3, #1
 8008878:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	3304      	adds	r3, #4
 800887e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	3b04      	subs	r3, #4
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008888:	3b01      	subs	r3, #1
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800888c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1bd      	bne.n	800880e <f_getfree+0xbc>
 8008892:	e000      	b.n	8008896 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008894:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800889a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800889c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088a0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	791a      	ldrb	r2, [r3, #4]
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80088b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3748      	adds	r7, #72	@ 0x48
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80088d0:	e01c      	b.n	800890c <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80088d2:	f107 0310 	add.w	r3, r7, #16
 80088d6:	f107 0114 	add.w	r1, r7, #20
 80088da:	2201      	movs	r2, #1
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff fb9d 	bl	800801c <f_read>
		if (rc != 1) break;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d117      	bne.n	8008918 <f_gets+0x5c>
		c = s[0];
 80088e8:	7d3b      	ldrb	r3, [r7, #20]
 80088ea:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b0d      	cmp	r3, #13
 80088f0:	d00b      	beq.n	800890a <f_gets+0x4e>
		*p++ = c;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	61ba      	str	r2, [r7, #24]
 80088f8:	7dfa      	ldrb	r2, [r7, #23]
 80088fa:	701a      	strb	r2, [r3, #0]
		n++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b0a      	cmp	r3, #10
 8008906:	d009      	beq.n	800891c <f_gets+0x60>
 8008908:	e000      	b.n	800890c <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800890a:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3b01      	subs	r3, #1
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	429a      	cmp	r2, r3
 8008914:	dbdd      	blt.n	80088d2 <f_gets+0x16>
 8008916:	e002      	b.n	800891e <f_gets+0x62>
		if (rc != 1) break;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800891c:	bf00      	nop
	}
	*p = 0;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <f_gets+0x72>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e000      	b.n	8008930 <f_gets+0x74>
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	2b0a      	cmp	r3, #10
 8008948:	d103      	bne.n	8008952 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800894a:	210d      	movs	r1, #13
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff fff3 	bl	8008938 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	db25      	blt.n	80089aa <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	60fa      	str	r2, [r7, #12]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	4413      	add	r3, r2
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b3c      	cmp	r3, #60	@ 0x3c
 8008970:	dd12      	ble.n	8008998 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f103 010c 	add.w	r1, r3, #12
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	f7ff fcaa 	bl	80082da <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	429a      	cmp	r2, r3
 800898c:	d101      	bne.n	8008992 <putc_bfd+0x5a>
 800898e:	2300      	movs	r3, #0
 8008990:	e001      	b.n	8008996 <putc_bfd+0x5e>
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	e000      	b.n	80089ac <putc_bfd+0x74>
	if (i < 0) return;
 80089aa:	bf00      	nop
}
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	db16      	blt.n	80089f0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f103 010c 	add.w	r1, r3, #12
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	f7ff fc80 	bl	80082da <f_write>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d102      	bne.n	80089f0 <putc_flush+0x3e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	e001      	b.n	80089f4 <putc_flush+0x42>
	return EOF;
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	605a      	str	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	609a      	str	r2, [r3, #8]
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b096      	sub	sp, #88	@ 0x58
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff ffe0 	bl	80089fc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008a3c:	e009      	b.n	8008a52 <f_puts+0x2c>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	f107 030c 	add.w	r3, r7, #12
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff ff73 	bl	8008938 <putc_bfd>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f1      	bne.n	8008a3e <f_puts+0x18>
	return putc_flush(&pb);
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff ffa7 	bl	80089b2 <putc_flush>
 8008a64:	4603      	mov	r3, r0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3758      	adds	r7, #88	@ 0x58
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a86:	4b1f      	ldr	r3, [pc, #124]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008a88:	7a5b      	ldrb	r3, [r3, #9]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d131      	bne.n	8008af4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a90:	4b1c      	ldr	r3, [pc, #112]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008a92:	7a5b      	ldrb	r3, [r3, #9]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a9e:	4b19      	ldr	r3, [pc, #100]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008aa0:	7a5b      	ldrb	r3, [r3, #9]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	4a17      	ldr	r2, [pc, #92]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008aae:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008ab0:	7a5b      	ldrb	r3, [r3, #9]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4b13      	ldr	r3, [pc, #76]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008ab8:	4413      	add	r3, r2
 8008aba:	79fa      	ldrb	r2, [r7, #7]
 8008abc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008abe:	4b11      	ldr	r3, [pc, #68]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008ac0:	7a5b      	ldrb	r3, [r3, #9]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	b2d1      	uxtb	r1, r2
 8008ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b04 <FATFS_LinkDriverEx+0x94>)
 8008aca:	7251      	strb	r1, [r2, #9]
 8008acc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ace:	7dbb      	ldrb	r3, [r7, #22]
 8008ad0:	3330      	adds	r3, #48	@ 0x30
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	3301      	adds	r3, #1
 8008adc:	223a      	movs	r2, #58	@ 0x3a
 8008ade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	222f      	movs	r2, #47	@ 0x2f
 8008ae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3303      	adds	r3, #3
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	2000060c 	.word	0x2000060c

08008b08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b12:	2200      	movs	r2, #0
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff ffaa 	bl	8008a70 <FATFS_LinkDriverEx>
 8008b1c:	4603      	mov	r3, r0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b38:	d802      	bhi.n	8008b40 <ff_convert+0x18>
		c = chr;
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	81fb      	strh	r3, [r7, #14]
 8008b3e:	e025      	b.n	8008b8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	2bff      	cmp	r3, #255	@ 0xff
 8008b4a:	d805      	bhi.n	8008b58 <ff_convert+0x30>
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	3b80      	subs	r3, #128	@ 0x80
 8008b50:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <ff_convert+0x74>)
 8008b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b56:	e000      	b.n	8008b5a <ff_convert+0x32>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	81fb      	strh	r3, [r7, #14]
 8008b5c:	e016      	b.n	8008b8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008b5e:	2300      	movs	r3, #0
 8008b60:	81fb      	strh	r3, [r7, #14]
 8008b62:	e009      	b.n	8008b78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008b64:	89fb      	ldrh	r3, [r7, #14]
 8008b66:	4a0d      	ldr	r2, [pc, #52]	@ (8008b9c <ff_convert+0x74>)
 8008b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6c:	88fa      	ldrh	r2, [r7, #6]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d006      	beq.n	8008b80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008b72:	89fb      	ldrh	r3, [r7, #14]
 8008b74:	3301      	adds	r3, #1
 8008b76:	81fb      	strh	r3, [r7, #14]
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b7c:	d9f2      	bls.n	8008b64 <ff_convert+0x3c>
 8008b7e:	e000      	b.n	8008b82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008b80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008b82:	89fb      	ldrh	r3, [r7, #14]
 8008b84:	3380      	adds	r3, #128	@ 0x80
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	0800b918 	.word	0x0800b918

08008ba0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb0:	d201      	bcs.n	8008bb6 <ff_wtoupper+0x16>
 8008bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8008cac <ff_wtoupper+0x10c>)
 8008bb4:	e000      	b.n	8008bb8 <ff_wtoupper+0x18>
 8008bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cb0 <ff_wtoupper+0x110>)
 8008bb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	1c9a      	adds	r2, r3, #2
 8008bbe:	617a      	str	r2, [r7, #20]
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008bc4:	8a7b      	ldrh	r3, [r7, #18]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d068      	beq.n	8008c9c <ff_wtoupper+0xfc>
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	8a7b      	ldrh	r3, [r7, #18]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d364      	bcc.n	8008c9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	1c9a      	adds	r2, r3, #2
 8008bd6:	617a      	str	r2, [r7, #20]
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	823b      	strh	r3, [r7, #16]
 8008bdc:	8a3b      	ldrh	r3, [r7, #16]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	81fb      	strh	r3, [r7, #14]
 8008be2:	8a3b      	ldrh	r3, [r7, #16]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008be8:	88fa      	ldrh	r2, [r7, #6]
 8008bea:	8a79      	ldrh	r1, [r7, #18]
 8008bec:	8a3b      	ldrh	r3, [r7, #16]
 8008bee:	440b      	add	r3, r1
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	da49      	bge.n	8008c88 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d84f      	bhi.n	8008c9a <ff_wtoupper+0xfa>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <ff_wtoupper+0x60>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c37 	.word	0x08008c37
 8008c08:	08008c4d 	.word	0x08008c4d
 8008c0c:	08008c55 	.word	0x08008c55
 8008c10:	08008c5d 	.word	0x08008c5d
 8008c14:	08008c65 	.word	0x08008c65
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008c75 	.word	0x08008c75
 8008c20:	08008c7d 	.word	0x08008c7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008c24:	88fa      	ldrh	r2, [r7, #6]
 8008c26:	8a7b      	ldrh	r3, [r7, #18]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4413      	add	r3, r2
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	80fb      	strh	r3, [r7, #6]
 8008c34:	e027      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	8a7b      	ldrh	r3, [r7, #18]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	80fb      	strh	r3, [r7, #6]
 8008c4a:	e01c      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	3b10      	subs	r3, #16
 8008c50:	80fb      	strh	r3, [r7, #6]
 8008c52:	e018      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	3b20      	subs	r3, #32
 8008c58:	80fb      	strh	r3, [r7, #6]
 8008c5a:	e014      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	3b30      	subs	r3, #48	@ 0x30
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	e010      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	3b1a      	subs	r3, #26
 8008c68:	80fb      	strh	r3, [r7, #6]
 8008c6a:	e00c      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	e008      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	3b50      	subs	r3, #80	@ 0x50
 8008c78:	80fb      	strh	r3, [r7, #6]
 8008c7a:	e004      	b.n	8008c86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008c82:	80fb      	strh	r3, [r7, #6]
 8008c84:	bf00      	nop
			}
			break;
 8008c86:	e008      	b.n	8008c9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008c88:	89fb      	ldrh	r3, [r7, #14]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d195      	bne.n	8008bba <ff_wtoupper+0x1a>
 8008c8e:	8a3b      	ldrh	r3, [r7, #16]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4413      	add	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008c98:	e78f      	b.n	8008bba <ff_wtoupper+0x1a>
			break;
 8008c9a:	bf00      	nop
	}

	return chr;
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	0800ba18 	.word	0x0800ba18
 8008cb0:	0800bc0c 	.word	0x0800bc0c

08008cb4 <__cvt>:
 8008cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	ec57 6b10 	vmov	r6, r7, d0
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	bfbb      	ittet	lt
 8008cc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cca:	461f      	movlt	r7, r3
 8008ccc:	2300      	movge	r3, #0
 8008cce:	232d      	movlt	r3, #45	@ 0x2d
 8008cd0:	700b      	strb	r3, [r1, #0]
 8008cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008cd8:	4691      	mov	r9, r2
 8008cda:	f023 0820 	bic.w	r8, r3, #32
 8008cde:	bfbc      	itt	lt
 8008ce0:	4632      	movlt	r2, r6
 8008ce2:	4616      	movlt	r6, r2
 8008ce4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ce8:	d005      	beq.n	8008cf6 <__cvt+0x42>
 8008cea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cee:	d100      	bne.n	8008cf2 <__cvt+0x3e>
 8008cf0:	3401      	adds	r4, #1
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	e000      	b.n	8008cf8 <__cvt+0x44>
 8008cf6:	2103      	movs	r1, #3
 8008cf8:	ab03      	add	r3, sp, #12
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	ab02      	add	r3, sp, #8
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	ec47 6b10 	vmov	d0, r6, r7
 8008d04:	4653      	mov	r3, sl
 8008d06:	4622      	mov	r2, r4
 8008d08:	f000 ff5e 	bl	8009bc8 <_dtoa_r>
 8008d0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d10:	4605      	mov	r5, r0
 8008d12:	d119      	bne.n	8008d48 <__cvt+0x94>
 8008d14:	f019 0f01 	tst.w	r9, #1
 8008d18:	d00e      	beq.n	8008d38 <__cvt+0x84>
 8008d1a:	eb00 0904 	add.w	r9, r0, r4
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2300      	movs	r3, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d2a:	b108      	cbz	r0, 8008d30 <__cvt+0x7c>
 8008d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d30:	2230      	movs	r2, #48	@ 0x30
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	454b      	cmp	r3, r9
 8008d36:	d31e      	bcc.n	8008d76 <__cvt+0xc2>
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d3c:	1b5b      	subs	r3, r3, r5
 8008d3e:	4628      	mov	r0, r5
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	b004      	add	sp, #16
 8008d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d4c:	eb00 0904 	add.w	r9, r0, r4
 8008d50:	d1e5      	bne.n	8008d1e <__cvt+0x6a>
 8008d52:	7803      	ldrb	r3, [r0, #0]
 8008d54:	2b30      	cmp	r3, #48	@ 0x30
 8008d56:	d10a      	bne.n	8008d6e <__cvt+0xba>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7f7 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d64:	b918      	cbnz	r0, 8008d6e <__cvt+0xba>
 8008d66:	f1c4 0401 	rsb	r4, r4, #1
 8008d6a:	f8ca 4000 	str.w	r4, [sl]
 8008d6e:	f8da 3000 	ldr.w	r3, [sl]
 8008d72:	4499      	add	r9, r3
 8008d74:	e7d3      	b.n	8008d1e <__cvt+0x6a>
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	9103      	str	r1, [sp, #12]
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e7d9      	b.n	8008d32 <__cvt+0x7e>

08008d7e <__exponent>:
 8008d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d80:	2900      	cmp	r1, #0
 8008d82:	bfba      	itte	lt
 8008d84:	4249      	neglt	r1, r1
 8008d86:	232d      	movlt	r3, #45	@ 0x2d
 8008d88:	232b      	movge	r3, #43	@ 0x2b
 8008d8a:	2909      	cmp	r1, #9
 8008d8c:	7002      	strb	r2, [r0, #0]
 8008d8e:	7043      	strb	r3, [r0, #1]
 8008d90:	dd29      	ble.n	8008de6 <__exponent+0x68>
 8008d92:	f10d 0307 	add.w	r3, sp, #7
 8008d96:	461d      	mov	r5, r3
 8008d98:	270a      	movs	r7, #10
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008da0:	fb07 1416 	mls	r4, r7, r6, r1
 8008da4:	3430      	adds	r4, #48	@ 0x30
 8008da6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008daa:	460c      	mov	r4, r1
 8008dac:	2c63      	cmp	r4, #99	@ 0x63
 8008dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008db2:	4631      	mov	r1, r6
 8008db4:	dcf1      	bgt.n	8008d9a <__exponent+0x1c>
 8008db6:	3130      	adds	r1, #48	@ 0x30
 8008db8:	1e94      	subs	r4, r2, #2
 8008dba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dbe:	1c41      	adds	r1, r0, #1
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	42ab      	cmp	r3, r5
 8008dc4:	d30a      	bcc.n	8008ddc <__exponent+0x5e>
 8008dc6:	f10d 0309 	add.w	r3, sp, #9
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	42ac      	cmp	r4, r5
 8008dce:	bf88      	it	hi
 8008dd0:	2300      	movhi	r3, #0
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	4403      	add	r3, r0
 8008dd6:	1a18      	subs	r0, r3, r0
 8008dd8:	b003      	add	sp, #12
 8008dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ddc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008de0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008de4:	e7ed      	b.n	8008dc2 <__exponent+0x44>
 8008de6:	2330      	movs	r3, #48	@ 0x30
 8008de8:	3130      	adds	r1, #48	@ 0x30
 8008dea:	7083      	strb	r3, [r0, #2]
 8008dec:	70c1      	strb	r1, [r0, #3]
 8008dee:	1d03      	adds	r3, r0, #4
 8008df0:	e7f1      	b.n	8008dd6 <__exponent+0x58>
	...

08008df4 <_printf_float>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b08d      	sub	sp, #52	@ 0x34
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e00:	4616      	mov	r6, r2
 8008e02:	461f      	mov	r7, r3
 8008e04:	4605      	mov	r5, r0
 8008e06:	f000 fdbf 	bl	8009988 <_localeconv_r>
 8008e0a:	6803      	ldr	r3, [r0, #0]
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f7 fa36 	bl	8000280 <strlen>
 8008e14:	2300      	movs	r3, #0
 8008e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e18:	f8d8 3000 	ldr.w	r3, [r8]
 8008e1c:	9005      	str	r0, [sp, #20]
 8008e1e:	3307      	adds	r3, #7
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	f103 0208 	add.w	r2, r3, #8
 8008e28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e2c:	f8d4 b000 	ldr.w	fp, [r4]
 8008e30:	f8c8 2000 	str.w	r2, [r8]
 8008e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80090bc <_printf_float+0x2c8>)
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	f7f7 fe74 	bl	8000b3c <__aeabi_dcmpun>
 8008e54:	bb70      	cbnz	r0, 8008eb4 <_printf_float+0xc0>
 8008e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5a:	4b98      	ldr	r3, [pc, #608]	@ (80090bc <_printf_float+0x2c8>)
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	f7f7 fe4e 	bl	8000b00 <__aeabi_dcmple>
 8008e64:	bb30      	cbnz	r0, 8008eb4 <_printf_float+0xc0>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fe3d 	bl	8000aec <__aeabi_dcmplt>
 8008e72:	b110      	cbz	r0, 8008e7a <_printf_float+0x86>
 8008e74:	232d      	movs	r3, #45	@ 0x2d
 8008e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e7a:	4a91      	ldr	r2, [pc, #580]	@ (80090c0 <_printf_float+0x2cc>)
 8008e7c:	4b91      	ldr	r3, [pc, #580]	@ (80090c4 <_printf_float+0x2d0>)
 8008e7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e82:	bf94      	ite	ls
 8008e84:	4690      	movls	r8, r2
 8008e86:	4698      	movhi	r8, r3
 8008e88:	2303      	movs	r3, #3
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	f02b 0304 	bic.w	r3, fp, #4
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	f04f 0900 	mov.w	r9, #0
 8008e96:	9700      	str	r7, [sp, #0]
 8008e98:	4633      	mov	r3, r6
 8008e9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f9d2 	bl	8009248 <_printf_common>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f040 808d 	bne.w	8008fc4 <_printf_float+0x1d0>
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b00d      	add	sp, #52	@ 0x34
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe3e 	bl	8000b3c <__aeabi_dcmpun>
 8008ec0:	b140      	cbz	r0, 8008ed4 <_printf_float+0xe0>
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfbc      	itt	lt
 8008ec8:	232d      	movlt	r3, #45	@ 0x2d
 8008eca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ece:	4a7e      	ldr	r2, [pc, #504]	@ (80090c8 <_printf_float+0x2d4>)
 8008ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80090cc <_printf_float+0x2d8>)
 8008ed2:	e7d4      	b.n	8008e7e <_printf_float+0x8a>
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eda:	9206      	str	r2, [sp, #24]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	d13b      	bne.n	8008f58 <_printf_float+0x164>
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	6063      	str	r3, [r4, #4]
 8008ee4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ef0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ef4:	ab09      	add	r3, sp, #36	@ 0x24
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	ec49 8b10 	vmov	d0, r8, r9
 8008efe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f02:	4628      	mov	r0, r5
 8008f04:	f7ff fed6 	bl	8008cb4 <__cvt>
 8008f08:	9b06      	ldr	r3, [sp, #24]
 8008f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f0c:	2b47      	cmp	r3, #71	@ 0x47
 8008f0e:	4680      	mov	r8, r0
 8008f10:	d129      	bne.n	8008f66 <_printf_float+0x172>
 8008f12:	1cc8      	adds	r0, r1, #3
 8008f14:	db02      	blt.n	8008f1c <_printf_float+0x128>
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	dd41      	ble.n	8008fa0 <_printf_float+0x1ac>
 8008f1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f20:	fa5f fa8a 	uxtb.w	sl, sl
 8008f24:	3901      	subs	r1, #1
 8008f26:	4652      	mov	r2, sl
 8008f28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f2e:	f7ff ff26 	bl	8008d7e <__exponent>
 8008f32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f34:	1813      	adds	r3, r2, r0
 8008f36:	2a01      	cmp	r2, #1
 8008f38:	4681      	mov	r9, r0
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	dc02      	bgt.n	8008f44 <_printf_float+0x150>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	07d2      	lsls	r2, r2, #31
 8008f42:	d501      	bpl.n	8008f48 <_printf_float+0x154>
 8008f44:	3301      	adds	r3, #1
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0a2      	beq.n	8008e96 <_printf_float+0xa2>
 8008f50:	232d      	movs	r3, #45	@ 0x2d
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f56:	e79e      	b.n	8008e96 <_printf_float+0xa2>
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	2a47      	cmp	r2, #71	@ 0x47
 8008f5c:	d1c2      	bne.n	8008ee4 <_printf_float+0xf0>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1c0      	bne.n	8008ee4 <_printf_float+0xf0>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7bd      	b.n	8008ee2 <_printf_float+0xee>
 8008f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f6a:	d9db      	bls.n	8008f24 <_printf_float+0x130>
 8008f6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f70:	d118      	bne.n	8008fa4 <_printf_float+0x1b0>
 8008f72:	2900      	cmp	r1, #0
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	dd0b      	ble.n	8008f90 <_printf_float+0x19c>
 8008f78:	6121      	str	r1, [r4, #16]
 8008f7a:	b913      	cbnz	r3, 8008f82 <_printf_float+0x18e>
 8008f7c:	6822      	ldr	r2, [r4, #0]
 8008f7e:	07d0      	lsls	r0, r2, #31
 8008f80:	d502      	bpl.n	8008f88 <_printf_float+0x194>
 8008f82:	3301      	adds	r3, #1
 8008f84:	440b      	add	r3, r1
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f8a:	f04f 0900 	mov.w	r9, #0
 8008f8e:	e7db      	b.n	8008f48 <_printf_float+0x154>
 8008f90:	b913      	cbnz	r3, 8008f98 <_printf_float+0x1a4>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	07d2      	lsls	r2, r2, #31
 8008f96:	d501      	bpl.n	8008f9c <_printf_float+0x1a8>
 8008f98:	3302      	adds	r3, #2
 8008f9a:	e7f4      	b.n	8008f86 <_printf_float+0x192>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e7f2      	b.n	8008f86 <_printf_float+0x192>
 8008fa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa6:	4299      	cmp	r1, r3
 8008fa8:	db05      	blt.n	8008fb6 <_printf_float+0x1c2>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	6121      	str	r1, [r4, #16]
 8008fae:	07d8      	lsls	r0, r3, #31
 8008fb0:	d5ea      	bpl.n	8008f88 <_printf_float+0x194>
 8008fb2:	1c4b      	adds	r3, r1, #1
 8008fb4:	e7e7      	b.n	8008f86 <_printf_float+0x192>
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	bfd4      	ite	le
 8008fba:	f1c1 0202 	rsble	r2, r1, #2
 8008fbe:	2201      	movgt	r2, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	e7e0      	b.n	8008f86 <_printf_float+0x192>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	055a      	lsls	r2, r3, #21
 8008fc8:	d407      	bmi.n	8008fda <_printf_float+0x1e6>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	4642      	mov	r2, r8
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d12b      	bne.n	8009030 <_printf_float+0x23c>
 8008fd8:	e767      	b.n	8008eaa <_printf_float+0xb6>
 8008fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fde:	f240 80dd 	bls.w	800919c <_printf_float+0x3a8>
 8008fe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f7f7 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d033      	beq.n	800905a <_printf_float+0x266>
 8008ff2:	4a37      	ldr	r2, [pc, #220]	@ (80090d0 <_printf_float+0x2dc>)
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f af54 	beq.w	8008eaa <_printf_float+0xb6>
 8009002:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009006:	4543      	cmp	r3, r8
 8009008:	db02      	blt.n	8009010 <_printf_float+0x21c>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07d8      	lsls	r0, r3, #31
 800900e:	d50f      	bpl.n	8009030 <_printf_float+0x23c>
 8009010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f af45 	beq.w	8008eaa <_printf_float+0xb6>
 8009020:	f04f 0900 	mov.w	r9, #0
 8009024:	f108 38ff 	add.w	r8, r8, #4294967295
 8009028:	f104 0a1a 	add.w	sl, r4, #26
 800902c:	45c8      	cmp	r8, r9
 800902e:	dc09      	bgt.n	8009044 <_printf_float+0x250>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	f100 8103 	bmi.w	800923e <_printf_float+0x44a>
 8009038:	68e0      	ldr	r0, [r4, #12]
 800903a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800903c:	4298      	cmp	r0, r3
 800903e:	bfb8      	it	lt
 8009040:	4618      	movlt	r0, r3
 8009042:	e734      	b.n	8008eae <_printf_float+0xba>
 8009044:	2301      	movs	r3, #1
 8009046:	4652      	mov	r2, sl
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af2b 	beq.w	8008eaa <_printf_float+0xb6>
 8009054:	f109 0901 	add.w	r9, r9, #1
 8009058:	e7e8      	b.n	800902c <_printf_float+0x238>
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc39      	bgt.n	80090d4 <_printf_float+0x2e0>
 8009060:	4a1b      	ldr	r2, [pc, #108]	@ (80090d0 <_printf_float+0x2dc>)
 8009062:	2301      	movs	r3, #1
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	f43f af1d 	beq.w	8008eaa <_printf_float+0xb6>
 8009070:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009074:	ea59 0303 	orrs.w	r3, r9, r3
 8009078:	d102      	bne.n	8009080 <_printf_float+0x28c>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	07d9      	lsls	r1, r3, #31
 800907e:	d5d7      	bpl.n	8009030 <_printf_float+0x23c>
 8009080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af0d 	beq.w	8008eaa <_printf_float+0xb6>
 8009090:	f04f 0a00 	mov.w	sl, #0
 8009094:	f104 0b1a 	add.w	fp, r4, #26
 8009098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909a:	425b      	negs	r3, r3
 800909c:	4553      	cmp	r3, sl
 800909e:	dc01      	bgt.n	80090a4 <_printf_float+0x2b0>
 80090a0:	464b      	mov	r3, r9
 80090a2:	e793      	b.n	8008fcc <_printf_float+0x1d8>
 80090a4:	2301      	movs	r3, #1
 80090a6:	465a      	mov	r2, fp
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f aefb 	beq.w	8008eaa <_printf_float+0xb6>
 80090b4:	f10a 0a01 	add.w	sl, sl, #1
 80090b8:	e7ee      	b.n	8009098 <_printf_float+0x2a4>
 80090ba:	bf00      	nop
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	0800bcc8 	.word	0x0800bcc8
 80090c4:	0800bccc 	.word	0x0800bccc
 80090c8:	0800bcd0 	.word	0x0800bcd0
 80090cc:	0800bcd4 	.word	0x0800bcd4
 80090d0:	0800bcd8 	.word	0x0800bcd8
 80090d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090da:	4553      	cmp	r3, sl
 80090dc:	bfa8      	it	ge
 80090de:	4653      	movge	r3, sl
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	4699      	mov	r9, r3
 80090e4:	dc36      	bgt.n	8009154 <_printf_float+0x360>
 80090e6:	f04f 0b00 	mov.w	fp, #0
 80090ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ee:	f104 021a 	add.w	r2, r4, #26
 80090f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090f4:	9306      	str	r3, [sp, #24]
 80090f6:	eba3 0309 	sub.w	r3, r3, r9
 80090fa:	455b      	cmp	r3, fp
 80090fc:	dc31      	bgt.n	8009162 <_printf_float+0x36e>
 80090fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009100:	459a      	cmp	sl, r3
 8009102:	dc3a      	bgt.n	800917a <_printf_float+0x386>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07da      	lsls	r2, r3, #31
 8009108:	d437      	bmi.n	800917a <_printf_float+0x386>
 800910a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910c:	ebaa 0903 	sub.w	r9, sl, r3
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	ebaa 0303 	sub.w	r3, sl, r3
 8009116:	4599      	cmp	r9, r3
 8009118:	bfa8      	it	ge
 800911a:	4699      	movge	r9, r3
 800911c:	f1b9 0f00 	cmp.w	r9, #0
 8009120:	dc33      	bgt.n	800918a <_printf_float+0x396>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800912a:	f104 0b1a 	add.w	fp, r4, #26
 800912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009130:	ebaa 0303 	sub.w	r3, sl, r3
 8009134:	eba3 0309 	sub.w	r3, r3, r9
 8009138:	4543      	cmp	r3, r8
 800913a:	f77f af79 	ble.w	8009030 <_printf_float+0x23c>
 800913e:	2301      	movs	r3, #1
 8009140:	465a      	mov	r2, fp
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f aeae 	beq.w	8008eaa <_printf_float+0xb6>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	e7ec      	b.n	800912e <_printf_float+0x33a>
 8009154:	4642      	mov	r2, r8
 8009156:	4631      	mov	r1, r6
 8009158:	4628      	mov	r0, r5
 800915a:	47b8      	blx	r7
 800915c:	3001      	adds	r0, #1
 800915e:	d1c2      	bne.n	80090e6 <_printf_float+0x2f2>
 8009160:	e6a3      	b.n	8008eaa <_printf_float+0xb6>
 8009162:	2301      	movs	r3, #1
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	9206      	str	r2, [sp, #24]
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae9c 	beq.w	8008eaa <_printf_float+0xb6>
 8009172:	9a06      	ldr	r2, [sp, #24]
 8009174:	f10b 0b01 	add.w	fp, fp, #1
 8009178:	e7bb      	b.n	80090f2 <_printf_float+0x2fe>
 800917a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	d1c0      	bne.n	800910a <_printf_float+0x316>
 8009188:	e68f      	b.n	8008eaa <_printf_float+0xb6>
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	464b      	mov	r3, r9
 800918e:	4442      	add	r2, r8
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	d1c3      	bne.n	8009122 <_printf_float+0x32e>
 800919a:	e686      	b.n	8008eaa <_printf_float+0xb6>
 800919c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091a0:	f1ba 0f01 	cmp.w	sl, #1
 80091a4:	dc01      	bgt.n	80091aa <_printf_float+0x3b6>
 80091a6:	07db      	lsls	r3, r3, #31
 80091a8:	d536      	bpl.n	8009218 <_printf_float+0x424>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4642      	mov	r2, r8
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f ae78 	beq.w	8008eaa <_printf_float+0xb6>
 80091ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	f43f ae70 	beq.w	8008eaa <_printf_float+0xb6>
 80091ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091ce:	2200      	movs	r2, #0
 80091d0:	2300      	movs	r3, #0
 80091d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d6:	f7f7 fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80091da:	b9c0      	cbnz	r0, 800920e <_printf_float+0x41a>
 80091dc:	4653      	mov	r3, sl
 80091de:	f108 0201 	add.w	r2, r8, #1
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	d10c      	bne.n	8009206 <_printf_float+0x412>
 80091ec:	e65d      	b.n	8008eaa <_printf_float+0xb6>
 80091ee:	2301      	movs	r3, #1
 80091f0:	465a      	mov	r2, fp
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f ae56 	beq.w	8008eaa <_printf_float+0xb6>
 80091fe:	f108 0801 	add.w	r8, r8, #1
 8009202:	45d0      	cmp	r8, sl
 8009204:	dbf3      	blt.n	80091ee <_printf_float+0x3fa>
 8009206:	464b      	mov	r3, r9
 8009208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800920c:	e6df      	b.n	8008fce <_printf_float+0x1da>
 800920e:	f04f 0800 	mov.w	r8, #0
 8009212:	f104 0b1a 	add.w	fp, r4, #26
 8009216:	e7f4      	b.n	8009202 <_printf_float+0x40e>
 8009218:	2301      	movs	r3, #1
 800921a:	4642      	mov	r2, r8
 800921c:	e7e1      	b.n	80091e2 <_printf_float+0x3ee>
 800921e:	2301      	movs	r3, #1
 8009220:	464a      	mov	r2, r9
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	f43f ae3e 	beq.w	8008eaa <_printf_float+0xb6>
 800922e:	f108 0801 	add.w	r8, r8, #1
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009236:	1a5b      	subs	r3, r3, r1
 8009238:	4543      	cmp	r3, r8
 800923a:	dcf0      	bgt.n	800921e <_printf_float+0x42a>
 800923c:	e6fc      	b.n	8009038 <_printf_float+0x244>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	f104 0919 	add.w	r9, r4, #25
 8009246:	e7f4      	b.n	8009232 <_printf_float+0x43e>

08009248 <_printf_common>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	4616      	mov	r6, r2
 800924e:	4698      	mov	r8, r3
 8009250:	688a      	ldr	r2, [r1, #8]
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009258:	4293      	cmp	r3, r2
 800925a:	bfb8      	it	lt
 800925c:	4613      	movlt	r3, r2
 800925e:	6033      	str	r3, [r6, #0]
 8009260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009264:	4607      	mov	r7, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b10a      	cbz	r2, 800926e <_printf_common+0x26>
 800926a:	3301      	adds	r3, #1
 800926c:	6033      	str	r3, [r6, #0]
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	0699      	lsls	r1, r3, #26
 8009272:	bf42      	ittt	mi
 8009274:	6833      	ldrmi	r3, [r6, #0]
 8009276:	3302      	addmi	r3, #2
 8009278:	6033      	strmi	r3, [r6, #0]
 800927a:	6825      	ldr	r5, [r4, #0]
 800927c:	f015 0506 	ands.w	r5, r5, #6
 8009280:	d106      	bne.n	8009290 <_printf_common+0x48>
 8009282:	f104 0a19 	add.w	sl, r4, #25
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	6832      	ldr	r2, [r6, #0]
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	42ab      	cmp	r3, r5
 800928e:	dc26      	bgt.n	80092de <_printf_common+0x96>
 8009290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	3b00      	subs	r3, #0
 8009298:	bf18      	it	ne
 800929a:	2301      	movne	r3, #1
 800929c:	0692      	lsls	r2, r2, #26
 800929e:	d42b      	bmi.n	80092f8 <_printf_common+0xb0>
 80092a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092a4:	4641      	mov	r1, r8
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c8      	blx	r9
 80092aa:	3001      	adds	r0, #1
 80092ac:	d01e      	beq.n	80092ec <_printf_common+0xa4>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	6922      	ldr	r2, [r4, #16]
 80092b2:	f003 0306 	and.w	r3, r3, #6
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	bf02      	ittt	eq
 80092ba:	68e5      	ldreq	r5, [r4, #12]
 80092bc:	6833      	ldreq	r3, [r6, #0]
 80092be:	1aed      	subeq	r5, r5, r3
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	bf0c      	ite	eq
 80092c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c8:	2500      	movne	r5, #0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	bfc4      	itt	gt
 80092ce:	1a9b      	subgt	r3, r3, r2
 80092d0:	18ed      	addgt	r5, r5, r3
 80092d2:	2600      	movs	r6, #0
 80092d4:	341a      	adds	r4, #26
 80092d6:	42b5      	cmp	r5, r6
 80092d8:	d11a      	bne.n	8009310 <_printf_common+0xc8>
 80092da:	2000      	movs	r0, #0
 80092dc:	e008      	b.n	80092f0 <_printf_common+0xa8>
 80092de:	2301      	movs	r3, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	4641      	mov	r1, r8
 80092e4:	4638      	mov	r0, r7
 80092e6:	47c8      	blx	r9
 80092e8:	3001      	adds	r0, #1
 80092ea:	d103      	bne.n	80092f4 <_printf_common+0xac>
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	3501      	adds	r5, #1
 80092f6:	e7c6      	b.n	8009286 <_printf_common+0x3e>
 80092f8:	18e1      	adds	r1, r4, r3
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	2030      	movs	r0, #48	@ 0x30
 80092fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009302:	4422      	add	r2, r4
 8009304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800930c:	3302      	adds	r3, #2
 800930e:	e7c7      	b.n	80092a0 <_printf_common+0x58>
 8009310:	2301      	movs	r3, #1
 8009312:	4622      	mov	r2, r4
 8009314:	4641      	mov	r1, r8
 8009316:	4638      	mov	r0, r7
 8009318:	47c8      	blx	r9
 800931a:	3001      	adds	r0, #1
 800931c:	d0e6      	beq.n	80092ec <_printf_common+0xa4>
 800931e:	3601      	adds	r6, #1
 8009320:	e7d9      	b.n	80092d6 <_printf_common+0x8e>
	...

08009324 <_printf_i>:
 8009324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009328:	7e0f      	ldrb	r7, [r1, #24]
 800932a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800932c:	2f78      	cmp	r7, #120	@ 0x78
 800932e:	4691      	mov	r9, r2
 8009330:	4680      	mov	r8, r0
 8009332:	460c      	mov	r4, r1
 8009334:	469a      	mov	sl, r3
 8009336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800933a:	d807      	bhi.n	800934c <_printf_i+0x28>
 800933c:	2f62      	cmp	r7, #98	@ 0x62
 800933e:	d80a      	bhi.n	8009356 <_printf_i+0x32>
 8009340:	2f00      	cmp	r7, #0
 8009342:	f000 80d2 	beq.w	80094ea <_printf_i+0x1c6>
 8009346:	2f58      	cmp	r7, #88	@ 0x58
 8009348:	f000 80b9 	beq.w	80094be <_printf_i+0x19a>
 800934c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009354:	e03a      	b.n	80093cc <_printf_i+0xa8>
 8009356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800935a:	2b15      	cmp	r3, #21
 800935c:	d8f6      	bhi.n	800934c <_printf_i+0x28>
 800935e:	a101      	add	r1, pc, #4	@ (adr r1, 8009364 <_printf_i+0x40>)
 8009360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093d1 	.word	0x080093d1
 800936c:	0800934d 	.word	0x0800934d
 8009370:	0800934d 	.word	0x0800934d
 8009374:	0800934d 	.word	0x0800934d
 8009378:	0800934d 	.word	0x0800934d
 800937c:	080093d1 	.word	0x080093d1
 8009380:	0800934d 	.word	0x0800934d
 8009384:	0800934d 	.word	0x0800934d
 8009388:	0800934d 	.word	0x0800934d
 800938c:	0800934d 	.word	0x0800934d
 8009390:	080094d1 	.word	0x080094d1
 8009394:	080093fb 	.word	0x080093fb
 8009398:	0800948b 	.word	0x0800948b
 800939c:	0800934d 	.word	0x0800934d
 80093a0:	0800934d 	.word	0x0800934d
 80093a4:	080094f3 	.word	0x080094f3
 80093a8:	0800934d 	.word	0x0800934d
 80093ac:	080093fb 	.word	0x080093fb
 80093b0:	0800934d 	.word	0x0800934d
 80093b4:	0800934d 	.word	0x0800934d
 80093b8:	08009493 	.word	0x08009493
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	1d1a      	adds	r2, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6032      	str	r2, [r6, #0]
 80093c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093cc:	2301      	movs	r3, #1
 80093ce:	e09d      	b.n	800950c <_printf_i+0x1e8>
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	6031      	str	r1, [r6, #0]
 80093d8:	0606      	lsls	r6, r0, #24
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0xbc>
 80093dc:	681d      	ldr	r5, [r3, #0]
 80093de:	e003      	b.n	80093e8 <_printf_i+0xc4>
 80093e0:	0645      	lsls	r5, r0, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0xb8>
 80093e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	da03      	bge.n	80093f4 <_printf_i+0xd0>
 80093ec:	232d      	movs	r3, #45	@ 0x2d
 80093ee:	426d      	negs	r5, r5
 80093f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f4:	4859      	ldr	r0, [pc, #356]	@ (800955c <_printf_i+0x238>)
 80093f6:	230a      	movs	r3, #10
 80093f8:	e011      	b.n	800941e <_printf_i+0xfa>
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	0608      	lsls	r0, r1, #24
 8009400:	f853 5b04 	ldr.w	r5, [r3], #4
 8009404:	d402      	bmi.n	800940c <_printf_i+0xe8>
 8009406:	0649      	lsls	r1, r1, #25
 8009408:	bf48      	it	mi
 800940a:	b2ad      	uxthmi	r5, r5
 800940c:	2f6f      	cmp	r7, #111	@ 0x6f
 800940e:	4853      	ldr	r0, [pc, #332]	@ (800955c <_printf_i+0x238>)
 8009410:	6033      	str	r3, [r6, #0]
 8009412:	bf14      	ite	ne
 8009414:	230a      	movne	r3, #10
 8009416:	2308      	moveq	r3, #8
 8009418:	2100      	movs	r1, #0
 800941a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800941e:	6866      	ldr	r6, [r4, #4]
 8009420:	60a6      	str	r6, [r4, #8]
 8009422:	2e00      	cmp	r6, #0
 8009424:	bfa2      	ittt	ge
 8009426:	6821      	ldrge	r1, [r4, #0]
 8009428:	f021 0104 	bicge.w	r1, r1, #4
 800942c:	6021      	strge	r1, [r4, #0]
 800942e:	b90d      	cbnz	r5, 8009434 <_printf_i+0x110>
 8009430:	2e00      	cmp	r6, #0
 8009432:	d04b      	beq.n	80094cc <_printf_i+0x1a8>
 8009434:	4616      	mov	r6, r2
 8009436:	fbb5 f1f3 	udiv	r1, r5, r3
 800943a:	fb03 5711 	mls	r7, r3, r1, r5
 800943e:	5dc7      	ldrb	r7, [r0, r7]
 8009440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009444:	462f      	mov	r7, r5
 8009446:	42bb      	cmp	r3, r7
 8009448:	460d      	mov	r5, r1
 800944a:	d9f4      	bls.n	8009436 <_printf_i+0x112>
 800944c:	2b08      	cmp	r3, #8
 800944e:	d10b      	bne.n	8009468 <_printf_i+0x144>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	07df      	lsls	r7, r3, #31
 8009454:	d508      	bpl.n	8009468 <_printf_i+0x144>
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	6861      	ldr	r1, [r4, #4]
 800945a:	4299      	cmp	r1, r3
 800945c:	bfde      	ittt	le
 800945e:	2330      	movle	r3, #48	@ 0x30
 8009460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009468:	1b92      	subs	r2, r2, r6
 800946a:	6122      	str	r2, [r4, #16]
 800946c:	f8cd a000 	str.w	sl, [sp]
 8009470:	464b      	mov	r3, r9
 8009472:	aa03      	add	r2, sp, #12
 8009474:	4621      	mov	r1, r4
 8009476:	4640      	mov	r0, r8
 8009478:	f7ff fee6 	bl	8009248 <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	d14a      	bne.n	8009516 <_printf_i+0x1f2>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	b004      	add	sp, #16
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f043 0320 	orr.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	4833      	ldr	r0, [pc, #204]	@ (8009560 <_printf_i+0x23c>)
 8009494:	2778      	movs	r7, #120	@ 0x78
 8009496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6831      	ldr	r1, [r6, #0]
 800949e:	061f      	lsls	r7, r3, #24
 80094a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094a4:	d402      	bmi.n	80094ac <_printf_i+0x188>
 80094a6:	065f      	lsls	r7, r3, #25
 80094a8:	bf48      	it	mi
 80094aa:	b2ad      	uxthmi	r5, r5
 80094ac:	6031      	str	r1, [r6, #0]
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	bf44      	itt	mi
 80094b2:	f043 0320 	orrmi.w	r3, r3, #32
 80094b6:	6023      	strmi	r3, [r4, #0]
 80094b8:	b11d      	cbz	r5, 80094c2 <_printf_i+0x19e>
 80094ba:	2310      	movs	r3, #16
 80094bc:	e7ac      	b.n	8009418 <_printf_i+0xf4>
 80094be:	4827      	ldr	r0, [pc, #156]	@ (800955c <_printf_i+0x238>)
 80094c0:	e7e9      	b.n	8009496 <_printf_i+0x172>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f023 0320 	bic.w	r3, r3, #32
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	e7f6      	b.n	80094ba <_printf_i+0x196>
 80094cc:	4616      	mov	r6, r2
 80094ce:	e7bd      	b.n	800944c <_printf_i+0x128>
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	6961      	ldr	r1, [r4, #20]
 80094d6:	1d18      	adds	r0, r3, #4
 80094d8:	6030      	str	r0, [r6, #0]
 80094da:	062e      	lsls	r6, r5, #24
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0x1c0>
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0x1c6>
 80094e4:	0668      	lsls	r0, r5, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0x1bc>
 80094e8:	8019      	strh	r1, [r3, #0]
 80094ea:	2300      	movs	r3, #0
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	4616      	mov	r6, r2
 80094f0:	e7bc      	b.n	800946c <_printf_i+0x148>
 80094f2:	6833      	ldr	r3, [r6, #0]
 80094f4:	1d1a      	adds	r2, r3, #4
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	681e      	ldr	r6, [r3, #0]
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	2100      	movs	r1, #0
 80094fe:	4630      	mov	r0, r6
 8009500:	f7f6 fe6e 	bl	80001e0 <memchr>
 8009504:	b108      	cbz	r0, 800950a <_printf_i+0x1e6>
 8009506:	1b80      	subs	r0, r0, r6
 8009508:	6060      	str	r0, [r4, #4]
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	2300      	movs	r3, #0
 8009510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009514:	e7aa      	b.n	800946c <_printf_i+0x148>
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	4632      	mov	r2, r6
 800951a:	4649      	mov	r1, r9
 800951c:	4640      	mov	r0, r8
 800951e:	47d0      	blx	sl
 8009520:	3001      	adds	r0, #1
 8009522:	d0ad      	beq.n	8009480 <_printf_i+0x15c>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	079b      	lsls	r3, r3, #30
 8009528:	d413      	bmi.n	8009552 <_printf_i+0x22e>
 800952a:	68e0      	ldr	r0, [r4, #12]
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	4298      	cmp	r0, r3
 8009530:	bfb8      	it	lt
 8009532:	4618      	movlt	r0, r3
 8009534:	e7a6      	b.n	8009484 <_printf_i+0x160>
 8009536:	2301      	movs	r3, #1
 8009538:	4632      	mov	r2, r6
 800953a:	4649      	mov	r1, r9
 800953c:	4640      	mov	r0, r8
 800953e:	47d0      	blx	sl
 8009540:	3001      	adds	r0, #1
 8009542:	d09d      	beq.n	8009480 <_printf_i+0x15c>
 8009544:	3501      	adds	r5, #1
 8009546:	68e3      	ldr	r3, [r4, #12]
 8009548:	9903      	ldr	r1, [sp, #12]
 800954a:	1a5b      	subs	r3, r3, r1
 800954c:	42ab      	cmp	r3, r5
 800954e:	dcf2      	bgt.n	8009536 <_printf_i+0x212>
 8009550:	e7eb      	b.n	800952a <_printf_i+0x206>
 8009552:	2500      	movs	r5, #0
 8009554:	f104 0619 	add.w	r6, r4, #25
 8009558:	e7f5      	b.n	8009546 <_printf_i+0x222>
 800955a:	bf00      	nop
 800955c:	0800bcda 	.word	0x0800bcda
 8009560:	0800bceb 	.word	0x0800bceb

08009564 <std>:
 8009564:	2300      	movs	r3, #0
 8009566:	b510      	push	{r4, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	e9c0 3300 	strd	r3, r3, [r0]
 800956e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009572:	6083      	str	r3, [r0, #8]
 8009574:	8181      	strh	r1, [r0, #12]
 8009576:	6643      	str	r3, [r0, #100]	@ 0x64
 8009578:	81c2      	strh	r2, [r0, #14]
 800957a:	6183      	str	r3, [r0, #24]
 800957c:	4619      	mov	r1, r3
 800957e:	2208      	movs	r2, #8
 8009580:	305c      	adds	r0, #92	@ 0x5c
 8009582:	f000 f9f9 	bl	8009978 <memset>
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <std+0x58>)
 8009588:	6263      	str	r3, [r4, #36]	@ 0x24
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <std+0x5c>)
 800958c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x60>)
 8009590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <std+0x64>)
 8009594:	6323      	str	r3, [r4, #48]	@ 0x30
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <std+0x68>)
 8009598:	6224      	str	r4, [r4, #32]
 800959a:	429c      	cmp	r4, r3
 800959c:	d006      	beq.n	80095ac <std+0x48>
 800959e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095a2:	4294      	cmp	r4, r2
 80095a4:	d002      	beq.n	80095ac <std+0x48>
 80095a6:	33d0      	adds	r3, #208	@ 0xd0
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d105      	bne.n	80095b8 <std+0x54>
 80095ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b4:	f000 ba5c 	b.w	8009a70 <__retarget_lock_init_recursive>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	080097c9 	.word	0x080097c9
 80095c0:	080097eb 	.word	0x080097eb
 80095c4:	08009823 	.word	0x08009823
 80095c8:	08009847 	.word	0x08009847
 80095cc:	20000618 	.word	0x20000618

080095d0 <stdio_exit_handler>:
 80095d0:	4a02      	ldr	r2, [pc, #8]	@ (80095dc <stdio_exit_handler+0xc>)
 80095d2:	4903      	ldr	r1, [pc, #12]	@ (80095e0 <stdio_exit_handler+0x10>)
 80095d4:	4803      	ldr	r0, [pc, #12]	@ (80095e4 <stdio_exit_handler+0x14>)
 80095d6:	f000 b869 	b.w	80096ac <_fwalk_sglue>
 80095da:	bf00      	nop
 80095dc:	20000024 	.word	0x20000024
 80095e0:	0800b3e1 	.word	0x0800b3e1
 80095e4:	20000034 	.word	0x20000034

080095e8 <cleanup_stdio>:
 80095e8:	6841      	ldr	r1, [r0, #4]
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <cleanup_stdio+0x34>)
 80095ec:	4299      	cmp	r1, r3
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	d001      	beq.n	80095f8 <cleanup_stdio+0x10>
 80095f4:	f001 fef4 	bl	800b3e0 <_fflush_r>
 80095f8:	68a1      	ldr	r1, [r4, #8]
 80095fa:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <cleanup_stdio+0x38>)
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d002      	beq.n	8009606 <cleanup_stdio+0x1e>
 8009600:	4620      	mov	r0, r4
 8009602:	f001 feed 	bl	800b3e0 <_fflush_r>
 8009606:	68e1      	ldr	r1, [r4, #12]
 8009608:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <cleanup_stdio+0x3c>)
 800960a:	4299      	cmp	r1, r3
 800960c:	d004      	beq.n	8009618 <cleanup_stdio+0x30>
 800960e:	4620      	mov	r0, r4
 8009610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009614:	f001 bee4 	b.w	800b3e0 <_fflush_r>
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	20000618 	.word	0x20000618
 8009620:	20000680 	.word	0x20000680
 8009624:	200006e8 	.word	0x200006e8

08009628 <global_stdio_init.part.0>:
 8009628:	b510      	push	{r4, lr}
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <global_stdio_init.part.0+0x30>)
 800962c:	4c0b      	ldr	r4, [pc, #44]	@ (800965c <global_stdio_init.part.0+0x34>)
 800962e:	4a0c      	ldr	r2, [pc, #48]	@ (8009660 <global_stdio_init.part.0+0x38>)
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	4620      	mov	r0, r4
 8009634:	2200      	movs	r2, #0
 8009636:	2104      	movs	r1, #4
 8009638:	f7ff ff94 	bl	8009564 <std>
 800963c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009640:	2201      	movs	r2, #1
 8009642:	2109      	movs	r1, #9
 8009644:	f7ff ff8e 	bl	8009564 <std>
 8009648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800964c:	2202      	movs	r2, #2
 800964e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009652:	2112      	movs	r1, #18
 8009654:	f7ff bf86 	b.w	8009564 <std>
 8009658:	20000750 	.word	0x20000750
 800965c:	20000618 	.word	0x20000618
 8009660:	080095d1 	.word	0x080095d1

08009664 <__sfp_lock_acquire>:
 8009664:	4801      	ldr	r0, [pc, #4]	@ (800966c <__sfp_lock_acquire+0x8>)
 8009666:	f000 ba04 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	20000759 	.word	0x20000759

08009670 <__sfp_lock_release>:
 8009670:	4801      	ldr	r0, [pc, #4]	@ (8009678 <__sfp_lock_release+0x8>)
 8009672:	f000 b9ff 	b.w	8009a74 <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	20000759 	.word	0x20000759

0800967c <__sinit>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4604      	mov	r4, r0
 8009680:	f7ff fff0 	bl	8009664 <__sfp_lock_acquire>
 8009684:	6a23      	ldr	r3, [r4, #32]
 8009686:	b11b      	cbz	r3, 8009690 <__sinit+0x14>
 8009688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800968c:	f7ff bff0 	b.w	8009670 <__sfp_lock_release>
 8009690:	4b04      	ldr	r3, [pc, #16]	@ (80096a4 <__sinit+0x28>)
 8009692:	6223      	str	r3, [r4, #32]
 8009694:	4b04      	ldr	r3, [pc, #16]	@ (80096a8 <__sinit+0x2c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f5      	bne.n	8009688 <__sinit+0xc>
 800969c:	f7ff ffc4 	bl	8009628 <global_stdio_init.part.0>
 80096a0:	e7f2      	b.n	8009688 <__sinit+0xc>
 80096a2:	bf00      	nop
 80096a4:	080095e9 	.word	0x080095e9
 80096a8:	20000750 	.word	0x20000750

080096ac <_fwalk_sglue>:
 80096ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b0:	4607      	mov	r7, r0
 80096b2:	4688      	mov	r8, r1
 80096b4:	4614      	mov	r4, r2
 80096b6:	2600      	movs	r6, #0
 80096b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096bc:	f1b9 0901 	subs.w	r9, r9, #1
 80096c0:	d505      	bpl.n	80096ce <_fwalk_sglue+0x22>
 80096c2:	6824      	ldr	r4, [r4, #0]
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	d1f7      	bne.n	80096b8 <_fwalk_sglue+0xc>
 80096c8:	4630      	mov	r0, r6
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d907      	bls.n	80096e4 <_fwalk_sglue+0x38>
 80096d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096d8:	3301      	adds	r3, #1
 80096da:	d003      	beq.n	80096e4 <_fwalk_sglue+0x38>
 80096dc:	4629      	mov	r1, r5
 80096de:	4638      	mov	r0, r7
 80096e0:	47c0      	blx	r8
 80096e2:	4306      	orrs	r6, r0
 80096e4:	3568      	adds	r5, #104	@ 0x68
 80096e6:	e7e9      	b.n	80096bc <_fwalk_sglue+0x10>

080096e8 <iprintf>:
 80096e8:	b40f      	push	{r0, r1, r2, r3}
 80096ea:	b507      	push	{r0, r1, r2, lr}
 80096ec:	4906      	ldr	r1, [pc, #24]	@ (8009708 <iprintf+0x20>)
 80096ee:	ab04      	add	r3, sp, #16
 80096f0:	6808      	ldr	r0, [r1, #0]
 80096f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f6:	6881      	ldr	r1, [r0, #8]
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	f001 fcd5 	bl	800b0a8 <_vfiprintf_r>
 80096fe:	b003      	add	sp, #12
 8009700:	f85d eb04 	ldr.w	lr, [sp], #4
 8009704:	b004      	add	sp, #16
 8009706:	4770      	bx	lr
 8009708:	20000030 	.word	0x20000030

0800970c <_puts_r>:
 800970c:	6a03      	ldr	r3, [r0, #32]
 800970e:	b570      	push	{r4, r5, r6, lr}
 8009710:	6884      	ldr	r4, [r0, #8]
 8009712:	4605      	mov	r5, r0
 8009714:	460e      	mov	r6, r1
 8009716:	b90b      	cbnz	r3, 800971c <_puts_r+0x10>
 8009718:	f7ff ffb0 	bl	800967c <__sinit>
 800971c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800971e:	07db      	lsls	r3, r3, #31
 8009720:	d405      	bmi.n	800972e <_puts_r+0x22>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	0598      	lsls	r0, r3, #22
 8009726:	d402      	bmi.n	800972e <_puts_r+0x22>
 8009728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800972a:	f000 f9a2 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	0719      	lsls	r1, r3, #28
 8009732:	d502      	bpl.n	800973a <_puts_r+0x2e>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d135      	bne.n	80097a6 <_puts_r+0x9a>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f8c5 	bl	80098cc <__swsetup_r>
 8009742:	b380      	cbz	r0, 80097a6 <_puts_r+0x9a>
 8009744:	f04f 35ff 	mov.w	r5, #4294967295
 8009748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800974a:	07da      	lsls	r2, r3, #31
 800974c:	d405      	bmi.n	800975a <_puts_r+0x4e>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	059b      	lsls	r3, r3, #22
 8009752:	d402      	bmi.n	800975a <_puts_r+0x4e>
 8009754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009756:	f000 f98d 	bl	8009a74 <__retarget_lock_release_recursive>
 800975a:	4628      	mov	r0, r5
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	2b00      	cmp	r3, #0
 8009760:	da04      	bge.n	800976c <_puts_r+0x60>
 8009762:	69a2      	ldr	r2, [r4, #24]
 8009764:	429a      	cmp	r2, r3
 8009766:	dc17      	bgt.n	8009798 <_puts_r+0x8c>
 8009768:	290a      	cmp	r1, #10
 800976a:	d015      	beq.n	8009798 <_puts_r+0x8c>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	68a3      	ldr	r3, [r4, #8]
 8009776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800977a:	3b01      	subs	r3, #1
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	2900      	cmp	r1, #0
 8009780:	d1ed      	bne.n	800975e <_puts_r+0x52>
 8009782:	2b00      	cmp	r3, #0
 8009784:	da11      	bge.n	80097aa <_puts_r+0x9e>
 8009786:	4622      	mov	r2, r4
 8009788:	210a      	movs	r1, #10
 800978a:	4628      	mov	r0, r5
 800978c:	f000 f85f 	bl	800984e <__swbuf_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d0d7      	beq.n	8009744 <_puts_r+0x38>
 8009794:	250a      	movs	r5, #10
 8009796:	e7d7      	b.n	8009748 <_puts_r+0x3c>
 8009798:	4622      	mov	r2, r4
 800979a:	4628      	mov	r0, r5
 800979c:	f000 f857 	bl	800984e <__swbuf_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d1e7      	bne.n	8009774 <_puts_r+0x68>
 80097a4:	e7ce      	b.n	8009744 <_puts_r+0x38>
 80097a6:	3e01      	subs	r6, #1
 80097a8:	e7e4      	b.n	8009774 <_puts_r+0x68>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	220a      	movs	r2, #10
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e7ee      	b.n	8009794 <_puts_r+0x88>
	...

080097b8 <puts>:
 80097b8:	4b02      	ldr	r3, [pc, #8]	@ (80097c4 <puts+0xc>)
 80097ba:	4601      	mov	r1, r0
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	f7ff bfa5 	b.w	800970c <_puts_r>
 80097c2:	bf00      	nop
 80097c4:	20000030 	.word	0x20000030

080097c8 <__sread>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	f000 f900 	bl	80099d4 <_read_r>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	bfab      	itete	ge
 80097d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097da:	89a3      	ldrhlt	r3, [r4, #12]
 80097dc:	181b      	addge	r3, r3, r0
 80097de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097e2:	bfac      	ite	ge
 80097e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097e6:	81a3      	strhlt	r3, [r4, #12]
 80097e8:	bd10      	pop	{r4, pc}

080097ea <__swrite>:
 80097ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	461f      	mov	r7, r3
 80097f0:	898b      	ldrh	r3, [r1, #12]
 80097f2:	05db      	lsls	r3, r3, #23
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4616      	mov	r6, r2
 80097fa:	d505      	bpl.n	8009808 <__swrite+0x1e>
 80097fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009800:	2302      	movs	r3, #2
 8009802:	2200      	movs	r2, #0
 8009804:	f000 f8d4 	bl	80099b0 <_lseek_r>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	4632      	mov	r2, r6
 8009816:	463b      	mov	r3, r7
 8009818:	4628      	mov	r0, r5
 800981a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800981e:	f000 b8eb 	b.w	80099f8 <_write_r>

08009822 <__sseek>:
 8009822:	b510      	push	{r4, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982a:	f000 f8c1 	bl	80099b0 <_lseek_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	bf15      	itete	ne
 8009834:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009836:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800983a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800983e:	81a3      	strheq	r3, [r4, #12]
 8009840:	bf18      	it	ne
 8009842:	81a3      	strhne	r3, [r4, #12]
 8009844:	bd10      	pop	{r4, pc}

08009846 <__sclose>:
 8009846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984a:	f000 b8a1 	b.w	8009990 <_close_r>

0800984e <__swbuf_r>:
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	460e      	mov	r6, r1
 8009852:	4614      	mov	r4, r2
 8009854:	4605      	mov	r5, r0
 8009856:	b118      	cbz	r0, 8009860 <__swbuf_r+0x12>
 8009858:	6a03      	ldr	r3, [r0, #32]
 800985a:	b90b      	cbnz	r3, 8009860 <__swbuf_r+0x12>
 800985c:	f7ff ff0e 	bl	800967c <__sinit>
 8009860:	69a3      	ldr	r3, [r4, #24]
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	071a      	lsls	r2, r3, #28
 8009868:	d501      	bpl.n	800986e <__swbuf_r+0x20>
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	b943      	cbnz	r3, 8009880 <__swbuf_r+0x32>
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f82b 	bl	80098cc <__swsetup_r>
 8009876:	b118      	cbz	r0, 8009880 <__swbuf_r+0x32>
 8009878:	f04f 37ff 	mov.w	r7, #4294967295
 800987c:	4638      	mov	r0, r7
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	1a98      	subs	r0, r3, r2
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc05      	bgt.n	800989c <__swbuf_r+0x4e>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f001 fda4 	bl	800b3e0 <_fflush_r>
 8009898:	2800      	cmp	r0, #0
 800989a:	d1ed      	bne.n	8009878 <__swbuf_r+0x2a>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	701e      	strb	r6, [r3, #0]
 80098aa:	6962      	ldr	r2, [r4, #20]
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d004      	beq.n	80098bc <__swbuf_r+0x6e>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	07db      	lsls	r3, r3, #31
 80098b6:	d5e1      	bpl.n	800987c <__swbuf_r+0x2e>
 80098b8:	2e0a      	cmp	r6, #10
 80098ba:	d1df      	bne.n	800987c <__swbuf_r+0x2e>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f001 fd8e 	bl	800b3e0 <_fflush_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d0d9      	beq.n	800987c <__swbuf_r+0x2e>
 80098c8:	e7d6      	b.n	8009878 <__swbuf_r+0x2a>
	...

080098cc <__swsetup_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <__swsetup_r+0xa8>)
 80098d0:	4605      	mov	r5, r0
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	460c      	mov	r4, r1
 80098d6:	b118      	cbz	r0, 80098e0 <__swsetup_r+0x14>
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b90b      	cbnz	r3, 80098e0 <__swsetup_r+0x14>
 80098dc:	f7ff fece 	bl	800967c <__sinit>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	0719      	lsls	r1, r3, #28
 80098e6:	d422      	bmi.n	800992e <__swsetup_r+0x62>
 80098e8:	06da      	lsls	r2, r3, #27
 80098ea:	d407      	bmi.n	80098fc <__swsetup_r+0x30>
 80098ec:	2209      	movs	r2, #9
 80098ee:	602a      	str	r2, [r5, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e033      	b.n	8009964 <__swsetup_r+0x98>
 80098fc:	0758      	lsls	r0, r3, #29
 80098fe:	d512      	bpl.n	8009926 <__swsetup_r+0x5a>
 8009900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009902:	b141      	cbz	r1, 8009916 <__swsetup_r+0x4a>
 8009904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009908:	4299      	cmp	r1, r3
 800990a:	d002      	beq.n	8009912 <__swsetup_r+0x46>
 800990c:	4628      	mov	r0, r5
 800990e:	f000 ff1f 	bl	800a750 <_free_r>
 8009912:	2300      	movs	r3, #0
 8009914:	6363      	str	r3, [r4, #52]	@ 0x34
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	2300      	movs	r3, #0
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0308 	orr.w	r3, r3, #8
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	b94b      	cbnz	r3, 8009946 <__swsetup_r+0x7a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800993c:	d003      	beq.n	8009946 <__swsetup_r+0x7a>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f001 fdad 	bl	800b4a0 <__smakebuf_r>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	f013 0201 	ands.w	r2, r3, #1
 800994e:	d00a      	beq.n	8009966 <__swsetup_r+0x9a>
 8009950:	2200      	movs	r2, #0
 8009952:	60a2      	str	r2, [r4, #8]
 8009954:	6962      	ldr	r2, [r4, #20]
 8009956:	4252      	negs	r2, r2
 8009958:	61a2      	str	r2, [r4, #24]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	b942      	cbnz	r2, 8009970 <__swsetup_r+0xa4>
 800995e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009962:	d1c5      	bne.n	80098f0 <__swsetup_r+0x24>
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	0799      	lsls	r1, r3, #30
 8009968:	bf58      	it	pl
 800996a:	6962      	ldrpl	r2, [r4, #20]
 800996c:	60a2      	str	r2, [r4, #8]
 800996e:	e7f4      	b.n	800995a <__swsetup_r+0x8e>
 8009970:	2000      	movs	r0, #0
 8009972:	e7f7      	b.n	8009964 <__swsetup_r+0x98>
 8009974:	20000030 	.word	0x20000030

08009978 <memset>:
 8009978:	4402      	add	r2, r0
 800997a:	4603      	mov	r3, r0
 800997c:	4293      	cmp	r3, r2
 800997e:	d100      	bne.n	8009982 <memset+0xa>
 8009980:	4770      	bx	lr
 8009982:	f803 1b01 	strb.w	r1, [r3], #1
 8009986:	e7f9      	b.n	800997c <memset+0x4>

08009988 <_localeconv_r>:
 8009988:	4800      	ldr	r0, [pc, #0]	@ (800998c <_localeconv_r+0x4>)
 800998a:	4770      	bx	lr
 800998c:	20000170 	.word	0x20000170

08009990 <_close_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d06      	ldr	r5, [pc, #24]	@ (80099ac <_close_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	f7f8 fde0 	bl	8002560 <_close>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_close_r+0x1a>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_close_r+0x1a>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20000754 	.word	0x20000754

080099b0 <_lseek_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	@ (80099d0 <_lseek_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f8 fdf5 	bl	80025ae <_lseek>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_lseek_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_lseek_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20000754 	.word	0x20000754

080099d4 <_read_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_read_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f8 fd83 	bl	80024ee <_read>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_read_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_read_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000754 	.word	0x20000754

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	@ (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 fd8e 	bl	8002528 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000754 	.word	0x20000754

08009a1c <__errno>:
 8009a1c:	4b01      	ldr	r3, [pc, #4]	@ (8009a24 <__errno+0x8>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	20000030 	.word	0x20000030

08009a28 <__libc_init_array>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009a60 <__libc_init_array+0x38>)
 8009a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a64 <__libc_init_array+0x3c>)
 8009a2e:	1b64      	subs	r4, r4, r5
 8009a30:	10a4      	asrs	r4, r4, #2
 8009a32:	2600      	movs	r6, #0
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	d109      	bne.n	8009a4c <__libc_init_array+0x24>
 8009a38:	4d0b      	ldr	r5, [pc, #44]	@ (8009a68 <__libc_init_array+0x40>)
 8009a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a6c <__libc_init_array+0x44>)
 8009a3c:	f001 fe2a 	bl	800b694 <_init>
 8009a40:	1b64      	subs	r4, r4, r5
 8009a42:	10a4      	asrs	r4, r4, #2
 8009a44:	2600      	movs	r6, #0
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	d105      	bne.n	8009a56 <__libc_init_array+0x2e>
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a50:	4798      	blx	r3
 8009a52:	3601      	adds	r6, #1
 8009a54:	e7ee      	b.n	8009a34 <__libc_init_array+0xc>
 8009a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5a:	4798      	blx	r3
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	e7f2      	b.n	8009a46 <__libc_init_array+0x1e>
 8009a60:	0800c044 	.word	0x0800c044
 8009a64:	0800c044 	.word	0x0800c044
 8009a68:	0800c044 	.word	0x0800c044
 8009a6c:	0800c048 	.word	0x0800c048

08009a70 <__retarget_lock_init_recursive>:
 8009a70:	4770      	bx	lr

08009a72 <__retarget_lock_acquire_recursive>:
 8009a72:	4770      	bx	lr

08009a74 <__retarget_lock_release_recursive>:
 8009a74:	4770      	bx	lr
	...

08009a78 <__assert_func>:
 8009a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7a:	4614      	mov	r4, r2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <__assert_func+0x2c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4605      	mov	r5, r0
 8009a84:	68d8      	ldr	r0, [r3, #12]
 8009a86:	b954      	cbnz	r4, 8009a9e <__assert_func+0x26>
 8009a88:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <__assert_func+0x30>)
 8009a8a:	461c      	mov	r4, r3
 8009a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	462b      	mov	r3, r5
 8009a94:	4905      	ldr	r1, [pc, #20]	@ (8009aac <__assert_func+0x34>)
 8009a96:	f001 fccb 	bl	800b430 <fiprintf>
 8009a9a:	f001 fd7d 	bl	800b598 <abort>
 8009a9e:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <__assert_func+0x38>)
 8009aa0:	e7f4      	b.n	8009a8c <__assert_func+0x14>
 8009aa2:	bf00      	nop
 8009aa4:	20000030 	.word	0x20000030
 8009aa8:	0800bd37 	.word	0x0800bd37
 8009aac:	0800bd09 	.word	0x0800bd09
 8009ab0:	0800bcfc 	.word	0x0800bcfc

08009ab4 <quorem>:
 8009ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	6903      	ldr	r3, [r0, #16]
 8009aba:	690c      	ldr	r4, [r1, #16]
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	4607      	mov	r7, r0
 8009ac0:	db7e      	blt.n	8009bc0 <quorem+0x10c>
 8009ac2:	3c01      	subs	r4, #1
 8009ac4:	f101 0814 	add.w	r8, r1, #20
 8009ac8:	00a3      	lsls	r3, r4, #2
 8009aca:	f100 0514 	add.w	r5, r0, #20
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ae6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009aea:	d32e      	bcc.n	8009b4a <quorem+0x96>
 8009aec:	f04f 0a00 	mov.w	sl, #0
 8009af0:	46c4      	mov	ip, r8
 8009af2:	46ae      	mov	lr, r5
 8009af4:	46d3      	mov	fp, sl
 8009af6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009afa:	b298      	uxth	r0, r3
 8009afc:	fb06 a000 	mla	r0, r6, r0, sl
 8009b00:	0c02      	lsrs	r2, r0, #16
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	fb06 2303 	mla	r3, r6, r3, r2
 8009b08:	f8de 2000 	ldr.w	r2, [lr]
 8009b0c:	b280      	uxth	r0, r0
 8009b0e:	b292      	uxth	r2, r2
 8009b10:	1a12      	subs	r2, r2, r0
 8009b12:	445a      	add	r2, fp
 8009b14:	f8de 0000 	ldr.w	r0, [lr]
 8009b18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b26:	b292      	uxth	r2, r2
 8009b28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b2c:	45e1      	cmp	r9, ip
 8009b2e:	f84e 2b04 	str.w	r2, [lr], #4
 8009b32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b36:	d2de      	bcs.n	8009af6 <quorem+0x42>
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	58eb      	ldr	r3, [r5, r3]
 8009b3c:	b92b      	cbnz	r3, 8009b4a <quorem+0x96>
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	3b04      	subs	r3, #4
 8009b42:	429d      	cmp	r5, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	d32f      	bcc.n	8009ba8 <quorem+0xf4>
 8009b48:	613c      	str	r4, [r7, #16]
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	f001 f97a 	bl	800ae44 <__mcmp>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	db25      	blt.n	8009ba0 <quorem+0xec>
 8009b54:	4629      	mov	r1, r5
 8009b56:	2000      	movs	r0, #0
 8009b58:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b5c:	f8d1 c000 	ldr.w	ip, [r1]
 8009b60:	fa1f fe82 	uxth.w	lr, r2
 8009b64:	fa1f f38c 	uxth.w	r3, ip
 8009b68:	eba3 030e 	sub.w	r3, r3, lr
 8009b6c:	4403      	add	r3, r0
 8009b6e:	0c12      	lsrs	r2, r2, #16
 8009b70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b7e:	45c1      	cmp	r9, r8
 8009b80:	f841 3b04 	str.w	r3, [r1], #4
 8009b84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b88:	d2e6      	bcs.n	8009b58 <quorem+0xa4>
 8009b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b92:	b922      	cbnz	r2, 8009b9e <quorem+0xea>
 8009b94:	3b04      	subs	r3, #4
 8009b96:	429d      	cmp	r5, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	d30b      	bcc.n	8009bb4 <quorem+0x100>
 8009b9c:	613c      	str	r4, [r7, #16]
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	b003      	add	sp, #12
 8009ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba8:	6812      	ldr	r2, [r2, #0]
 8009baa:	3b04      	subs	r3, #4
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d1cb      	bne.n	8009b48 <quorem+0x94>
 8009bb0:	3c01      	subs	r4, #1
 8009bb2:	e7c6      	b.n	8009b42 <quorem+0x8e>
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	3b04      	subs	r3, #4
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	d1ef      	bne.n	8009b9c <quorem+0xe8>
 8009bbc:	3c01      	subs	r4, #1
 8009bbe:	e7ea      	b.n	8009b96 <quorem+0xe2>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e7ee      	b.n	8009ba2 <quorem+0xee>
 8009bc4:	0000      	movs	r0, r0
	...

08009bc8 <_dtoa_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	69c7      	ldr	r7, [r0, #28]
 8009bce:	b099      	sub	sp, #100	@ 0x64
 8009bd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009bd4:	ec55 4b10 	vmov	r4, r5, d0
 8009bd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009bda:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bdc:	4683      	mov	fp, r0
 8009bde:	920e      	str	r2, [sp, #56]	@ 0x38
 8009be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009be2:	b97f      	cbnz	r7, 8009c04 <_dtoa_r+0x3c>
 8009be4:	2010      	movs	r0, #16
 8009be6:	f000 fdfd 	bl	800a7e4 <malloc>
 8009bea:	4602      	mov	r2, r0
 8009bec:	f8cb 001c 	str.w	r0, [fp, #28]
 8009bf0:	b920      	cbnz	r0, 8009bfc <_dtoa_r+0x34>
 8009bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8009e90 <_dtoa_r+0x2c8>)
 8009bf4:	21ef      	movs	r1, #239	@ 0xef
 8009bf6:	48a7      	ldr	r0, [pc, #668]	@ (8009e94 <_dtoa_r+0x2cc>)
 8009bf8:	f7ff ff3e 	bl	8009a78 <__assert_func>
 8009bfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c00:	6007      	str	r7, [r0, #0]
 8009c02:	60c7      	str	r7, [r0, #12]
 8009c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c08:	6819      	ldr	r1, [r3, #0]
 8009c0a:	b159      	cbz	r1, 8009c24 <_dtoa_r+0x5c>
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	604a      	str	r2, [r1, #4]
 8009c10:	2301      	movs	r3, #1
 8009c12:	4093      	lsls	r3, r2
 8009c14:	608b      	str	r3, [r1, #8]
 8009c16:	4658      	mov	r0, fp
 8009c18:	f000 feda 	bl	800a9d0 <_Bfree>
 8009c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	1e2b      	subs	r3, r5, #0
 8009c26:	bfb9      	ittee	lt
 8009c28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c2c:	9303      	strlt	r3, [sp, #12]
 8009c2e:	2300      	movge	r3, #0
 8009c30:	6033      	strge	r3, [r6, #0]
 8009c32:	9f03      	ldr	r7, [sp, #12]
 8009c34:	4b98      	ldr	r3, [pc, #608]	@ (8009e98 <_dtoa_r+0x2d0>)
 8009c36:	bfbc      	itt	lt
 8009c38:	2201      	movlt	r2, #1
 8009c3a:	6032      	strlt	r2, [r6, #0]
 8009c3c:	43bb      	bics	r3, r7
 8009c3e:	d112      	bne.n	8009c66 <_dtoa_r+0x9e>
 8009c40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c4c:	4323      	orrs	r3, r4
 8009c4e:	f000 854d 	beq.w	800a6ec <_dtoa_r+0xb24>
 8009c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009eac <_dtoa_r+0x2e4>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 854f 	beq.w	800a6fc <_dtoa_r+0xb34>
 8009c5e:	f10a 0303 	add.w	r3, sl, #3
 8009c62:	f000 bd49 	b.w	800a6f8 <_dtoa_r+0xb30>
 8009c66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	ec51 0b17 	vmov	r0, r1, d7
 8009c70:	2300      	movs	r3, #0
 8009c72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c76:	f7f6 ff2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c7a:	4680      	mov	r8, r0
 8009c7c:	b158      	cbz	r0, 8009c96 <_dtoa_r+0xce>
 8009c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c80:	2301      	movs	r3, #1
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c86:	b113      	cbz	r3, 8009c8e <_dtoa_r+0xc6>
 8009c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c8a:	4b84      	ldr	r3, [pc, #528]	@ (8009e9c <_dtoa_r+0x2d4>)
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009eb0 <_dtoa_r+0x2e8>
 8009c92:	f000 bd33 	b.w	800a6fc <_dtoa_r+0xb34>
 8009c96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c9a:	aa16      	add	r2, sp, #88	@ 0x58
 8009c9c:	a917      	add	r1, sp, #92	@ 0x5c
 8009c9e:	4658      	mov	r0, fp
 8009ca0:	f001 f980 	bl	800afa4 <__d2b>
 8009ca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ca8:	4681      	mov	r9, r0
 8009caa:	2e00      	cmp	r6, #0
 8009cac:	d077      	beq.n	8009d9e <_dtoa_r+0x1d6>
 8009cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009cc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009cc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4b74      	ldr	r3, [pc, #464]	@ (8009ea0 <_dtoa_r+0x2d8>)
 8009cce:	f7f6 fae3 	bl	8000298 <__aeabi_dsub>
 8009cd2:	a369      	add	r3, pc, #420	@ (adr r3, 8009e78 <_dtoa_r+0x2b0>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	a368      	add	r3, pc, #416	@ (adr r3, 8009e80 <_dtoa_r+0x2b8>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fadb 	bl	800029c <__adddf3>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4630      	mov	r0, r6
 8009cea:	460d      	mov	r5, r1
 8009cec:	f7f6 fc22 	bl	8000534 <__aeabi_i2d>
 8009cf0:	a365      	add	r3, pc, #404	@ (adr r3, 8009e88 <_dtoa_r+0x2c0>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fc87 	bl	8000608 <__aeabi_dmul>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7f6 facb 	bl	800029c <__adddf3>
 8009d06:	4604      	mov	r4, r0
 8009d08:	460d      	mov	r5, r1
 8009d0a:	f7f6 ff2d 	bl	8000b68 <__aeabi_d2iz>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	2300      	movs	r3, #0
 8009d14:	4620      	mov	r0, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7f6 fee8 	bl	8000aec <__aeabi_dcmplt>
 8009d1c:	b140      	cbz	r0, 8009d30 <_dtoa_r+0x168>
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f7f6 fc08 	bl	8000534 <__aeabi_i2d>
 8009d24:	4622      	mov	r2, r4
 8009d26:	462b      	mov	r3, r5
 8009d28:	f7f6 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d2c:	b900      	cbnz	r0, 8009d30 <_dtoa_r+0x168>
 8009d2e:	3f01      	subs	r7, #1
 8009d30:	2f16      	cmp	r7, #22
 8009d32:	d851      	bhi.n	8009dd8 <_dtoa_r+0x210>
 8009d34:	4b5b      	ldr	r3, [pc, #364]	@ (8009ea4 <_dtoa_r+0x2dc>)
 8009d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d42:	f7f6 fed3 	bl	8000aec <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d048      	beq.n	8009ddc <_dtoa_r+0x214>
 8009d4a:	3f01      	subs	r7, #1
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d52:	1b9b      	subs	r3, r3, r6
 8009d54:	1e5a      	subs	r2, r3, #1
 8009d56:	bf44      	itt	mi
 8009d58:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d5c:	2300      	movmi	r3, #0
 8009d5e:	9208      	str	r2, [sp, #32]
 8009d60:	bf54      	ite	pl
 8009d62:	f04f 0800 	movpl.w	r8, #0
 8009d66:	9308      	strmi	r3, [sp, #32]
 8009d68:	2f00      	cmp	r7, #0
 8009d6a:	db39      	blt.n	8009de0 <_dtoa_r+0x218>
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d70:	443b      	add	r3, r7
 8009d72:	9308      	str	r3, [sp, #32]
 8009d74:	2300      	movs	r3, #0
 8009d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	d864      	bhi.n	8009e48 <_dtoa_r+0x280>
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	bfc4      	itt	gt
 8009d82:	3b04      	subgt	r3, #4
 8009d84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d88:	f1a3 0302 	sub.w	r3, r3, #2
 8009d8c:	bfcc      	ite	gt
 8009d8e:	2400      	movgt	r4, #0
 8009d90:	2401      	movle	r4, #1
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d863      	bhi.n	8009e5e <_dtoa_r+0x296>
 8009d96:	e8df f003 	tbb	[pc, r3]
 8009d9a:	372a      	.short	0x372a
 8009d9c:	5535      	.short	0x5535
 8009d9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009da2:	441e      	add	r6, r3
 8009da4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	bfc1      	itttt	gt
 8009dac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009db0:	409f      	lslgt	r7, r3
 8009db2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009db6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009dba:	bfd6      	itet	le
 8009dbc:	f1c3 0320 	rsble	r3, r3, #32
 8009dc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009dc4:	fa04 f003 	lslle.w	r0, r4, r3
 8009dc8:	f7f6 fba4 	bl	8000514 <__aeabi_ui2d>
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009dd2:	3e01      	subs	r6, #1
 8009dd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009dd6:	e777      	b.n	8009cc8 <_dtoa_r+0x100>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e7b8      	b.n	8009d4e <_dtoa_r+0x186>
 8009ddc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009dde:	e7b7      	b.n	8009d50 <_dtoa_r+0x188>
 8009de0:	427b      	negs	r3, r7
 8009de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009de4:	2300      	movs	r3, #0
 8009de6:	eba8 0807 	sub.w	r8, r8, r7
 8009dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dec:	e7c4      	b.n	8009d78 <_dtoa_r+0x1b0>
 8009dee:	2300      	movs	r3, #0
 8009df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dc35      	bgt.n	8009e64 <_dtoa_r+0x29c>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	9307      	str	r3, [sp, #28]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e02:	e00b      	b.n	8009e1c <_dtoa_r+0x254>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e7f3      	b.n	8009df0 <_dtoa_r+0x228>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0e:	18fb      	adds	r3, r7, r3
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	bfb8      	it	lt
 8009e1a:	2301      	movlt	r3, #1
 8009e1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009e20:	2100      	movs	r1, #0
 8009e22:	2204      	movs	r2, #4
 8009e24:	f102 0514 	add.w	r5, r2, #20
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	d91f      	bls.n	8009e6c <_dtoa_r+0x2a4>
 8009e2c:	6041      	str	r1, [r0, #4]
 8009e2e:	4658      	mov	r0, fp
 8009e30:	f000 fd8e 	bl	800a950 <_Balloc>
 8009e34:	4682      	mov	sl, r0
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d13c      	bne.n	8009eb4 <_dtoa_r+0x2ec>
 8009e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ea8 <_dtoa_r+0x2e0>)
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e42:	e6d8      	b.n	8009bf6 <_dtoa_r+0x2e>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e7e0      	b.n	8009e0a <_dtoa_r+0x242>
 8009e48:	2401      	movs	r4, #1
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e50:	f04f 33ff 	mov.w	r3, #4294967295
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2312      	movs	r3, #18
 8009e5c:	e7d0      	b.n	8009e00 <_dtoa_r+0x238>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e62:	e7f5      	b.n	8009e50 <_dtoa_r+0x288>
 8009e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	9307      	str	r3, [sp, #28]
 8009e6a:	e7d7      	b.n	8009e1c <_dtoa_r+0x254>
 8009e6c:	3101      	adds	r1, #1
 8009e6e:	0052      	lsls	r2, r2, #1
 8009e70:	e7d8      	b.n	8009e24 <_dtoa_r+0x25c>
 8009e72:	bf00      	nop
 8009e74:	f3af 8000 	nop.w
 8009e78:	636f4361 	.word	0x636f4361
 8009e7c:	3fd287a7 	.word	0x3fd287a7
 8009e80:	8b60c8b3 	.word	0x8b60c8b3
 8009e84:	3fc68a28 	.word	0x3fc68a28
 8009e88:	509f79fb 	.word	0x509f79fb
 8009e8c:	3fd34413 	.word	0x3fd34413
 8009e90:	0800bd45 	.word	0x0800bd45
 8009e94:	0800bd5c 	.word	0x0800bd5c
 8009e98:	7ff00000 	.word	0x7ff00000
 8009e9c:	0800bcd9 	.word	0x0800bcd9
 8009ea0:	3ff80000 	.word	0x3ff80000
 8009ea4:	0800be58 	.word	0x0800be58
 8009ea8:	0800bdb4 	.word	0x0800bdb4
 8009eac:	0800bd41 	.word	0x0800bd41
 8009eb0:	0800bcd8 	.word	0x0800bcd8
 8009eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009eb8:	6018      	str	r0, [r3, #0]
 8009eba:	9b07      	ldr	r3, [sp, #28]
 8009ebc:	2b0e      	cmp	r3, #14
 8009ebe:	f200 80a4 	bhi.w	800a00a <_dtoa_r+0x442>
 8009ec2:	2c00      	cmp	r4, #0
 8009ec4:	f000 80a1 	beq.w	800a00a <_dtoa_r+0x442>
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	dd33      	ble.n	8009f34 <_dtoa_r+0x36c>
 8009ecc:	4bad      	ldr	r3, [pc, #692]	@ (800a184 <_dtoa_r+0x5bc>)
 8009ece:	f007 020f 	and.w	r2, r7, #15
 8009ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ed6:	ed93 7b00 	vldr	d7, [r3]
 8009eda:	05f8      	lsls	r0, r7, #23
 8009edc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ee0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ee4:	d516      	bpl.n	8009f14 <_dtoa_r+0x34c>
 8009ee6:	4ba8      	ldr	r3, [pc, #672]	@ (800a188 <_dtoa_r+0x5c0>)
 8009ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ef0:	f7f6 fcb4 	bl	800085c <__aeabi_ddiv>
 8009ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef8:	f004 040f 	and.w	r4, r4, #15
 8009efc:	2603      	movs	r6, #3
 8009efe:	4da2      	ldr	r5, [pc, #648]	@ (800a188 <_dtoa_r+0x5c0>)
 8009f00:	b954      	cbnz	r4, 8009f18 <_dtoa_r+0x350>
 8009f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0a:	f7f6 fca7 	bl	800085c <__aeabi_ddiv>
 8009f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f12:	e028      	b.n	8009f66 <_dtoa_r+0x39e>
 8009f14:	2602      	movs	r6, #2
 8009f16:	e7f2      	b.n	8009efe <_dtoa_r+0x336>
 8009f18:	07e1      	lsls	r1, r4, #31
 8009f1a:	d508      	bpl.n	8009f2e <_dtoa_r+0x366>
 8009f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f24:	f7f6 fb70 	bl	8000608 <__aeabi_dmul>
 8009f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	1064      	asrs	r4, r4, #1
 8009f30:	3508      	adds	r5, #8
 8009f32:	e7e5      	b.n	8009f00 <_dtoa_r+0x338>
 8009f34:	f000 80d2 	beq.w	800a0dc <_dtoa_r+0x514>
 8009f38:	427c      	negs	r4, r7
 8009f3a:	4b92      	ldr	r3, [pc, #584]	@ (800a184 <_dtoa_r+0x5bc>)
 8009f3c:	4d92      	ldr	r5, [pc, #584]	@ (800a188 <_dtoa_r+0x5c0>)
 8009f3e:	f004 020f 	and.w	r2, r4, #15
 8009f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f4e:	f7f6 fb5b 	bl	8000608 <__aeabi_dmul>
 8009f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f56:	1124      	asrs	r4, r4, #4
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2602      	movs	r6, #2
 8009f5c:	2c00      	cmp	r4, #0
 8009f5e:	f040 80b2 	bne.w	800a0c6 <_dtoa_r+0x4fe>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1d3      	bne.n	8009f0e <_dtoa_r+0x346>
 8009f66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 80b7 	beq.w	800a0e0 <_dtoa_r+0x518>
 8009f72:	4b86      	ldr	r3, [pc, #536]	@ (800a18c <_dtoa_r+0x5c4>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 fdb7 	bl	8000aec <__aeabi_dcmplt>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f000 80ae 	beq.w	800a0e0 <_dtoa_r+0x518>
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 80aa 	beq.w	800a0e0 <_dtoa_r+0x518>
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dd37      	ble.n	800a002 <_dtoa_r+0x43a>
 8009f92:	1e7b      	subs	r3, r7, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	4620      	mov	r0, r4
 8009f98:	4b7d      	ldr	r3, [pc, #500]	@ (800a190 <_dtoa_r+0x5c8>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa6:	9c00      	ldr	r4, [sp, #0]
 8009fa8:	3601      	adds	r6, #1
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7f6 fac2 	bl	8000534 <__aeabi_i2d>
 8009fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fb4:	f7f6 fb28 	bl	8000608 <__aeabi_dmul>
 8009fb8:	4b76      	ldr	r3, [pc, #472]	@ (800a194 <_dtoa_r+0x5cc>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f7f6 f96e 	bl	800029c <__adddf3>
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	f040 808d 	bne.w	800a0e6 <_dtoa_r+0x51e>
 8009fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd0:	4b71      	ldr	r3, [pc, #452]	@ (800a198 <_dtoa_r+0x5d0>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f7f6 f960 	bl	8000298 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fe0:	462a      	mov	r2, r5
 8009fe2:	4633      	mov	r3, r6
 8009fe4:	f7f6 fda0 	bl	8000b28 <__aeabi_dcmpgt>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	f040 828b 	bne.w	800a504 <_dtoa_r+0x93c>
 8009fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff2:	462a      	mov	r2, r5
 8009ff4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ff8:	f7f6 fd78 	bl	8000aec <__aeabi_dcmplt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	f040 8128 	bne.w	800a252 <_dtoa_r+0x68a>
 800a002:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a00a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f2c0 815a 	blt.w	800a2c6 <_dtoa_r+0x6fe>
 800a012:	2f0e      	cmp	r7, #14
 800a014:	f300 8157 	bgt.w	800a2c6 <_dtoa_r+0x6fe>
 800a018:	4b5a      	ldr	r3, [pc, #360]	@ (800a184 <_dtoa_r+0x5bc>)
 800a01a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a01e:	ed93 7b00 	vldr	d7, [r3]
 800a022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	ed8d 7b00 	vstr	d7, [sp]
 800a02a:	da03      	bge.n	800a034 <_dtoa_r+0x46c>
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f340 8101 	ble.w	800a236 <_dtoa_r+0x66e>
 800a034:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a038:	4656      	mov	r6, sl
 800a03a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fc0b 	bl	800085c <__aeabi_ddiv>
 800a046:	f7f6 fd8f 	bl	8000b68 <__aeabi_d2iz>
 800a04a:	4680      	mov	r8, r0
 800a04c:	f7f6 fa72 	bl	8000534 <__aeabi_i2d>
 800a050:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a054:	f7f6 fad8 	bl	8000608 <__aeabi_dmul>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4620      	mov	r0, r4
 800a05e:	4629      	mov	r1, r5
 800a060:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a064:	f7f6 f918 	bl	8000298 <__aeabi_dsub>
 800a068:	f806 4b01 	strb.w	r4, [r6], #1
 800a06c:	9d07      	ldr	r5, [sp, #28]
 800a06e:	eba6 040a 	sub.w	r4, r6, sl
 800a072:	42a5      	cmp	r5, r4
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	f040 8117 	bne.w	800a2aa <_dtoa_r+0x6e2>
 800a07c:	f7f6 f90e 	bl	800029c <__adddf3>
 800a080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	f7f6 fd4e 	bl	8000b28 <__aeabi_dcmpgt>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f040 80f9 	bne.w	800a284 <_dtoa_r+0x6bc>
 800a092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a096:	4620      	mov	r0, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	f7f6 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a09e:	b118      	cbz	r0, 800a0a8 <_dtoa_r+0x4e0>
 800a0a0:	f018 0f01 	tst.w	r8, #1
 800a0a4:	f040 80ee 	bne.w	800a284 <_dtoa_r+0x6bc>
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4658      	mov	r0, fp
 800a0ac:	f000 fc90 	bl	800a9d0 <_Bfree>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	7033      	strb	r3, [r6, #0]
 800a0b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0b6:	3701      	adds	r7, #1
 800a0b8:	601f      	str	r7, [r3, #0]
 800a0ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 831d 	beq.w	800a6fc <_dtoa_r+0xb34>
 800a0c2:	601e      	str	r6, [r3, #0]
 800a0c4:	e31a      	b.n	800a6fc <_dtoa_r+0xb34>
 800a0c6:	07e2      	lsls	r2, r4, #31
 800a0c8:	d505      	bpl.n	800a0d6 <_dtoa_r+0x50e>
 800a0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0ce:	f7f6 fa9b 	bl	8000608 <__aeabi_dmul>
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	1064      	asrs	r4, r4, #1
 800a0d8:	3508      	adds	r5, #8
 800a0da:	e73f      	b.n	8009f5c <_dtoa_r+0x394>
 800a0dc:	2602      	movs	r6, #2
 800a0de:	e742      	b.n	8009f66 <_dtoa_r+0x39e>
 800a0e0:	9c07      	ldr	r4, [sp, #28]
 800a0e2:	9704      	str	r7, [sp, #16]
 800a0e4:	e761      	b.n	8009faa <_dtoa_r+0x3e2>
 800a0e6:	4b27      	ldr	r3, [pc, #156]	@ (800a184 <_dtoa_r+0x5bc>)
 800a0e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0f2:	4454      	add	r4, sl
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d053      	beq.n	800a1a0 <_dtoa_r+0x5d8>
 800a0f8:	4928      	ldr	r1, [pc, #160]	@ (800a19c <_dtoa_r+0x5d4>)
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f7f6 fbae 	bl	800085c <__aeabi_ddiv>
 800a100:	4633      	mov	r3, r6
 800a102:	462a      	mov	r2, r5
 800a104:	f7f6 f8c8 	bl	8000298 <__aeabi_dsub>
 800a108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a10c:	4656      	mov	r6, sl
 800a10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a112:	f7f6 fd29 	bl	8000b68 <__aeabi_d2iz>
 800a116:	4605      	mov	r5, r0
 800a118:	f7f6 fa0c 	bl	8000534 <__aeabi_i2d>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a124:	f7f6 f8b8 	bl	8000298 <__aeabi_dsub>
 800a128:	3530      	adds	r5, #48	@ 0x30
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a132:	f806 5b01 	strb.w	r5, [r6], #1
 800a136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a13a:	f7f6 fcd7 	bl	8000aec <__aeabi_dcmplt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d171      	bne.n	800a226 <_dtoa_r+0x65e>
 800a142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a146:	4911      	ldr	r1, [pc, #68]	@ (800a18c <_dtoa_r+0x5c4>)
 800a148:	2000      	movs	r0, #0
 800a14a:	f7f6 f8a5 	bl	8000298 <__aeabi_dsub>
 800a14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a152:	f7f6 fccb 	bl	8000aec <__aeabi_dcmplt>
 800a156:	2800      	cmp	r0, #0
 800a158:	f040 8095 	bne.w	800a286 <_dtoa_r+0x6be>
 800a15c:	42a6      	cmp	r6, r4
 800a15e:	f43f af50 	beq.w	800a002 <_dtoa_r+0x43a>
 800a162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a166:	4b0a      	ldr	r3, [pc, #40]	@ (800a190 <_dtoa_r+0x5c8>)
 800a168:	2200      	movs	r2, #0
 800a16a:	f7f6 fa4d 	bl	8000608 <__aeabi_dmul>
 800a16e:	4b08      	ldr	r3, [pc, #32]	@ (800a190 <_dtoa_r+0x5c8>)
 800a170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a174:	2200      	movs	r2, #0
 800a176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17a:	f7f6 fa45 	bl	8000608 <__aeabi_dmul>
 800a17e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a182:	e7c4      	b.n	800a10e <_dtoa_r+0x546>
 800a184:	0800be58 	.word	0x0800be58
 800a188:	0800be30 	.word	0x0800be30
 800a18c:	3ff00000 	.word	0x3ff00000
 800a190:	40240000 	.word	0x40240000
 800a194:	401c0000 	.word	0x401c0000
 800a198:	40140000 	.word	0x40140000
 800a19c:	3fe00000 	.word	0x3fe00000
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7f6 fa30 	bl	8000608 <__aeabi_dmul>
 800a1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800a1ae:	4656      	mov	r6, sl
 800a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b4:	f7f6 fcd8 	bl	8000b68 <__aeabi_d2iz>
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	f7f6 f9bb 	bl	8000534 <__aeabi_i2d>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c6:	f7f6 f867 	bl	8000298 <__aeabi_dsub>
 800a1ca:	3530      	adds	r5, #48	@ 0x30
 800a1cc:	f806 5b01 	strb.w	r5, [r6], #1
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	d124      	bne.n	800a22a <_dtoa_r+0x662>
 800a1e0:	4bac      	ldr	r3, [pc, #688]	@ (800a494 <_dtoa_r+0x8cc>)
 800a1e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1e6:	f7f6 f859 	bl	800029c <__adddf3>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f2:	f7f6 fc99 	bl	8000b28 <__aeabi_dcmpgt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d145      	bne.n	800a286 <_dtoa_r+0x6be>
 800a1fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1fe:	49a5      	ldr	r1, [pc, #660]	@ (800a494 <_dtoa_r+0x8cc>)
 800a200:	2000      	movs	r0, #0
 800a202:	f7f6 f849 	bl	8000298 <__aeabi_dsub>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20e:	f7f6 fc6d 	bl	8000aec <__aeabi_dcmplt>
 800a212:	2800      	cmp	r0, #0
 800a214:	f43f aef5 	beq.w	800a002 <_dtoa_r+0x43a>
 800a218:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a21a:	1e73      	subs	r3, r6, #1
 800a21c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a21e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a222:	2b30      	cmp	r3, #48	@ 0x30
 800a224:	d0f8      	beq.n	800a218 <_dtoa_r+0x650>
 800a226:	9f04      	ldr	r7, [sp, #16]
 800a228:	e73e      	b.n	800a0a8 <_dtoa_r+0x4e0>
 800a22a:	4b9b      	ldr	r3, [pc, #620]	@ (800a498 <_dtoa_r+0x8d0>)
 800a22c:	f7f6 f9ec 	bl	8000608 <__aeabi_dmul>
 800a230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a234:	e7bc      	b.n	800a1b0 <_dtoa_r+0x5e8>
 800a236:	d10c      	bne.n	800a252 <_dtoa_r+0x68a>
 800a238:	4b98      	ldr	r3, [pc, #608]	@ (800a49c <_dtoa_r+0x8d4>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a240:	f7f6 f9e2 	bl	8000608 <__aeabi_dmul>
 800a244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a248:	f7f6 fc64 	bl	8000b14 <__aeabi_dcmpge>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f000 8157 	beq.w	800a500 <_dtoa_r+0x938>
 800a252:	2400      	movs	r4, #0
 800a254:	4625      	mov	r5, r4
 800a256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a258:	43db      	mvns	r3, r3
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	4656      	mov	r6, sl
 800a25e:	2700      	movs	r7, #0
 800a260:	4621      	mov	r1, r4
 800a262:	4658      	mov	r0, fp
 800a264:	f000 fbb4 	bl	800a9d0 <_Bfree>
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d0dc      	beq.n	800a226 <_dtoa_r+0x65e>
 800a26c:	b12f      	cbz	r7, 800a27a <_dtoa_r+0x6b2>
 800a26e:	42af      	cmp	r7, r5
 800a270:	d003      	beq.n	800a27a <_dtoa_r+0x6b2>
 800a272:	4639      	mov	r1, r7
 800a274:	4658      	mov	r0, fp
 800a276:	f000 fbab 	bl	800a9d0 <_Bfree>
 800a27a:	4629      	mov	r1, r5
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fba7 	bl	800a9d0 <_Bfree>
 800a282:	e7d0      	b.n	800a226 <_dtoa_r+0x65e>
 800a284:	9704      	str	r7, [sp, #16]
 800a286:	4633      	mov	r3, r6
 800a288:	461e      	mov	r6, r3
 800a28a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a28e:	2a39      	cmp	r2, #57	@ 0x39
 800a290:	d107      	bne.n	800a2a2 <_dtoa_r+0x6da>
 800a292:	459a      	cmp	sl, r3
 800a294:	d1f8      	bne.n	800a288 <_dtoa_r+0x6c0>
 800a296:	9a04      	ldr	r2, [sp, #16]
 800a298:	3201      	adds	r2, #1
 800a29a:	9204      	str	r2, [sp, #16]
 800a29c:	2230      	movs	r2, #48	@ 0x30
 800a29e:	f88a 2000 	strb.w	r2, [sl]
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	3201      	adds	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7bd      	b.n	800a226 <_dtoa_r+0x65e>
 800a2aa:	4b7b      	ldr	r3, [pc, #492]	@ (800a498 <_dtoa_r+0x8d0>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f7f6 f9ab 	bl	8000608 <__aeabi_dmul>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	f7f6 fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f aebb 	beq.w	800a03a <_dtoa_r+0x472>
 800a2c4:	e6f0      	b.n	800a0a8 <_dtoa_r+0x4e0>
 800a2c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	f000 80db 	beq.w	800a484 <_dtoa_r+0x8bc>
 800a2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2d0:	2a01      	cmp	r2, #1
 800a2d2:	f300 80bf 	bgt.w	800a454 <_dtoa_r+0x88c>
 800a2d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	f000 80b7 	beq.w	800a44c <_dtoa_r+0x884>
 800a2de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2e4:	4646      	mov	r6, r8
 800a2e6:	9a08      	ldr	r2, [sp, #32]
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	441a      	add	r2, r3
 800a2ec:	4658      	mov	r0, fp
 800a2ee:	4498      	add	r8, r3
 800a2f0:	9208      	str	r2, [sp, #32]
 800a2f2:	f000 fc21 	bl	800ab38 <__i2b>
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	b15e      	cbz	r6, 800a312 <_dtoa_r+0x74a>
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd08      	ble.n	800a312 <_dtoa_r+0x74a>
 800a300:	42b3      	cmp	r3, r6
 800a302:	9a08      	ldr	r2, [sp, #32]
 800a304:	bfa8      	it	ge
 800a306:	4633      	movge	r3, r6
 800a308:	eba8 0803 	sub.w	r8, r8, r3
 800a30c:	1af6      	subs	r6, r6, r3
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	9308      	str	r3, [sp, #32]
 800a312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a314:	b1f3      	cbz	r3, 800a354 <_dtoa_r+0x78c>
 800a316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 80b7 	beq.w	800a48c <_dtoa_r+0x8c4>
 800a31e:	b18c      	cbz	r4, 800a344 <_dtoa_r+0x77c>
 800a320:	4629      	mov	r1, r5
 800a322:	4622      	mov	r2, r4
 800a324:	4658      	mov	r0, fp
 800a326:	f000 fcc7 	bl	800acb8 <__pow5mult>
 800a32a:	464a      	mov	r2, r9
 800a32c:	4601      	mov	r1, r0
 800a32e:	4605      	mov	r5, r0
 800a330:	4658      	mov	r0, fp
 800a332:	f000 fc17 	bl	800ab64 <__multiply>
 800a336:	4649      	mov	r1, r9
 800a338:	9004      	str	r0, [sp, #16]
 800a33a:	4658      	mov	r0, fp
 800a33c:	f000 fb48 	bl	800a9d0 <_Bfree>
 800a340:	9b04      	ldr	r3, [sp, #16]
 800a342:	4699      	mov	r9, r3
 800a344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a346:	1b1a      	subs	r2, r3, r4
 800a348:	d004      	beq.n	800a354 <_dtoa_r+0x78c>
 800a34a:	4649      	mov	r1, r9
 800a34c:	4658      	mov	r0, fp
 800a34e:	f000 fcb3 	bl	800acb8 <__pow5mult>
 800a352:	4681      	mov	r9, r0
 800a354:	2101      	movs	r1, #1
 800a356:	4658      	mov	r0, fp
 800a358:	f000 fbee 	bl	800ab38 <__i2b>
 800a35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35e:	4604      	mov	r4, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 81cf 	beq.w	800a704 <_dtoa_r+0xb3c>
 800a366:	461a      	mov	r2, r3
 800a368:	4601      	mov	r1, r0
 800a36a:	4658      	mov	r0, fp
 800a36c:	f000 fca4 	bl	800acb8 <__pow5mult>
 800a370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a372:	2b01      	cmp	r3, #1
 800a374:	4604      	mov	r4, r0
 800a376:	f300 8095 	bgt.w	800a4a4 <_dtoa_r+0x8dc>
 800a37a:	9b02      	ldr	r3, [sp, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 8087 	bne.w	800a490 <_dtoa_r+0x8c8>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 8089 	bne.w	800a4a0 <_dtoa_r+0x8d8>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a394:	0d1b      	lsrs	r3, r3, #20
 800a396:	051b      	lsls	r3, r3, #20
 800a398:	b12b      	cbz	r3, 800a3a6 <_dtoa_r+0x7de>
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	3301      	adds	r3, #1
 800a39e:	9308      	str	r3, [sp, #32]
 800a3a0:	f108 0801 	add.w	r8, r8, #1
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 81b0 	beq.w	800a710 <_dtoa_r+0xb48>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3b6:	6918      	ldr	r0, [r3, #16]
 800a3b8:	f000 fb72 	bl	800aaa0 <__hi0bits>
 800a3bc:	f1c0 0020 	rsb	r0, r0, #32
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	4418      	add	r0, r3
 800a3c4:	f010 001f 	ands.w	r0, r0, #31
 800a3c8:	d077      	beq.n	800a4ba <_dtoa_r+0x8f2>
 800a3ca:	f1c0 0320 	rsb	r3, r0, #32
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	dd6b      	ble.n	800a4aa <_dtoa_r+0x8e2>
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	f1c0 001c 	rsb	r0, r0, #28
 800a3d8:	4403      	add	r3, r0
 800a3da:	4480      	add	r8, r0
 800a3dc:	4406      	add	r6, r0
 800a3de:	9308      	str	r3, [sp, #32]
 800a3e0:	f1b8 0f00 	cmp.w	r8, #0
 800a3e4:	dd05      	ble.n	800a3f2 <_dtoa_r+0x82a>
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4658      	mov	r0, fp
 800a3ec:	f000 fcbe 	bl	800ad6c <__lshift>
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd05      	ble.n	800a404 <_dtoa_r+0x83c>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4658      	mov	r0, fp
 800a3fe:	f000 fcb5 	bl	800ad6c <__lshift>
 800a402:	4604      	mov	r4, r0
 800a404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a406:	2b00      	cmp	r3, #0
 800a408:	d059      	beq.n	800a4be <_dtoa_r+0x8f6>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4648      	mov	r0, r9
 800a40e:	f000 fd19 	bl	800ae44 <__mcmp>
 800a412:	2800      	cmp	r0, #0
 800a414:	da53      	bge.n	800a4be <_dtoa_r+0x8f6>
 800a416:	1e7b      	subs	r3, r7, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	4649      	mov	r1, r9
 800a41c:	2300      	movs	r3, #0
 800a41e:	220a      	movs	r2, #10
 800a420:	4658      	mov	r0, fp
 800a422:	f000 faf7 	bl	800aa14 <__multadd>
 800a426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a428:	4681      	mov	r9, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8172 	beq.w	800a714 <_dtoa_r+0xb4c>
 800a430:	2300      	movs	r3, #0
 800a432:	4629      	mov	r1, r5
 800a434:	220a      	movs	r2, #10
 800a436:	4658      	mov	r0, fp
 800a438:	f000 faec 	bl	800aa14 <__multadd>
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	4605      	mov	r5, r0
 800a442:	dc67      	bgt.n	800a514 <_dtoa_r+0x94c>
 800a444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a446:	2b02      	cmp	r3, #2
 800a448:	dc41      	bgt.n	800a4ce <_dtoa_r+0x906>
 800a44a:	e063      	b.n	800a514 <_dtoa_r+0x94c>
 800a44c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a44e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a452:	e746      	b.n	800a2e2 <_dtoa_r+0x71a>
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	1e5c      	subs	r4, r3, #1
 800a458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	bfbf      	itttt	lt
 800a45e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a460:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a462:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a464:	1ae3      	sublt	r3, r4, r3
 800a466:	bfb4      	ite	lt
 800a468:	18d2      	addlt	r2, r2, r3
 800a46a:	1b1c      	subge	r4, r3, r4
 800a46c:	9b07      	ldr	r3, [sp, #28]
 800a46e:	bfbc      	itt	lt
 800a470:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a472:	2400      	movlt	r4, #0
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfb5      	itete	lt
 800a478:	eba8 0603 	sublt.w	r6, r8, r3
 800a47c:	9b07      	ldrge	r3, [sp, #28]
 800a47e:	2300      	movlt	r3, #0
 800a480:	4646      	movge	r6, r8
 800a482:	e730      	b.n	800a2e6 <_dtoa_r+0x71e>
 800a484:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a486:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a488:	4646      	mov	r6, r8
 800a48a:	e735      	b.n	800a2f8 <_dtoa_r+0x730>
 800a48c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a48e:	e75c      	b.n	800a34a <_dtoa_r+0x782>
 800a490:	2300      	movs	r3, #0
 800a492:	e788      	b.n	800a3a6 <_dtoa_r+0x7de>
 800a494:	3fe00000 	.word	0x3fe00000
 800a498:	40240000 	.word	0x40240000
 800a49c:	40140000 	.word	0x40140000
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	e780      	b.n	800a3a6 <_dtoa_r+0x7de>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a8:	e782      	b.n	800a3b0 <_dtoa_r+0x7e8>
 800a4aa:	d099      	beq.n	800a3e0 <_dtoa_r+0x818>
 800a4ac:	9a08      	ldr	r2, [sp, #32]
 800a4ae:	331c      	adds	r3, #28
 800a4b0:	441a      	add	r2, r3
 800a4b2:	4498      	add	r8, r3
 800a4b4:	441e      	add	r6, r3
 800a4b6:	9208      	str	r2, [sp, #32]
 800a4b8:	e792      	b.n	800a3e0 <_dtoa_r+0x818>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	e7f6      	b.n	800a4ac <_dtoa_r+0x8e4>
 800a4be:	9b07      	ldr	r3, [sp, #28]
 800a4c0:	9704      	str	r7, [sp, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dc20      	bgt.n	800a508 <_dtoa_r+0x940>
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	dd1e      	ble.n	800a50c <_dtoa_r+0x944>
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f47f aec0 	bne.w	800a256 <_dtoa_r+0x68e>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	2205      	movs	r2, #5
 800a4da:	4658      	mov	r0, fp
 800a4dc:	f000 fa9a 	bl	800aa14 <__multadd>
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f000 fcad 	bl	800ae44 <__mcmp>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f77f aeb3 	ble.w	800a256 <_dtoa_r+0x68e>
 800a4f0:	4656      	mov	r6, sl
 800a4f2:	2331      	movs	r3, #49	@ 0x31
 800a4f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4f8:	9b04      	ldr	r3, [sp, #16]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	e6ae      	b.n	800a25e <_dtoa_r+0x696>
 800a500:	9c07      	ldr	r4, [sp, #28]
 800a502:	9704      	str	r7, [sp, #16]
 800a504:	4625      	mov	r5, r4
 800a506:	e7f3      	b.n	800a4f0 <_dtoa_r+0x928>
 800a508:	9b07      	ldr	r3, [sp, #28]
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8104 	beq.w	800a71c <_dtoa_r+0xb54>
 800a514:	2e00      	cmp	r6, #0
 800a516:	dd05      	ble.n	800a524 <_dtoa_r+0x95c>
 800a518:	4629      	mov	r1, r5
 800a51a:	4632      	mov	r2, r6
 800a51c:	4658      	mov	r0, fp
 800a51e:	f000 fc25 	bl	800ad6c <__lshift>
 800a522:	4605      	mov	r5, r0
 800a524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a526:	2b00      	cmp	r3, #0
 800a528:	d05a      	beq.n	800a5e0 <_dtoa_r+0xa18>
 800a52a:	6869      	ldr	r1, [r5, #4]
 800a52c:	4658      	mov	r0, fp
 800a52e:	f000 fa0f 	bl	800a950 <_Balloc>
 800a532:	4606      	mov	r6, r0
 800a534:	b928      	cbnz	r0, 800a542 <_dtoa_r+0x97a>
 800a536:	4b84      	ldr	r3, [pc, #528]	@ (800a748 <_dtoa_r+0xb80>)
 800a538:	4602      	mov	r2, r0
 800a53a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a53e:	f7ff bb5a 	b.w	8009bf6 <_dtoa_r+0x2e>
 800a542:	692a      	ldr	r2, [r5, #16]
 800a544:	3202      	adds	r2, #2
 800a546:	0092      	lsls	r2, r2, #2
 800a548:	f105 010c 	add.w	r1, r5, #12
 800a54c:	300c      	adds	r0, #12
 800a54e:	f001 f815 	bl	800b57c <memcpy>
 800a552:	2201      	movs	r2, #1
 800a554:	4631      	mov	r1, r6
 800a556:	4658      	mov	r0, fp
 800a558:	f000 fc08 	bl	800ad6c <__lshift>
 800a55c:	f10a 0301 	add.w	r3, sl, #1
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	9b00      	ldr	r3, [sp, #0]
 800a564:	4453      	add	r3, sl
 800a566:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	462f      	mov	r7, r5
 800a570:	930a      	str	r3, [sp, #40]	@ 0x28
 800a572:	4605      	mov	r5, r0
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	4621      	mov	r1, r4
 800a578:	3b01      	subs	r3, #1
 800a57a:	4648      	mov	r0, r9
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	f7ff fa99 	bl	8009ab4 <quorem>
 800a582:	4639      	mov	r1, r7
 800a584:	9002      	str	r0, [sp, #8]
 800a586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a58a:	4648      	mov	r0, r9
 800a58c:	f000 fc5a 	bl	800ae44 <__mcmp>
 800a590:	462a      	mov	r2, r5
 800a592:	9008      	str	r0, [sp, #32]
 800a594:	4621      	mov	r1, r4
 800a596:	4658      	mov	r0, fp
 800a598:	f000 fc70 	bl	800ae7c <__mdiff>
 800a59c:	68c2      	ldr	r2, [r0, #12]
 800a59e:	4606      	mov	r6, r0
 800a5a0:	bb02      	cbnz	r2, 800a5e4 <_dtoa_r+0xa1c>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4648      	mov	r0, r9
 800a5a6:	f000 fc4d 	bl	800ae44 <__mcmp>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4658      	mov	r0, fp
 800a5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5b2:	f000 fa0d 	bl	800a9d0 <_Bfree>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ba:	9e07      	ldr	r6, [sp, #28]
 800a5bc:	ea43 0102 	orr.w	r1, r3, r2
 800a5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c2:	4319      	orrs	r1, r3
 800a5c4:	d110      	bne.n	800a5e8 <_dtoa_r+0xa20>
 800a5c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5ca:	d029      	beq.n	800a620 <_dtoa_r+0xa58>
 800a5cc:	9b08      	ldr	r3, [sp, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dd02      	ble.n	800a5d8 <_dtoa_r+0xa10>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a5d8:	9b00      	ldr	r3, [sp, #0]
 800a5da:	f883 8000 	strb.w	r8, [r3]
 800a5de:	e63f      	b.n	800a260 <_dtoa_r+0x698>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	e7bb      	b.n	800a55c <_dtoa_r+0x994>
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	e7e1      	b.n	800a5ac <_dtoa_r+0x9e4>
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	db04      	blt.n	800a5f8 <_dtoa_r+0xa30>
 800a5ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5f0:	430b      	orrs	r3, r1
 800a5f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	d120      	bne.n	800a63a <_dtoa_r+0xa72>
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	dded      	ble.n	800a5d8 <_dtoa_r+0xa10>
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	2201      	movs	r2, #1
 800a600:	4658      	mov	r0, fp
 800a602:	f000 fbb3 	bl	800ad6c <__lshift>
 800a606:	4621      	mov	r1, r4
 800a608:	4681      	mov	r9, r0
 800a60a:	f000 fc1b 	bl	800ae44 <__mcmp>
 800a60e:	2800      	cmp	r0, #0
 800a610:	dc03      	bgt.n	800a61a <_dtoa_r+0xa52>
 800a612:	d1e1      	bne.n	800a5d8 <_dtoa_r+0xa10>
 800a614:	f018 0f01 	tst.w	r8, #1
 800a618:	d0de      	beq.n	800a5d8 <_dtoa_r+0xa10>
 800a61a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a61e:	d1d8      	bne.n	800a5d2 <_dtoa_r+0xa0a>
 800a620:	9a00      	ldr	r2, [sp, #0]
 800a622:	2339      	movs	r3, #57	@ 0x39
 800a624:	7013      	strb	r3, [r2, #0]
 800a626:	4633      	mov	r3, r6
 800a628:	461e      	mov	r6, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a630:	2a39      	cmp	r2, #57	@ 0x39
 800a632:	d052      	beq.n	800a6da <_dtoa_r+0xb12>
 800a634:	3201      	adds	r2, #1
 800a636:	701a      	strb	r2, [r3, #0]
 800a638:	e612      	b.n	800a260 <_dtoa_r+0x698>
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	dd07      	ble.n	800a64e <_dtoa_r+0xa86>
 800a63e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a642:	d0ed      	beq.n	800a620 <_dtoa_r+0xa58>
 800a644:	9a00      	ldr	r2, [sp, #0]
 800a646:	f108 0301 	add.w	r3, r8, #1
 800a64a:	7013      	strb	r3, [r2, #0]
 800a64c:	e608      	b.n	800a260 <_dtoa_r+0x698>
 800a64e:	9b07      	ldr	r3, [sp, #28]
 800a650:	9a07      	ldr	r2, [sp, #28]
 800a652:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a658:	4293      	cmp	r3, r2
 800a65a:	d028      	beq.n	800a6ae <_dtoa_r+0xae6>
 800a65c:	4649      	mov	r1, r9
 800a65e:	2300      	movs	r3, #0
 800a660:	220a      	movs	r2, #10
 800a662:	4658      	mov	r0, fp
 800a664:	f000 f9d6 	bl	800aa14 <__multadd>
 800a668:	42af      	cmp	r7, r5
 800a66a:	4681      	mov	r9, r0
 800a66c:	f04f 0300 	mov.w	r3, #0
 800a670:	f04f 020a 	mov.w	r2, #10
 800a674:	4639      	mov	r1, r7
 800a676:	4658      	mov	r0, fp
 800a678:	d107      	bne.n	800a68a <_dtoa_r+0xac2>
 800a67a:	f000 f9cb 	bl	800aa14 <__multadd>
 800a67e:	4607      	mov	r7, r0
 800a680:	4605      	mov	r5, r0
 800a682:	9b07      	ldr	r3, [sp, #28]
 800a684:	3301      	adds	r3, #1
 800a686:	9307      	str	r3, [sp, #28]
 800a688:	e774      	b.n	800a574 <_dtoa_r+0x9ac>
 800a68a:	f000 f9c3 	bl	800aa14 <__multadd>
 800a68e:	4629      	mov	r1, r5
 800a690:	4607      	mov	r7, r0
 800a692:	2300      	movs	r3, #0
 800a694:	220a      	movs	r2, #10
 800a696:	4658      	mov	r0, fp
 800a698:	f000 f9bc 	bl	800aa14 <__multadd>
 800a69c:	4605      	mov	r5, r0
 800a69e:	e7f0      	b.n	800a682 <_dtoa_r+0xaba>
 800a6a0:	9b00      	ldr	r3, [sp, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	bfcc      	ite	gt
 800a6a6:	461e      	movgt	r6, r3
 800a6a8:	2601      	movle	r6, #1
 800a6aa:	4456      	add	r6, sl
 800a6ac:	2700      	movs	r7, #0
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4658      	mov	r0, fp
 800a6b4:	f000 fb5a 	bl	800ad6c <__lshift>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4681      	mov	r9, r0
 800a6bc:	f000 fbc2 	bl	800ae44 <__mcmp>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dcb0      	bgt.n	800a626 <_dtoa_r+0xa5e>
 800a6c4:	d102      	bne.n	800a6cc <_dtoa_r+0xb04>
 800a6c6:	f018 0f01 	tst.w	r8, #1
 800a6ca:	d1ac      	bne.n	800a626 <_dtoa_r+0xa5e>
 800a6cc:	4633      	mov	r3, r6
 800a6ce:	461e      	mov	r6, r3
 800a6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6d4:	2a30      	cmp	r2, #48	@ 0x30
 800a6d6:	d0fa      	beq.n	800a6ce <_dtoa_r+0xb06>
 800a6d8:	e5c2      	b.n	800a260 <_dtoa_r+0x698>
 800a6da:	459a      	cmp	sl, r3
 800a6dc:	d1a4      	bne.n	800a628 <_dtoa_r+0xa60>
 800a6de:	9b04      	ldr	r3, [sp, #16]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	2331      	movs	r3, #49	@ 0x31
 800a6e6:	f88a 3000 	strb.w	r3, [sl]
 800a6ea:	e5b9      	b.n	800a260 <_dtoa_r+0x698>
 800a6ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a74c <_dtoa_r+0xb84>
 800a6f2:	b11b      	cbz	r3, 800a6fc <_dtoa_r+0xb34>
 800a6f4:	f10a 0308 	add.w	r3, sl, #8
 800a6f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	b019      	add	sp, #100	@ 0x64
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a706:	2b01      	cmp	r3, #1
 800a708:	f77f ae37 	ble.w	800a37a <_dtoa_r+0x7b2>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a710:	2001      	movs	r0, #1
 800a712:	e655      	b.n	800a3c0 <_dtoa_r+0x7f8>
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f77f aed6 	ble.w	800a4c8 <_dtoa_r+0x900>
 800a71c:	4656      	mov	r6, sl
 800a71e:	4621      	mov	r1, r4
 800a720:	4648      	mov	r0, r9
 800a722:	f7ff f9c7 	bl	8009ab4 <quorem>
 800a726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a72a:	f806 8b01 	strb.w	r8, [r6], #1
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	eba6 020a 	sub.w	r2, r6, sl
 800a734:	4293      	cmp	r3, r2
 800a736:	ddb3      	ble.n	800a6a0 <_dtoa_r+0xad8>
 800a738:	4649      	mov	r1, r9
 800a73a:	2300      	movs	r3, #0
 800a73c:	220a      	movs	r2, #10
 800a73e:	4658      	mov	r0, fp
 800a740:	f000 f968 	bl	800aa14 <__multadd>
 800a744:	4681      	mov	r9, r0
 800a746:	e7ea      	b.n	800a71e <_dtoa_r+0xb56>
 800a748:	0800bdb4 	.word	0x0800bdb4
 800a74c:	0800bd38 	.word	0x0800bd38

0800a750 <_free_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4605      	mov	r5, r0
 800a754:	2900      	cmp	r1, #0
 800a756:	d041      	beq.n	800a7dc <_free_r+0x8c>
 800a758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75c:	1f0c      	subs	r4, r1, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfb8      	it	lt
 800a762:	18e4      	addlt	r4, r4, r3
 800a764:	f000 f8e8 	bl	800a938 <__malloc_lock>
 800a768:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e0 <_free_r+0x90>)
 800a76a:	6813      	ldr	r3, [r2, #0]
 800a76c:	b933      	cbnz	r3, 800a77c <_free_r+0x2c>
 800a76e:	6063      	str	r3, [r4, #4]
 800a770:	6014      	str	r4, [r2, #0]
 800a772:	4628      	mov	r0, r5
 800a774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a778:	f000 b8e4 	b.w	800a944 <__malloc_unlock>
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d908      	bls.n	800a792 <_free_r+0x42>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	1821      	adds	r1, r4, r0
 800a784:	428b      	cmp	r3, r1
 800a786:	bf01      	itttt	eq
 800a788:	6819      	ldreq	r1, [r3, #0]
 800a78a:	685b      	ldreq	r3, [r3, #4]
 800a78c:	1809      	addeq	r1, r1, r0
 800a78e:	6021      	streq	r1, [r4, #0]
 800a790:	e7ed      	b.n	800a76e <_free_r+0x1e>
 800a792:	461a      	mov	r2, r3
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	b10b      	cbz	r3, 800a79c <_free_r+0x4c>
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d9fa      	bls.n	800a792 <_free_r+0x42>
 800a79c:	6811      	ldr	r1, [r2, #0]
 800a79e:	1850      	adds	r0, r2, r1
 800a7a0:	42a0      	cmp	r0, r4
 800a7a2:	d10b      	bne.n	800a7bc <_free_r+0x6c>
 800a7a4:	6820      	ldr	r0, [r4, #0]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	1850      	adds	r0, r2, r1
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	6011      	str	r1, [r2, #0]
 800a7ae:	d1e0      	bne.n	800a772 <_free_r+0x22>
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	6053      	str	r3, [r2, #4]
 800a7b6:	4408      	add	r0, r1
 800a7b8:	6010      	str	r0, [r2, #0]
 800a7ba:	e7da      	b.n	800a772 <_free_r+0x22>
 800a7bc:	d902      	bls.n	800a7c4 <_free_r+0x74>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	e7d6      	b.n	800a772 <_free_r+0x22>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	1821      	adds	r1, r4, r0
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	bf04      	itt	eq
 800a7cc:	6819      	ldreq	r1, [r3, #0]
 800a7ce:	685b      	ldreq	r3, [r3, #4]
 800a7d0:	6063      	str	r3, [r4, #4]
 800a7d2:	bf04      	itt	eq
 800a7d4:	1809      	addeq	r1, r1, r0
 800a7d6:	6021      	streq	r1, [r4, #0]
 800a7d8:	6054      	str	r4, [r2, #4]
 800a7da:	e7ca      	b.n	800a772 <_free_r+0x22>
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000760 	.word	0x20000760

0800a7e4 <malloc>:
 800a7e4:	4b02      	ldr	r3, [pc, #8]	@ (800a7f0 <malloc+0xc>)
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	f000 b825 	b.w	800a838 <_malloc_r>
 800a7ee:	bf00      	nop
 800a7f0:	20000030 	.word	0x20000030

0800a7f4 <sbrk_aligned>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	4e0f      	ldr	r6, [pc, #60]	@ (800a834 <sbrk_aligned+0x40>)
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	6831      	ldr	r1, [r6, #0]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	b911      	cbnz	r1, 800a806 <sbrk_aligned+0x12>
 800a800:	f000 feac 	bl	800b55c <_sbrk_r>
 800a804:	6030      	str	r0, [r6, #0]
 800a806:	4621      	mov	r1, r4
 800a808:	4628      	mov	r0, r5
 800a80a:	f000 fea7 	bl	800b55c <_sbrk_r>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	d103      	bne.n	800a81a <sbrk_aligned+0x26>
 800a812:	f04f 34ff 	mov.w	r4, #4294967295
 800a816:	4620      	mov	r0, r4
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	1cc4      	adds	r4, r0, #3
 800a81c:	f024 0403 	bic.w	r4, r4, #3
 800a820:	42a0      	cmp	r0, r4
 800a822:	d0f8      	beq.n	800a816 <sbrk_aligned+0x22>
 800a824:	1a21      	subs	r1, r4, r0
 800a826:	4628      	mov	r0, r5
 800a828:	f000 fe98 	bl	800b55c <_sbrk_r>
 800a82c:	3001      	adds	r0, #1
 800a82e:	d1f2      	bne.n	800a816 <sbrk_aligned+0x22>
 800a830:	e7ef      	b.n	800a812 <sbrk_aligned+0x1e>
 800a832:	bf00      	nop
 800a834:	2000075c 	.word	0x2000075c

0800a838 <_malloc_r>:
 800a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a83c:	1ccd      	adds	r5, r1, #3
 800a83e:	f025 0503 	bic.w	r5, r5, #3
 800a842:	3508      	adds	r5, #8
 800a844:	2d0c      	cmp	r5, #12
 800a846:	bf38      	it	cc
 800a848:	250c      	movcc	r5, #12
 800a84a:	2d00      	cmp	r5, #0
 800a84c:	4606      	mov	r6, r0
 800a84e:	db01      	blt.n	800a854 <_malloc_r+0x1c>
 800a850:	42a9      	cmp	r1, r5
 800a852:	d904      	bls.n	800a85e <_malloc_r+0x26>
 800a854:	230c      	movs	r3, #12
 800a856:	6033      	str	r3, [r6, #0]
 800a858:	2000      	movs	r0, #0
 800a85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a934 <_malloc_r+0xfc>
 800a862:	f000 f869 	bl	800a938 <__malloc_lock>
 800a866:	f8d8 3000 	ldr.w	r3, [r8]
 800a86a:	461c      	mov	r4, r3
 800a86c:	bb44      	cbnz	r4, 800a8c0 <_malloc_r+0x88>
 800a86e:	4629      	mov	r1, r5
 800a870:	4630      	mov	r0, r6
 800a872:	f7ff ffbf 	bl	800a7f4 <sbrk_aligned>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	4604      	mov	r4, r0
 800a87a:	d158      	bne.n	800a92e <_malloc_r+0xf6>
 800a87c:	f8d8 4000 	ldr.w	r4, [r8]
 800a880:	4627      	mov	r7, r4
 800a882:	2f00      	cmp	r7, #0
 800a884:	d143      	bne.n	800a90e <_malloc_r+0xd6>
 800a886:	2c00      	cmp	r4, #0
 800a888:	d04b      	beq.n	800a922 <_malloc_r+0xea>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	4639      	mov	r1, r7
 800a88e:	4630      	mov	r0, r6
 800a890:	eb04 0903 	add.w	r9, r4, r3
 800a894:	f000 fe62 	bl	800b55c <_sbrk_r>
 800a898:	4581      	cmp	r9, r0
 800a89a:	d142      	bne.n	800a922 <_malloc_r+0xea>
 800a89c:	6821      	ldr	r1, [r4, #0]
 800a89e:	1a6d      	subs	r5, r5, r1
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7ff ffa6 	bl	800a7f4 <sbrk_aligned>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d03a      	beq.n	800a922 <_malloc_r+0xea>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	442b      	add	r3, r5
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	bb62      	cbnz	r2, 800a914 <_malloc_r+0xdc>
 800a8ba:	f8c8 7000 	str.w	r7, [r8]
 800a8be:	e00f      	b.n	800a8e0 <_malloc_r+0xa8>
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	1b52      	subs	r2, r2, r5
 800a8c4:	d420      	bmi.n	800a908 <_malloc_r+0xd0>
 800a8c6:	2a0b      	cmp	r2, #11
 800a8c8:	d917      	bls.n	800a8fa <_malloc_r+0xc2>
 800a8ca:	1961      	adds	r1, r4, r5
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	6025      	str	r5, [r4, #0]
 800a8d0:	bf18      	it	ne
 800a8d2:	6059      	strne	r1, [r3, #4]
 800a8d4:	6863      	ldr	r3, [r4, #4]
 800a8d6:	bf08      	it	eq
 800a8d8:	f8c8 1000 	streq.w	r1, [r8]
 800a8dc:	5162      	str	r2, [r4, r5]
 800a8de:	604b      	str	r3, [r1, #4]
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f000 f82f 	bl	800a944 <__malloc_unlock>
 800a8e6:	f104 000b 	add.w	r0, r4, #11
 800a8ea:	1d23      	adds	r3, r4, #4
 800a8ec:	f020 0007 	bic.w	r0, r0, #7
 800a8f0:	1ac2      	subs	r2, r0, r3
 800a8f2:	bf1c      	itt	ne
 800a8f4:	1a1b      	subne	r3, r3, r0
 800a8f6:	50a3      	strne	r3, [r4, r2]
 800a8f8:	e7af      	b.n	800a85a <_malloc_r+0x22>
 800a8fa:	6862      	ldr	r2, [r4, #4]
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	bf0c      	ite	eq
 800a900:	f8c8 2000 	streq.w	r2, [r8]
 800a904:	605a      	strne	r2, [r3, #4]
 800a906:	e7eb      	b.n	800a8e0 <_malloc_r+0xa8>
 800a908:	4623      	mov	r3, r4
 800a90a:	6864      	ldr	r4, [r4, #4]
 800a90c:	e7ae      	b.n	800a86c <_malloc_r+0x34>
 800a90e:	463c      	mov	r4, r7
 800a910:	687f      	ldr	r7, [r7, #4]
 800a912:	e7b6      	b.n	800a882 <_malloc_r+0x4a>
 800a914:	461a      	mov	r2, r3
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	42a3      	cmp	r3, r4
 800a91a:	d1fb      	bne.n	800a914 <_malloc_r+0xdc>
 800a91c:	2300      	movs	r3, #0
 800a91e:	6053      	str	r3, [r2, #4]
 800a920:	e7de      	b.n	800a8e0 <_malloc_r+0xa8>
 800a922:	230c      	movs	r3, #12
 800a924:	6033      	str	r3, [r6, #0]
 800a926:	4630      	mov	r0, r6
 800a928:	f000 f80c 	bl	800a944 <__malloc_unlock>
 800a92c:	e794      	b.n	800a858 <_malloc_r+0x20>
 800a92e:	6005      	str	r5, [r0, #0]
 800a930:	e7d6      	b.n	800a8e0 <_malloc_r+0xa8>
 800a932:	bf00      	nop
 800a934:	20000760 	.word	0x20000760

0800a938 <__malloc_lock>:
 800a938:	4801      	ldr	r0, [pc, #4]	@ (800a940 <__malloc_lock+0x8>)
 800a93a:	f7ff b89a 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 800a93e:	bf00      	nop
 800a940:	20000758 	.word	0x20000758

0800a944 <__malloc_unlock>:
 800a944:	4801      	ldr	r0, [pc, #4]	@ (800a94c <__malloc_unlock+0x8>)
 800a946:	f7ff b895 	b.w	8009a74 <__retarget_lock_release_recursive>
 800a94a:	bf00      	nop
 800a94c:	20000758 	.word	0x20000758

0800a950 <_Balloc>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	69c6      	ldr	r6, [r0, #28]
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	b976      	cbnz	r6, 800a978 <_Balloc+0x28>
 800a95a:	2010      	movs	r0, #16
 800a95c:	f7ff ff42 	bl	800a7e4 <malloc>
 800a960:	4602      	mov	r2, r0
 800a962:	61e0      	str	r0, [r4, #28]
 800a964:	b920      	cbnz	r0, 800a970 <_Balloc+0x20>
 800a966:	4b18      	ldr	r3, [pc, #96]	@ (800a9c8 <_Balloc+0x78>)
 800a968:	4818      	ldr	r0, [pc, #96]	@ (800a9cc <_Balloc+0x7c>)
 800a96a:	216b      	movs	r1, #107	@ 0x6b
 800a96c:	f7ff f884 	bl	8009a78 <__assert_func>
 800a970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a974:	6006      	str	r6, [r0, #0]
 800a976:	60c6      	str	r6, [r0, #12]
 800a978:	69e6      	ldr	r6, [r4, #28]
 800a97a:	68f3      	ldr	r3, [r6, #12]
 800a97c:	b183      	cbz	r3, 800a9a0 <_Balloc+0x50>
 800a97e:	69e3      	ldr	r3, [r4, #28]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a986:	b9b8      	cbnz	r0, 800a9b8 <_Balloc+0x68>
 800a988:	2101      	movs	r1, #1
 800a98a:	fa01 f605 	lsl.w	r6, r1, r5
 800a98e:	1d72      	adds	r2, r6, #5
 800a990:	0092      	lsls	r2, r2, #2
 800a992:	4620      	mov	r0, r4
 800a994:	f000 fe07 	bl	800b5a6 <_calloc_r>
 800a998:	b160      	cbz	r0, 800a9b4 <_Balloc+0x64>
 800a99a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a99e:	e00e      	b.n	800a9be <_Balloc+0x6e>
 800a9a0:	2221      	movs	r2, #33	@ 0x21
 800a9a2:	2104      	movs	r1, #4
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fdfe 	bl	800b5a6 <_calloc_r>
 800a9aa:	69e3      	ldr	r3, [r4, #28]
 800a9ac:	60f0      	str	r0, [r6, #12]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1e4      	bne.n	800a97e <_Balloc+0x2e>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	6802      	ldr	r2, [r0, #0]
 800a9ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9c4:	e7f7      	b.n	800a9b6 <_Balloc+0x66>
 800a9c6:	bf00      	nop
 800a9c8:	0800bd45 	.word	0x0800bd45
 800a9cc:	0800bdc5 	.word	0x0800bdc5

0800a9d0 <_Bfree>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	69c6      	ldr	r6, [r0, #28]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b976      	cbnz	r6, 800a9f8 <_Bfree+0x28>
 800a9da:	2010      	movs	r0, #16
 800a9dc:	f7ff ff02 	bl	800a7e4 <malloc>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	61e8      	str	r0, [r5, #28]
 800a9e4:	b920      	cbnz	r0, 800a9f0 <_Bfree+0x20>
 800a9e6:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <_Bfree+0x3c>)
 800a9e8:	4809      	ldr	r0, [pc, #36]	@ (800aa10 <_Bfree+0x40>)
 800a9ea:	218f      	movs	r1, #143	@ 0x8f
 800a9ec:	f7ff f844 	bl	8009a78 <__assert_func>
 800a9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9f4:	6006      	str	r6, [r0, #0]
 800a9f6:	60c6      	str	r6, [r0, #12]
 800a9f8:	b13c      	cbz	r4, 800aa0a <_Bfree+0x3a>
 800a9fa:	69eb      	ldr	r3, [r5, #28]
 800a9fc:	6862      	ldr	r2, [r4, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa04:	6021      	str	r1, [r4, #0]
 800aa06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	0800bd45 	.word	0x0800bd45
 800aa10:	0800bdc5 	.word	0x0800bdc5

0800aa14 <__multadd>:
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa18:	690d      	ldr	r5, [r1, #16]
 800aa1a:	4607      	mov	r7, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	461e      	mov	r6, r3
 800aa20:	f101 0c14 	add.w	ip, r1, #20
 800aa24:	2000      	movs	r0, #0
 800aa26:	f8dc 3000 	ldr.w	r3, [ip]
 800aa2a:	b299      	uxth	r1, r3
 800aa2c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa30:	0c1e      	lsrs	r6, r3, #16
 800aa32:	0c0b      	lsrs	r3, r1, #16
 800aa34:	fb02 3306 	mla	r3, r2, r6, r3
 800aa38:	b289      	uxth	r1, r1
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa40:	4285      	cmp	r5, r0
 800aa42:	f84c 1b04 	str.w	r1, [ip], #4
 800aa46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa4a:	dcec      	bgt.n	800aa26 <__multadd+0x12>
 800aa4c:	b30e      	cbz	r6, 800aa92 <__multadd+0x7e>
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dc19      	bgt.n	800aa88 <__multadd+0x74>
 800aa54:	6861      	ldr	r1, [r4, #4]
 800aa56:	4638      	mov	r0, r7
 800aa58:	3101      	adds	r1, #1
 800aa5a:	f7ff ff79 	bl	800a950 <_Balloc>
 800aa5e:	4680      	mov	r8, r0
 800aa60:	b928      	cbnz	r0, 800aa6e <__multadd+0x5a>
 800aa62:	4602      	mov	r2, r0
 800aa64:	4b0c      	ldr	r3, [pc, #48]	@ (800aa98 <__multadd+0x84>)
 800aa66:	480d      	ldr	r0, [pc, #52]	@ (800aa9c <__multadd+0x88>)
 800aa68:	21ba      	movs	r1, #186	@ 0xba
 800aa6a:	f7ff f805 	bl	8009a78 <__assert_func>
 800aa6e:	6922      	ldr	r2, [r4, #16]
 800aa70:	3202      	adds	r2, #2
 800aa72:	f104 010c 	add.w	r1, r4, #12
 800aa76:	0092      	lsls	r2, r2, #2
 800aa78:	300c      	adds	r0, #12
 800aa7a:	f000 fd7f 	bl	800b57c <memcpy>
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7ff ffa5 	bl	800a9d0 <_Bfree>
 800aa86:	4644      	mov	r4, r8
 800aa88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	615e      	str	r6, [r3, #20]
 800aa90:	6125      	str	r5, [r4, #16]
 800aa92:	4620      	mov	r0, r4
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa98:	0800bdb4 	.word	0x0800bdb4
 800aa9c:	0800bdc5 	.word	0x0800bdc5

0800aaa0 <__hi0bits>:
 800aaa0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	bf36      	itet	cc
 800aaa8:	0403      	lslcc	r3, r0, #16
 800aaaa:	2000      	movcs	r0, #0
 800aaac:	2010      	movcc	r0, #16
 800aaae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aab2:	bf3c      	itt	cc
 800aab4:	021b      	lslcc	r3, r3, #8
 800aab6:	3008      	addcc	r0, #8
 800aab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aabc:	bf3c      	itt	cc
 800aabe:	011b      	lslcc	r3, r3, #4
 800aac0:	3004      	addcc	r0, #4
 800aac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac6:	bf3c      	itt	cc
 800aac8:	009b      	lslcc	r3, r3, #2
 800aaca:	3002      	addcc	r0, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	db05      	blt.n	800aadc <__hi0bits+0x3c>
 800aad0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aad4:	f100 0001 	add.w	r0, r0, #1
 800aad8:	bf08      	it	eq
 800aada:	2020      	moveq	r0, #32
 800aadc:	4770      	bx	lr

0800aade <__lo0bits>:
 800aade:	6803      	ldr	r3, [r0, #0]
 800aae0:	4602      	mov	r2, r0
 800aae2:	f013 0007 	ands.w	r0, r3, #7
 800aae6:	d00b      	beq.n	800ab00 <__lo0bits+0x22>
 800aae8:	07d9      	lsls	r1, r3, #31
 800aaea:	d421      	bmi.n	800ab30 <__lo0bits+0x52>
 800aaec:	0798      	lsls	r0, r3, #30
 800aaee:	bf49      	itett	mi
 800aaf0:	085b      	lsrmi	r3, r3, #1
 800aaf2:	089b      	lsrpl	r3, r3, #2
 800aaf4:	2001      	movmi	r0, #1
 800aaf6:	6013      	strmi	r3, [r2, #0]
 800aaf8:	bf5c      	itt	pl
 800aafa:	6013      	strpl	r3, [r2, #0]
 800aafc:	2002      	movpl	r0, #2
 800aafe:	4770      	bx	lr
 800ab00:	b299      	uxth	r1, r3
 800ab02:	b909      	cbnz	r1, 800ab08 <__lo0bits+0x2a>
 800ab04:	0c1b      	lsrs	r3, r3, #16
 800ab06:	2010      	movs	r0, #16
 800ab08:	b2d9      	uxtb	r1, r3
 800ab0a:	b909      	cbnz	r1, 800ab10 <__lo0bits+0x32>
 800ab0c:	3008      	adds	r0, #8
 800ab0e:	0a1b      	lsrs	r3, r3, #8
 800ab10:	0719      	lsls	r1, r3, #28
 800ab12:	bf04      	itt	eq
 800ab14:	091b      	lsreq	r3, r3, #4
 800ab16:	3004      	addeq	r0, #4
 800ab18:	0799      	lsls	r1, r3, #30
 800ab1a:	bf04      	itt	eq
 800ab1c:	089b      	lsreq	r3, r3, #2
 800ab1e:	3002      	addeq	r0, #2
 800ab20:	07d9      	lsls	r1, r3, #31
 800ab22:	d403      	bmi.n	800ab2c <__lo0bits+0x4e>
 800ab24:	085b      	lsrs	r3, r3, #1
 800ab26:	f100 0001 	add.w	r0, r0, #1
 800ab2a:	d003      	beq.n	800ab34 <__lo0bits+0x56>
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	4770      	bx	lr
 800ab30:	2000      	movs	r0, #0
 800ab32:	4770      	bx	lr
 800ab34:	2020      	movs	r0, #32
 800ab36:	4770      	bx	lr

0800ab38 <__i2b>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	f7ff ff07 	bl	800a950 <_Balloc>
 800ab42:	4602      	mov	r2, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <__i2b+0x1a>
 800ab46:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <__i2b+0x24>)
 800ab48:	4805      	ldr	r0, [pc, #20]	@ (800ab60 <__i2b+0x28>)
 800ab4a:	f240 1145 	movw	r1, #325	@ 0x145
 800ab4e:	f7fe ff93 	bl	8009a78 <__assert_func>
 800ab52:	2301      	movs	r3, #1
 800ab54:	6144      	str	r4, [r0, #20]
 800ab56:	6103      	str	r3, [r0, #16]
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800bdb4 	.word	0x0800bdb4
 800ab60:	0800bdc5 	.word	0x0800bdc5

0800ab64 <__multiply>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	4614      	mov	r4, r2
 800ab6a:	690a      	ldr	r2, [r1, #16]
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	bfa8      	it	ge
 800ab72:	4623      	movge	r3, r4
 800ab74:	460f      	mov	r7, r1
 800ab76:	bfa4      	itt	ge
 800ab78:	460c      	movge	r4, r1
 800ab7a:	461f      	movge	r7, r3
 800ab7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	6861      	ldr	r1, [r4, #4]
 800ab88:	eb0a 0609 	add.w	r6, sl, r9
 800ab8c:	42b3      	cmp	r3, r6
 800ab8e:	b085      	sub	sp, #20
 800ab90:	bfb8      	it	lt
 800ab92:	3101      	addlt	r1, #1
 800ab94:	f7ff fedc 	bl	800a950 <_Balloc>
 800ab98:	b930      	cbnz	r0, 800aba8 <__multiply+0x44>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4b44      	ldr	r3, [pc, #272]	@ (800acb0 <__multiply+0x14c>)
 800ab9e:	4845      	ldr	r0, [pc, #276]	@ (800acb4 <__multiply+0x150>)
 800aba0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aba4:	f7fe ff68 	bl	8009a78 <__assert_func>
 800aba8:	f100 0514 	add.w	r5, r0, #20
 800abac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abb0:	462b      	mov	r3, r5
 800abb2:	2200      	movs	r2, #0
 800abb4:	4543      	cmp	r3, r8
 800abb6:	d321      	bcc.n	800abfc <__multiply+0x98>
 800abb8:	f107 0114 	add.w	r1, r7, #20
 800abbc:	f104 0214 	add.w	r2, r4, #20
 800abc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	1b13      	subs	r3, r2, r4
 800abcc:	3b15      	subs	r3, #21
 800abce:	f023 0303 	bic.w	r3, r3, #3
 800abd2:	3304      	adds	r3, #4
 800abd4:	f104 0715 	add.w	r7, r4, #21
 800abd8:	42ba      	cmp	r2, r7
 800abda:	bf38      	it	cc
 800abdc:	2304      	movcc	r3, #4
 800abde:	9301      	str	r3, [sp, #4]
 800abe0:	9b02      	ldr	r3, [sp, #8]
 800abe2:	9103      	str	r1, [sp, #12]
 800abe4:	428b      	cmp	r3, r1
 800abe6:	d80c      	bhi.n	800ac02 <__multiply+0x9e>
 800abe8:	2e00      	cmp	r6, #0
 800abea:	dd03      	ble.n	800abf4 <__multiply+0x90>
 800abec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d05b      	beq.n	800acac <__multiply+0x148>
 800abf4:	6106      	str	r6, [r0, #16]
 800abf6:	b005      	add	sp, #20
 800abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfc:	f843 2b04 	str.w	r2, [r3], #4
 800ac00:	e7d8      	b.n	800abb4 <__multiply+0x50>
 800ac02:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac06:	f1ba 0f00 	cmp.w	sl, #0
 800ac0a:	d024      	beq.n	800ac56 <__multiply+0xf2>
 800ac0c:	f104 0e14 	add.w	lr, r4, #20
 800ac10:	46a9      	mov	r9, r5
 800ac12:	f04f 0c00 	mov.w	ip, #0
 800ac16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac1a:	f8d9 3000 	ldr.w	r3, [r9]
 800ac1e:	fa1f fb87 	uxth.w	fp, r7
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac2c:	f8d9 7000 	ldr.w	r7, [r9]
 800ac30:	4463      	add	r3, ip
 800ac32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac36:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac44:	4572      	cmp	r2, lr
 800ac46:	f849 3b04 	str.w	r3, [r9], #4
 800ac4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac4e:	d8e2      	bhi.n	800ac16 <__multiply+0xb2>
 800ac50:	9b01      	ldr	r3, [sp, #4]
 800ac52:	f845 c003 	str.w	ip, [r5, r3]
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac5c:	3104      	adds	r1, #4
 800ac5e:	f1b9 0f00 	cmp.w	r9, #0
 800ac62:	d021      	beq.n	800aca8 <__multiply+0x144>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	f104 0c14 	add.w	ip, r4, #20
 800ac6a:	46ae      	mov	lr, r5
 800ac6c:	f04f 0a00 	mov.w	sl, #0
 800ac70:	f8bc b000 	ldrh.w	fp, [ip]
 800ac74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac78:	fb09 770b 	mla	r7, r9, fp, r7
 800ac7c:	4457      	add	r7, sl
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac84:	f84e 3b04 	str.w	r3, [lr], #4
 800ac88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac90:	f8be 3000 	ldrh.w	r3, [lr]
 800ac94:	fb09 330a 	mla	r3, r9, sl, r3
 800ac98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac9c:	4562      	cmp	r2, ip
 800ac9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aca2:	d8e5      	bhi.n	800ac70 <__multiply+0x10c>
 800aca4:	9f01      	ldr	r7, [sp, #4]
 800aca6:	51eb      	str	r3, [r5, r7]
 800aca8:	3504      	adds	r5, #4
 800acaa:	e799      	b.n	800abe0 <__multiply+0x7c>
 800acac:	3e01      	subs	r6, #1
 800acae:	e79b      	b.n	800abe8 <__multiply+0x84>
 800acb0:	0800bdb4 	.word	0x0800bdb4
 800acb4:	0800bdc5 	.word	0x0800bdc5

0800acb8 <__pow5mult>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	4615      	mov	r5, r2
 800acbe:	f012 0203 	ands.w	r2, r2, #3
 800acc2:	4607      	mov	r7, r0
 800acc4:	460e      	mov	r6, r1
 800acc6:	d007      	beq.n	800acd8 <__pow5mult+0x20>
 800acc8:	4c25      	ldr	r4, [pc, #148]	@ (800ad60 <__pow5mult+0xa8>)
 800acca:	3a01      	subs	r2, #1
 800accc:	2300      	movs	r3, #0
 800acce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acd2:	f7ff fe9f 	bl	800aa14 <__multadd>
 800acd6:	4606      	mov	r6, r0
 800acd8:	10ad      	asrs	r5, r5, #2
 800acda:	d03d      	beq.n	800ad58 <__pow5mult+0xa0>
 800acdc:	69fc      	ldr	r4, [r7, #28]
 800acde:	b97c      	cbnz	r4, 800ad00 <__pow5mult+0x48>
 800ace0:	2010      	movs	r0, #16
 800ace2:	f7ff fd7f 	bl	800a7e4 <malloc>
 800ace6:	4602      	mov	r2, r0
 800ace8:	61f8      	str	r0, [r7, #28]
 800acea:	b928      	cbnz	r0, 800acf8 <__pow5mult+0x40>
 800acec:	4b1d      	ldr	r3, [pc, #116]	@ (800ad64 <__pow5mult+0xac>)
 800acee:	481e      	ldr	r0, [pc, #120]	@ (800ad68 <__pow5mult+0xb0>)
 800acf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acf4:	f7fe fec0 	bl	8009a78 <__assert_func>
 800acf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acfc:	6004      	str	r4, [r0, #0]
 800acfe:	60c4      	str	r4, [r0, #12]
 800ad00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad08:	b94c      	cbnz	r4, 800ad1e <__pow5mult+0x66>
 800ad0a:	f240 2171 	movw	r1, #625	@ 0x271
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7ff ff12 	bl	800ab38 <__i2b>
 800ad14:	2300      	movs	r3, #0
 800ad16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	f04f 0900 	mov.w	r9, #0
 800ad22:	07eb      	lsls	r3, r5, #31
 800ad24:	d50a      	bpl.n	800ad3c <__pow5mult+0x84>
 800ad26:	4631      	mov	r1, r6
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff ff1a 	bl	800ab64 <__multiply>
 800ad30:	4631      	mov	r1, r6
 800ad32:	4680      	mov	r8, r0
 800ad34:	4638      	mov	r0, r7
 800ad36:	f7ff fe4b 	bl	800a9d0 <_Bfree>
 800ad3a:	4646      	mov	r6, r8
 800ad3c:	106d      	asrs	r5, r5, #1
 800ad3e:	d00b      	beq.n	800ad58 <__pow5mult+0xa0>
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	b938      	cbnz	r0, 800ad54 <__pow5mult+0x9c>
 800ad44:	4622      	mov	r2, r4
 800ad46:	4621      	mov	r1, r4
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff ff0b 	bl	800ab64 <__multiply>
 800ad4e:	6020      	str	r0, [r4, #0]
 800ad50:	f8c0 9000 	str.w	r9, [r0]
 800ad54:	4604      	mov	r4, r0
 800ad56:	e7e4      	b.n	800ad22 <__pow5mult+0x6a>
 800ad58:	4630      	mov	r0, r6
 800ad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800be20 	.word	0x0800be20
 800ad64:	0800bd45 	.word	0x0800bd45
 800ad68:	0800bdc5 	.word	0x0800bdc5

0800ad6c <__lshift>:
 800ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad70:	460c      	mov	r4, r1
 800ad72:	6849      	ldr	r1, [r1, #4]
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	4691      	mov	r9, r2
 800ad80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad84:	f108 0601 	add.w	r6, r8, #1
 800ad88:	42b3      	cmp	r3, r6
 800ad8a:	db0b      	blt.n	800ada4 <__lshift+0x38>
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f7ff fddf 	bl	800a950 <_Balloc>
 800ad92:	4605      	mov	r5, r0
 800ad94:	b948      	cbnz	r0, 800adaa <__lshift+0x3e>
 800ad96:	4602      	mov	r2, r0
 800ad98:	4b28      	ldr	r3, [pc, #160]	@ (800ae3c <__lshift+0xd0>)
 800ad9a:	4829      	ldr	r0, [pc, #164]	@ (800ae40 <__lshift+0xd4>)
 800ad9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ada0:	f7fe fe6a 	bl	8009a78 <__assert_func>
 800ada4:	3101      	adds	r1, #1
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	e7ee      	b.n	800ad88 <__lshift+0x1c>
 800adaa:	2300      	movs	r3, #0
 800adac:	f100 0114 	add.w	r1, r0, #20
 800adb0:	f100 0210 	add.w	r2, r0, #16
 800adb4:	4618      	mov	r0, r3
 800adb6:	4553      	cmp	r3, sl
 800adb8:	db33      	blt.n	800ae22 <__lshift+0xb6>
 800adba:	6920      	ldr	r0, [r4, #16]
 800adbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adc0:	f104 0314 	add.w	r3, r4, #20
 800adc4:	f019 091f 	ands.w	r9, r9, #31
 800adc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800add0:	d02b      	beq.n	800ae2a <__lshift+0xbe>
 800add2:	f1c9 0e20 	rsb	lr, r9, #32
 800add6:	468a      	mov	sl, r1
 800add8:	2200      	movs	r2, #0
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	fa00 f009 	lsl.w	r0, r0, r9
 800ade0:	4310      	orrs	r0, r2
 800ade2:	f84a 0b04 	str.w	r0, [sl], #4
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	459c      	cmp	ip, r3
 800adec:	fa22 f20e 	lsr.w	r2, r2, lr
 800adf0:	d8f3      	bhi.n	800adda <__lshift+0x6e>
 800adf2:	ebac 0304 	sub.w	r3, ip, r4
 800adf6:	3b15      	subs	r3, #21
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3304      	adds	r3, #4
 800adfe:	f104 0015 	add.w	r0, r4, #21
 800ae02:	4584      	cmp	ip, r0
 800ae04:	bf38      	it	cc
 800ae06:	2304      	movcc	r3, #4
 800ae08:	50ca      	str	r2, [r1, r3]
 800ae0a:	b10a      	cbz	r2, 800ae10 <__lshift+0xa4>
 800ae0c:	f108 0602 	add.w	r6, r8, #2
 800ae10:	3e01      	subs	r6, #1
 800ae12:	4638      	mov	r0, r7
 800ae14:	612e      	str	r6, [r5, #16]
 800ae16:	4621      	mov	r1, r4
 800ae18:	f7ff fdda 	bl	800a9d0 <_Bfree>
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae26:	3301      	adds	r3, #1
 800ae28:	e7c5      	b.n	800adb6 <__lshift+0x4a>
 800ae2a:	3904      	subs	r1, #4
 800ae2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae34:	459c      	cmp	ip, r3
 800ae36:	d8f9      	bhi.n	800ae2c <__lshift+0xc0>
 800ae38:	e7ea      	b.n	800ae10 <__lshift+0xa4>
 800ae3a:	bf00      	nop
 800ae3c:	0800bdb4 	.word	0x0800bdb4
 800ae40:	0800bdc5 	.word	0x0800bdc5

0800ae44 <__mcmp>:
 800ae44:	690a      	ldr	r2, [r1, #16]
 800ae46:	4603      	mov	r3, r0
 800ae48:	6900      	ldr	r0, [r0, #16]
 800ae4a:	1a80      	subs	r0, r0, r2
 800ae4c:	b530      	push	{r4, r5, lr}
 800ae4e:	d10e      	bne.n	800ae6e <__mcmp+0x2a>
 800ae50:	3314      	adds	r3, #20
 800ae52:	3114      	adds	r1, #20
 800ae54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae64:	4295      	cmp	r5, r2
 800ae66:	d003      	beq.n	800ae70 <__mcmp+0x2c>
 800ae68:	d205      	bcs.n	800ae76 <__mcmp+0x32>
 800ae6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6e:	bd30      	pop	{r4, r5, pc}
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d3f3      	bcc.n	800ae5c <__mcmp+0x18>
 800ae74:	e7fb      	b.n	800ae6e <__mcmp+0x2a>
 800ae76:	2001      	movs	r0, #1
 800ae78:	e7f9      	b.n	800ae6e <__mcmp+0x2a>
	...

0800ae7c <__mdiff>:
 800ae7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae80:	4689      	mov	r9, r1
 800ae82:	4606      	mov	r6, r0
 800ae84:	4611      	mov	r1, r2
 800ae86:	4648      	mov	r0, r9
 800ae88:	4614      	mov	r4, r2
 800ae8a:	f7ff ffdb 	bl	800ae44 <__mcmp>
 800ae8e:	1e05      	subs	r5, r0, #0
 800ae90:	d112      	bne.n	800aeb8 <__mdiff+0x3c>
 800ae92:	4629      	mov	r1, r5
 800ae94:	4630      	mov	r0, r6
 800ae96:	f7ff fd5b 	bl	800a950 <_Balloc>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	b928      	cbnz	r0, 800aeaa <__mdiff+0x2e>
 800ae9e:	4b3f      	ldr	r3, [pc, #252]	@ (800af9c <__mdiff+0x120>)
 800aea0:	f240 2137 	movw	r1, #567	@ 0x237
 800aea4:	483e      	ldr	r0, [pc, #248]	@ (800afa0 <__mdiff+0x124>)
 800aea6:	f7fe fde7 	bl	8009a78 <__assert_func>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	b003      	add	sp, #12
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb8:	bfbc      	itt	lt
 800aeba:	464b      	movlt	r3, r9
 800aebc:	46a1      	movlt	r9, r4
 800aebe:	4630      	mov	r0, r6
 800aec0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aec4:	bfba      	itte	lt
 800aec6:	461c      	movlt	r4, r3
 800aec8:	2501      	movlt	r5, #1
 800aeca:	2500      	movge	r5, #0
 800aecc:	f7ff fd40 	bl	800a950 <_Balloc>
 800aed0:	4602      	mov	r2, r0
 800aed2:	b918      	cbnz	r0, 800aedc <__mdiff+0x60>
 800aed4:	4b31      	ldr	r3, [pc, #196]	@ (800af9c <__mdiff+0x120>)
 800aed6:	f240 2145 	movw	r1, #581	@ 0x245
 800aeda:	e7e3      	b.n	800aea4 <__mdiff+0x28>
 800aedc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aee0:	6926      	ldr	r6, [r4, #16]
 800aee2:	60c5      	str	r5, [r0, #12]
 800aee4:	f109 0310 	add.w	r3, r9, #16
 800aee8:	f109 0514 	add.w	r5, r9, #20
 800aeec:	f104 0e14 	add.w	lr, r4, #20
 800aef0:	f100 0b14 	add.w	fp, r0, #20
 800aef4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aef8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	46d9      	mov	r9, fp
 800af00:	f04f 0c00 	mov.w	ip, #0
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	fa1f f38a 	uxth.w	r3, sl
 800af14:	4619      	mov	r1, r3
 800af16:	b283      	uxth	r3, r0
 800af18:	1acb      	subs	r3, r1, r3
 800af1a:	0c00      	lsrs	r0, r0, #16
 800af1c:	4463      	add	r3, ip
 800af1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af26:	b29b      	uxth	r3, r3
 800af28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af2c:	4576      	cmp	r6, lr
 800af2e:	f849 3b04 	str.w	r3, [r9], #4
 800af32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af36:	d8e5      	bhi.n	800af04 <__mdiff+0x88>
 800af38:	1b33      	subs	r3, r6, r4
 800af3a:	3b15      	subs	r3, #21
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	3415      	adds	r4, #21
 800af42:	3304      	adds	r3, #4
 800af44:	42a6      	cmp	r6, r4
 800af46:	bf38      	it	cc
 800af48:	2304      	movcc	r3, #4
 800af4a:	441d      	add	r5, r3
 800af4c:	445b      	add	r3, fp
 800af4e:	461e      	mov	r6, r3
 800af50:	462c      	mov	r4, r5
 800af52:	4544      	cmp	r4, r8
 800af54:	d30e      	bcc.n	800af74 <__mdiff+0xf8>
 800af56:	f108 0103 	add.w	r1, r8, #3
 800af5a:	1b49      	subs	r1, r1, r5
 800af5c:	f021 0103 	bic.w	r1, r1, #3
 800af60:	3d03      	subs	r5, #3
 800af62:	45a8      	cmp	r8, r5
 800af64:	bf38      	it	cc
 800af66:	2100      	movcc	r1, #0
 800af68:	440b      	add	r3, r1
 800af6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af6e:	b191      	cbz	r1, 800af96 <__mdiff+0x11a>
 800af70:	6117      	str	r7, [r2, #16]
 800af72:	e79d      	b.n	800aeb0 <__mdiff+0x34>
 800af74:	f854 1b04 	ldr.w	r1, [r4], #4
 800af78:	46e6      	mov	lr, ip
 800af7a:	0c08      	lsrs	r0, r1, #16
 800af7c:	fa1c fc81 	uxtah	ip, ip, r1
 800af80:	4471      	add	r1, lr
 800af82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af86:	b289      	uxth	r1, r1
 800af88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af8c:	f846 1b04 	str.w	r1, [r6], #4
 800af90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af94:	e7dd      	b.n	800af52 <__mdiff+0xd6>
 800af96:	3f01      	subs	r7, #1
 800af98:	e7e7      	b.n	800af6a <__mdiff+0xee>
 800af9a:	bf00      	nop
 800af9c:	0800bdb4 	.word	0x0800bdb4
 800afa0:	0800bdc5 	.word	0x0800bdc5

0800afa4 <__d2b>:
 800afa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	460f      	mov	r7, r1
 800afaa:	2101      	movs	r1, #1
 800afac:	ec59 8b10 	vmov	r8, r9, d0
 800afb0:	4616      	mov	r6, r2
 800afb2:	f7ff fccd 	bl	800a950 <_Balloc>
 800afb6:	4604      	mov	r4, r0
 800afb8:	b930      	cbnz	r0, 800afc8 <__d2b+0x24>
 800afba:	4602      	mov	r2, r0
 800afbc:	4b23      	ldr	r3, [pc, #140]	@ (800b04c <__d2b+0xa8>)
 800afbe:	4824      	ldr	r0, [pc, #144]	@ (800b050 <__d2b+0xac>)
 800afc0:	f240 310f 	movw	r1, #783	@ 0x30f
 800afc4:	f7fe fd58 	bl	8009a78 <__assert_func>
 800afc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd0:	b10d      	cbz	r5, 800afd6 <__d2b+0x32>
 800afd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	f1b8 0300 	subs.w	r3, r8, #0
 800afdc:	d023      	beq.n	800b026 <__d2b+0x82>
 800afde:	4668      	mov	r0, sp
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	f7ff fd7c 	bl	800aade <__lo0bits>
 800afe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afea:	b1d0      	cbz	r0, 800b022 <__d2b+0x7e>
 800afec:	f1c0 0320 	rsb	r3, r0, #32
 800aff0:	fa02 f303 	lsl.w	r3, r2, r3
 800aff4:	430b      	orrs	r3, r1
 800aff6:	40c2      	lsrs	r2, r0
 800aff8:	6163      	str	r3, [r4, #20]
 800affa:	9201      	str	r2, [sp, #4]
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	61a3      	str	r3, [r4, #24]
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf0c      	ite	eq
 800b004:	2201      	moveq	r2, #1
 800b006:	2202      	movne	r2, #2
 800b008:	6122      	str	r2, [r4, #16]
 800b00a:	b1a5      	cbz	r5, 800b036 <__d2b+0x92>
 800b00c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b010:	4405      	add	r5, r0
 800b012:	603d      	str	r5, [r7, #0]
 800b014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b018:	6030      	str	r0, [r6, #0]
 800b01a:	4620      	mov	r0, r4
 800b01c:	b003      	add	sp, #12
 800b01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b022:	6161      	str	r1, [r4, #20]
 800b024:	e7ea      	b.n	800affc <__d2b+0x58>
 800b026:	a801      	add	r0, sp, #4
 800b028:	f7ff fd59 	bl	800aade <__lo0bits>
 800b02c:	9b01      	ldr	r3, [sp, #4]
 800b02e:	6163      	str	r3, [r4, #20]
 800b030:	3020      	adds	r0, #32
 800b032:	2201      	movs	r2, #1
 800b034:	e7e8      	b.n	800b008 <__d2b+0x64>
 800b036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b03a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b03e:	6038      	str	r0, [r7, #0]
 800b040:	6918      	ldr	r0, [r3, #16]
 800b042:	f7ff fd2d 	bl	800aaa0 <__hi0bits>
 800b046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b04a:	e7e5      	b.n	800b018 <__d2b+0x74>
 800b04c:	0800bdb4 	.word	0x0800bdb4
 800b050:	0800bdc5 	.word	0x0800bdc5

0800b054 <__sfputc_r>:
 800b054:	6893      	ldr	r3, [r2, #8]
 800b056:	3b01      	subs	r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	b410      	push	{r4}
 800b05c:	6093      	str	r3, [r2, #8]
 800b05e:	da08      	bge.n	800b072 <__sfputc_r+0x1e>
 800b060:	6994      	ldr	r4, [r2, #24]
 800b062:	42a3      	cmp	r3, r4
 800b064:	db01      	blt.n	800b06a <__sfputc_r+0x16>
 800b066:	290a      	cmp	r1, #10
 800b068:	d103      	bne.n	800b072 <__sfputc_r+0x1e>
 800b06a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b06e:	f7fe bbee 	b.w	800984e <__swbuf_r>
 800b072:	6813      	ldr	r3, [r2, #0]
 800b074:	1c58      	adds	r0, r3, #1
 800b076:	6010      	str	r0, [r2, #0]
 800b078:	7019      	strb	r1, [r3, #0]
 800b07a:	4608      	mov	r0, r1
 800b07c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <__sfputs_r>:
 800b082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b084:	4606      	mov	r6, r0
 800b086:	460f      	mov	r7, r1
 800b088:	4614      	mov	r4, r2
 800b08a:	18d5      	adds	r5, r2, r3
 800b08c:	42ac      	cmp	r4, r5
 800b08e:	d101      	bne.n	800b094 <__sfputs_r+0x12>
 800b090:	2000      	movs	r0, #0
 800b092:	e007      	b.n	800b0a4 <__sfputs_r+0x22>
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	463a      	mov	r2, r7
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ffda 	bl	800b054 <__sfputc_r>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d1f3      	bne.n	800b08c <__sfputs_r+0xa>
 800b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0a8 <_vfiprintf_r>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	b09d      	sub	sp, #116	@ 0x74
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	4698      	mov	r8, r3
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	b118      	cbz	r0, 800b0c0 <_vfiprintf_r+0x18>
 800b0b8:	6a03      	ldr	r3, [r0, #32]
 800b0ba:	b90b      	cbnz	r3, 800b0c0 <_vfiprintf_r+0x18>
 800b0bc:	f7fe fade 	bl	800967c <__sinit>
 800b0c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0c2:	07d9      	lsls	r1, r3, #31
 800b0c4:	d405      	bmi.n	800b0d2 <_vfiprintf_r+0x2a>
 800b0c6:	89ab      	ldrh	r3, [r5, #12]
 800b0c8:	059a      	lsls	r2, r3, #22
 800b0ca:	d402      	bmi.n	800b0d2 <_vfiprintf_r+0x2a>
 800b0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ce:	f7fe fcd0 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	071b      	lsls	r3, r3, #28
 800b0d6:	d501      	bpl.n	800b0dc <_vfiprintf_r+0x34>
 800b0d8:	692b      	ldr	r3, [r5, #16]
 800b0da:	b99b      	cbnz	r3, 800b104 <_vfiprintf_r+0x5c>
 800b0dc:	4629      	mov	r1, r5
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7fe fbf4 	bl	80098cc <__swsetup_r>
 800b0e4:	b170      	cbz	r0, 800b104 <_vfiprintf_r+0x5c>
 800b0e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0e8:	07dc      	lsls	r4, r3, #31
 800b0ea:	d504      	bpl.n	800b0f6 <_vfiprintf_r+0x4e>
 800b0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f0:	b01d      	add	sp, #116	@ 0x74
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	0598      	lsls	r0, r3, #22
 800b0fa:	d4f7      	bmi.n	800b0ec <_vfiprintf_r+0x44>
 800b0fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0fe:	f7fe fcb9 	bl	8009a74 <__retarget_lock_release_recursive>
 800b102:	e7f3      	b.n	800b0ec <_vfiprintf_r+0x44>
 800b104:	2300      	movs	r3, #0
 800b106:	9309      	str	r3, [sp, #36]	@ 0x24
 800b108:	2320      	movs	r3, #32
 800b10a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b112:	2330      	movs	r3, #48	@ 0x30
 800b114:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2c4 <_vfiprintf_r+0x21c>
 800b118:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b11c:	f04f 0901 	mov.w	r9, #1
 800b120:	4623      	mov	r3, r4
 800b122:	469a      	mov	sl, r3
 800b124:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b128:	b10a      	cbz	r2, 800b12e <_vfiprintf_r+0x86>
 800b12a:	2a25      	cmp	r2, #37	@ 0x25
 800b12c:	d1f9      	bne.n	800b122 <_vfiprintf_r+0x7a>
 800b12e:	ebba 0b04 	subs.w	fp, sl, r4
 800b132:	d00b      	beq.n	800b14c <_vfiprintf_r+0xa4>
 800b134:	465b      	mov	r3, fp
 800b136:	4622      	mov	r2, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff ffa1 	bl	800b082 <__sfputs_r>
 800b140:	3001      	adds	r0, #1
 800b142:	f000 80a7 	beq.w	800b294 <_vfiprintf_r+0x1ec>
 800b146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b148:	445a      	add	r2, fp
 800b14a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b14c:	f89a 3000 	ldrb.w	r3, [sl]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 809f 	beq.w	800b294 <_vfiprintf_r+0x1ec>
 800b156:	2300      	movs	r3, #0
 800b158:	f04f 32ff 	mov.w	r2, #4294967295
 800b15c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b160:	f10a 0a01 	add.w	sl, sl, #1
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	9307      	str	r3, [sp, #28]
 800b168:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b16c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b16e:	4654      	mov	r4, sl
 800b170:	2205      	movs	r2, #5
 800b172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b176:	4853      	ldr	r0, [pc, #332]	@ (800b2c4 <_vfiprintf_r+0x21c>)
 800b178:	f7f5 f832 	bl	80001e0 <memchr>
 800b17c:	9a04      	ldr	r2, [sp, #16]
 800b17e:	b9d8      	cbnz	r0, 800b1b8 <_vfiprintf_r+0x110>
 800b180:	06d1      	lsls	r1, r2, #27
 800b182:	bf44      	itt	mi
 800b184:	2320      	movmi	r3, #32
 800b186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b18a:	0713      	lsls	r3, r2, #28
 800b18c:	bf44      	itt	mi
 800b18e:	232b      	movmi	r3, #43	@ 0x2b
 800b190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b2a      	cmp	r3, #42	@ 0x2a
 800b19a:	d015      	beq.n	800b1c8 <_vfiprintf_r+0x120>
 800b19c:	9a07      	ldr	r2, [sp, #28]
 800b19e:	4654      	mov	r4, sl
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f04f 0c0a 	mov.w	ip, #10
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ac:	3b30      	subs	r3, #48	@ 0x30
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d94b      	bls.n	800b24a <_vfiprintf_r+0x1a2>
 800b1b2:	b1b0      	cbz	r0, 800b1e2 <_vfiprintf_r+0x13a>
 800b1b4:	9207      	str	r2, [sp, #28]
 800b1b6:	e014      	b.n	800b1e2 <_vfiprintf_r+0x13a>
 800b1b8:	eba0 0308 	sub.w	r3, r0, r8
 800b1bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	46a2      	mov	sl, r4
 800b1c6:	e7d2      	b.n	800b16e <_vfiprintf_r+0xc6>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	1d19      	adds	r1, r3, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	9103      	str	r1, [sp, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfbb      	ittet	lt
 800b1d4:	425b      	neglt	r3, r3
 800b1d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1da:	9307      	strge	r3, [sp, #28]
 800b1dc:	9307      	strlt	r3, [sp, #28]
 800b1de:	bfb8      	it	lt
 800b1e0:	9204      	strlt	r2, [sp, #16]
 800b1e2:	7823      	ldrb	r3, [r4, #0]
 800b1e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1e6:	d10a      	bne.n	800b1fe <_vfiprintf_r+0x156>
 800b1e8:	7863      	ldrb	r3, [r4, #1]
 800b1ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ec:	d132      	bne.n	800b254 <_vfiprintf_r+0x1ac>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	9203      	str	r2, [sp, #12]
 800b1f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1fa:	3402      	adds	r4, #2
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2d4 <_vfiprintf_r+0x22c>
 800b202:	7821      	ldrb	r1, [r4, #0]
 800b204:	2203      	movs	r2, #3
 800b206:	4650      	mov	r0, sl
 800b208:	f7f4 ffea 	bl	80001e0 <memchr>
 800b20c:	b138      	cbz	r0, 800b21e <_vfiprintf_r+0x176>
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	eba0 000a 	sub.w	r0, r0, sl
 800b214:	2240      	movs	r2, #64	@ 0x40
 800b216:	4082      	lsls	r2, r0
 800b218:	4313      	orrs	r3, r2
 800b21a:	3401      	adds	r4, #1
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4829      	ldr	r0, [pc, #164]	@ (800b2c8 <_vfiprintf_r+0x220>)
 800b224:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b228:	2206      	movs	r2, #6
 800b22a:	f7f4 ffd9 	bl	80001e0 <memchr>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d03f      	beq.n	800b2b2 <_vfiprintf_r+0x20a>
 800b232:	4b26      	ldr	r3, [pc, #152]	@ (800b2cc <_vfiprintf_r+0x224>)
 800b234:	bb1b      	cbnz	r3, 800b27e <_vfiprintf_r+0x1d6>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	3307      	adds	r3, #7
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	3308      	adds	r3, #8
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b244:	443b      	add	r3, r7
 800b246:	9309      	str	r3, [sp, #36]	@ 0x24
 800b248:	e76a      	b.n	800b120 <_vfiprintf_r+0x78>
 800b24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b24e:	460c      	mov	r4, r1
 800b250:	2001      	movs	r0, #1
 800b252:	e7a8      	b.n	800b1a6 <_vfiprintf_r+0xfe>
 800b254:	2300      	movs	r3, #0
 800b256:	3401      	adds	r4, #1
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	4619      	mov	r1, r3
 800b25c:	f04f 0c0a 	mov.w	ip, #10
 800b260:	4620      	mov	r0, r4
 800b262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b266:	3a30      	subs	r2, #48	@ 0x30
 800b268:	2a09      	cmp	r2, #9
 800b26a:	d903      	bls.n	800b274 <_vfiprintf_r+0x1cc>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0c6      	beq.n	800b1fe <_vfiprintf_r+0x156>
 800b270:	9105      	str	r1, [sp, #20]
 800b272:	e7c4      	b.n	800b1fe <_vfiprintf_r+0x156>
 800b274:	fb0c 2101 	mla	r1, ip, r1, r2
 800b278:	4604      	mov	r4, r0
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7f0      	b.n	800b260 <_vfiprintf_r+0x1b8>
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	462a      	mov	r2, r5
 800b284:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <_vfiprintf_r+0x228>)
 800b286:	a904      	add	r1, sp, #16
 800b288:	4630      	mov	r0, r6
 800b28a:	f7fd fdb3 	bl	8008df4 <_printf_float>
 800b28e:	4607      	mov	r7, r0
 800b290:	1c78      	adds	r0, r7, #1
 800b292:	d1d6      	bne.n	800b242 <_vfiprintf_r+0x19a>
 800b294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b296:	07d9      	lsls	r1, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_vfiprintf_r+0x1fe>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	059a      	lsls	r2, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_vfiprintf_r+0x1fe>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2a2:	f7fe fbe7 	bl	8009a74 <__retarget_lock_release_recursive>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	065b      	lsls	r3, r3, #25
 800b2aa:	f53f af1f 	bmi.w	800b0ec <_vfiprintf_r+0x44>
 800b2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2b0:	e71e      	b.n	800b0f0 <_vfiprintf_r+0x48>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b05      	ldr	r3, [pc, #20]	@ (800b2d0 <_vfiprintf_r+0x228>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7fe f831 	bl	8009324 <_printf_i>
 800b2c2:	e7e4      	b.n	800b28e <_vfiprintf_r+0x1e6>
 800b2c4:	0800bf20 	.word	0x0800bf20
 800b2c8:	0800bf2a 	.word	0x0800bf2a
 800b2cc:	08008df5 	.word	0x08008df5
 800b2d0:	0800b083 	.word	0x0800b083
 800b2d4:	0800bf26 	.word	0x0800bf26

0800b2d8 <__sflush_r>:
 800b2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e0:	0716      	lsls	r6, r2, #28
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	d454      	bmi.n	800b392 <__sflush_r+0xba>
 800b2e8:	684b      	ldr	r3, [r1, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	dc02      	bgt.n	800b2f4 <__sflush_r+0x1c>
 800b2ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dd48      	ble.n	800b386 <__sflush_r+0xae>
 800b2f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	d045      	beq.n	800b386 <__sflush_r+0xae>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b300:	682f      	ldr	r7, [r5, #0]
 800b302:	6a21      	ldr	r1, [r4, #32]
 800b304:	602b      	str	r3, [r5, #0]
 800b306:	d030      	beq.n	800b36a <__sflush_r+0x92>
 800b308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	0759      	lsls	r1, r3, #29
 800b30e:	d505      	bpl.n	800b31c <__sflush_r+0x44>
 800b310:	6863      	ldr	r3, [r4, #4]
 800b312:	1ad2      	subs	r2, r2, r3
 800b314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b316:	b10b      	cbz	r3, 800b31c <__sflush_r+0x44>
 800b318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b31a:	1ad2      	subs	r2, r2, r3
 800b31c:	2300      	movs	r3, #0
 800b31e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b320:	6a21      	ldr	r1, [r4, #32]
 800b322:	4628      	mov	r0, r5
 800b324:	47b0      	blx	r6
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	d106      	bne.n	800b33a <__sflush_r+0x62>
 800b32c:	6829      	ldr	r1, [r5, #0]
 800b32e:	291d      	cmp	r1, #29
 800b330:	d82b      	bhi.n	800b38a <__sflush_r+0xb2>
 800b332:	4a2a      	ldr	r2, [pc, #168]	@ (800b3dc <__sflush_r+0x104>)
 800b334:	410a      	asrs	r2, r1
 800b336:	07d6      	lsls	r6, r2, #31
 800b338:	d427      	bmi.n	800b38a <__sflush_r+0xb2>
 800b33a:	2200      	movs	r2, #0
 800b33c:	6062      	str	r2, [r4, #4]
 800b33e:	04d9      	lsls	r1, r3, #19
 800b340:	6922      	ldr	r2, [r4, #16]
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	d504      	bpl.n	800b350 <__sflush_r+0x78>
 800b346:	1c42      	adds	r2, r0, #1
 800b348:	d101      	bne.n	800b34e <__sflush_r+0x76>
 800b34a:	682b      	ldr	r3, [r5, #0]
 800b34c:	b903      	cbnz	r3, 800b350 <__sflush_r+0x78>
 800b34e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b352:	602f      	str	r7, [r5, #0]
 800b354:	b1b9      	cbz	r1, 800b386 <__sflush_r+0xae>
 800b356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b35a:	4299      	cmp	r1, r3
 800b35c:	d002      	beq.n	800b364 <__sflush_r+0x8c>
 800b35e:	4628      	mov	r0, r5
 800b360:	f7ff f9f6 	bl	800a750 <_free_r>
 800b364:	2300      	movs	r3, #0
 800b366:	6363      	str	r3, [r4, #52]	@ 0x34
 800b368:	e00d      	b.n	800b386 <__sflush_r+0xae>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b0      	blx	r6
 800b370:	4602      	mov	r2, r0
 800b372:	1c50      	adds	r0, r2, #1
 800b374:	d1c9      	bne.n	800b30a <__sflush_r+0x32>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0c6      	beq.n	800b30a <__sflush_r+0x32>
 800b37c:	2b1d      	cmp	r3, #29
 800b37e:	d001      	beq.n	800b384 <__sflush_r+0xac>
 800b380:	2b16      	cmp	r3, #22
 800b382:	d11e      	bne.n	800b3c2 <__sflush_r+0xea>
 800b384:	602f      	str	r7, [r5, #0]
 800b386:	2000      	movs	r0, #0
 800b388:	e022      	b.n	800b3d0 <__sflush_r+0xf8>
 800b38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38e:	b21b      	sxth	r3, r3
 800b390:	e01b      	b.n	800b3ca <__sflush_r+0xf2>
 800b392:	690f      	ldr	r7, [r1, #16]
 800b394:	2f00      	cmp	r7, #0
 800b396:	d0f6      	beq.n	800b386 <__sflush_r+0xae>
 800b398:	0793      	lsls	r3, r2, #30
 800b39a:	680e      	ldr	r6, [r1, #0]
 800b39c:	bf08      	it	eq
 800b39e:	694b      	ldreq	r3, [r1, #20]
 800b3a0:	600f      	str	r7, [r1, #0]
 800b3a2:	bf18      	it	ne
 800b3a4:	2300      	movne	r3, #0
 800b3a6:	eba6 0807 	sub.w	r8, r6, r7
 800b3aa:	608b      	str	r3, [r1, #8]
 800b3ac:	f1b8 0f00 	cmp.w	r8, #0
 800b3b0:	dde9      	ble.n	800b386 <__sflush_r+0xae>
 800b3b2:	6a21      	ldr	r1, [r4, #32]
 800b3b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3b6:	4643      	mov	r3, r8
 800b3b8:	463a      	mov	r2, r7
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b0      	blx	r6
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	dc08      	bgt.n	800b3d4 <__sflush_r+0xfc>
 800b3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d4:	4407      	add	r7, r0
 800b3d6:	eba8 0800 	sub.w	r8, r8, r0
 800b3da:	e7e7      	b.n	800b3ac <__sflush_r+0xd4>
 800b3dc:	dfbffffe 	.word	0xdfbffffe

0800b3e0 <_fflush_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	690b      	ldr	r3, [r1, #16]
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	b913      	cbnz	r3, 800b3f0 <_fflush_r+0x10>
 800b3ea:	2500      	movs	r5, #0
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	b118      	cbz	r0, 800b3fa <_fflush_r+0x1a>
 800b3f2:	6a03      	ldr	r3, [r0, #32]
 800b3f4:	b90b      	cbnz	r3, 800b3fa <_fflush_r+0x1a>
 800b3f6:	f7fe f941 	bl	800967c <__sinit>
 800b3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0f3      	beq.n	800b3ea <_fflush_r+0xa>
 800b402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b404:	07d0      	lsls	r0, r2, #31
 800b406:	d404      	bmi.n	800b412 <_fflush_r+0x32>
 800b408:	0599      	lsls	r1, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_fflush_r+0x32>
 800b40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b40e:	f7fe fb30 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b412:	4628      	mov	r0, r5
 800b414:	4621      	mov	r1, r4
 800b416:	f7ff ff5f 	bl	800b2d8 <__sflush_r>
 800b41a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b41c:	07da      	lsls	r2, r3, #31
 800b41e:	4605      	mov	r5, r0
 800b420:	d4e4      	bmi.n	800b3ec <_fflush_r+0xc>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	059b      	lsls	r3, r3, #22
 800b426:	d4e1      	bmi.n	800b3ec <_fflush_r+0xc>
 800b428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b42a:	f7fe fb23 	bl	8009a74 <__retarget_lock_release_recursive>
 800b42e:	e7dd      	b.n	800b3ec <_fflush_r+0xc>

0800b430 <fiprintf>:
 800b430:	b40e      	push	{r1, r2, r3}
 800b432:	b503      	push	{r0, r1, lr}
 800b434:	4601      	mov	r1, r0
 800b436:	ab03      	add	r3, sp, #12
 800b438:	4805      	ldr	r0, [pc, #20]	@ (800b450 <fiprintf+0x20>)
 800b43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43e:	6800      	ldr	r0, [r0, #0]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	f7ff fe31 	bl	800b0a8 <_vfiprintf_r>
 800b446:	b002      	add	sp, #8
 800b448:	f85d eb04 	ldr.w	lr, [sp], #4
 800b44c:	b003      	add	sp, #12
 800b44e:	4770      	bx	lr
 800b450:	20000030 	.word	0x20000030

0800b454 <__swhatbuf_r>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	460c      	mov	r4, r1
 800b458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45c:	2900      	cmp	r1, #0
 800b45e:	b096      	sub	sp, #88	@ 0x58
 800b460:	4615      	mov	r5, r2
 800b462:	461e      	mov	r6, r3
 800b464:	da0d      	bge.n	800b482 <__swhatbuf_r+0x2e>
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b46c:	f04f 0100 	mov.w	r1, #0
 800b470:	bf14      	ite	ne
 800b472:	2340      	movne	r3, #64	@ 0x40
 800b474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b478:	2000      	movs	r0, #0
 800b47a:	6031      	str	r1, [r6, #0]
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	b016      	add	sp, #88	@ 0x58
 800b480:	bd70      	pop	{r4, r5, r6, pc}
 800b482:	466a      	mov	r2, sp
 800b484:	f000 f848 	bl	800b518 <_fstat_r>
 800b488:	2800      	cmp	r0, #0
 800b48a:	dbec      	blt.n	800b466 <__swhatbuf_r+0x12>
 800b48c:	9901      	ldr	r1, [sp, #4]
 800b48e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b496:	4259      	negs	r1, r3
 800b498:	4159      	adcs	r1, r3
 800b49a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b49e:	e7eb      	b.n	800b478 <__swhatbuf_r+0x24>

0800b4a0 <__smakebuf_r>:
 800b4a0:	898b      	ldrh	r3, [r1, #12]
 800b4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a4:	079d      	lsls	r5, r3, #30
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	d507      	bpl.n	800b4bc <__smakebuf_r+0x1c>
 800b4ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	6123      	str	r3, [r4, #16]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	6163      	str	r3, [r4, #20]
 800b4b8:	b003      	add	sp, #12
 800b4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4bc:	ab01      	add	r3, sp, #4
 800b4be:	466a      	mov	r2, sp
 800b4c0:	f7ff ffc8 	bl	800b454 <__swhatbuf_r>
 800b4c4:	9f00      	ldr	r7, [sp, #0]
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff f9b4 	bl	800a838 <_malloc_r>
 800b4d0:	b948      	cbnz	r0, 800b4e6 <__smakebuf_r+0x46>
 800b4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d6:	059a      	lsls	r2, r3, #22
 800b4d8:	d4ee      	bmi.n	800b4b8 <__smakebuf_r+0x18>
 800b4da:	f023 0303 	bic.w	r3, r3, #3
 800b4de:	f043 0302 	orr.w	r3, r3, #2
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	e7e2      	b.n	800b4ac <__smakebuf_r+0xc>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	6020      	str	r0, [r4, #0]
 800b4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	9b01      	ldr	r3, [sp, #4]
 800b4f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4f6:	b15b      	cbz	r3, 800b510 <__smakebuf_r+0x70>
 800b4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f81d 	bl	800b53c <_isatty_r>
 800b502:	b128      	cbz	r0, 800b510 <__smakebuf_r+0x70>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	431d      	orrs	r5, r3
 800b514:	81a5      	strh	r5, [r4, #12]
 800b516:	e7cf      	b.n	800b4b8 <__smakebuf_r+0x18>

0800b518 <_fstat_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4d07      	ldr	r5, [pc, #28]	@ (800b538 <_fstat_r+0x20>)
 800b51c:	2300      	movs	r3, #0
 800b51e:	4604      	mov	r4, r0
 800b520:	4608      	mov	r0, r1
 800b522:	4611      	mov	r1, r2
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	f7f7 f827 	bl	8002578 <_fstat>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d102      	bne.n	800b534 <_fstat_r+0x1c>
 800b52e:	682b      	ldr	r3, [r5, #0]
 800b530:	b103      	cbz	r3, 800b534 <_fstat_r+0x1c>
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	bd38      	pop	{r3, r4, r5, pc}
 800b536:	bf00      	nop
 800b538:	20000754 	.word	0x20000754

0800b53c <_isatty_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	@ (800b558 <_isatty_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7f7 f826 	bl	8002598 <_isatty>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_isatty_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_isatty_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20000754 	.word	0x20000754

0800b55c <_sbrk_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d06      	ldr	r5, [pc, #24]	@ (800b578 <_sbrk_r+0x1c>)
 800b560:	2300      	movs	r3, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	f7f7 f82e 	bl	80025c8 <_sbrk>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_sbrk_r+0x1a>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_sbrk_r+0x1a>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20000754 	.word	0x20000754

0800b57c <memcpy>:
 800b57c:	440a      	add	r2, r1
 800b57e:	4291      	cmp	r1, r2
 800b580:	f100 33ff 	add.w	r3, r0, #4294967295
 800b584:	d100      	bne.n	800b588 <memcpy+0xc>
 800b586:	4770      	bx	lr
 800b588:	b510      	push	{r4, lr}
 800b58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b592:	4291      	cmp	r1, r2
 800b594:	d1f9      	bne.n	800b58a <memcpy+0xe>
 800b596:	bd10      	pop	{r4, pc}

0800b598 <abort>:
 800b598:	b508      	push	{r3, lr}
 800b59a:	2006      	movs	r0, #6
 800b59c:	f000 f85e 	bl	800b65c <raise>
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	f7f6 ff99 	bl	80024d8 <_exit>

0800b5a6 <_calloc_r>:
 800b5a6:	b570      	push	{r4, r5, r6, lr}
 800b5a8:	fba1 5402 	umull	r5, r4, r1, r2
 800b5ac:	b93c      	cbnz	r4, 800b5be <_calloc_r+0x18>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7ff f942 	bl	800a838 <_malloc_r>
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	b928      	cbnz	r0, 800b5c4 <_calloc_r+0x1e>
 800b5b8:	2600      	movs	r6, #0
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	220c      	movs	r2, #12
 800b5c0:	6002      	str	r2, [r0, #0]
 800b5c2:	e7f9      	b.n	800b5b8 <_calloc_r+0x12>
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f7fe f9d6 	bl	8009978 <memset>
 800b5cc:	e7f5      	b.n	800b5ba <_calloc_r+0x14>

0800b5ce <__ascii_mbtowc>:
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	b901      	cbnz	r1, 800b5d4 <__ascii_mbtowc+0x6>
 800b5d2:	a901      	add	r1, sp, #4
 800b5d4:	b142      	cbz	r2, 800b5e8 <__ascii_mbtowc+0x1a>
 800b5d6:	b14b      	cbz	r3, 800b5ec <__ascii_mbtowc+0x1e>
 800b5d8:	7813      	ldrb	r3, [r2, #0]
 800b5da:	600b      	str	r3, [r1, #0]
 800b5dc:	7812      	ldrb	r2, [r2, #0]
 800b5de:	1e10      	subs	r0, r2, #0
 800b5e0:	bf18      	it	ne
 800b5e2:	2001      	movne	r0, #1
 800b5e4:	b002      	add	sp, #8
 800b5e6:	4770      	bx	lr
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	e7fb      	b.n	800b5e4 <__ascii_mbtowc+0x16>
 800b5ec:	f06f 0001 	mvn.w	r0, #1
 800b5f0:	e7f8      	b.n	800b5e4 <__ascii_mbtowc+0x16>

0800b5f2 <__ascii_wctomb>:
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	b141      	cbz	r1, 800b60a <__ascii_wctomb+0x18>
 800b5f8:	2aff      	cmp	r2, #255	@ 0xff
 800b5fa:	d904      	bls.n	800b606 <__ascii_wctomb+0x14>
 800b5fc:	228a      	movs	r2, #138	@ 0x8a
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	4770      	bx	lr
 800b606:	700a      	strb	r2, [r1, #0]
 800b608:	2001      	movs	r0, #1
 800b60a:	4770      	bx	lr

0800b60c <_raise_r>:
 800b60c:	291f      	cmp	r1, #31
 800b60e:	b538      	push	{r3, r4, r5, lr}
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	d904      	bls.n	800b620 <_raise_r+0x14>
 800b616:	2316      	movs	r3, #22
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b622:	b112      	cbz	r2, 800b62a <_raise_r+0x1e>
 800b624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b628:	b94b      	cbnz	r3, 800b63e <_raise_r+0x32>
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f830 	bl	800b690 <_getpid_r>
 800b630:	4622      	mov	r2, r4
 800b632:	4601      	mov	r1, r0
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63a:	f000 b817 	b.w	800b66c <_kill_r>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d00a      	beq.n	800b658 <_raise_r+0x4c>
 800b642:	1c59      	adds	r1, r3, #1
 800b644:	d103      	bne.n	800b64e <_raise_r+0x42>
 800b646:	2316      	movs	r3, #22
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	2001      	movs	r0, #1
 800b64c:	e7e7      	b.n	800b61e <_raise_r+0x12>
 800b64e:	2100      	movs	r1, #0
 800b650:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b654:	4620      	mov	r0, r4
 800b656:	4798      	blx	r3
 800b658:	2000      	movs	r0, #0
 800b65a:	e7e0      	b.n	800b61e <_raise_r+0x12>

0800b65c <raise>:
 800b65c:	4b02      	ldr	r3, [pc, #8]	@ (800b668 <raise+0xc>)
 800b65e:	4601      	mov	r1, r0
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	f7ff bfd3 	b.w	800b60c <_raise_r>
 800b666:	bf00      	nop
 800b668:	20000030 	.word	0x20000030

0800b66c <_kill_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	@ (800b68c <_kill_r+0x20>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	602b      	str	r3, [r5, #0]
 800b67a:	f7f6 ff1d 	bl	80024b8 <_kill>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d102      	bne.n	800b688 <_kill_r+0x1c>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	b103      	cbz	r3, 800b688 <_kill_r+0x1c>
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	bf00      	nop
 800b68c:	20000754 	.word	0x20000754

0800b690 <_getpid_r>:
 800b690:	f7f6 bf0a 	b.w	80024a8 <_getpid>

0800b694 <_init>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	bf00      	nop
 800b698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69a:	bc08      	pop	{r3}
 800b69c:	469e      	mov	lr, r3
 800b69e:	4770      	bx	lr

0800b6a0 <_fini>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr
