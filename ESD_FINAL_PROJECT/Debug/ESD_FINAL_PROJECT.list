
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800bc38  0800bc38  0000cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c4  0800c5c4  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5c4  0800c5c4  0000d5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5cc  0800c5cc  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0000d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0000d5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c5d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200001ec  0800c7c0  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800c7c0  0000e7ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149e9  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370a  00000000  00000000  00022c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00026310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  00027500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006c90  00000000  00000000  000282cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b776  00000000  00000000  0002ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e507  00000000  00000000  0004a6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005918  00000000  00000000  000d8c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000de538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc1c 	.word	0x0800bc1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bc1c 	.word	0x0800bc1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	is_received=1;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000208 	.word	0x20000208

08000f08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <SELECT+0x1c>)
 8000f14:	f002 fc40 	bl	8003798 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 fe07 	bl	8002b2c <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400

08000f28 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <DESELECT+0x1c>)
 8000f34:	f002 fc30 	bl	8003798 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f001 fdf7 	bl	8002b2c <HAL_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40020400 	.word	0x40020400

08000f48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f52:	bf00      	nop
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d1f8      	bne.n	8000f54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f62:	1df9      	adds	r1, r7, #7
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	2201      	movs	r2, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f6a:	f003 faac 	bl	80044c6 <HAL_SPI_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000270 	.word	0x20000270

08000f7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f88:	bf00      	nop
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d1f8      	bne.n	8000f8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000fa0:	f003 fa91 	bl	80044c6 <HAL_SPI_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000270 	.word	0x20000270

08000fb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fba:	bf00      	nop
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d1f8      	bne.n	8000fbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fca:	1dba      	adds	r2, r7, #6
 8000fcc:	1df9      	adds	r1, r7, #7
 8000fce:	2364      	movs	r3, #100	@ 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fd6:	f003 fbba 	bl	800474e <HAL_SPI_TransmitReceive>

  return data;
 8000fda:	79bb      	ldrb	r3, [r7, #6]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000270 	.word	0x20000270

08000fe8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ff0:	f7ff ffde 	bl	8000fb0 <SPI_RxByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <SD_ReadyWait+0x30>)
 800100c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001010:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8001012:	f7ff ffcd 	bl	8000fb0 <SPI_RxByte>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d003      	beq.n	8001028 <SD_ReadyWait+0x24>
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SD_ReadyWait+0x30>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <SD_ReadyWait+0xe>

  return res;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020e 	.word	0x2000020e

08001038 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800103e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001042:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001044:	f7ff ff70 	bl	8000f28 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e005      	b.n	800105a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800104e:	20ff      	movs	r0, #255	@ 0xff
 8001050:	f7ff ff7a 	bl	8000f48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b09      	cmp	r3, #9
 800105e:	ddf6      	ble.n	800104e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001060:	f7ff ff52 	bl	8000f08 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001078:	2395      	movs	r3, #149	@ 0x95
 800107a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800107c:	463b      	mov	r3, r7
 800107e:	2106      	movs	r1, #6
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff7b 	bl	8000f7c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001086:	e002      	b.n	800108e <SD_PowerOn+0x56>
  {
    cnt--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3b01      	subs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800108e:	f7ff ff8f 	bl	8000fb0 <SPI_RxByte>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d002      	beq.n	800109e <SD_PowerOn+0x66>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <SD_PowerOn+0x50>
  }

  DESELECT();
 800109e:	f7ff ff43 	bl	8000f28 <DESELECT>
  SPI_TxByte(0XFF);
 80010a2:	20ff      	movs	r0, #255	@ 0xff
 80010a4:	f7ff ff50 	bl	8000f48 <SPI_TxByte>

  PowerFlag = 1;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <SD_PowerOn+0x80>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000211 	.word	0x20000211

080010bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <SD_PowerOff+0x14>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000211 	.word	0x20000211

080010d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <SD_CheckPower+0x14>)
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000211 	.word	0x20000211

080010ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <SD_RxDataBlock+0x58>)
 80010f8:	22c8      	movs	r2, #200	@ 0xc8
 80010fa:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80010fc:	f7ff ff58 	bl	8000fb0 <SPI_RxByte>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2bff      	cmp	r3, #255	@ 0xff
 8001108:	d103      	bne.n	8001112 <SD_RxDataBlock+0x26>
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <SD_RxDataBlock+0x58>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2bfe      	cmp	r3, #254	@ 0xfe
 8001116:	d001      	beq.n	800111c <SD_RxDataBlock+0x30>
 8001118:	2300      	movs	r3, #0
 800111a:	e00f      	b.n	800113c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff60 	bl	8000fe8 <SPI_RxBytePtr>
  } while(len--);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8001132:	f7ff ff3d 	bl	8000fb0 <SPI_RxByte>
  SPI_RxByte();
 8001136:	f7ff ff3b 	bl	8000fb0 <SPI_RxByte>

  return TRUE;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000020c 	.word	0x2000020c

08001148 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001158:	f7ff ff54 	bl	8001004 <SD_ReadyWait>
 800115c:	4603      	mov	r3, r0
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d001      	beq.n	8001166 <SD_TxDataBlock+0x1e>
 8001162:	2300      	movs	r3, #0
 8001164:	e02f      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feed 	bl	8000f48 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	2bfd      	cmp	r3, #253	@ 0xfd
 8001172:	d020      	beq.n	80011b6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff feff 	bl	8000f7c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800117e:	f7ff ff17 	bl	8000fb0 <SPI_RxByte>
    SPI_RxByte();
 8001182:	f7ff ff15 	bl	8000fb0 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001186:	e00b      	b.n	80011a0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001188:	f7ff ff12 	bl	8000fb0 <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2b05      	cmp	r3, #5
 8001198:	d006      	beq.n	80011a8 <SD_TxDataBlock+0x60>
      i++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b40      	cmp	r3, #64	@ 0x40
 80011a4:	d9f0      	bls.n	8001188 <SD_TxDataBlock+0x40>
 80011a6:	e000      	b.n	80011aa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80011a8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80011aa:	bf00      	nop
 80011ac:	f7ff ff00 	bl	8000fb0 <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0fa      	beq.n	80011ac <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d101      	bne.n	80011c4 <SD_TxDataBlock+0x7c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011da:	f7ff ff13 	bl	8001004 <SD_ReadyWait>
 80011de:	4603      	mov	r3, r0
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	d001      	beq.n	80011e8 <SD_SendCmd+0x1a>
 80011e4:	23ff      	movs	r3, #255	@ 0xff
 80011e6:	e042      	b.n	800126e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff feac 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fea6 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fea0 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe9a 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe95 	bl	8000f48 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b40      	cmp	r3, #64	@ 0x40
 8001222:	d102      	bne.n	800122a <SD_SendCmd+0x5c>
 8001224:	2395      	movs	r3, #149	@ 0x95
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e007      	b.n	800123a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b48      	cmp	r3, #72	@ 0x48
 800122e:	d102      	bne.n	8001236 <SD_SendCmd+0x68>
 8001230:	2387      	movs	r3, #135	@ 0x87
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <SD_SendCmd+0x6c>
  else crc = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe83 	bl	8000f48 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b4c      	cmp	r3, #76	@ 0x4c
 8001246:	d101      	bne.n	800124c <SD_SendCmd+0x7e>
 8001248:	f7ff feb2 	bl	8000fb0 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800124c:	230a      	movs	r3, #10
 800124e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001250:	f7ff feae 	bl	8000fb0 <SPI_RxByte>
 8001254:	4603      	mov	r3, r0
 8001256:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001258:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da05      	bge.n	800126c <SD_SendCmd+0x9e>
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3b01      	subs	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f1      	bne.n	8001250 <SD_SendCmd+0x82>

  return res;
 800126c:	7b7b      	ldrb	r3, [r7, #13]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_disk_initialize+0x14>
 8001288:	2301      	movs	r3, #1
 800128a:	e0d1      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800128c:	4b6a      	ldr	r3, [pc, #424]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <SD_disk_initialize+0x2a>
 800129a:	4b67      	ldr	r3, [pc, #412]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	e0c6      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80012a2:	f7ff fec9 	bl	8001038 <SD_PowerOn>

  /* slave select */
  SELECT();
 80012a6:	f7ff fe2f 	bl	8000f08 <SELECT>

  /* check disk type */
  type = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80012ae:	2100      	movs	r1, #0
 80012b0:	2040      	movs	r0, #64	@ 0x40
 80012b2:	f7ff ff8c 	bl	80011ce <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 80a1 	bne.w	8001400 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80012be:	4b5f      	ldr	r3, [pc, #380]	@ (800143c <SD_disk_initialize+0x1c4>)
 80012c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012c4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012c6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80012ca:	2048      	movs	r0, #72	@ 0x48
 80012cc:	f7ff ff7f 	bl	80011ce <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d155      	bne.n	8001382 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00c      	b.n	80012f6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80012dc:	7bfc      	ldrb	r4, [r7, #15]
 80012de:	f7ff fe67 	bl	8000fb0 <SPI_RxByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	f104 0310 	add.w	r3, r4, #16
 80012ea:	443b      	add	r3, r7
 80012ec:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d9ef      	bls.n	80012dc <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d17e      	bne.n	8001400 <SD_disk_initialize+0x188>
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2baa      	cmp	r3, #170	@ 0xaa
 8001306:	d17b      	bne.n	8001400 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001308:	2100      	movs	r1, #0
 800130a:	2077      	movs	r0, #119	@ 0x77
 800130c:	f7ff ff5f 	bl	80011ce <SD_SendCmd>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d807      	bhi.n	8001326 <SD_disk_initialize+0xae>
 8001316:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800131a:	2069      	movs	r0, #105	@ 0x69
 800131c:	f7ff ff57 	bl	80011ce <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001326:	4b45      	ldr	r3, [pc, #276]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ec      	bne.n	8001308 <SD_disk_initialize+0x90>
 800132e:	e000      	b.n	8001332 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001330:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d062      	beq.n	8001400 <SD_disk_initialize+0x188>
 800133a:	2100      	movs	r1, #0
 800133c:	207a      	movs	r0, #122	@ 0x7a
 800133e:	f7ff ff46 	bl	80011ce <SD_SendCmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15b      	bne.n	8001400 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e00c      	b.n	8001368 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800134e:	7bfc      	ldrb	r4, [r7, #15]
 8001350:	f7ff fe2e 	bl	8000fb0 <SPI_RxByte>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	f104 0310 	add.w	r3, r4, #16
 800135c:	443b      	add	r3, r7
 800135e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d9ef      	bls.n	800134e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800136e:	7a3b      	ldrb	r3, [r7, #8]
 8001370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x104>
 8001378:	230c      	movs	r3, #12
 800137a:	e000      	b.n	800137e <SD_disk_initialize+0x106>
 800137c:	2304      	movs	r3, #4
 800137e:	73bb      	strb	r3, [r7, #14]
 8001380:	e03e      	b.n	8001400 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	@ 0x77
 8001386:	f7ff ff22 	bl	80011ce <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d808      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 8001390:	2100      	movs	r1, #0
 8001392:	2069      	movs	r0, #105	@ 0x69
 8001394:	f7ff ff1b 	bl	80011ce <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d801      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e000      	b.n	80013a4 <SD_disk_initialize+0x12c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d10e      	bne.n	80013ca <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013ac:	2100      	movs	r1, #0
 80013ae:	2077      	movs	r0, #119	@ 0x77
 80013b0:	f7ff ff0d 	bl	80011ce <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d80e      	bhi.n	80013d8 <SD_disk_initialize+0x160>
 80013ba:	2100      	movs	r1, #0
 80013bc:	2069      	movs	r0, #105	@ 0x69
 80013be:	f7ff ff06 	bl	80011ce <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <SD_disk_initialize+0x160>
 80013c8:	e00c      	b.n	80013e4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ca:	2100      	movs	r1, #0
 80013cc:	2041      	movs	r0, #65	@ 0x41
 80013ce:	f7ff fefe 	bl	80011ce <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e2      	bne.n	80013a6 <SD_disk_initialize+0x12e>
 80013e0:	e000      	b.n	80013e4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013e2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <SD_disk_initialize+0x184>
 80013ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f0:	2050      	movs	r0, #80	@ 0x50
 80013f2:	f7ff feec 	bl	80011ce <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SD_disk_initialize+0x188>
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <SD_disk_initialize+0x1c8>)
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001406:	f7ff fd8f 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800140a:	f7ff fdd1 	bl	8000fb0 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e001      	b.n	800142a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001426:	f7ff fe49 	bl	80010bc <SD_PowerOff>
  }

  return Stat;
 800142a:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	2000020c 	.word	0x2000020c
 8001440:	20000210 	.word	0x20000210

08001444 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SD_disk_status+0x14>
 8001454:	2301      	movs	r3, #1
 8001456:	e002      	b.n	800145e <SD_disk_status+0x1a>
  return Stat;
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SD_disk_status+0x28>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <SD_disk_read+0x1c>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <SD_disk_read+0x20>
 800148c:	2304      	movs	r3, #4
 800148e:	e051      	b.n	8001534 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SD_disk_read+0xcc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_read+0x32>
 800149e:	2303      	movs	r3, #3
 80014a0:	e048      	b.n	8001534 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80014a2:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <SD_disk_read+0xd0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_read+0x44>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80014b4:	f7ff fd28 	bl	8000f08 <SELECT>

  if (count == 1)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d111      	bne.n	80014e2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff fe84 	bl	80011ce <SD_SendCmd>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d129      	bne.n	8001520 <SD_disk_read+0xb0>
 80014cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f7ff fe0b 	bl	80010ec <SD_RxDataBlock>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d021      	beq.n	8001520 <SD_disk_read+0xb0>
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	e01e      	b.n	8001520 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2052      	movs	r0, #82	@ 0x52
 80014e6:	f7ff fe72 	bl	80011ce <SD_SendCmd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d117      	bne.n	8001520 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f7ff fdf9 	bl	80010ec <SD_RxDataBlock>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <SD_disk_read+0xa6>
        buff += 512;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001506:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ed      	bne.n	80014f0 <SD_disk_read+0x80>
 8001514:	e000      	b.n	8001518 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001516:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	204c      	movs	r0, #76	@ 0x4c
 800151c:	f7ff fe57 	bl	80011ce <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001520:	f7ff fd02 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 8001524:	f7ff fd44 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000210 	.word	0x20000210

08001544 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <SD_disk_write+0x1c>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SD_disk_write+0x20>
 8001560:	2304      	movs	r3, #4
 8001562:	e06b      	b.n	800163c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <SD_disk_write+0x100>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_write+0x32>
 8001572:	2303      	movs	r3, #3
 8001574:	e062      	b.n	800163c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <SD_disk_write+0x100>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_write+0x44>
 8001584:	2302      	movs	r3, #2
 8001586:	e059      	b.n	800163c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001588:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <SD_disk_write+0x104>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <SD_disk_write+0x56>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	607b      	str	r3, [r7, #4]

  SELECT();
 800159a:	f7ff fcb5 	bl	8000f08 <SELECT>

  if (count == 1)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d110      	bne.n	80015c6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	2058      	movs	r0, #88	@ 0x58
 80015a8:	f7ff fe11 	bl	80011ce <SD_SendCmd>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d13a      	bne.n	8001628 <SD_disk_write+0xe4>
 80015b2:	21fe      	movs	r1, #254	@ 0xfe
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fdc7 	bl	8001148 <SD_TxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d033      	beq.n	8001628 <SD_disk_write+0xe4>
      count = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e030      	b.n	8001628 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <SD_disk_write+0x104>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2077      	movs	r0, #119	@ 0x77
 80015d6:	f7ff fdfa 	bl	80011ce <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	2057      	movs	r0, #87	@ 0x57
 80015de:	f7ff fdf6 	bl	80011ce <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2059      	movs	r0, #89	@ 0x59
 80015e6:	f7ff fdf2 	bl	80011ce <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f0:	21fc      	movs	r1, #252	@ 0xfc
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7ff fda8 	bl	8001148 <SD_TxDataBlock>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <SD_disk_write+0xd0>
        buff += 512;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001604:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <SD_disk_write+0xac>
 8001612:	e000      	b.n	8001616 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001614:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001616:	21fd      	movs	r1, #253	@ 0xfd
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fd95 	bl	8001148 <SD_TxDataBlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <SD_disk_write+0xe4>
      {
        count = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001628:	f7ff fc7e 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800162c:	f7ff fcc0 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000210 	.word	0x20000210

0800164c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b08b      	sub	sp, #44	@ 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	460b      	mov	r3, r1
 800165a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SD_disk_ioctl+0x1e>
 8001666:	2304      	movs	r3, #4
 8001668:	e113      	b.n	8001892 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d124      	bne.n	80016c0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d012      	beq.n	80016a4 <SD_disk_ioctl+0x58>
 800167e:	2b02      	cmp	r3, #2
 8001680:	dc1a      	bgt.n	80016b8 <SD_disk_ioctl+0x6c>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <SD_disk_ioctl+0x40>
 8001686:	2b01      	cmp	r3, #1
 8001688:	d006      	beq.n	8001698 <SD_disk_ioctl+0x4c>
 800168a:	e015      	b.n	80016b8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800168c:	f7ff fd16 	bl	80010bc <SD_PowerOff>
      res = RES_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001696:	e0fa      	b.n	800188e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001698:	f7ff fcce 	bl	8001038 <SD_PowerOn>
      res = RES_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016a2:	e0f4      	b.n	800188e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	1c5c      	adds	r4, r3, #1
 80016a8:	f7ff fd14 	bl	80010d4 <SD_CheckPower>
 80016ac:	4603      	mov	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016b6:	e0ea      	b.n	800188e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016be:	e0e6      	b.n	800188e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c0:	4b76      	ldr	r3, [pc, #472]	@ (800189c <SD_disk_ioctl+0x250>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SD_disk_ioctl+0x86>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0df      	b.n	8001892 <SD_disk_ioctl+0x246>

    SELECT();
 80016d2:	f7ff fc19 	bl	8000f08 <SELECT>

    switch (ctrl)
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	2b0d      	cmp	r3, #13
 80016da:	f200 80c9 	bhi.w	8001870 <SD_disk_ioctl+0x224>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <SD_disk_ioctl+0x98>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080017db 	.word	0x080017db
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	080017cb 	.word	0x080017cb
 80016f0:	08001871 	.word	0x08001871
 80016f4:	08001871 	.word	0x08001871
 80016f8:	08001871 	.word	0x08001871
 80016fc:	08001871 	.word	0x08001871
 8001700:	08001871 	.word	0x08001871
 8001704:	08001871 	.word	0x08001871
 8001708:	08001871 	.word	0x08001871
 800170c:	08001871 	.word	0x08001871
 8001710:	080017ed 	.word	0x080017ed
 8001714:	08001811 	.word	0x08001811
 8001718:	08001835 	.word	0x08001835
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800171c:	2100      	movs	r1, #0
 800171e:	2049      	movs	r0, #73	@ 0x49
 8001720:	f7ff fd55 	bl	80011ce <SD_SendCmd>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80a6 	bne.w	8001878 <SD_disk_ioctl+0x22c>
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2110      	movs	r1, #16
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcda 	bl	80010ec <SD_RxDataBlock>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809c 	beq.w	8001878 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001740:	7b3b      	ldrb	r3, [r7, #12]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10d      	bne.n	8001766 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800174a:	7d7b      	ldrb	r3, [r7, #21]
 800174c:	461a      	mov	r2, r3
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	029a      	lsls	r2, r3, #10
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e02d      	b.n	80017c2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001766:	7c7b      	ldrb	r3, [r7, #17]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7dbb      	ldrb	r3, [r7, #22]
 8001770:	09db      	lsrs	r3, r3, #7
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2da      	uxtb	r2, r3
 8001778:	7d7b      	ldrb	r3, [r7, #21]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0306 	and.w	r3, r3, #6
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3302      	adds	r3, #2
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800178e:	7d3b      	ldrb	r3, [r7, #20]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017b4:	8bfa      	ldrh	r2, [r7, #30]
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	3b09      	subs	r3, #9
 80017bc:	409a      	lsls	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80017c8:	e056      	b.n	8001878 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017d8:	e055      	b.n	8001886 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017da:	f7ff fc13 	bl	8001004 <SD_ReadyWait>
 80017de:	4603      	mov	r3, r0
 80017e0:	2bff      	cmp	r3, #255	@ 0xff
 80017e2:	d14b      	bne.n	800187c <SD_disk_ioctl+0x230>
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ea:	e047      	b.n	800187c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017ec:	2100      	movs	r1, #0
 80017ee:	2049      	movs	r0, #73	@ 0x49
 80017f0:	f7ff fced 	bl	80011ce <SD_SendCmd>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d142      	bne.n	8001880 <SD_disk_ioctl+0x234>
 80017fa:	2110      	movs	r1, #16
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f7ff fc75 	bl	80010ec <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03b      	beq.n	8001880 <SD_disk_ioctl+0x234>
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800180e:	e037      	b.n	8001880 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001810:	2100      	movs	r1, #0
 8001812:	204a      	movs	r0, #74	@ 0x4a
 8001814:	f7ff fcdb 	bl	80011ce <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d132      	bne.n	8001884 <SD_disk_ioctl+0x238>
 800181e:	2110      	movs	r1, #16
 8001820:	6a38      	ldr	r0, [r7, #32]
 8001822:	f7ff fc63 	bl	80010ec <SD_RxDataBlock>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02b      	beq.n	8001884 <SD_disk_ioctl+0x238>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001832:	e027      	b.n	8001884 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001834:	2100      	movs	r1, #0
 8001836:	207a      	movs	r0, #122	@ 0x7a
 8001838:	f7ff fcc9 	bl	80011ce <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001848:	e00b      	b.n	8001862 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800184a:	6a3c      	ldr	r4, [r7, #32]
 800184c:	1c63      	adds	r3, r4, #1
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	f7ff fbae 	bl	8000fb0 <SPI_RxByte>
 8001854:	4603      	mov	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800185c:	3301      	adds	r3, #1
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001866:	2b03      	cmp	r3, #3
 8001868:	d9ef      	bls.n	800184a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001870:	2304      	movs	r3, #4
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001876:	e006      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001878:	bf00      	nop
 800187a:	e004      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001884:	bf00      	nop
    }

    DESELECT();
 8001886:	f7ff fb4f 	bl	8000f28 <DESELECT>
    SPI_RxByte();
 800188a:	f7ff fb91 	bl	8000fb0 <SPI_RxByte>
  }

  return res;
 800188e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001892:	4618      	mov	r0, r3
 8001894:	372c      	adds	r7, #44	@ 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_GPIO_EXTI_Callback>:
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
}

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d102      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000214 	.word	0x20000214

080018c8 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 80018cc:	2080      	movs	r0, #128	@ 0x80
 80018ce:	f001 ff7d 	bl	80037cc <HAL_GPIO_EXTI_IRQHandler>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <ADC_IRQHandler>:
    NVIC_EnableIRQ(ADC_IRQn);
    //NVIC_SetPriority(ADC_IRQn, 1);
}

// ADC interrupt handler
void ADC_IRQHandler(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 80018dc:	bf00      	nop
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <ADC_IRQHandler+0x3c>)
 80018f2:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <ADC_IRQHandler+0x40>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <ADC_IRQHandler+0x38>)
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012000 	.word	0x40012000
 8001914:	20000218 	.word	0x20000218
 8001918:	2000021a 	.word	0x2000021a

0800191c <ILI9341_SendCommand>:
#define RST_HIGH()  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET)
#define SD_CS_PORT GPIOD
#define SD_CS_PIN GPIO_PIN_9

// Function to send a command
void ILI9341_SendCommand(uint8_t cmd) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <ILI9341_SendCommand+0x44>)
 800192e:	f001 ff33 	bl	8003798 <HAL_GPIO_WritePin>
    DC_COMMAND();
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <ILI9341_SendCommand+0x44>)
 800193a:	f001 ff2d 	bl	8003798 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800193e:	1df9      	adds	r1, r7, #7
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	2201      	movs	r2, #1
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <ILI9341_SendCommand+0x48>)
 8001948:	f002 fdbd 	bl	80044c6 <HAL_SPI_Transmit>
    CS_HIGH();
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <ILI9341_SendCommand+0x44>)
 8001954:	f001 ff20 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020400 	.word	0x40020400
 8001964:	20000270 	.word	0x20000270

08001968 <ILI9341_SendData>:

// Function to send data
void ILI9341_SendData(uint8_t *data, uint16_t size) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
    CS_LOW();
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800197a:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <ILI9341_SendData+0x48>)
 800197c:	f001 ff0c 	bl	8003798 <HAL_GPIO_WritePin>
    DC_DATA();
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <ILI9341_SendData+0x48>)
 8001988:	f001 ff06 	bl	8003798 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <ILI9341_SendData+0x4c>)
 8001996:	f002 fd96 	bl	80044c6 <HAL_SPI_Transmit>
    CS_HIGH();
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <ILI9341_SendData+0x48>)
 80019a2:	f001 fef9 	bl	8003798 <HAL_GPIO_WritePin>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020400 	.word	0x40020400
 80019b4:	20000270 	.word	0x20000270

080019b8 <ILI9341_Init>:
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
    CS_HIGH();
}

// Initialization sequence for ILI9341
void ILI9341_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
    // Reset the display
    RST_LOW();
 80019be:	2200      	movs	r2, #0
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	4863      	ldr	r0, [pc, #396]	@ (8001b50 <ILI9341_Init+0x198>)
 80019c4:	f001 fee8 	bl	8003798 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10ms delay
 80019c8:	200a      	movs	r0, #10
 80019ca:	f001 f8af 	bl	8002b2c <HAL_Delay>
    RST_HIGH();
 80019ce:	2201      	movs	r2, #1
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	485f      	ldr	r0, [pc, #380]	@ (8001b50 <ILI9341_Init+0x198>)
 80019d4:	f001 fee0 	bl	8003798 <HAL_GPIO_WritePin>
    HAL_Delay(120); // 120ms delay after reset
 80019d8:	2078      	movs	r0, #120	@ 0x78
 80019da:	f001 f8a7 	bl	8002b2c <HAL_Delay>

    // Initialization commands based on the datasheet
    uint8_t data[15];

    // Power Control A
    ILI9341_SendCommand(0xCB);
 80019de:	20cb      	movs	r0, #203	@ 0xcb
 80019e0:	f7ff ff9c 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x39; data[1] = 0x2C; data[2] = 0x00; data[3] = 0x34; data[4] = 0x02;
 80019e4:	2339      	movs	r3, #57	@ 0x39
 80019e6:	703b      	strb	r3, [r7, #0]
 80019e8:	232c      	movs	r3, #44	@ 0x2c
 80019ea:	707b      	strb	r3, [r7, #1]
 80019ec:	2300      	movs	r3, #0
 80019ee:	70bb      	strb	r3, [r7, #2]
 80019f0:	2334      	movs	r3, #52	@ 0x34
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	2302      	movs	r3, #2
 80019f6:	713b      	strb	r3, [r7, #4]
    ILI9341_SendData(data, 5);
 80019f8:	463b      	mov	r3, r7
 80019fa:	2105      	movs	r1, #5
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffb3 	bl	8001968 <ILI9341_SendData>

    // Power Control B
    ILI9341_SendCommand(0xCF);
 8001a02:	20cf      	movs	r0, #207	@ 0xcf
 8001a04:	f7ff ff8a 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0xC1; data[2] = 0x30;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	703b      	strb	r3, [r7, #0]
 8001a0c:	23c1      	movs	r3, #193	@ 0xc1
 8001a0e:	707b      	strb	r3, [r7, #1]
 8001a10:	2330      	movs	r3, #48	@ 0x30
 8001a12:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001a14:	463b      	mov	r3, r7
 8001a16:	2103      	movs	r1, #3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffa5 	bl	8001968 <ILI9341_SendData>

    // Driver Timing Control A
    ILI9341_SendCommand(0xE8);
 8001a1e:	20e8      	movs	r0, #232	@ 0xe8
 8001a20:	f7ff ff7c 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x85; data[1] = 0x00; data[2] = 0x78;
 8001a24:	2385      	movs	r3, #133	@ 0x85
 8001a26:	703b      	strb	r3, [r7, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	707b      	strb	r3, [r7, #1]
 8001a2c:	2378      	movs	r3, #120	@ 0x78
 8001a2e:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001a30:	463b      	mov	r3, r7
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff97 	bl	8001968 <ILI9341_SendData>

    // Driver Timing Control B
    ILI9341_SendCommand(0xEA);
 8001a3a:	20ea      	movs	r0, #234	@ 0xea
 8001a3c:	f7ff ff6e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	703b      	strb	r3, [r7, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff8b 	bl	8001968 <ILI9341_SendData>

    // Power On Sequence Control
    ILI9341_SendCommand(0xED);
 8001a52:	20ed      	movs	r0, #237	@ 0xed
 8001a54:	f7ff ff62 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x64; data[1] = 0x03; data[2] = 0x12; data[3] = 0x81;
 8001a58:	2364      	movs	r3, #100	@ 0x64
 8001a5a:	703b      	strb	r3, [r7, #0]
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	707b      	strb	r3, [r7, #1]
 8001a60:	2312      	movs	r3, #18
 8001a62:	70bb      	strb	r3, [r7, #2]
 8001a64:	2381      	movs	r3, #129	@ 0x81
 8001a66:	70fb      	strb	r3, [r7, #3]
    ILI9341_SendData(data, 4);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff7b 	bl	8001968 <ILI9341_SendData>

    // Pump Ratio Control
    ILI9341_SendCommand(0xF7);
 8001a72:	20f7      	movs	r0, #247	@ 0xf7
 8001a74:	f7ff ff52 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x20;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff71 	bl	8001968 <ILI9341_SendData>

    // Power Control 1
    ILI9341_SendCommand(0xC0);
 8001a86:	20c0      	movs	r0, #192	@ 0xc0
 8001a88:	f7ff ff48 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x23;
 8001a8c:	2323      	movs	r3, #35	@ 0x23
 8001a8e:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001a90:	463b      	mov	r3, r7
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff67 	bl	8001968 <ILI9341_SendData>

    // Power Control 2
    ILI9341_SendCommand(0xC1);
 8001a9a:	20c1      	movs	r0, #193	@ 0xc1
 8001a9c:	f7ff ff3e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x10;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <ILI9341_SendData>

    // VCOM Control 1
    ILI9341_SendCommand(0xC5);
 8001aae:	20c5      	movs	r0, #197	@ 0xc5
 8001ab0:	f7ff ff34 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x3E; data[1] = 0x28;
 8001ab4:	233e      	movs	r3, #62	@ 0x3e
 8001ab6:	703b      	strb	r3, [r7, #0]
 8001ab8:	2328      	movs	r3, #40	@ 0x28
 8001aba:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001abc:	463b      	mov	r3, r7
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff51 	bl	8001968 <ILI9341_SendData>

    // VCOM Control 2
    ILI9341_SendCommand(0xC7);
 8001ac6:	20c7      	movs	r0, #199	@ 0xc7
 8001ac8:	f7ff ff28 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x86;
 8001acc:	2386      	movs	r3, #134	@ 0x86
 8001ace:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff47 	bl	8001968 <ILI9341_SendData>

    // Memory Access Control
    ILI9341_SendCommand(0x36);
 8001ada:	2036      	movs	r0, #54	@ 0x36
 8001adc:	f7ff ff1e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x48;
 8001ae0:	2348      	movs	r3, #72	@ 0x48
 8001ae2:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff3d 	bl	8001968 <ILI9341_SendData>

    // Pixel Format Set
    ILI9341_SendCommand(0x3A);
 8001aee:	203a      	movs	r0, #58	@ 0x3a
 8001af0:	f7ff ff14 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x55;  // 16-bit RGB565
 8001af4:	2355      	movs	r3, #85	@ 0x55
 8001af6:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001af8:	463b      	mov	r3, r7
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <ILI9341_SendData>

    // Frame Rate Control
    ILI9341_SendCommand(0xB1);
 8001b02:	20b1      	movs	r0, #177	@ 0xb1
 8001b04:	f7ff ff0a 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x18;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	703b      	strb	r3, [r7, #0]
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001b10:	463b      	mov	r3, r7
 8001b12:	2102      	movs	r1, #2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff27 	bl	8001968 <ILI9341_SendData>

    // Display Function Control
    ILI9341_SendCommand(0xB6);
 8001b1a:	20b6      	movs	r0, #182	@ 0xb6
 8001b1c:	f7ff fefe 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x08; data[1] = 0x82; data[2] = 0x27;
 8001b20:	2308      	movs	r3, #8
 8001b22:	703b      	strb	r3, [r7, #0]
 8001b24:	2382      	movs	r3, #130	@ 0x82
 8001b26:	707b      	strb	r3, [r7, #1]
 8001b28:	2327      	movs	r3, #39	@ 0x27
 8001b2a:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff19 	bl	8001968 <ILI9341_SendData>

    // Exit Sleep Mode
    ILI9341_SendCommand(0x11);
 8001b36:	2011      	movs	r0, #17
 8001b38:	f7ff fef0 	bl	800191c <ILI9341_SendCommand>
    HAL_Delay(120);
 8001b3c:	2078      	movs	r0, #120	@ 0x78
 8001b3e:	f000 fff5 	bl	8002b2c <HAL_Delay>

    // Turn on Display
    ILI9341_SendCommand(0x29);
 8001b42:	2029      	movs	r0, #41	@ 0x29
 8001b44:	f7ff feea 	bl	800191c <ILI9341_SendCommand>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020800 	.word	0x40020800

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b58:	f000 ff76 	bl	8002a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5c:	f000 f814 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b60:	f000 f95e 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b64:	f000 f934 	bl	8001dd0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b68:	f000 f8de 	bl	8001d28 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001b6c:	f000 f8a4 	bl	8001cb8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001b70:	f000 f874 	bl	8001c5c <MX_I2C1_Init>
  MX_FATFS_Init();
 8001b74:	f004 f8c0 	bl	8005cf8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8001b78:	f000 f900 	bl	8001d7c <MX_USART2_UART_Init>
  ILI9341_Init();
 8001b7c:	f7ff ff1c 	bl	80019b8 <ILI9341_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 8001b80:	f000 fad6 	bl	8002130 <process_SD_card>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <main+0x30>

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	@ 0x50
 8001b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	2230      	movs	r2, #48	@ 0x30
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f008 f9b2 	bl	8009f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <SystemClock_Config+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <SystemClock_Config+0xd0>)
 8001bd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <SystemClock_Config+0xd0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be4:	2302      	movs	r3, #2
 8001be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be8:	2301      	movs	r3, #1
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bec:	2310      	movs	r3, #16
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001bfc:	23c0      	movs	r3, #192	@ 0xc0
 8001bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c04:	2308      	movs	r3, #8
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 ff39 	bl	8003a84 <HAL_RCC_OscConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c18:	f000 fb9a 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c20:	2302      	movs	r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2103      	movs	r1, #3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 f99a 	bl	8003f74 <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c46:	f000 fb83 	bl	8002350 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	@ 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <MX_I2C1_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c68:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <MX_I2C1_Init+0x58>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <MX_I2C1_Init+0x50>)
 8001c9a:	f001 fdaf 	bl	80037fc <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 fb54 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000021c 	.word	0x2000021c
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	000186a0 	.word	0x000186a0

08001cb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cbe:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <MX_SPI2_Init+0x6c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001ccc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cd0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001d06:	220a      	movs	r2, #10
 8001d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <MX_SPI2_Init+0x68>)
 8001d0c:	f002 fb52 	bl	80043b4 <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001d16:	f000 fb1b 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000270 	.word	0x20000270
 8001d24:	40003800 	.word	0x40003800

08001d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <MX_USART1_UART_Init+0x50>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d60:	f002 ffca 	bl	8004cf8 <HAL_HalfDuplex_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d6a:	f000 faf1 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002c8 	.word	0x200002c8
 8001d78:	40011000 	.word	0x40011000

08001d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <MX_USART2_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001db4:	f002 ff50 	bl	8004c58 <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 fac7 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000310 	.word	0x20000310
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_DMA_Init+0x4c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <MX_DMA_Init+0x4c>)
 8001de0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <MX_DMA_Init+0x4c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	203a      	movs	r0, #58	@ 0x3a
 8001df8:	f000 ff97 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dfc:	203a      	movs	r0, #58	@ 0x3a
 8001dfe:	f000 ffb0 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2046      	movs	r0, #70	@ 0x46
 8001e08:	f000 ff8f 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e0c:	2046      	movs	r0, #70	@ 0x46
 8001e0e:	f000 ffa8 	bl	8002d62 <HAL_NVIC_EnableIRQ>

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4bae      	ldr	r3, [pc, #696]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4aad      	ldr	r2, [pc, #692]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4bab      	ldr	r3, [pc, #684]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4ba7      	ldr	r3, [pc, #668]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4aa6      	ldr	r2, [pc, #664]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4ba4      	ldr	r3, [pc, #656]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4ba0      	ldr	r3, [pc, #640]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a9f      	ldr	r2, [pc, #636]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b9d      	ldr	r3, [pc, #628]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b99      	ldr	r3, [pc, #612]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a98      	ldr	r2, [pc, #608]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b96      	ldr	r3, [pc, #600]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b92      	ldr	r3, [pc, #584]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a91      	ldr	r2, [pc, #580]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a8a      	ldr	r2, [pc, #552]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b88      	ldr	r3, [pc, #544]	@ (80020f4 <MX_GPIO_Init+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	4885      	ldr	r0, [pc, #532]	@ (80020f8 <MX_GPIO_Init+0x2d8>)
 8001ee4:	f001 fc58 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2101      	movs	r1, #1
 8001eec:	4883      	ldr	r0, [pc, #524]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 8001eee:	f001 fc53 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001ef8:	4881      	ldr	r0, [pc, #516]	@ (8002100 <MX_GPIO_Init+0x2e0>)
 8001efa:	f001 fc4d 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8001efe:	2200      	movs	r2, #0
 8001f00:	f24f 2110 	movw	r1, #61968	@ 0xf210
 8001f04:	487f      	ldr	r0, [pc, #508]	@ (8002104 <MX_GPIO_Init+0x2e4>)
 8001f06:	f001 fc47 	bl	8003798 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	487b      	ldr	r0, [pc, #492]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 8001f10:	f001 fc42 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f1a:	487b      	ldr	r0, [pc, #492]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 8001f1c:	f001 fc3c 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f20:	2304      	movs	r3, #4
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4871      	ldr	r0, [pc, #452]	@ (80020f8 <MX_GPIO_Init+0x2d8>)
 8001f34:	f001 faac 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	486a      	ldr	r0, [pc, #424]	@ (80020f8 <MX_GPIO_Init+0x2d8>)
 8001f50:	f001 fa9e 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001f54:	2332      	movs	r3, #50	@ 0x32
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f58:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4863      	ldr	r0, [pc, #396]	@ (80020f8 <MX_GPIO_Init+0x2d8>)
 8001f6a:	f001 fa91 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 8001f6e:	2381      	movs	r3, #129	@ 0x81
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	485d      	ldr	r0, [pc, #372]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 8001f86:	f001 fa83 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4855      	ldr	r0, [pc, #340]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 8001fa6:	f001 fa73 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4852      	ldr	r0, [pc, #328]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 8001fc0:	f001 fa66 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fd4:	2306      	movs	r3, #6
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	484a      	ldr	r0, [pc, #296]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 8001fe0:	f001 fa56 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fe4:	23e0      	movs	r3, #224	@ 0xe0
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4842      	ldr	r0, [pc, #264]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 8002000:	f001 fa46 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002004:	2320      	movs	r3, #32
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4839      	ldr	r0, [pc, #228]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 8002018:	f001 fa3a 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800201c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4832      	ldr	r0, [pc, #200]	@ (8002100 <MX_GPIO_Init+0x2e0>)
 8002036:	f001 fa2b 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 800203a:	f24f 2310 	movw	r3, #61968	@ 0xf210
 800203e:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	482c      	ldr	r0, [pc, #176]	@ (8002104 <MX_GPIO_Init+0x2e4>)
 8002054:	f001 fa1c 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4826      	ldr	r0, [pc, #152]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 800206e:	f001 fa0f 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	481f      	ldr	r0, [pc, #124]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 800208c:	f001 fa00 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002090:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020a2:	230a      	movs	r3, #10
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4816      	ldr	r0, [pc, #88]	@ (8002108 <MX_GPIO_Init+0x2e8>)
 80020ae:	f001 f9ef 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80020b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c4:	2306      	movs	r3, #6
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	480b      	ldr	r0, [pc, #44]	@ (80020fc <MX_GPIO_Init+0x2dc>)
 80020d0:	f001 f9de 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80020d4:	2320      	movs	r3, #32
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	@ (8002104 <MX_GPIO_Init+0x2e4>)
 80020e8:	f001 f9d2 	bl	8003490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	@ 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020400 	.word	0x40020400
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40020000 	.word	0x40020000

0800210c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002114:	1d39      	adds	r1, r7, #4
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	2201      	movs	r2, #1
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <__io_putchar+0x20>)
 800211e:	f002 fe43 	bl	8004da8 <HAL_UART_Transmit>
  return ch;
 8002122:	687b      	ldr	r3, [r7, #4]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000310 	.word	0x20000310

08002130 <process_SD_card>:
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */
void process_SD_card( void )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800213a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800213e:	3b04      	subs	r3, #4
 8002140:	2201      	movs	r2, #1
 8002142:	4976      	ldr	r1, [pc, #472]	@ (800231c <process_SD_card+0x1ec>)
 8002144:	4618      	mov	r0, r3
 8002146:	f006 f81f 	bl	8008188 <f_mount>
 800214a:	4603      	mov	r3, r0
 800214c:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8002150:	f102 021f 	add.w	r2, r2, #31
 8002154:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8002156:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800215a:	f103 031f 	add.w	r3, r3, #31
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 8002164:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002168:	f103 031f 	add.w	r3, r3, #31
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	486b      	ldr	r0, [pc, #428]	@ (8002320 <process_SD_card+0x1f0>)
 8002172:	f007 fd7d 	bl	8009c70 <iprintf>
      break;
 8002176:	e0c2      	b.n	80022fe <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8002178:	486a      	ldr	r0, [pc, #424]	@ (8002324 <process_SD_card+0x1f4>)
 800217a:	f007 fde1 	bl	8009d40 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 800217e:	f107 0220 	add.w	r2, r7, #32
 8002182:	3a1c      	subs	r2, #28
 8002184:	f107 0320 	add.w	r3, r7, #32
 8002188:	3b20      	subs	r3, #32
 800218a:	4619      	mov	r1, r3
 800218c:	4863      	ldr	r0, [pc, #396]	@ (800231c <process_SD_card+0x1ec>)
 800218e:	f006 fda4 	bl	8008cda <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002192:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002196:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	3b02      	subs	r3, #2
 800219e:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80021a2:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 80021a6:	8952      	ldrh	r2, [r2, #10]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9b1 	bl	8000514 <__aeabi_ui2d>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <process_SD_card+0x1f8>)
 80021b8:	f7fe fa26 	bl	8000608 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fcf8 	bl	8000bb8 <__aeabi_d2uiz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80021ce:	f102 0218 	add.w	r2, r2, #24
 80021d2:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80021d4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80021d8:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80021dc:	895b      	ldrh	r3, [r3, #10]
 80021de:	461a      	mov	r2, r3
 80021e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80021e4:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f991 	bl	8000514 <__aeabi_ui2d>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <process_SD_card+0x1f8>)
 80021f8:	f7fe fa06 	bl	8000608 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fcd8 	bl	8000bb8 <__aeabi_d2uiz>
 8002208:	4603      	mov	r3, r0
 800220a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800220e:	f102 0214 	add.w	r2, r2, #20
 8002212:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8002214:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002218:	f103 0314 	add.w	r3, r3, #20
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002222:	f103 0318 	add.w	r3, r3, #24
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	4840      	ldr	r0, [pc, #256]	@ (800232c <process_SD_card+0x1fc>)
 800222a:	f007 fd21 	bl	8009c70 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800222e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002232:	3b34      	subs	r3, #52	@ 0x34
 8002234:	220b      	movs	r2, #11
 8002236:	493e      	ldr	r1, [pc, #248]	@ (8002330 <process_SD_card+0x200>)
 8002238:	4618      	mov	r0, r3
 800223a:	f005 ffeb 	bl	8008214 <f_open>
 800223e:	4603      	mov	r3, r0
 8002240:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8002244:	f102 021f 	add.w	r2, r2, #31
 8002248:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 800224a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800224e:	f103 031f 	add.w	r3, r3, #31
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8002258:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800225c:	f103 031f 	add.w	r3, r3, #31
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4833      	ldr	r0, [pc, #204]	@ (8002334 <process_SD_card+0x204>)
 8002266:	f007 fd03 	bl	8009c70 <iprintf>
      break;
 800226a:	e048      	b.n	80022fe <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 800226c:	4832      	ldr	r0, [pc, #200]	@ (8002338 <process_SD_card+0x208>)
 800226e:	f007 fd67 	bl	8009d40 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 8002272:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002276:	3b34      	subs	r3, #52	@ 0x34
 8002278:	4619      	mov	r1, r3
 800227a:	4830      	ldr	r0, [pc, #192]	@ (800233c <process_SD_card+0x20c>)
 800227c:	f006 fe97 	bl	8008fae <f_puts>

    //close your file
    f_close(&fil);
 8002280:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002284:	3b34      	subs	r3, #52	@ 0x34
 8002286:	4618      	mov	r0, r3
 8002288:	f006 fcfd 	bl	8008c86 <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 800228c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002290:	3b34      	subs	r3, #52	@ 0x34
 8002292:	2201      	movs	r2, #1
 8002294:	4926      	ldr	r1, [pc, #152]	@ (8002330 <process_SD_card+0x200>)
 8002296:	4618      	mov	r0, r3
 8002298:	f005 ffbc 	bl	8008214 <f_open>
 800229c:	4603      	mov	r3, r0
 800229e:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80022a2:	f102 021f 	add.w	r2, r2, #31
 80022a6:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80022a8:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80022ac:	f103 031f 	add.w	r3, r3, #31
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 80022b6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80022ba:	f103 031f 	add.w	r3, r3, #31
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	481f      	ldr	r0, [pc, #124]	@ (8002340 <process_SD_card+0x210>)
 80022c4:	f007 fcd4 	bl	8009c70 <iprintf>
      break;
 80022c8:	e019      	b.n	80022fe <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 80022ca:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80022ce:	3a34      	subs	r2, #52	@ 0x34
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	3b18      	subs	r3, #24
 80022d6:	2164      	movs	r1, #100	@ 0x64
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 fdb3 	bl	8008e44 <f_gets>

    printf("Read Data : %s\n", buf);
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	3b18      	subs	r3, #24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4817      	ldr	r0, [pc, #92]	@ (8002344 <process_SD_card+0x214>)
 80022e8:	f007 fcc2 	bl	8009c70 <iprintf>

    //close your file
    f_close(&fil);
 80022ec:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80022f0:	3b34      	subs	r3, #52	@ 0x34
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 fcc7 	bl	8008c86 <f_close>
    printf("Closing File!!!\r\n");
 80022f8:	4813      	ldr	r0, [pc, #76]	@ (8002348 <process_SD_card+0x218>)
 80022fa:	f007 fd21 	bl	8009d40 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	4906      	ldr	r1, [pc, #24]	@ (800231c <process_SD_card+0x1ec>)
 8002302:	2000      	movs	r0, #0
 8002304:	f005 ff40 	bl	8008188 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8002308:	4810      	ldr	r0, [pc, #64]	@ (800234c <process_SD_card+0x21c>)
 800230a:	f007 fd19 	bl	8009d40 <puts>
}
 800230e:	bf00      	nop
 8002310:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	0800bc38 	.word	0x0800bc38
 8002320:	0800bc3c 	.word	0x0800bc3c
 8002324:	0800bc58 	.word	0x0800bc58
 8002328:	3fe00000 	.word	0x3fe00000
 800232c:	0800bc7c 	.word	0x0800bc7c
 8002330:	0800bcac 	.word	0x0800bcac
 8002334:	0800bcbc 	.word	0x0800bcbc
 8002338:	0800bce0 	.word	0x0800bce0
 800233c:	0800bcf4 	.word	0x0800bcf4
 8002340:	0800bd0c 	.word	0x0800bd0c
 8002344:	0800bd28 	.word	0x0800bd28
 8002348:	0800bd38 	.word	0x0800bd38
 800234c:	0800bd4c 	.word	0x0800bd4c

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <EXTI15_10_IRQHandler>:
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8002360:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <EXTI15_10_IRQHandler+0x48>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 800236c:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <EXTI15_10_IRQHandler+0x48>)
 800236e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002372:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <EXTI15_10_IRQHandler+0x4c>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 800237a:	480c      	ldr	r0, [pc, #48]	@ (80023ac <EXTI15_10_IRQHandler+0x50>)
 800237c:	f000 fb1a 	bl	80029b4 <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <EXTI15_10_IRQHandler+0x48>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <EXTI15_10_IRQHandler+0x48>)
 800238e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002392:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <EXTI15_10_IRQHandler+0x54>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 800239a:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <EXTI15_10_IRQHandler+0x58>)
 800239c:	f000 fb0a 	bl	80029b4 <uart_send_string>
    }
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013c00 	.word	0x40013c00
 80023a8:	20000418 	.word	0x20000418
 80023ac:	0800bd70 	.word	0x0800bd70
 80023b0:	20000419 	.word	0x20000419
 80023b4:	0800bd8c 	.word	0x0800bd8c

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023f6:	2007      	movs	r0, #7
 80023f8:	f000 fc8c 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_I2C_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12c      	bne.n	8002484 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002446:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244c:	2312      	movs	r3, #18
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002458:	2304      	movs	r3, #4
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	480c      	ldr	r0, [pc, #48]	@ (8002494 <HAL_I2C_MspInit+0x8c>)
 8002464:	f001 f814 	bl	8003490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002476:	6413      	str	r3, [r2, #64]	@ 0x40
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	@ 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40005400 	.word	0x40005400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020400 	.word	0x40020400

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_SPI_MspInit+0x84>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d12c      	bne.n	8002514 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002504:	2305      	movs	r3, #5
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4805      	ldr	r0, [pc, #20]	@ (8002524 <HAL_SPI_MspInit+0x8c>)
 8002510:	f000 ffbe 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	@ 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40003800 	.word	0x40003800
 8002520:	40023800 	.word	0x40023800
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	@ 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_UART_MspInit+0x1b4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	f040 8092 	bne.w	8002670 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 8002556:	f043 0310 	orr.w	r3, r3, #16
 800255a:	6453      	str	r3, [r2, #68]	@ 0x44
 800255c:	4b60      	ldr	r3, [pc, #384]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	4b5c      	ldr	r3, [pc, #368]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	4a5b      	ldr	r2, [pc, #364]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6313      	str	r3, [r2, #48]	@ 0x30
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258a:	2312      	movs	r3, #18
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002596:	2307      	movs	r3, #7
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	4850      	ldr	r0, [pc, #320]	@ (80026e4 <HAL_UART_MspInit+0x1bc>)
 80025a2:	f000 ff75 	bl	8003490 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025a6:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025a8:	4a50      	ldr	r2, [pc, #320]	@ (80026ec <HAL_UART_MspInit+0x1c4>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025ac:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b4:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025c0:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c8:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ce:	4b46      	ldr	r3, [pc, #280]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025d4:	4b44      	ldr	r3, [pc, #272]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025da:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e0:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025e6:	4840      	ldr	r0, [pc, #256]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025e8:	f000 fbd6 	bl	8002d98 <HAL_DMA_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025f2:	f7ff fead 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a3b      	ldr	r2, [pc, #236]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025fc:	4a3a      	ldr	r2, [pc, #232]	@ (80026e8 <HAL_UART_MspInit+0x1c0>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002604:	4a3b      	ldr	r2, [pc, #236]	@ (80026f4 <HAL_UART_MspInit+0x1cc>)
 8002606:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002608:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 800260a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800260e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002610:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b34      	ldr	r3, [pc, #208]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 800261e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002622:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262a:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002630:	4b2f      	ldr	r3, [pc, #188]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002636:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263c:	4b2c      	ldr	r3, [pc, #176]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002642:	482b      	ldr	r0, [pc, #172]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002644:	f000 fba8 	bl	8002d98 <HAL_DMA_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800264e:	f7ff fe7f 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a26      	ldr	r2, [pc, #152]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38
 8002658:	4a25      	ldr	r2, [pc, #148]	@ (80026f0 <HAL_UART_MspInit+0x1c8>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2025      	movs	r0, #37	@ 0x25
 8002664:	f000 fb61 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002668:	2025      	movs	r0, #37	@ 0x25
 800266a:	f000 fb7a 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800266e:	e030      	b.n	80026d2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a20      	ldr	r2, [pc, #128]	@ (80026f8 <HAL_UART_MspInit+0x1d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12b      	bne.n	80026d2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 8002684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002688:	6413      	str	r3, [r2, #64]	@ 0x40
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a10      	ldr	r2, [pc, #64]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <HAL_UART_MspInit+0x1b8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026b2:	230c      	movs	r3, #12
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c2:	2307      	movs	r3, #7
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <HAL_UART_MspInit+0x1bc>)
 80026ce:	f000 fedf 	bl	8003490 <HAL_GPIO_Init>
}
 80026d2:	bf00      	nop
 80026d4:	3730      	adds	r7, #48	@ 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	20000358 	.word	0x20000358
 80026ec:	40026440 	.word	0x40026440
 80026f0:	200003b8 	.word	0x200003b8
 80026f4:	400264b8 	.word	0x400264b8
 80026f8:	40004400 	.word	0x40004400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <NMI_Handler+0x4>

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <MemManage_Handler+0x4>

08002714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <UsageFault_Handler+0x4>

08002724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <SysTick_Handler+0x34>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <SysTick_Handler+0x18>
	  Timer1--;
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <SysTick_Handler+0x34>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <SysTick_Handler+0x34>)
 8002766:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <SysTick_Handler+0x38>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <SysTick_Handler+0x2c>
	  Timer2--;
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <SysTick_Handler+0x38>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <SysTick_Handler+0x38>)
 800277a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f9b6 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000020c 	.word	0x2000020c
 8002788:	2000020e 	.word	0x2000020e

0800278c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <USART1_IRQHandler+0x10>)
 8002792:	f002 fb95 	bl	8004ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200002c8 	.word	0x200002c8

080027a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <DMA2_Stream2_IRQHandler+0x10>)
 80027a6:	f000 fc37 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000358 	.word	0x20000358

080027b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <DMA2_Stream7_IRQHandler+0x10>)
 80027ba:	f000 fc2d 	bl	8003018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200003b8 	.word	0x200003b8

080027c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_kill>:

int _kill(int pid, int sig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e2:	f007 fbdf 	bl	8009fa4 <__errno>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2216      	movs	r2, #22
 80027ea:	601a      	str	r2, [r3, #0]
  return -1;
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_exit>:

void _exit (int status)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffe7 	bl	80027d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <_exit+0x12>

0800280e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e00a      	b.n	8002836 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002820:	f3af 8000 	nop.w
 8002824:	4601      	mov	r1, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf0      	blt.n	8002820 <_read+0x12>
  }

  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e009      	b.n	800286e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	60ba      	str	r2, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fc52 	bl	800210c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	dbf1      	blt.n	800285a <_write+0x12>
  }
  return len;
 8002876:	687b      	ldr	r3, [r7, #4]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_close>:

int _close(int file)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	605a      	str	r2, [r3, #4]
  return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_isatty>:

int _isatty(int file)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f0:	4a14      	ldr	r2, [pc, #80]	@ (8002944 <_sbrk+0x5c>)
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <_sbrk+0x60>)
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <_sbrk+0x64>)
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <_sbrk+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d207      	bcs.n	8002928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002918:	f007 fb44 	bl	8009fa4 <__errno>
 800291c:	4603      	mov	r3, r0
 800291e:	220c      	movs	r2, #12
 8002920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e009      	b.n	800293c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002928:	4b08      	ldr	r3, [pc, #32]	@ (800294c <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	4a05      	ldr	r2, [pc, #20]	@ (800294c <_sbrk+0x64>)
 8002938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20020000 	.word	0x20020000
 8002948:	00000400 	.word	0x00000400
 800294c:	2000041c 	.word	0x2000041c
 8002950:	200007b0 	.word	0x200007b0

08002954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <SystemInit+0x20>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <SystemInit+0x20>)
 8002960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <USART2_IRQHandler>:
// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
}

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 800297e:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <USART2_IRQHandler+0x38>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <USART2_IRQHandler+0x38>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 8002990:	bf00      	nop
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <USART2_IRQHandler+0x38>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f9      	beq.n	8002992 <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 800299e:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <USART2_IRQHandler+0x38>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	6053      	str	r3, [r2, #4]
    }
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40004400 	.word	0x40004400

080029b4 <uart_send_string>:

void uart_send_string(const char *str) {
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    while (*str) {
 80029bc:	e00c      	b.n	80029d8 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 80029be:	bf00      	nop
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <uart_send_string+0x3c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f9      	beq.n	80029c0 <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <uart_send_string+0x3c>)
 80029d6:	605a      	str	r2, [r3, #4]
    while (*str) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <uart_send_string+0xa>
    }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40004400 	.word	0x40004400

080029f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029f8:	f7ff ffac 	bl	8002954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029fc:	480c      	ldr	r0, [pc, #48]	@ (8002a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029fe:	490d      	ldr	r1, [pc, #52]	@ (8002a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a00:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a04:	e002      	b.n	8002a0c <LoopCopyDataInit>

08002a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0a:	3304      	adds	r3, #4

08002a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a10:	d3f9      	bcc.n	8002a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a12:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a14:	4c0a      	ldr	r4, [pc, #40]	@ (8002a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a18:	e001      	b.n	8002a1e <LoopFillZerobss>

08002a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a1c:	3204      	adds	r2, #4

08002a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a20:	d3fb      	bcc.n	8002a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a22:	f007 fac5 	bl	8009fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a26:	f7ff f895 	bl	8001b54 <main>
  bx  lr    
 8002a2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a34:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a38:	0800c5d4 	.word	0x0800c5d4
  ldr r2, =_sbss
 8002a3c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a40:	200007ac 	.word	0x200007ac

08002a44 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <DMA1_Stream0_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_Init+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <HAL_Init+0x40>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <HAL_Init+0x40>)
 8002a5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_Init+0x40>)
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f94f 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7ff fc9c 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f967 	bl	8002d7e <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f92f 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	@ (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	2000000c 	.word	0x2000000c
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_IncTick+0x20>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_IncTick+0x24>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <HAL_IncTick+0x24>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	20000420 	.word	0x20000420

08002b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <HAL_GetTick+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000420 	.word	0x20000420

08002b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff ffee 	bl	8002b14 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d005      	beq.n	8002b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_Delay+0x44>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b52:	bf00      	nop
 8002b54:	f7ff ffde 	bl	8002b14 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f7      	bhi.n	8002b54 <HAL_Delay+0x28>
  {
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000000c 	.word	0x2000000c

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff29 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff3e 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff31 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff feb6 	bl	8002b14 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e099      	b.n	8002ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd4:	e00f      	b.n	8002df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd6:	f7ff fe9d 	bl	8002b14 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d908      	bls.n	8002df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e078      	b.n	8002ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e8      	bne.n	8002dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ef0 <HAL_DMA_Init+0x158>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d117      	bne.n	8002eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa7b 	bl	8003398 <DMA_CheckFifoParam>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e016      	b.n	8002ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa32 	bl	800332c <DMA_CalcBaseAndBitshift>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	223f      	movs	r2, #63	@ 0x3f
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f010803f 	.word	0xf010803f

08002ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f02:	f7ff fe07 	bl	8002b14 <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d008      	beq.n	8002f26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e052      	b.n	8002fcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0216 	bic.w	r2, r2, #22
 8002f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_DMA_Abort+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f76:	e013      	b.n	8002fa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f78:	f7ff fdcc 	bl	8002b14 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d90c      	bls.n	8002fa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e015      	b.n	8002fcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e4      	bne.n	8002f78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	223f      	movs	r2, #63	@ 0x3f
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00c      	b.n	800300c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003024:	4b8e      	ldr	r3, [pc, #568]	@ (8003260 <HAL_DMA_IRQHandler+0x248>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8e      	ldr	r2, [pc, #568]	@ (8003264 <HAL_DMA_IRQHandler+0x24c>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	2208      	movs	r2, #8
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01a      	beq.n	8003084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	2208      	movs	r2, #8
 8003072:	409a      	lsls	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	2201      	movs	r2, #1
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	2201      	movs	r2, #1
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f043 0202 	orr.w	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	2204      	movs	r2, #4
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	2204      	movs	r2, #4
 80030de:	409a      	lsls	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	2210      	movs	r2, #16
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d043      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03c      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2210      	movs	r2, #16
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d018      	beq.n	800315a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d024      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e01f      	b.n	8003188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e016      	b.n	8003188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0208 	bic.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	2220      	movs	r2, #32
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 808f 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8087 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2220      	movs	r2, #32
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d136      	bne.n	8003230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x1da>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d07e      	beq.n	8003324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
        }
        return;
 800322e:	e079      	b.n	8003324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01d      	beq.n	800327a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10d      	bne.n	8003268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	2b00      	cmp	r3, #0
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
 800325c:	e02c      	b.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
 800325e:	bf00      	nop
 8003260:	20000004 	.word	0x20000004
 8003264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
 8003278:	e01e      	b.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10f      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0210 	bic.w	r2, r2, #16
 8003296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d032      	beq.n	8003326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2205      	movs	r2, #5
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d307      	bcc.n	8003300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f2      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x2cc>
 80032fe:	e000      	b.n	8003302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	e000      	b.n	8003326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003324:	bf00      	nop
    }
  }
}
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3b10      	subs	r3, #16
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <DMA_CalcBaseAndBitshift+0x64>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003346:	4a13      	ldr	r2, [pc, #76]	@ (8003394 <DMA_CalcBaseAndBitshift+0x68>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d909      	bls.n	800336e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	1d1a      	adds	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	659a      	str	r2, [r3, #88]	@ 0x58
 800336c:	e007      	b.n	800337e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	aaaaaaab 	.word	0xaaaaaaab
 8003394:	0800be08 	.word	0x0800be08

08003398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11f      	bne.n	80033f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d856      	bhi.n	8003466 <DMA_CheckFifoParam+0xce>
 80033b8:	a201      	add	r2, pc, #4	@ (adr r2, 80033c0 <DMA_CheckFifoParam+0x28>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e3 	.word	0x080033e3
 80033c8:	080033d1 	.word	0x080033d1
 80033cc:	08003467 	.word	0x08003467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d046      	beq.n	800346a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e043      	b.n	800346a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033ea:	d140      	bne.n	800346e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f0:	e03d      	b.n	800346e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fa:	d121      	bne.n	8003440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d837      	bhi.n	8003472 <DMA_CheckFifoParam+0xda>
 8003402:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <DMA_CheckFifoParam+0x70>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	08003419 	.word	0x08003419
 800340c:	0800341f 	.word	0x0800341f
 8003410:	08003419 	.word	0x08003419
 8003414:	08003431 	.word	0x08003431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e030      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d025      	beq.n	8003476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342e:	e022      	b.n	8003476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003438:	d11f      	bne.n	800347a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800343e:	e01c      	b.n	800347a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d903      	bls.n	800344e <DMA_CheckFifoParam+0xb6>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d003      	beq.n	8003454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800344c:	e018      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      break;
 8003452:	e015      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      break;
 8003464:	e00b      	b.n	800347e <DMA_CheckFifoParam+0xe6>
      break;
 8003466:	bf00      	nop
 8003468:	e00a      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800346a:	bf00      	nop
 800346c:	e008      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;   
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
    }
  } 
  
  return status; 
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	@ 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	e159      	b.n	8003760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	f040 8148 	bne.w	800375a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d005      	beq.n	80034e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d130      	bne.n	8003544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 0201 	and.w	r2, r3, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b03      	cmp	r3, #3
 800354e:	d017      	beq.n	8003580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d123      	bne.n	80035d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	08da      	lsrs	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3208      	adds	r2, #8
 8003594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	08da      	lsrs	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3208      	adds	r2, #8
 80035ce:	69b9      	ldr	r1, [r7, #24]
 80035d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0203 	and.w	r2, r3, #3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a2 	beq.w	800375a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b57      	ldr	r3, [pc, #348]	@ (8003778 <HAL_GPIO_Init+0x2e8>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	4a56      	ldr	r2, [pc, #344]	@ (8003778 <HAL_GPIO_Init+0x2e8>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003624:	6453      	str	r3, [r2, #68]	@ 0x44
 8003626:	4b54      	ldr	r3, [pc, #336]	@ (8003778 <HAL_GPIO_Init+0x2e8>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003632:	4a52      	ldr	r2, [pc, #328]	@ (800377c <HAL_GPIO_Init+0x2ec>)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	220f      	movs	r2, #15
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_GPIO_Init+0x2f0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x202>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a48      	ldr	r2, [pc, #288]	@ (8003784 <HAL_GPIO_Init+0x2f4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x1fe>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a47      	ldr	r2, [pc, #284]	@ (8003788 <HAL_GPIO_Init+0x2f8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x1fa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a46      	ldr	r2, [pc, #280]	@ (800378c <HAL_GPIO_Init+0x2fc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x1f6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a45      	ldr	r2, [pc, #276]	@ (8003790 <HAL_GPIO_Init+0x300>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x1f2>
 800367e:	2304      	movs	r3, #4
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x204>
 8003682:	2307      	movs	r3, #7
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x204>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x204>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x204>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x204>
 8003692:	2300      	movs	r3, #0
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	@ (800377c <HAL_GPIO_Init+0x2ec>)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b38      	ldr	r3, [pc, #224]	@ (8003794 <HAL_GPIO_Init+0x304>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003794 <HAL_GPIO_Init+0x304>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <HAL_GPIO_Init+0x304>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003700:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <HAL_GPIO_Init+0x304>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003706:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <HAL_GPIO_Init+0x304>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372a:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <HAL_GPIO_Init+0x304>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003730:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <HAL_GPIO_Init+0x304>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003754:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <HAL_GPIO_Init+0x304>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f aea2 	bls.w	80034ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	@ 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40013c00 	.word	0x40013c00

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e2:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f858 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e12b      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe fdf0 	bl	8002408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	@ 0x24
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800384e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800385e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003860:	f000 fd80 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8003864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a81      	ldr	r2, [pc, #516]	@ (8003a70 <HAL_I2C_Init+0x274>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d807      	bhi.n	8003880 <HAL_I2C_Init+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a80      	ldr	r2, [pc, #512]	@ (8003a74 <HAL_I2C_Init+0x278>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e006      	b.n	800388e <HAL_I2C_Init+0x92>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a7d      	ldr	r2, [pc, #500]	@ (8003a78 <HAL_I2C_Init+0x27c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0e7      	b.n	8003a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a78      	ldr	r2, [pc, #480]	@ (8003a7c <HAL_I2C_Init+0x280>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a70 <HAL_I2C_Init+0x274>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d802      	bhi.n	80038d0 <HAL_I2C_Init+0xd4>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3301      	adds	r3, #1
 80038ce:	e009      	b.n	80038e4 <HAL_I2C_Init+0xe8>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	4a69      	ldr	r2, [pc, #420]	@ (8003a80 <HAL_I2C_Init+0x284>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	099b      	lsrs	r3, r3, #6
 80038e2:	3301      	adds	r3, #1
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	495c      	ldr	r1, [pc, #368]	@ (8003a70 <HAL_I2C_Init+0x274>)
 8003900:	428b      	cmp	r3, r1
 8003902:	d819      	bhi.n	8003938 <HAL_I2C_Init+0x13c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e59      	subs	r1, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003918:	400b      	ands	r3, r1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_I2C_Init+0x138>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1e59      	subs	r1, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fbb1 f3f3 	udiv	r3, r1, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003932:	e051      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003934:	2304      	movs	r3, #4
 8003936:	e04f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <HAL_I2C_Init+0x168>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	440b      	add	r3, r1
 800394e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003952:	3301      	adds	r3, #1
 8003954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e012      	b.n	800398a <HAL_I2C_Init+0x18e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x196>
 800398e:	2301      	movs	r3, #1
 8003990:	e022      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <HAL_I2C_Init+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1e58      	subs	r0, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	440b      	add	r3, r1
 80039a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b6:	e00f      	b.n	80039d8 <HAL_I2C_Init+0x1dc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	6809      	ldr	r1, [r1, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6911      	ldr	r1, [r2, #16]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	000186a0 	.word	0x000186a0
 8003a74:	001e847f 	.word	0x001e847f
 8003a78:	003d08ff 	.word	0x003d08ff
 8003a7c:	431bde83 	.word	0x431bde83
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e267      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d075      	beq.n	8003b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aa2:	4b88      	ldr	r3, [pc, #544]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d00c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aae:	4b85      	ldr	r3, [pc, #532]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d112      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aba:	4b82      	ldr	r3, [pc, #520]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05b      	beq.n	8003b8c <HAL_RCC_OscConfig+0x108>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d157      	bne.n	8003b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e242      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x74>
 8003aea:	4b76      	ldr	r3, [pc, #472]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a75      	ldr	r2, [pc, #468]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e01d      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x98>
 8003b02:	4b70      	ldr	r3, [pc, #448]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6c      	ldr	r2, [pc, #432]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003b1c:	4b69      	ldr	r3, [pc, #420]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a68      	ldr	r2, [pc, #416]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe ffea 	bl	8002b14 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe ffe6 	bl	8002b14 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e207      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0xc0>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe ffd6 	bl	8002b14 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fe ffd2 	bl	8002b14 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1f3      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	4b51      	ldr	r3, [pc, #324]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0xe8>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b47      	ldr	r3, [pc, #284]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b44      	ldr	r3, [pc, #272]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c7      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4937      	ldr	r1, [pc, #220]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCC_OscConfig+0x244>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fe ff8b 	bl	8002b14 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fe ff87 	bl	8002b14 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1a8      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4925      	ldr	r1, [pc, #148]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <HAL_RCC_OscConfig+0x244>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe ff6a 	bl	8002b14 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fe ff66 	bl	8002b14 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e187      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_RCC_OscConfig+0x248>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe ff4a 	bl	8002b14 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fe ff46 	bl	8002b14 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e167      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x200>
 8003ca2:	e01b      	b.n	8003cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_RCC_OscConfig+0x248>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7fe ff33 	bl	8002b14 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	e00e      	b.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fe ff2f 	bl	8002b14 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d907      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e150      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b88      	ldr	r3, [pc, #544]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ea      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8097 	beq.w	8003e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b81      	ldr	r3, [pc, #516]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	4b77      	ldr	r3, [pc, #476]	@ (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d118      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d26:	4b74      	ldr	r3, [pc, #464]	@ (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a73      	ldr	r2, [pc, #460]	@ (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d32:	f7fe feef 	bl	8002b14 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fe feeb 	bl	8002b14 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e10c      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2ea>
 8003d60:	4b64      	ldr	r3, [pc, #400]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a63      	ldr	r2, [pc, #396]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCC_OscConfig+0x324>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x30c>
 8003d76:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d82:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0x324>
 8003d90:	4b58      	ldr	r3, [pc, #352]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a57      	ldr	r2, [pc, #348]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a54      	ldr	r2, [pc, #336]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	f023 0304 	bic.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe feb0 	bl	8002b14 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fe feac 	bl	8002b14 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0cb      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	4b49      	ldr	r3, [pc, #292]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ee      	beq.n	8003db8 <HAL_RCC_OscConfig+0x334>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fe9a 	bl	8002b14 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fe fe96 	bl	8002b14 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0b5      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ee      	bne.n	8003de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4a38      	ldr	r2, [pc, #224]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a1 	beq.w	8003f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e22:	4b34      	ldr	r3, [pc, #208]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d05c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d141      	bne.n	8003eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b31      	ldr	r3, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x478>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fe6a 	bl	8002b14 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fe66 	bl	8002b14 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e087      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	491b      	ldr	r1, [pc, #108]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x478>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fe fe3f 	bl	8002b14 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fe fe3b 	bl	8002b14 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e05c      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x416>
 8003eb8:	e054      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <HAL_RCC_OscConfig+0x478>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fe28 	bl	8002b14 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fe fe24 	bl	8002b14 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e045      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x444>
 8003ee6:	e03d      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e038      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCC_OscConfig+0x4ec>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d121      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d11a      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cc      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b68      	ldr	r3, [pc, #416]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d90c      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b65      	ldr	r3, [pc, #404]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b63      	ldr	r3, [pc, #396]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0b8      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc8:	4b59      	ldr	r3, [pc, #356]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe0:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a52      	ldr	r2, [pc, #328]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fec:	4b50      	ldr	r3, [pc, #320]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	494d      	ldr	r1, [pc, #308]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d044      	beq.n	8004094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d119      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d003      	beq.n	8004032 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b3f      	ldr	r3, [pc, #252]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e067      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004052:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 0203 	bic.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4934      	ldr	r1, [pc, #208]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004064:	f7fe fd56 	bl	8002b14 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fe fd52 	bl	8002b14 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 020c 	and.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d1eb      	bne.n	800406c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b25      	ldr	r3, [pc, #148]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d20c      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b22      	ldr	r3, [pc, #136]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b20      	ldr	r3, [pc, #128]	@ (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e032      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c8:	4b19      	ldr	r3, [pc, #100]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4916      	ldr	r1, [pc, #88]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e6:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	490e      	ldr	r1, [pc, #56]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fa:	f000 f821 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040fe:	4602      	mov	r2, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	490a      	ldr	r1, [pc, #40]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	5ccb      	ldrb	r3, [r1, r3]
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004116:	4b09      	ldr	r3, [pc, #36]	@ (800413c <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fcb6 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023c00 	.word	0x40023c00
 8004130:	40023800 	.word	0x40023800
 8004134:	0800bdf0 	.word	0x0800bdf0
 8004138:	20000004 	.word	0x20000004
 800413c:	20000008 	.word	0x20000008

08004140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b094      	sub	sp, #80	@ 0x50
 8004146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004158:	4b79      	ldr	r3, [pc, #484]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d00d      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x40>
 8004164:	2b08      	cmp	r3, #8
 8004166:	f200 80e1 	bhi.w	800432c <HAL_RCC_GetSysClockFreq+0x1ec>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x34>
 800416e:	2b04      	cmp	r3, #4
 8004170:	d003      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x3a>
 8004172:	e0db      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b73      	ldr	r3, [pc, #460]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x204>)
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004178:	e0db      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b73      	ldr	r3, [pc, #460]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x208>)
 800417c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800417e:	e0d8      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004180:	4b6f      	ldr	r3, [pc, #444]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004188:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418a:	4b6d      	ldr	r3, [pc, #436]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b6a      	ldr	r3, [pc, #424]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	2200      	movs	r2, #0
 800419e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041aa:	2300      	movs	r3, #0
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	0159      	lsls	r1, r3, #5
 80041c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c4:	0150      	lsls	r0, r2, #5
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4621      	mov	r1, r4
 80041cc:	1a51      	subs	r1, r2, r1
 80041ce:	6139      	str	r1, [r7, #16]
 80041d0:	4629      	mov	r1, r5
 80041d2:	eb63 0301 	sbc.w	r3, r3, r1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e4:	4659      	mov	r1, fp
 80041e6:	018b      	lsls	r3, r1, #6
 80041e8:	4651      	mov	r1, sl
 80041ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ee:	4651      	mov	r1, sl
 80041f0:	018a      	lsls	r2, r1, #6
 80041f2:	4651      	mov	r1, sl
 80041f4:	ebb2 0801 	subs.w	r8, r2, r1
 80041f8:	4659      	mov	r1, fp
 80041fa:	eb63 0901 	sbc.w	r9, r3, r1
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800420e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004212:	4690      	mov	r8, r2
 8004214:	4699      	mov	r9, r3
 8004216:	4623      	mov	r3, r4
 8004218:	eb18 0303 	adds.w	r3, r8, r3
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	462b      	mov	r3, r5
 8004220:	eb49 0303 	adc.w	r3, r9, r3
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004232:	4629      	mov	r1, r5
 8004234:	024b      	lsls	r3, r1, #9
 8004236:	4621      	mov	r1, r4
 8004238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800423c:	4621      	mov	r1, r4
 800423e:	024a      	lsls	r2, r1, #9
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004246:	2200      	movs	r2, #0
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004250:	f7fc fcd2 	bl	8000bf8 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800425c:	e058      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	4b38      	ldr	r3, [pc, #224]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	2200      	movs	r2, #0
 8004266:	4618      	mov	r0, r3
 8004268:	4611      	mov	r1, r2
 800426a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	f04f 0000 	mov.w	r0, #0
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	0159      	lsls	r1, r3, #5
 8004286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428a:	0150      	lsls	r0, r2, #5
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4641      	mov	r1, r8
 8004292:	ebb2 0a01 	subs.w	sl, r2, r1
 8004296:	4649      	mov	r1, r9
 8004298:	eb63 0b01 	sbc.w	fp, r3, r1
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b0:	ebb2 040a 	subs.w	r4, r2, sl
 80042b4:	eb63 050b 	sbc.w	r5, r3, fp
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	00eb      	lsls	r3, r5, #3
 80042c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c6:	00e2      	lsls	r2, r4, #3
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	18e3      	adds	r3, r4, r3
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	464b      	mov	r3, r9
 80042d4:	eb45 0303 	adc.w	r3, r5, r3
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042e6:	4629      	mov	r1, r5
 80042e8:	028b      	lsls	r3, r1, #10
 80042ea:	4621      	mov	r1, r4
 80042ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f0:	4621      	mov	r1, r4
 80042f2:	028a      	lsls	r2, r1, #10
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fa:	2200      	movs	r2, #0
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	61fa      	str	r2, [r7, #28]
 8004300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004304:	f7fc fc78 	bl	8000bf8 <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x200>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	3301      	adds	r3, #1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800432a:	e002      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x204>)
 800432e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004334:	4618      	mov	r0, r3
 8004336:	3750      	adds	r7, #80	@ 0x50
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	00f42400 	.word	0x00f42400
 8004348:	007a1200 	.word	0x007a1200

0800434c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004350:	4b03      	ldr	r3, [pc, #12]	@ (8004360 <HAL_RCC_GetHCLKFreq+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004368:	f7ff fff0 	bl	800434c <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0a9b      	lsrs	r3, r3, #10
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	@ (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	0800be00 	.word	0x0800be00

0800438c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004390:	f7ff ffdc 	bl	800434c <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0b5b      	lsrs	r3, r3, #13
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4903      	ldr	r1, [pc, #12]	@ (80043b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	0800be00 	.word	0x0800be00

080043b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07b      	b.n	80044be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d108      	bne.n	80043e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043d6:	d009      	beq.n	80043ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	61da      	str	r2, [r3, #28]
 80043de:	e005      	b.n	80043ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe f846 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	ea42 0103 	orr.w	r1, r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0104 	and.w	r1, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	f003 0210 	and.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d6:	f7fe fb1d 	bl	8002b14 <HAL_GetTick>
 80044da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e12a      	b.n	8004746 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Transmit+0x36>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e122      	b.n	8004746 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_SPI_Transmit+0x48>
 800450a:	2302      	movs	r3, #2
 800450c:	e11b      	b.n	8004746 <HAL_SPI_Transmit+0x280>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455c:	d10f      	bne.n	800457e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800456c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800457c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d007      	beq.n	800459c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800459a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a4:	d152      	bne.n	800464c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_Transmit+0xee>
 80045ae:	8b7b      	ldrh	r3, [r7, #26]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d145      	bne.n	8004640 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045d8:	e032      	b.n	8004640 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d112      	bne.n	800460e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800460c:	e018      	b.n	8004640 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800460e:	f7fe fa81 	bl	8002b14 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d803      	bhi.n	8004626 <HAL_SPI_Transmit+0x160>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d102      	bne.n	800462c <HAL_SPI_Transmit+0x166>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e082      	b.n	8004746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1c7      	bne.n	80045da <HAL_SPI_Transmit+0x114>
 800464a:	e053      	b.n	80046f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_SPI_Transmit+0x194>
 8004654:	8b7b      	ldrh	r3, [r7, #26]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d147      	bne.n	80046ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004680:	e033      	b.n	80046ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b02      	cmp	r3, #2
 800468e:	d113      	bne.n	80046b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046b6:	e018      	b.n	80046ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b8:	f7fe fa2c 	bl	8002b14 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d803      	bhi.n	80046d0 <HAL_SPI_Transmit+0x20a>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d102      	bne.n	80046d6 <HAL_SPI_Transmit+0x210>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e02d      	b.n	8004746 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1c6      	bne.n	8004682 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fa59 	bl	8004bb0 <SPI_EndRxTxTransaction>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004744:	2300      	movs	r3, #0
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b08a      	sub	sp, #40	@ 0x28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004760:	f7fe f9d8 	bl	8002b14 <HAL_GetTick>
 8004764:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800476c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d00c      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x4a>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004784:	d106      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x46>
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d001      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	e17f      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x5c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x5c>
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e174      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x6e>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e16d      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d003      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2205      	movs	r2, #5
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	887a      	ldrh	r2, [r7, #2]
 80047ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d007      	beq.n	800482c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004834:	d17e      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_SPI_TransmitReceive+0xf6>
 800483e:	8afb      	ldrh	r3, [r7, #22]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d16c      	bne.n	800491e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004868:	e059      	b.n	800491e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x162>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x162>
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	2b01      	cmp	r3, #1
 8004886:	d113      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d119      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x1a4>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d014      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	b292      	uxth	r2, r2
 80048d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ee:	2301      	movs	r3, #1
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048f2:	f7fe f90f 	bl	8002b14 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fe:	429a      	cmp	r2, r3
 8004900:	d80d      	bhi.n	800491e <HAL_SPI_TransmitReceive+0x1d0>
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d009      	beq.n	800491e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0bc      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1a0      	bne.n	800486a <HAL_SPI_TransmitReceive+0x11c>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d19b      	bne.n	800486a <HAL_SPI_TransmitReceive+0x11c>
 8004932:	e082      	b.n	8004a3a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_SPI_TransmitReceive+0x1f4>
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d171      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004968:	e05d      	b.n	8004a26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d11c      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x264>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d017      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x264>
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	2b01      	cmp	r3, #1
 8004986:	d114      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d119      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x2a6>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f0:	2301      	movs	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049f4:	f7fe f88e 	bl	8002b14 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d803      	bhi.n	8004a0c <HAL_SPI_TransmitReceive+0x2be>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d102      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x2c4>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e038      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d19c      	bne.n	800496a <HAL_SPI_TransmitReceive+0x21c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d197      	bne.n	800496a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f8b6 	bl	8004bb0 <SPI_EndRxTxTransaction>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e01d      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab0:	f7fe f830 	bl	8002b14 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac0:	f7fe f828 	bl	8002b14 <HAL_GetTick>
 8004ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	015b      	lsls	r3, r3, #5
 8004acc:	0d1b      	lsrs	r3, r3, #20
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad6:	e054      	b.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d050      	beq.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae0:	f7fe f818 	bl	8002b14 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d902      	bls.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d13d      	bne.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b0e:	d111      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	d004      	beq.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b22:	d107      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3c:	d10f      	bne.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e017      	b.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d19b      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000004 	.word	0x20000004

08004bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff ff6a 	bl	8004aa0 <SPI_WaitFlagStateUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e032      	b.n	8004c48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004be2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <SPI_EndRxTxTransaction+0xa0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <SPI_EndRxTxTransaction+0xa4>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	0d5b      	lsrs	r3, r3, #21
 8004bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c00:	d112      	bne.n	8004c28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	@ 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff ff47 	bl	8004aa0 <SPI_WaitFlagStateUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e00f      	b.n	8004c48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d0f2      	beq.n	8004c28 <SPI_EndRxTxTransaction+0x78>
 8004c42:	e000      	b.n	8004c46 <SPI_EndRxTxTransaction+0x96>
        break;
 8004c44:	bf00      	nop
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000004 	.word	0x20000004
 8004c54:	165e9f81 	.word	0x165e9f81

08004c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e042      	b.n	8004cf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd fc52 	bl	8002528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	@ 0x24
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fdb7 	bl	8005810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e04a      	b.n	8004da0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fd fc02 	bl	8002528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	@ 0x24
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fd67 	bl	8005810 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004d60:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0208 	orr.w	r2, r2, #8
 8004d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d175      	bne.n	8004eb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Transmit+0x2c>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e06e      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2221      	movs	r2, #33	@ 0x21
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004de6:	f7fd fe95 	bl	8002b14 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	88fa      	ldrh	r2, [r7, #6]
 8004df6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e00:	d108      	bne.n	8004e14 <HAL_UART_Transmit+0x6c>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e003      	b.n	8004e1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e1c:	e02e      	b.n	8004e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	@ 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fafb 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e03a      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	e007      	b.n	8004e6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1cb      	bne.n	8004e1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2140      	movs	r1, #64	@ 0x40
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fac7 	bl	8005424 <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10f      	bne.n	8004f26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_UART_IRQHandler+0x66>
 8004f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fbb8 	bl	8005694 <UART_Receive_IT>
      return;
 8004f24:	e25b      	b.n	80053de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80de 	beq.w	80050ec <HAL_UART_IRQHandler+0x22c>
 8004f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80d1 	beq.w	80050ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_UART_IRQHandler+0xae>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_UART_IRQHandler+0xd2>
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	f043 0202 	orr.w	r2, r3, #2
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xf6>
 8004f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f043 0204 	orr.w	r2, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d011      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x126>
 8004fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 81f2 	beq.w	80053d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_UART_IRQHandler+0x14e>
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb43 	bl	8005694 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b40      	cmp	r3, #64	@ 0x40
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <HAL_UART_IRQHandler+0x17a>
 8005032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d04f      	beq.n	80050da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa4b 	bl	80054d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d141      	bne.n	80050d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800506c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800507a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800507e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1d9      	bne.n	800504e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d013      	beq.n	80050ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a6:	4a7e      	ldr	r2, [pc, #504]	@ (80052a0 <HAL_UART_IRQHandler+0x3e0>)
 80050a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fd ff90 	bl	8002fd4 <HAL_DMA_Abort_IT>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050c4:	4610      	mov	r0, r2
 80050c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e00e      	b.n	80050e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f994 	bl	80053f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	e00a      	b.n	80050e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f990 	bl	80053f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e006      	b.n	80050e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f98c 	bl	80053f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050e6:	e175      	b.n	80053d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	bf00      	nop
    return;
 80050ea:	e173      	b.n	80053d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 814f 	bne.w	8005394 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8148 	beq.w	8005394 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8141 	beq.w	8005394 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	f040 80b6 	bne.w	80052a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8145 	beq.w	80053d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005156:	429a      	cmp	r2, r3
 8005158:	f080 813e 	bcs.w	80053d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005162:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516e:	f000 8088 	beq.w	8005282 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005188:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800518c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800519e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1d9      	bne.n	8005172 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e1      	bne.n	80051be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800520a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800521e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005220:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005224:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800522c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e3      	bne.n	80051fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005264:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005266:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800526a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e3      	bne.n	8005240 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	4618      	mov	r0, r3
 800527e:	f7fd fe39 	bl	8002ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005290:	b29b      	uxth	r3, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	b29b      	uxth	r3, r3
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f8b7 	bl	800540c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800529e:	e09b      	b.n	80053d8 <HAL_UART_IRQHandler+0x518>
 80052a0:	0800559d 	.word	0x0800559d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 808e 	beq.w	80053dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8089 	beq.w	80053dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e3      	bne.n	80052ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	623b      	str	r3, [r7, #32]
   return(result);
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005326:	633a      	str	r2, [r7, #48]	@ 0x30
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800532c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e3      	bne.n	8005302 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60fb      	str	r3, [r7, #12]
   return(result);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	617b      	str	r3, [r7, #20]
   return(result);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e3      	bne.n	8005348 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f83d 	bl	800540c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005392:	e023      	b.n	80053dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x4f4>
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f909 	bl	80055c4 <UART_Transmit_IT>
    return;
 80053b2:	e014      	b.n	80053de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <HAL_UART_IRQHandler+0x51e>
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f949 	bl	8005664 <UART_EndTransmit_IT>
    return;
 80053d2:	e004      	b.n	80053de <HAL_UART_IRQHandler+0x51e>
    return;
 80053d4:	bf00      	nop
 80053d6:	e002      	b.n	80053de <HAL_UART_IRQHandler+0x51e>
      return;
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <HAL_UART_IRQHandler+0x51e>
      return;
 80053dc:	bf00      	nop
  }
}
 80053de:	37e8      	adds	r7, #232	@ 0xe8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005434:	e03b      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d037      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd fb69 	bl	8002b14 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <UART_WaitOnFlagUntilTimeout+0x30>
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e03a      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d023      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b80      	cmp	r3, #128	@ 0x80
 800546a:	d020      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b40      	cmp	r3, #64	@ 0x40
 8005470:	d01d      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d116      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f81d 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2208      	movs	r2, #8
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0b4      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	@ 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	61fb      	str	r3, [r7, #28]
   return(result);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	2b01      	cmp	r3, #1
 800554c:	d119      	bne.n	8005582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60bb      	str	r3, [r7, #8]
   return(result);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556e:	61ba      	str	r2, [r7, #24]
 8005570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	613b      	str	r3, [r7, #16]
   return(result);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e5      	bne.n	800554e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005590:	bf00      	nop
 8005592:	3754      	adds	r7, #84	@ 0x54
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff1e 	bl	80053f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b21      	cmp	r3, #33	@ 0x21
 80055d6:	d13e      	bne.n	8005656 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e0:	d114      	bne.n	800560c <UART_Transmit_IT+0x48>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d110      	bne.n	800560c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	621a      	str	r2, [r3, #32]
 800560a:	e008      	b.n	800561e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6211      	str	r1, [r2, #32]
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4619      	mov	r1, r3
 800562c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005640:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005650:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800567a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fead 	bl	80053e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08c      	sub	sp, #48	@ 0x30
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b22      	cmp	r3, #34	@ 0x22
 80056a6:	f040 80ae 	bne.w	8005806 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b2:	d117      	bne.n	80056e4 <UART_Receive_IT+0x50>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80056e2:	e026      	b.n	8005732 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f6:	d007      	beq.n	8005708 <UART_Receive_IT+0x74>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <UART_Receive_IT+0x82>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e008      	b.n	8005728 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29b      	uxth	r3, r3
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4619      	mov	r1, r3
 8005740:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005742:	2b00      	cmp	r3, #0
 8005744:	d15d      	bne.n	8005802 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0220 	bic.w	r2, r2, #32
 8005754:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005764:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005788:	2b01      	cmp	r3, #1
 800578a:	d135      	bne.n	80057f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	613b      	str	r3, [r7, #16]
   return(result);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b2:	623a      	str	r2, [r7, #32]
 80057b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d10a      	bne.n	80057ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fe0b 	bl	800540c <HAL_UARTEx_RxEventCallback>
 80057f6:	e002      	b.n	80057fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fb fb75 	bl	8000ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e002      	b.n	8005808 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	3730      	adds	r7, #48	@ 0x30
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b0c0      	sub	sp, #256	@ 0x100
 8005816:	af00      	add	r7, sp, #0
 8005818:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	68d9      	ldr	r1, [r3, #12]
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	ea40 0301 	orr.w	r3, r0, r1
 8005838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	431a      	orrs	r2, r3
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005868:	f021 010c 	bic.w	r1, r1, #12
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005876:	430b      	orrs	r3, r1
 8005878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588a:	6999      	ldr	r1, [r3, #24]
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	ea40 0301 	orr.w	r3, r0, r1
 8005896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b8f      	ldr	r3, [pc, #572]	@ (8005adc <UART_SetConfig+0x2cc>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d005      	beq.n	80058b0 <UART_SetConfig+0xa0>
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae0 <UART_SetConfig+0x2d0>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d104      	bne.n	80058ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b0:	f7fe fd6c 	bl	800438c <HAL_RCC_GetPCLK2Freq>
 80058b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058b8:	e003      	b.n	80058c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ba:	f7fe fd53 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 80058be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	f040 810c 	bne.w	8005ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058e2:	4622      	mov	r2, r4
 80058e4:	462b      	mov	r3, r5
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058ea:	415b      	adcs	r3, r3
 80058ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058f2:	4621      	mov	r1, r4
 80058f4:	eb12 0801 	adds.w	r8, r2, r1
 80058f8:	4629      	mov	r1, r5
 80058fa:	eb43 0901 	adc.w	r9, r3, r1
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	4623      	mov	r3, r4
 8005918:	eb18 0303 	adds.w	r3, r8, r3
 800591c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005920:	462b      	mov	r3, r5
 8005922:	eb49 0303 	adc.w	r3, r9, r3
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800593a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800593e:	460b      	mov	r3, r1
 8005940:	18db      	adds	r3, r3, r3
 8005942:	653b      	str	r3, [r7, #80]	@ 0x50
 8005944:	4613      	mov	r3, r2
 8005946:	eb42 0303 	adc.w	r3, r2, r3
 800594a:	657b      	str	r3, [r7, #84]	@ 0x54
 800594c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005954:	f7fb f950 	bl	8000bf8 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4b61      	ldr	r3, [pc, #388]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 800595e:	fba3 2302 	umull	r2, r3, r3, r2
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	011c      	lsls	r4, r3, #4
 8005966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005970:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	1891      	adds	r1, r2, r2
 800597e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005980:	415b      	adcs	r3, r3
 8005982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005988:	4641      	mov	r1, r8
 800598a:	eb12 0a01 	adds.w	sl, r2, r1
 800598e:	4649      	mov	r1, r9
 8005990:	eb43 0b01 	adc.w	fp, r3, r1
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a8:	4692      	mov	sl, r2
 80059aa:	469b      	mov	fp, r3
 80059ac:	4643      	mov	r3, r8
 80059ae:	eb1a 0303 	adds.w	r3, sl, r3
 80059b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059b6:	464b      	mov	r3, r9
 80059b8:	eb4b 0303 	adc.w	r3, fp, r3
 80059bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059d4:	460b      	mov	r3, r1
 80059d6:	18db      	adds	r3, r3, r3
 80059d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059da:	4613      	mov	r3, r2
 80059dc:	eb42 0303 	adc.w	r3, r2, r3
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059ea:	f7fb f905 	bl	8000bf8 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 80059f6:	fba3 2301 	umull	r2, r3, r3, r1
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	2264      	movs	r2, #100	@ 0x64
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	1acb      	subs	r3, r1, r3
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a0a:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a18:	441c      	add	r4, r3
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	1891      	adds	r1, r2, r2
 8005a32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a34:	415b      	adcs	r3, r3
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a3c:	4641      	mov	r1, r8
 8005a3e:	1851      	adds	r1, r2, r1
 8005a40:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a42:	4649      	mov	r1, r9
 8005a44:	414b      	adcs	r3, r1
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a54:	4659      	mov	r1, fp
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4651      	mov	r1, sl
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4651      	mov	r1, sl
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aa6:	f7fb f8a7 	bl	8000bf8 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	@ 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	@ 0x32
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4422      	add	r2, r4
 8005ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ad8:	e106      	b.n	8005ce8 <UART_SetConfig+0x4d8>
 8005ada:	bf00      	nop
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40011400 	.word	0x40011400
 8005ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005af2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005afa:	4642      	mov	r2, r8
 8005afc:	464b      	mov	r3, r9
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	6239      	str	r1, [r7, #32]
 8005b02:	415b      	adcs	r3, r3
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	1854      	adds	r4, r2, r1
 8005b0e:	4649      	mov	r1, r9
 8005b10:	eb43 0501 	adc.w	r5, r3, r1
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	00eb      	lsls	r3, r5, #3
 8005b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b22:	00e2      	lsls	r2, r4, #3
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	4643      	mov	r3, r8
 8005b2a:	18e3      	adds	r3, r4, r3
 8005b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b30:	464b      	mov	r3, r9
 8005b32:	eb45 0303 	adc.w	r3, r5, r3
 8005b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b56:	4629      	mov	r1, r5
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b60:	4621      	mov	r1, r4
 8005b62:	008a      	lsls	r2, r1, #2
 8005b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b68:	f7fb f846 	bl	8000bf8 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4b60      	ldr	r3, [pc, #384]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	011c      	lsls	r4, r3, #4
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	61b9      	str	r1, [r7, #24]
 8005b94:	415b      	adcs	r3, r3
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	1851      	adds	r1, r2, r1
 8005ba0:	6139      	str	r1, [r7, #16]
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	414b      	adcs	r3, r1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	00cb      	lsls	r3, r1, #3
 8005bb8:	4651      	mov	r1, sl
 8005bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	00ca      	lsls	r2, r1, #3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	eb42 0303 	adc.w	r3, r2, r3
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	008b      	lsls	r3, r1, #2
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bfe:	4641      	mov	r1, r8
 8005c00:	008a      	lsls	r2, r1, #2
 8005c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c06:	f7fa fff7 	bl	8000bf8 <__aeabi_uldivmod>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4b38      	ldr	r3, [pc, #224]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005c12:	fba3 2301 	umull	r2, r3, r3, r1
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2264      	movs	r2, #100	@ 0x64
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	1acb      	subs	r3, r1, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	3332      	adds	r3, #50	@ 0x32
 8005c24:	4a33      	ldr	r2, [pc, #204]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c30:	441c      	add	r4, r3
 8005c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c36:	2200      	movs	r2, #0
 8005c38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c50:	4641      	mov	r1, r8
 8005c52:	1851      	adds	r1, r2, r1
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	4649      	mov	r1, r9
 8005c58:	414b      	adcs	r3, r1
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c68:	4659      	mov	r1, fp
 8005c6a:	00cb      	lsls	r3, r1, #3
 8005c6c:	4651      	mov	r1, sl
 8005c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c72:	4651      	mov	r1, sl
 8005c74:	00ca      	lsls	r2, r1, #3
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c82:	464b      	mov	r3, r9
 8005c84:	460a      	mov	r2, r1
 8005c86:	eb42 0303 	adc.w	r3, r2, r3
 8005c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c96:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	008b      	lsls	r3, r1, #2
 8005ca8:	4641      	mov	r1, r8
 8005caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cae:	4641      	mov	r1, r8
 8005cb0:	008a      	lsls	r2, r1, #2
 8005cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cb6:	f7fa ff9f 	bl	8000bf8 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	@ 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	3332      	adds	r3, #50	@ 0x32
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4422      	add	r2, r4
 8005ce6:	609a      	str	r2, [r3, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf4:	51eb851f 	.word	0x51eb851f

08005cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005cfc:	4904      	ldr	r1, [pc, #16]	@ (8005d10 <MX_FATFS_Init+0x18>)
 8005cfe:	4805      	ldr	r0, [pc, #20]	@ (8005d14 <MX_FATFS_Init+0x1c>)
 8005d00:	f003 f9c6 	bl	8009090 <FATFS_LinkDriver>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	4b03      	ldr	r3, [pc, #12]	@ (8005d18 <MX_FATFS_Init+0x20>)
 8005d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000428 	.word	0x20000428
 8005d14:	20000010 	.word	0x20000010
 8005d18:	20000424 	.word	0x20000424

08005d1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fb fa9d 	bl	8001278 <SD_disk_initialize>
 8005d3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fb fb75 	bl	8001444 <SD_disk_status>
 8005d5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005d74:	7bf8      	ldrb	r0, [r7, #15]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	f7fb fb78 	bl	8001470 <SD_disk_read>
 8005d80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8005d9a:	7bf8      	ldrb	r0, [r7, #15]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	f7fb fbcf 	bl	8001544 <SD_disk_write>
 8005da6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	603a      	str	r2, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8005dc0:	79b9      	ldrb	r1, [r7, #6]
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fb fc40 	bl	800164c <SD_disk_ioctl>
 8005dcc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <disk_status+0x30>)
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	4905      	ldr	r1, [pc, #20]	@ (8005e08 <disk_status+0x30>)
 8005df2:	440a      	add	r2, r1
 8005df4:	7a12      	ldrb	r2, [r2, #8]
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000654 	.word	0x20000654

08005e0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8005e58 <disk_initialize+0x4c>)
 8005e1e:	5cd3      	ldrb	r3, [r2, r3]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d114      	bne.n	8005e4e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	4a0c      	ldr	r2, [pc, #48]	@ (8005e58 <disk_initialize+0x4c>)
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	79fa      	ldrb	r2, [r7, #7]
 8005e32:	4909      	ldr	r1, [pc, #36]	@ (8005e58 <disk_initialize+0x4c>)
 8005e34:	440a      	add	r2, r1
 8005e36:	7a12      	ldrb	r2, [r2, #8]
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	4a03      	ldr	r2, [pc, #12]	@ (8005e58 <disk_initialize+0x4c>)
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000654 	.word	0x20000654

08005e5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e98 <disk_read+0x3c>)
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	689c      	ldr	r4, [r3, #8]
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	@ (8005e98 <disk_read+0x3c>)
 8005e7c:	4413      	add	r3, r2
 8005e7e:	7a18      	ldrb	r0, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	47a0      	blx	r4
 8005e88:	4603      	mov	r3, r0
 8005e8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd90      	pop	{r4, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000654 	.word	0x20000654

08005e9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed8 <disk_write+0x3c>)
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	68dc      	ldr	r4, [r3, #12]
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <disk_write+0x3c>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	7a18      	ldrb	r0, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	47a0      	blx	r4
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000654 	.word	0x20000654

08005edc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	603a      	str	r2, [r7, #0]
 8005ee6:	71fb      	strb	r3, [r7, #7]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	4a09      	ldr	r2, [pc, #36]	@ (8005f14 <disk_ioctl+0x38>)
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	79fa      	ldrb	r2, [r7, #7]
 8005efa:	4906      	ldr	r1, [pc, #24]	@ (8005f14 <disk_ioctl+0x38>)
 8005efc:	440a      	add	r2, r1
 8005efe:	7a10      	ldrb	r0, [r2, #8]
 8005f00:	79b9      	ldrb	r1, [r7, #6]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000654 	.word	0x20000654

08005f18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3301      	adds	r3, #1
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	b21a      	sxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b21b      	sxth	r3, r3
 8005f34:	4313      	orrs	r3, r2
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3303      	adds	r3, #3
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	3202      	adds	r2, #2
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	3201      	adds	r2, #1
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	887a      	ldrh	r2, [r7, #2]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	887a      	ldrh	r2, [r7, #2]
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	1c53      	adds	r3, r2, #1
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	6179      	str	r1, [r7, #20]
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3b01      	subs	r3, #1
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f1      	bne.n	8006036 <mem_cpy+0x1a>
	}
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	617a      	str	r2, [r7, #20]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3b01      	subs	r3, #1
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f3      	bne.n	800606e <mem_set+0x10>
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	@ 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	61fa      	str	r2, [r7, #28]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	61ba      	str	r2, [r7, #24]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <mem_cmp+0x40>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0eb      	beq.n	80060ac <mem_cmp+0x18>

	return r;
 80060d4:	697b      	ldr	r3, [r7, #20]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3724      	adds	r7, #36	@ 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060ec:	e002      	b.n	80060f4 <chk_chr+0x12>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3301      	adds	r3, #1
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <chk_chr+0x26>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	4293      	cmp	r3, r2
 8006106:	d1f2      	bne.n	80060ee <chk_chr+0xc>
	return *str;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	781b      	ldrb	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e029      	b.n	8006180 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800612c:	4a27      	ldr	r2, [pc, #156]	@ (80061cc <chk_lock+0xb4>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01d      	beq.n	8006176 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800613a:	4a24      	ldr	r2, [pc, #144]	@ (80061cc <chk_lock+0xb4>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d116      	bne.n	800617a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800614c:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <chk_lock+0xb4>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800615c:	429a      	cmp	r2, r3
 800615e:	d10c      	bne.n	800617a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006160:	4a1a      	ldr	r2, [pc, #104]	@ (80061cc <chk_lock+0xb4>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	4413      	add	r3, r2
 8006168:	3308      	adds	r3, #8
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006170:	429a      	cmp	r2, r3
 8006172:	d102      	bne.n	800617a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006174:	e007      	b.n	8006186 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d9d2      	bls.n	800612c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d109      	bne.n	80061a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <chk_lock+0x80>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d101      	bne.n	800619c <chk_lock+0x84>
 8006198:	2300      	movs	r3, #0
 800619a:	e010      	b.n	80061be <chk_lock+0xa6>
 800619c:	2312      	movs	r3, #18
 800619e:	e00e      	b.n	80061be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <chk_lock+0xa0>
 80061a6:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <chk_lock+0xb4>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	330c      	adds	r3, #12
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d101      	bne.n	80061bc <chk_lock+0xa4>
 80061b8:	2310      	movs	r3, #16
 80061ba:	e000      	b.n	80061be <chk_lock+0xa6>
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20000434 	.word	0x20000434

080061d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e002      	b.n	80061e2 <enq_lock+0x12>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3301      	adds	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d806      	bhi.n	80061f6 <enq_lock+0x26>
 80061e8:	4a09      	ldr	r2, [pc, #36]	@ (8006210 <enq_lock+0x40>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	4413      	add	r3, r2
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f2      	bne.n	80061dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000434 	.word	0x20000434

08006214 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e01f      	b.n	8006264 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006224:	4a41      	ldr	r2, [pc, #260]	@ (800632c <inc_lock+0x118>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d113      	bne.n	800625e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006236:	4a3d      	ldr	r2, [pc, #244]	@ (800632c <inc_lock+0x118>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006246:	429a      	cmp	r2, r3
 8006248:	d109      	bne.n	800625e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800624a:	4a38      	ldr	r2, [pc, #224]	@ (800632c <inc_lock+0x118>)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	4413      	add	r3, r2
 8006252:	3308      	adds	r3, #8
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800625a:	429a      	cmp	r2, r3
 800625c:	d006      	beq.n	800626c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d9dc      	bls.n	8006224 <inc_lock+0x10>
 800626a:	e000      	b.n	800626e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800626c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d132      	bne.n	80062da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e002      	b.n	8006280 <inc_lock+0x6c>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d806      	bhi.n	8006294 <inc_lock+0x80>
 8006286:	4a29      	ldr	r2, [pc, #164]	@ (800632c <inc_lock+0x118>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	4413      	add	r3, r2
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f2      	bne.n	800627a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d101      	bne.n	800629e <inc_lock+0x8a>
 800629a:	2300      	movs	r3, #0
 800629c:	e040      	b.n	8006320 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4922      	ldr	r1, [pc, #136]	@ (800632c <inc_lock+0x118>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	440b      	add	r3, r1
 80062aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	491e      	ldr	r1, [pc, #120]	@ (800632c <inc_lock+0x118>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	440b      	add	r3, r1
 80062b8:	3304      	adds	r3, #4
 80062ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	491a      	ldr	r1, [pc, #104]	@ (800632c <inc_lock+0x118>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	440b      	add	r3, r1
 80062c8:	3308      	adds	r3, #8
 80062ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <inc_lock+0x118>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	4413      	add	r3, r2
 80062d4:	330c      	adds	r3, #12
 80062d6:	2200      	movs	r2, #0
 80062d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <inc_lock+0xe0>
 80062e0:	4a12      	ldr	r2, [pc, #72]	@ (800632c <inc_lock+0x118>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	4413      	add	r3, r2
 80062e8:	330c      	adds	r3, #12
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <inc_lock+0xe0>
 80062f0:	2300      	movs	r3, #0
 80062f2:	e015      	b.n	8006320 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <inc_lock+0xf8>
 80062fa:	4a0c      	ldr	r2, [pc, #48]	@ (800632c <inc_lock+0x118>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	4413      	add	r3, r2
 8006302:	330c      	adds	r3, #12
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	e001      	b.n	8006310 <inc_lock+0xfc>
 800630c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006310:	4906      	ldr	r1, [pc, #24]	@ (800632c <inc_lock+0x118>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	440b      	add	r3, r1
 8006318:	330c      	adds	r3, #12
 800631a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	20000434 	.word	0x20000434

08006330 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d825      	bhi.n	8006390 <dec_lock+0x60>
		n = Files[i].ctr;
 8006344:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <dec_lock+0x74>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	4413      	add	r3, r2
 800634c:	330c      	adds	r3, #12
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006358:	d101      	bne.n	800635e <dec_lock+0x2e>
 800635a:	2300      	movs	r3, #0
 800635c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <dec_lock+0x3a>
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	3b01      	subs	r3, #1
 8006368:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800636a:	4a0e      	ldr	r2, [pc, #56]	@ (80063a4 <dec_lock+0x74>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	4413      	add	r3, r2
 8006372:	330c      	adds	r3, #12
 8006374:	89fa      	ldrh	r2, [r7, #14]
 8006376:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006378:	89fb      	ldrh	r3, [r7, #14]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <dec_lock+0x5a>
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <dec_lock+0x74>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	4413      	add	r3, r2
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	737b      	strb	r3, [r7, #13]
 800638e:	e001      	b.n	8006394 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006390:	2302      	movs	r3, #2
 8006392:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006394:	7b7b      	ldrb	r3, [r7, #13]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000434 	.word	0x20000434

080063a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e010      	b.n	80063d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063b6:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <clear_lock+0x44>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4413      	add	r3, r2
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d105      	bne.n	80063d2 <clear_lock+0x2a>
 80063c6:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <clear_lock+0x44>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4413      	add	r3, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d9eb      	bls.n	80063b6 <clear_lock+0xe>
	}
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000434 	.word	0x20000434

080063f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d034      	beq.n	800646e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7858      	ldrb	r0, [r3, #1]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006414:	2301      	movs	r3, #1
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	f7ff fd40 	bl	8005e9c <disk_write>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	e022      	b.n	800646e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	429a      	cmp	r2, r3
 800643c:	d217      	bcs.n	800646e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	789b      	ldrb	r3, [r3, #2]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e010      	b.n	8006468 <sync_window+0x78>
					wsect += fs->fsize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7858      	ldrb	r0, [r3, #1]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800645a:	2301      	movs	r3, #1
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	f7ff fd1d 	bl	8005e9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d8eb      	bhi.n	8006446 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d01b      	beq.n	80064c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ffad 	bl	80063f0 <sync_window>
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d113      	bne.n	80064c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7858      	ldrb	r0, [r3, #1]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064aa:	2301      	movs	r3, #1
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	f7ff fcd5 	bl	8005e5c <disk_read>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ff87 	bl	80063f0 <sync_window>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d159      	bne.n	80065a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d149      	bne.n	8006588 <sync_fs+0xb4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	791b      	ldrb	r3, [r3, #4]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d145      	bne.n	8006588 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	899b      	ldrh	r3, [r3, #12]
 8006506:	461a      	mov	r2, r3
 8006508:	2100      	movs	r1, #0
 800650a:	f7ff fda8 	bl	800605e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3338      	adds	r3, #56	@ 0x38
 8006512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006516:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fd37 	bl	8005f8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3338      	adds	r3, #56	@ 0x38
 8006524:	4921      	ldr	r1, [pc, #132]	@ (80065ac <sync_fs+0xd8>)
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fd4c 	bl	8005fc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3338      	adds	r3, #56	@ 0x38
 8006530:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006534:	491e      	ldr	r1, [pc, #120]	@ (80065b0 <sync_fs+0xdc>)
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fd44 	bl	8005fc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3338      	adds	r3, #56	@ 0x38
 8006540:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f7ff fd3a 	bl	8005fc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3338      	adds	r3, #56	@ 0x38
 8006554:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7ff fd30 	bl	8005fc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7858      	ldrb	r0, [r3, #1]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800657c:	2301      	movs	r3, #1
 800657e:	f7ff fc8d 	bl	8005e9c <disk_write>
			fs->fsi_flag = 0;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fca3 	bl	8005edc <disk_ioctl>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <sync_fs+0xcc>
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	41615252 	.word	0x41615252
 80065b0:	61417272 	.word	0x61417272

080065b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	3b02      	subs	r3, #2
 80065c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	3b02      	subs	r3, #2
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d301      	bcc.n	80065d4 <clust2sect+0x20>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e008      	b.n	80065e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	461a      	mov	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	fb03 f202 	mul.w	r2, r3, r2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	4413      	add	r3, r2
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d904      	bls.n	8006612 <get_fat+0x20>
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e0ba      	b.n	800678e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b03      	cmp	r3, #3
 8006624:	f000 8082 	beq.w	800672c <get_fat+0x13a>
 8006628:	2b03      	cmp	r3, #3
 800662a:	f300 80a6 	bgt.w	800677a <get_fat+0x188>
 800662e:	2b01      	cmp	r3, #1
 8006630:	d002      	beq.n	8006638 <get_fat+0x46>
 8006632:	2b02      	cmp	r3, #2
 8006634:	d055      	beq.n	80066e2 <get_fat+0xf0>
 8006636:	e0a0      	b.n	800677a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	899b      	ldrh	r3, [r3, #12]
 800664e:	4619      	mov	r1, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	fbb3 f3f1 	udiv	r3, r3, r1
 8006656:	4413      	add	r3, r2
 8006658:	4619      	mov	r1, r3
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f7ff ff0c 	bl	8006478 <move_window>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 808c 	bne.w	8006780 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	60fa      	str	r2, [r7, #12]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	fbb3 f1f2 	udiv	r1, r3, r2
 8006676:	fb01 f202 	mul.w	r2, r1, r2
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006684:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	899b      	ldrh	r3, [r3, #12]
 800668e:	4619      	mov	r1, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	fbb3 f3f1 	udiv	r3, r3, r1
 8006696:	4413      	add	r3, r2
 8006698:	4619      	mov	r1, r3
 800669a:	6938      	ldr	r0, [r7, #16]
 800669c:	f7ff feec 	bl	8006478 <move_window>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d16e      	bne.n	8006784 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	899b      	ldrh	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b2:	fb01 f202 	mul.w	r2, r1, r2
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <get_fat+0xe6>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	e002      	b.n	80066de <get_fat+0xec>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066de:	617b      	str	r3, [r7, #20]
			break;
 80066e0:	e055      	b.n	800678e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	899b      	ldrh	r3, [r3, #12]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f6:	4413      	add	r3, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f7ff febc 	bl	8006478 <move_window>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d140      	bne.n	8006788 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	8992      	ldrh	r2, [r2, #12]
 8006714:	fbb3 f0f2 	udiv	r0, r3, r2
 8006718:	fb00 f202 	mul.w	r2, r0, r2
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	440b      	add	r3, r1
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fbf9 	bl	8005f18 <ld_word>
 8006726:	4603      	mov	r3, r0
 8006728:	617b      	str	r3, [r7, #20]
			break;
 800672a:	e030      	b.n	800678e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	899b      	ldrh	r3, [r3, #12]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006740:	4413      	add	r3, r2
 8006742:	4619      	mov	r1, r3
 8006744:	6938      	ldr	r0, [r7, #16]
 8006746:	f7ff fe97 	bl	8006478 <move_window>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11d      	bne.n	800678c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	8992      	ldrh	r2, [r2, #12]
 800675e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006762:	fb00 f202 	mul.w	r2, r0, r2
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	440b      	add	r3, r1
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fbec 	bl	8005f48 <ld_dword>
 8006770:	4603      	mov	r3, r0
 8006772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006776:	617b      	str	r3, [r7, #20]
			break;
 8006778:	e009      	b.n	800678e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	e006      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006780:	bf00      	nop
 8006782:	e004      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800678c:	bf00      	nop
		}
	}

	return val;
 800678e:	697b      	ldr	r3, [r7, #20]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b089      	sub	sp, #36	@ 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80067a4:	2302      	movs	r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	f240 8109 	bls.w	80069c2 <put_fat+0x22a>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f080 8103 	bcs.w	80069c2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	f000 80b6 	beq.w	8006932 <put_fat+0x19a>
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	f300 80fb 	bgt.w	80069c2 <put_fat+0x22a>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d003      	beq.n	80067d8 <put_fat+0x40>
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f000 8083 	beq.w	80068dc <put_fat+0x144>
 80067d6:	e0f4      	b.n	80069c2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4413      	add	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	899b      	ldrh	r3, [r3, #12]
 80067ee:	4619      	mov	r1, r3
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f6:	4413      	add	r3, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fe3c 	bl	8006478 <move_window>
 8006800:	4603      	mov	r3, r0
 8006802:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80d4 	bne.w	80069b4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	61ba      	str	r2, [r7, #24]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	8992      	ldrh	r2, [r2, #12]
 800681c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006820:	fb00 f202 	mul.w	r2, r0, r2
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	440b      	add	r3, r1
 8006828:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <put_fat+0xb8>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b25b      	sxtb	r3, r3
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b25a      	sxtb	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	b25b      	sxtb	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b25b      	sxtb	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e001      	b.n	8006854 <put_fat+0xbc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	899b      	ldrh	r3, [r3, #12]
 8006866:	4619      	mov	r1, r3
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	fbb3 f3f1 	udiv	r3, r3, r1
 800686e:	4413      	add	r3, r2
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fe00 	bl	8006478 <move_window>
 8006878:	4603      	mov	r3, r0
 800687a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800687c:	7ffb      	ldrb	r3, [r7, #31]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 809a 	bne.w	80069b8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	899b      	ldrh	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	fbb3 f0f2 	udiv	r0, r3, r2
 8006896:	fb00 f202 	mul.w	r2, r0, r2
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	440b      	add	r3, r1
 800689e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <put_fat+0x11a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e00e      	b.n	80068d0 <put_fat+0x138>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f023 030f 	bic.w	r3, r3, #15
 80068bc:	b25a      	sxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	70da      	strb	r2, [r3, #3]
			break;
 80068da:	e072      	b.n	80069c2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4619      	mov	r1, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80068f0:	4413      	add	r3, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff fdbf 	bl	8006478 <move_window>
 80068fa:	4603      	mov	r3, r0
 80068fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d15b      	bne.n	80069bc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	8992      	ldrh	r2, [r2, #12]
 8006912:	fbb3 f0f2 	udiv	r0, r3, r2
 8006916:	fb00 f202 	mul.w	r2, r0, r2
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	440b      	add	r3, r1
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	b292      	uxth	r2, r2
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fb32 	bl	8005f8e <st_word>
			fs->wflag = 1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	70da      	strb	r2, [r3, #3]
			break;
 8006930:	e047      	b.n	80069c2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	899b      	ldrh	r3, [r3, #12]
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	b29b      	uxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	fbb3 f3f1 	udiv	r3, r3, r1
 8006946:	4413      	add	r3, r2
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fd94 	bl	8006478 <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006954:	7ffb      	ldrb	r3, [r7, #31]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d132      	bne.n	80069c0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	8992      	ldrh	r2, [r2, #12]
 800696e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006972:	fb00 f202 	mul.w	r2, r0, r2
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	440b      	add	r3, r1
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fae4 	bl	8005f48 <ld_dword>
 8006980:	4603      	mov	r3, r0
 8006982:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006986:	4323      	orrs	r3, r4
 8006988:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	8992      	ldrh	r2, [r2, #12]
 8006998:	fbb3 f0f2 	udiv	r0, r3, r2
 800699c:	fb00 f202 	mul.w	r2, r0, r2
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	440b      	add	r3, r1
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fb0c 	bl	8005fc4 <st_dword>
			fs->wflag = 1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	70da      	strb	r2, [r3, #3]
			break;
 80069b2:	e006      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069b4:	bf00      	nop
 80069b6:	e004      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069c0:	bf00      	nop
		}
	}
	return res;
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	@ 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}

080069cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d904      	bls.n	80069f2 <remove_chain+0x26>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d301      	bcc.n	80069f6 <remove_chain+0x2a>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e04b      	b.n	8006a8e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00c      	beq.n	8006a16 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f7ff fec8 	bl	8006798 <put_fat>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a0c:	7ffb      	ldrb	r3, [r7, #31]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <remove_chain+0x4a>
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	e03b      	b.n	8006a8e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fdea 	bl	80065f2 <get_fat>
 8006a1e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d031      	beq.n	8006a8a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <remove_chain+0x64>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e02e      	b.n	8006a8e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d101      	bne.n	8006a3c <remove_chain+0x70>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e028      	b.n	8006a8e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	69b8      	ldr	r0, [r7, #24]
 8006a42:	f7ff fea9 	bl	8006798 <put_fat>
 8006a46:	4603      	mov	r3, r0
 8006a48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <remove_chain+0x88>
 8006a50:	7ffb      	ldrb	r3, [r7, #31]
 8006a52:	e01c      	b.n	8006a8e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	3b02      	subs	r3, #2
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20b      	bcs.n	8006a7a <remove_chain+0xae>
			fs->free_clst++;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	791b      	ldrb	r3, [r3, #4]
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3c6      	bcc.n	8006a16 <remove_chain+0x4a>
 8006a88:	e000      	b.n	8006a8c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a8a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b088      	sub	sp, #32
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <create_chain+0x2c>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d31b      	bcc.n	8006afa <create_chain+0x64>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e018      	b.n	8006afa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd91 	bl	80065f2 <get_fat>
 8006ad0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d801      	bhi.n	8006adc <create_chain+0x46>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e070      	b.n	8006bbe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d101      	bne.n	8006ae8 <create_chain+0x52>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	e06a      	b.n	8006bbe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d201      	bcs.n	8006af6 <create_chain+0x60>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e063      	b.n	8006bbe <create_chain+0x128>
		scl = clst;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3301      	adds	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d307      	bcc.n	8006b1e <create_chain+0x88>
				ncl = 2;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d901      	bls.n	8006b1e <create_chain+0x88>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e04f      	b.n	8006bbe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b1e:	69f9      	ldr	r1, [r7, #28]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fd66 	bl	80065f2 <get_fat>
 8006b26:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d003      	beq.n	8006b3c <create_chain+0xa6>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d101      	bne.n	8006b40 <create_chain+0xaa>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	e03e      	b.n	8006bbe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1da      	bne.n	8006afe <create_chain+0x68>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e038      	b.n	8006bbe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b4c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6938      	ldr	r0, [r7, #16]
 8006b56:	f7ff fe1f 	bl	8006798 <put_fat>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <create_chain+0xe2>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff fe12 	bl	8006798 <put_fat>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <create_chain+0x116>
		fs->last_clst = ncl;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d804      	bhi.n	8006b9c <create_chain+0x106>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	791b      	ldrb	r3, [r3, #4]
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	711a      	strb	r2, [r3, #4]
 8006baa:	e007      	b.n	8006bbc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d102      	bne.n	8006bb8 <create_chain+0x122>
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb6:	e000      	b.n	8006bba <create_chain+0x124>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	3304      	adds	r3, #4
 8006bdc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	899b      	ldrh	r3, [r3, #12]
 8006be2:	461a      	mov	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	8952      	ldrh	r2, [r2, #10]
 8006bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	613a      	str	r2, [r7, #16]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <clmt_clust+0x42>
 8006c04:	2300      	movs	r3, #0
 8006c06:	e010      	b.n	8006c2a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d307      	bcc.n	8006c20 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c1e:	e7e9      	b.n	8006bf4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006c20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c4c:	d204      	bcs.n	8006c58 <dir_sdi+0x22>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e071      	b.n	8006d40 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <dir_sdi+0x46>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d902      	bls.n	8006c7c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	8912      	ldrh	r2, [r2, #8]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d301      	bcc.n	8006c92 <dir_sdi+0x5c>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e056      	b.n	8006d40 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	e02d      	b.n	8006cf8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	899b      	ldrh	r3, [r3, #12]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cac:	e019      	b.n	8006ce2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fc9d 	bl	80065f2 <get_fat>
 8006cb8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d101      	bne.n	8006cc6 <dir_sdi+0x90>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e03c      	b.n	8006d40 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d904      	bls.n	8006cd6 <dir_sdi+0xa0>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d301      	bcc.n	8006cda <dir_sdi+0xa4>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e032      	b.n	8006d40 <dir_sdi+0x10a>
			ofs -= csz;
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d2e1      	bcs.n	8006cae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7ff fc61 	bl	80065b4 <clust2sect>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <dir_sdi+0xd4>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e01a      	b.n	8006d40 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	899b      	ldrh	r3, [r3, #12]
 8006d12:	4619      	mov	r1, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	899b      	ldrh	r3, [r3, #12]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d32:	fb00 f202 	mul.w	r2, r0, r2
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	18ca      	adds	r2, r1, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	3320      	adds	r3, #32
 8006d5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <dir_next+0x28>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d6e:	d301      	bcc.n	8006d74 <dir_next+0x2c>
 8006d70:	2304      	movs	r3, #4
 8006d72:	e0bb      	b.n	8006eec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d80:	fb01 f202 	mul.w	r2, r1, r2
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809d 	bne.w	8006ec6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	8912      	ldrh	r2, [r2, #8]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f0c0 808d 	bcc.w	8006ec6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	61da      	str	r2, [r3, #28]
 8006db2:	2304      	movs	r3, #4
 8006db4:	e09a      	b.n	8006eec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	899b      	ldrh	r3, [r3, #12]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	8952      	ldrh	r2, [r2, #10]
 8006dc6:	3a01      	subs	r2, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d17b      	bne.n	8006ec6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7ff fc0b 	bl	80065f2 <get_fat>
 8006ddc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d801      	bhi.n	8006de8 <dir_next+0xa0>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e081      	b.n	8006eec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d101      	bne.n	8006df4 <dir_next+0xac>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e07b      	b.n	8006eec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d359      	bcc.n	8006eb2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
 8006e0a:	2304      	movs	r3, #4
 8006e0c:	e06e      	b.n	8006eec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f7ff fe3d 	bl	8006a96 <create_chain>
 8006e1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <dir_next+0xe0>
 8006e24:	2307      	movs	r3, #7
 8006e26:	e061      	b.n	8006eec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <dir_next+0xea>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e05c      	b.n	8006eec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d101      	bne.n	8006e3e <dir_next+0xf6>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e056      	b.n	8006eec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fad6 	bl	80063f0 <sync_window>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <dir_next+0x106>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e04e      	b.n	8006eec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	899b      	ldrh	r3, [r3, #12]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f7ff f8ff 	bl	800605e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fba4 	bl	80065b4 <clust2sect>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e72:	e012      	b.n	8006e9a <dir_next+0x152>
						fs->wflag = 1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fab8 	bl	80063f0 <sync_window>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <dir_next+0x142>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e030      	b.n	8006eec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	895b      	ldrh	r3, [r3, #10]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d3e6      	bcc.n	8006e74 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fb7a 	bl	80065b4 <clust2sect>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	899b      	ldrh	r3, [r3, #12]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ede:	fb00 f202 	mul.w	r2, r0, r2
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	18ca      	adds	r2, r1, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f04:	2100      	movs	r1, #0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fe95 	bl	8006c36 <dir_sdi>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12b      	bne.n	8006f6e <dir_alloc+0x7a>
		n = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff faa9 	bl	8006478 <move_window>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11d      	bne.n	8006f6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2be5      	cmp	r3, #229	@ 0xe5
 8006f38:	d004      	beq.n	8006f44 <dir_alloc+0x50>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3301      	adds	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d102      	bne.n	8006f58 <dir_alloc+0x64>
 8006f52:	e00c      	b.n	8006f6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fef4 	bl	8006d48 <dir_next>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0d7      	beq.n	8006f1a <dir_alloc+0x26>
 8006f6a:	e000      	b.n	8006f6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d101      	bne.n	8006f78 <dir_alloc+0x84>
 8006f74:	2307      	movs	r3, #7
 8006f76:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	331a      	adds	r3, #26
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe ffc1 	bl	8005f18 <ld_word>
 8006f96:	4603      	mov	r3, r0
 8006f98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d109      	bne.n	8006fb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe ffb6 	bl	8005f18 <ld_word>
 8006fac:	4603      	mov	r3, r0
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	331a      	adds	r3, #26
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe ffd9 	bl	8005f8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d109      	bne.n	8006ff8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f103 0214 	add.w	r2, r3, #20
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe ffcb 	bl	8005f8e <st_word>
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007000:	b590      	push	{r4, r7, lr}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	331a      	adds	r3, #26
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe ff82 	bl	8005f18 <ld_word>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <cmp_lfn+0x1e>
 800701a:	2300      	movs	r3, #0
 800701c:	e059      	b.n	80070d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	4613      	mov	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007034:	2301      	movs	r3, #1
 8007036:	81fb      	strh	r3, [r7, #14]
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e033      	b.n	80070a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800703e:	4a27      	ldr	r2, [pc, #156]	@ (80070dc <cmp_lfn+0xdc>)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4413      	add	r3, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe ff63 	bl	8005f18 <ld_word>
 8007052:	4603      	mov	r3, r0
 8007054:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01a      	beq.n	8007092 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007060:	d812      	bhi.n	8007088 <cmp_lfn+0x88>
 8007062:	89bb      	ldrh	r3, [r7, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	f002 f85f 	bl	8009128 <ff_wtoupper>
 800706a:	4603      	mov	r3, r0
 800706c:	461c      	mov	r4, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	617a      	str	r2, [r7, #20]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f002 f853 	bl	8009128 <ff_wtoupper>
 8007082:	4603      	mov	r3, r0
 8007084:	429c      	cmp	r4, r3
 8007086:	d001      	beq.n	800708c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007088:	2300      	movs	r3, #0
 800708a:	e022      	b.n	80070d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800708c:	89bb      	ldrh	r3, [r7, #12]
 800708e:	81fb      	strh	r3, [r7, #14]
 8007090:	e006      	b.n	80070a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007092:	89bb      	ldrh	r3, [r7, #12]
 8007094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007098:	4293      	cmp	r3, r2
 800709a:	d001      	beq.n	80070a0 <cmp_lfn+0xa0>
 800709c:	2300      	movs	r3, #0
 800709e:	e018      	b.n	80070d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3301      	adds	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d9c8      	bls.n	800703e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070d0:	2301      	movs	r3, #1
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd90      	pop	{r4, r7, pc}
 80070da:	bf00      	nop
 80070dc:	0800be90 	.word	0x0800be90

080070e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4611      	mov	r1, r2
 80070ec:	461a      	mov	r2, r3
 80070ee:	460b      	mov	r3, r1
 80070f0:	71fb      	strb	r3, [r7, #7]
 80070f2:	4613      	mov	r3, r2
 80070f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	330d      	adds	r3, #13
 80070fa:	79ba      	ldrb	r2, [r7, #6]
 80070fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	330b      	adds	r3, #11
 8007102:	220f      	movs	r2, #15
 8007104:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	330c      	adds	r3, #12
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	331a      	adds	r3, #26
 8007112:	2100      	movs	r1, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe ff3a 	bl	8005f8e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	4613      	mov	r3, r2
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	82fb      	strh	r3, [r7, #22]
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007132:	8afb      	ldrh	r3, [r7, #22]
 8007134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <put_lfn+0x6c>
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	61fa      	str	r2, [r7, #28]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800714c:	4a17      	ldr	r2, [pc, #92]	@ (80071ac <put_lfn+0xcc>)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4413      	add	r3, r2
 800715a:	8afa      	ldrh	r2, [r7, #22]
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe ff15 	bl	8005f8e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <put_lfn+0x90>
 800716a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800716e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	3301      	adds	r3, #1
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b0c      	cmp	r3, #12
 800717a:	d9da      	bls.n	8007132 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800717c:	8afb      	ldrh	r3, [r7, #22]
 800717e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007182:	4293      	cmp	r3, r2
 8007184:	d006      	beq.n	8007194 <put_lfn+0xb4>
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <put_lfn+0xbc>
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800719a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	79fa      	ldrb	r2, [r7, #7]
 80071a0:	701a      	strb	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	0800be90 	.word	0x0800be90

080071b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08c      	sub	sp, #48	@ 0x30
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80071be:	220b      	movs	r2, #11
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7fe ff2a 	bl	800601c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d92b      	bls.n	8007226 <gen_numname+0x76>
		sr = seq;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80071d2:	e022      	b.n	800721a <gen_numname+0x6a>
			wc = *lfn++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	1c9a      	adds	r2, r3, #2
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80071de:	2300      	movs	r3, #0
 80071e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071e2:	e017      	b.n	8007214 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	005a      	lsls	r2, r3, #1
 80071e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80071f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <gen_numname+0x5e>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007208:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800720c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800720e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007210:	3301      	adds	r3, #1
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d9e4      	bls.n	80071e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d8      	bne.n	80071d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007226:	2307      	movs	r3, #7
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	b2db      	uxtb	r3, r3
 8007234:	3330      	adds	r3, #48	@ 0x30
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800723a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800723e:	2b39      	cmp	r3, #57	@ 0x39
 8007240:	d904      	bls.n	800724c <gen_numname+0x9c>
 8007242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007246:	3307      	adds	r3, #7
 8007248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007252:	3330      	adds	r3, #48	@ 0x30
 8007254:	443b      	add	r3, r7
 8007256:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800725a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1df      	bne.n	800722a <gen_numname+0x7a>
	ns[i] = '~';
 800726a:	f107 0214 	add.w	r2, r7, #20
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	4413      	add	r3, r2
 8007272:	227e      	movs	r2, #126	@ 0x7e
 8007274:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
 800727a:	e002      	b.n	8007282 <gen_numname+0xd2>
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
 8007282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	429a      	cmp	r2, r3
 8007288:	d205      	bcs.n	8007296 <gen_numname+0xe6>
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	4413      	add	r3, r2
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b20      	cmp	r3, #32
 8007294:	d1f2      	bne.n	800727c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	2b07      	cmp	r3, #7
 800729a:	d807      	bhi.n	80072ac <gen_numname+0xfc>
 800729c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80072a2:	3330      	adds	r3, #48	@ 0x30
 80072a4:	443b      	add	r3, r7
 80072a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80072aa:	e000      	b.n	80072ae <gen_numname+0xfe>
 80072ac:	2120      	movs	r1, #32
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	460a      	mov	r2, r1
 80072ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d9e9      	bls.n	8007296 <gen_numname+0xe6>
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	3730      	adds	r7, #48	@ 0x30
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80072d8:	230b      	movs	r3, #11
 80072da:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	0852      	lsrs	r2, r2, #1
 80072e2:	01db      	lsls	r3, r3, #7
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	6079      	str	r1, [r7, #4]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	4413      	add	r3, r2
 80072f2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ed      	bne.n	80072dc <sum_sfn+0x10>
	return sum;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fc89 	bl	8006c36 <dir_sdi>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <dir_find+0x24>
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	e0a9      	b.n	8007486 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007332:	23ff      	movs	r3, #255	@ 0xff
 8007334:	753b      	strb	r3, [r7, #20]
 8007336:	7d3b      	ldrb	r3, [r7, #20]
 8007338:	757b      	strb	r3, [r7, #21]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f04f 32ff 	mov.w	r2, #4294967295
 8007340:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4619      	mov	r1, r3
 8007348:	6938      	ldr	r0, [r7, #16]
 800734a:	f7ff f895 	bl	8006478 <move_window>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 8090 	bne.w	800747a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007362:	7dbb      	ldrb	r3, [r7, #22]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <dir_find+0x60>
 8007368:	2304      	movs	r3, #4
 800736a:	75fb      	strb	r3, [r7, #23]
 800736c:	e08a      	b.n	8007484 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	330b      	adds	r3, #11
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007382:	7dbb      	ldrb	r3, [r7, #22]
 8007384:	2be5      	cmp	r3, #229	@ 0xe5
 8007386:	d007      	beq.n	8007398 <dir_find+0x8a>
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <dir_find+0x98>
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2b0f      	cmp	r3, #15
 8007396:	d006      	beq.n	80073a6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007398:	23ff      	movs	r3, #255	@ 0xff
 800739a:	757b      	strb	r3, [r7, #21]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80073a4:	e05e      	b.n	8007464 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d136      	bne.n	800741a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d154      	bne.n	8007464 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80073ba:	7dbb      	ldrb	r3, [r7, #22]
 80073bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00d      	beq.n	80073e0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	7b5b      	ldrb	r3, [r3, #13]
 80073ca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80073cc:	7dbb      	ldrb	r3, [r7, #22]
 80073ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d2:	75bb      	strb	r3, [r7, #22]
 80073d4:	7dbb      	ldrb	r3, [r7, #22]
 80073d6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073e0:	7dba      	ldrb	r2, [r7, #22]
 80073e2:	7d7b      	ldrb	r3, [r7, #21]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d115      	bne.n	8007414 <dir_find+0x106>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	330d      	adds	r3, #13
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	7d3a      	ldrb	r2, [r7, #20]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d10e      	bne.n	8007414 <dir_find+0x106>
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7ff fdfd 	bl	8007000 <cmp_lfn>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <dir_find+0x106>
 800740c:	7d7b      	ldrb	r3, [r7, #21]
 800740e:	3b01      	subs	r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e000      	b.n	8007416 <dir_find+0x108>
 8007414:	23ff      	movs	r3, #255	@ 0xff
 8007416:	757b      	strb	r3, [r7, #21]
 8007418:	e024      	b.n	8007464 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800741a:	7d7b      	ldrb	r3, [r7, #21]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d109      	bne.n	8007434 <dir_find+0x126>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff ff51 	bl	80072cc <sum_sfn>
 800742a:	4603      	mov	r3, r0
 800742c:	461a      	mov	r2, r3
 800742e:	7d3b      	ldrb	r3, [r7, #20]
 8007430:	4293      	cmp	r3, r2
 8007432:	d024      	beq.n	800747e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <dir_find+0x14a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a18      	ldr	r0, [r3, #32]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3324      	adds	r3, #36	@ 0x24
 800744a:	220b      	movs	r2, #11
 800744c:	4619      	mov	r1, r3
 800744e:	f7fe fe21 	bl	8006094 <mem_cmp>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d014      	beq.n	8007482 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007458:	23ff      	movs	r3, #255	@ 0xff
 800745a:	757b      	strb	r3, [r7, #21]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f04f 32ff 	mov.w	r2, #4294967295
 8007462:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fc6e 	bl	8006d48 <dir_next>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f43f af65 	beq.w	8007342 <dir_find+0x34>
 8007478:	e004      	b.n	8007484 <dir_find+0x176>
		if (res != FR_OK) break;
 800747a:	bf00      	nop
 800747c:	e002      	b.n	8007484 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007482:	bf00      	nop

	return res;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	@ 0x30
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80074a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <dir_register+0x20>
 80074ac:	2306      	movs	r3, #6
 80074ae:	e0e0      	b.n	8007672 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80074b0:	2300      	movs	r3, #0
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074b4:	e002      	b.n	80074bc <dir_register+0x2c>
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	3301      	adds	r3, #1
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f4      	bne.n	80074b6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80074d2:	f107 030c 	add.w	r3, r7, #12
 80074d6:	220c      	movs	r2, #12
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fd9f 	bl	800601c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d032      	beq.n	800754e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2240      	movs	r2, #64	@ 0x40
 80074ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80074f0:	2301      	movs	r3, #1
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074f4:	e016      	b.n	8007524 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	f107 010c 	add.w	r1, r7, #12
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	f7ff fe53 	bl	80071b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff feff 	bl	800730e <dir_find>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007516:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	3301      	adds	r3, #1
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	2b63      	cmp	r3, #99	@ 0x63
 8007528:	d9e5      	bls.n	80074f6 <dir_register+0x66>
 800752a:	e000      	b.n	800752e <dir_register+0x9e>
			if (res != FR_OK) break;
 800752c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	2b64      	cmp	r3, #100	@ 0x64
 8007532:	d101      	bne.n	8007538 <dir_register+0xa8>
 8007534:	2307      	movs	r3, #7
 8007536:	e09c      	b.n	8007672 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800753c:	2b04      	cmp	r3, #4
 800753e:	d002      	beq.n	8007546 <dir_register+0xb6>
 8007540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007544:	e095      	b.n	8007672 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007546:	7dfa      	ldrb	r2, [r7, #23]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <dir_register+0xd8>
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	330c      	adds	r3, #12
 800755c:	4a47      	ldr	r2, [pc, #284]	@ (800767c <dir_register+0x1ec>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	3301      	adds	r3, #1
 8007566:	e000      	b.n	800756a <dir_register+0xda>
 8007568:	2301      	movs	r3, #1
 800756a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800756c:	6a39      	ldr	r1, [r7, #32]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fcc0 	bl	8006ef4 <dir_alloc>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800757a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800757e:	2b00      	cmp	r3, #0
 8007580:	d148      	bne.n	8007614 <dir_register+0x184>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	3b01      	subs	r3, #1
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d042      	beq.n	8007614 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695a      	ldr	r2, [r3, #20]
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	015b      	lsls	r3, r3, #5
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff fb4b 	bl	8006c36 <dir_sdi>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80075a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d132      	bne.n	8007614 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3324      	adds	r3, #36	@ 0x24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fe8a 	bl	80072cc <sum_sfn>
 80075b8:	4603      	mov	r3, r0
 80075ba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4619      	mov	r1, r3
 80075c2:	69f8      	ldr	r0, [r7, #28]
 80075c4:	f7fe ff58 	bl	8006478 <move_window>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80075ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d11d      	bne.n	8007612 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	6918      	ldr	r0, [r3, #16]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a19      	ldr	r1, [r3, #32]
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7efb      	ldrb	r3, [r7, #27]
 80075e4:	f7ff fd7c 	bl	80070e0 <put_lfn>
				fs->wflag = 1;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2201      	movs	r2, #1
 80075ec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fba9 	bl	8006d48 <dir_next>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80075fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <dir_register+0x184>
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	3b01      	subs	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1d5      	bne.n	80075bc <dir_register+0x12c>
 8007610:	e000      	b.n	8007614 <dir_register+0x184>
				if (res != FR_OK) break;
 8007612:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007618:	2b00      	cmp	r3, #0
 800761a:	d128      	bne.n	800766e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	4619      	mov	r1, r3
 8007622:	69f8      	ldr	r0, [r7, #28]
 8007624:	f7fe ff28 	bl	8006478 <move_window>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800762e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d11b      	bne.n	800766e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	2220      	movs	r2, #32
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe fd0d 	bl	800605e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a18      	ldr	r0, [r3, #32]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3324      	adds	r3, #36	@ 0x24
 800764c:	220b      	movs	r2, #11
 800764e:	4619      	mov	r1, r3
 8007650:	f7fe fce4 	bl	800601c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	330c      	adds	r3, #12
 8007660:	f002 0218 	and.w	r2, r2, #24
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2201      	movs	r2, #1
 800766c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800766e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007672:	4618      	mov	r0, r3
 8007674:	3730      	adds	r7, #48	@ 0x30
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	4ec4ec4f 	.word	0x4ec4ec4f

08007680 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	@ 0x28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	61ba      	str	r2, [r7, #24]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80076ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076b0:	2b1f      	cmp	r3, #31
 80076b2:	d940      	bls.n	8007736 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80076b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80076b8:	d006      	beq.n	80076c8 <create_name+0x48>
 80076ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80076be:	d110      	bne.n	80076e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80076c0:	e002      	b.n	80076c8 <create_name+0x48>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	3301      	adds	r3, #1
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	4413      	add	r3, r2
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80076d2:	d0f6      	beq.n	80076c2 <create_name+0x42>
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	4413      	add	r3, r2
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80076de:	d0f0      	beq.n	80076c2 <create_name+0x42>
			break;
 80076e0:	e02a      	b.n	8007738 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80076e6:	d901      	bls.n	80076ec <create_name+0x6c>
 80076e8:	2306      	movs	r3, #6
 80076ea:	e17d      	b.n	80079e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80076ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80076f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076f4:	2101      	movs	r1, #1
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fcda 	bl	80090b0 <ff_convert>
 80076fc:	4603      	mov	r3, r0
 80076fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <create_name+0x8a>
 8007706:	2306      	movs	r3, #6
 8007708:	e16e      	b.n	80079e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800770a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800770c:	2b7f      	cmp	r3, #127	@ 0x7f
 800770e:	d809      	bhi.n	8007724 <create_name+0xa4>
 8007710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007712:	4619      	mov	r1, r3
 8007714:	488d      	ldr	r0, [pc, #564]	@ (800794c <create_name+0x2cc>)
 8007716:	f7fe fce4 	bl	80060e2 <chk_chr>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <create_name+0xa4>
 8007720:	2306      	movs	r3, #6
 8007722:	e161      	b.n	80079e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	617a      	str	r2, [r7, #20]
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007732:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007734:	e7b4      	b.n	80076a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007736:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	441a      	add	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007744:	2b1f      	cmp	r3, #31
 8007746:	d801      	bhi.n	800774c <create_name+0xcc>
 8007748:	2304      	movs	r3, #4
 800774a:	e000      	b.n	800774e <create_name+0xce>
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007752:	e011      	b.n	8007778 <create_name+0xf8>
		w = lfn[di - 1];
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800775a:	3b01      	subs	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007768:	2b20      	cmp	r3, #32
 800776a:	d002      	beq.n	8007772 <create_name+0xf2>
 800776c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800776e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007770:	d106      	bne.n	8007780 <create_name+0x100>
		di--;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	3b01      	subs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1ea      	bne.n	8007754 <create_name+0xd4>
 800777e:	e000      	b.n	8007782 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007780:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	2200      	movs	r2, #0
 800778c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <create_name+0x118>
 8007794:	2306      	movs	r3, #6
 8007796:	e127      	b.n	80079e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3324      	adds	r3, #36	@ 0x24
 800779c:	220b      	movs	r2, #11
 800779e:	2120      	movs	r1, #32
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fc5c 	bl	800605e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e002      	b.n	80077b2 <create_name+0x132>
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3301      	adds	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d0f5      	beq.n	80077ac <create_name+0x12c>
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80077cc:	d0ee      	beq.n	80077ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <create_name+0x168>
 80077d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d8:	f043 0303 	orr.w	r3, r3, #3
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80077e0:	e002      	b.n	80077e8 <create_name+0x168>
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <create_name+0x182>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80077f4:	3b01      	subs	r3, #1
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007800:	d1ef      	bne.n	80077e2 <create_name+0x162>

	i = b = 0; ni = 8;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007808:	2300      	movs	r3, #0
 800780a:	623b      	str	r3, [r7, #32]
 800780c:	2308      	movs	r3, #8
 800780e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	61ba      	str	r2, [r7, #24]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007820:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8090 	beq.w	8007948 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800782a:	2b20      	cmp	r3, #32
 800782c:	d006      	beq.n	800783c <create_name+0x1bc>
 800782e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007830:	2b2e      	cmp	r3, #46	@ 0x2e
 8007832:	d10a      	bne.n	800784a <create_name+0x1ca>
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d006      	beq.n	800784a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007840:	f043 0303 	orr.w	r3, r3, #3
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007848:	e07d      	b.n	8007946 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	429a      	cmp	r2, r3
 8007850:	d203      	bcs.n	800785a <create_name+0x1da>
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	429a      	cmp	r2, r3
 8007858:	d123      	bne.n	80078a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d106      	bne.n	800786e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007864:	f043 0303 	orr.w	r3, r3, #3
 8007868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800786c:	e075      	b.n	800795a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	429a      	cmp	r2, r3
 8007874:	d005      	beq.n	8007882 <create_name+0x202>
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800787a:	f043 0303 	orr.w	r3, r3, #3
 800787e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	429a      	cmp	r2, r3
 8007888:	d866      	bhi.n	8007958 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	2308      	movs	r3, #8
 8007890:	623b      	str	r3, [r7, #32]
 8007892:	230b      	movs	r3, #11
 8007894:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007896:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80078a0:	e051      	b.n	8007946 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80078a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80078a6:	d914      	bls.n	80078d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80078a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fbff 	bl	80090b0 <ff_convert>
 80078b2:	4603      	mov	r3, r0
 80078b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80078b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <create_name+0x246>
 80078bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078be:	3b80      	subs	r3, #128	@ 0x80
 80078c0:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <create_name+0x2d0>)
 80078c2:	5cd3      	ldrb	r3, [r2, r3]
 80078c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80078c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ca:	f043 0302 	orr.w	r3, r3, #2
 80078ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80078d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <create_name+0x268>
 80078d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078da:	4619      	mov	r1, r3
 80078dc:	481d      	ldr	r0, [pc, #116]	@ (8007954 <create_name+0x2d4>)
 80078de:	f7fe fc00 	bl	80060e2 <chk_chr>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80078e8:	235f      	movs	r3, #95	@ 0x5f
 80078ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80078ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078f0:	f043 0303 	orr.w	r3, r3, #3
 80078f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80078f8:	e01b      	b.n	8007932 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80078fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078fc:	2b40      	cmp	r3, #64	@ 0x40
 80078fe:	d909      	bls.n	8007914 <create_name+0x294>
 8007900:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007902:	2b5a      	cmp	r3, #90	@ 0x5a
 8007904:	d806      	bhi.n	8007914 <create_name+0x294>
					b |= 2;
 8007906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800790a:	f043 0302 	orr.w	r3, r3, #2
 800790e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007912:	e00e      	b.n	8007932 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007916:	2b60      	cmp	r3, #96	@ 0x60
 8007918:	d90b      	bls.n	8007932 <create_name+0x2b2>
 800791a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800791c:	2b7a      	cmp	r3, #122	@ 0x7a
 800791e:	d808      	bhi.n	8007932 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800792c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800792e:	3b20      	subs	r3, #32
 8007930:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	623a      	str	r2, [r7, #32]
 8007938:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800793a:	b2d1      	uxtb	r1, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4413      	add	r3, r2
 8007940:	460a      	mov	r2, r1
 8007942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007946:	e763      	b.n	8007810 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007948:	bf00      	nop
 800794a:	e006      	b.n	800795a <create_name+0x2da>
 800794c:	0800bda8 	.word	0x0800bda8
 8007950:	0800be10 	.word	0x0800be10
 8007954:	0800bdb4 	.word	0x0800bdb4
			if (si > di) break;			/* No extension */
 8007958:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007960:	2be5      	cmp	r3, #229	@ 0xe5
 8007962:	d103      	bne.n	800796c <create_name+0x2ec>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2205      	movs	r2, #5
 8007968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b08      	cmp	r3, #8
 8007970:	d104      	bne.n	800797c <create_name+0x2fc>
 8007972:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800797c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d005      	beq.n	8007994 <create_name+0x314>
 8007988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d105      	bne.n	80079a0 <create_name+0x320>
 8007994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007998:	f043 0302 	orr.w	r3, r3, #2
 800799c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80079a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d117      	bne.n	80079dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80079ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d105      	bne.n	80079c4 <create_name+0x344>
 80079b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079bc:	f043 0310 	orr.w	r3, r3, #16
 80079c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80079c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d105      	bne.n	80079dc <create_name+0x35c>
 80079d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079d4:	f043 0308 	orr.w	r3, r3, #8
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80079e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80079e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3728      	adds	r7, #40	@ 0x28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a04:	e002      	b.n	8007a0c <follow_path+0x1c>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a12:	d0f8      	beq.n	8007a06 <follow_path+0x16>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a1a:	d0f4      	beq.n	8007a06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b1f      	cmp	r3, #31
 8007a28:	d80a      	bhi.n	8007a40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2280      	movs	r2, #128	@ 0x80
 8007a2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff f8fe 	bl	8006c36 <dir_sdi>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
 8007a3e:	e048      	b.n	8007ad2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a40:	463b      	mov	r3, r7
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fe1b 	bl	8007680 <create_name>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d139      	bne.n	8007ac8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff fc5a 	bl	800730e <dir_find>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d12c      	bne.n	8007acc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d127      	bne.n	8007acc <follow_path+0xdc>
 8007a7c:	2305      	movs	r3, #5
 8007a7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a80:	e024      	b.n	8007acc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d121      	bne.n	8007ad0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	799b      	ldrb	r3, [r3, #6]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a98:	2305      	movs	r3, #5
 8007a9a:	75fb      	strb	r3, [r7, #23]
 8007a9c:	e019      	b.n	8007ad2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	8992      	ldrh	r2, [r2, #12]
 8007aac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ab0:	fb00 f202 	mul.w	r2, r0, r2
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	4619      	mov	r1, r3
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff fa61 	bl	8006f82 <ld_clust>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ac6:	e7bb      	b.n	8007a40 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <follow_path+0xe2>
				break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ad0:	bf00      	nop
			}
		}
	}

	return res;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d031      	beq.n	8007b56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	e002      	b.n	8007b00 <get_ldnumber+0x24>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	3301      	adds	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b1f      	cmp	r3, #31
 8007b06:	d903      	bls.n	8007b10 <get_ldnumber+0x34>
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b0e:	d1f4      	bne.n	8007afa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b16:	d11c      	bne.n	8007b52 <get_ldnumber+0x76>
			tp = *path;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	60fa      	str	r2, [r7, #12]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	3b30      	subs	r3, #48	@ 0x30
 8007b28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b09      	cmp	r3, #9
 8007b2e:	d80e      	bhi.n	8007b4e <get_ldnumber+0x72>
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d10a      	bne.n	8007b4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <get_ldnumber+0x72>
					vol = (int)i;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	3301      	adds	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	e002      	b.n	8007b58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b56:	693b      	ldr	r3, [r7, #16]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	70da      	strb	r2, [r3, #3]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe fc7a 	bl	8006478 <move_window>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <check_fs+0x2a>
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	e038      	b.n	8007c00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3338      	adds	r3, #56	@ 0x38
 8007b92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe f9be 	bl	8005f18 <ld_word>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d001      	beq.n	8007bac <check_fs+0x48>
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e029      	b.n	8007c00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bb2:	2be9      	cmp	r3, #233	@ 0xe9
 8007bb4:	d009      	beq.n	8007bca <check_fs+0x66>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bbc:	2beb      	cmp	r3, #235	@ 0xeb
 8007bbe:	d11e      	bne.n	8007bfe <check_fs+0x9a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007bc6:	2b90      	cmp	r3, #144	@ 0x90
 8007bc8:	d119      	bne.n	8007bfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3338      	adds	r3, #56	@ 0x38
 8007bce:	3336      	adds	r3, #54	@ 0x36
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe f9b9 	bl	8005f48 <ld_dword>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8007c08 <check_fs+0xa4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d101      	bne.n	8007be6 <check_fs+0x82>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e00c      	b.n	8007c00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3338      	adds	r3, #56	@ 0x38
 8007bea:	3352      	adds	r3, #82	@ 0x52
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe f9ab 	bl	8005f48 <ld_dword>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4a05      	ldr	r2, [pc, #20]	@ (8007c0c <check_fs+0xa8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <check_fs+0x9a>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e000      	b.n	8007c00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bfe:	2302      	movs	r3, #2
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	00544146 	.word	0x00544146
 8007c0c:	33544146 	.word	0x33544146

08007c10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b096      	sub	sp, #88	@ 0x58
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff ff59 	bl	8007adc <get_ldnumber>
 8007c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da01      	bge.n	8007c36 <find_volume+0x26>
 8007c32:	230b      	movs	r3, #11
 8007c34:	e265      	b.n	8008102 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c36:	4a9f      	ldr	r2, [pc, #636]	@ (8007eb4 <find_volume+0x2a4>)
 8007c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <find_volume+0x3a>
 8007c46:	230c      	movs	r3, #12
 8007c48:	e25b      	b.n	8008102 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01a      	beq.n	8007c96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe f8b7 	bl	8005dd8 <disk_status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <find_volume+0x82>
 8007c82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c8e:	230a      	movs	r3, #10
 8007c90:	e237      	b.n	8008102 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007c92:	2300      	movs	r3, #0
 8007c94:	e235      	b.n	8008102 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe f8af 	bl	8005e0c <disk_initialize>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e21e      	b.n	8008102 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <find_volume+0xca>
 8007cca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cce:	f003 0304 	and.w	r3, r3, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	e213      	b.n	8008102 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	7858      	ldrb	r0, [r3, #1]
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	f7fe f8f9 	bl	8005edc <disk_ioctl>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <find_volume+0xe4>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e206      	b.n	8008102 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	899b      	ldrh	r3, [r3, #12]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cfc:	d80d      	bhi.n	8007d1a <find_volume+0x10a>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	899b      	ldrh	r3, [r3, #12]
 8007d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d06:	d308      	bcc.n	8007d1a <find_volume+0x10a>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	899b      	ldrh	r3, [r3, #12]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	899b      	ldrh	r3, [r3, #12]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <find_volume+0x10e>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e1f1      	b.n	8008102 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d26:	f7ff ff1d 	bl	8007b64 <check_fs>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d149      	bne.n	8007dcc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d38:	2300      	movs	r3, #0
 8007d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3c:	e01e      	b.n	8007d7c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007d4c:	4413      	add	r3, r2
 8007d4e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	3304      	adds	r3, #4
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d006      	beq.n	8007d68 <find_volume+0x158>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe f8f2 	bl	8005f48 <ld_dword>
 8007d64:	4602      	mov	r2, r0
 8007d66:	e000      	b.n	8007d6a <find_volume+0x15a>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	3358      	adds	r3, #88	@ 0x58
 8007d70:	443b      	add	r3, r7
 8007d72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d78:	3301      	adds	r3, #1
 8007d7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d9dd      	bls.n	8007d3e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d82:	2300      	movs	r3, #0
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <find_volume+0x182>
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	3358      	adds	r3, #88	@ 0x58
 8007d98:	443b      	add	r3, r7
 8007d9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d9e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <find_volume+0x1a2>
 8007da6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007da8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007daa:	f7ff fedb 	bl	8007b64 <check_fs>
 8007dae:	4603      	mov	r3, r0
 8007db0:	e000      	b.n	8007db4 <find_volume+0x1a4>
 8007db2:	2303      	movs	r3, #3
 8007db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d905      	bls.n	8007dcc <find_volume+0x1bc>
 8007dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d9e2      	bls.n	8007d92 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d101      	bne.n	8007dd8 <find_volume+0x1c8>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e194      	b.n	8008102 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d901      	bls.n	8007de4 <find_volume+0x1d4>
 8007de0:	230d      	movs	r3, #13
 8007de2:	e18e      	b.n	8008102 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	3338      	adds	r3, #56	@ 0x38
 8007de8:	330b      	adds	r3, #11
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe f894 	bl	8005f18 <ld_word>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	899b      	ldrh	r3, [r3, #12]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <find_volume+0x1f0>
 8007dfc:	230d      	movs	r3, #13
 8007dfe:	e180      	b.n	8008102 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e02:	3338      	adds	r3, #56	@ 0x38
 8007e04:	3316      	adds	r3, #22
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe f886 	bl	8005f18 <ld_word>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <find_volume+0x214>
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	3338      	adds	r3, #56	@ 0x38
 8007e1a:	3324      	adds	r3, #36	@ 0x24
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe f893 	bl	8005f48 <ld_dword>
 8007e22:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e28:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	789b      	ldrb	r3, [r3, #2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d005      	beq.n	8007e48 <find_volume+0x238>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d001      	beq.n	8007e48 <find_volume+0x238>
 8007e44:	230d      	movs	r3, #13
 8007e46:	e15c      	b.n	8008102 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	789b      	ldrb	r3, [r3, #2]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	895b      	ldrh	r3, [r3, #10]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <find_volume+0x26c>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	895b      	ldrh	r3, [r3, #10]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e72:	895b      	ldrh	r3, [r3, #10]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <find_volume+0x270>
 8007e7c:	230d      	movs	r3, #13
 8007e7e:	e140      	b.n	8008102 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	3338      	adds	r3, #56	@ 0x38
 8007e84:	3311      	adds	r3, #17
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe f846 	bl	8005f18 <ld_word>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	891b      	ldrh	r3, [r3, #8]
 8007e98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e9a:	8992      	ldrh	r2, [r2, #12]
 8007e9c:	0952      	lsrs	r2, r2, #5
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea4:	fb01 f202 	mul.w	r2, r1, r2
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <find_volume+0x2a8>
 8007eb0:	230d      	movs	r3, #13
 8007eb2:	e126      	b.n	8008102 <find_volume+0x4f2>
 8007eb4:	2000042c 	.word	0x2000042c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	3338      	adds	r3, #56	@ 0x38
 8007ebc:	3313      	adds	r3, #19
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe f82a 	bl	8005f18 <ld_word>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <find_volume+0x2cc>
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	3338      	adds	r3, #56	@ 0x38
 8007ed2:	3320      	adds	r3, #32
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe f837 	bl	8005f48 <ld_dword>
 8007eda:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	3338      	adds	r3, #56	@ 0x38
 8007ee0:	330e      	adds	r3, #14
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe f818 	bl	8005f18 <ld_word>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007eec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <find_volume+0x2e6>
 8007ef2:	230d      	movs	r3, #13
 8007ef4:	e105      	b.n	8008102 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ef6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007efa:	4413      	add	r3, r2
 8007efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007efe:	8911      	ldrh	r1, [r2, #8]
 8007f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f02:	8992      	ldrh	r2, [r2, #12]
 8007f04:	0952      	lsrs	r2, r2, #5
 8007f06:	b292      	uxth	r2, r2
 8007f08:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	4413      	add	r3, r2
 8007f10:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d201      	bcs.n	8007f1e <find_volume+0x30e>
 8007f1a:	230d      	movs	r3, #13
 8007f1c:	e0f1      	b.n	8008102 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f26:	8952      	ldrh	r2, [r2, #10]
 8007f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f2c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <find_volume+0x328>
 8007f34:	230d      	movs	r3, #13
 8007f36:	e0e4      	b.n	8008102 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f40:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d802      	bhi.n	8007f4e <find_volume+0x33e>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d802      	bhi.n	8007f5e <find_volume+0x34e>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	1c9a      	adds	r2, r3, #2
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f6a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f70:	441a      	add	r2, r3
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007f76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	441a      	add	r2, r3
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007f80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d11e      	bne.n	8007fc6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	3338      	adds	r3, #56	@ 0x38
 8007f8c:	332a      	adds	r3, #42	@ 0x2a
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd ffc2 	bl	8005f18 <ld_word>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <find_volume+0x38e>
 8007f9a:	230d      	movs	r3, #13
 8007f9c:	e0b1      	b.n	8008102 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	891b      	ldrh	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <find_volume+0x39a>
 8007fa6:	230d      	movs	r3, #13
 8007fa8:	e0ab      	b.n	8008102 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	3338      	adds	r3, #56	@ 0x38
 8007fae:	332c      	adds	r3, #44	@ 0x2c
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fd ffc9 	bl	8005f48 <ld_dword>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc4:	e01f      	b.n	8008006 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	891b      	ldrh	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <find_volume+0x3c2>
 8007fce:	230d      	movs	r3, #13
 8007fd0:	e097      	b.n	8008102 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd8:	441a      	add	r2, r3
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <find_volume+0x3de>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	e00a      	b.n	8008004 <find_volume+0x3f4>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	69da      	ldr	r2, [r3, #28]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	085a      	lsrs	r2, r3, #1
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	6a1a      	ldr	r2, [r3, #32]
 800800a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800c:	899b      	ldrh	r3, [r3, #12]
 800800e:	4619      	mov	r1, r3
 8008010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008012:	440b      	add	r3, r1
 8008014:	3b01      	subs	r3, #1
 8008016:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008018:	8989      	ldrh	r1, [r1, #12]
 800801a:	fbb3 f3f1 	udiv	r3, r3, r1
 800801e:	429a      	cmp	r2, r3
 8008020:	d201      	bcs.n	8008026 <find_volume+0x416>
 8008022:	230d      	movs	r3, #13
 8008024:	e06d      	b.n	8008102 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	f04f 32ff 	mov.w	r2, #4294967295
 800802c:	619a      	str	r2, [r3, #24]
 800802e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	2280      	movs	r2, #128	@ 0x80
 800803a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800803c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008040:	2b03      	cmp	r3, #3
 8008042:	d149      	bne.n	80080d8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	3338      	adds	r3, #56	@ 0x38
 8008048:	3330      	adds	r3, #48	@ 0x30
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd ff64 	bl	8005f18 <ld_word>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d140      	bne.n	80080d8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008058:	3301      	adds	r3, #1
 800805a:	4619      	mov	r1, r3
 800805c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800805e:	f7fe fa0b 	bl	8006478 <move_window>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d137      	bne.n	80080d8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	2200      	movs	r2, #0
 800806c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	3338      	adds	r3, #56	@ 0x38
 8008072:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008076:	4618      	mov	r0, r3
 8008078:	f7fd ff4e 	bl	8005f18 <ld_word>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008084:	429a      	cmp	r2, r3
 8008086:	d127      	bne.n	80080d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808a:	3338      	adds	r3, #56	@ 0x38
 800808c:	4618      	mov	r0, r3
 800808e:	f7fd ff5b 	bl	8005f48 <ld_dword>
 8008092:	4603      	mov	r3, r0
 8008094:	4a1d      	ldr	r2, [pc, #116]	@ (800810c <find_volume+0x4fc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d11e      	bne.n	80080d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	3338      	adds	r3, #56	@ 0x38
 800809e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd ff50 	bl	8005f48 <ld_dword>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4a19      	ldr	r2, [pc, #100]	@ (8008110 <find_volume+0x500>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d113      	bne.n	80080d8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	3338      	adds	r3, #56	@ 0x38
 80080b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fd ff45 	bl	8005f48 <ld_dword>
 80080be:	4602      	mov	r2, r0
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	3338      	adds	r3, #56	@ 0x38
 80080c8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fd ff3b 	bl	8005f48 <ld_dword>
 80080d2:	4602      	mov	r2, r0
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80080de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008114 <find_volume+0x504>)
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008114 <find_volume+0x504>)
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <find_volume+0x504>)
 80080ee:	881a      	ldrh	r2, [r3, #0]
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	4a08      	ldr	r2, [pc, #32]	@ (8008118 <find_volume+0x508>)
 80080f8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080fc:	f7fe f954 	bl	80063a8 <clear_lock>
#endif
	return FR_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3758      	adds	r7, #88	@ 0x58
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	41615252 	.word	0x41615252
 8008110:	61417272 	.word	0x61417272
 8008114:	20000430 	.word	0x20000430
 8008118:	20000454 	.word	0x20000454

0800811c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008126:	2309      	movs	r3, #9
 8008128:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01c      	beq.n	800816a <validate+0x4e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d018      	beq.n	800816a <validate+0x4e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <validate+0x4e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	889a      	ldrh	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	429a      	cmp	r2, r3
 800814e:	d10c      	bne.n	800816a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd fe3e 	bl	8005dd8 <disk_status>
 800815c:	4603      	mov	r3, r0
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <validate+0x4e>
			res = FR_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <validate+0x5a>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	e000      	b.n	8008178 <validate+0x5c>
 8008176:	2300      	movs	r3, #0
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	6013      	str	r3, [r2, #0]
	return res;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fc9c 	bl	8007adc <get_ldnumber>
 80081a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da01      	bge.n	80081b0 <f_mount+0x28>
 80081ac:	230b      	movs	r3, #11
 80081ae:	e02b      	b.n	8008208 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081b0:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <f_mount+0x88>)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081c0:	69b8      	ldr	r0, [r7, #24]
 80081c2:	f7fe f8f1 	bl	80063a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	490d      	ldr	r1, [pc, #52]	@ (8008210 <f_mount+0x88>)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <f_mount+0x66>
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d001      	beq.n	80081f2 <f_mount+0x6a>
 80081ee:	2300      	movs	r3, #0
 80081f0:	e00a      	b.n	8008208 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081f2:	f107 010c 	add.w	r1, r7, #12
 80081f6:	f107 0308 	add.w	r3, r7, #8
 80081fa:	2200      	movs	r2, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fd07 	bl	8007c10 <find_volume>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008206:	7dfb      	ldrb	r3, [r7, #23]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	2000042c 	.word	0x2000042c

08008214 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b09a      	sub	sp, #104	@ 0x68
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <f_open+0x18>
 8008228:	2309      	movs	r3, #9
 800822a:	e1b7      	b.n	800859c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008232:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008234:	79fa      	ldrb	r2, [r7, #7]
 8008236:	f107 0114 	add.w	r1, r7, #20
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fce6 	bl	8007c10 <find_volume>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800824a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 819b 	bne.w	800858a <f_open+0x376>
		dj.obj.fs = fs;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	f107 0318 	add.w	r3, r7, #24
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fbc5 	bl	80079f0 <follow_path>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800826c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008270:	2b00      	cmp	r3, #0
 8008272:	d118      	bne.n	80082a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008274:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008278:	b25b      	sxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	da03      	bge.n	8008286 <f_open+0x72>
				res = FR_INVALID_NAME;
 800827e:	2306      	movs	r3, #6
 8008280:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008284:	e00f      	b.n	80082a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b01      	cmp	r3, #1
 800828a:	bf8c      	ite	hi
 800828c:	2301      	movhi	r3, #1
 800828e:	2300      	movls	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	f107 0318 	add.w	r3, r7, #24
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd ff3c 	bl	8006118 <chk_lock>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	f003 031c 	and.w	r3, r3, #28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d07f      	beq.n	80083b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80082b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d10e      	bne.n	80082de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082c0:	f7fd ff86 	bl	80061d0 <enq_lock>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <f_open+0xc4>
 80082ca:	f107 0318 	add.w	r3, r7, #24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff f8de 	bl	8007490 <dir_register>
 80082d4:	4603      	mov	r3, r0
 80082d6:	e000      	b.n	80082da <f_open+0xc6>
 80082d8:	2312      	movs	r3, #18
 80082da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	f043 0308 	orr.w	r3, r3, #8
 80082e4:	71fb      	strb	r3, [r7, #7]
 80082e6:	e010      	b.n	800830a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082e8:	7fbb      	ldrb	r3, [r7, #30]
 80082ea:	f003 0311 	and.w	r3, r3, #17
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <f_open+0xe6>
					res = FR_DENIED;
 80082f2:	2307      	movs	r3, #7
 80082f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80082f8:	e007      	b.n	800830a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <f_open+0xf6>
 8008304:	2308      	movs	r3, #8
 8008306:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800830a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800830e:	2b00      	cmp	r3, #0
 8008310:	d168      	bne.n	80083e4 <f_open+0x1d0>
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d063      	beq.n	80083e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800831c:	f7fd fcfe 	bl	8005d1c <get_fattime>
 8008320:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	330e      	adds	r3, #14
 8008326:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008328:	4618      	mov	r0, r3
 800832a:	f7fd fe4b 	bl	8005fc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	3316      	adds	r3, #22
 8008332:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd fe45 	bl	8005fc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	330b      	adds	r3, #11
 800833e:	2220      	movs	r2, #32
 8008340:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fe1a 	bl	8006f82 <ld_clust>
 800834e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008354:	2200      	movs	r2, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe fe32 	bl	8006fc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	331c      	adds	r3, #28
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd fe2e 	bl	8005fc4 <st_dword>
					fs->wflag = 1;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2201      	movs	r2, #1
 800836c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800836e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008370:	2b00      	cmp	r3, #0
 8008372:	d037      	beq.n	80083e4 <f_open+0x1d0>
						dw = fs->winsect;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008378:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800837a:	f107 0318 	add.w	r3, r7, #24
 800837e:	2200      	movs	r2, #0
 8008380:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fb22 	bl	80069cc <remove_chain>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800838e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008392:	2b00      	cmp	r3, #0
 8008394:	d126      	bne.n	80083e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe f86c 	bl	8006478 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083aa:	3a01      	subs	r2, #1
 80083ac:	615a      	str	r2, [r3, #20]
 80083ae:	e019      	b.n	80083e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083b8:	7fbb      	ldrb	r3, [r7, #30]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80083c2:	2304      	movs	r3, #4
 80083c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80083c8:	e00c      	b.n	80083e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <f_open+0x1d0>
 80083d4:	7fbb      	ldrb	r3, [r7, #30]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <f_open+0x1d0>
						res = FR_DENIED;
 80083de:	2307      	movs	r3, #7
 80083e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80083e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d126      	bne.n	800843a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008406:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b01      	cmp	r3, #1
 8008410:	bf8c      	ite	hi
 8008412:	2301      	movhi	r3, #1
 8008414:	2300      	movls	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	f107 0318 	add.w	r3, r7, #24
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd fef7 	bl	8006214 <inc_lock>
 8008426:	4602      	mov	r2, r0
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <f_open+0x226>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800843a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800843e:	2b00      	cmp	r3, #0
 8008440:	f040 80a3 	bne.w	800858a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fd99 	bl	8006f82 <ld_clust>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	331c      	adds	r3, #28
 800845a:	4618      	mov	r0, r3
 800845c:	f7fd fd74 	bl	8005f48 <ld_dword>
 8008460:	4602      	mov	r2, r0
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	88da      	ldrh	r2, [r3, #6]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3330      	adds	r3, #48	@ 0x30
 8008496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd fdde 	bl	800605e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d06e      	beq.n	800858a <f_open+0x376>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d06a      	beq.n	800858a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	895b      	ldrh	r3, [r3, #10]
 80084c0:	461a      	mov	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	899b      	ldrh	r3, [r3, #12]
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d8:	e016      	b.n	8008508 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe f887 	bl	80065f2 <get_fat>
 80084e4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80084e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d802      	bhi.n	80084f2 <f_open+0x2de>
 80084ec:	2302      	movs	r3, #2
 80084ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d102      	bne.n	8008500 <f_open+0x2ec>
 80084fa:	2301      	movs	r3, #1
 80084fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008500:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008508:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <f_open+0x304>
 8008510:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008514:	429a      	cmp	r2, r3
 8008516:	d8e0      	bhi.n	80084da <f_open+0x2c6>
				}
				fp->clust = clst;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800851c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800851e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008522:	2b00      	cmp	r3, #0
 8008524:	d131      	bne.n	800858a <f_open+0x376>
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	899b      	ldrh	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800852e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008532:	fb01 f202 	mul.w	r2, r1, r2
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d026      	beq.n	800858a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe f837 	bl	80065b4 <clust2sect>
 8008546:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <f_open+0x342>
						res = FR_INT_ERR;
 800854e:	2302      	movs	r3, #2
 8008550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008554:	e019      	b.n	800858a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	899b      	ldrh	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800855e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008564:	441a      	add	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	7858      	ldrb	r0, [r3, #1]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	2301      	movs	r3, #1
 800857a:	f7fd fc6f 	bl	8005e5c <disk_read>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <f_open+0x376>
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800858a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <f_open+0x384>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008598:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800859c:	4618      	mov	r0, r3
 800859e:	3768      	adds	r7, #104	@ 0x68
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08e      	sub	sp, #56	@ 0x38
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f107 0214 	add.w	r2, r7, #20
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fda9 	bl	800811c <validate>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d107      	bne.n	80085e8 <f_read+0x44>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	7d5b      	ldrb	r3, [r3, #21]
 80085dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <f_read+0x4a>
 80085e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80085ec:	e135      	b.n	800885a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	7d1b      	ldrb	r3, [r3, #20]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <f_read+0x5a>
 80085fa:	2307      	movs	r3, #7
 80085fc:	e12d      	b.n	800885a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	429a      	cmp	r2, r3
 8008610:	f240 811e 	bls.w	8008850 <f_read+0x2ac>
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008618:	e11a      	b.n	8008850 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	8992      	ldrh	r2, [r2, #12]
 8008622:	fbb3 f1f2 	udiv	r1, r3, r2
 8008626:	fb01 f202 	mul.w	r2, r1, r2
 800862a:	1a9b      	subs	r3, r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 80d5 	bne.w	80087dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	8992      	ldrh	r2, [r2, #12]
 800863a:	fbb3 f3f2 	udiv	r3, r3, r2
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	8952      	ldrh	r2, [r2, #10]
 8008642:	3a01      	subs	r2, #1
 8008644:	4013      	ands	r3, r2
 8008646:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12f      	bne.n	80086ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d103      	bne.n	800865e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	633b      	str	r3, [r7, #48]	@ 0x30
 800865c:	e013      	b.n	8008686 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	4619      	mov	r1, r3
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7fe faaa 	bl	8006bc6 <clmt_clust>
 8008672:	6338      	str	r0, [r7, #48]	@ 0x30
 8008674:	e007      	b.n	8008686 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f7fd ffb7 	bl	80065f2 <get_fat>
 8008684:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	2b01      	cmp	r3, #1
 800868a:	d804      	bhi.n	8008696 <f_read+0xf2>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2202      	movs	r2, #2
 8008690:	755a      	strb	r2, [r3, #21]
 8008692:	2302      	movs	r3, #2
 8008694:	e0e1      	b.n	800885a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d104      	bne.n	80086a8 <f_read+0x104>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	755a      	strb	r2, [r3, #21]
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0d8      	b.n	800885a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fd ff7c 	bl	80065b4 <clust2sect>
 80086bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <f_read+0x12a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2202      	movs	r2, #2
 80086c8:	755a      	strb	r2, [r3, #21]
 80086ca:	2302      	movs	r3, #2
 80086cc:	e0c5      	b.n	800885a <f_read+0x2b6>
			sect += csect;
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d041      	beq.n	800876e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	4413      	add	r3, r2
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	8952      	ldrh	r2, [r2, #10]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d905      	bls.n	8008704 <f_read+0x160>
					cc = fs->csize - csect;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	895b      	ldrh	r3, [r3, #10]
 80086fc:	461a      	mov	r2, r3
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	7858      	ldrb	r0, [r3, #1]
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800870e:	f7fd fba5 	bl	8005e5c <disk_read>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <f_read+0x17e>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	755a      	strb	r2, [r3, #21]
 800871e:	2301      	movs	r3, #1
 8008720:	e09b      	b.n	800885a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	7d1b      	ldrb	r3, [r3, #20]
 8008726:	b25b      	sxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	da18      	bge.n	800875e <f_read+0x1ba>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1a      	ldr	r2, [r3, #32]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008736:	429a      	cmp	r2, r3
 8008738:	d911      	bls.n	800875e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1a      	ldr	r2, [r3, #32]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	8992      	ldrh	r2, [r2, #12]
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874c:	18d0      	adds	r0, r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	899b      	ldrh	r3, [r3, #12]
 8008758:	461a      	mov	r2, r3
 800875a:	f7fd fc5f 	bl	800601c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	899b      	ldrh	r3, [r3, #12]
 8008762:	461a      	mov	r2, r3
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	fb02 f303 	mul.w	r3, r2, r3
 800876a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800876c:	e05c      	b.n	8008828 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	429a      	cmp	r2, r3
 8008776:	d02e      	beq.n	80087d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	b25b      	sxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	da18      	bge.n	80087b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	7858      	ldrb	r0, [r3, #1]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	2301      	movs	r3, #1
 8008792:	f7fd fb83 	bl	8005e9c <disk_write>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <f_read+0x202>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	755a      	strb	r2, [r3, #21]
 80087a2:	2301      	movs	r3, #1
 80087a4:	e059      	b.n	800885a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	7d1b      	ldrb	r3, [r3, #20]
 80087aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	7858      	ldrb	r0, [r3, #1]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087be:	2301      	movs	r3, #1
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	f7fd fb4b 	bl	8005e5c <disk_read>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <f_read+0x232>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2201      	movs	r2, #1
 80087d0:	755a      	strb	r2, [r3, #21]
 80087d2:	2301      	movs	r3, #1
 80087d4:	e041      	b.n	800885a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	899b      	ldrh	r3, [r3, #12]
 80087e0:	4618      	mov	r0, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	8992      	ldrh	r2, [r2, #12]
 80087ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ee:	fb01 f202 	mul.w	r2, r1, r2
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	1ac3      	subs	r3, r0, r3
 80087f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d901      	bls.n	8008804 <f_read+0x260>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	8992      	ldrh	r2, [r2, #12]
 8008812:	fbb3 f0f2 	udiv	r0, r3, r2
 8008816:	fb00 f202 	mul.w	r2, r0, r2
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	440b      	add	r3, r1
 800881e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008820:	4619      	mov	r1, r3
 8008822:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008824:	f7fd fbfa 	bl	800601c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882c:	4413      	add	r3, r2
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	699a      	ldr	r2, [r3, #24]
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	619a      	str	r2, [r3, #24]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008842:	441a      	add	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f aee1 	bne.w	800861a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3738      	adds	r7, #56	@ 0x38
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b08c      	sub	sp, #48	@ 0x30
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f107 0210 	add.w	r2, r7, #16
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fc4a 	bl	800811c <validate>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800888e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d107      	bne.n	80088a6 <f_write+0x44>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	7d5b      	ldrb	r3, [r3, #21]
 800889a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800889e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <f_write+0x4a>
 80088a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088aa:	e16a      	b.n	8008b82 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <f_write+0x5a>
 80088b8:	2307      	movs	r3, #7
 80088ba:	e162      	b.n	8008b82 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	441a      	add	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	f080 814c 	bcs.w	8008b66 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	43db      	mvns	r3, r3
 80088d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088d6:	e146      	b.n	8008b66 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	8992      	ldrh	r2, [r2, #12]
 80088e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80088e4:	fb01 f202 	mul.w	r2, r1, r2
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 80f1 	bne.w	8008ad2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	8992      	ldrh	r2, [r2, #12]
 80088f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	8952      	ldrh	r2, [r2, #10]
 8008900:	3a01      	subs	r2, #1
 8008902:	4013      	ands	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d143      	bne.n	8008994 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10c      	bne.n	800892e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11a      	bne.n	8008956 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe f8b6 	bl	8006a96 <create_chain>
 800892a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800892c:	e013      	b.n	8008956 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	4619      	mov	r1, r3
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7fe f942 	bl	8006bc6 <clmt_clust>
 8008942:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008944:	e007      	b.n	8008956 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fe f8a1 	bl	8006a96 <create_chain>
 8008954:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8109 	beq.w	8008b70 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	2b01      	cmp	r3, #1
 8008962:	d104      	bne.n	800896e <f_write+0x10c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2202      	movs	r2, #2
 8008968:	755a      	strb	r2, [r3, #21]
 800896a:	2302      	movs	r3, #2
 800896c:	e109      	b.n	8008b82 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d104      	bne.n	8008980 <f_write+0x11e>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	755a      	strb	r2, [r3, #21]
 800897c:	2301      	movs	r3, #1
 800897e:	e100      	b.n	8008b82 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008984:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <f_write+0x132>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008992:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	b25b      	sxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	da18      	bge.n	80089d0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	7858      	ldrb	r0, [r3, #1]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a1a      	ldr	r2, [r3, #32]
 80089ac:	2301      	movs	r3, #1
 80089ae:	f7fd fa75 	bl	8005e9c <disk_write>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <f_write+0x160>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	755a      	strb	r2, [r3, #21]
 80089be:	2301      	movs	r3, #1
 80089c0:	e0df      	b.n	8008b82 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fd fdeb 	bl	80065b4 <clust2sect>
 80089de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <f_write+0x18e>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2202      	movs	r2, #2
 80089ea:	755a      	strb	r2, [r3, #21]
 80089ec:	2302      	movs	r3, #2
 80089ee:	e0c8      	b.n	8008b82 <f_write+0x320>
			sect += csect;
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	4413      	add	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	899b      	ldrh	r3, [r3, #12]
 80089fc:	461a      	mov	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a04:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d043      	beq.n	8008a94 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	4413      	add	r3, r2
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	8952      	ldrh	r2, [r2, #10]
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d905      	bls.n	8008a26 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	895b      	ldrh	r3, [r3, #10]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	7858      	ldrb	r0, [r3, #1]
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	69f9      	ldr	r1, [r7, #28]
 8008a30:	f7fd fa34 	bl	8005e9c <disk_write>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <f_write+0x1e2>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	755a      	strb	r2, [r3, #21]
 8008a40:	2301      	movs	r3, #1
 8008a42:	e09e      	b.n	8008b82 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1a      	ldr	r2, [r3, #32]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	6a3a      	ldr	r2, [r7, #32]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d918      	bls.n	8008a84 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	8992      	ldrh	r2, [r2, #12]
 8008a64:	fb02 f303 	mul.w	r3, r2, r3
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	18d1      	adds	r1, r2, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	899b      	ldrh	r3, [r3, #12]
 8008a70:	461a      	mov	r2, r3
 8008a72:	f7fd fad3 	bl	800601c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	7d1b      	ldrb	r3, [r3, #20]
 8008a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	899b      	ldrh	r3, [r3, #12]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	fb02 f303 	mul.w	r3, r2, r3
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008a92:	e04b      	b.n	8008b2c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d016      	beq.n	8008acc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d210      	bcs.n	8008acc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	7858      	ldrb	r0, [r3, #1]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	f7fd f9d0 	bl	8005e5c <disk_read>
 8008abc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	755a      	strb	r2, [r3, #21]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e05a      	b.n	8008b82 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	899b      	ldrh	r3, [r3, #12]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	8992      	ldrh	r2, [r2, #12]
 8008ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ae4:	fb01 f202 	mul.w	r2, r1, r2
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	1ac3      	subs	r3, r0, r3
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d901      	bls.n	8008afa <f_write+0x298>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	8992      	ldrh	r2, [r2, #12]
 8008b08:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b0c:	fb00 f202 	mul.w	r2, r0, r2
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	440b      	add	r3, r1
 8008b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fd fa7f 	bl	800601c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7d1b      	ldrb	r3, [r3, #20]
 8008b22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	4413      	add	r3, r2
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699a      	ldr	r2, [r3, #24]
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	619a      	str	r2, [r3, #24]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	bf38      	it	cc
 8008b4c:	461a      	movcc	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	441a      	add	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f aeb5 	bne.w	80088d8 <f_write+0x76>
 8008b6e:	e000      	b.n	8008b72 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	7d1b      	ldrb	r3, [r3, #20]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3730      	adds	r7, #48	@ 0x30
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f107 0208 	add.w	r2, r7, #8
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fabe 	bl	800811c <validate>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d168      	bne.n	8008c7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d062      	beq.n	8008c7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	7d1b      	ldrb	r3, [r3, #20]
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	da15      	bge.n	8008bec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	7858      	ldrb	r0, [r3, #1]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1a      	ldr	r2, [r3, #32]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f7fd f964 	bl	8005e9c <disk_write>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <f_sync+0x54>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e04f      	b.n	8008c7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	7d1b      	ldrb	r3, [r3, #20]
 8008be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008bec:	f7fd f896 	bl	8005d1c <get_fattime>
 8008bf0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fd fc3c 	bl	8006478 <move_window>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d138      	bne.n	8008c7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	330b      	adds	r3, #11
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	330b      	adds	r3, #11
 8008c1a:	f042 0220 	orr.w	r2, r2, #32
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	68f9      	ldr	r1, [r7, #12]
 8008c2e:	f7fe f9c7 	bl	8006fc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f103 021c 	add.w	r2, r3, #28
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fd f9c0 	bl	8005fc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3316      	adds	r3, #22
 8008c48:	6939      	ldr	r1, [r7, #16]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd f9ba 	bl	8005fc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3312      	adds	r3, #18
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fd f999 	bl	8005f8e <st_word>
					fs->wflag = 1;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd fc35 	bl	80064d4 <sync_fs>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7d1b      	ldrb	r3, [r3, #20]
 8008c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff ff7b 	bl	8008b8a <f_sync>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d118      	bne.n	8008cd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f107 0208 	add.w	r2, r7, #8
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fa38 	bl	800811c <validate>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10c      	bne.n	8008cd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd fb38 	bl	8006330 <dec_lock>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b092      	sub	sp, #72	@ 0x48
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008ce6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe ff8d 	bl	8007c10 <find_volume>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f040 8099 	bne.w	8008e38 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	3b02      	subs	r3, #2
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d804      	bhi.n	8008d24 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	e089      	b.n	8008e38 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d128      	bne.n	8008d82 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d30:	2302      	movs	r3, #2
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd fc57 	bl	80065f2 <get_fat>
 8008d44:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <f_getfree+0x7c>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d54:	e063      	b.n	8008e1e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d103      	bne.n	8008d64 <f_getfree+0x8a>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d62:	e05c      	b.n	8008e1e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <f_getfree+0x96>
 8008d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d72:	3301      	adds	r3, #1
 8008d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d3db      	bcc.n	8008d38 <f_getfree+0x5e>
 8008d80:	e04d      	b.n	8008e1e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	2300      	movs	r3, #0
 8008d94:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d113      	bne.n	8008dc4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008da4:	4619      	mov	r1, r3
 8008da6:	f7fd fb67 	bl	8006478 <move_window>
 8008daa:	4603      	mov	r3, r0
 8008dac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008db0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d131      	bne.n	8008e1c <f_getfree+0x142>
							p = fs->win;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	3338      	adds	r3, #56	@ 0x38
 8008dbc:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	899b      	ldrh	r3, [r3, #12]
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d10f      	bne.n	8008dec <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dce:	f7fd f8a3 	bl	8005f18 <ld_word>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <f_getfree+0x104>
 8008dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dda:	3301      	adds	r3, #1
 8008ddc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	3302      	adds	r3, #2
 8008de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	3b02      	subs	r3, #2
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dea:	e010      	b.n	8008e0e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dee:	f7fd f8ab 	bl	8005f48 <ld_dword>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <f_getfree+0x128>
 8008dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dfe:	3301      	adds	r3, #1
 8008e00:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	3304      	adds	r3, #4
 8008e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0a:	3b04      	subs	r3, #4
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e10:	3b01      	subs	r3, #1
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1bd      	bne.n	8008d96 <f_getfree+0xbc>
 8008e1a:	e000      	b.n	8008e1e <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e1c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e22:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e28:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	791a      	ldrb	r2, [r3, #4]
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	f042 0201 	orr.w	r2, r2, #1
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3748      	adds	r7, #72	@ 0x48
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e58:	e01c      	b.n	8008e94 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	f107 0114 	add.w	r1, r7, #20
 8008e62:	2201      	movs	r2, #1
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fb9d 	bl	80085a4 <f_read>
		if (rc != 1) break;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d117      	bne.n	8008ea0 <f_gets+0x5c>
		c = s[0];
 8008e70:	7d3b      	ldrb	r3, [r7, #20]
 8008e72:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	2b0d      	cmp	r3, #13
 8008e78:	d00b      	beq.n	8008e92 <f_gets+0x4e>
		*p++ = c;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	61ba      	str	r2, [r7, #24]
 8008e80:	7dfa      	ldrb	r2, [r7, #23]
 8008e82:	701a      	strb	r2, [r3, #0]
		n++;
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	3301      	adds	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	2b0a      	cmp	r3, #10
 8008e8e:	d009      	beq.n	8008ea4 <f_gets+0x60>
 8008e90:	e000      	b.n	8008e94 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008e92:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	dbdd      	blt.n	8008e5a <f_gets+0x16>
 8008e9e:	e002      	b.n	8008ea6 <f_gets+0x62>
		if (rc != 1) break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008ea4:	bf00      	nop
	}
	*p = 0;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <f_gets+0x72>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	e000      	b.n	8008eb8 <f_gets+0x74>
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	d103      	bne.n	8008eda <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008ed2:	210d      	movs	r1, #13
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fff3 	bl	8008ec0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db25      	blt.n	8008f32 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	60fa      	str	r2, [r7, #12]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b3c      	cmp	r3, #60	@ 0x3c
 8008ef8:	dd12      	ble.n	8008f20 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f103 010c 	add.w	r1, r3, #12
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	f7ff fcaa 	bl	8008862 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d101      	bne.n	8008f1a <putc_bfd+0x5a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	e001      	b.n	8008f1e <putc_bfd+0x5e>
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	609a      	str	r2, [r3, #8]
 8008f30:	e000      	b.n	8008f34 <putc_bfd+0x74>
	if (i < 0) return;
 8008f32:	bf00      	nop
}
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	db16      	blt.n	8008f78 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f103 010c 	add.w	r1, r3, #12
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f107 030c 	add.w	r3, r7, #12
 8008f5e:	f7ff fc80 	bl	8008862 <f_write>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d107      	bne.n	8008f78 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d102      	bne.n	8008f78 <putc_flush+0x3e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	e001      	b.n	8008f7c <putc_flush+0x42>
	return EOF;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	609a      	str	r2, [r3, #8]
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b096      	sub	sp, #88	@ 0x58
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008fb8:	f107 030c 	add.w	r3, r7, #12
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff ffe0 	bl	8008f84 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008fc4:	e009      	b.n	8008fda <f_puts+0x2c>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff ff73 	bl	8008ec0 <putc_bfd>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f1      	bne.n	8008fc6 <f_puts+0x18>
	return putc_flush(&pb);
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff ffa7 	bl	8008f3a <putc_flush>
 8008fec:	4603      	mov	r3, r0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3758      	adds	r7, #88	@ 0x58
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800900e:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009010:	7a5b      	ldrb	r3, [r3, #9]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d131      	bne.n	800907c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009018:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 800901a:	7a5b      	ldrb	r3, [r3, #9]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	461a      	mov	r2, r3
 8009020:	4b1a      	ldr	r3, [pc, #104]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009022:	2100      	movs	r1, #0
 8009024:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009026:	4b19      	ldr	r3, [pc, #100]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009028:	7a5b      	ldrb	r3, [r3, #9]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	4a17      	ldr	r2, [pc, #92]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009036:	4b15      	ldr	r3, [pc, #84]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009038:	7a5b      	ldrb	r3, [r3, #9]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	461a      	mov	r2, r3
 800903e:	4b13      	ldr	r3, [pc, #76]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009040:	4413      	add	r3, r2
 8009042:	79fa      	ldrb	r2, [r7, #7]
 8009044:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009046:	4b11      	ldr	r3, [pc, #68]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009048:	7a5b      	ldrb	r3, [r3, #9]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	b2d1      	uxtb	r1, r2
 8009050:	4a0e      	ldr	r2, [pc, #56]	@ (800908c <FATFS_LinkDriverEx+0x94>)
 8009052:	7251      	strb	r1, [r2, #9]
 8009054:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009056:	7dbb      	ldrb	r3, [r7, #22]
 8009058:	3330      	adds	r3, #48	@ 0x30
 800905a:	b2da      	uxtb	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	3301      	adds	r3, #1
 8009064:	223a      	movs	r2, #58	@ 0x3a
 8009066:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3302      	adds	r3, #2
 800906c:	222f      	movs	r2, #47	@ 0x2f
 800906e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3303      	adds	r3, #3
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
}
 800907e:	4618      	mov	r0, r3
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000654 	.word	0x20000654

08009090 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800909a:	2200      	movs	r2, #0
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ffaa 	bl	8008ff8 <FATFS_LinkDriverEx>
 80090a4:	4603      	mov	r3, r0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	2b7f      	cmp	r3, #127	@ 0x7f
 80090c0:	d802      	bhi.n	80090c8 <ff_convert+0x18>
		c = chr;
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	81fb      	strh	r3, [r7, #14]
 80090c6:	e025      	b.n	8009114 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	2bff      	cmp	r3, #255	@ 0xff
 80090d2:	d805      	bhi.n	80090e0 <ff_convert+0x30>
 80090d4:	88fb      	ldrh	r3, [r7, #6]
 80090d6:	3b80      	subs	r3, #128	@ 0x80
 80090d8:	4a12      	ldr	r2, [pc, #72]	@ (8009124 <ff_convert+0x74>)
 80090da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090de:	e000      	b.n	80090e2 <ff_convert+0x32>
 80090e0:	2300      	movs	r3, #0
 80090e2:	81fb      	strh	r3, [r7, #14]
 80090e4:	e016      	b.n	8009114 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090e6:	2300      	movs	r3, #0
 80090e8:	81fb      	strh	r3, [r7, #14]
 80090ea:	e009      	b.n	8009100 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090ec:	89fb      	ldrh	r3, [r7, #14]
 80090ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <ff_convert+0x74>)
 80090f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f4:	88fa      	ldrh	r2, [r7, #6]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d006      	beq.n	8009108 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	3301      	adds	r3, #1
 80090fe:	81fb      	strh	r3, [r7, #14]
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	2b7f      	cmp	r3, #127	@ 0x7f
 8009104:	d9f2      	bls.n	80090ec <ff_convert+0x3c>
 8009106:	e000      	b.n	800910a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009108:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800910a:	89fb      	ldrh	r3, [r7, #14]
 800910c:	3380      	adds	r3, #128	@ 0x80
 800910e:	b29b      	uxth	r3, r3
 8009110:	b2db      	uxtb	r3, r3
 8009112:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009114:	89fb      	ldrh	r3, [r7, #14]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	0800bea0 	.word	0x0800bea0

08009128 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009138:	d201      	bcs.n	800913e <ff_wtoupper+0x16>
 800913a:	4b3e      	ldr	r3, [pc, #248]	@ (8009234 <ff_wtoupper+0x10c>)
 800913c:	e000      	b.n	8009140 <ff_wtoupper+0x18>
 800913e:	4b3e      	ldr	r3, [pc, #248]	@ (8009238 <ff_wtoupper+0x110>)
 8009140:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	1c9a      	adds	r2, r3, #2
 8009146:	617a      	str	r2, [r7, #20]
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800914c:	8a7b      	ldrh	r3, [r7, #18]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d068      	beq.n	8009224 <ff_wtoupper+0xfc>
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	8a7b      	ldrh	r3, [r7, #18]
 8009156:	429a      	cmp	r2, r3
 8009158:	d364      	bcc.n	8009224 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	1c9a      	adds	r2, r3, #2
 800915e:	617a      	str	r2, [r7, #20]
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	823b      	strh	r3, [r7, #16]
 8009164:	8a3b      	ldrh	r3, [r7, #16]
 8009166:	0a1b      	lsrs	r3, r3, #8
 8009168:	81fb      	strh	r3, [r7, #14]
 800916a:	8a3b      	ldrh	r3, [r7, #16]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	8a79      	ldrh	r1, [r7, #18]
 8009174:	8a3b      	ldrh	r3, [r7, #16]
 8009176:	440b      	add	r3, r1
 8009178:	429a      	cmp	r2, r3
 800917a:	da49      	bge.n	8009210 <ff_wtoupper+0xe8>
			switch (cmd) {
 800917c:	89fb      	ldrh	r3, [r7, #14]
 800917e:	2b08      	cmp	r3, #8
 8009180:	d84f      	bhi.n	8009222 <ff_wtoupper+0xfa>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <ff_wtoupper+0x60>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091bf 	.word	0x080091bf
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091dd 	.word	0x080091dd
 8009198:	080091e5 	.word	0x080091e5
 800919c:	080091ed 	.word	0x080091ed
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	08009205 	.word	0x08009205
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	8a7b      	ldrh	r3, [r7, #18]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4413      	add	r3, r2
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	80fb      	strh	r3, [r7, #6]
 80091bc:	e027      	b.n	800920e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091be:	88fa      	ldrh	r2, [r7, #6]
 80091c0:	8a7b      	ldrh	r3, [r7, #18]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	80fb      	strh	r3, [r7, #6]
 80091d2:	e01c      	b.n	800920e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	3b10      	subs	r3, #16
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	e018      	b.n	800920e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	3b20      	subs	r3, #32
 80091e0:	80fb      	strh	r3, [r7, #6]
 80091e2:	e014      	b.n	800920e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	3b30      	subs	r3, #48	@ 0x30
 80091e8:	80fb      	strh	r3, [r7, #6]
 80091ea:	e010      	b.n	800920e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	3b1a      	subs	r3, #26
 80091f0:	80fb      	strh	r3, [r7, #6]
 80091f2:	e00c      	b.n	800920e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	3308      	adds	r3, #8
 80091f8:	80fb      	strh	r3, [r7, #6]
 80091fa:	e008      	b.n	800920e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	3b50      	subs	r3, #80	@ 0x50
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	e004      	b.n	800920e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800920a:	80fb      	strh	r3, [r7, #6]
 800920c:	bf00      	nop
			}
			break;
 800920e:	e008      	b.n	8009222 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d195      	bne.n	8009142 <ff_wtoupper+0x1a>
 8009216:	8a3b      	ldrh	r3, [r7, #16]
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009220:	e78f      	b.n	8009142 <ff_wtoupper+0x1a>
			break;
 8009222:	bf00      	nop
	}

	return chr;
 8009224:	88fb      	ldrh	r3, [r7, #6]
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	0800bfa0 	.word	0x0800bfa0
 8009238:	0800c194 	.word	0x0800c194

0800923c <__cvt>:
 800923c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	ec57 6b10 	vmov	r6, r7, d0
 8009244:	2f00      	cmp	r7, #0
 8009246:	460c      	mov	r4, r1
 8009248:	4619      	mov	r1, r3
 800924a:	463b      	mov	r3, r7
 800924c:	bfbb      	ittet	lt
 800924e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009252:	461f      	movlt	r7, r3
 8009254:	2300      	movge	r3, #0
 8009256:	232d      	movlt	r3, #45	@ 0x2d
 8009258:	700b      	strb	r3, [r1, #0]
 800925a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800925c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009260:	4691      	mov	r9, r2
 8009262:	f023 0820 	bic.w	r8, r3, #32
 8009266:	bfbc      	itt	lt
 8009268:	4632      	movlt	r2, r6
 800926a:	4616      	movlt	r6, r2
 800926c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009270:	d005      	beq.n	800927e <__cvt+0x42>
 8009272:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009276:	d100      	bne.n	800927a <__cvt+0x3e>
 8009278:	3401      	adds	r4, #1
 800927a:	2102      	movs	r1, #2
 800927c:	e000      	b.n	8009280 <__cvt+0x44>
 800927e:	2103      	movs	r1, #3
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	ab02      	add	r3, sp, #8
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	ec47 6b10 	vmov	d0, r6, r7
 800928c:	4653      	mov	r3, sl
 800928e:	4622      	mov	r2, r4
 8009290:	f000 ff5e 	bl	800a150 <_dtoa_r>
 8009294:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009298:	4605      	mov	r5, r0
 800929a:	d119      	bne.n	80092d0 <__cvt+0x94>
 800929c:	f019 0f01 	tst.w	r9, #1
 80092a0:	d00e      	beq.n	80092c0 <__cvt+0x84>
 80092a2:	eb00 0904 	add.w	r9, r0, r4
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f7 fc13 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b2:	b108      	cbz	r0, 80092b8 <__cvt+0x7c>
 80092b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80092b8:	2230      	movs	r2, #48	@ 0x30
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	454b      	cmp	r3, r9
 80092be:	d31e      	bcc.n	80092fe <__cvt+0xc2>
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092c4:	1b5b      	subs	r3, r3, r5
 80092c6:	4628      	mov	r0, r5
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	b004      	add	sp, #16
 80092cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80092d4:	eb00 0904 	add.w	r9, r0, r4
 80092d8:	d1e5      	bne.n	80092a6 <__cvt+0x6a>
 80092da:	7803      	ldrb	r3, [r0, #0]
 80092dc:	2b30      	cmp	r3, #48	@ 0x30
 80092de:	d10a      	bne.n	80092f6 <__cvt+0xba>
 80092e0:	2200      	movs	r2, #0
 80092e2:	2300      	movs	r3, #0
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f7 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ec:	b918      	cbnz	r0, 80092f6 <__cvt+0xba>
 80092ee:	f1c4 0401 	rsb	r4, r4, #1
 80092f2:	f8ca 4000 	str.w	r4, [sl]
 80092f6:	f8da 3000 	ldr.w	r3, [sl]
 80092fa:	4499      	add	r9, r3
 80092fc:	e7d3      	b.n	80092a6 <__cvt+0x6a>
 80092fe:	1c59      	adds	r1, r3, #1
 8009300:	9103      	str	r1, [sp, #12]
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e7d9      	b.n	80092ba <__cvt+0x7e>

08009306 <__exponent>:
 8009306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009308:	2900      	cmp	r1, #0
 800930a:	bfba      	itte	lt
 800930c:	4249      	neglt	r1, r1
 800930e:	232d      	movlt	r3, #45	@ 0x2d
 8009310:	232b      	movge	r3, #43	@ 0x2b
 8009312:	2909      	cmp	r1, #9
 8009314:	7002      	strb	r2, [r0, #0]
 8009316:	7043      	strb	r3, [r0, #1]
 8009318:	dd29      	ble.n	800936e <__exponent+0x68>
 800931a:	f10d 0307 	add.w	r3, sp, #7
 800931e:	461d      	mov	r5, r3
 8009320:	270a      	movs	r7, #10
 8009322:	461a      	mov	r2, r3
 8009324:	fbb1 f6f7 	udiv	r6, r1, r7
 8009328:	fb07 1416 	mls	r4, r7, r6, r1
 800932c:	3430      	adds	r4, #48	@ 0x30
 800932e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009332:	460c      	mov	r4, r1
 8009334:	2c63      	cmp	r4, #99	@ 0x63
 8009336:	f103 33ff 	add.w	r3, r3, #4294967295
 800933a:	4631      	mov	r1, r6
 800933c:	dcf1      	bgt.n	8009322 <__exponent+0x1c>
 800933e:	3130      	adds	r1, #48	@ 0x30
 8009340:	1e94      	subs	r4, r2, #2
 8009342:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009346:	1c41      	adds	r1, r0, #1
 8009348:	4623      	mov	r3, r4
 800934a:	42ab      	cmp	r3, r5
 800934c:	d30a      	bcc.n	8009364 <__exponent+0x5e>
 800934e:	f10d 0309 	add.w	r3, sp, #9
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	42ac      	cmp	r4, r5
 8009356:	bf88      	it	hi
 8009358:	2300      	movhi	r3, #0
 800935a:	3302      	adds	r3, #2
 800935c:	4403      	add	r3, r0
 800935e:	1a18      	subs	r0, r3, r0
 8009360:	b003      	add	sp, #12
 8009362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009364:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009368:	f801 6f01 	strb.w	r6, [r1, #1]!
 800936c:	e7ed      	b.n	800934a <__exponent+0x44>
 800936e:	2330      	movs	r3, #48	@ 0x30
 8009370:	3130      	adds	r1, #48	@ 0x30
 8009372:	7083      	strb	r3, [r0, #2]
 8009374:	70c1      	strb	r1, [r0, #3]
 8009376:	1d03      	adds	r3, r0, #4
 8009378:	e7f1      	b.n	800935e <__exponent+0x58>
	...

0800937c <_printf_float>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	b08d      	sub	sp, #52	@ 0x34
 8009382:	460c      	mov	r4, r1
 8009384:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009388:	4616      	mov	r6, r2
 800938a:	461f      	mov	r7, r3
 800938c:	4605      	mov	r5, r0
 800938e:	f000 fdbf 	bl	8009f10 <_localeconv_r>
 8009392:	6803      	ldr	r3, [r0, #0]
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	4618      	mov	r0, r3
 8009398:	f7f6 ff72 	bl	8000280 <strlen>
 800939c:	2300      	movs	r3, #0
 800939e:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a0:	f8d8 3000 	ldr.w	r3, [r8]
 80093a4:	9005      	str	r0, [sp, #20]
 80093a6:	3307      	adds	r3, #7
 80093a8:	f023 0307 	bic.w	r3, r3, #7
 80093ac:	f103 0208 	add.w	r2, r3, #8
 80093b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80093b4:	f8d4 b000 	ldr.w	fp, [r4]
 80093b8:	f8c8 2000 	str.w	r2, [r8]
 80093bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80093c4:	9307      	str	r3, [sp, #28]
 80093c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80093ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80093ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009644 <_printf_float+0x2c8>)
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	f7f7 fbb0 	bl	8000b3c <__aeabi_dcmpun>
 80093dc:	bb70      	cbnz	r0, 800943c <_printf_float+0xc0>
 80093de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093e2:	4b98      	ldr	r3, [pc, #608]	@ (8009644 <_printf_float+0x2c8>)
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295
 80093e8:	f7f7 fb8a 	bl	8000b00 <__aeabi_dcmple>
 80093ec:	bb30      	cbnz	r0, 800943c <_printf_float+0xc0>
 80093ee:	2200      	movs	r2, #0
 80093f0:	2300      	movs	r3, #0
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f7 fb79 	bl	8000aec <__aeabi_dcmplt>
 80093fa:	b110      	cbz	r0, 8009402 <_printf_float+0x86>
 80093fc:	232d      	movs	r3, #45	@ 0x2d
 80093fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009402:	4a91      	ldr	r2, [pc, #580]	@ (8009648 <_printf_float+0x2cc>)
 8009404:	4b91      	ldr	r3, [pc, #580]	@ (800964c <_printf_float+0x2d0>)
 8009406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800940a:	bf94      	ite	ls
 800940c:	4690      	movls	r8, r2
 800940e:	4698      	movhi	r8, r3
 8009410:	2303      	movs	r3, #3
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	f02b 0304 	bic.w	r3, fp, #4
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	9700      	str	r7, [sp, #0]
 8009420:	4633      	mov	r3, r6
 8009422:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f9d2 	bl	80097d0 <_printf_common>
 800942c:	3001      	adds	r0, #1
 800942e:	f040 808d 	bne.w	800954c <_printf_float+0x1d0>
 8009432:	f04f 30ff 	mov.w	r0, #4294967295
 8009436:	b00d      	add	sp, #52	@ 0x34
 8009438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	4642      	mov	r2, r8
 800943e:	464b      	mov	r3, r9
 8009440:	4640      	mov	r0, r8
 8009442:	4649      	mov	r1, r9
 8009444:	f7f7 fb7a 	bl	8000b3c <__aeabi_dcmpun>
 8009448:	b140      	cbz	r0, 800945c <_printf_float+0xe0>
 800944a:	464b      	mov	r3, r9
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfbc      	itt	lt
 8009450:	232d      	movlt	r3, #45	@ 0x2d
 8009452:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009456:	4a7e      	ldr	r2, [pc, #504]	@ (8009650 <_printf_float+0x2d4>)
 8009458:	4b7e      	ldr	r3, [pc, #504]	@ (8009654 <_printf_float+0x2d8>)
 800945a:	e7d4      	b.n	8009406 <_printf_float+0x8a>
 800945c:	6863      	ldr	r3, [r4, #4]
 800945e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009462:	9206      	str	r2, [sp, #24]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	d13b      	bne.n	80094e0 <_printf_float+0x164>
 8009468:	2306      	movs	r3, #6
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009470:	2300      	movs	r3, #0
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	ab0a      	add	r3, sp, #40	@ 0x28
 8009478:	e9cd a301 	strd	sl, r3, [sp, #4]
 800947c:	ab09      	add	r3, sp, #36	@ 0x24
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	6861      	ldr	r1, [r4, #4]
 8009482:	ec49 8b10 	vmov	d0, r8, r9
 8009486:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800948a:	4628      	mov	r0, r5
 800948c:	f7ff fed6 	bl	800923c <__cvt>
 8009490:	9b06      	ldr	r3, [sp, #24]
 8009492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009494:	2b47      	cmp	r3, #71	@ 0x47
 8009496:	4680      	mov	r8, r0
 8009498:	d129      	bne.n	80094ee <_printf_float+0x172>
 800949a:	1cc8      	adds	r0, r1, #3
 800949c:	db02      	blt.n	80094a4 <_printf_float+0x128>
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	4299      	cmp	r1, r3
 80094a2:	dd41      	ble.n	8009528 <_printf_float+0x1ac>
 80094a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80094a8:	fa5f fa8a 	uxtb.w	sl, sl
 80094ac:	3901      	subs	r1, #1
 80094ae:	4652      	mov	r2, sl
 80094b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80094b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80094b6:	f7ff ff26 	bl	8009306 <__exponent>
 80094ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094bc:	1813      	adds	r3, r2, r0
 80094be:	2a01      	cmp	r2, #1
 80094c0:	4681      	mov	r9, r0
 80094c2:	6123      	str	r3, [r4, #16]
 80094c4:	dc02      	bgt.n	80094cc <_printf_float+0x150>
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	07d2      	lsls	r2, r2, #31
 80094ca:	d501      	bpl.n	80094d0 <_printf_float+0x154>
 80094cc:	3301      	adds	r3, #1
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0a2      	beq.n	800941e <_printf_float+0xa2>
 80094d8:	232d      	movs	r3, #45	@ 0x2d
 80094da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094de:	e79e      	b.n	800941e <_printf_float+0xa2>
 80094e0:	9a06      	ldr	r2, [sp, #24]
 80094e2:	2a47      	cmp	r2, #71	@ 0x47
 80094e4:	d1c2      	bne.n	800946c <_printf_float+0xf0>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1c0      	bne.n	800946c <_printf_float+0xf0>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7bd      	b.n	800946a <_printf_float+0xee>
 80094ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094f2:	d9db      	bls.n	80094ac <_printf_float+0x130>
 80094f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80094f8:	d118      	bne.n	800952c <_printf_float+0x1b0>
 80094fa:	2900      	cmp	r1, #0
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	dd0b      	ble.n	8009518 <_printf_float+0x19c>
 8009500:	6121      	str	r1, [r4, #16]
 8009502:	b913      	cbnz	r3, 800950a <_printf_float+0x18e>
 8009504:	6822      	ldr	r2, [r4, #0]
 8009506:	07d0      	lsls	r0, r2, #31
 8009508:	d502      	bpl.n	8009510 <_printf_float+0x194>
 800950a:	3301      	adds	r3, #1
 800950c:	440b      	add	r3, r1
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009512:	f04f 0900 	mov.w	r9, #0
 8009516:	e7db      	b.n	80094d0 <_printf_float+0x154>
 8009518:	b913      	cbnz	r3, 8009520 <_printf_float+0x1a4>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	07d2      	lsls	r2, r2, #31
 800951e:	d501      	bpl.n	8009524 <_printf_float+0x1a8>
 8009520:	3302      	adds	r3, #2
 8009522:	e7f4      	b.n	800950e <_printf_float+0x192>
 8009524:	2301      	movs	r3, #1
 8009526:	e7f2      	b.n	800950e <_printf_float+0x192>
 8009528:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800952c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800952e:	4299      	cmp	r1, r3
 8009530:	db05      	blt.n	800953e <_printf_float+0x1c2>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	6121      	str	r1, [r4, #16]
 8009536:	07d8      	lsls	r0, r3, #31
 8009538:	d5ea      	bpl.n	8009510 <_printf_float+0x194>
 800953a:	1c4b      	adds	r3, r1, #1
 800953c:	e7e7      	b.n	800950e <_printf_float+0x192>
 800953e:	2900      	cmp	r1, #0
 8009540:	bfd4      	ite	le
 8009542:	f1c1 0202 	rsble	r2, r1, #2
 8009546:	2201      	movgt	r2, #1
 8009548:	4413      	add	r3, r2
 800954a:	e7e0      	b.n	800950e <_printf_float+0x192>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	055a      	lsls	r2, r3, #21
 8009550:	d407      	bmi.n	8009562 <_printf_float+0x1e6>
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	4642      	mov	r2, r8
 8009556:	4631      	mov	r1, r6
 8009558:	4628      	mov	r0, r5
 800955a:	47b8      	blx	r7
 800955c:	3001      	adds	r0, #1
 800955e:	d12b      	bne.n	80095b8 <_printf_float+0x23c>
 8009560:	e767      	b.n	8009432 <_printf_float+0xb6>
 8009562:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009566:	f240 80dd 	bls.w	8009724 <_printf_float+0x3a8>
 800956a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800956e:	2200      	movs	r2, #0
 8009570:	2300      	movs	r3, #0
 8009572:	f7f7 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009576:	2800      	cmp	r0, #0
 8009578:	d033      	beq.n	80095e2 <_printf_float+0x266>
 800957a:	4a37      	ldr	r2, [pc, #220]	@ (8009658 <_printf_float+0x2dc>)
 800957c:	2301      	movs	r3, #1
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	f43f af54 	beq.w	8009432 <_printf_float+0xb6>
 800958a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800958e:	4543      	cmp	r3, r8
 8009590:	db02      	blt.n	8009598 <_printf_float+0x21c>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	07d8      	lsls	r0, r3, #31
 8009596:	d50f      	bpl.n	80095b8 <_printf_float+0x23c>
 8009598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af45 	beq.w	8009432 <_printf_float+0xb6>
 80095a8:	f04f 0900 	mov.w	r9, #0
 80095ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80095b0:	f104 0a1a 	add.w	sl, r4, #26
 80095b4:	45c8      	cmp	r8, r9
 80095b6:	dc09      	bgt.n	80095cc <_printf_float+0x250>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	079b      	lsls	r3, r3, #30
 80095bc:	f100 8103 	bmi.w	80097c6 <_printf_float+0x44a>
 80095c0:	68e0      	ldr	r0, [r4, #12]
 80095c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c4:	4298      	cmp	r0, r3
 80095c6:	bfb8      	it	lt
 80095c8:	4618      	movlt	r0, r3
 80095ca:	e734      	b.n	8009436 <_printf_float+0xba>
 80095cc:	2301      	movs	r3, #1
 80095ce:	4652      	mov	r2, sl
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f af2b 	beq.w	8009432 <_printf_float+0xb6>
 80095dc:	f109 0901 	add.w	r9, r9, #1
 80095e0:	e7e8      	b.n	80095b4 <_printf_float+0x238>
 80095e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dc39      	bgt.n	800965c <_printf_float+0x2e0>
 80095e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009658 <_printf_float+0x2dc>)
 80095ea:	2301      	movs	r3, #1
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af1d 	beq.w	8009432 <_printf_float+0xb6>
 80095f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80095fc:	ea59 0303 	orrs.w	r3, r9, r3
 8009600:	d102      	bne.n	8009608 <_printf_float+0x28c>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	07d9      	lsls	r1, r3, #31
 8009606:	d5d7      	bpl.n	80095b8 <_printf_float+0x23c>
 8009608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af0d 	beq.w	8009432 <_printf_float+0xb6>
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	f104 0b1a 	add.w	fp, r4, #26
 8009620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009622:	425b      	negs	r3, r3
 8009624:	4553      	cmp	r3, sl
 8009626:	dc01      	bgt.n	800962c <_printf_float+0x2b0>
 8009628:	464b      	mov	r3, r9
 800962a:	e793      	b.n	8009554 <_printf_float+0x1d8>
 800962c:	2301      	movs	r3, #1
 800962e:	465a      	mov	r2, fp
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f aefb 	beq.w	8009432 <_printf_float+0xb6>
 800963c:	f10a 0a01 	add.w	sl, sl, #1
 8009640:	e7ee      	b.n	8009620 <_printf_float+0x2a4>
 8009642:	bf00      	nop
 8009644:	7fefffff 	.word	0x7fefffff
 8009648:	0800c250 	.word	0x0800c250
 800964c:	0800c254 	.word	0x0800c254
 8009650:	0800c258 	.word	0x0800c258
 8009654:	0800c25c 	.word	0x0800c25c
 8009658:	0800c260 	.word	0x0800c260
 800965c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800965e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009662:	4553      	cmp	r3, sl
 8009664:	bfa8      	it	ge
 8009666:	4653      	movge	r3, sl
 8009668:	2b00      	cmp	r3, #0
 800966a:	4699      	mov	r9, r3
 800966c:	dc36      	bgt.n	80096dc <_printf_float+0x360>
 800966e:	f04f 0b00 	mov.w	fp, #0
 8009672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009676:	f104 021a 	add.w	r2, r4, #26
 800967a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800967c:	9306      	str	r3, [sp, #24]
 800967e:	eba3 0309 	sub.w	r3, r3, r9
 8009682:	455b      	cmp	r3, fp
 8009684:	dc31      	bgt.n	80096ea <_printf_float+0x36e>
 8009686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009688:	459a      	cmp	sl, r3
 800968a:	dc3a      	bgt.n	8009702 <_printf_float+0x386>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07da      	lsls	r2, r3, #31
 8009690:	d437      	bmi.n	8009702 <_printf_float+0x386>
 8009692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009694:	ebaa 0903 	sub.w	r9, sl, r3
 8009698:	9b06      	ldr	r3, [sp, #24]
 800969a:	ebaa 0303 	sub.w	r3, sl, r3
 800969e:	4599      	cmp	r9, r3
 80096a0:	bfa8      	it	ge
 80096a2:	4699      	movge	r9, r3
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	dc33      	bgt.n	8009712 <_printf_float+0x396>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b2:	f104 0b1a 	add.w	fp, r4, #26
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	ebaa 0303 	sub.w	r3, sl, r3
 80096bc:	eba3 0309 	sub.w	r3, r3, r9
 80096c0:	4543      	cmp	r3, r8
 80096c2:	f77f af79 	ble.w	80095b8 <_printf_float+0x23c>
 80096c6:	2301      	movs	r3, #1
 80096c8:	465a      	mov	r2, fp
 80096ca:	4631      	mov	r1, r6
 80096cc:	4628      	mov	r0, r5
 80096ce:	47b8      	blx	r7
 80096d0:	3001      	adds	r0, #1
 80096d2:	f43f aeae 	beq.w	8009432 <_printf_float+0xb6>
 80096d6:	f108 0801 	add.w	r8, r8, #1
 80096da:	e7ec      	b.n	80096b6 <_printf_float+0x33a>
 80096dc:	4642      	mov	r2, r8
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	d1c2      	bne.n	800966e <_printf_float+0x2f2>
 80096e8:	e6a3      	b.n	8009432 <_printf_float+0xb6>
 80096ea:	2301      	movs	r3, #1
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	9206      	str	r2, [sp, #24]
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f ae9c 	beq.w	8009432 <_printf_float+0xb6>
 80096fa:	9a06      	ldr	r2, [sp, #24]
 80096fc:	f10b 0b01 	add.w	fp, fp, #1
 8009700:	e7bb      	b.n	800967a <_printf_float+0x2fe>
 8009702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	47b8      	blx	r7
 800970c:	3001      	adds	r0, #1
 800970e:	d1c0      	bne.n	8009692 <_printf_float+0x316>
 8009710:	e68f      	b.n	8009432 <_printf_float+0xb6>
 8009712:	9a06      	ldr	r2, [sp, #24]
 8009714:	464b      	mov	r3, r9
 8009716:	4442      	add	r2, r8
 8009718:	4631      	mov	r1, r6
 800971a:	4628      	mov	r0, r5
 800971c:	47b8      	blx	r7
 800971e:	3001      	adds	r0, #1
 8009720:	d1c3      	bne.n	80096aa <_printf_float+0x32e>
 8009722:	e686      	b.n	8009432 <_printf_float+0xb6>
 8009724:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009728:	f1ba 0f01 	cmp.w	sl, #1
 800972c:	dc01      	bgt.n	8009732 <_printf_float+0x3b6>
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d536      	bpl.n	80097a0 <_printf_float+0x424>
 8009732:	2301      	movs	r3, #1
 8009734:	4642      	mov	r2, r8
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	f43f ae78 	beq.w	8009432 <_printf_float+0xb6>
 8009742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009746:	4631      	mov	r1, r6
 8009748:	4628      	mov	r0, r5
 800974a:	47b8      	blx	r7
 800974c:	3001      	adds	r0, #1
 800974e:	f43f ae70 	beq.w	8009432 <_printf_float+0xb6>
 8009752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009756:	2200      	movs	r2, #0
 8009758:	2300      	movs	r3, #0
 800975a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800975e:	f7f7 f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009762:	b9c0      	cbnz	r0, 8009796 <_printf_float+0x41a>
 8009764:	4653      	mov	r3, sl
 8009766:	f108 0201 	add.w	r2, r8, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d10c      	bne.n	800978e <_printf_float+0x412>
 8009774:	e65d      	b.n	8009432 <_printf_float+0xb6>
 8009776:	2301      	movs	r3, #1
 8009778:	465a      	mov	r2, fp
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae56 	beq.w	8009432 <_printf_float+0xb6>
 8009786:	f108 0801 	add.w	r8, r8, #1
 800978a:	45d0      	cmp	r8, sl
 800978c:	dbf3      	blt.n	8009776 <_printf_float+0x3fa>
 800978e:	464b      	mov	r3, r9
 8009790:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009794:	e6df      	b.n	8009556 <_printf_float+0x1da>
 8009796:	f04f 0800 	mov.w	r8, #0
 800979a:	f104 0b1a 	add.w	fp, r4, #26
 800979e:	e7f4      	b.n	800978a <_printf_float+0x40e>
 80097a0:	2301      	movs	r3, #1
 80097a2:	4642      	mov	r2, r8
 80097a4:	e7e1      	b.n	800976a <_printf_float+0x3ee>
 80097a6:	2301      	movs	r3, #1
 80097a8:	464a      	mov	r2, r9
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f ae3e 	beq.w	8009432 <_printf_float+0xb6>
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097be:	1a5b      	subs	r3, r3, r1
 80097c0:	4543      	cmp	r3, r8
 80097c2:	dcf0      	bgt.n	80097a6 <_printf_float+0x42a>
 80097c4:	e6fc      	b.n	80095c0 <_printf_float+0x244>
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	f104 0919 	add.w	r9, r4, #25
 80097ce:	e7f4      	b.n	80097ba <_printf_float+0x43e>

080097d0 <_printf_common>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	4616      	mov	r6, r2
 80097d6:	4698      	mov	r8, r3
 80097d8:	688a      	ldr	r2, [r1, #8]
 80097da:	690b      	ldr	r3, [r1, #16]
 80097dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	bfb8      	it	lt
 80097e4:	4613      	movlt	r3, r2
 80097e6:	6033      	str	r3, [r6, #0]
 80097e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097ec:	4607      	mov	r7, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b10a      	cbz	r2, 80097f6 <_printf_common+0x26>
 80097f2:	3301      	adds	r3, #1
 80097f4:	6033      	str	r3, [r6, #0]
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	0699      	lsls	r1, r3, #26
 80097fa:	bf42      	ittt	mi
 80097fc:	6833      	ldrmi	r3, [r6, #0]
 80097fe:	3302      	addmi	r3, #2
 8009800:	6033      	strmi	r3, [r6, #0]
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	f015 0506 	ands.w	r5, r5, #6
 8009808:	d106      	bne.n	8009818 <_printf_common+0x48>
 800980a:	f104 0a19 	add.w	sl, r4, #25
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	6832      	ldr	r2, [r6, #0]
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	42ab      	cmp	r3, r5
 8009816:	dc26      	bgt.n	8009866 <_printf_common+0x96>
 8009818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	3b00      	subs	r3, #0
 8009820:	bf18      	it	ne
 8009822:	2301      	movne	r3, #1
 8009824:	0692      	lsls	r2, r2, #26
 8009826:	d42b      	bmi.n	8009880 <_printf_common+0xb0>
 8009828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800982c:	4641      	mov	r1, r8
 800982e:	4638      	mov	r0, r7
 8009830:	47c8      	blx	r9
 8009832:	3001      	adds	r0, #1
 8009834:	d01e      	beq.n	8009874 <_printf_common+0xa4>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	6922      	ldr	r2, [r4, #16]
 800983a:	f003 0306 	and.w	r3, r3, #6
 800983e:	2b04      	cmp	r3, #4
 8009840:	bf02      	ittt	eq
 8009842:	68e5      	ldreq	r5, [r4, #12]
 8009844:	6833      	ldreq	r3, [r6, #0]
 8009846:	1aed      	subeq	r5, r5, r3
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	bf0c      	ite	eq
 800984c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009850:	2500      	movne	r5, #0
 8009852:	4293      	cmp	r3, r2
 8009854:	bfc4      	itt	gt
 8009856:	1a9b      	subgt	r3, r3, r2
 8009858:	18ed      	addgt	r5, r5, r3
 800985a:	2600      	movs	r6, #0
 800985c:	341a      	adds	r4, #26
 800985e:	42b5      	cmp	r5, r6
 8009860:	d11a      	bne.n	8009898 <_printf_common+0xc8>
 8009862:	2000      	movs	r0, #0
 8009864:	e008      	b.n	8009878 <_printf_common+0xa8>
 8009866:	2301      	movs	r3, #1
 8009868:	4652      	mov	r2, sl
 800986a:	4641      	mov	r1, r8
 800986c:	4638      	mov	r0, r7
 800986e:	47c8      	blx	r9
 8009870:	3001      	adds	r0, #1
 8009872:	d103      	bne.n	800987c <_printf_common+0xac>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987c:	3501      	adds	r5, #1
 800987e:	e7c6      	b.n	800980e <_printf_common+0x3e>
 8009880:	18e1      	adds	r1, r4, r3
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	2030      	movs	r0, #48	@ 0x30
 8009886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800988a:	4422      	add	r2, r4
 800988c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009894:	3302      	adds	r3, #2
 8009896:	e7c7      	b.n	8009828 <_printf_common+0x58>
 8009898:	2301      	movs	r3, #1
 800989a:	4622      	mov	r2, r4
 800989c:	4641      	mov	r1, r8
 800989e:	4638      	mov	r0, r7
 80098a0:	47c8      	blx	r9
 80098a2:	3001      	adds	r0, #1
 80098a4:	d0e6      	beq.n	8009874 <_printf_common+0xa4>
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7d9      	b.n	800985e <_printf_common+0x8e>
	...

080098ac <_printf_i>:
 80098ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	7e0f      	ldrb	r7, [r1, #24]
 80098b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098b4:	2f78      	cmp	r7, #120	@ 0x78
 80098b6:	4691      	mov	r9, r2
 80098b8:	4680      	mov	r8, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	469a      	mov	sl, r3
 80098be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098c2:	d807      	bhi.n	80098d4 <_printf_i+0x28>
 80098c4:	2f62      	cmp	r7, #98	@ 0x62
 80098c6:	d80a      	bhi.n	80098de <_printf_i+0x32>
 80098c8:	2f00      	cmp	r7, #0
 80098ca:	f000 80d2 	beq.w	8009a72 <_printf_i+0x1c6>
 80098ce:	2f58      	cmp	r7, #88	@ 0x58
 80098d0:	f000 80b9 	beq.w	8009a46 <_printf_i+0x19a>
 80098d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098dc:	e03a      	b.n	8009954 <_printf_i+0xa8>
 80098de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098e2:	2b15      	cmp	r3, #21
 80098e4:	d8f6      	bhi.n	80098d4 <_printf_i+0x28>
 80098e6:	a101      	add	r1, pc, #4	@ (adr r1, 80098ec <_printf_i+0x40>)
 80098e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ec:	08009945 	.word	0x08009945
 80098f0:	08009959 	.word	0x08009959
 80098f4:	080098d5 	.word	0x080098d5
 80098f8:	080098d5 	.word	0x080098d5
 80098fc:	080098d5 	.word	0x080098d5
 8009900:	080098d5 	.word	0x080098d5
 8009904:	08009959 	.word	0x08009959
 8009908:	080098d5 	.word	0x080098d5
 800990c:	080098d5 	.word	0x080098d5
 8009910:	080098d5 	.word	0x080098d5
 8009914:	080098d5 	.word	0x080098d5
 8009918:	08009a59 	.word	0x08009a59
 800991c:	08009983 	.word	0x08009983
 8009920:	08009a13 	.word	0x08009a13
 8009924:	080098d5 	.word	0x080098d5
 8009928:	080098d5 	.word	0x080098d5
 800992c:	08009a7b 	.word	0x08009a7b
 8009930:	080098d5 	.word	0x080098d5
 8009934:	08009983 	.word	0x08009983
 8009938:	080098d5 	.word	0x080098d5
 800993c:	080098d5 	.word	0x080098d5
 8009940:	08009a1b 	.word	0x08009a1b
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6032      	str	r2, [r6, #0]
 800994c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009954:	2301      	movs	r3, #1
 8009956:	e09d      	b.n	8009a94 <_printf_i+0x1e8>
 8009958:	6833      	ldr	r3, [r6, #0]
 800995a:	6820      	ldr	r0, [r4, #0]
 800995c:	1d19      	adds	r1, r3, #4
 800995e:	6031      	str	r1, [r6, #0]
 8009960:	0606      	lsls	r6, r0, #24
 8009962:	d501      	bpl.n	8009968 <_printf_i+0xbc>
 8009964:	681d      	ldr	r5, [r3, #0]
 8009966:	e003      	b.n	8009970 <_printf_i+0xc4>
 8009968:	0645      	lsls	r5, r0, #25
 800996a:	d5fb      	bpl.n	8009964 <_printf_i+0xb8>
 800996c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009970:	2d00      	cmp	r5, #0
 8009972:	da03      	bge.n	800997c <_printf_i+0xd0>
 8009974:	232d      	movs	r3, #45	@ 0x2d
 8009976:	426d      	negs	r5, r5
 8009978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800997c:	4859      	ldr	r0, [pc, #356]	@ (8009ae4 <_printf_i+0x238>)
 800997e:	230a      	movs	r3, #10
 8009980:	e011      	b.n	80099a6 <_printf_i+0xfa>
 8009982:	6821      	ldr	r1, [r4, #0]
 8009984:	6833      	ldr	r3, [r6, #0]
 8009986:	0608      	lsls	r0, r1, #24
 8009988:	f853 5b04 	ldr.w	r5, [r3], #4
 800998c:	d402      	bmi.n	8009994 <_printf_i+0xe8>
 800998e:	0649      	lsls	r1, r1, #25
 8009990:	bf48      	it	mi
 8009992:	b2ad      	uxthmi	r5, r5
 8009994:	2f6f      	cmp	r7, #111	@ 0x6f
 8009996:	4853      	ldr	r0, [pc, #332]	@ (8009ae4 <_printf_i+0x238>)
 8009998:	6033      	str	r3, [r6, #0]
 800999a:	bf14      	ite	ne
 800999c:	230a      	movne	r3, #10
 800999e:	2308      	moveq	r3, #8
 80099a0:	2100      	movs	r1, #0
 80099a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099a6:	6866      	ldr	r6, [r4, #4]
 80099a8:	60a6      	str	r6, [r4, #8]
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	bfa2      	ittt	ge
 80099ae:	6821      	ldrge	r1, [r4, #0]
 80099b0:	f021 0104 	bicge.w	r1, r1, #4
 80099b4:	6021      	strge	r1, [r4, #0]
 80099b6:	b90d      	cbnz	r5, 80099bc <_printf_i+0x110>
 80099b8:	2e00      	cmp	r6, #0
 80099ba:	d04b      	beq.n	8009a54 <_printf_i+0x1a8>
 80099bc:	4616      	mov	r6, r2
 80099be:	fbb5 f1f3 	udiv	r1, r5, r3
 80099c2:	fb03 5711 	mls	r7, r3, r1, r5
 80099c6:	5dc7      	ldrb	r7, [r0, r7]
 80099c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099cc:	462f      	mov	r7, r5
 80099ce:	42bb      	cmp	r3, r7
 80099d0:	460d      	mov	r5, r1
 80099d2:	d9f4      	bls.n	80099be <_printf_i+0x112>
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d10b      	bne.n	80099f0 <_printf_i+0x144>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	07df      	lsls	r7, r3, #31
 80099dc:	d508      	bpl.n	80099f0 <_printf_i+0x144>
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6861      	ldr	r1, [r4, #4]
 80099e2:	4299      	cmp	r1, r3
 80099e4:	bfde      	ittt	le
 80099e6:	2330      	movle	r3, #48	@ 0x30
 80099e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099f0:	1b92      	subs	r2, r2, r6
 80099f2:	6122      	str	r2, [r4, #16]
 80099f4:	f8cd a000 	str.w	sl, [sp]
 80099f8:	464b      	mov	r3, r9
 80099fa:	aa03      	add	r2, sp, #12
 80099fc:	4621      	mov	r1, r4
 80099fe:	4640      	mov	r0, r8
 8009a00:	f7ff fee6 	bl	80097d0 <_printf_common>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d14a      	bne.n	8009a9e <_printf_i+0x1f2>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	b004      	add	sp, #16
 8009a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	f043 0320 	orr.w	r3, r3, #32
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	4833      	ldr	r0, [pc, #204]	@ (8009ae8 <_printf_i+0x23c>)
 8009a1c:	2778      	movs	r7, #120	@ 0x78
 8009a1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	6831      	ldr	r1, [r6, #0]
 8009a26:	061f      	lsls	r7, r3, #24
 8009a28:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a2c:	d402      	bmi.n	8009a34 <_printf_i+0x188>
 8009a2e:	065f      	lsls	r7, r3, #25
 8009a30:	bf48      	it	mi
 8009a32:	b2ad      	uxthmi	r5, r5
 8009a34:	6031      	str	r1, [r6, #0]
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	bf44      	itt	mi
 8009a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3e:	6023      	strmi	r3, [r4, #0]
 8009a40:	b11d      	cbz	r5, 8009a4a <_printf_i+0x19e>
 8009a42:	2310      	movs	r3, #16
 8009a44:	e7ac      	b.n	80099a0 <_printf_i+0xf4>
 8009a46:	4827      	ldr	r0, [pc, #156]	@ (8009ae4 <_printf_i+0x238>)
 8009a48:	e7e9      	b.n	8009a1e <_printf_i+0x172>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f023 0320 	bic.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	e7f6      	b.n	8009a42 <_printf_i+0x196>
 8009a54:	4616      	mov	r6, r2
 8009a56:	e7bd      	b.n	80099d4 <_printf_i+0x128>
 8009a58:	6833      	ldr	r3, [r6, #0]
 8009a5a:	6825      	ldr	r5, [r4, #0]
 8009a5c:	6961      	ldr	r1, [r4, #20]
 8009a5e:	1d18      	adds	r0, r3, #4
 8009a60:	6030      	str	r0, [r6, #0]
 8009a62:	062e      	lsls	r6, r5, #24
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	d501      	bpl.n	8009a6c <_printf_i+0x1c0>
 8009a68:	6019      	str	r1, [r3, #0]
 8009a6a:	e002      	b.n	8009a72 <_printf_i+0x1c6>
 8009a6c:	0668      	lsls	r0, r5, #25
 8009a6e:	d5fb      	bpl.n	8009a68 <_printf_i+0x1bc>
 8009a70:	8019      	strh	r1, [r3, #0]
 8009a72:	2300      	movs	r3, #0
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	4616      	mov	r6, r2
 8009a78:	e7bc      	b.n	80099f4 <_printf_i+0x148>
 8009a7a:	6833      	ldr	r3, [r6, #0]
 8009a7c:	1d1a      	adds	r2, r3, #4
 8009a7e:	6032      	str	r2, [r6, #0]
 8009a80:	681e      	ldr	r6, [r3, #0]
 8009a82:	6862      	ldr	r2, [r4, #4]
 8009a84:	2100      	movs	r1, #0
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7f6 fbaa 	bl	80001e0 <memchr>
 8009a8c:	b108      	cbz	r0, 8009a92 <_printf_i+0x1e6>
 8009a8e:	1b80      	subs	r0, r0, r6
 8009a90:	6060      	str	r0, [r4, #4]
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	2300      	movs	r3, #0
 8009a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a9c:	e7aa      	b.n	80099f4 <_printf_i+0x148>
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	47d0      	blx	sl
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d0ad      	beq.n	8009a08 <_printf_i+0x15c>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	079b      	lsls	r3, r3, #30
 8009ab0:	d413      	bmi.n	8009ada <_printf_i+0x22e>
 8009ab2:	68e0      	ldr	r0, [r4, #12]
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	4298      	cmp	r0, r3
 8009ab8:	bfb8      	it	lt
 8009aba:	4618      	movlt	r0, r3
 8009abc:	e7a6      	b.n	8009a0c <_printf_i+0x160>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	47d0      	blx	sl
 8009ac8:	3001      	adds	r0, #1
 8009aca:	d09d      	beq.n	8009a08 <_printf_i+0x15c>
 8009acc:	3501      	adds	r5, #1
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	9903      	ldr	r1, [sp, #12]
 8009ad2:	1a5b      	subs	r3, r3, r1
 8009ad4:	42ab      	cmp	r3, r5
 8009ad6:	dcf2      	bgt.n	8009abe <_printf_i+0x212>
 8009ad8:	e7eb      	b.n	8009ab2 <_printf_i+0x206>
 8009ada:	2500      	movs	r5, #0
 8009adc:	f104 0619 	add.w	r6, r4, #25
 8009ae0:	e7f5      	b.n	8009ace <_printf_i+0x222>
 8009ae2:	bf00      	nop
 8009ae4:	0800c262 	.word	0x0800c262
 8009ae8:	0800c273 	.word	0x0800c273

08009aec <std>:
 8009aec:	2300      	movs	r3, #0
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
 8009af2:	e9c0 3300 	strd	r3, r3, [r0]
 8009af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009afa:	6083      	str	r3, [r0, #8]
 8009afc:	8181      	strh	r1, [r0, #12]
 8009afe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b00:	81c2      	strh	r2, [r0, #14]
 8009b02:	6183      	str	r3, [r0, #24]
 8009b04:	4619      	mov	r1, r3
 8009b06:	2208      	movs	r2, #8
 8009b08:	305c      	adds	r0, #92	@ 0x5c
 8009b0a:	f000 f9f9 	bl	8009f00 <memset>
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b44 <std+0x58>)
 8009b10:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b12:	4b0d      	ldr	r3, [pc, #52]	@ (8009b48 <std+0x5c>)
 8009b14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b16:	4b0d      	ldr	r3, [pc, #52]	@ (8009b4c <std+0x60>)
 8009b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <std+0x64>)
 8009b1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <std+0x68>)
 8009b20:	6224      	str	r4, [r4, #32]
 8009b22:	429c      	cmp	r4, r3
 8009b24:	d006      	beq.n	8009b34 <std+0x48>
 8009b26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b2a:	4294      	cmp	r4, r2
 8009b2c:	d002      	beq.n	8009b34 <std+0x48>
 8009b2e:	33d0      	adds	r3, #208	@ 0xd0
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d105      	bne.n	8009b40 <std+0x54>
 8009b34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	f000 ba5c 	b.w	8009ff8 <__retarget_lock_init_recursive>
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	08009d51 	.word	0x08009d51
 8009b48:	08009d73 	.word	0x08009d73
 8009b4c:	08009dab 	.word	0x08009dab
 8009b50:	08009dcf 	.word	0x08009dcf
 8009b54:	20000660 	.word	0x20000660

08009b58 <stdio_exit_handler>:
 8009b58:	4a02      	ldr	r2, [pc, #8]	@ (8009b64 <stdio_exit_handler+0xc>)
 8009b5a:	4903      	ldr	r1, [pc, #12]	@ (8009b68 <stdio_exit_handler+0x10>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	@ (8009b6c <stdio_exit_handler+0x14>)
 8009b5e:	f000 b869 	b.w	8009c34 <_fwalk_sglue>
 8009b62:	bf00      	nop
 8009b64:	20000024 	.word	0x20000024
 8009b68:	0800b969 	.word	0x0800b969
 8009b6c:	20000034 	.word	0x20000034

08009b70 <cleanup_stdio>:
 8009b70:	6841      	ldr	r1, [r0, #4]
 8009b72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ba4 <cleanup_stdio+0x34>)
 8009b74:	4299      	cmp	r1, r3
 8009b76:	b510      	push	{r4, lr}
 8009b78:	4604      	mov	r4, r0
 8009b7a:	d001      	beq.n	8009b80 <cleanup_stdio+0x10>
 8009b7c:	f001 fef4 	bl	800b968 <_fflush_r>
 8009b80:	68a1      	ldr	r1, [r4, #8]
 8009b82:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <cleanup_stdio+0x38>)
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <cleanup_stdio+0x1e>
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f001 feed 	bl	800b968 <_fflush_r>
 8009b8e:	68e1      	ldr	r1, [r4, #12]
 8009b90:	4b06      	ldr	r3, [pc, #24]	@ (8009bac <cleanup_stdio+0x3c>)
 8009b92:	4299      	cmp	r1, r3
 8009b94:	d004      	beq.n	8009ba0 <cleanup_stdio+0x30>
 8009b96:	4620      	mov	r0, r4
 8009b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9c:	f001 bee4 	b.w	800b968 <_fflush_r>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000660 	.word	0x20000660
 8009ba8:	200006c8 	.word	0x200006c8
 8009bac:	20000730 	.word	0x20000730

08009bb0 <global_stdio_init.part.0>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009be0 <global_stdio_init.part.0+0x30>)
 8009bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8009be4 <global_stdio_init.part.0+0x34>)
 8009bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8009be8 <global_stdio_init.part.0+0x38>)
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2104      	movs	r1, #4
 8009bc0:	f7ff ff94 	bl	8009aec <std>
 8009bc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bc8:	2201      	movs	r2, #1
 8009bca:	2109      	movs	r1, #9
 8009bcc:	f7ff ff8e 	bl	8009aec <std>
 8009bd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bda:	2112      	movs	r1, #18
 8009bdc:	f7ff bf86 	b.w	8009aec <std>
 8009be0:	20000798 	.word	0x20000798
 8009be4:	20000660 	.word	0x20000660
 8009be8:	08009b59 	.word	0x08009b59

08009bec <__sfp_lock_acquire>:
 8009bec:	4801      	ldr	r0, [pc, #4]	@ (8009bf4 <__sfp_lock_acquire+0x8>)
 8009bee:	f000 ba04 	b.w	8009ffa <__retarget_lock_acquire_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	200007a1 	.word	0x200007a1

08009bf8 <__sfp_lock_release>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	@ (8009c00 <__sfp_lock_release+0x8>)
 8009bfa:	f000 b9ff 	b.w	8009ffc <__retarget_lock_release_recursive>
 8009bfe:	bf00      	nop
 8009c00:	200007a1 	.word	0x200007a1

08009c04 <__sinit>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	4604      	mov	r4, r0
 8009c08:	f7ff fff0 	bl	8009bec <__sfp_lock_acquire>
 8009c0c:	6a23      	ldr	r3, [r4, #32]
 8009c0e:	b11b      	cbz	r3, 8009c18 <__sinit+0x14>
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f7ff bff0 	b.w	8009bf8 <__sfp_lock_release>
 8009c18:	4b04      	ldr	r3, [pc, #16]	@ (8009c2c <__sinit+0x28>)
 8009c1a:	6223      	str	r3, [r4, #32]
 8009c1c:	4b04      	ldr	r3, [pc, #16]	@ (8009c30 <__sinit+0x2c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1f5      	bne.n	8009c10 <__sinit+0xc>
 8009c24:	f7ff ffc4 	bl	8009bb0 <global_stdio_init.part.0>
 8009c28:	e7f2      	b.n	8009c10 <__sinit+0xc>
 8009c2a:	bf00      	nop
 8009c2c:	08009b71 	.word	0x08009b71
 8009c30:	20000798 	.word	0x20000798

08009c34 <_fwalk_sglue>:
 8009c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c38:	4607      	mov	r7, r0
 8009c3a:	4688      	mov	r8, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c44:	f1b9 0901 	subs.w	r9, r9, #1
 8009c48:	d505      	bpl.n	8009c56 <_fwalk_sglue+0x22>
 8009c4a:	6824      	ldr	r4, [r4, #0]
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	d1f7      	bne.n	8009c40 <_fwalk_sglue+0xc>
 8009c50:	4630      	mov	r0, r6
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d907      	bls.n	8009c6c <_fwalk_sglue+0x38>
 8009c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c60:	3301      	adds	r3, #1
 8009c62:	d003      	beq.n	8009c6c <_fwalk_sglue+0x38>
 8009c64:	4629      	mov	r1, r5
 8009c66:	4638      	mov	r0, r7
 8009c68:	47c0      	blx	r8
 8009c6a:	4306      	orrs	r6, r0
 8009c6c:	3568      	adds	r5, #104	@ 0x68
 8009c6e:	e7e9      	b.n	8009c44 <_fwalk_sglue+0x10>

08009c70 <iprintf>:
 8009c70:	b40f      	push	{r0, r1, r2, r3}
 8009c72:	b507      	push	{r0, r1, r2, lr}
 8009c74:	4906      	ldr	r1, [pc, #24]	@ (8009c90 <iprintf+0x20>)
 8009c76:	ab04      	add	r3, sp, #16
 8009c78:	6808      	ldr	r0, [r1, #0]
 8009c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7e:	6881      	ldr	r1, [r0, #8]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f001 fcd5 	bl	800b630 <_vfiprintf_r>
 8009c86:	b003      	add	sp, #12
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	b004      	add	sp, #16
 8009c8e:	4770      	bx	lr
 8009c90:	20000030 	.word	0x20000030

08009c94 <_puts_r>:
 8009c94:	6a03      	ldr	r3, [r0, #32]
 8009c96:	b570      	push	{r4, r5, r6, lr}
 8009c98:	6884      	ldr	r4, [r0, #8]
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <_puts_r+0x10>
 8009ca0:	f7ff ffb0 	bl	8009c04 <__sinit>
 8009ca4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ca6:	07db      	lsls	r3, r3, #31
 8009ca8:	d405      	bmi.n	8009cb6 <_puts_r+0x22>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	0598      	lsls	r0, r3, #22
 8009cae:	d402      	bmi.n	8009cb6 <_puts_r+0x22>
 8009cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cb2:	f000 f9a2 	bl	8009ffa <__retarget_lock_acquire_recursive>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	0719      	lsls	r1, r3, #28
 8009cba:	d502      	bpl.n	8009cc2 <_puts_r+0x2e>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d135      	bne.n	8009d2e <_puts_r+0x9a>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 f8c5 	bl	8009e54 <__swsetup_r>
 8009cca:	b380      	cbz	r0, 8009d2e <_puts_r+0x9a>
 8009ccc:	f04f 35ff 	mov.w	r5, #4294967295
 8009cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cd2:	07da      	lsls	r2, r3, #31
 8009cd4:	d405      	bmi.n	8009ce2 <_puts_r+0x4e>
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	059b      	lsls	r3, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_puts_r+0x4e>
 8009cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cde:	f000 f98d 	bl	8009ffc <__retarget_lock_release_recursive>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	bd70      	pop	{r4, r5, r6, pc}
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da04      	bge.n	8009cf4 <_puts_r+0x60>
 8009cea:	69a2      	ldr	r2, [r4, #24]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	dc17      	bgt.n	8009d20 <_puts_r+0x8c>
 8009cf0:	290a      	cmp	r1, #10
 8009cf2:	d015      	beq.n	8009d20 <_puts_r+0x8c>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	6022      	str	r2, [r4, #0]
 8009cfa:	7019      	strb	r1, [r3, #0]
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d02:	3b01      	subs	r3, #1
 8009d04:	60a3      	str	r3, [r4, #8]
 8009d06:	2900      	cmp	r1, #0
 8009d08:	d1ed      	bne.n	8009ce6 <_puts_r+0x52>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da11      	bge.n	8009d32 <_puts_r+0x9e>
 8009d0e:	4622      	mov	r2, r4
 8009d10:	210a      	movs	r1, #10
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f85f 	bl	8009dd6 <__swbuf_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0d7      	beq.n	8009ccc <_puts_r+0x38>
 8009d1c:	250a      	movs	r5, #10
 8009d1e:	e7d7      	b.n	8009cd0 <_puts_r+0x3c>
 8009d20:	4622      	mov	r2, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 f857 	bl	8009dd6 <__swbuf_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d1e7      	bne.n	8009cfc <_puts_r+0x68>
 8009d2c:	e7ce      	b.n	8009ccc <_puts_r+0x38>
 8009d2e:	3e01      	subs	r6, #1
 8009d30:	e7e4      	b.n	8009cfc <_puts_r+0x68>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	6022      	str	r2, [r4, #0]
 8009d38:	220a      	movs	r2, #10
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	e7ee      	b.n	8009d1c <_puts_r+0x88>
	...

08009d40 <puts>:
 8009d40:	4b02      	ldr	r3, [pc, #8]	@ (8009d4c <puts+0xc>)
 8009d42:	4601      	mov	r1, r0
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f7ff bfa5 	b.w	8009c94 <_puts_r>
 8009d4a:	bf00      	nop
 8009d4c:	20000030 	.word	0x20000030

08009d50 <__sread>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	460c      	mov	r4, r1
 8009d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d58:	f000 f900 	bl	8009f5c <_read_r>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	bfab      	itete	ge
 8009d60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d62:	89a3      	ldrhlt	r3, [r4, #12]
 8009d64:	181b      	addge	r3, r3, r0
 8009d66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d6a:	bfac      	ite	ge
 8009d6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d6e:	81a3      	strhlt	r3, [r4, #12]
 8009d70:	bd10      	pop	{r4, pc}

08009d72 <__swrite>:
 8009d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d76:	461f      	mov	r7, r3
 8009d78:	898b      	ldrh	r3, [r1, #12]
 8009d7a:	05db      	lsls	r3, r3, #23
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4616      	mov	r6, r2
 8009d82:	d505      	bpl.n	8009d90 <__swrite+0x1e>
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	2302      	movs	r3, #2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f000 f8d4 	bl	8009f38 <_lseek_r>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	4628      	mov	r0, r5
 8009da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	f000 b8eb 	b.w	8009f80 <_write_r>

08009daa <__sseek>:
 8009daa:	b510      	push	{r4, lr}
 8009dac:	460c      	mov	r4, r1
 8009dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db2:	f000 f8c1 	bl	8009f38 <_lseek_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	bf15      	itete	ne
 8009dbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dc6:	81a3      	strheq	r3, [r4, #12]
 8009dc8:	bf18      	it	ne
 8009dca:	81a3      	strhne	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__sclose>:
 8009dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd2:	f000 b8a1 	b.w	8009f18 <_close_r>

08009dd6 <__swbuf_r>:
 8009dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd8:	460e      	mov	r6, r1
 8009dda:	4614      	mov	r4, r2
 8009ddc:	4605      	mov	r5, r0
 8009dde:	b118      	cbz	r0, 8009de8 <__swbuf_r+0x12>
 8009de0:	6a03      	ldr	r3, [r0, #32]
 8009de2:	b90b      	cbnz	r3, 8009de8 <__swbuf_r+0x12>
 8009de4:	f7ff ff0e 	bl	8009c04 <__sinit>
 8009de8:	69a3      	ldr	r3, [r4, #24]
 8009dea:	60a3      	str	r3, [r4, #8]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	071a      	lsls	r2, r3, #28
 8009df0:	d501      	bpl.n	8009df6 <__swbuf_r+0x20>
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b943      	cbnz	r3, 8009e08 <__swbuf_r+0x32>
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 f82b 	bl	8009e54 <__swsetup_r>
 8009dfe:	b118      	cbz	r0, 8009e08 <__swbuf_r+0x32>
 8009e00:	f04f 37ff 	mov.w	r7, #4294967295
 8009e04:	4638      	mov	r0, r7
 8009e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	6922      	ldr	r2, [r4, #16]
 8009e0c:	1a98      	subs	r0, r3, r2
 8009e0e:	6963      	ldr	r3, [r4, #20]
 8009e10:	b2f6      	uxtb	r6, r6
 8009e12:	4283      	cmp	r3, r0
 8009e14:	4637      	mov	r7, r6
 8009e16:	dc05      	bgt.n	8009e24 <__swbuf_r+0x4e>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f001 fda4 	bl	800b968 <_fflush_r>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1ed      	bne.n	8009e00 <__swbuf_r+0x2a>
 8009e24:	68a3      	ldr	r3, [r4, #8]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	6022      	str	r2, [r4, #0]
 8009e30:	701e      	strb	r6, [r3, #0]
 8009e32:	6962      	ldr	r2, [r4, #20]
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d004      	beq.n	8009e44 <__swbuf_r+0x6e>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	07db      	lsls	r3, r3, #31
 8009e3e:	d5e1      	bpl.n	8009e04 <__swbuf_r+0x2e>
 8009e40:	2e0a      	cmp	r6, #10
 8009e42:	d1df      	bne.n	8009e04 <__swbuf_r+0x2e>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	f001 fd8e 	bl	800b968 <_fflush_r>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d0d9      	beq.n	8009e04 <__swbuf_r+0x2e>
 8009e50:	e7d6      	b.n	8009e00 <__swbuf_r+0x2a>
	...

08009e54 <__swsetup_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4b29      	ldr	r3, [pc, #164]	@ (8009efc <__swsetup_r+0xa8>)
 8009e58:	4605      	mov	r5, r0
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	b118      	cbz	r0, 8009e68 <__swsetup_r+0x14>
 8009e60:	6a03      	ldr	r3, [r0, #32]
 8009e62:	b90b      	cbnz	r3, 8009e68 <__swsetup_r+0x14>
 8009e64:	f7ff fece 	bl	8009c04 <__sinit>
 8009e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6c:	0719      	lsls	r1, r3, #28
 8009e6e:	d422      	bmi.n	8009eb6 <__swsetup_r+0x62>
 8009e70:	06da      	lsls	r2, r3, #27
 8009e72:	d407      	bmi.n	8009e84 <__swsetup_r+0x30>
 8009e74:	2209      	movs	r2, #9
 8009e76:	602a      	str	r2, [r5, #0]
 8009e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	e033      	b.n	8009eec <__swsetup_r+0x98>
 8009e84:	0758      	lsls	r0, r3, #29
 8009e86:	d512      	bpl.n	8009eae <__swsetup_r+0x5a>
 8009e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e8a:	b141      	cbz	r1, 8009e9e <__swsetup_r+0x4a>
 8009e8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e90:	4299      	cmp	r1, r3
 8009e92:	d002      	beq.n	8009e9a <__swsetup_r+0x46>
 8009e94:	4628      	mov	r0, r5
 8009e96:	f000 ff1f 	bl	800acd8 <_free_r>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6063      	str	r3, [r4, #4]
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	f043 0308 	orr.w	r3, r3, #8
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	b94b      	cbnz	r3, 8009ece <__swsetup_r+0x7a>
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec4:	d003      	beq.n	8009ece <__swsetup_r+0x7a>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f001 fdad 	bl	800ba28 <__smakebuf_r>
 8009ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed2:	f013 0201 	ands.w	r2, r3, #1
 8009ed6:	d00a      	beq.n	8009eee <__swsetup_r+0x9a>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	60a2      	str	r2, [r4, #8]
 8009edc:	6962      	ldr	r2, [r4, #20]
 8009ede:	4252      	negs	r2, r2
 8009ee0:	61a2      	str	r2, [r4, #24]
 8009ee2:	6922      	ldr	r2, [r4, #16]
 8009ee4:	b942      	cbnz	r2, 8009ef8 <__swsetup_r+0xa4>
 8009ee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009eea:	d1c5      	bne.n	8009e78 <__swsetup_r+0x24>
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
 8009eee:	0799      	lsls	r1, r3, #30
 8009ef0:	bf58      	it	pl
 8009ef2:	6962      	ldrpl	r2, [r4, #20]
 8009ef4:	60a2      	str	r2, [r4, #8]
 8009ef6:	e7f4      	b.n	8009ee2 <__swsetup_r+0x8e>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	e7f7      	b.n	8009eec <__swsetup_r+0x98>
 8009efc:	20000030 	.word	0x20000030

08009f00 <memset>:
 8009f00:	4402      	add	r2, r0
 8009f02:	4603      	mov	r3, r0
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d100      	bne.n	8009f0a <memset+0xa>
 8009f08:	4770      	bx	lr
 8009f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0e:	e7f9      	b.n	8009f04 <memset+0x4>

08009f10 <_localeconv_r>:
 8009f10:	4800      	ldr	r0, [pc, #0]	@ (8009f14 <_localeconv_r+0x4>)
 8009f12:	4770      	bx	lr
 8009f14:	20000170 	.word	0x20000170

08009f18 <_close_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d06      	ldr	r5, [pc, #24]	@ (8009f34 <_close_r+0x1c>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	f7f8 fcac 	bl	8002880 <_close>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_close_r+0x1a>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_close_r+0x1a>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	2000079c 	.word	0x2000079c

08009f38 <_lseek_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	@ (8009f58 <_lseek_r+0x20>)
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	4608      	mov	r0, r1
 8009f40:	4611      	mov	r1, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	602a      	str	r2, [r5, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f7f8 fcc1 	bl	80028ce <_lseek>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_lseek_r+0x1e>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_lseek_r+0x1e>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	2000079c 	.word	0x2000079c

08009f5c <_read_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	@ (8009f7c <_read_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7f8 fc4f 	bl	800280e <_read>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_read_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_read_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	2000079c 	.word	0x2000079c

08009f80 <_write_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d07      	ldr	r5, [pc, #28]	@ (8009fa0 <_write_r+0x20>)
 8009f84:	4604      	mov	r4, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7f8 fc5a 	bl	8002848 <_write>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_write_r+0x1e>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_write_r+0x1e>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	2000079c 	.word	0x2000079c

08009fa4 <__errno>:
 8009fa4:	4b01      	ldr	r3, [pc, #4]	@ (8009fac <__errno+0x8>)
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20000030 	.word	0x20000030

08009fb0 <__libc_init_array>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8009fe8 <__libc_init_array+0x38>)
 8009fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8009fec <__libc_init_array+0x3c>)
 8009fb6:	1b64      	subs	r4, r4, r5
 8009fb8:	10a4      	asrs	r4, r4, #2
 8009fba:	2600      	movs	r6, #0
 8009fbc:	42a6      	cmp	r6, r4
 8009fbe:	d109      	bne.n	8009fd4 <__libc_init_array+0x24>
 8009fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8009ff0 <__libc_init_array+0x40>)
 8009fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8009ff4 <__libc_init_array+0x44>)
 8009fc4:	f001 fe2a 	bl	800bc1c <_init>
 8009fc8:	1b64      	subs	r4, r4, r5
 8009fca:	10a4      	asrs	r4, r4, #2
 8009fcc:	2600      	movs	r6, #0
 8009fce:	42a6      	cmp	r6, r4
 8009fd0:	d105      	bne.n	8009fde <__libc_init_array+0x2e>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd8:	4798      	blx	r3
 8009fda:	3601      	adds	r6, #1
 8009fdc:	e7ee      	b.n	8009fbc <__libc_init_array+0xc>
 8009fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe2:	4798      	blx	r3
 8009fe4:	3601      	adds	r6, #1
 8009fe6:	e7f2      	b.n	8009fce <__libc_init_array+0x1e>
 8009fe8:	0800c5cc 	.word	0x0800c5cc
 8009fec:	0800c5cc 	.word	0x0800c5cc
 8009ff0:	0800c5cc 	.word	0x0800c5cc
 8009ff4:	0800c5d0 	.word	0x0800c5d0

08009ff8 <__retarget_lock_init_recursive>:
 8009ff8:	4770      	bx	lr

08009ffa <__retarget_lock_acquire_recursive>:
 8009ffa:	4770      	bx	lr

08009ffc <__retarget_lock_release_recursive>:
 8009ffc:	4770      	bx	lr
	...

0800a000 <__assert_func>:
 800a000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a002:	4614      	mov	r4, r2
 800a004:	461a      	mov	r2, r3
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <__assert_func+0x2c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4605      	mov	r5, r0
 800a00c:	68d8      	ldr	r0, [r3, #12]
 800a00e:	b954      	cbnz	r4, 800a026 <__assert_func+0x26>
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <__assert_func+0x30>)
 800a012:	461c      	mov	r4, r3
 800a014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a018:	9100      	str	r1, [sp, #0]
 800a01a:	462b      	mov	r3, r5
 800a01c:	4905      	ldr	r1, [pc, #20]	@ (800a034 <__assert_func+0x34>)
 800a01e:	f001 fccb 	bl	800b9b8 <fiprintf>
 800a022:	f001 fd7d 	bl	800bb20 <abort>
 800a026:	4b04      	ldr	r3, [pc, #16]	@ (800a038 <__assert_func+0x38>)
 800a028:	e7f4      	b.n	800a014 <__assert_func+0x14>
 800a02a:	bf00      	nop
 800a02c:	20000030 	.word	0x20000030
 800a030:	0800c2bf 	.word	0x0800c2bf
 800a034:	0800c291 	.word	0x0800c291
 800a038:	0800c284 	.word	0x0800c284

0800a03c <quorem>:
 800a03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	6903      	ldr	r3, [r0, #16]
 800a042:	690c      	ldr	r4, [r1, #16]
 800a044:	42a3      	cmp	r3, r4
 800a046:	4607      	mov	r7, r0
 800a048:	db7e      	blt.n	800a148 <quorem+0x10c>
 800a04a:	3c01      	subs	r4, #1
 800a04c:	f101 0814 	add.w	r8, r1, #20
 800a050:	00a3      	lsls	r3, r4, #2
 800a052:	f100 0514 	add.w	r5, r0, #20
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a066:	3301      	adds	r3, #1
 800a068:	429a      	cmp	r2, r3
 800a06a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a06e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a072:	d32e      	bcc.n	800a0d2 <quorem+0x96>
 800a074:	f04f 0a00 	mov.w	sl, #0
 800a078:	46c4      	mov	ip, r8
 800a07a:	46ae      	mov	lr, r5
 800a07c:	46d3      	mov	fp, sl
 800a07e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a082:	b298      	uxth	r0, r3
 800a084:	fb06 a000 	mla	r0, r6, r0, sl
 800a088:	0c02      	lsrs	r2, r0, #16
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	fb06 2303 	mla	r3, r6, r3, r2
 800a090:	f8de 2000 	ldr.w	r2, [lr]
 800a094:	b280      	uxth	r0, r0
 800a096:	b292      	uxth	r2, r2
 800a098:	1a12      	subs	r2, r2, r0
 800a09a:	445a      	add	r2, fp
 800a09c:	f8de 0000 	ldr.w	r0, [lr]
 800a0a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0ae:	b292      	uxth	r2, r2
 800a0b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0b4:	45e1      	cmp	r9, ip
 800a0b6:	f84e 2b04 	str.w	r2, [lr], #4
 800a0ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a0be:	d2de      	bcs.n	800a07e <quorem+0x42>
 800a0c0:	9b00      	ldr	r3, [sp, #0]
 800a0c2:	58eb      	ldr	r3, [r5, r3]
 800a0c4:	b92b      	cbnz	r3, 800a0d2 <quorem+0x96>
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	d32f      	bcc.n	800a130 <quorem+0xf4>
 800a0d0:	613c      	str	r4, [r7, #16]
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	f001 f97a 	bl	800b3cc <__mcmp>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	db25      	blt.n	800a128 <quorem+0xec>
 800a0dc:	4629      	mov	r1, r5
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0e4:	f8d1 c000 	ldr.w	ip, [r1]
 800a0e8:	fa1f fe82 	uxth.w	lr, r2
 800a0ec:	fa1f f38c 	uxth.w	r3, ip
 800a0f0:	eba3 030e 	sub.w	r3, r3, lr
 800a0f4:	4403      	add	r3, r0
 800a0f6:	0c12      	lsrs	r2, r2, #16
 800a0f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a100:	b29b      	uxth	r3, r3
 800a102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a106:	45c1      	cmp	r9, r8
 800a108:	f841 3b04 	str.w	r3, [r1], #4
 800a10c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a110:	d2e6      	bcs.n	800a0e0 <quorem+0xa4>
 800a112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a11a:	b922      	cbnz	r2, 800a126 <quorem+0xea>
 800a11c:	3b04      	subs	r3, #4
 800a11e:	429d      	cmp	r5, r3
 800a120:	461a      	mov	r2, r3
 800a122:	d30b      	bcc.n	800a13c <quorem+0x100>
 800a124:	613c      	str	r4, [r7, #16]
 800a126:	3601      	adds	r6, #1
 800a128:	4630      	mov	r0, r6
 800a12a:	b003      	add	sp, #12
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	3b04      	subs	r3, #4
 800a134:	2a00      	cmp	r2, #0
 800a136:	d1cb      	bne.n	800a0d0 <quorem+0x94>
 800a138:	3c01      	subs	r4, #1
 800a13a:	e7c6      	b.n	800a0ca <quorem+0x8e>
 800a13c:	6812      	ldr	r2, [r2, #0]
 800a13e:	3b04      	subs	r3, #4
 800a140:	2a00      	cmp	r2, #0
 800a142:	d1ef      	bne.n	800a124 <quorem+0xe8>
 800a144:	3c01      	subs	r4, #1
 800a146:	e7ea      	b.n	800a11e <quorem+0xe2>
 800a148:	2000      	movs	r0, #0
 800a14a:	e7ee      	b.n	800a12a <quorem+0xee>
 800a14c:	0000      	movs	r0, r0
	...

0800a150 <_dtoa_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	69c7      	ldr	r7, [r0, #28]
 800a156:	b099      	sub	sp, #100	@ 0x64
 800a158:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a15c:	ec55 4b10 	vmov	r4, r5, d0
 800a160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a162:	9109      	str	r1, [sp, #36]	@ 0x24
 800a164:	4683      	mov	fp, r0
 800a166:	920e      	str	r2, [sp, #56]	@ 0x38
 800a168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a16a:	b97f      	cbnz	r7, 800a18c <_dtoa_r+0x3c>
 800a16c:	2010      	movs	r0, #16
 800a16e:	f000 fdfd 	bl	800ad6c <malloc>
 800a172:	4602      	mov	r2, r0
 800a174:	f8cb 001c 	str.w	r0, [fp, #28]
 800a178:	b920      	cbnz	r0, 800a184 <_dtoa_r+0x34>
 800a17a:	4ba7      	ldr	r3, [pc, #668]	@ (800a418 <_dtoa_r+0x2c8>)
 800a17c:	21ef      	movs	r1, #239	@ 0xef
 800a17e:	48a7      	ldr	r0, [pc, #668]	@ (800a41c <_dtoa_r+0x2cc>)
 800a180:	f7ff ff3e 	bl	800a000 <__assert_func>
 800a184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a188:	6007      	str	r7, [r0, #0]
 800a18a:	60c7      	str	r7, [r0, #12]
 800a18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a190:	6819      	ldr	r1, [r3, #0]
 800a192:	b159      	cbz	r1, 800a1ac <_dtoa_r+0x5c>
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	604a      	str	r2, [r1, #4]
 800a198:	2301      	movs	r3, #1
 800a19a:	4093      	lsls	r3, r2
 800a19c:	608b      	str	r3, [r1, #8]
 800a19e:	4658      	mov	r0, fp
 800a1a0:	f000 feda 	bl	800af58 <_Bfree>
 800a1a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	1e2b      	subs	r3, r5, #0
 800a1ae:	bfb9      	ittee	lt
 800a1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1b4:	9303      	strlt	r3, [sp, #12]
 800a1b6:	2300      	movge	r3, #0
 800a1b8:	6033      	strge	r3, [r6, #0]
 800a1ba:	9f03      	ldr	r7, [sp, #12]
 800a1bc:	4b98      	ldr	r3, [pc, #608]	@ (800a420 <_dtoa_r+0x2d0>)
 800a1be:	bfbc      	itt	lt
 800a1c0:	2201      	movlt	r2, #1
 800a1c2:	6032      	strlt	r2, [r6, #0]
 800a1c4:	43bb      	bics	r3, r7
 800a1c6:	d112      	bne.n	800a1ee <_dtoa_r+0x9e>
 800a1c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1d4:	4323      	orrs	r3, r4
 800a1d6:	f000 854d 	beq.w	800ac74 <_dtoa_r+0xb24>
 800a1da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a434 <_dtoa_r+0x2e4>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 854f 	beq.w	800ac84 <_dtoa_r+0xb34>
 800a1e6:	f10a 0303 	add.w	r3, sl, #3
 800a1ea:	f000 bd49 	b.w	800ac80 <_dtoa_r+0xb30>
 800a1ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	ec51 0b17 	vmov	r0, r1, d7
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1fe:	f7f6 fc6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a202:	4680      	mov	r8, r0
 800a204:	b158      	cbz	r0, 800a21e <_dtoa_r+0xce>
 800a206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a208:	2301      	movs	r3, #1
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a20e:	b113      	cbz	r3, 800a216 <_dtoa_r+0xc6>
 800a210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a212:	4b84      	ldr	r3, [pc, #528]	@ (800a424 <_dtoa_r+0x2d4>)
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a438 <_dtoa_r+0x2e8>
 800a21a:	f000 bd33 	b.w	800ac84 <_dtoa_r+0xb34>
 800a21e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a222:	aa16      	add	r2, sp, #88	@ 0x58
 800a224:	a917      	add	r1, sp, #92	@ 0x5c
 800a226:	4658      	mov	r0, fp
 800a228:	f001 f980 	bl	800b52c <__d2b>
 800a22c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a230:	4681      	mov	r9, r0
 800a232:	2e00      	cmp	r6, #0
 800a234:	d077      	beq.n	800a326 <_dtoa_r+0x1d6>
 800a236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a24c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a250:	4619      	mov	r1, r3
 800a252:	2200      	movs	r2, #0
 800a254:	4b74      	ldr	r3, [pc, #464]	@ (800a428 <_dtoa_r+0x2d8>)
 800a256:	f7f6 f81f 	bl	8000298 <__aeabi_dsub>
 800a25a:	a369      	add	r3, pc, #420	@ (adr r3, 800a400 <_dtoa_r+0x2b0>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f9d2 	bl	8000608 <__aeabi_dmul>
 800a264:	a368      	add	r3, pc, #416	@ (adr r3, 800a408 <_dtoa_r+0x2b8>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f6 f817 	bl	800029c <__adddf3>
 800a26e:	4604      	mov	r4, r0
 800a270:	4630      	mov	r0, r6
 800a272:	460d      	mov	r5, r1
 800a274:	f7f6 f95e 	bl	8000534 <__aeabi_i2d>
 800a278:	a365      	add	r3, pc, #404	@ (adr r3, 800a410 <_dtoa_r+0x2c0>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9c3 	bl	8000608 <__aeabi_dmul>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 f807 	bl	800029c <__adddf3>
 800a28e:	4604      	mov	r4, r0
 800a290:	460d      	mov	r5, r1
 800a292:	f7f6 fc69 	bl	8000b68 <__aeabi_d2iz>
 800a296:	2200      	movs	r2, #0
 800a298:	4607      	mov	r7, r0
 800a29a:	2300      	movs	r3, #0
 800a29c:	4620      	mov	r0, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	f7f6 fc24 	bl	8000aec <__aeabi_dcmplt>
 800a2a4:	b140      	cbz	r0, 800a2b8 <_dtoa_r+0x168>
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f7f6 f944 	bl	8000534 <__aeabi_i2d>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	f7f6 fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2b4:	b900      	cbnz	r0, 800a2b8 <_dtoa_r+0x168>
 800a2b6:	3f01      	subs	r7, #1
 800a2b8:	2f16      	cmp	r7, #22
 800a2ba:	d851      	bhi.n	800a360 <_dtoa_r+0x210>
 800a2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800a42c <_dtoa_r+0x2dc>)
 800a2be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ca:	f7f6 fc0f 	bl	8000aec <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d048      	beq.n	800a364 <_dtoa_r+0x214>
 800a2d2:	3f01      	subs	r7, #1
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2da:	1b9b      	subs	r3, r3, r6
 800a2dc:	1e5a      	subs	r2, r3, #1
 800a2de:	bf44      	itt	mi
 800a2e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2e4:	2300      	movmi	r3, #0
 800a2e6:	9208      	str	r2, [sp, #32]
 800a2e8:	bf54      	ite	pl
 800a2ea:	f04f 0800 	movpl.w	r8, #0
 800a2ee:	9308      	strmi	r3, [sp, #32]
 800a2f0:	2f00      	cmp	r7, #0
 800a2f2:	db39      	blt.n	800a368 <_dtoa_r+0x218>
 800a2f4:	9b08      	ldr	r3, [sp, #32]
 800a2f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2f8:	443b      	add	r3, r7
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a302:	2b09      	cmp	r3, #9
 800a304:	d864      	bhi.n	800a3d0 <_dtoa_r+0x280>
 800a306:	2b05      	cmp	r3, #5
 800a308:	bfc4      	itt	gt
 800a30a:	3b04      	subgt	r3, #4
 800a30c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	f1a3 0302 	sub.w	r3, r3, #2
 800a314:	bfcc      	ite	gt
 800a316:	2400      	movgt	r4, #0
 800a318:	2401      	movle	r4, #1
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d863      	bhi.n	800a3e6 <_dtoa_r+0x296>
 800a31e:	e8df f003 	tbb	[pc, r3]
 800a322:	372a      	.short	0x372a
 800a324:	5535      	.short	0x5535
 800a326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a32a:	441e      	add	r6, r3
 800a32c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a330:	2b20      	cmp	r3, #32
 800a332:	bfc1      	itttt	gt
 800a334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a338:	409f      	lslgt	r7, r3
 800a33a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a33e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a342:	bfd6      	itet	le
 800a344:	f1c3 0320 	rsble	r3, r3, #32
 800a348:	ea47 0003 	orrgt.w	r0, r7, r3
 800a34c:	fa04 f003 	lslle.w	r0, r4, r3
 800a350:	f7f6 f8e0 	bl	8000514 <__aeabi_ui2d>
 800a354:	2201      	movs	r2, #1
 800a356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a35a:	3e01      	subs	r6, #1
 800a35c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a35e:	e777      	b.n	800a250 <_dtoa_r+0x100>
 800a360:	2301      	movs	r3, #1
 800a362:	e7b8      	b.n	800a2d6 <_dtoa_r+0x186>
 800a364:	9012      	str	r0, [sp, #72]	@ 0x48
 800a366:	e7b7      	b.n	800a2d8 <_dtoa_r+0x188>
 800a368:	427b      	negs	r3, r7
 800a36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a36c:	2300      	movs	r3, #0
 800a36e:	eba8 0807 	sub.w	r8, r8, r7
 800a372:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a374:	e7c4      	b.n	800a300 <_dtoa_r+0x1b0>
 800a376:	2300      	movs	r3, #0
 800a378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc35      	bgt.n	800a3ec <_dtoa_r+0x29c>
 800a380:	2301      	movs	r3, #1
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	9307      	str	r3, [sp, #28]
 800a386:	461a      	mov	r2, r3
 800a388:	920e      	str	r2, [sp, #56]	@ 0x38
 800a38a:	e00b      	b.n	800a3a4 <_dtoa_r+0x254>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e7f3      	b.n	800a378 <_dtoa_r+0x228>
 800a390:	2300      	movs	r3, #0
 800a392:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a396:	18fb      	adds	r3, r7, r3
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	bfb8      	it	lt
 800a3a2:	2301      	movlt	r3, #1
 800a3a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	f102 0514 	add.w	r5, r2, #20
 800a3b0:	429d      	cmp	r5, r3
 800a3b2:	d91f      	bls.n	800a3f4 <_dtoa_r+0x2a4>
 800a3b4:	6041      	str	r1, [r0, #4]
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f000 fd8e 	bl	800aed8 <_Balloc>
 800a3bc:	4682      	mov	sl, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d13c      	bne.n	800a43c <_dtoa_r+0x2ec>
 800a3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a430 <_dtoa_r+0x2e0>)
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a3ca:	e6d8      	b.n	800a17e <_dtoa_r+0x2e>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e7e0      	b.n	800a392 <_dtoa_r+0x242>
 800a3d0:	2401      	movs	r4, #1
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2312      	movs	r3, #18
 800a3e4:	e7d0      	b.n	800a388 <_dtoa_r+0x238>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ea:	e7f5      	b.n	800a3d8 <_dtoa_r+0x288>
 800a3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	e7d7      	b.n	800a3a4 <_dtoa_r+0x254>
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	0052      	lsls	r2, r2, #1
 800a3f8:	e7d8      	b.n	800a3ac <_dtoa_r+0x25c>
 800a3fa:	bf00      	nop
 800a3fc:	f3af 8000 	nop.w
 800a400:	636f4361 	.word	0x636f4361
 800a404:	3fd287a7 	.word	0x3fd287a7
 800a408:	8b60c8b3 	.word	0x8b60c8b3
 800a40c:	3fc68a28 	.word	0x3fc68a28
 800a410:	509f79fb 	.word	0x509f79fb
 800a414:	3fd34413 	.word	0x3fd34413
 800a418:	0800c2cd 	.word	0x0800c2cd
 800a41c:	0800c2e4 	.word	0x0800c2e4
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	0800c261 	.word	0x0800c261
 800a428:	3ff80000 	.word	0x3ff80000
 800a42c:	0800c3e0 	.word	0x0800c3e0
 800a430:	0800c33c 	.word	0x0800c33c
 800a434:	0800c2c9 	.word	0x0800c2c9
 800a438:	0800c260 	.word	0x0800c260
 800a43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a440:	6018      	str	r0, [r3, #0]
 800a442:	9b07      	ldr	r3, [sp, #28]
 800a444:	2b0e      	cmp	r3, #14
 800a446:	f200 80a4 	bhi.w	800a592 <_dtoa_r+0x442>
 800a44a:	2c00      	cmp	r4, #0
 800a44c:	f000 80a1 	beq.w	800a592 <_dtoa_r+0x442>
 800a450:	2f00      	cmp	r7, #0
 800a452:	dd33      	ble.n	800a4bc <_dtoa_r+0x36c>
 800a454:	4bad      	ldr	r3, [pc, #692]	@ (800a70c <_dtoa_r+0x5bc>)
 800a456:	f007 020f 	and.w	r2, r7, #15
 800a45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a45e:	ed93 7b00 	vldr	d7, [r3]
 800a462:	05f8      	lsls	r0, r7, #23
 800a464:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a46c:	d516      	bpl.n	800a49c <_dtoa_r+0x34c>
 800a46e:	4ba8      	ldr	r3, [pc, #672]	@ (800a710 <_dtoa_r+0x5c0>)
 800a470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a478:	f7f6 f9f0 	bl	800085c <__aeabi_ddiv>
 800a47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a480:	f004 040f 	and.w	r4, r4, #15
 800a484:	2603      	movs	r6, #3
 800a486:	4da2      	ldr	r5, [pc, #648]	@ (800a710 <_dtoa_r+0x5c0>)
 800a488:	b954      	cbnz	r4, 800a4a0 <_dtoa_r+0x350>
 800a48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a492:	f7f6 f9e3 	bl	800085c <__aeabi_ddiv>
 800a496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a49a:	e028      	b.n	800a4ee <_dtoa_r+0x39e>
 800a49c:	2602      	movs	r6, #2
 800a49e:	e7f2      	b.n	800a486 <_dtoa_r+0x336>
 800a4a0:	07e1      	lsls	r1, r4, #31
 800a4a2:	d508      	bpl.n	800a4b6 <_dtoa_r+0x366>
 800a4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4ac:	f7f6 f8ac 	bl	8000608 <__aeabi_dmul>
 800a4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b4:	3601      	adds	r6, #1
 800a4b6:	1064      	asrs	r4, r4, #1
 800a4b8:	3508      	adds	r5, #8
 800a4ba:	e7e5      	b.n	800a488 <_dtoa_r+0x338>
 800a4bc:	f000 80d2 	beq.w	800a664 <_dtoa_r+0x514>
 800a4c0:	427c      	negs	r4, r7
 800a4c2:	4b92      	ldr	r3, [pc, #584]	@ (800a70c <_dtoa_r+0x5bc>)
 800a4c4:	4d92      	ldr	r5, [pc, #584]	@ (800a710 <_dtoa_r+0x5c0>)
 800a4c6:	f004 020f 	and.w	r2, r4, #15
 800a4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4d6:	f7f6 f897 	bl	8000608 <__aeabi_dmul>
 800a4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4de:	1124      	asrs	r4, r4, #4
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2602      	movs	r6, #2
 800a4e4:	2c00      	cmp	r4, #0
 800a4e6:	f040 80b2 	bne.w	800a64e <_dtoa_r+0x4fe>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1d3      	bne.n	800a496 <_dtoa_r+0x346>
 800a4ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80b7 	beq.w	800a668 <_dtoa_r+0x518>
 800a4fa:	4b86      	ldr	r3, [pc, #536]	@ (800a714 <_dtoa_r+0x5c4>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f6 faf3 	bl	8000aec <__aeabi_dcmplt>
 800a506:	2800      	cmp	r0, #0
 800a508:	f000 80ae 	beq.w	800a668 <_dtoa_r+0x518>
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 80aa 	beq.w	800a668 <_dtoa_r+0x518>
 800a514:	9b00      	ldr	r3, [sp, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dd37      	ble.n	800a58a <_dtoa_r+0x43a>
 800a51a:	1e7b      	subs	r3, r7, #1
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	4620      	mov	r0, r4
 800a520:	4b7d      	ldr	r3, [pc, #500]	@ (800a718 <_dtoa_r+0x5c8>)
 800a522:	2200      	movs	r2, #0
 800a524:	4629      	mov	r1, r5
 800a526:	f7f6 f86f 	bl	8000608 <__aeabi_dmul>
 800a52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a52e:	9c00      	ldr	r4, [sp, #0]
 800a530:	3601      	adds	r6, #1
 800a532:	4630      	mov	r0, r6
 800a534:	f7f5 fffe 	bl	8000534 <__aeabi_i2d>
 800a538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a53c:	f7f6 f864 	bl	8000608 <__aeabi_dmul>
 800a540:	4b76      	ldr	r3, [pc, #472]	@ (800a71c <_dtoa_r+0x5cc>)
 800a542:	2200      	movs	r2, #0
 800a544:	f7f5 feaa 	bl	800029c <__adddf3>
 800a548:	4605      	mov	r5, r0
 800a54a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a54e:	2c00      	cmp	r4, #0
 800a550:	f040 808d 	bne.w	800a66e <_dtoa_r+0x51e>
 800a554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a558:	4b71      	ldr	r3, [pc, #452]	@ (800a720 <_dtoa_r+0x5d0>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	f7f5 fe9c 	bl	8000298 <__aeabi_dsub>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a568:	462a      	mov	r2, r5
 800a56a:	4633      	mov	r3, r6
 800a56c:	f7f6 fadc 	bl	8000b28 <__aeabi_dcmpgt>
 800a570:	2800      	cmp	r0, #0
 800a572:	f040 828b 	bne.w	800aa8c <_dtoa_r+0x93c>
 800a576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a57a:	462a      	mov	r2, r5
 800a57c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a580:	f7f6 fab4 	bl	8000aec <__aeabi_dcmplt>
 800a584:	2800      	cmp	r0, #0
 800a586:	f040 8128 	bne.w	800a7da <_dtoa_r+0x68a>
 800a58a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a58e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a594:	2b00      	cmp	r3, #0
 800a596:	f2c0 815a 	blt.w	800a84e <_dtoa_r+0x6fe>
 800a59a:	2f0e      	cmp	r7, #14
 800a59c:	f300 8157 	bgt.w	800a84e <_dtoa_r+0x6fe>
 800a5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800a70c <_dtoa_r+0x5bc>)
 800a5a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5a6:	ed93 7b00 	vldr	d7, [r3]
 800a5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	ed8d 7b00 	vstr	d7, [sp]
 800a5b2:	da03      	bge.n	800a5bc <_dtoa_r+0x46c>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f340 8101 	ble.w	800a7be <_dtoa_r+0x66e>
 800a5bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5c0:	4656      	mov	r6, sl
 800a5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7f6 f947 	bl	800085c <__aeabi_ddiv>
 800a5ce:	f7f6 facb 	bl	8000b68 <__aeabi_d2iz>
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	f7f5 ffae 	bl	8000534 <__aeabi_i2d>
 800a5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5dc:	f7f6 f814 	bl	8000608 <__aeabi_dmul>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5ec:	f7f5 fe54 	bl	8000298 <__aeabi_dsub>
 800a5f0:	f806 4b01 	strb.w	r4, [r6], #1
 800a5f4:	9d07      	ldr	r5, [sp, #28]
 800a5f6:	eba6 040a 	sub.w	r4, r6, sl
 800a5fa:	42a5      	cmp	r5, r4
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	f040 8117 	bne.w	800a832 <_dtoa_r+0x6e2>
 800a604:	f7f5 fe4a 	bl	800029c <__adddf3>
 800a608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60c:	4604      	mov	r4, r0
 800a60e:	460d      	mov	r5, r1
 800a610:	f7f6 fa8a 	bl	8000b28 <__aeabi_dcmpgt>
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 80f9 	bne.w	800a80c <_dtoa_r+0x6bc>
 800a61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a61e:	4620      	mov	r0, r4
 800a620:	4629      	mov	r1, r5
 800a622:	f7f6 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 800a626:	b118      	cbz	r0, 800a630 <_dtoa_r+0x4e0>
 800a628:	f018 0f01 	tst.w	r8, #1
 800a62c:	f040 80ee 	bne.w	800a80c <_dtoa_r+0x6bc>
 800a630:	4649      	mov	r1, r9
 800a632:	4658      	mov	r0, fp
 800a634:	f000 fc90 	bl	800af58 <_Bfree>
 800a638:	2300      	movs	r3, #0
 800a63a:	7033      	strb	r3, [r6, #0]
 800a63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a63e:	3701      	adds	r7, #1
 800a640:	601f      	str	r7, [r3, #0]
 800a642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 831d 	beq.w	800ac84 <_dtoa_r+0xb34>
 800a64a:	601e      	str	r6, [r3, #0]
 800a64c:	e31a      	b.n	800ac84 <_dtoa_r+0xb34>
 800a64e:	07e2      	lsls	r2, r4, #31
 800a650:	d505      	bpl.n	800a65e <_dtoa_r+0x50e>
 800a652:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a656:	f7f5 ffd7 	bl	8000608 <__aeabi_dmul>
 800a65a:	3601      	adds	r6, #1
 800a65c:	2301      	movs	r3, #1
 800a65e:	1064      	asrs	r4, r4, #1
 800a660:	3508      	adds	r5, #8
 800a662:	e73f      	b.n	800a4e4 <_dtoa_r+0x394>
 800a664:	2602      	movs	r6, #2
 800a666:	e742      	b.n	800a4ee <_dtoa_r+0x39e>
 800a668:	9c07      	ldr	r4, [sp, #28]
 800a66a:	9704      	str	r7, [sp, #16]
 800a66c:	e761      	b.n	800a532 <_dtoa_r+0x3e2>
 800a66e:	4b27      	ldr	r3, [pc, #156]	@ (800a70c <_dtoa_r+0x5bc>)
 800a670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a67a:	4454      	add	r4, sl
 800a67c:	2900      	cmp	r1, #0
 800a67e:	d053      	beq.n	800a728 <_dtoa_r+0x5d8>
 800a680:	4928      	ldr	r1, [pc, #160]	@ (800a724 <_dtoa_r+0x5d4>)
 800a682:	2000      	movs	r0, #0
 800a684:	f7f6 f8ea 	bl	800085c <__aeabi_ddiv>
 800a688:	4633      	mov	r3, r6
 800a68a:	462a      	mov	r2, r5
 800a68c:	f7f5 fe04 	bl	8000298 <__aeabi_dsub>
 800a690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a694:	4656      	mov	r6, sl
 800a696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69a:	f7f6 fa65 	bl	8000b68 <__aeabi_d2iz>
 800a69e:	4605      	mov	r5, r0
 800a6a0:	f7f5 ff48 	bl	8000534 <__aeabi_i2d>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ac:	f7f5 fdf4 	bl	8000298 <__aeabi_dsub>
 800a6b0:	3530      	adds	r5, #48	@ 0x30
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6ba:	f806 5b01 	strb.w	r5, [r6], #1
 800a6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6c2:	f7f6 fa13 	bl	8000aec <__aeabi_dcmplt>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d171      	bne.n	800a7ae <_dtoa_r+0x65e>
 800a6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6ce:	4911      	ldr	r1, [pc, #68]	@ (800a714 <_dtoa_r+0x5c4>)
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	f7f5 fde1 	bl	8000298 <__aeabi_dsub>
 800a6d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6da:	f7f6 fa07 	bl	8000aec <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8095 	bne.w	800a80e <_dtoa_r+0x6be>
 800a6e4:	42a6      	cmp	r6, r4
 800a6e6:	f43f af50 	beq.w	800a58a <_dtoa_r+0x43a>
 800a6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <_dtoa_r+0x5c8>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f7f5 ff89 	bl	8000608 <__aeabi_dmul>
 800a6f6:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <_dtoa_r+0x5c8>)
 800a6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a702:	f7f5 ff81 	bl	8000608 <__aeabi_dmul>
 800a706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a70a:	e7c4      	b.n	800a696 <_dtoa_r+0x546>
 800a70c:	0800c3e0 	.word	0x0800c3e0
 800a710:	0800c3b8 	.word	0x0800c3b8
 800a714:	3ff00000 	.word	0x3ff00000
 800a718:	40240000 	.word	0x40240000
 800a71c:	401c0000 	.word	0x401c0000
 800a720:	40140000 	.word	0x40140000
 800a724:	3fe00000 	.word	0x3fe00000
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	f7f5 ff6c 	bl	8000608 <__aeabi_dmul>
 800a730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a734:	9415      	str	r4, [sp, #84]	@ 0x54
 800a736:	4656      	mov	r6, sl
 800a738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a73c:	f7f6 fa14 	bl	8000b68 <__aeabi_d2iz>
 800a740:	4605      	mov	r5, r0
 800a742:	f7f5 fef7 	bl	8000534 <__aeabi_i2d>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74e:	f7f5 fda3 	bl	8000298 <__aeabi_dsub>
 800a752:	3530      	adds	r5, #48	@ 0x30
 800a754:	f806 5b01 	strb.w	r5, [r6], #1
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	42a6      	cmp	r6, r4
 800a75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	d124      	bne.n	800a7b2 <_dtoa_r+0x662>
 800a768:	4bac      	ldr	r3, [pc, #688]	@ (800aa1c <_dtoa_r+0x8cc>)
 800a76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a76e:	f7f5 fd95 	bl	800029c <__adddf3>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a77a:	f7f6 f9d5 	bl	8000b28 <__aeabi_dcmpgt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d145      	bne.n	800a80e <_dtoa_r+0x6be>
 800a782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a786:	49a5      	ldr	r1, [pc, #660]	@ (800aa1c <_dtoa_r+0x8cc>)
 800a788:	2000      	movs	r0, #0
 800a78a:	f7f5 fd85 	bl	8000298 <__aeabi_dsub>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a796:	f7f6 f9a9 	bl	8000aec <__aeabi_dcmplt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f43f aef5 	beq.w	800a58a <_dtoa_r+0x43a>
 800a7a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7a2:	1e73      	subs	r3, r6, #1
 800a7a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7aa:	2b30      	cmp	r3, #48	@ 0x30
 800a7ac:	d0f8      	beq.n	800a7a0 <_dtoa_r+0x650>
 800a7ae:	9f04      	ldr	r7, [sp, #16]
 800a7b0:	e73e      	b.n	800a630 <_dtoa_r+0x4e0>
 800a7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa20 <_dtoa_r+0x8d0>)
 800a7b4:	f7f5 ff28 	bl	8000608 <__aeabi_dmul>
 800a7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7bc:	e7bc      	b.n	800a738 <_dtoa_r+0x5e8>
 800a7be:	d10c      	bne.n	800a7da <_dtoa_r+0x68a>
 800a7c0:	4b98      	ldr	r3, [pc, #608]	@ (800aa24 <_dtoa_r+0x8d4>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d0:	f7f6 f9a0 	bl	8000b14 <__aeabi_dcmpge>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	f000 8157 	beq.w	800aa88 <_dtoa_r+0x938>
 800a7da:	2400      	movs	r4, #0
 800a7dc:	4625      	mov	r5, r4
 800a7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e0:	43db      	mvns	r3, r3
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	4656      	mov	r6, sl
 800a7e6:	2700      	movs	r7, #0
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4658      	mov	r0, fp
 800a7ec:	f000 fbb4 	bl	800af58 <_Bfree>
 800a7f0:	2d00      	cmp	r5, #0
 800a7f2:	d0dc      	beq.n	800a7ae <_dtoa_r+0x65e>
 800a7f4:	b12f      	cbz	r7, 800a802 <_dtoa_r+0x6b2>
 800a7f6:	42af      	cmp	r7, r5
 800a7f8:	d003      	beq.n	800a802 <_dtoa_r+0x6b2>
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4658      	mov	r0, fp
 800a7fe:	f000 fbab 	bl	800af58 <_Bfree>
 800a802:	4629      	mov	r1, r5
 800a804:	4658      	mov	r0, fp
 800a806:	f000 fba7 	bl	800af58 <_Bfree>
 800a80a:	e7d0      	b.n	800a7ae <_dtoa_r+0x65e>
 800a80c:	9704      	str	r7, [sp, #16]
 800a80e:	4633      	mov	r3, r6
 800a810:	461e      	mov	r6, r3
 800a812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a816:	2a39      	cmp	r2, #57	@ 0x39
 800a818:	d107      	bne.n	800a82a <_dtoa_r+0x6da>
 800a81a:	459a      	cmp	sl, r3
 800a81c:	d1f8      	bne.n	800a810 <_dtoa_r+0x6c0>
 800a81e:	9a04      	ldr	r2, [sp, #16]
 800a820:	3201      	adds	r2, #1
 800a822:	9204      	str	r2, [sp, #16]
 800a824:	2230      	movs	r2, #48	@ 0x30
 800a826:	f88a 2000 	strb.w	r2, [sl]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	3201      	adds	r2, #1
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	e7bd      	b.n	800a7ae <_dtoa_r+0x65e>
 800a832:	4b7b      	ldr	r3, [pc, #492]	@ (800aa20 <_dtoa_r+0x8d0>)
 800a834:	2200      	movs	r2, #0
 800a836:	f7f5 fee7 	bl	8000608 <__aeabi_dmul>
 800a83a:	2200      	movs	r2, #0
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	f7f6 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f aebb 	beq.w	800a5c2 <_dtoa_r+0x472>
 800a84c:	e6f0      	b.n	800a630 <_dtoa_r+0x4e0>
 800a84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a850:	2a00      	cmp	r2, #0
 800a852:	f000 80db 	beq.w	800aa0c <_dtoa_r+0x8bc>
 800a856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a858:	2a01      	cmp	r2, #1
 800a85a:	f300 80bf 	bgt.w	800a9dc <_dtoa_r+0x88c>
 800a85e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a860:	2a00      	cmp	r2, #0
 800a862:	f000 80b7 	beq.w	800a9d4 <_dtoa_r+0x884>
 800a866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a86a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a86c:	4646      	mov	r6, r8
 800a86e:	9a08      	ldr	r2, [sp, #32]
 800a870:	2101      	movs	r1, #1
 800a872:	441a      	add	r2, r3
 800a874:	4658      	mov	r0, fp
 800a876:	4498      	add	r8, r3
 800a878:	9208      	str	r2, [sp, #32]
 800a87a:	f000 fc21 	bl	800b0c0 <__i2b>
 800a87e:	4605      	mov	r5, r0
 800a880:	b15e      	cbz	r6, 800a89a <_dtoa_r+0x74a>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd08      	ble.n	800a89a <_dtoa_r+0x74a>
 800a888:	42b3      	cmp	r3, r6
 800a88a:	9a08      	ldr	r2, [sp, #32]
 800a88c:	bfa8      	it	ge
 800a88e:	4633      	movge	r3, r6
 800a890:	eba8 0803 	sub.w	r8, r8, r3
 800a894:	1af6      	subs	r6, r6, r3
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a89c:	b1f3      	cbz	r3, 800a8dc <_dtoa_r+0x78c>
 800a89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80b7 	beq.w	800aa14 <_dtoa_r+0x8c4>
 800a8a6:	b18c      	cbz	r4, 800a8cc <_dtoa_r+0x77c>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f000 fcc7 	bl	800b240 <__pow5mult>
 800a8b2:	464a      	mov	r2, r9
 800a8b4:	4601      	mov	r1, r0
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	4658      	mov	r0, fp
 800a8ba:	f000 fc17 	bl	800b0ec <__multiply>
 800a8be:	4649      	mov	r1, r9
 800a8c0:	9004      	str	r0, [sp, #16]
 800a8c2:	4658      	mov	r0, fp
 800a8c4:	f000 fb48 	bl	800af58 <_Bfree>
 800a8c8:	9b04      	ldr	r3, [sp, #16]
 800a8ca:	4699      	mov	r9, r3
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ce:	1b1a      	subs	r2, r3, r4
 800a8d0:	d004      	beq.n	800a8dc <_dtoa_r+0x78c>
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4658      	mov	r0, fp
 800a8d6:	f000 fcb3 	bl	800b240 <__pow5mult>
 800a8da:	4681      	mov	r9, r0
 800a8dc:	2101      	movs	r1, #1
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f000 fbee 	bl	800b0c0 <__i2b>
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 81cf 	beq.w	800ac8c <_dtoa_r+0xb3c>
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fca4 	bl	800b240 <__pow5mult>
 800a8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	f300 8095 	bgt.w	800aa2c <_dtoa_r+0x8dc>
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f040 8087 	bne.w	800aa18 <_dtoa_r+0x8c8>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 8089 	bne.w	800aa28 <_dtoa_r+0x8d8>
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a91c:	0d1b      	lsrs	r3, r3, #20
 800a91e:	051b      	lsls	r3, r3, #20
 800a920:	b12b      	cbz	r3, 800a92e <_dtoa_r+0x7de>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	3301      	adds	r3, #1
 800a926:	9308      	str	r3, [sp, #32]
 800a928:	f108 0801 	add.w	r8, r8, #1
 800a92c:	2301      	movs	r3, #1
 800a92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 81b0 	beq.w	800ac98 <_dtoa_r+0xb48>
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a93e:	6918      	ldr	r0, [r3, #16]
 800a940:	f000 fb72 	bl	800b028 <__hi0bits>
 800a944:	f1c0 0020 	rsb	r0, r0, #32
 800a948:	9b08      	ldr	r3, [sp, #32]
 800a94a:	4418      	add	r0, r3
 800a94c:	f010 001f 	ands.w	r0, r0, #31
 800a950:	d077      	beq.n	800aa42 <_dtoa_r+0x8f2>
 800a952:	f1c0 0320 	rsb	r3, r0, #32
 800a956:	2b04      	cmp	r3, #4
 800a958:	dd6b      	ble.n	800aa32 <_dtoa_r+0x8e2>
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	f1c0 001c 	rsb	r0, r0, #28
 800a960:	4403      	add	r3, r0
 800a962:	4480      	add	r8, r0
 800a964:	4406      	add	r6, r0
 800a966:	9308      	str	r3, [sp, #32]
 800a968:	f1b8 0f00 	cmp.w	r8, #0
 800a96c:	dd05      	ble.n	800a97a <_dtoa_r+0x82a>
 800a96e:	4649      	mov	r1, r9
 800a970:	4642      	mov	r2, r8
 800a972:	4658      	mov	r0, fp
 800a974:	f000 fcbe 	bl	800b2f4 <__lshift>
 800a978:	4681      	mov	r9, r0
 800a97a:	9b08      	ldr	r3, [sp, #32]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd05      	ble.n	800a98c <_dtoa_r+0x83c>
 800a980:	4621      	mov	r1, r4
 800a982:	461a      	mov	r2, r3
 800a984:	4658      	mov	r0, fp
 800a986:	f000 fcb5 	bl	800b2f4 <__lshift>
 800a98a:	4604      	mov	r4, r0
 800a98c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d059      	beq.n	800aa46 <_dtoa_r+0x8f6>
 800a992:	4621      	mov	r1, r4
 800a994:	4648      	mov	r0, r9
 800a996:	f000 fd19 	bl	800b3cc <__mcmp>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	da53      	bge.n	800aa46 <_dtoa_r+0x8f6>
 800a99e:	1e7b      	subs	r3, r7, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	220a      	movs	r2, #10
 800a9a8:	4658      	mov	r0, fp
 800a9aa:	f000 faf7 	bl	800af9c <__multadd>
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b0:	4681      	mov	r9, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 8172 	beq.w	800ac9c <_dtoa_r+0xb4c>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	220a      	movs	r2, #10
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 faec 	bl	800af9c <__multadd>
 800a9c4:	9b00      	ldr	r3, [sp, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	dc67      	bgt.n	800aa9c <_dtoa_r+0x94c>
 800a9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dc41      	bgt.n	800aa56 <_dtoa_r+0x906>
 800a9d2:	e063      	b.n	800aa9c <_dtoa_r+0x94c>
 800a9d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a9da:	e746      	b.n	800a86a <_dtoa_r+0x71a>
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	1e5c      	subs	r4, r3, #1
 800a9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9e2:	42a3      	cmp	r3, r4
 800a9e4:	bfbf      	itttt	lt
 800a9e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9ec:	1ae3      	sublt	r3, r4, r3
 800a9ee:	bfb4      	ite	lt
 800a9f0:	18d2      	addlt	r2, r2, r3
 800a9f2:	1b1c      	subge	r4, r3, r4
 800a9f4:	9b07      	ldr	r3, [sp, #28]
 800a9f6:	bfbc      	itt	lt
 800a9f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9fa:	2400      	movlt	r4, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfb5      	itete	lt
 800aa00:	eba8 0603 	sublt.w	r6, r8, r3
 800aa04:	9b07      	ldrge	r3, [sp, #28]
 800aa06:	2300      	movlt	r3, #0
 800aa08:	4646      	movge	r6, r8
 800aa0a:	e730      	b.n	800a86e <_dtoa_r+0x71e>
 800aa0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa10:	4646      	mov	r6, r8
 800aa12:	e735      	b.n	800a880 <_dtoa_r+0x730>
 800aa14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa16:	e75c      	b.n	800a8d2 <_dtoa_r+0x782>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e788      	b.n	800a92e <_dtoa_r+0x7de>
 800aa1c:	3fe00000 	.word	0x3fe00000
 800aa20:	40240000 	.word	0x40240000
 800aa24:	40140000 	.word	0x40140000
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	e780      	b.n	800a92e <_dtoa_r+0x7de>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa30:	e782      	b.n	800a938 <_dtoa_r+0x7e8>
 800aa32:	d099      	beq.n	800a968 <_dtoa_r+0x818>
 800aa34:	9a08      	ldr	r2, [sp, #32]
 800aa36:	331c      	adds	r3, #28
 800aa38:	441a      	add	r2, r3
 800aa3a:	4498      	add	r8, r3
 800aa3c:	441e      	add	r6, r3
 800aa3e:	9208      	str	r2, [sp, #32]
 800aa40:	e792      	b.n	800a968 <_dtoa_r+0x818>
 800aa42:	4603      	mov	r3, r0
 800aa44:	e7f6      	b.n	800aa34 <_dtoa_r+0x8e4>
 800aa46:	9b07      	ldr	r3, [sp, #28]
 800aa48:	9704      	str	r7, [sp, #16]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dc20      	bgt.n	800aa90 <_dtoa_r+0x940>
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	dd1e      	ble.n	800aa94 <_dtoa_r+0x944>
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f47f aec0 	bne.w	800a7de <_dtoa_r+0x68e>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	2205      	movs	r2, #5
 800aa62:	4658      	mov	r0, fp
 800aa64:	f000 fa9a 	bl	800af9c <__multadd>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	f000 fcad 	bl	800b3cc <__mcmp>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f77f aeb3 	ble.w	800a7de <_dtoa_r+0x68e>
 800aa78:	4656      	mov	r6, sl
 800aa7a:	2331      	movs	r3, #49	@ 0x31
 800aa7c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa80:	9b04      	ldr	r3, [sp, #16]
 800aa82:	3301      	adds	r3, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	e6ae      	b.n	800a7e6 <_dtoa_r+0x696>
 800aa88:	9c07      	ldr	r4, [sp, #28]
 800aa8a:	9704      	str	r7, [sp, #16]
 800aa8c:	4625      	mov	r5, r4
 800aa8e:	e7f3      	b.n	800aa78 <_dtoa_r+0x928>
 800aa90:	9b07      	ldr	r3, [sp, #28]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 8104 	beq.w	800aca4 <_dtoa_r+0xb54>
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	dd05      	ble.n	800aaac <_dtoa_r+0x95c>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4632      	mov	r2, r6
 800aaa4:	4658      	mov	r0, fp
 800aaa6:	f000 fc25 	bl	800b2f4 <__lshift>
 800aaaa:	4605      	mov	r5, r0
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d05a      	beq.n	800ab68 <_dtoa_r+0xa18>
 800aab2:	6869      	ldr	r1, [r5, #4]
 800aab4:	4658      	mov	r0, fp
 800aab6:	f000 fa0f 	bl	800aed8 <_Balloc>
 800aaba:	4606      	mov	r6, r0
 800aabc:	b928      	cbnz	r0, 800aaca <_dtoa_r+0x97a>
 800aabe:	4b84      	ldr	r3, [pc, #528]	@ (800acd0 <_dtoa_r+0xb80>)
 800aac0:	4602      	mov	r2, r0
 800aac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aac6:	f7ff bb5a 	b.w	800a17e <_dtoa_r+0x2e>
 800aaca:	692a      	ldr	r2, [r5, #16]
 800aacc:	3202      	adds	r2, #2
 800aace:	0092      	lsls	r2, r2, #2
 800aad0:	f105 010c 	add.w	r1, r5, #12
 800aad4:	300c      	adds	r0, #12
 800aad6:	f001 f815 	bl	800bb04 <memcpy>
 800aada:	2201      	movs	r2, #1
 800aadc:	4631      	mov	r1, r6
 800aade:	4658      	mov	r0, fp
 800aae0:	f000 fc08 	bl	800b2f4 <__lshift>
 800aae4:	f10a 0301 	add.w	r3, sl, #1
 800aae8:	9307      	str	r3, [sp, #28]
 800aaea:	9b00      	ldr	r3, [sp, #0]
 800aaec:	4453      	add	r3, sl
 800aaee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaf0:	9b02      	ldr	r3, [sp, #8]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	462f      	mov	r7, r5
 800aaf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aafa:	4605      	mov	r5, r0
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	4621      	mov	r1, r4
 800ab00:	3b01      	subs	r3, #1
 800ab02:	4648      	mov	r0, r9
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	f7ff fa99 	bl	800a03c <quorem>
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab12:	4648      	mov	r0, r9
 800ab14:	f000 fc5a 	bl	800b3cc <__mcmp>
 800ab18:	462a      	mov	r2, r5
 800ab1a:	9008      	str	r0, [sp, #32]
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4658      	mov	r0, fp
 800ab20:	f000 fc70 	bl	800b404 <__mdiff>
 800ab24:	68c2      	ldr	r2, [r0, #12]
 800ab26:	4606      	mov	r6, r0
 800ab28:	bb02      	cbnz	r2, 800ab6c <_dtoa_r+0xa1c>
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	4648      	mov	r0, r9
 800ab2e:	f000 fc4d 	bl	800b3cc <__mcmp>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4631      	mov	r1, r6
 800ab36:	4658      	mov	r0, fp
 800ab38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab3a:	f000 fa0d 	bl	800af58 <_Bfree>
 800ab3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab42:	9e07      	ldr	r6, [sp, #28]
 800ab44:	ea43 0102 	orr.w	r1, r3, r2
 800ab48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4a:	4319      	orrs	r1, r3
 800ab4c:	d110      	bne.n	800ab70 <_dtoa_r+0xa20>
 800ab4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab52:	d029      	beq.n	800aba8 <_dtoa_r+0xa58>
 800ab54:	9b08      	ldr	r3, [sp, #32]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd02      	ble.n	800ab60 <_dtoa_r+0xa10>
 800ab5a:	9b02      	ldr	r3, [sp, #8]
 800ab5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab60:	9b00      	ldr	r3, [sp, #0]
 800ab62:	f883 8000 	strb.w	r8, [r3]
 800ab66:	e63f      	b.n	800a7e8 <_dtoa_r+0x698>
 800ab68:	4628      	mov	r0, r5
 800ab6a:	e7bb      	b.n	800aae4 <_dtoa_r+0x994>
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	e7e1      	b.n	800ab34 <_dtoa_r+0x9e4>
 800ab70:	9b08      	ldr	r3, [sp, #32]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	db04      	blt.n	800ab80 <_dtoa_r+0xa30>
 800ab76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	d120      	bne.n	800abc2 <_dtoa_r+0xa72>
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	dded      	ble.n	800ab60 <_dtoa_r+0xa10>
 800ab84:	4649      	mov	r1, r9
 800ab86:	2201      	movs	r2, #1
 800ab88:	4658      	mov	r0, fp
 800ab8a:	f000 fbb3 	bl	800b2f4 <__lshift>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4681      	mov	r9, r0
 800ab92:	f000 fc1b 	bl	800b3cc <__mcmp>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	dc03      	bgt.n	800aba2 <_dtoa_r+0xa52>
 800ab9a:	d1e1      	bne.n	800ab60 <_dtoa_r+0xa10>
 800ab9c:	f018 0f01 	tst.w	r8, #1
 800aba0:	d0de      	beq.n	800ab60 <_dtoa_r+0xa10>
 800aba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aba6:	d1d8      	bne.n	800ab5a <_dtoa_r+0xa0a>
 800aba8:	9a00      	ldr	r2, [sp, #0]
 800abaa:	2339      	movs	r3, #57	@ 0x39
 800abac:	7013      	strb	r3, [r2, #0]
 800abae:	4633      	mov	r3, r6
 800abb0:	461e      	mov	r6, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800abb8:	2a39      	cmp	r2, #57	@ 0x39
 800abba:	d052      	beq.n	800ac62 <_dtoa_r+0xb12>
 800abbc:	3201      	adds	r2, #1
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e612      	b.n	800a7e8 <_dtoa_r+0x698>
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	dd07      	ble.n	800abd6 <_dtoa_r+0xa86>
 800abc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abca:	d0ed      	beq.n	800aba8 <_dtoa_r+0xa58>
 800abcc:	9a00      	ldr	r2, [sp, #0]
 800abce:	f108 0301 	add.w	r3, r8, #1
 800abd2:	7013      	strb	r3, [r2, #0]
 800abd4:	e608      	b.n	800a7e8 <_dtoa_r+0x698>
 800abd6:	9b07      	ldr	r3, [sp, #28]
 800abd8:	9a07      	ldr	r2, [sp, #28]
 800abda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800abde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d028      	beq.n	800ac36 <_dtoa_r+0xae6>
 800abe4:	4649      	mov	r1, r9
 800abe6:	2300      	movs	r3, #0
 800abe8:	220a      	movs	r2, #10
 800abea:	4658      	mov	r0, fp
 800abec:	f000 f9d6 	bl	800af9c <__multadd>
 800abf0:	42af      	cmp	r7, r5
 800abf2:	4681      	mov	r9, r0
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	f04f 020a 	mov.w	r2, #10
 800abfc:	4639      	mov	r1, r7
 800abfe:	4658      	mov	r0, fp
 800ac00:	d107      	bne.n	800ac12 <_dtoa_r+0xac2>
 800ac02:	f000 f9cb 	bl	800af9c <__multadd>
 800ac06:	4607      	mov	r7, r0
 800ac08:	4605      	mov	r5, r0
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	e774      	b.n	800aafc <_dtoa_r+0x9ac>
 800ac12:	f000 f9c3 	bl	800af9c <__multadd>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4607      	mov	r7, r0
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	220a      	movs	r2, #10
 800ac1e:	4658      	mov	r0, fp
 800ac20:	f000 f9bc 	bl	800af9c <__multadd>
 800ac24:	4605      	mov	r5, r0
 800ac26:	e7f0      	b.n	800ac0a <_dtoa_r+0xaba>
 800ac28:	9b00      	ldr	r3, [sp, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfcc      	ite	gt
 800ac2e:	461e      	movgt	r6, r3
 800ac30:	2601      	movle	r6, #1
 800ac32:	4456      	add	r6, sl
 800ac34:	2700      	movs	r7, #0
 800ac36:	4649      	mov	r1, r9
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4658      	mov	r0, fp
 800ac3c:	f000 fb5a 	bl	800b2f4 <__lshift>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4681      	mov	r9, r0
 800ac44:	f000 fbc2 	bl	800b3cc <__mcmp>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	dcb0      	bgt.n	800abae <_dtoa_r+0xa5e>
 800ac4c:	d102      	bne.n	800ac54 <_dtoa_r+0xb04>
 800ac4e:	f018 0f01 	tst.w	r8, #1
 800ac52:	d1ac      	bne.n	800abae <_dtoa_r+0xa5e>
 800ac54:	4633      	mov	r3, r6
 800ac56:	461e      	mov	r6, r3
 800ac58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac5c:	2a30      	cmp	r2, #48	@ 0x30
 800ac5e:	d0fa      	beq.n	800ac56 <_dtoa_r+0xb06>
 800ac60:	e5c2      	b.n	800a7e8 <_dtoa_r+0x698>
 800ac62:	459a      	cmp	sl, r3
 800ac64:	d1a4      	bne.n	800abb0 <_dtoa_r+0xa60>
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	2331      	movs	r3, #49	@ 0x31
 800ac6e:	f88a 3000 	strb.w	r3, [sl]
 800ac72:	e5b9      	b.n	800a7e8 <_dtoa_r+0x698>
 800ac74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800acd4 <_dtoa_r+0xb84>
 800ac7a:	b11b      	cbz	r3, 800ac84 <_dtoa_r+0xb34>
 800ac7c:	f10a 0308 	add.w	r3, sl, #8
 800ac80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	4650      	mov	r0, sl
 800ac86:	b019      	add	sp, #100	@ 0x64
 800ac88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	f77f ae37 	ble.w	800a902 <_dtoa_r+0x7b2>
 800ac94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac98:	2001      	movs	r0, #1
 800ac9a:	e655      	b.n	800a948 <_dtoa_r+0x7f8>
 800ac9c:	9b00      	ldr	r3, [sp, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f77f aed6 	ble.w	800aa50 <_dtoa_r+0x900>
 800aca4:	4656      	mov	r6, sl
 800aca6:	4621      	mov	r1, r4
 800aca8:	4648      	mov	r0, r9
 800acaa:	f7ff f9c7 	bl	800a03c <quorem>
 800acae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acb2:	f806 8b01 	strb.w	r8, [r6], #1
 800acb6:	9b00      	ldr	r3, [sp, #0]
 800acb8:	eba6 020a 	sub.w	r2, r6, sl
 800acbc:	4293      	cmp	r3, r2
 800acbe:	ddb3      	ble.n	800ac28 <_dtoa_r+0xad8>
 800acc0:	4649      	mov	r1, r9
 800acc2:	2300      	movs	r3, #0
 800acc4:	220a      	movs	r2, #10
 800acc6:	4658      	mov	r0, fp
 800acc8:	f000 f968 	bl	800af9c <__multadd>
 800accc:	4681      	mov	r9, r0
 800acce:	e7ea      	b.n	800aca6 <_dtoa_r+0xb56>
 800acd0:	0800c33c 	.word	0x0800c33c
 800acd4:	0800c2c0 	.word	0x0800c2c0

0800acd8 <_free_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4605      	mov	r5, r0
 800acdc:	2900      	cmp	r1, #0
 800acde:	d041      	beq.n	800ad64 <_free_r+0x8c>
 800ace0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace4:	1f0c      	subs	r4, r1, #4
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	18e4      	addlt	r4, r4, r3
 800acec:	f000 f8e8 	bl	800aec0 <__malloc_lock>
 800acf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <_free_r+0x90>)
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	b933      	cbnz	r3, 800ad04 <_free_r+0x2c>
 800acf6:	6063      	str	r3, [r4, #4]
 800acf8:	6014      	str	r4, [r2, #0]
 800acfa:	4628      	mov	r0, r5
 800acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad00:	f000 b8e4 	b.w	800aecc <__malloc_unlock>
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	d908      	bls.n	800ad1a <_free_r+0x42>
 800ad08:	6820      	ldr	r0, [r4, #0]
 800ad0a:	1821      	adds	r1, r4, r0
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf01      	itttt	eq
 800ad10:	6819      	ldreq	r1, [r3, #0]
 800ad12:	685b      	ldreq	r3, [r3, #4]
 800ad14:	1809      	addeq	r1, r1, r0
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	e7ed      	b.n	800acf6 <_free_r+0x1e>
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b10b      	cbz	r3, 800ad24 <_free_r+0x4c>
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d9fa      	bls.n	800ad1a <_free_r+0x42>
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	1850      	adds	r0, r2, r1
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d10b      	bne.n	800ad44 <_free_r+0x6c>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4401      	add	r1, r0
 800ad30:	1850      	adds	r0, r2, r1
 800ad32:	4283      	cmp	r3, r0
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	d1e0      	bne.n	800acfa <_free_r+0x22>
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	6053      	str	r3, [r2, #4]
 800ad3e:	4408      	add	r0, r1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	e7da      	b.n	800acfa <_free_r+0x22>
 800ad44:	d902      	bls.n	800ad4c <_free_r+0x74>
 800ad46:	230c      	movs	r3, #12
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	e7d6      	b.n	800acfa <_free_r+0x22>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	1821      	adds	r1, r4, r0
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf04      	itt	eq
 800ad54:	6819      	ldreq	r1, [r3, #0]
 800ad56:	685b      	ldreq	r3, [r3, #4]
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	bf04      	itt	eq
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	6054      	str	r4, [r2, #4]
 800ad62:	e7ca      	b.n	800acfa <_free_r+0x22>
 800ad64:	bd38      	pop	{r3, r4, r5, pc}
 800ad66:	bf00      	nop
 800ad68:	200007a8 	.word	0x200007a8

0800ad6c <malloc>:
 800ad6c:	4b02      	ldr	r3, [pc, #8]	@ (800ad78 <malloc+0xc>)
 800ad6e:	4601      	mov	r1, r0
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	f000 b825 	b.w	800adc0 <_malloc_r>
 800ad76:	bf00      	nop
 800ad78:	20000030 	.word	0x20000030

0800ad7c <sbrk_aligned>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4e0f      	ldr	r6, [pc, #60]	@ (800adbc <sbrk_aligned+0x40>)
 800ad80:	460c      	mov	r4, r1
 800ad82:	6831      	ldr	r1, [r6, #0]
 800ad84:	4605      	mov	r5, r0
 800ad86:	b911      	cbnz	r1, 800ad8e <sbrk_aligned+0x12>
 800ad88:	f000 feac 	bl	800bae4 <_sbrk_r>
 800ad8c:	6030      	str	r0, [r6, #0]
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4628      	mov	r0, r5
 800ad92:	f000 fea7 	bl	800bae4 <_sbrk_r>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	d103      	bne.n	800ada2 <sbrk_aligned+0x26>
 800ad9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad9e:	4620      	mov	r0, r4
 800ada0:	bd70      	pop	{r4, r5, r6, pc}
 800ada2:	1cc4      	adds	r4, r0, #3
 800ada4:	f024 0403 	bic.w	r4, r4, #3
 800ada8:	42a0      	cmp	r0, r4
 800adaa:	d0f8      	beq.n	800ad9e <sbrk_aligned+0x22>
 800adac:	1a21      	subs	r1, r4, r0
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fe98 	bl	800bae4 <_sbrk_r>
 800adb4:	3001      	adds	r0, #1
 800adb6:	d1f2      	bne.n	800ad9e <sbrk_aligned+0x22>
 800adb8:	e7ef      	b.n	800ad9a <sbrk_aligned+0x1e>
 800adba:	bf00      	nop
 800adbc:	200007a4 	.word	0x200007a4

0800adc0 <_malloc_r>:
 800adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	1ccd      	adds	r5, r1, #3
 800adc6:	f025 0503 	bic.w	r5, r5, #3
 800adca:	3508      	adds	r5, #8
 800adcc:	2d0c      	cmp	r5, #12
 800adce:	bf38      	it	cc
 800add0:	250c      	movcc	r5, #12
 800add2:	2d00      	cmp	r5, #0
 800add4:	4606      	mov	r6, r0
 800add6:	db01      	blt.n	800addc <_malloc_r+0x1c>
 800add8:	42a9      	cmp	r1, r5
 800adda:	d904      	bls.n	800ade6 <_malloc_r+0x26>
 800addc:	230c      	movs	r3, #12
 800adde:	6033      	str	r3, [r6, #0]
 800ade0:	2000      	movs	r0, #0
 800ade2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aebc <_malloc_r+0xfc>
 800adea:	f000 f869 	bl	800aec0 <__malloc_lock>
 800adee:	f8d8 3000 	ldr.w	r3, [r8]
 800adf2:	461c      	mov	r4, r3
 800adf4:	bb44      	cbnz	r4, 800ae48 <_malloc_r+0x88>
 800adf6:	4629      	mov	r1, r5
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ffbf 	bl	800ad7c <sbrk_aligned>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	4604      	mov	r4, r0
 800ae02:	d158      	bne.n	800aeb6 <_malloc_r+0xf6>
 800ae04:	f8d8 4000 	ldr.w	r4, [r8]
 800ae08:	4627      	mov	r7, r4
 800ae0a:	2f00      	cmp	r7, #0
 800ae0c:	d143      	bne.n	800ae96 <_malloc_r+0xd6>
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d04b      	beq.n	800aeaa <_malloc_r+0xea>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	4639      	mov	r1, r7
 800ae16:	4630      	mov	r0, r6
 800ae18:	eb04 0903 	add.w	r9, r4, r3
 800ae1c:	f000 fe62 	bl	800bae4 <_sbrk_r>
 800ae20:	4581      	cmp	r9, r0
 800ae22:	d142      	bne.n	800aeaa <_malloc_r+0xea>
 800ae24:	6821      	ldr	r1, [r4, #0]
 800ae26:	1a6d      	subs	r5, r5, r1
 800ae28:	4629      	mov	r1, r5
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7ff ffa6 	bl	800ad7c <sbrk_aligned>
 800ae30:	3001      	adds	r0, #1
 800ae32:	d03a      	beq.n	800aeaa <_malloc_r+0xea>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	442b      	add	r3, r5
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	bb62      	cbnz	r2, 800ae9c <_malloc_r+0xdc>
 800ae42:	f8c8 7000 	str.w	r7, [r8]
 800ae46:	e00f      	b.n	800ae68 <_malloc_r+0xa8>
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	1b52      	subs	r2, r2, r5
 800ae4c:	d420      	bmi.n	800ae90 <_malloc_r+0xd0>
 800ae4e:	2a0b      	cmp	r2, #11
 800ae50:	d917      	bls.n	800ae82 <_malloc_r+0xc2>
 800ae52:	1961      	adds	r1, r4, r5
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	6025      	str	r5, [r4, #0]
 800ae58:	bf18      	it	ne
 800ae5a:	6059      	strne	r1, [r3, #4]
 800ae5c:	6863      	ldr	r3, [r4, #4]
 800ae5e:	bf08      	it	eq
 800ae60:	f8c8 1000 	streq.w	r1, [r8]
 800ae64:	5162      	str	r2, [r4, r5]
 800ae66:	604b      	str	r3, [r1, #4]
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f000 f82f 	bl	800aecc <__malloc_unlock>
 800ae6e:	f104 000b 	add.w	r0, r4, #11
 800ae72:	1d23      	adds	r3, r4, #4
 800ae74:	f020 0007 	bic.w	r0, r0, #7
 800ae78:	1ac2      	subs	r2, r0, r3
 800ae7a:	bf1c      	itt	ne
 800ae7c:	1a1b      	subne	r3, r3, r0
 800ae7e:	50a3      	strne	r3, [r4, r2]
 800ae80:	e7af      	b.n	800ade2 <_malloc_r+0x22>
 800ae82:	6862      	ldr	r2, [r4, #4]
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	bf0c      	ite	eq
 800ae88:	f8c8 2000 	streq.w	r2, [r8]
 800ae8c:	605a      	strne	r2, [r3, #4]
 800ae8e:	e7eb      	b.n	800ae68 <_malloc_r+0xa8>
 800ae90:	4623      	mov	r3, r4
 800ae92:	6864      	ldr	r4, [r4, #4]
 800ae94:	e7ae      	b.n	800adf4 <_malloc_r+0x34>
 800ae96:	463c      	mov	r4, r7
 800ae98:	687f      	ldr	r7, [r7, #4]
 800ae9a:	e7b6      	b.n	800ae0a <_malloc_r+0x4a>
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d1fb      	bne.n	800ae9c <_malloc_r+0xdc>
 800aea4:	2300      	movs	r3, #0
 800aea6:	6053      	str	r3, [r2, #4]
 800aea8:	e7de      	b.n	800ae68 <_malloc_r+0xa8>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f000 f80c 	bl	800aecc <__malloc_unlock>
 800aeb4:	e794      	b.n	800ade0 <_malloc_r+0x20>
 800aeb6:	6005      	str	r5, [r0, #0]
 800aeb8:	e7d6      	b.n	800ae68 <_malloc_r+0xa8>
 800aeba:	bf00      	nop
 800aebc:	200007a8 	.word	0x200007a8

0800aec0 <__malloc_lock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	@ (800aec8 <__malloc_lock+0x8>)
 800aec2:	f7ff b89a 	b.w	8009ffa <__retarget_lock_acquire_recursive>
 800aec6:	bf00      	nop
 800aec8:	200007a0 	.word	0x200007a0

0800aecc <__malloc_unlock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	@ (800aed4 <__malloc_unlock+0x8>)
 800aece:	f7ff b895 	b.w	8009ffc <__retarget_lock_release_recursive>
 800aed2:	bf00      	nop
 800aed4:	200007a0 	.word	0x200007a0

0800aed8 <_Balloc>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	69c6      	ldr	r6, [r0, #28]
 800aedc:	4604      	mov	r4, r0
 800aede:	460d      	mov	r5, r1
 800aee0:	b976      	cbnz	r6, 800af00 <_Balloc+0x28>
 800aee2:	2010      	movs	r0, #16
 800aee4:	f7ff ff42 	bl	800ad6c <malloc>
 800aee8:	4602      	mov	r2, r0
 800aeea:	61e0      	str	r0, [r4, #28]
 800aeec:	b920      	cbnz	r0, 800aef8 <_Balloc+0x20>
 800aeee:	4b18      	ldr	r3, [pc, #96]	@ (800af50 <_Balloc+0x78>)
 800aef0:	4818      	ldr	r0, [pc, #96]	@ (800af54 <_Balloc+0x7c>)
 800aef2:	216b      	movs	r1, #107	@ 0x6b
 800aef4:	f7ff f884 	bl	800a000 <__assert_func>
 800aef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aefc:	6006      	str	r6, [r0, #0]
 800aefe:	60c6      	str	r6, [r0, #12]
 800af00:	69e6      	ldr	r6, [r4, #28]
 800af02:	68f3      	ldr	r3, [r6, #12]
 800af04:	b183      	cbz	r3, 800af28 <_Balloc+0x50>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af0e:	b9b8      	cbnz	r0, 800af40 <_Balloc+0x68>
 800af10:	2101      	movs	r1, #1
 800af12:	fa01 f605 	lsl.w	r6, r1, r5
 800af16:	1d72      	adds	r2, r6, #5
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fe07 	bl	800bb2e <_calloc_r>
 800af20:	b160      	cbz	r0, 800af3c <_Balloc+0x64>
 800af22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af26:	e00e      	b.n	800af46 <_Balloc+0x6e>
 800af28:	2221      	movs	r2, #33	@ 0x21
 800af2a:	2104      	movs	r1, #4
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fdfe 	bl	800bb2e <_calloc_r>
 800af32:	69e3      	ldr	r3, [r4, #28]
 800af34:	60f0      	str	r0, [r6, #12]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e4      	bne.n	800af06 <_Balloc+0x2e>
 800af3c:	2000      	movs	r0, #0
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	6802      	ldr	r2, [r0, #0]
 800af42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af46:	2300      	movs	r3, #0
 800af48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af4c:	e7f7      	b.n	800af3e <_Balloc+0x66>
 800af4e:	bf00      	nop
 800af50:	0800c2cd 	.word	0x0800c2cd
 800af54:	0800c34d 	.word	0x0800c34d

0800af58 <_Bfree>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	69c6      	ldr	r6, [r0, #28]
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	b976      	cbnz	r6, 800af80 <_Bfree+0x28>
 800af62:	2010      	movs	r0, #16
 800af64:	f7ff ff02 	bl	800ad6c <malloc>
 800af68:	4602      	mov	r2, r0
 800af6a:	61e8      	str	r0, [r5, #28]
 800af6c:	b920      	cbnz	r0, 800af78 <_Bfree+0x20>
 800af6e:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <_Bfree+0x3c>)
 800af70:	4809      	ldr	r0, [pc, #36]	@ (800af98 <_Bfree+0x40>)
 800af72:	218f      	movs	r1, #143	@ 0x8f
 800af74:	f7ff f844 	bl	800a000 <__assert_func>
 800af78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af7c:	6006      	str	r6, [r0, #0]
 800af7e:	60c6      	str	r6, [r0, #12]
 800af80:	b13c      	cbz	r4, 800af92 <_Bfree+0x3a>
 800af82:	69eb      	ldr	r3, [r5, #28]
 800af84:	6862      	ldr	r2, [r4, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af8c:	6021      	str	r1, [r4, #0]
 800af8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	0800c2cd 	.word	0x0800c2cd
 800af98:	0800c34d 	.word	0x0800c34d

0800af9c <__multadd>:
 800af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa0:	690d      	ldr	r5, [r1, #16]
 800afa2:	4607      	mov	r7, r0
 800afa4:	460c      	mov	r4, r1
 800afa6:	461e      	mov	r6, r3
 800afa8:	f101 0c14 	add.w	ip, r1, #20
 800afac:	2000      	movs	r0, #0
 800afae:	f8dc 3000 	ldr.w	r3, [ip]
 800afb2:	b299      	uxth	r1, r3
 800afb4:	fb02 6101 	mla	r1, r2, r1, r6
 800afb8:	0c1e      	lsrs	r6, r3, #16
 800afba:	0c0b      	lsrs	r3, r1, #16
 800afbc:	fb02 3306 	mla	r3, r2, r6, r3
 800afc0:	b289      	uxth	r1, r1
 800afc2:	3001      	adds	r0, #1
 800afc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afc8:	4285      	cmp	r5, r0
 800afca:	f84c 1b04 	str.w	r1, [ip], #4
 800afce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afd2:	dcec      	bgt.n	800afae <__multadd+0x12>
 800afd4:	b30e      	cbz	r6, 800b01a <__multadd+0x7e>
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	42ab      	cmp	r3, r5
 800afda:	dc19      	bgt.n	800b010 <__multadd+0x74>
 800afdc:	6861      	ldr	r1, [r4, #4]
 800afde:	4638      	mov	r0, r7
 800afe0:	3101      	adds	r1, #1
 800afe2:	f7ff ff79 	bl	800aed8 <_Balloc>
 800afe6:	4680      	mov	r8, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__multadd+0x5a>
 800afea:	4602      	mov	r2, r0
 800afec:	4b0c      	ldr	r3, [pc, #48]	@ (800b020 <__multadd+0x84>)
 800afee:	480d      	ldr	r0, [pc, #52]	@ (800b024 <__multadd+0x88>)
 800aff0:	21ba      	movs	r1, #186	@ 0xba
 800aff2:	f7ff f805 	bl	800a000 <__assert_func>
 800aff6:	6922      	ldr	r2, [r4, #16]
 800aff8:	3202      	adds	r2, #2
 800affa:	f104 010c 	add.w	r1, r4, #12
 800affe:	0092      	lsls	r2, r2, #2
 800b000:	300c      	adds	r0, #12
 800b002:	f000 fd7f 	bl	800bb04 <memcpy>
 800b006:	4621      	mov	r1, r4
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff ffa5 	bl	800af58 <_Bfree>
 800b00e:	4644      	mov	r4, r8
 800b010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b014:	3501      	adds	r5, #1
 800b016:	615e      	str	r6, [r3, #20]
 800b018:	6125      	str	r5, [r4, #16]
 800b01a:	4620      	mov	r0, r4
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	0800c33c 	.word	0x0800c33c
 800b024:	0800c34d 	.word	0x0800c34d

0800b028 <__hi0bits>:
 800b028:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b02c:	4603      	mov	r3, r0
 800b02e:	bf36      	itet	cc
 800b030:	0403      	lslcc	r3, r0, #16
 800b032:	2000      	movcs	r0, #0
 800b034:	2010      	movcc	r0, #16
 800b036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b03a:	bf3c      	itt	cc
 800b03c:	021b      	lslcc	r3, r3, #8
 800b03e:	3008      	addcc	r0, #8
 800b040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b044:	bf3c      	itt	cc
 800b046:	011b      	lslcc	r3, r3, #4
 800b048:	3004      	addcc	r0, #4
 800b04a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b04e:	bf3c      	itt	cc
 800b050:	009b      	lslcc	r3, r3, #2
 800b052:	3002      	addcc	r0, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	db05      	blt.n	800b064 <__hi0bits+0x3c>
 800b058:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b05c:	f100 0001 	add.w	r0, r0, #1
 800b060:	bf08      	it	eq
 800b062:	2020      	moveq	r0, #32
 800b064:	4770      	bx	lr

0800b066 <__lo0bits>:
 800b066:	6803      	ldr	r3, [r0, #0]
 800b068:	4602      	mov	r2, r0
 800b06a:	f013 0007 	ands.w	r0, r3, #7
 800b06e:	d00b      	beq.n	800b088 <__lo0bits+0x22>
 800b070:	07d9      	lsls	r1, r3, #31
 800b072:	d421      	bmi.n	800b0b8 <__lo0bits+0x52>
 800b074:	0798      	lsls	r0, r3, #30
 800b076:	bf49      	itett	mi
 800b078:	085b      	lsrmi	r3, r3, #1
 800b07a:	089b      	lsrpl	r3, r3, #2
 800b07c:	2001      	movmi	r0, #1
 800b07e:	6013      	strmi	r3, [r2, #0]
 800b080:	bf5c      	itt	pl
 800b082:	6013      	strpl	r3, [r2, #0]
 800b084:	2002      	movpl	r0, #2
 800b086:	4770      	bx	lr
 800b088:	b299      	uxth	r1, r3
 800b08a:	b909      	cbnz	r1, 800b090 <__lo0bits+0x2a>
 800b08c:	0c1b      	lsrs	r3, r3, #16
 800b08e:	2010      	movs	r0, #16
 800b090:	b2d9      	uxtb	r1, r3
 800b092:	b909      	cbnz	r1, 800b098 <__lo0bits+0x32>
 800b094:	3008      	adds	r0, #8
 800b096:	0a1b      	lsrs	r3, r3, #8
 800b098:	0719      	lsls	r1, r3, #28
 800b09a:	bf04      	itt	eq
 800b09c:	091b      	lsreq	r3, r3, #4
 800b09e:	3004      	addeq	r0, #4
 800b0a0:	0799      	lsls	r1, r3, #30
 800b0a2:	bf04      	itt	eq
 800b0a4:	089b      	lsreq	r3, r3, #2
 800b0a6:	3002      	addeq	r0, #2
 800b0a8:	07d9      	lsls	r1, r3, #31
 800b0aa:	d403      	bmi.n	800b0b4 <__lo0bits+0x4e>
 800b0ac:	085b      	lsrs	r3, r3, #1
 800b0ae:	f100 0001 	add.w	r0, r0, #1
 800b0b2:	d003      	beq.n	800b0bc <__lo0bits+0x56>
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	4770      	bx	lr
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	4770      	bx	lr
 800b0bc:	2020      	movs	r0, #32
 800b0be:	4770      	bx	lr

0800b0c0 <__i2b>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	f7ff ff07 	bl	800aed8 <_Balloc>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	b928      	cbnz	r0, 800b0da <__i2b+0x1a>
 800b0ce:	4b05      	ldr	r3, [pc, #20]	@ (800b0e4 <__i2b+0x24>)
 800b0d0:	4805      	ldr	r0, [pc, #20]	@ (800b0e8 <__i2b+0x28>)
 800b0d2:	f240 1145 	movw	r1, #325	@ 0x145
 800b0d6:	f7fe ff93 	bl	800a000 <__assert_func>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	6144      	str	r4, [r0, #20]
 800b0de:	6103      	str	r3, [r0, #16]
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800c33c 	.word	0x0800c33c
 800b0e8:	0800c34d 	.word	0x0800c34d

0800b0ec <__multiply>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	690a      	ldr	r2, [r1, #16]
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	bfa8      	it	ge
 800b0fa:	4623      	movge	r3, r4
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	bfa4      	itt	ge
 800b100:	460c      	movge	r4, r1
 800b102:	461f      	movge	r7, r3
 800b104:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b108:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	6861      	ldr	r1, [r4, #4]
 800b110:	eb0a 0609 	add.w	r6, sl, r9
 800b114:	42b3      	cmp	r3, r6
 800b116:	b085      	sub	sp, #20
 800b118:	bfb8      	it	lt
 800b11a:	3101      	addlt	r1, #1
 800b11c:	f7ff fedc 	bl	800aed8 <_Balloc>
 800b120:	b930      	cbnz	r0, 800b130 <__multiply+0x44>
 800b122:	4602      	mov	r2, r0
 800b124:	4b44      	ldr	r3, [pc, #272]	@ (800b238 <__multiply+0x14c>)
 800b126:	4845      	ldr	r0, [pc, #276]	@ (800b23c <__multiply+0x150>)
 800b128:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b12c:	f7fe ff68 	bl	800a000 <__assert_func>
 800b130:	f100 0514 	add.w	r5, r0, #20
 800b134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b138:	462b      	mov	r3, r5
 800b13a:	2200      	movs	r2, #0
 800b13c:	4543      	cmp	r3, r8
 800b13e:	d321      	bcc.n	800b184 <__multiply+0x98>
 800b140:	f107 0114 	add.w	r1, r7, #20
 800b144:	f104 0214 	add.w	r2, r4, #20
 800b148:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b14c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	1b13      	subs	r3, r2, r4
 800b154:	3b15      	subs	r3, #21
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	3304      	adds	r3, #4
 800b15c:	f104 0715 	add.w	r7, r4, #21
 800b160:	42ba      	cmp	r2, r7
 800b162:	bf38      	it	cc
 800b164:	2304      	movcc	r3, #4
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	9103      	str	r1, [sp, #12]
 800b16c:	428b      	cmp	r3, r1
 800b16e:	d80c      	bhi.n	800b18a <__multiply+0x9e>
 800b170:	2e00      	cmp	r6, #0
 800b172:	dd03      	ble.n	800b17c <__multiply+0x90>
 800b174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d05b      	beq.n	800b234 <__multiply+0x148>
 800b17c:	6106      	str	r6, [r0, #16]
 800b17e:	b005      	add	sp, #20
 800b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b184:	f843 2b04 	str.w	r2, [r3], #4
 800b188:	e7d8      	b.n	800b13c <__multiply+0x50>
 800b18a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b18e:	f1ba 0f00 	cmp.w	sl, #0
 800b192:	d024      	beq.n	800b1de <__multiply+0xf2>
 800b194:	f104 0e14 	add.w	lr, r4, #20
 800b198:	46a9      	mov	r9, r5
 800b19a:	f04f 0c00 	mov.w	ip, #0
 800b19e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1a2:	f8d9 3000 	ldr.w	r3, [r9]
 800b1a6:	fa1f fb87 	uxth.w	fp, r7
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1b4:	f8d9 7000 	ldr.w	r7, [r9]
 800b1b8:	4463      	add	r3, ip
 800b1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1be:	fb0a c70b 	mla	r7, sl, fp, ip
 800b1c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1cc:	4572      	cmp	r2, lr
 800b1ce:	f849 3b04 	str.w	r3, [r9], #4
 800b1d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1d6:	d8e2      	bhi.n	800b19e <__multiply+0xb2>
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	f845 c003 	str.w	ip, [r5, r3]
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1e4:	3104      	adds	r1, #4
 800b1e6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ea:	d021      	beq.n	800b230 <__multiply+0x144>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	f104 0c14 	add.w	ip, r4, #20
 800b1f2:	46ae      	mov	lr, r5
 800b1f4:	f04f 0a00 	mov.w	sl, #0
 800b1f8:	f8bc b000 	ldrh.w	fp, [ip]
 800b1fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b200:	fb09 770b 	mla	r7, r9, fp, r7
 800b204:	4457      	add	r7, sl
 800b206:	b29b      	uxth	r3, r3
 800b208:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b20c:	f84e 3b04 	str.w	r3, [lr], #4
 800b210:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b218:	f8be 3000 	ldrh.w	r3, [lr]
 800b21c:	fb09 330a 	mla	r3, r9, sl, r3
 800b220:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b224:	4562      	cmp	r2, ip
 800b226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b22a:	d8e5      	bhi.n	800b1f8 <__multiply+0x10c>
 800b22c:	9f01      	ldr	r7, [sp, #4]
 800b22e:	51eb      	str	r3, [r5, r7]
 800b230:	3504      	adds	r5, #4
 800b232:	e799      	b.n	800b168 <__multiply+0x7c>
 800b234:	3e01      	subs	r6, #1
 800b236:	e79b      	b.n	800b170 <__multiply+0x84>
 800b238:	0800c33c 	.word	0x0800c33c
 800b23c:	0800c34d 	.word	0x0800c34d

0800b240 <__pow5mult>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	4615      	mov	r5, r2
 800b246:	f012 0203 	ands.w	r2, r2, #3
 800b24a:	4607      	mov	r7, r0
 800b24c:	460e      	mov	r6, r1
 800b24e:	d007      	beq.n	800b260 <__pow5mult+0x20>
 800b250:	4c25      	ldr	r4, [pc, #148]	@ (800b2e8 <__pow5mult+0xa8>)
 800b252:	3a01      	subs	r2, #1
 800b254:	2300      	movs	r3, #0
 800b256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b25a:	f7ff fe9f 	bl	800af9c <__multadd>
 800b25e:	4606      	mov	r6, r0
 800b260:	10ad      	asrs	r5, r5, #2
 800b262:	d03d      	beq.n	800b2e0 <__pow5mult+0xa0>
 800b264:	69fc      	ldr	r4, [r7, #28]
 800b266:	b97c      	cbnz	r4, 800b288 <__pow5mult+0x48>
 800b268:	2010      	movs	r0, #16
 800b26a:	f7ff fd7f 	bl	800ad6c <malloc>
 800b26e:	4602      	mov	r2, r0
 800b270:	61f8      	str	r0, [r7, #28]
 800b272:	b928      	cbnz	r0, 800b280 <__pow5mult+0x40>
 800b274:	4b1d      	ldr	r3, [pc, #116]	@ (800b2ec <__pow5mult+0xac>)
 800b276:	481e      	ldr	r0, [pc, #120]	@ (800b2f0 <__pow5mult+0xb0>)
 800b278:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b27c:	f7fe fec0 	bl	800a000 <__assert_func>
 800b280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b284:	6004      	str	r4, [r0, #0]
 800b286:	60c4      	str	r4, [r0, #12]
 800b288:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b290:	b94c      	cbnz	r4, 800b2a6 <__pow5mult+0x66>
 800b292:	f240 2171 	movw	r1, #625	@ 0x271
 800b296:	4638      	mov	r0, r7
 800b298:	f7ff ff12 	bl	800b0c0 <__i2b>
 800b29c:	2300      	movs	r3, #0
 800b29e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	6003      	str	r3, [r0, #0]
 800b2a6:	f04f 0900 	mov.w	r9, #0
 800b2aa:	07eb      	lsls	r3, r5, #31
 800b2ac:	d50a      	bpl.n	800b2c4 <__pow5mult+0x84>
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f7ff ff1a 	bl	800b0ec <__multiply>
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4680      	mov	r8, r0
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f7ff fe4b 	bl	800af58 <_Bfree>
 800b2c2:	4646      	mov	r6, r8
 800b2c4:	106d      	asrs	r5, r5, #1
 800b2c6:	d00b      	beq.n	800b2e0 <__pow5mult+0xa0>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	b938      	cbnz	r0, 800b2dc <__pow5mult+0x9c>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ff0b 	bl	800b0ec <__multiply>
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	f8c0 9000 	str.w	r9, [r0]
 800b2dc:	4604      	mov	r4, r0
 800b2de:	e7e4      	b.n	800b2aa <__pow5mult+0x6a>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e6:	bf00      	nop
 800b2e8:	0800c3a8 	.word	0x0800c3a8
 800b2ec:	0800c2cd 	.word	0x0800c2cd
 800b2f0:	0800c34d 	.word	0x0800c34d

0800b2f4 <__lshift>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	6849      	ldr	r1, [r1, #4]
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	4607      	mov	r7, r0
 800b306:	4691      	mov	r9, r2
 800b308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b30c:	f108 0601 	add.w	r6, r8, #1
 800b310:	42b3      	cmp	r3, r6
 800b312:	db0b      	blt.n	800b32c <__lshift+0x38>
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff fddf 	bl	800aed8 <_Balloc>
 800b31a:	4605      	mov	r5, r0
 800b31c:	b948      	cbnz	r0, 800b332 <__lshift+0x3e>
 800b31e:	4602      	mov	r2, r0
 800b320:	4b28      	ldr	r3, [pc, #160]	@ (800b3c4 <__lshift+0xd0>)
 800b322:	4829      	ldr	r0, [pc, #164]	@ (800b3c8 <__lshift+0xd4>)
 800b324:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b328:	f7fe fe6a 	bl	800a000 <__assert_func>
 800b32c:	3101      	adds	r1, #1
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	e7ee      	b.n	800b310 <__lshift+0x1c>
 800b332:	2300      	movs	r3, #0
 800b334:	f100 0114 	add.w	r1, r0, #20
 800b338:	f100 0210 	add.w	r2, r0, #16
 800b33c:	4618      	mov	r0, r3
 800b33e:	4553      	cmp	r3, sl
 800b340:	db33      	blt.n	800b3aa <__lshift+0xb6>
 800b342:	6920      	ldr	r0, [r4, #16]
 800b344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b348:	f104 0314 	add.w	r3, r4, #20
 800b34c:	f019 091f 	ands.w	r9, r9, #31
 800b350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b358:	d02b      	beq.n	800b3b2 <__lshift+0xbe>
 800b35a:	f1c9 0e20 	rsb	lr, r9, #32
 800b35e:	468a      	mov	sl, r1
 800b360:	2200      	movs	r2, #0
 800b362:	6818      	ldr	r0, [r3, #0]
 800b364:	fa00 f009 	lsl.w	r0, r0, r9
 800b368:	4310      	orrs	r0, r2
 800b36a:	f84a 0b04 	str.w	r0, [sl], #4
 800b36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b372:	459c      	cmp	ip, r3
 800b374:	fa22 f20e 	lsr.w	r2, r2, lr
 800b378:	d8f3      	bhi.n	800b362 <__lshift+0x6e>
 800b37a:	ebac 0304 	sub.w	r3, ip, r4
 800b37e:	3b15      	subs	r3, #21
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	3304      	adds	r3, #4
 800b386:	f104 0015 	add.w	r0, r4, #21
 800b38a:	4584      	cmp	ip, r0
 800b38c:	bf38      	it	cc
 800b38e:	2304      	movcc	r3, #4
 800b390:	50ca      	str	r2, [r1, r3]
 800b392:	b10a      	cbz	r2, 800b398 <__lshift+0xa4>
 800b394:	f108 0602 	add.w	r6, r8, #2
 800b398:	3e01      	subs	r6, #1
 800b39a:	4638      	mov	r0, r7
 800b39c:	612e      	str	r6, [r5, #16]
 800b39e:	4621      	mov	r1, r4
 800b3a0:	f7ff fdda 	bl	800af58 <_Bfree>
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	e7c5      	b.n	800b33e <__lshift+0x4a>
 800b3b2:	3904      	subs	r1, #4
 800b3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3bc:	459c      	cmp	ip, r3
 800b3be:	d8f9      	bhi.n	800b3b4 <__lshift+0xc0>
 800b3c0:	e7ea      	b.n	800b398 <__lshift+0xa4>
 800b3c2:	bf00      	nop
 800b3c4:	0800c33c 	.word	0x0800c33c
 800b3c8:	0800c34d 	.word	0x0800c34d

0800b3cc <__mcmp>:
 800b3cc:	690a      	ldr	r2, [r1, #16]
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6900      	ldr	r0, [r0, #16]
 800b3d2:	1a80      	subs	r0, r0, r2
 800b3d4:	b530      	push	{r4, r5, lr}
 800b3d6:	d10e      	bne.n	800b3f6 <__mcmp+0x2a>
 800b3d8:	3314      	adds	r3, #20
 800b3da:	3114      	adds	r1, #20
 800b3dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3ec:	4295      	cmp	r5, r2
 800b3ee:	d003      	beq.n	800b3f8 <__mcmp+0x2c>
 800b3f0:	d205      	bcs.n	800b3fe <__mcmp+0x32>
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	bd30      	pop	{r4, r5, pc}
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	d3f3      	bcc.n	800b3e4 <__mcmp+0x18>
 800b3fc:	e7fb      	b.n	800b3f6 <__mcmp+0x2a>
 800b3fe:	2001      	movs	r0, #1
 800b400:	e7f9      	b.n	800b3f6 <__mcmp+0x2a>
	...

0800b404 <__mdiff>:
 800b404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	4689      	mov	r9, r1
 800b40a:	4606      	mov	r6, r0
 800b40c:	4611      	mov	r1, r2
 800b40e:	4648      	mov	r0, r9
 800b410:	4614      	mov	r4, r2
 800b412:	f7ff ffdb 	bl	800b3cc <__mcmp>
 800b416:	1e05      	subs	r5, r0, #0
 800b418:	d112      	bne.n	800b440 <__mdiff+0x3c>
 800b41a:	4629      	mov	r1, r5
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fd5b 	bl	800aed8 <_Balloc>
 800b422:	4602      	mov	r2, r0
 800b424:	b928      	cbnz	r0, 800b432 <__mdiff+0x2e>
 800b426:	4b3f      	ldr	r3, [pc, #252]	@ (800b524 <__mdiff+0x120>)
 800b428:	f240 2137 	movw	r1, #567	@ 0x237
 800b42c:	483e      	ldr	r0, [pc, #248]	@ (800b528 <__mdiff+0x124>)
 800b42e:	f7fe fde7 	bl	800a000 <__assert_func>
 800b432:	2301      	movs	r3, #1
 800b434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b438:	4610      	mov	r0, r2
 800b43a:	b003      	add	sp, #12
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	bfbc      	itt	lt
 800b442:	464b      	movlt	r3, r9
 800b444:	46a1      	movlt	r9, r4
 800b446:	4630      	mov	r0, r6
 800b448:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b44c:	bfba      	itte	lt
 800b44e:	461c      	movlt	r4, r3
 800b450:	2501      	movlt	r5, #1
 800b452:	2500      	movge	r5, #0
 800b454:	f7ff fd40 	bl	800aed8 <_Balloc>
 800b458:	4602      	mov	r2, r0
 800b45a:	b918      	cbnz	r0, 800b464 <__mdiff+0x60>
 800b45c:	4b31      	ldr	r3, [pc, #196]	@ (800b524 <__mdiff+0x120>)
 800b45e:	f240 2145 	movw	r1, #581	@ 0x245
 800b462:	e7e3      	b.n	800b42c <__mdiff+0x28>
 800b464:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b468:	6926      	ldr	r6, [r4, #16]
 800b46a:	60c5      	str	r5, [r0, #12]
 800b46c:	f109 0310 	add.w	r3, r9, #16
 800b470:	f109 0514 	add.w	r5, r9, #20
 800b474:	f104 0e14 	add.w	lr, r4, #20
 800b478:	f100 0b14 	add.w	fp, r0, #20
 800b47c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b480:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	46d9      	mov	r9, fp
 800b488:	f04f 0c00 	mov.w	ip, #0
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b492:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	fa1f f38a 	uxth.w	r3, sl
 800b49c:	4619      	mov	r1, r3
 800b49e:	b283      	uxth	r3, r0
 800b4a0:	1acb      	subs	r3, r1, r3
 800b4a2:	0c00      	lsrs	r0, r0, #16
 800b4a4:	4463      	add	r3, ip
 800b4a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4b4:	4576      	cmp	r6, lr
 800b4b6:	f849 3b04 	str.w	r3, [r9], #4
 800b4ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4be:	d8e5      	bhi.n	800b48c <__mdiff+0x88>
 800b4c0:	1b33      	subs	r3, r6, r4
 800b4c2:	3b15      	subs	r3, #21
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	3415      	adds	r4, #21
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	42a6      	cmp	r6, r4
 800b4ce:	bf38      	it	cc
 800b4d0:	2304      	movcc	r3, #4
 800b4d2:	441d      	add	r5, r3
 800b4d4:	445b      	add	r3, fp
 800b4d6:	461e      	mov	r6, r3
 800b4d8:	462c      	mov	r4, r5
 800b4da:	4544      	cmp	r4, r8
 800b4dc:	d30e      	bcc.n	800b4fc <__mdiff+0xf8>
 800b4de:	f108 0103 	add.w	r1, r8, #3
 800b4e2:	1b49      	subs	r1, r1, r5
 800b4e4:	f021 0103 	bic.w	r1, r1, #3
 800b4e8:	3d03      	subs	r5, #3
 800b4ea:	45a8      	cmp	r8, r5
 800b4ec:	bf38      	it	cc
 800b4ee:	2100      	movcc	r1, #0
 800b4f0:	440b      	add	r3, r1
 800b4f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4f6:	b191      	cbz	r1, 800b51e <__mdiff+0x11a>
 800b4f8:	6117      	str	r7, [r2, #16]
 800b4fa:	e79d      	b.n	800b438 <__mdiff+0x34>
 800b4fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b500:	46e6      	mov	lr, ip
 800b502:	0c08      	lsrs	r0, r1, #16
 800b504:	fa1c fc81 	uxtah	ip, ip, r1
 800b508:	4471      	add	r1, lr
 800b50a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b50e:	b289      	uxth	r1, r1
 800b510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b514:	f846 1b04 	str.w	r1, [r6], #4
 800b518:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b51c:	e7dd      	b.n	800b4da <__mdiff+0xd6>
 800b51e:	3f01      	subs	r7, #1
 800b520:	e7e7      	b.n	800b4f2 <__mdiff+0xee>
 800b522:	bf00      	nop
 800b524:	0800c33c 	.word	0x0800c33c
 800b528:	0800c34d 	.word	0x0800c34d

0800b52c <__d2b>:
 800b52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b530:	460f      	mov	r7, r1
 800b532:	2101      	movs	r1, #1
 800b534:	ec59 8b10 	vmov	r8, r9, d0
 800b538:	4616      	mov	r6, r2
 800b53a:	f7ff fccd 	bl	800aed8 <_Balloc>
 800b53e:	4604      	mov	r4, r0
 800b540:	b930      	cbnz	r0, 800b550 <__d2b+0x24>
 800b542:	4602      	mov	r2, r0
 800b544:	4b23      	ldr	r3, [pc, #140]	@ (800b5d4 <__d2b+0xa8>)
 800b546:	4824      	ldr	r0, [pc, #144]	@ (800b5d8 <__d2b+0xac>)
 800b548:	f240 310f 	movw	r1, #783	@ 0x30f
 800b54c:	f7fe fd58 	bl	800a000 <__assert_func>
 800b550:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b554:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b558:	b10d      	cbz	r5, 800b55e <__d2b+0x32>
 800b55a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	f1b8 0300 	subs.w	r3, r8, #0
 800b564:	d023      	beq.n	800b5ae <__d2b+0x82>
 800b566:	4668      	mov	r0, sp
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	f7ff fd7c 	bl	800b066 <__lo0bits>
 800b56e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b572:	b1d0      	cbz	r0, 800b5aa <__d2b+0x7e>
 800b574:	f1c0 0320 	rsb	r3, r0, #32
 800b578:	fa02 f303 	lsl.w	r3, r2, r3
 800b57c:	430b      	orrs	r3, r1
 800b57e:	40c2      	lsrs	r2, r0
 800b580:	6163      	str	r3, [r4, #20]
 800b582:	9201      	str	r2, [sp, #4]
 800b584:	9b01      	ldr	r3, [sp, #4]
 800b586:	61a3      	str	r3, [r4, #24]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bf0c      	ite	eq
 800b58c:	2201      	moveq	r2, #1
 800b58e:	2202      	movne	r2, #2
 800b590:	6122      	str	r2, [r4, #16]
 800b592:	b1a5      	cbz	r5, 800b5be <__d2b+0x92>
 800b594:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b598:	4405      	add	r5, r0
 800b59a:	603d      	str	r5, [r7, #0]
 800b59c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5a0:	6030      	str	r0, [r6, #0]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	b003      	add	sp, #12
 800b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	6161      	str	r1, [r4, #20]
 800b5ac:	e7ea      	b.n	800b584 <__d2b+0x58>
 800b5ae:	a801      	add	r0, sp, #4
 800b5b0:	f7ff fd59 	bl	800b066 <__lo0bits>
 800b5b4:	9b01      	ldr	r3, [sp, #4]
 800b5b6:	6163      	str	r3, [r4, #20]
 800b5b8:	3020      	adds	r0, #32
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	e7e8      	b.n	800b590 <__d2b+0x64>
 800b5be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5c6:	6038      	str	r0, [r7, #0]
 800b5c8:	6918      	ldr	r0, [r3, #16]
 800b5ca:	f7ff fd2d 	bl	800b028 <__hi0bits>
 800b5ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5d2:	e7e5      	b.n	800b5a0 <__d2b+0x74>
 800b5d4:	0800c33c 	.word	0x0800c33c
 800b5d8:	0800c34d 	.word	0x0800c34d

0800b5dc <__sfputc_r>:
 800b5dc:	6893      	ldr	r3, [r2, #8]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	b410      	push	{r4}
 800b5e4:	6093      	str	r3, [r2, #8]
 800b5e6:	da08      	bge.n	800b5fa <__sfputc_r+0x1e>
 800b5e8:	6994      	ldr	r4, [r2, #24]
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	db01      	blt.n	800b5f2 <__sfputc_r+0x16>
 800b5ee:	290a      	cmp	r1, #10
 800b5f0:	d103      	bne.n	800b5fa <__sfputc_r+0x1e>
 800b5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f6:	f7fe bbee 	b.w	8009dd6 <__swbuf_r>
 800b5fa:	6813      	ldr	r3, [r2, #0]
 800b5fc:	1c58      	adds	r0, r3, #1
 800b5fe:	6010      	str	r0, [r2, #0]
 800b600:	7019      	strb	r1, [r3, #0]
 800b602:	4608      	mov	r0, r1
 800b604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <__sfputs_r>:
 800b60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60c:	4606      	mov	r6, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	4614      	mov	r4, r2
 800b612:	18d5      	adds	r5, r2, r3
 800b614:	42ac      	cmp	r4, r5
 800b616:	d101      	bne.n	800b61c <__sfputs_r+0x12>
 800b618:	2000      	movs	r0, #0
 800b61a:	e007      	b.n	800b62c <__sfputs_r+0x22>
 800b61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b620:	463a      	mov	r2, r7
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff ffda 	bl	800b5dc <__sfputc_r>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d1f3      	bne.n	800b614 <__sfputs_r+0xa>
 800b62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b630 <_vfiprintf_r>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	460d      	mov	r5, r1
 800b636:	b09d      	sub	sp, #116	@ 0x74
 800b638:	4614      	mov	r4, r2
 800b63a:	4698      	mov	r8, r3
 800b63c:	4606      	mov	r6, r0
 800b63e:	b118      	cbz	r0, 800b648 <_vfiprintf_r+0x18>
 800b640:	6a03      	ldr	r3, [r0, #32]
 800b642:	b90b      	cbnz	r3, 800b648 <_vfiprintf_r+0x18>
 800b644:	f7fe fade 	bl	8009c04 <__sinit>
 800b648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b64a:	07d9      	lsls	r1, r3, #31
 800b64c:	d405      	bmi.n	800b65a <_vfiprintf_r+0x2a>
 800b64e:	89ab      	ldrh	r3, [r5, #12]
 800b650:	059a      	lsls	r2, r3, #22
 800b652:	d402      	bmi.n	800b65a <_vfiprintf_r+0x2a>
 800b654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b656:	f7fe fcd0 	bl	8009ffa <__retarget_lock_acquire_recursive>
 800b65a:	89ab      	ldrh	r3, [r5, #12]
 800b65c:	071b      	lsls	r3, r3, #28
 800b65e:	d501      	bpl.n	800b664 <_vfiprintf_r+0x34>
 800b660:	692b      	ldr	r3, [r5, #16]
 800b662:	b99b      	cbnz	r3, 800b68c <_vfiprintf_r+0x5c>
 800b664:	4629      	mov	r1, r5
 800b666:	4630      	mov	r0, r6
 800b668:	f7fe fbf4 	bl	8009e54 <__swsetup_r>
 800b66c:	b170      	cbz	r0, 800b68c <_vfiprintf_r+0x5c>
 800b66e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b670:	07dc      	lsls	r4, r3, #31
 800b672:	d504      	bpl.n	800b67e <_vfiprintf_r+0x4e>
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	b01d      	add	sp, #116	@ 0x74
 800b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67e:	89ab      	ldrh	r3, [r5, #12]
 800b680:	0598      	lsls	r0, r3, #22
 800b682:	d4f7      	bmi.n	800b674 <_vfiprintf_r+0x44>
 800b684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b686:	f7fe fcb9 	bl	8009ffc <__retarget_lock_release_recursive>
 800b68a:	e7f3      	b.n	800b674 <_vfiprintf_r+0x44>
 800b68c:	2300      	movs	r3, #0
 800b68e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b690:	2320      	movs	r3, #32
 800b692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b696:	f8cd 800c 	str.w	r8, [sp, #12]
 800b69a:	2330      	movs	r3, #48	@ 0x30
 800b69c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b84c <_vfiprintf_r+0x21c>
 800b6a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6a4:	f04f 0901 	mov.w	r9, #1
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	469a      	mov	sl, r3
 800b6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b0:	b10a      	cbz	r2, 800b6b6 <_vfiprintf_r+0x86>
 800b6b2:	2a25      	cmp	r2, #37	@ 0x25
 800b6b4:	d1f9      	bne.n	800b6aa <_vfiprintf_r+0x7a>
 800b6b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ba:	d00b      	beq.n	800b6d4 <_vfiprintf_r+0xa4>
 800b6bc:	465b      	mov	r3, fp
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff ffa1 	bl	800b60a <__sfputs_r>
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	f000 80a7 	beq.w	800b81c <_vfiprintf_r+0x1ec>
 800b6ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6d0:	445a      	add	r2, fp
 800b6d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 809f 	beq.w	800b81c <_vfiprintf_r+0x1ec>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6e8:	f10a 0a01 	add.w	sl, sl, #1
 800b6ec:	9304      	str	r3, [sp, #16]
 800b6ee:	9307      	str	r3, [sp, #28]
 800b6f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6f6:	4654      	mov	r4, sl
 800b6f8:	2205      	movs	r2, #5
 800b6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6fe:	4853      	ldr	r0, [pc, #332]	@ (800b84c <_vfiprintf_r+0x21c>)
 800b700:	f7f4 fd6e 	bl	80001e0 <memchr>
 800b704:	9a04      	ldr	r2, [sp, #16]
 800b706:	b9d8      	cbnz	r0, 800b740 <_vfiprintf_r+0x110>
 800b708:	06d1      	lsls	r1, r2, #27
 800b70a:	bf44      	itt	mi
 800b70c:	2320      	movmi	r3, #32
 800b70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b712:	0713      	lsls	r3, r2, #28
 800b714:	bf44      	itt	mi
 800b716:	232b      	movmi	r3, #43	@ 0x2b
 800b718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b71c:	f89a 3000 	ldrb.w	r3, [sl]
 800b720:	2b2a      	cmp	r3, #42	@ 0x2a
 800b722:	d015      	beq.n	800b750 <_vfiprintf_r+0x120>
 800b724:	9a07      	ldr	r2, [sp, #28]
 800b726:	4654      	mov	r4, sl
 800b728:	2000      	movs	r0, #0
 800b72a:	f04f 0c0a 	mov.w	ip, #10
 800b72e:	4621      	mov	r1, r4
 800b730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b734:	3b30      	subs	r3, #48	@ 0x30
 800b736:	2b09      	cmp	r3, #9
 800b738:	d94b      	bls.n	800b7d2 <_vfiprintf_r+0x1a2>
 800b73a:	b1b0      	cbz	r0, 800b76a <_vfiprintf_r+0x13a>
 800b73c:	9207      	str	r2, [sp, #28]
 800b73e:	e014      	b.n	800b76a <_vfiprintf_r+0x13a>
 800b740:	eba0 0308 	sub.w	r3, r0, r8
 800b744:	fa09 f303 	lsl.w	r3, r9, r3
 800b748:	4313      	orrs	r3, r2
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	46a2      	mov	sl, r4
 800b74e:	e7d2      	b.n	800b6f6 <_vfiprintf_r+0xc6>
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	1d19      	adds	r1, r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	9103      	str	r1, [sp, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	bfbb      	ittet	lt
 800b75c:	425b      	neglt	r3, r3
 800b75e:	f042 0202 	orrlt.w	r2, r2, #2
 800b762:	9307      	strge	r3, [sp, #28]
 800b764:	9307      	strlt	r3, [sp, #28]
 800b766:	bfb8      	it	lt
 800b768:	9204      	strlt	r2, [sp, #16]
 800b76a:	7823      	ldrb	r3, [r4, #0]
 800b76c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b76e:	d10a      	bne.n	800b786 <_vfiprintf_r+0x156>
 800b770:	7863      	ldrb	r3, [r4, #1]
 800b772:	2b2a      	cmp	r3, #42	@ 0x2a
 800b774:	d132      	bne.n	800b7dc <_vfiprintf_r+0x1ac>
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	1d1a      	adds	r2, r3, #4
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	9203      	str	r2, [sp, #12]
 800b77e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b782:	3402      	adds	r4, #2
 800b784:	9305      	str	r3, [sp, #20]
 800b786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b85c <_vfiprintf_r+0x22c>
 800b78a:	7821      	ldrb	r1, [r4, #0]
 800b78c:	2203      	movs	r2, #3
 800b78e:	4650      	mov	r0, sl
 800b790:	f7f4 fd26 	bl	80001e0 <memchr>
 800b794:	b138      	cbz	r0, 800b7a6 <_vfiprintf_r+0x176>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	eba0 000a 	sub.w	r0, r0, sl
 800b79c:	2240      	movs	r2, #64	@ 0x40
 800b79e:	4082      	lsls	r2, r0
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	3401      	adds	r4, #1
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7aa:	4829      	ldr	r0, [pc, #164]	@ (800b850 <_vfiprintf_r+0x220>)
 800b7ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7b0:	2206      	movs	r2, #6
 800b7b2:	f7f4 fd15 	bl	80001e0 <memchr>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d03f      	beq.n	800b83a <_vfiprintf_r+0x20a>
 800b7ba:	4b26      	ldr	r3, [pc, #152]	@ (800b854 <_vfiprintf_r+0x224>)
 800b7bc:	bb1b      	cbnz	r3, 800b806 <_vfiprintf_r+0x1d6>
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	3307      	adds	r3, #7
 800b7c2:	f023 0307 	bic.w	r3, r3, #7
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	9303      	str	r3, [sp, #12]
 800b7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7cc:	443b      	add	r3, r7
 800b7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7d0:	e76a      	b.n	800b6a8 <_vfiprintf_r+0x78>
 800b7d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	2001      	movs	r0, #1
 800b7da:	e7a8      	b.n	800b72e <_vfiprintf_r+0xfe>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	3401      	adds	r4, #1
 800b7e0:	9305      	str	r3, [sp, #20]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	f04f 0c0a 	mov.w	ip, #10
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ee:	3a30      	subs	r2, #48	@ 0x30
 800b7f0:	2a09      	cmp	r2, #9
 800b7f2:	d903      	bls.n	800b7fc <_vfiprintf_r+0x1cc>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0c6      	beq.n	800b786 <_vfiprintf_r+0x156>
 800b7f8:	9105      	str	r1, [sp, #20]
 800b7fa:	e7c4      	b.n	800b786 <_vfiprintf_r+0x156>
 800b7fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b800:	4604      	mov	r4, r0
 800b802:	2301      	movs	r3, #1
 800b804:	e7f0      	b.n	800b7e8 <_vfiprintf_r+0x1b8>
 800b806:	ab03      	add	r3, sp, #12
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	462a      	mov	r2, r5
 800b80c:	4b12      	ldr	r3, [pc, #72]	@ (800b858 <_vfiprintf_r+0x228>)
 800b80e:	a904      	add	r1, sp, #16
 800b810:	4630      	mov	r0, r6
 800b812:	f7fd fdb3 	bl	800937c <_printf_float>
 800b816:	4607      	mov	r7, r0
 800b818:	1c78      	adds	r0, r7, #1
 800b81a:	d1d6      	bne.n	800b7ca <_vfiprintf_r+0x19a>
 800b81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b81e:	07d9      	lsls	r1, r3, #31
 800b820:	d405      	bmi.n	800b82e <_vfiprintf_r+0x1fe>
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	059a      	lsls	r2, r3, #22
 800b826:	d402      	bmi.n	800b82e <_vfiprintf_r+0x1fe>
 800b828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b82a:	f7fe fbe7 	bl	8009ffc <__retarget_lock_release_recursive>
 800b82e:	89ab      	ldrh	r3, [r5, #12]
 800b830:	065b      	lsls	r3, r3, #25
 800b832:	f53f af1f 	bmi.w	800b674 <_vfiprintf_r+0x44>
 800b836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b838:	e71e      	b.n	800b678 <_vfiprintf_r+0x48>
 800b83a:	ab03      	add	r3, sp, #12
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	462a      	mov	r2, r5
 800b840:	4b05      	ldr	r3, [pc, #20]	@ (800b858 <_vfiprintf_r+0x228>)
 800b842:	a904      	add	r1, sp, #16
 800b844:	4630      	mov	r0, r6
 800b846:	f7fe f831 	bl	80098ac <_printf_i>
 800b84a:	e7e4      	b.n	800b816 <_vfiprintf_r+0x1e6>
 800b84c:	0800c4a8 	.word	0x0800c4a8
 800b850:	0800c4b2 	.word	0x0800c4b2
 800b854:	0800937d 	.word	0x0800937d
 800b858:	0800b60b 	.word	0x0800b60b
 800b85c:	0800c4ae 	.word	0x0800c4ae

0800b860 <__sflush_r>:
 800b860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b868:	0716      	lsls	r6, r2, #28
 800b86a:	4605      	mov	r5, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	d454      	bmi.n	800b91a <__sflush_r+0xba>
 800b870:	684b      	ldr	r3, [r1, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	dc02      	bgt.n	800b87c <__sflush_r+0x1c>
 800b876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dd48      	ble.n	800b90e <__sflush_r+0xae>
 800b87c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b87e:	2e00      	cmp	r6, #0
 800b880:	d045      	beq.n	800b90e <__sflush_r+0xae>
 800b882:	2300      	movs	r3, #0
 800b884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b888:	682f      	ldr	r7, [r5, #0]
 800b88a:	6a21      	ldr	r1, [r4, #32]
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	d030      	beq.n	800b8f2 <__sflush_r+0x92>
 800b890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	0759      	lsls	r1, r3, #29
 800b896:	d505      	bpl.n	800b8a4 <__sflush_r+0x44>
 800b898:	6863      	ldr	r3, [r4, #4]
 800b89a:	1ad2      	subs	r2, r2, r3
 800b89c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b89e:	b10b      	cbz	r3, 800b8a4 <__sflush_r+0x44>
 800b8a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8a8:	6a21      	ldr	r1, [r4, #32]
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	47b0      	blx	r6
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	d106      	bne.n	800b8c2 <__sflush_r+0x62>
 800b8b4:	6829      	ldr	r1, [r5, #0]
 800b8b6:	291d      	cmp	r1, #29
 800b8b8:	d82b      	bhi.n	800b912 <__sflush_r+0xb2>
 800b8ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b964 <__sflush_r+0x104>)
 800b8bc:	410a      	asrs	r2, r1
 800b8be:	07d6      	lsls	r6, r2, #31
 800b8c0:	d427      	bmi.n	800b912 <__sflush_r+0xb2>
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	6062      	str	r2, [r4, #4]
 800b8c6:	04d9      	lsls	r1, r3, #19
 800b8c8:	6922      	ldr	r2, [r4, #16]
 800b8ca:	6022      	str	r2, [r4, #0]
 800b8cc:	d504      	bpl.n	800b8d8 <__sflush_r+0x78>
 800b8ce:	1c42      	adds	r2, r0, #1
 800b8d0:	d101      	bne.n	800b8d6 <__sflush_r+0x76>
 800b8d2:	682b      	ldr	r3, [r5, #0]
 800b8d4:	b903      	cbnz	r3, 800b8d8 <__sflush_r+0x78>
 800b8d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8da:	602f      	str	r7, [r5, #0]
 800b8dc:	b1b9      	cbz	r1, 800b90e <__sflush_r+0xae>
 800b8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	d002      	beq.n	800b8ec <__sflush_r+0x8c>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f7ff f9f6 	bl	800acd8 <_free_r>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8f0:	e00d      	b.n	800b90e <__sflush_r+0xae>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b0      	blx	r6
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	1c50      	adds	r0, r2, #1
 800b8fc:	d1c9      	bne.n	800b892 <__sflush_r+0x32>
 800b8fe:	682b      	ldr	r3, [r5, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0c6      	beq.n	800b892 <__sflush_r+0x32>
 800b904:	2b1d      	cmp	r3, #29
 800b906:	d001      	beq.n	800b90c <__sflush_r+0xac>
 800b908:	2b16      	cmp	r3, #22
 800b90a:	d11e      	bne.n	800b94a <__sflush_r+0xea>
 800b90c:	602f      	str	r7, [r5, #0]
 800b90e:	2000      	movs	r0, #0
 800b910:	e022      	b.n	800b958 <__sflush_r+0xf8>
 800b912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b916:	b21b      	sxth	r3, r3
 800b918:	e01b      	b.n	800b952 <__sflush_r+0xf2>
 800b91a:	690f      	ldr	r7, [r1, #16]
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	d0f6      	beq.n	800b90e <__sflush_r+0xae>
 800b920:	0793      	lsls	r3, r2, #30
 800b922:	680e      	ldr	r6, [r1, #0]
 800b924:	bf08      	it	eq
 800b926:	694b      	ldreq	r3, [r1, #20]
 800b928:	600f      	str	r7, [r1, #0]
 800b92a:	bf18      	it	ne
 800b92c:	2300      	movne	r3, #0
 800b92e:	eba6 0807 	sub.w	r8, r6, r7
 800b932:	608b      	str	r3, [r1, #8]
 800b934:	f1b8 0f00 	cmp.w	r8, #0
 800b938:	dde9      	ble.n	800b90e <__sflush_r+0xae>
 800b93a:	6a21      	ldr	r1, [r4, #32]
 800b93c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b93e:	4643      	mov	r3, r8
 800b940:	463a      	mov	r2, r7
 800b942:	4628      	mov	r0, r5
 800b944:	47b0      	blx	r6
 800b946:	2800      	cmp	r0, #0
 800b948:	dc08      	bgt.n	800b95c <__sflush_r+0xfc>
 800b94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95c:	4407      	add	r7, r0
 800b95e:	eba8 0800 	sub.w	r8, r8, r0
 800b962:	e7e7      	b.n	800b934 <__sflush_r+0xd4>
 800b964:	dfbffffe 	.word	0xdfbffffe

0800b968 <_fflush_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	690b      	ldr	r3, [r1, #16]
 800b96c:	4605      	mov	r5, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	b913      	cbnz	r3, 800b978 <_fflush_r+0x10>
 800b972:	2500      	movs	r5, #0
 800b974:	4628      	mov	r0, r5
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	b118      	cbz	r0, 800b982 <_fflush_r+0x1a>
 800b97a:	6a03      	ldr	r3, [r0, #32]
 800b97c:	b90b      	cbnz	r3, 800b982 <_fflush_r+0x1a>
 800b97e:	f7fe f941 	bl	8009c04 <__sinit>
 800b982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f3      	beq.n	800b972 <_fflush_r+0xa>
 800b98a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b98c:	07d0      	lsls	r0, r2, #31
 800b98e:	d404      	bmi.n	800b99a <_fflush_r+0x32>
 800b990:	0599      	lsls	r1, r3, #22
 800b992:	d402      	bmi.n	800b99a <_fflush_r+0x32>
 800b994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b996:	f7fe fb30 	bl	8009ffa <__retarget_lock_acquire_recursive>
 800b99a:	4628      	mov	r0, r5
 800b99c:	4621      	mov	r1, r4
 800b99e:	f7ff ff5f 	bl	800b860 <__sflush_r>
 800b9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9a4:	07da      	lsls	r2, r3, #31
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	d4e4      	bmi.n	800b974 <_fflush_r+0xc>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	059b      	lsls	r3, r3, #22
 800b9ae:	d4e1      	bmi.n	800b974 <_fflush_r+0xc>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b2:	f7fe fb23 	bl	8009ffc <__retarget_lock_release_recursive>
 800b9b6:	e7dd      	b.n	800b974 <_fflush_r+0xc>

0800b9b8 <fiprintf>:
 800b9b8:	b40e      	push	{r1, r2, r3}
 800b9ba:	b503      	push	{r0, r1, lr}
 800b9bc:	4601      	mov	r1, r0
 800b9be:	ab03      	add	r3, sp, #12
 800b9c0:	4805      	ldr	r0, [pc, #20]	@ (800b9d8 <fiprintf+0x20>)
 800b9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c6:	6800      	ldr	r0, [r0, #0]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	f7ff fe31 	bl	800b630 <_vfiprintf_r>
 800b9ce:	b002      	add	sp, #8
 800b9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d4:	b003      	add	sp, #12
 800b9d6:	4770      	bx	lr
 800b9d8:	20000030 	.word	0x20000030

0800b9dc <__swhatbuf_r>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	b096      	sub	sp, #88	@ 0x58
 800b9e8:	4615      	mov	r5, r2
 800b9ea:	461e      	mov	r6, r3
 800b9ec:	da0d      	bge.n	800ba0a <__swhatbuf_r+0x2e>
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9f4:	f04f 0100 	mov.w	r1, #0
 800b9f8:	bf14      	ite	ne
 800b9fa:	2340      	movne	r3, #64	@ 0x40
 800b9fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba00:	2000      	movs	r0, #0
 800ba02:	6031      	str	r1, [r6, #0]
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	b016      	add	sp, #88	@ 0x58
 800ba08:	bd70      	pop	{r4, r5, r6, pc}
 800ba0a:	466a      	mov	r2, sp
 800ba0c:	f000 f848 	bl	800baa0 <_fstat_r>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	dbec      	blt.n	800b9ee <__swhatbuf_r+0x12>
 800ba14:	9901      	ldr	r1, [sp, #4]
 800ba16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba1e:	4259      	negs	r1, r3
 800ba20:	4159      	adcs	r1, r3
 800ba22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba26:	e7eb      	b.n	800ba00 <__swhatbuf_r+0x24>

0800ba28 <__smakebuf_r>:
 800ba28:	898b      	ldrh	r3, [r1, #12]
 800ba2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba2c:	079d      	lsls	r5, r3, #30
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460c      	mov	r4, r1
 800ba32:	d507      	bpl.n	800ba44 <__smakebuf_r+0x1c>
 800ba34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	6163      	str	r3, [r4, #20]
 800ba40:	b003      	add	sp, #12
 800ba42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba44:	ab01      	add	r3, sp, #4
 800ba46:	466a      	mov	r2, sp
 800ba48:	f7ff ffc8 	bl	800b9dc <__swhatbuf_r>
 800ba4c:	9f00      	ldr	r7, [sp, #0]
 800ba4e:	4605      	mov	r5, r0
 800ba50:	4639      	mov	r1, r7
 800ba52:	4630      	mov	r0, r6
 800ba54:	f7ff f9b4 	bl	800adc0 <_malloc_r>
 800ba58:	b948      	cbnz	r0, 800ba6e <__smakebuf_r+0x46>
 800ba5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5e:	059a      	lsls	r2, r3, #22
 800ba60:	d4ee      	bmi.n	800ba40 <__smakebuf_r+0x18>
 800ba62:	f023 0303 	bic.w	r3, r3, #3
 800ba66:	f043 0302 	orr.w	r3, r3, #2
 800ba6a:	81a3      	strh	r3, [r4, #12]
 800ba6c:	e7e2      	b.n	800ba34 <__smakebuf_r+0xc>
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	6020      	str	r0, [r4, #0]
 800ba72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba7e:	b15b      	cbz	r3, 800ba98 <__smakebuf_r+0x70>
 800ba80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba84:	4630      	mov	r0, r6
 800ba86:	f000 f81d 	bl	800bac4 <_isatty_r>
 800ba8a:	b128      	cbz	r0, 800ba98 <__smakebuf_r+0x70>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f023 0303 	bic.w	r3, r3, #3
 800ba92:	f043 0301 	orr.w	r3, r3, #1
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	431d      	orrs	r5, r3
 800ba9c:	81a5      	strh	r5, [r4, #12]
 800ba9e:	e7cf      	b.n	800ba40 <__smakebuf_r+0x18>

0800baa0 <_fstat_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d07      	ldr	r5, [pc, #28]	@ (800bac0 <_fstat_r+0x20>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	4611      	mov	r1, r2
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	f7f6 fef3 	bl	8002898 <_fstat>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	d102      	bne.n	800babc <_fstat_r+0x1c>
 800bab6:	682b      	ldr	r3, [r5, #0]
 800bab8:	b103      	cbz	r3, 800babc <_fstat_r+0x1c>
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	bf00      	nop
 800bac0:	2000079c 	.word	0x2000079c

0800bac4 <_isatty_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	@ (800bae0 <_isatty_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f6 fef2 	bl	80028b8 <_isatty>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_isatty_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_isatty_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	2000079c 	.word	0x2000079c

0800bae4 <_sbrk_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	@ (800bb00 <_sbrk_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 fefa 	bl	80028e8 <_sbrk>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_sbrk_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_sbrk_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	2000079c 	.word	0x2000079c

0800bb04 <memcpy>:
 800bb04:	440a      	add	r2, r1
 800bb06:	4291      	cmp	r1, r2
 800bb08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb0c:	d100      	bne.n	800bb10 <memcpy+0xc>
 800bb0e:	4770      	bx	lr
 800bb10:	b510      	push	{r4, lr}
 800bb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1a:	4291      	cmp	r1, r2
 800bb1c:	d1f9      	bne.n	800bb12 <memcpy+0xe>
 800bb1e:	bd10      	pop	{r4, pc}

0800bb20 <abort>:
 800bb20:	b508      	push	{r3, lr}
 800bb22:	2006      	movs	r0, #6
 800bb24:	f000 f85e 	bl	800bbe4 <raise>
 800bb28:	2001      	movs	r0, #1
 800bb2a:	f7f6 fe65 	bl	80027f8 <_exit>

0800bb2e <_calloc_r>:
 800bb2e:	b570      	push	{r4, r5, r6, lr}
 800bb30:	fba1 5402 	umull	r5, r4, r1, r2
 800bb34:	b93c      	cbnz	r4, 800bb46 <_calloc_r+0x18>
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7ff f942 	bl	800adc0 <_malloc_r>
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	b928      	cbnz	r0, 800bb4c <_calloc_r+0x1e>
 800bb40:	2600      	movs	r6, #0
 800bb42:	4630      	mov	r0, r6
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	220c      	movs	r2, #12
 800bb48:	6002      	str	r2, [r0, #0]
 800bb4a:	e7f9      	b.n	800bb40 <_calloc_r+0x12>
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4621      	mov	r1, r4
 800bb50:	f7fe f9d6 	bl	8009f00 <memset>
 800bb54:	e7f5      	b.n	800bb42 <_calloc_r+0x14>

0800bb56 <__ascii_mbtowc>:
 800bb56:	b082      	sub	sp, #8
 800bb58:	b901      	cbnz	r1, 800bb5c <__ascii_mbtowc+0x6>
 800bb5a:	a901      	add	r1, sp, #4
 800bb5c:	b142      	cbz	r2, 800bb70 <__ascii_mbtowc+0x1a>
 800bb5e:	b14b      	cbz	r3, 800bb74 <__ascii_mbtowc+0x1e>
 800bb60:	7813      	ldrb	r3, [r2, #0]
 800bb62:	600b      	str	r3, [r1, #0]
 800bb64:	7812      	ldrb	r2, [r2, #0]
 800bb66:	1e10      	subs	r0, r2, #0
 800bb68:	bf18      	it	ne
 800bb6a:	2001      	movne	r0, #1
 800bb6c:	b002      	add	sp, #8
 800bb6e:	4770      	bx	lr
 800bb70:	4610      	mov	r0, r2
 800bb72:	e7fb      	b.n	800bb6c <__ascii_mbtowc+0x16>
 800bb74:	f06f 0001 	mvn.w	r0, #1
 800bb78:	e7f8      	b.n	800bb6c <__ascii_mbtowc+0x16>

0800bb7a <__ascii_wctomb>:
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	b141      	cbz	r1, 800bb92 <__ascii_wctomb+0x18>
 800bb80:	2aff      	cmp	r2, #255	@ 0xff
 800bb82:	d904      	bls.n	800bb8e <__ascii_wctomb+0x14>
 800bb84:	228a      	movs	r2, #138	@ 0x8a
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	4770      	bx	lr
 800bb8e:	700a      	strb	r2, [r1, #0]
 800bb90:	2001      	movs	r0, #1
 800bb92:	4770      	bx	lr

0800bb94 <_raise_r>:
 800bb94:	291f      	cmp	r1, #31
 800bb96:	b538      	push	{r3, r4, r5, lr}
 800bb98:	4605      	mov	r5, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	d904      	bls.n	800bba8 <_raise_r+0x14>
 800bb9e:	2316      	movs	r3, #22
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbaa:	b112      	cbz	r2, 800bbb2 <_raise_r+0x1e>
 800bbac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbb0:	b94b      	cbnz	r3, 800bbc6 <_raise_r+0x32>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f830 	bl	800bc18 <_getpid_r>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	4601      	mov	r1, r0
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc2:	f000 b817 	b.w	800bbf4 <_kill_r>
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d00a      	beq.n	800bbe0 <_raise_r+0x4c>
 800bbca:	1c59      	adds	r1, r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <_raise_r+0x42>
 800bbce:	2316      	movs	r3, #22
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e7e7      	b.n	800bba6 <_raise_r+0x12>
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4798      	blx	r3
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e7e0      	b.n	800bba6 <_raise_r+0x12>

0800bbe4 <raise>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <raise+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f7ff bfd3 	b.w	800bb94 <_raise_r>
 800bbee:	bf00      	nop
 800bbf0:	20000030 	.word	0x20000030

0800bbf4 <_kill_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d07      	ldr	r5, [pc, #28]	@ (800bc14 <_kill_r+0x20>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	4611      	mov	r1, r2
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	f7f6 fde9 	bl	80027d8 <_kill>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d102      	bne.n	800bc10 <_kill_r+0x1c>
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	b103      	cbz	r3, 800bc10 <_kill_r+0x1c>
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	bd38      	pop	{r3, r4, r5, pc}
 800bc12:	bf00      	nop
 800bc14:	2000079c 	.word	0x2000079c

0800bc18 <_getpid_r>:
 800bc18:	f7f6 bdd6 	b.w	80027c8 <_getpid>

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
