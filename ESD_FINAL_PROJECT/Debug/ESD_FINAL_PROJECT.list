
ESD_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  0800bfb0  0800bfb0  0000cfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce4c  0800ce4c  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce4c  0800ce4c  0000de4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce54  0800ce54  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce54  0800ce54  0000de54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce58  0800ce58  0000de58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ce5c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200001ec  0800d048  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800d048  0000e7ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b73  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003829  00000000  00000000  00022d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000265b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddd  00000000  00000000  000277d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000705c  00000000  00000000  000285b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c30a  00000000  00000000  0002f611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5bd  00000000  00000000  0004b91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  000d9f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000df86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf94 	.word	0x0800bf94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bf94 	.word	0x0800bf94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_RxCpltCallback>:
    is_received = 0; // Reset is_received after read is complete
    return value;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	is_received=1;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000208 	.word	0x20000208

08000f08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <SELECT+0x1c>)
 8000f14:	f002 fdfe 	bl	8003b14 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 ffc5 	bl	8002ea8 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400

08000f28 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <DESELECT+0x1c>)
 8000f34:	f002 fdee 	bl	8003b14 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f001 ffb5 	bl	8002ea8 <HAL_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40020400 	.word	0x40020400

08000f48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f52:	bf00      	nop
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d1f8      	bne.n	8000f54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f62:	1df9      	adds	r1, r7, #7
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	2201      	movs	r2, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <SPI_TxByte+0x30>)
 8000f6a:	f003 fc6a 	bl	8004842 <HAL_SPI_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000270 	.word	0x20000270

08000f7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f88:	bf00      	nop
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d1f8      	bne.n	8000f8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <SPI_TxBuffer+0x30>)
 8000fa0:	f003 fc4f 	bl	8004842 <HAL_SPI_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000270 	.word	0x20000270

08000fb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fba:	bf00      	nop
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d1f8      	bne.n	8000fbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fca:	1dba      	adds	r2, r7, #6
 8000fcc:	1df9      	adds	r1, r7, #7
 8000fce:	2364      	movs	r3, #100	@ 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <SPI_RxByte+0x34>)
 8000fd6:	f003 fd78 	bl	8004aca <HAL_SPI_TransmitReceive>

  return data;
 8000fda:	79bb      	ldrb	r3, [r7, #6]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000270 	.word	0x20000270

08000fe8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ff0:	f7ff ffde 	bl	8000fb0 <SPI_RxByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <SD_ReadyWait+0x30>)
 800100c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001010:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8001012:	f7ff ffcd 	bl	8000fb0 <SPI_RxByte>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d003      	beq.n	8001028 <SD_ReadyWait+0x24>
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SD_ReadyWait+0x30>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <SD_ReadyWait+0xe>

  return res;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020e 	.word	0x2000020e

08001038 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800103e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001042:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001044:	f7ff ff70 	bl	8000f28 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e005      	b.n	800105a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800104e:	20ff      	movs	r0, #255	@ 0xff
 8001050:	f7ff ff7a 	bl	8000f48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b09      	cmp	r3, #9
 800105e:	ddf6      	ble.n	800104e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001060:	f7ff ff52 	bl	8000f08 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001078:	2395      	movs	r3, #149	@ 0x95
 800107a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800107c:	463b      	mov	r3, r7
 800107e:	2106      	movs	r1, #6
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff7b 	bl	8000f7c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001086:	e002      	b.n	800108e <SD_PowerOn+0x56>
  {
    cnt--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3b01      	subs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800108e:	f7ff ff8f 	bl	8000fb0 <SPI_RxByte>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d002      	beq.n	800109e <SD_PowerOn+0x66>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <SD_PowerOn+0x50>
  }

  DESELECT();
 800109e:	f7ff ff43 	bl	8000f28 <DESELECT>
  SPI_TxByte(0XFF);
 80010a2:	20ff      	movs	r0, #255	@ 0xff
 80010a4:	f7ff ff50 	bl	8000f48 <SPI_TxByte>

  PowerFlag = 1;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <SD_PowerOn+0x80>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000211 	.word	0x20000211

080010bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <SD_PowerOff+0x14>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000211 	.word	0x20000211

080010d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <SD_CheckPower+0x14>)
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000211 	.word	0x20000211

080010ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <SD_RxDataBlock+0x58>)
 80010f8:	22c8      	movs	r2, #200	@ 0xc8
 80010fa:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80010fc:	f7ff ff58 	bl	8000fb0 <SPI_RxByte>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2bff      	cmp	r3, #255	@ 0xff
 8001108:	d103      	bne.n	8001112 <SD_RxDataBlock+0x26>
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <SD_RxDataBlock+0x58>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2bfe      	cmp	r3, #254	@ 0xfe
 8001116:	d001      	beq.n	800111c <SD_RxDataBlock+0x30>
 8001118:	2300      	movs	r3, #0
 800111a:	e00f      	b.n	800113c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff60 	bl	8000fe8 <SPI_RxBytePtr>
  } while(len--);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8001132:	f7ff ff3d 	bl	8000fb0 <SPI_RxByte>
  SPI_RxByte();
 8001136:	f7ff ff3b 	bl	8000fb0 <SPI_RxByte>

  return TRUE;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000020c 	.word	0x2000020c

08001148 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001158:	f7ff ff54 	bl	8001004 <SD_ReadyWait>
 800115c:	4603      	mov	r3, r0
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d001      	beq.n	8001166 <SD_TxDataBlock+0x1e>
 8001162:	2300      	movs	r3, #0
 8001164:	e02f      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feed 	bl	8000f48 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	2bfd      	cmp	r3, #253	@ 0xfd
 8001172:	d020      	beq.n	80011b6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff feff 	bl	8000f7c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800117e:	f7ff ff17 	bl	8000fb0 <SPI_RxByte>
    SPI_RxByte();
 8001182:	f7ff ff15 	bl	8000fb0 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001186:	e00b      	b.n	80011a0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001188:	f7ff ff12 	bl	8000fb0 <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2b05      	cmp	r3, #5
 8001198:	d006      	beq.n	80011a8 <SD_TxDataBlock+0x60>
      i++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b40      	cmp	r3, #64	@ 0x40
 80011a4:	d9f0      	bls.n	8001188 <SD_TxDataBlock+0x40>
 80011a6:	e000      	b.n	80011aa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80011a8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80011aa:	bf00      	nop
 80011ac:	f7ff ff00 	bl	8000fb0 <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0fa      	beq.n	80011ac <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d101      	bne.n	80011c4 <SD_TxDataBlock+0x7c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011da:	f7ff ff13 	bl	8001004 <SD_ReadyWait>
 80011de:	4603      	mov	r3, r0
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	d001      	beq.n	80011e8 <SD_SendCmd+0x1a>
 80011e4:	23ff      	movs	r3, #255	@ 0xff
 80011e6:	e042      	b.n	800126e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff feac 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fea6 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fea0 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fe9a 	bl	8000f48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe95 	bl	8000f48 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b40      	cmp	r3, #64	@ 0x40
 8001222:	d102      	bne.n	800122a <SD_SendCmd+0x5c>
 8001224:	2395      	movs	r3, #149	@ 0x95
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e007      	b.n	800123a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b48      	cmp	r3, #72	@ 0x48
 800122e:	d102      	bne.n	8001236 <SD_SendCmd+0x68>
 8001230:	2387      	movs	r3, #135	@ 0x87
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <SD_SendCmd+0x6c>
  else crc = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe83 	bl	8000f48 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b4c      	cmp	r3, #76	@ 0x4c
 8001246:	d101      	bne.n	800124c <SD_SendCmd+0x7e>
 8001248:	f7ff feb2 	bl	8000fb0 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800124c:	230a      	movs	r3, #10
 800124e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001250:	f7ff feae 	bl	8000fb0 <SPI_RxByte>
 8001254:	4603      	mov	r3, r0
 8001256:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001258:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da05      	bge.n	800126c <SD_SendCmd+0x9e>
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3b01      	subs	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f1      	bne.n	8001250 <SD_SendCmd+0x82>

  return res;
 800126c:	7b7b      	ldrb	r3, [r7, #13]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_disk_initialize+0x14>
 8001288:	2301      	movs	r3, #1
 800128a:	e0d1      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800128c:	4b6a      	ldr	r3, [pc, #424]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <SD_disk_initialize+0x2a>
 800129a:	4b67      	ldr	r3, [pc, #412]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	e0c6      	b.n	8001430 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80012a2:	f7ff fec9 	bl	8001038 <SD_PowerOn>

  /* slave select */
  SELECT();
 80012a6:	f7ff fe2f 	bl	8000f08 <SELECT>

  /* check disk type */
  type = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80012ae:	2100      	movs	r1, #0
 80012b0:	2040      	movs	r0, #64	@ 0x40
 80012b2:	f7ff ff8c 	bl	80011ce <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 80a1 	bne.w	8001400 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80012be:	4b5f      	ldr	r3, [pc, #380]	@ (800143c <SD_disk_initialize+0x1c4>)
 80012c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012c4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012c6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80012ca:	2048      	movs	r0, #72	@ 0x48
 80012cc:	f7ff ff7f 	bl	80011ce <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d155      	bne.n	8001382 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00c      	b.n	80012f6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80012dc:	7bfc      	ldrb	r4, [r7, #15]
 80012de:	f7ff fe67 	bl	8000fb0 <SPI_RxByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	f104 0310 	add.w	r3, r4, #16
 80012ea:	443b      	add	r3, r7
 80012ec:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d9ef      	bls.n	80012dc <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d17e      	bne.n	8001400 <SD_disk_initialize+0x188>
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2baa      	cmp	r3, #170	@ 0xaa
 8001306:	d17b      	bne.n	8001400 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001308:	2100      	movs	r1, #0
 800130a:	2077      	movs	r0, #119	@ 0x77
 800130c:	f7ff ff5f 	bl	80011ce <SD_SendCmd>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d807      	bhi.n	8001326 <SD_disk_initialize+0xae>
 8001316:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800131a:	2069      	movs	r0, #105	@ 0x69
 800131c:	f7ff ff57 	bl	80011ce <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001326:	4b45      	ldr	r3, [pc, #276]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ec      	bne.n	8001308 <SD_disk_initialize+0x90>
 800132e:	e000      	b.n	8001332 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001330:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <SD_disk_initialize+0x1c4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d062      	beq.n	8001400 <SD_disk_initialize+0x188>
 800133a:	2100      	movs	r1, #0
 800133c:	207a      	movs	r0, #122	@ 0x7a
 800133e:	f7ff ff46 	bl	80011ce <SD_SendCmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15b      	bne.n	8001400 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e00c      	b.n	8001368 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800134e:	7bfc      	ldrb	r4, [r7, #15]
 8001350:	f7ff fe2e 	bl	8000fb0 <SPI_RxByte>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	f104 0310 	add.w	r3, r4, #16
 800135c:	443b      	add	r3, r7
 800135e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d9ef      	bls.n	800134e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800136e:	7a3b      	ldrb	r3, [r7, #8]
 8001370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x104>
 8001378:	230c      	movs	r3, #12
 800137a:	e000      	b.n	800137e <SD_disk_initialize+0x106>
 800137c:	2304      	movs	r3, #4
 800137e:	73bb      	strb	r3, [r7, #14]
 8001380:	e03e      	b.n	8001400 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	@ 0x77
 8001386:	f7ff ff22 	bl	80011ce <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d808      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 8001390:	2100      	movs	r1, #0
 8001392:	2069      	movs	r0, #105	@ 0x69
 8001394:	f7ff ff1b 	bl	80011ce <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d801      	bhi.n	80013a2 <SD_disk_initialize+0x12a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e000      	b.n	80013a4 <SD_disk_initialize+0x12c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d10e      	bne.n	80013ca <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013ac:	2100      	movs	r1, #0
 80013ae:	2077      	movs	r0, #119	@ 0x77
 80013b0:	f7ff ff0d 	bl	80011ce <SD_SendCmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d80e      	bhi.n	80013d8 <SD_disk_initialize+0x160>
 80013ba:	2100      	movs	r1, #0
 80013bc:	2069      	movs	r0, #105	@ 0x69
 80013be:	f7ff ff06 	bl	80011ce <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <SD_disk_initialize+0x160>
 80013c8:	e00c      	b.n	80013e4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ca:	2100      	movs	r1, #0
 80013cc:	2041      	movs	r0, #65	@ 0x41
 80013ce:	f7ff fefe 	bl	80011ce <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e2      	bne.n	80013a6 <SD_disk_initialize+0x12e>
 80013e0:	e000      	b.n	80013e4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013e2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <SD_disk_initialize+0x1c4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <SD_disk_initialize+0x184>
 80013ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f0:	2050      	movs	r0, #80	@ 0x50
 80013f2:	f7ff feec 	bl	80011ce <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SD_disk_initialize+0x188>
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <SD_disk_initialize+0x1c8>)
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001406:	f7ff fd8f 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800140a:	f7ff fdd1 	bl	8000fb0 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SD_disk_initialize+0x1c0>)
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e001      	b.n	800142a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001426:	f7ff fe49 	bl	80010bc <SD_PowerOff>
  }

  return Stat;
 800142a:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <SD_disk_initialize+0x1c0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	2000020c 	.word	0x2000020c
 8001440:	20000210 	.word	0x20000210

08001444 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SD_disk_status+0x14>
 8001454:	2301      	movs	r3, #1
 8001456:	e002      	b.n	800145e <SD_disk_status+0x1a>
  return Stat;
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SD_disk_status+0x28>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <SD_disk_read+0x1c>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <SD_disk_read+0x20>
 800148c:	2304      	movs	r3, #4
 800148e:	e051      	b.n	8001534 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SD_disk_read+0xcc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_read+0x32>
 800149e:	2303      	movs	r3, #3
 80014a0:	e048      	b.n	8001534 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80014a2:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <SD_disk_read+0xd0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_read+0x44>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80014b4:	f7ff fd28 	bl	8000f08 <SELECT>

  if (count == 1)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d111      	bne.n	80014e2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2051      	movs	r0, #81	@ 0x51
 80014c2:	f7ff fe84 	bl	80011ce <SD_SendCmd>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d129      	bne.n	8001520 <SD_disk_read+0xb0>
 80014cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f7ff fe0b 	bl	80010ec <SD_RxDataBlock>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d021      	beq.n	8001520 <SD_disk_read+0xb0>
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	e01e      	b.n	8001520 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2052      	movs	r0, #82	@ 0x52
 80014e6:	f7ff fe72 	bl	80011ce <SD_SendCmd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d117      	bne.n	8001520 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f7ff fdf9 	bl	80010ec <SD_RxDataBlock>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <SD_disk_read+0xa6>
        buff += 512;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001506:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ed      	bne.n	80014f0 <SD_disk_read+0x80>
 8001514:	e000      	b.n	8001518 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001516:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	204c      	movs	r0, #76	@ 0x4c
 800151c:	f7ff fe57 	bl	80011ce <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001520:	f7ff fd02 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 8001524:	f7ff fd44 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000210 	.word	0x20000210

08001544 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <SD_disk_write+0x1c>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SD_disk_write+0x20>
 8001560:	2304      	movs	r3, #4
 8001562:	e06b      	b.n	800163c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <SD_disk_write+0x100>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_write+0x32>
 8001572:	2303      	movs	r3, #3
 8001574:	e062      	b.n	800163c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <SD_disk_write+0x100>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_write+0x44>
 8001584:	2302      	movs	r3, #2
 8001586:	e059      	b.n	800163c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001588:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <SD_disk_write+0x104>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <SD_disk_write+0x56>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	607b      	str	r3, [r7, #4]

  SELECT();
 800159a:	f7ff fcb5 	bl	8000f08 <SELECT>

  if (count == 1)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d110      	bne.n	80015c6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	2058      	movs	r0, #88	@ 0x58
 80015a8:	f7ff fe11 	bl	80011ce <SD_SendCmd>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d13a      	bne.n	8001628 <SD_disk_write+0xe4>
 80015b2:	21fe      	movs	r1, #254	@ 0xfe
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fdc7 	bl	8001148 <SD_TxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d033      	beq.n	8001628 <SD_disk_write+0xe4>
      count = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e030      	b.n	8001628 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <SD_disk_write+0x104>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2077      	movs	r0, #119	@ 0x77
 80015d6:	f7ff fdfa 	bl	80011ce <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	2057      	movs	r0, #87	@ 0x57
 80015de:	f7ff fdf6 	bl	80011ce <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2059      	movs	r0, #89	@ 0x59
 80015e6:	f7ff fdf2 	bl	80011ce <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f0:	21fc      	movs	r1, #252	@ 0xfc
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7ff fda8 	bl	8001148 <SD_TxDataBlock>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <SD_disk_write+0xd0>
        buff += 512;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001604:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <SD_disk_write+0xac>
 8001612:	e000      	b.n	8001616 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001614:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001616:	21fd      	movs	r1, #253	@ 0xfd
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fd95 	bl	8001148 <SD_TxDataBlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <SD_disk_write+0xe4>
      {
        count = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001628:	f7ff fc7e 	bl	8000f28 <DESELECT>
  SPI_RxByte();
 800162c:	f7ff fcc0 	bl	8000fb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000210 	.word	0x20000210

0800164c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b08b      	sub	sp, #44	@ 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	460b      	mov	r3, r1
 800165a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SD_disk_ioctl+0x1e>
 8001666:	2304      	movs	r3, #4
 8001668:	e113      	b.n	8001892 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d124      	bne.n	80016c0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d012      	beq.n	80016a4 <SD_disk_ioctl+0x58>
 800167e:	2b02      	cmp	r3, #2
 8001680:	dc1a      	bgt.n	80016b8 <SD_disk_ioctl+0x6c>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <SD_disk_ioctl+0x40>
 8001686:	2b01      	cmp	r3, #1
 8001688:	d006      	beq.n	8001698 <SD_disk_ioctl+0x4c>
 800168a:	e015      	b.n	80016b8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800168c:	f7ff fd16 	bl	80010bc <SD_PowerOff>
      res = RES_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001696:	e0fa      	b.n	800188e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001698:	f7ff fcce 	bl	8001038 <SD_PowerOn>
      res = RES_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016a2:	e0f4      	b.n	800188e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	1c5c      	adds	r4, r3, #1
 80016a8:	f7ff fd14 	bl	80010d4 <SD_CheckPower>
 80016ac:	4603      	mov	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016b6:	e0ea      	b.n	800188e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016be:	e0e6      	b.n	800188e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c0:	4b76      	ldr	r3, [pc, #472]	@ (800189c <SD_disk_ioctl+0x250>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SD_disk_ioctl+0x86>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0df      	b.n	8001892 <SD_disk_ioctl+0x246>

    SELECT();
 80016d2:	f7ff fc19 	bl	8000f08 <SELECT>

    switch (ctrl)
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	2b0d      	cmp	r3, #13
 80016da:	f200 80c9 	bhi.w	8001870 <SD_disk_ioctl+0x224>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <SD_disk_ioctl+0x98>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080017db 	.word	0x080017db
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	080017cb 	.word	0x080017cb
 80016f0:	08001871 	.word	0x08001871
 80016f4:	08001871 	.word	0x08001871
 80016f8:	08001871 	.word	0x08001871
 80016fc:	08001871 	.word	0x08001871
 8001700:	08001871 	.word	0x08001871
 8001704:	08001871 	.word	0x08001871
 8001708:	08001871 	.word	0x08001871
 800170c:	08001871 	.word	0x08001871
 8001710:	080017ed 	.word	0x080017ed
 8001714:	08001811 	.word	0x08001811
 8001718:	08001835 	.word	0x08001835
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800171c:	2100      	movs	r1, #0
 800171e:	2049      	movs	r0, #73	@ 0x49
 8001720:	f7ff fd55 	bl	80011ce <SD_SendCmd>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80a6 	bne.w	8001878 <SD_disk_ioctl+0x22c>
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2110      	movs	r1, #16
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcda 	bl	80010ec <SD_RxDataBlock>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809c 	beq.w	8001878 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8001740:	7b3b      	ldrb	r3, [r7, #12]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10d      	bne.n	8001766 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800174a:	7d7b      	ldrb	r3, [r7, #21]
 800174c:	461a      	mov	r2, r3
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	029a      	lsls	r2, r3, #10
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e02d      	b.n	80017c2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001766:	7c7b      	ldrb	r3, [r7, #17]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7dbb      	ldrb	r3, [r7, #22]
 8001770:	09db      	lsrs	r3, r3, #7
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2da      	uxtb	r2, r3
 8001778:	7d7b      	ldrb	r3, [r7, #21]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0306 	and.w	r3, r3, #6
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3302      	adds	r3, #2
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800178e:	7d3b      	ldrb	r3, [r7, #20]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80017b4:	8bfa      	ldrh	r2, [r7, #30]
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	3b09      	subs	r3, #9
 80017bc:	409a      	lsls	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80017c8:	e056      	b.n	8001878 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017d8:	e055      	b.n	8001886 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017da:	f7ff fc13 	bl	8001004 <SD_ReadyWait>
 80017de:	4603      	mov	r3, r0
 80017e0:	2bff      	cmp	r3, #255	@ 0xff
 80017e2:	d14b      	bne.n	800187c <SD_disk_ioctl+0x230>
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ea:	e047      	b.n	800187c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017ec:	2100      	movs	r1, #0
 80017ee:	2049      	movs	r0, #73	@ 0x49
 80017f0:	f7ff fced 	bl	80011ce <SD_SendCmd>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d142      	bne.n	8001880 <SD_disk_ioctl+0x234>
 80017fa:	2110      	movs	r1, #16
 80017fc:	6a38      	ldr	r0, [r7, #32]
 80017fe:	f7ff fc75 	bl	80010ec <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03b      	beq.n	8001880 <SD_disk_ioctl+0x234>
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800180e:	e037      	b.n	8001880 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001810:	2100      	movs	r1, #0
 8001812:	204a      	movs	r0, #74	@ 0x4a
 8001814:	f7ff fcdb 	bl	80011ce <SD_SendCmd>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d132      	bne.n	8001884 <SD_disk_ioctl+0x238>
 800181e:	2110      	movs	r1, #16
 8001820:	6a38      	ldr	r0, [r7, #32]
 8001822:	f7ff fc63 	bl	80010ec <SD_RxDataBlock>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02b      	beq.n	8001884 <SD_disk_ioctl+0x238>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001832:	e027      	b.n	8001884 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001834:	2100      	movs	r1, #0
 8001836:	207a      	movs	r0, #122	@ 0x7a
 8001838:	f7ff fcc9 	bl	80011ce <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001848:	e00b      	b.n	8001862 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800184a:	6a3c      	ldr	r4, [r7, #32]
 800184c:	1c63      	adds	r3, r4, #1
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	f7ff fbae 	bl	8000fb0 <SPI_RxByte>
 8001854:	4603      	mov	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800185c:	3301      	adds	r3, #1
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001866:	2b03      	cmp	r3, #3
 8001868:	d9ef      	bls.n	800184a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001870:	2304      	movs	r3, #4
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001876:	e006      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001878:	bf00      	nop
 800187a:	e004      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <SD_disk_ioctl+0x23a>
      break;
 8001884:	bf00      	nop
    }

    DESELECT();
 8001886:	f7ff fb4f 	bl	8000f28 <DESELECT>
    SPI_RxByte();
 800188a:	f7ff fb91 	bl	8000fb0 <SPI_RxByte>
  }

  return res;
 800188e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001892:	4618      	mov	r0, r3
 8001894:	372c      	adds	r7, #44	@ 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_GPIO_EXTI_Callback>:
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);    // Set priority for EXTI Line 9-5
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable interrupt
}

// Callback for handling the interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) { // Check if interrupt is from PA7
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d102      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x16>
        ir_triggered = 1;         // Set flag indicating detection
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000214 	.word	0x20000214

080018c8 <EXTI9_5_IRQHandler>:

// EXTI IRQ Handler
void EXTI9_5_IRQHandler(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7); // Call HAL handler to handle the interrupt
 80018cc:	2080      	movs	r0, #128	@ 0x80
 80018ce:	f002 f93b 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <ADC_IRQHandler>:
    NVIC_EnableIRQ(ADC_IRQn);
    //NVIC_SetPriority(ADC_IRQn, 1);
}

// ADC interrupt handler
void ADC_IRQHandler(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	while (!(ADC1->SR & ADC_SR_EOC));
 80018dc:	bf00      	nop
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <ADC_IRQHandler+0x6>
    //if (ADC1->SR & ADC_SR_EOC) { // Check End of Conversion flag
        adcValue = (uint16_t)ADC1->DR; // Read ADC value
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <ADC_IRQHandler+0x3c>)
 80018f2:	801a      	strh	r2, [r3, #0]
        adcConversionComplete = 1;    // Set conversion complete flag
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <ADC_IRQHandler+0x40>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
        ADC1->SR &= ~ADC_SR_EOC;      // Clear EOC flag
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <ADC_IRQHandler+0x38>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <ADC_IRQHandler+0x38>)
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012000 	.word	0x40012000
 8001914:	20000218 	.word	0x20000218
 8001918:	2000021a 	.word	0x2000021a

0800191c <ILI9341_SendCommand>:
#define RST_HIGH()  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET)
#define SD_CS_PORT GPIOD
#define SD_CS_PIN GPIO_PIN_9

// Function to send a command
void ILI9341_SendCommand(uint8_t cmd) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <ILI9341_SendCommand+0x44>)
 800192e:	f002 f8f1 	bl	8003b14 <HAL_GPIO_WritePin>
    DC_COMMAND();
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <ILI9341_SendCommand+0x44>)
 800193a:	f002 f8eb 	bl	8003b14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800193e:	1df9      	adds	r1, r7, #7
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	2201      	movs	r2, #1
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <ILI9341_SendCommand+0x48>)
 8001948:	f002 ff7b 	bl	8004842 <HAL_SPI_Transmit>
    CS_HIGH();
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <ILI9341_SendCommand+0x44>)
 8001954:	f002 f8de 	bl	8003b14 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020400 	.word	0x40020400
 8001964:	20000270 	.word	0x20000270

08001968 <ILI9341_SendData>:

// Function to send data
void ILI9341_SendData(uint8_t *data, uint16_t size) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
    CS_LOW();
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800197a:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <ILI9341_SendData+0x48>)
 800197c:	f002 f8ca 	bl	8003b14 <HAL_GPIO_WritePin>
    DC_DATA();
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <ILI9341_SendData+0x48>)
 8001988:	f002 f8c4 	bl	8003b14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY);
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <ILI9341_SendData+0x4c>)
 8001996:	f002 ff54 	bl	8004842 <HAL_SPI_Transmit>
    CS_HIGH();
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <ILI9341_SendData+0x48>)
 80019a2:	f002 f8b7 	bl	8003b14 <HAL_GPIO_WritePin>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020400 	.word	0x40020400
 80019b4:	20000270 	.word	0x20000270

080019b8 <ILI9341_Init>:
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
    CS_HIGH();
}

// Initialization sequence for ILI9341
void ILI9341_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
    // Reset the display
    RST_LOW();
 80019be:	2200      	movs	r2, #0
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	4863      	ldr	r0, [pc, #396]	@ (8001b50 <ILI9341_Init+0x198>)
 80019c4:	f002 f8a6 	bl	8003b14 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10ms delay
 80019c8:	200a      	movs	r0, #10
 80019ca:	f001 fa6d 	bl	8002ea8 <HAL_Delay>
    RST_HIGH();
 80019ce:	2201      	movs	r2, #1
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	485f      	ldr	r0, [pc, #380]	@ (8001b50 <ILI9341_Init+0x198>)
 80019d4:	f002 f89e 	bl	8003b14 <HAL_GPIO_WritePin>
    HAL_Delay(120); // 120ms delay after reset
 80019d8:	2078      	movs	r0, #120	@ 0x78
 80019da:	f001 fa65 	bl	8002ea8 <HAL_Delay>

    // Initialization commands based on the datasheet
    uint8_t data[15];

    // Power Control A
    ILI9341_SendCommand(0xCB);
 80019de:	20cb      	movs	r0, #203	@ 0xcb
 80019e0:	f7ff ff9c 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x39; data[1] = 0x2C; data[2] = 0x00; data[3] = 0x34; data[4] = 0x02;
 80019e4:	2339      	movs	r3, #57	@ 0x39
 80019e6:	703b      	strb	r3, [r7, #0]
 80019e8:	232c      	movs	r3, #44	@ 0x2c
 80019ea:	707b      	strb	r3, [r7, #1]
 80019ec:	2300      	movs	r3, #0
 80019ee:	70bb      	strb	r3, [r7, #2]
 80019f0:	2334      	movs	r3, #52	@ 0x34
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	2302      	movs	r3, #2
 80019f6:	713b      	strb	r3, [r7, #4]
    ILI9341_SendData(data, 5);
 80019f8:	463b      	mov	r3, r7
 80019fa:	2105      	movs	r1, #5
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffb3 	bl	8001968 <ILI9341_SendData>

    // Power Control B
    ILI9341_SendCommand(0xCF);
 8001a02:	20cf      	movs	r0, #207	@ 0xcf
 8001a04:	f7ff ff8a 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0xC1; data[2] = 0x30;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	703b      	strb	r3, [r7, #0]
 8001a0c:	23c1      	movs	r3, #193	@ 0xc1
 8001a0e:	707b      	strb	r3, [r7, #1]
 8001a10:	2330      	movs	r3, #48	@ 0x30
 8001a12:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001a14:	463b      	mov	r3, r7
 8001a16:	2103      	movs	r1, #3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffa5 	bl	8001968 <ILI9341_SendData>

    // Driver Timing Control A
    ILI9341_SendCommand(0xE8);
 8001a1e:	20e8      	movs	r0, #232	@ 0xe8
 8001a20:	f7ff ff7c 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x85; data[1] = 0x00; data[2] = 0x78;
 8001a24:	2385      	movs	r3, #133	@ 0x85
 8001a26:	703b      	strb	r3, [r7, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	707b      	strb	r3, [r7, #1]
 8001a2c:	2378      	movs	r3, #120	@ 0x78
 8001a2e:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001a30:	463b      	mov	r3, r7
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff97 	bl	8001968 <ILI9341_SendData>

    // Driver Timing Control B
    ILI9341_SendCommand(0xEA);
 8001a3a:	20ea      	movs	r0, #234	@ 0xea
 8001a3c:	f7ff ff6e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	703b      	strb	r3, [r7, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff8b 	bl	8001968 <ILI9341_SendData>

    // Power On Sequence Control
    ILI9341_SendCommand(0xED);
 8001a52:	20ed      	movs	r0, #237	@ 0xed
 8001a54:	f7ff ff62 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x64; data[1] = 0x03; data[2] = 0x12; data[3] = 0x81;
 8001a58:	2364      	movs	r3, #100	@ 0x64
 8001a5a:	703b      	strb	r3, [r7, #0]
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	707b      	strb	r3, [r7, #1]
 8001a60:	2312      	movs	r3, #18
 8001a62:	70bb      	strb	r3, [r7, #2]
 8001a64:	2381      	movs	r3, #129	@ 0x81
 8001a66:	70fb      	strb	r3, [r7, #3]
    ILI9341_SendData(data, 4);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff7b 	bl	8001968 <ILI9341_SendData>

    // Pump Ratio Control
    ILI9341_SendCommand(0xF7);
 8001a72:	20f7      	movs	r0, #247	@ 0xf7
 8001a74:	f7ff ff52 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x20;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff71 	bl	8001968 <ILI9341_SendData>

    // Power Control 1
    ILI9341_SendCommand(0xC0);
 8001a86:	20c0      	movs	r0, #192	@ 0xc0
 8001a88:	f7ff ff48 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x23;
 8001a8c:	2323      	movs	r3, #35	@ 0x23
 8001a8e:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001a90:	463b      	mov	r3, r7
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff67 	bl	8001968 <ILI9341_SendData>

    // Power Control 2
    ILI9341_SendCommand(0xC1);
 8001a9a:	20c1      	movs	r0, #193	@ 0xc1
 8001a9c:	f7ff ff3e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x10;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <ILI9341_SendData>

    // VCOM Control 1
    ILI9341_SendCommand(0xC5);
 8001aae:	20c5      	movs	r0, #197	@ 0xc5
 8001ab0:	f7ff ff34 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x3E; data[1] = 0x28;
 8001ab4:	233e      	movs	r3, #62	@ 0x3e
 8001ab6:	703b      	strb	r3, [r7, #0]
 8001ab8:	2328      	movs	r3, #40	@ 0x28
 8001aba:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001abc:	463b      	mov	r3, r7
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff51 	bl	8001968 <ILI9341_SendData>

    // VCOM Control 2
    ILI9341_SendCommand(0xC7);
 8001ac6:	20c7      	movs	r0, #199	@ 0xc7
 8001ac8:	f7ff ff28 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x86;
 8001acc:	2386      	movs	r3, #134	@ 0x86
 8001ace:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff47 	bl	8001968 <ILI9341_SendData>

    // Memory Access Control
    ILI9341_SendCommand(0x36);
 8001ada:	2036      	movs	r0, #54	@ 0x36
 8001adc:	f7ff ff1e 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x48;
 8001ae0:	2348      	movs	r3, #72	@ 0x48
 8001ae2:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff3d 	bl	8001968 <ILI9341_SendData>

    // Pixel Format Set
    ILI9341_SendCommand(0x3A);
 8001aee:	203a      	movs	r0, #58	@ 0x3a
 8001af0:	f7ff ff14 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x55;  // 16-bit RGB565
 8001af4:	2355      	movs	r3, #85	@ 0x55
 8001af6:	703b      	strb	r3, [r7, #0]
    ILI9341_SendData(data, 1);
 8001af8:	463b      	mov	r3, r7
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <ILI9341_SendData>

    // Frame Rate Control
    ILI9341_SendCommand(0xB1);
 8001b02:	20b1      	movs	r0, #177	@ 0xb1
 8001b04:	f7ff ff0a 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x18;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	703b      	strb	r3, [r7, #0]
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	707b      	strb	r3, [r7, #1]
    ILI9341_SendData(data, 2);
 8001b10:	463b      	mov	r3, r7
 8001b12:	2102      	movs	r1, #2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff27 	bl	8001968 <ILI9341_SendData>

    // Display Function Control
    ILI9341_SendCommand(0xB6);
 8001b1a:	20b6      	movs	r0, #182	@ 0xb6
 8001b1c:	f7ff fefe 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x08; data[1] = 0x82; data[2] = 0x27;
 8001b20:	2308      	movs	r3, #8
 8001b22:	703b      	strb	r3, [r7, #0]
 8001b24:	2382      	movs	r3, #130	@ 0x82
 8001b26:	707b      	strb	r3, [r7, #1]
 8001b28:	2327      	movs	r3, #39	@ 0x27
 8001b2a:	70bb      	strb	r3, [r7, #2]
    ILI9341_SendData(data, 3);
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff19 	bl	8001968 <ILI9341_SendData>

    // Exit Sleep Mode
    ILI9341_SendCommand(0x11);
 8001b36:	2011      	movs	r0, #17
 8001b38:	f7ff fef0 	bl	800191c <ILI9341_SendCommand>
    HAL_Delay(120);
 8001b3c:	2078      	movs	r0, #120	@ 0x78
 8001b3e:	f001 f9b3 	bl	8002ea8 <HAL_Delay>

    // Turn on Display
    ILI9341_SendCommand(0x29);
 8001b42:	2029      	movs	r0, #41	@ 0x29
 8001b44:	f7ff feea 	bl	800191c <ILI9341_SendCommand>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020800 	.word	0x40020800

08001b54 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
    uint8_t high_byte = (color >> 8) & 0xFF; // Extract high byte of RGB565 color
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	74fb      	strb	r3, [r7, #19]
    uint8_t low_byte = color & 0xFF;        // Extract low byte of RGB565 color
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	74bb      	strb	r3, [r7, #18]

    // Set column address (entire width of the display)
    ILI9341_SendCommand(0x2A); // Column Address Set
 8001b6a:	202a      	movs	r0, #42	@ 0x2a
 8001b6c:	f7ff fed6 	bl	800191c <ILI9341_SendCommand>
    uint8_t data[4] = {0x00, 0x00, 0x00, 0xEF}; // Start: 0x0000, End: 0x00EF (239 in decimal)
 8001b70:	f04f 436f 	mov.w	r3, #4009754624	@ 0xef000000
 8001b74:	60fb      	str	r3, [r7, #12]
    ILI9341_SendData(data, 4);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fef3 	bl	8001968 <ILI9341_SendData>

    // Set page address (entire height of the display)
    ILI9341_SendCommand(0x2B); // Page Address Set
 8001b82:	202b      	movs	r0, #43	@ 0x2b
 8001b84:	f7ff feca 	bl	800191c <ILI9341_SendCommand>
    data[0] = 0x00; data[1] = 0x00; data[2] = 0x01; data[3] = 0x3F; // Start: 0x0000, End: 0x013F (319 in decimal)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	733b      	strb	r3, [r7, #12]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	737b      	strb	r3, [r7, #13]
 8001b90:	2301      	movs	r3, #1
 8001b92:	73bb      	strb	r3, [r7, #14]
 8001b94:	233f      	movs	r3, #63	@ 0x3f
 8001b96:	73fb      	strb	r3, [r7, #15]
    ILI9341_SendData(data, 4);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fee2 	bl	8001968 <ILI9341_SendData>

    // Start memory write
    ILI9341_SendCommand(0x2C); // Memory Write
 8001ba4:	202c      	movs	r0, #44	@ 0x2c
 8001ba6:	f7ff feb9 	bl	800191c <ILI9341_SendCommand>

    // Write color to every pixel
    for (uint32_t i = 0; i < 240 * 320; i++) { // 240x320 resolution
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00c      	b.n	8001bca <ILI9341_FillScreen+0x76>
        uint8_t color_data[2] = {high_byte, low_byte};
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	723b      	strb	r3, [r7, #8]
 8001bb4:	7cbb      	ldrb	r3, [r7, #18]
 8001bb6:	727b      	strb	r3, [r7, #9]
        ILI9341_SendData(color_data, 2);
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fed2 	bl	8001968 <ILI9341_SendData>
    for (uint32_t i = 0; i < 240 * 320; i++) { // 240x320 resolution
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001bd0:	d3ee      	bcc.n	8001bb0 <ILI9341_FillScreen+0x5c>
    }
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <ILI9341_DrawPixel>:

#include "gfxfont.h"
#define ILI9341_WIDTH 240
#define ILI9341_HEIGHT 320

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	460b      	mov	r3, r1
 8001be8:	80bb      	strh	r3, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	807b      	strh	r3, [r7, #2]
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2bef      	cmp	r3, #239	@ 0xef
 8001bf2:	d847      	bhi.n	8001c84 <ILI9341_DrawPixel+0xa8>
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001bfa:	d243      	bcs.n	8001c84 <ILI9341_DrawPixel+0xa8>

    ILI9341_SendCommand(0x2A); // Column Address Set
 8001bfc:	202a      	movs	r0, #42	@ 0x2a
 8001bfe:	f7ff fe8d 	bl	800191c <ILI9341_SendCommand>
    uint8_t data_x[] = {(x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF};
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	753b      	strb	r3, [r7, #20]
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	757b      	strb	r3, [r7, #21]
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	75bb      	strb	r3, [r7, #22]
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	75fb      	strb	r3, [r7, #23]
    ILI9341_SendData(data_x, 4);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2104      	movs	r1, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe9d 	bl	8001968 <ILI9341_SendData>

    ILI9341_SendCommand(0x2B); // Page Address Set
 8001c2e:	202b      	movs	r0, #43	@ 0x2b
 8001c30:	f7ff fe74 	bl	800191c <ILI9341_SendCommand>
    uint8_t data_y[] = {(y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF};
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	743b      	strb	r3, [r7, #16]
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	747b      	strb	r3, [r7, #17]
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	74bb      	strb	r3, [r7, #18]
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	74fb      	strb	r3, [r7, #19]
    ILI9341_SendData(data_y, 4);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe84 	bl	8001968 <ILI9341_SendData>

    ILI9341_SendCommand(0x2C); // Memory Write
 8001c60:	202c      	movs	r0, #44	@ 0x2c
 8001c62:	f7ff fe5b 	bl	800191c <ILI9341_SendCommand>
    uint8_t color_data[] = {(color >> 8) & 0xFF, color & 0xFF};
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	733b      	strb	r3, [r7, #12]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(color_data, 2);
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fe73 	bl	8001968 <ILI9341_SendData>
 8001c82:	e000      	b.n	8001c86 <ILI9341_DrawPixel+0xaa>
    if ((x >= 240) || (y >= 320)) return; // Ensure bounds
 8001c84:	bf00      	nop
}
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <DrawChar>:
void DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t scale) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80bb      	strh	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	803b      	strh	r3, [r7, #0]
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8001caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f2c0 80c7 	blt.w	8001e42 <DrawChar+0x1b6>

    // Map ASCII character to the font array
    const unsigned char *charBitmap = &font[c * 5];
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a63      	ldr	r2, [pc, #396]	@ (8001e4c <DrawChar+0x1c0>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

    // Draw each column of the character
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
 8001cc6:	e089      	b.n	8001ddc <DrawChar+0x150>
        uint8_t columnData = charBitmap[col];
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	72fb      	strb	r3, [r7, #11]
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75bb      	strb	r3, [r7, #22]
 8001cd6:	e07b      	b.n	8001dd0 <DrawChar+0x144>
            if (columnData & (1 << row)) { // Check if pixel is ON
 8001cd8:	7afa      	ldrb	r2, [r7, #11]
 8001cda:	7dbb      	ldrb	r3, [r7, #22]
 8001cdc:	fa42 f303 	asr.w	r3, r2, r3
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d038      	beq.n	8001d5a <DrawChar+0xce>
                // Draw a scaled block for the ON pixel
                for (uint8_t i = 0; i < scale; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	757b      	strb	r3, [r7, #21]
 8001cec:	e02f      	b.n	8001d4e <DrawChar+0xc2>
                    for (uint8_t j = 0; j < scale; j++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	753b      	strb	r3, [r7, #20]
 8001cf2:	e024      	b.n	8001d3e <DrawChar+0xb2>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, color);
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	fb12 f303 	smulbb	r3, r2, r3
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	4413      	add	r3, r2
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	7d7b      	ldrb	r3, [r7, #21]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b298      	uxth	r0, r3
 8001d12:	7dbb      	ldrb	r3, [r7, #22]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	fb12 f303 	smulbb	r3, r2, r3
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	7d3b      	ldrb	r3, [r7, #20]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	883a      	ldrh	r2, [r7, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7ff ff52 	bl	8001bdc <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8001d38:	7d3b      	ldrb	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	753b      	strb	r3, [r7, #20]
 8001d3e:	7d3a      	ldrb	r2, [r7, #20]
 8001d40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3d5      	bcc.n	8001cf4 <DrawChar+0x68>
                for (uint8_t i = 0; i < scale; i++) {
 8001d48:	7d7b      	ldrb	r3, [r7, #21]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	757b      	strb	r3, [r7, #21]
 8001d4e:	7d7a      	ldrb	r2, [r7, #21]
 8001d50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3ca      	bcc.n	8001cee <DrawChar+0x62>
 8001d58:	e037      	b.n	8001dca <DrawChar+0x13e>
                    }
                }
            } else {
                // Draw a scaled block for the OFF pixel (background)
                for (uint8_t i = 0; i < scale; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	74fb      	strb	r3, [r7, #19]
 8001d5e:	e02f      	b.n	8001dc0 <DrawChar+0x134>
                    for (uint8_t j = 0; j < scale; j++) {
 8001d60:	2300      	movs	r3, #0
 8001d62:	74bb      	strb	r3, [r7, #18]
 8001d64:	e024      	b.n	8001db0 <DrawChar+0x124>
                        ILI9341_DrawPixel(x + col * scale + i, y + row * scale + j, bg);
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	fb12 f303 	smulbb	r3, r2, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b298      	uxth	r0, r3
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	fb12 f303 	smulbb	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	7cbb      	ldrb	r3, [r7, #18]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7ff ff19 	bl	8001bdc <ILI9341_DrawPixel>
                    for (uint8_t j = 0; j < scale; j++) {
 8001daa:	7cbb      	ldrb	r3, [r7, #18]
 8001dac:	3301      	adds	r3, #1
 8001dae:	74bb      	strb	r3, [r7, #18]
 8001db0:	7cba      	ldrb	r2, [r7, #18]
 8001db2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3d5      	bcc.n	8001d66 <DrawChar+0xda>
                for (uint8_t i = 0; i < scale; i++) {
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	74fb      	strb	r3, [r7, #19]
 8001dc0:	7cfa      	ldrb	r2, [r7, #19]
 8001dc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3ca      	bcc.n	8001d60 <DrawChar+0xd4>
        for (uint8_t row = 0; row < 8; row++) { // Each column has 8 rows
 8001dca:	7dbb      	ldrb	r3, [r7, #22]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	75bb      	strb	r3, [r7, #22]
 8001dd0:	7dbb      	ldrb	r3, [r7, #22]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d980      	bls.n	8001cd8 <DrawChar+0x4c>
    for (uint8_t col = 0; col < 5; col++) { // Each character is 5 columns wide
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	75fb      	strb	r3, [r7, #23]
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	f67f af72 	bls.w	8001cc8 <DrawChar+0x3c>
            }
        }
    }

    // Add scaled spacing after each character
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	747b      	strb	r3, [r7, #17]
 8001de8:	e024      	b.n	8001e34 <DrawChar+0x1a8>
        for (uint8_t i = 0; i < scale; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	743b      	strb	r3, [r7, #16]
 8001dee:	e019      	b.n	8001e24 <DrawChar+0x198>
            ILI9341_DrawPixel(x + 5 * scale + i, y + row, bg);
 8001df0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4413      	add	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	7c3b      	ldrb	r3, [r7, #16]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	7c7b      	ldrb	r3, [r7, #17]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	88bb      	ldrh	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7ff fedf 	bl	8001bdc <ILI9341_DrawPixel>
        for (uint8_t i = 0; i < scale; i++) {
 8001e1e:	7c3b      	ldrb	r3, [r7, #16]
 8001e20:	3301      	adds	r3, #1
 8001e22:	743b      	strb	r3, [r7, #16]
 8001e24:	7c3a      	ldrb	r2, [r7, #16]
 8001e26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3e0      	bcc.n	8001df0 <DrawChar+0x164>
    for (uint8_t row = 0; row < 8 * scale; row++) {
 8001e2e:	7c7b      	ldrb	r3, [r7, #17]
 8001e30:	3301      	adds	r3, #1
 8001e32:	747b      	strb	r3, [r7, #17]
 8001e34:	7c7a      	ldrb	r2, [r7, #17]
 8001e36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbd4      	blt.n	8001dea <DrawChar+0x15e>
 8001e40:	e000      	b.n	8001e44 <DrawChar+0x1b8>
    if (c < 0 || c > 127) return; // Ensure the character is within the supported range
 8001e42:	bf00      	nop
        }
    }
}
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	0800c17c 	.word	0x0800c17c

08001e50 <DrawString>:


void DrawString(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bg, uint8_t scale) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	81fb      	strh	r3, [r7, #14]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	81bb      	strh	r3, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 8001e66:	e01a      	b.n	8001e9e <DrawString+0x4e>
        DrawChar(x, y, *str, color, bg, scale);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	88fc      	ldrh	r4, [r7, #6]
 8001e6e:	89b9      	ldrh	r1, [r7, #12]
 8001e70:	89f8      	ldrh	r0, [r7, #14]
 8001e72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	8c3b      	ldrh	r3, [r7, #32]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	f7ff ff05 	bl	8001c8c <DrawChar>
        x += 6 * scale; // Adjust character spacing based on scale
 8001e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	4413      	add	r3, r2
 8001e96:	81fb      	strh	r3, [r7, #14]
        str++;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e0      	bne.n	8001e68 <DrawString+0x18>
    }
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb6:	f000 ff85 	bl	8002dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eba:	f000 f825 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebe:	f000 f96d 	bl	800219c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec2:	f000 f943 	bl	800214c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ec6:	f000 f8ed 	bl	80020a4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001eca:	f000 f8b5 	bl	8002038 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001ece:	f000 f885 	bl	8001fdc <MX_I2C1_Init>
  MX_FATFS_Init();
 8001ed2:	f004 f8cf 	bl	8006074 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8001ed6:	f000 f90f 	bl	80020f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001eda:	f7ff fd6d 	bl	80019b8 <ILI9341_Init>
  ILI9341_FillScreen(0x0321);
 8001ede:	f240 3021 	movw	r0, #801	@ 0x321
 8001ee2:	f7ff fe37 	bl	8001b54 <ILI9341_FillScreen>
  process_SD_card();
 8001ee6:	f000 fae1 	bl	80024ac <process_SD_card>
  DrawString(10, 10, "New Screen Content", 0xFFFF, 0x0000,1);
 8001eea:	2301      	movs	r3, #1
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef6:	4a03      	ldr	r2, [pc, #12]	@ (8001f04 <main+0x54>)
 8001ef8:	210a      	movs	r1, #10
 8001efa:	200a      	movs	r0, #10
 8001efc:	f7ff ffa8 	bl	8001e50 <DrawString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <main+0x50>
 8001f04:	0800bfb0 	.word	0x0800bfb0

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	@ 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	2230      	movs	r2, #48	@ 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f008 f9b0 	bl	800a27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <SystemClock_Config+0xcc>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <SystemClock_Config+0xcc>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <SystemClock_Config+0xcc>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <SystemClock_Config+0xd0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <SystemClock_Config+0xd0>)
 8001f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <SystemClock_Config+0xd0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f70:	2302      	movs	r3, #2
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f7c:	23c0      	movs	r3, #192	@ 0xc0
 8001f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f80:	2304      	movs	r3, #4
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f84:	2308      	movs	r3, #8
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 ff37 	bl	8003e00 <HAL_RCC_OscConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f98:	f000 fb98 	bl	80026cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fa8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2103      	movs	r1, #3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f998 	bl	80042f0 <HAL_RCC_ClockConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fc6:	f000 fb81 	bl	80026cc <Error_Handler>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3750      	adds	r7, #80	@ 0x50
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000

08001fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <MX_I2C1_Init+0x50>)
 8001fe2:	4a13      	ldr	r2, [pc, #76]	@ (8002030 <MX_I2C1_Init+0x54>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_I2C1_Init+0x50>)
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <MX_I2C1_Init+0x58>)
 8001fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <MX_I2C1_Init+0x50>)
 8001ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <MX_I2C1_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_I2C1_Init+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <MX_I2C1_Init+0x50>)
 800201a:	f001 fdad 	bl	8003b78 <HAL_I2C_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002024:	f000 fb52 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000021c 	.word	0x2000021c
 8002030:	40005400 	.word	0x40005400
 8002034:	000186a0 	.word	0x000186a0

08002038 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <MX_SPI2_Init+0x64>)
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <MX_SPI2_Init+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <MX_SPI2_Init+0x64>)
 8002044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	4b14      	ldr	r3, [pc, #80]	@ (800209c <MX_SPI2_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_SPI2_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_SPI2_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <MX_SPI2_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_SPI2_Init+0x64>)
 8002064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002068:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_SPI2_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <MX_SPI2_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_SPI2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <MX_SPI2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_SPI2_Init+0x64>)
 8002084:	220a      	movs	r2, #10
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_SPI2_Init+0x64>)
 800208a:	f002 fb51 	bl	8004730 <HAL_SPI_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002094:	f000 fb1a 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000270 	.word	0x20000270
 80020a0:	40003800 	.word	0x40003800

080020a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <MX_USART1_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_USART1_UART_Init+0x4c>)
 80020dc:	f002 ffca 	bl	8005074 <HAL_HalfDuplex_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f000 faf1 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200002c8 	.word	0x200002c8
 80020f4:	40011000 	.word	0x40011000

080020f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <MX_USART2_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 8002104:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <MX_USART2_UART_Init+0x4c>)
 8002130:	f002 ff50 	bl	8004fd4 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f000 fac7 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000310 	.word	0x20000310
 8002148:	40004400 	.word	0x40004400

0800214c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_DMA_Init+0x4c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <MX_DMA_Init+0x4c>)
 800215c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <MX_DMA_Init+0x4c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	203a      	movs	r0, #58	@ 0x3a
 8002174:	f000 ff97 	bl	80030a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002178:	203a      	movs	r0, #58	@ 0x3a
 800217a:	f000 ffb0 	bl	80030de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2046      	movs	r0, #70	@ 0x46
 8002184:	f000 ff8f 	bl	80030a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002188:	2046      	movs	r0, #70	@ 0x46
 800218a:	f000 ffa8 	bl	80030de <HAL_NVIC_EnableIRQ>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	4bae      	ldr	r3, [pc, #696]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4aad      	ldr	r2, [pc, #692]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4bab      	ldr	r3, [pc, #684]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4aa6      	ldr	r2, [pc, #664]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4ba4      	ldr	r3, [pc, #656]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a9f      	ldr	r2, [pc, #636]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b9d      	ldr	r3, [pc, #628]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b99      	ldr	r3, [pc, #612]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a98      	ldr	r2, [pc, #608]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b96      	ldr	r3, [pc, #600]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b92      	ldr	r3, [pc, #584]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a91      	ldr	r2, [pc, #580]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b8f      	ldr	r3, [pc, #572]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b8b      	ldr	r3, [pc, #556]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a8a      	ldr	r2, [pc, #552]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b88      	ldr	r3, [pc, #544]	@ (8002470 <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	2108      	movs	r1, #8
 800225e:	4885      	ldr	r0, [pc, #532]	@ (8002474 <MX_GPIO_Init+0x2d8>)
 8002260:	f001 fc58 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002264:	2201      	movs	r2, #1
 8002266:	2101      	movs	r1, #1
 8002268:	4883      	ldr	r0, [pc, #524]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 800226a:	f001 fc53 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002274:	4881      	ldr	r0, [pc, #516]	@ (800247c <MX_GPIO_Init+0x2e0>)
 8002276:	f001 fc4d 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 800227a:	2200      	movs	r2, #0
 800227c:	f24f 2110 	movw	r1, #61968	@ 0xf210
 8002280:	487f      	ldr	r0, [pc, #508]	@ (8002480 <MX_GPIO_Init+0x2e4>)
 8002282:	f001 fc47 	bl	8003b14 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	487b      	ldr	r0, [pc, #492]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 800228c:	f001 fc42 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002296:	487b      	ldr	r0, [pc, #492]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 8002298:	f001 fc3c 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800229c:	2304      	movs	r3, #4
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4871      	ldr	r0, [pc, #452]	@ (8002474 <MX_GPIO_Init+0x2d8>)
 80022b0:	f001 faac 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80022b4:	2308      	movs	r3, #8
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	486a      	ldr	r0, [pc, #424]	@ (8002474 <MX_GPIO_Init+0x2d8>)
 80022cc:	f001 fa9e 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80022d0:	2332      	movs	r3, #50	@ 0x32
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022d4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80022d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4863      	ldr	r0, [pc, #396]	@ (8002474 <MX_GPIO_Init+0x2d8>)
 80022e6:	f001 fa91 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC7 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_7;
 80022ea:	2381      	movs	r3, #129	@ 0x81
 80022ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	485d      	ldr	r0, [pc, #372]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 8002302:	f001 fa83 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002306:	2308      	movs	r3, #8
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002316:	2305      	movs	r3, #5
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4855      	ldr	r0, [pc, #340]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 8002322:	f001 fa73 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800232a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800232e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4852      	ldr	r0, [pc, #328]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 800233c:	f001 fa66 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002340:	2310      	movs	r3, #16
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002350:	2306      	movs	r3, #6
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	484a      	ldr	r0, [pc, #296]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 800235c:	f001 fa56 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002360:	23e0      	movs	r3, #224	@ 0xe0
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002370:	2305      	movs	r3, #5
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4842      	ldr	r0, [pc, #264]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 800237c:	f001 fa46 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002380:	2320      	movs	r3, #32
 8002382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4839      	ldr	r0, [pc, #228]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 8002394:	f001 fa3a 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002398:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	4832      	ldr	r0, [pc, #200]	@ (800247c <MX_GPIO_Init+0x2e0>)
 80023b2:	f001 fa2b 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 80023b6:	f24f 2310 	movw	r3, #61968	@ 0xf210
 80023ba:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	482c      	ldr	r0, [pc, #176]	@ (8002480 <MX_GPIO_Init+0x2e4>)
 80023d0:	f001 fa1c 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80023d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4826      	ldr	r0, [pc, #152]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 80023ea:	f001 fa0f 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	481f      	ldr	r0, [pc, #124]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 8002408:	f001 fa00 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800240c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800241e:	230a      	movs	r3, #10
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	4816      	ldr	r0, [pc, #88]	@ (8002484 <MX_GPIO_Init+0x2e8>)
 800242a:	f001 f9ef 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800242e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002440:	2306      	movs	r3, #6
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	480b      	ldr	r0, [pc, #44]	@ (8002478 <MX_GPIO_Init+0x2dc>)
 800244c:	f001 f9de 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002450:	2320      	movs	r3, #32
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	@ (8002480 <MX_GPIO_Init+0x2e4>)
 8002464:	f001 f9d2 	bl	800380c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	@ 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40021000 	.word	0x40021000
 8002478:	40020800 	.word	0x40020800
 800247c:	40020400 	.word	0x40020400
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40020000 	.word	0x40020000

08002488 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002490:	1d39      	adds	r1, r7, #4
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	2201      	movs	r2, #1
 8002498:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <__io_putchar+0x20>)
 800249a:	f002 fe43 	bl	8005124 <HAL_UART_Transmit>
  return ch;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000310 	.word	0x20000310

080024ac <process_SD_card>:
/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */
void process_SD_card( void )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80024b6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 80024ba:	3b04      	subs	r3, #4
 80024bc:	2201      	movs	r2, #1
 80024be:	4976      	ldr	r1, [pc, #472]	@ (8002698 <process_SD_card+0x1ec>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f006 f81f 	bl	8008504 <f_mount>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80024cc:	f102 021f 	add.w	r2, r2, #31
 80024d0:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80024d2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80024d6:	f103 031f 	add.w	r3, r3, #31
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 80024e0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80024e4:	f103 031f 	add.w	r3, r3, #31
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4619      	mov	r1, r3
 80024ec:	486b      	ldr	r0, [pc, #428]	@ (800269c <process_SD_card+0x1f0>)
 80024ee:	f007 fd7d 	bl	8009fec <iprintf>
      break;
 80024f2:	e0c2      	b.n	800267a <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 80024f4:	486a      	ldr	r0, [pc, #424]	@ (80026a0 <process_SD_card+0x1f4>)
 80024f6:	f007 fde1 	bl	800a0bc <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 80024fa:	f107 0220 	add.w	r2, r7, #32
 80024fe:	3a1c      	subs	r2, #28
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	3b20      	subs	r3, #32
 8002506:	4619      	mov	r1, r3
 8002508:	4863      	ldr	r0, [pc, #396]	@ (8002698 <process_SD_card+0x1ec>)
 800250a:	f006 fda4 	bl	8009056 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800250e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002512:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	3b02      	subs	r3, #2
 800251a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800251e:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8002522:	8952      	ldrh	r2, [r2, #10]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd fff3 	bl	8000514 <__aeabi_ui2d>
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b5c      	ldr	r3, [pc, #368]	@ (80026a4 <process_SD_card+0x1f8>)
 8002534:	f7fe f868 	bl	8000608 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb3a 	bl	8000bb8 <__aeabi_d2uiz>
 8002544:	4603      	mov	r3, r0
 8002546:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800254a:	f102 0218 	add.w	r2, r2, #24
 800254e:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002550:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002554:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002558:	895b      	ldrh	r3, [r3, #10]
 800255a:	461a      	mov	r2, r3
 800255c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002560:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffd3 	bl	8000514 <__aeabi_ui2d>
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <process_SD_card+0x1f8>)
 8002574:	f7fe f848 	bl	8000608 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fb1a 	bl	8000bb8 <__aeabi_d2uiz>
 8002584:	4603      	mov	r3, r0
 8002586:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800258a:	f102 0214 	add.w	r2, r2, #20
 800258e:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8002590:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002594:	f103 0314 	add.w	r3, r3, #20
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800259e:	f103 0318 	add.w	r3, r3, #24
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	4840      	ldr	r0, [pc, #256]	@ (80026a8 <process_SD_card+0x1fc>)
 80025a6:	f007 fd21 	bl	8009fec <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80025aa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80025ae:	3b34      	subs	r3, #52	@ 0x34
 80025b0:	220b      	movs	r2, #11
 80025b2:	493e      	ldr	r1, [pc, #248]	@ (80026ac <process_SD_card+0x200>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 ffeb 	bl	8008590 <f_open>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80025c0:	f102 021f 	add.w	r2, r2, #31
 80025c4:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80025c6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80025ca:	f103 031f 	add.w	r3, r3, #31
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 80025d4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80025d8:	f103 031f 	add.w	r3, r3, #31
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4833      	ldr	r0, [pc, #204]	@ (80026b0 <process_SD_card+0x204>)
 80025e2:	f007 fd03 	bl	8009fec <iprintf>
      break;
 80025e6:	e048      	b.n	800267a <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 80025e8:	4832      	ldr	r0, [pc, #200]	@ (80026b4 <process_SD_card+0x208>)
 80025ea:	f007 fd67 	bl	800a0bc <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 80025ee:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80025f2:	3b34      	subs	r3, #52	@ 0x34
 80025f4:	4619      	mov	r1, r3
 80025f6:	4830      	ldr	r0, [pc, #192]	@ (80026b8 <process_SD_card+0x20c>)
 80025f8:	f006 fe97 	bl	800932a <f_puts>

    //close your file
    f_close(&fil);
 80025fc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002600:	3b34      	subs	r3, #52	@ 0x34
 8002602:	4618      	mov	r0, r3
 8002604:	f006 fcfd 	bl	8009002 <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8002608:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800260c:	3b34      	subs	r3, #52	@ 0x34
 800260e:	2201      	movs	r2, #1
 8002610:	4926      	ldr	r1, [pc, #152]	@ (80026ac <process_SD_card+0x200>)
 8002612:	4618      	mov	r0, r3
 8002614:	f005 ffbc 	bl	8008590 <f_open>
 8002618:	4603      	mov	r3, r0
 800261a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800261e:	f102 021f 	add.w	r2, r2, #31
 8002622:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8002624:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002628:	f103 031f 	add.w	r3, r3, #31
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8002632:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8002636:	f103 031f 	add.w	r3, r3, #31
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	481f      	ldr	r0, [pc, #124]	@ (80026bc <process_SD_card+0x210>)
 8002640:	f007 fcd4 	bl	8009fec <iprintf>
      break;
 8002644:	e019      	b.n	800267a <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8002646:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800264a:	3a34      	subs	r2, #52	@ 0x34
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	3b18      	subs	r3, #24
 8002652:	2164      	movs	r1, #100	@ 0x64
 8002654:	4618      	mov	r0, r3
 8002656:	f006 fdb3 	bl	80091c0 <f_gets>

    printf("Read Data : %s\n", buf);
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	3b18      	subs	r3, #24
 8002660:	4619      	mov	r1, r3
 8002662:	4817      	ldr	r0, [pc, #92]	@ (80026c0 <process_SD_card+0x214>)
 8002664:	f007 fcc2 	bl	8009fec <iprintf>

    //close your file
    f_close(&fil);
 8002668:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800266c:	3b34      	subs	r3, #52	@ 0x34
 800266e:	4618      	mov	r0, r3
 8002670:	f006 fcc7 	bl	8009002 <f_close>
    printf("Closing File!!!\r\n");
 8002674:	4813      	ldr	r0, [pc, #76]	@ (80026c4 <process_SD_card+0x218>)
 8002676:	f007 fd21 	bl	800a0bc <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800267a:	2200      	movs	r2, #0
 800267c:	4906      	ldr	r1, [pc, #24]	@ (8002698 <process_SD_card+0x1ec>)
 800267e:	2000      	movs	r0, #0
 8002680:	f005 ff40 	bl	8008504 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8002684:	4810      	ldr	r0, [pc, #64]	@ (80026c8 <process_SD_card+0x21c>)
 8002686:	f007 fd19 	bl	800a0bc <puts>
}
 800268a:	bf00      	nop
 800268c:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0800bfc4 	.word	0x0800bfc4
 800269c:	0800bfc8 	.word	0x0800bfc8
 80026a0:	0800bfe4 	.word	0x0800bfe4
 80026a4:	3fe00000 	.word	0x3fe00000
 80026a8:	0800c008 	.word	0x0800c008
 80026ac:	0800c038 	.word	0x0800c038
 80026b0:	0800c048 	.word	0x0800c048
 80026b4:	0800c06c 	.word	0x0800c06c
 80026b8:	0800c080 	.word	0x0800c080
 80026bc:	0800c098 	.word	0x0800c098
 80026c0:	0800c0b4 	.word	0x0800c0b4
 80026c4:	0800c0c4 	.word	0x0800c0c4
 80026c8:	0800c0d8 	.word	0x0800c0d8

080026cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
}
 80026d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <Error_Handler+0x8>

080026d8 <EXTI15_10_IRQHandler>:
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

// Interrupt handler for EXTI lines 13 to 15
void EXTI15_10_IRQHandler(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    // Check for PC13 (Battle Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 80026dc:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <EXTI15_10_IRQHandler+0x48>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <EXTI15_10_IRQHandler+0x24>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); // Clear interrupt flag
 80026e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <EXTI15_10_IRQHandler+0x48>)
 80026ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ee:	615a      	str	r2, [r3, #20]
        battle_button_state = 1; // Set battle button state
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <EXTI15_10_IRQHandler+0x4c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
        uart_send_string("Battle button pressed.\n\r");
 80026f6:	480c      	ldr	r0, [pc, #48]	@ (8002728 <EXTI15_10_IRQHandler+0x50>)
 80026f8:	f000 fb1a 	bl	8002d30 <uart_send_string>
    }

    // Check for PC14 (Capture Button)
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <EXTI15_10_IRQHandler+0x48>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <EXTI15_10_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14); // Clear interrupt flag
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <EXTI15_10_IRQHandler+0x48>)
 800270a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800270e:	615a      	str	r2, [r3, #20]
        capture_button_state = 1; // Set capture button state
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <EXTI15_10_IRQHandler+0x54>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
        uart_send_string("Capture button pressed.\n\r");
 8002716:	4806      	ldr	r0, [pc, #24]	@ (8002730 <EXTI15_10_IRQHandler+0x58>)
 8002718:	f000 fb0a 	bl	8002d30 <uart_send_string>
    }
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013c00 	.word	0x40013c00
 8002724:	20000418 	.word	0x20000418
 8002728:	0800c0fc 	.word	0x0800c0fc
 800272c:	20000419 	.word	0x20000419
 8002730:	0800c118 	.word	0x0800c118

08002734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	4a0f      	ldr	r2, [pc, #60]	@ (8002780 <HAL_MspInit+0x4c>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002748:	6453      	str	r3, [r2, #68]	@ 0x44
 800274a:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_MspInit+0x4c>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002772:	2007      	movs	r0, #7
 8002774:	f000 fc8c 	bl	8003090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_I2C_MspInit+0x84>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12c      	bne.n	8002800 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c8:	2312      	movs	r3, #18
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d4:	2304      	movs	r3, #4
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	480c      	ldr	r0, [pc, #48]	@ (8002810 <HAL_I2C_MspInit+0x8c>)
 80027e0:	f001 f814 	bl	800380c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	4a07      	ldr	r2, [pc, #28]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_I2C_MspInit+0x88>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002800:	bf00      	nop
 8002802:	3728      	adds	r7, #40	@ 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40005400 	.word	0x40005400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020400 	.word	0x40020400

08002814 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <HAL_SPI_MspInit+0x84>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12c      	bne.n	8002890 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b18      	ldr	r3, [pc, #96]	@ (800289c <HAL_SPI_MspInit+0x88>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	4a17      	ldr	r2, [pc, #92]	@ (800289c <HAL_SPI_MspInit+0x88>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_SPI_MspInit+0x88>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_SPI_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_SPI_MspInit+0x88>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <HAL_SPI_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800286e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002880:	2305      	movs	r3, #5
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <HAL_SPI_MspInit+0x8c>)
 800288c:	f000 ffbe 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	@ 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40003800 	.word	0x40003800
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400

080028a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	@ 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a65      	ldr	r2, [pc, #404]	@ (8002a58 <HAL_UART_MspInit+0x1b4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	f040 8092 	bne.w	80029ec <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	4a62      	ldr	r2, [pc, #392]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028d2:	f043 0310 	orr.w	r3, r3, #16
 80028d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d8:	4b60      	ldr	r3, [pc, #384]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	4a5b      	ldr	r2, [pc, #364]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002906:	2312      	movs	r3, #18
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002912:	2307      	movs	r3, #7
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	4850      	ldr	r0, [pc, #320]	@ (8002a60 <HAL_UART_MspInit+0x1bc>)
 800291e:	f000 ff75 	bl	800380c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002922:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002924:	4a50      	ldr	r2, [pc, #320]	@ (8002a68 <HAL_UART_MspInit+0x1c4>)
 8002926:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002928:	4b4e      	ldr	r3, [pc, #312]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 800292a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800292e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002930:	4b4c      	ldr	r3, [pc, #304]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002936:	4b4b      	ldr	r3, [pc, #300]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800293c:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 800293e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002942:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002944:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002946:	2200      	movs	r2, #0
 8002948:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002950:	4b44      	ldr	r3, [pc, #272]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b43      	ldr	r3, [pc, #268]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295c:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002962:	4840      	ldr	r0, [pc, #256]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002964:	f000 fbd6 	bl	8003114 <HAL_DMA_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800296e:	f7ff fead 	bl	80026cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a3b      	ldr	r2, [pc, #236]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 8002976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002978:	4a3a      	ldr	r2, [pc, #232]	@ (8002a64 <HAL_UART_MspInit+0x1c0>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800297e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 8002980:	4a3b      	ldr	r2, [pc, #236]	@ (8002a70 <HAL_UART_MspInit+0x1cc>)
 8002982:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002984:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 8002986:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800298a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298c:	4b37      	ldr	r3, [pc, #220]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002998:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 800299a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a6:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029be:	482b      	ldr	r0, [pc, #172]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029c0:	f000 fba8 	bl	8003114 <HAL_DMA_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80029ca:	f7ff fe7f 	bl	80026cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80029d4:	4a25      	ldr	r2, [pc, #148]	@ (8002a6c <HAL_UART_MspInit+0x1c8>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2025      	movs	r0, #37	@ 0x25
 80029e0:	f000 fb61 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029e4:	2025      	movs	r0, #37	@ 0x25
 80029e6:	f000 fb7a 	bl	80030de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ea:	e030      	b.n	8002a4e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	@ (8002a74 <HAL_UART_MspInit+0x1d0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d12b      	bne.n	8002a4e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a17      	ldr	r2, [pc, #92]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	4a10      	ldr	r2, [pc, #64]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_UART_MspInit+0x1b8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a2e:	230c      	movs	r3, #12
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <HAL_UART_MspInit+0x1bc>)
 8002a4a:	f000 fedf 	bl	800380c <HAL_GPIO_Init>
}
 8002a4e:	bf00      	nop
 8002a50:	3730      	adds	r7, #48	@ 0x30
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	20000358 	.word	0x20000358
 8002a68:	40026440 	.word	0x40026440
 8002a6c:	200003b8 	.word	0x200003b8
 8002a70:	400264b8 	.word	0x400264b8
 8002a74:	40004400 	.word	0x40004400

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <NMI_Handler+0x4>

08002a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <MemManage_Handler+0x4>

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <UsageFault_Handler+0x4>

08002aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <SysTick_Handler+0x34>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <SysTick_Handler+0x18>
	  Timer1--;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <SysTick_Handler+0x34>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <SysTick_Handler+0x34>)
 8002ae2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002ae4:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <SysTick_Handler+0x38>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <SysTick_Handler+0x2c>
	  Timer2--;
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <SysTick_Handler+0x38>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <SysTick_Handler+0x38>)
 8002af6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af8:	f000 f9b6 	bl	8002e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000020c 	.word	0x2000020c
 8002b04:	2000020e 	.word	0x2000020e

08002b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <USART1_IRQHandler+0x10>)
 8002b0e:	f002 fb95 	bl	800523c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200002c8 	.word	0x200002c8

08002b1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b20:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <DMA2_Stream2_IRQHandler+0x10>)
 8002b22:	f000 fc37 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000358 	.word	0x20000358

08002b30 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <DMA2_Stream7_IRQHandler+0x10>)
 8002b36:	f000 fc2d 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200003b8 	.word	0x200003b8

08002b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return 1;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_kill>:

int _kill(int pid, int sig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b5e:	f007 fbdf 	bl	800a320 <__errno>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2216      	movs	r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
  return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_exit>:

void _exit (int status)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffe7 	bl	8002b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b86:	bf00      	nop
 8002b88:	e7fd      	b.n	8002b86 <_exit+0x12>

08002b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e00a      	b.n	8002bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	b2ca      	uxtb	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	dbf0      	blt.n	8002b9c <_read+0x12>
  }

  return len;
 8002bba:	687b      	ldr	r3, [r7, #4]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e009      	b.n	8002bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc52 	bl	8002488 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbf1      	blt.n	8002bd6 <_write+0x12>
  }
  return len;
 8002bf2:	687b      	ldr	r3, [r7, #4]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_close>:

int _close(int file)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c24:	605a      	str	r2, [r3, #4]
  return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_isatty>:

int _isatty(int file)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	@ (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f007 fb44 	bl	800a320 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20020000 	.word	0x20020000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	2000041c 	.word	0x2000041c
 8002ccc:	200007b0 	.word	0x200007b0

08002cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <SystemInit+0x20>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <SystemInit+0x20>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <USART2_IRQHandler>:
// Enable USART2 interrupt in the NVIC
NVIC_EnableIRQ(USART2_IRQn);
}

// USART2 interrupt handler
void USART2_IRQHandler(void) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {  // RX interrupt triggered
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <USART2_IRQHandler+0x38>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <USART2_IRQHandler+0x2c>
        char received = USART2->DR;    // Read received character
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <USART2_IRQHandler+0x38>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	71fb      	strb	r3, [r7, #7]

        // Wait until TX is ready, then echo back the received character
        while (!(USART2->SR & USART_SR_TXE));
 8002d0c:	bf00      	nop
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <USART2_IRQHandler+0x38>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f9      	beq.n	8002d0e <USART2_IRQHandler+0x1a>
        USART2->DR = received;         // Transmit received character back
 8002d1a:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <USART2_IRQHandler+0x38>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	6053      	str	r3, [r2, #4]
    }
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40004400 	.word	0x40004400

08002d30 <uart_send_string>:

void uart_send_string(const char *str) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002d38:	e00c      	b.n	8002d54 <uart_send_string+0x24>
        while (!(USART2->SR & USART_SR_TXE)); // Wait until TX is ready
 8002d3a:	bf00      	nop
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <uart_send_string+0x3c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f9      	beq.n	8002d3c <uart_send_string+0xc>
        USART2->DR = *str++;                  // Transmit character
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <uart_send_string+0x3c>)
 8002d52:	605a      	str	r2, [r3, #4]
    while (*str) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <uart_send_string+0xa>
    }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40004400 	.word	0x40004400

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d74:	f7ff ffac 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d78:	480c      	ldr	r0, [pc, #48]	@ (8002dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d7a:	490d      	ldr	r1, [pc, #52]	@ (8002db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d90:	4c0a      	ldr	r4, [pc, #40]	@ (8002dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f007 fac5 	bl	800a32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da2:	f7ff f885 	bl	8001eb0 <main>
  bx  lr    
 8002da6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002db4:	0800ce5c 	.word	0x0800ce5c
  ldr r2, =_sbss
 8002db8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002dbc:	200007ac 	.word	0x200007ac

08002dc0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <DMA1_Stream0_IRQHandler>
	...

08002dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <HAL_Init+0x40>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e04 <HAL_Init+0x40>)
 8002dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <HAL_Init+0x40>)
 8002dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a07      	ldr	r2, [pc, #28]	@ (8002e04 <HAL_Init+0x40>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f000 f94f 	bl	8003090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f000 f808 	bl	8002e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df8:	f7ff fc9c 	bl	8002734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00

08002e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <HAL_InitTick+0x54>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_InitTick+0x58>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f967 	bl	80030fa <HAL_SYSTICK_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00e      	b.n	8002e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d80a      	bhi.n	8002e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f000 f92f 	bl	80030a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e48:	4a06      	ldr	r2, [pc, #24]	@ (8002e64 <HAL_InitTick+0x5c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	2000000c 	.word	0x2000000c
 8002e64:	20000008 	.word	0x20000008

08002e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_IncTick+0x20>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_IncTick+0x24>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <HAL_IncTick+0x24>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	20000420 	.word	0x20000420

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_GetTick+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000420 	.word	0x20000420

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff ffee 	bl	8002e90 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d005      	beq.n	8002ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_Delay+0x44>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ece:	bf00      	nop
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f7      	bhi.n	8002ed0 <HAL_Delay+0x28>
  {
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	@ (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	@ (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	@ 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	@ 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800305c:	d301      	bcc.n	8003062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305e:	2301      	movs	r3, #1
 8003060:	e00f      	b.n	8003082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <SysTick_Config+0x40>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306a:	210f      	movs	r1, #15
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f7ff ff8e 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <SysTick_Config+0x40>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307a:	4b04      	ldr	r3, [pc, #16]	@ (800308c <SysTick_Config+0x40>)
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff29 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b8:	f7ff ff3e 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 80030bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff ff8e 	bl	8002fe4 <NVIC_EncodePriority>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff5d 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff31 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffa2 	bl	800304c <SysTick_Config>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff feb6 	bl	8002e90 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e099      	b.n	8003264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003150:	e00f      	b.n	8003172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003152:	f7ff fe9d 	bl	8002e90 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b05      	cmp	r3, #5
 800315e:	d908      	bls.n	8003172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e078      	b.n	8003264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e8      	bne.n	8003152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4b38      	ldr	r3, [pc, #224]	@ (800326c <HAL_DMA_Init+0x158>)
 800318c:	4013      	ands	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d107      	bne.n	80031dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	4313      	orrs	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	2b04      	cmp	r3, #4
 8003204:	d117      	bne.n	8003236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fa7b 	bl	8003714 <DMA_CheckFifoParam>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2240      	movs	r2, #64	@ 0x40
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003232:	2301      	movs	r3, #1
 8003234:	e016      	b.n	8003264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa32 	bl	80036a8 <DMA_CalcBaseAndBitshift>
 8003244:	4603      	mov	r3, r0
 8003246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	223f      	movs	r2, #63	@ 0x3f
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	f010803f 	.word	0xf010803f

08003270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800327e:	f7ff fe07 	bl	8002e90 <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e052      	b.n	8003348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0216 	bic.w	r2, r2, #22
 80032b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <HAL_DMA_Abort+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0208 	bic.w	r2, r2, #8
 80032e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	e013      	b.n	800331c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f4:	f7ff fdcc 	bl	8002e90 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d90c      	bls.n	800331c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e015      	b.n	8003348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e4      	bne.n	80032f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	223f      	movs	r2, #63	@ 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d004      	beq.n	800336e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e00c      	b.n	8003388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2205      	movs	r2, #5
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a0:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_DMA_IRQHandler+0x248>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8e      	ldr	r2, [pc, #568]	@ (80035e0 <HAL_DMA_IRQHandler+0x24c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2208      	movs	r2, #8
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	2208      	movs	r2, #8
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	2204      	movs	r2, #4
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2210      	movs	r2, #16
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d043      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	2210      	movs	r2, #16
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
 80034c2:	e01f      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e016      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	2220      	movs	r2, #32
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808f 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8087 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d136      	bne.n	80035ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0216 	bic.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMA_IRQHandler+0x1da>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	223f      	movs	r2, #63	@ 0x3f
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d07e      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
        }
        return;
 80035aa:	e079      	b.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e02c      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
 80035da:	bf00      	nop
 80035dc:	20000004 	.word	0x20000004
 80035e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e01e      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d032      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d307      	bcc.n	800367c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <HAL_DMA_IRQHandler+0x2cc>
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800367c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a0:	bf00      	nop
    }
  }
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3b10      	subs	r3, #16
 80036b8:	4a14      	ldr	r2, [pc, #80]	@ (800370c <DMA_CalcBaseAndBitshift+0x64>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036c2:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <DMA_CalcBaseAndBitshift+0x68>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d909      	bls.n	80036ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e8:	e007      	b.n	80036fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	aaaaaaab 	.word	0xaaaaaaab
 8003710:	0800c694 	.word	0x0800c694

08003714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11f      	bne.n	800376e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d856      	bhi.n	80037e2 <DMA_CheckFifoParam+0xce>
 8003734:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <DMA_CheckFifoParam+0x28>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	0800374d 	.word	0x0800374d
 8003740:	0800375f 	.word	0x0800375f
 8003744:	0800374d 	.word	0x0800374d
 8003748:	080037e3 	.word	0x080037e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d046      	beq.n	80037e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e043      	b.n	80037e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003766:	d140      	bne.n	80037ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e03d      	b.n	80037ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d121      	bne.n	80037bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d837      	bhi.n	80037ee <DMA_CheckFifoParam+0xda>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <DMA_CheckFifoParam+0x70>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	08003795 	.word	0x08003795
 8003788:	0800379b 	.word	0x0800379b
 800378c:	08003795 	.word	0x08003795
 8003790:	080037ad 	.word	0x080037ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e030      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d025      	beq.n	80037f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037aa:	e022      	b.n	80037f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b4:	d11f      	bne.n	80037f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ba:	e01c      	b.n	80037f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d903      	bls.n	80037ca <DMA_CheckFifoParam+0xb6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d003      	beq.n	80037d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c8:	e018      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      break;
 80037ce:	e015      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e00b      	b.n	80037fa <DMA_CheckFifoParam+0xe6>
      break;
 80037e2:	bf00      	nop
 80037e4:	e00a      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e008      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e006      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;   
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
    }
  } 
  
  return status; 
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e159      	b.n	8003adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	f040 8148 	bne.w	8003ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	2b02      	cmp	r3, #2
 800385c:	d130      	bne.n	80038c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 0201 	and.w	r2, r3, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d017      	beq.n	80038fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d123      	bne.n	8003950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	220f      	movs	r2, #15
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	08da      	lsrs	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a2 	beq.w	8003ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b57      	ldr	r3, [pc, #348]	@ (8003af4 <HAL_GPIO_Init+0x2e8>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	4a56      	ldr	r2, [pc, #344]	@ (8003af4 <HAL_GPIO_Init+0x2e8>)
 800399c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039a2:	4b54      	ldr	r3, [pc, #336]	@ (8003af4 <HAL_GPIO_Init+0x2e8>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ae:	4a52      	ldr	r2, [pc, #328]	@ (8003af8 <HAL_GPIO_Init+0x2ec>)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a49      	ldr	r2, [pc, #292]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d019      	beq.n	8003a0e <HAL_GPIO_Init+0x202>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a48      	ldr	r2, [pc, #288]	@ (8003b00 <HAL_GPIO_Init+0x2f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0x1fe>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a47      	ldr	r2, [pc, #284]	@ (8003b04 <HAL_GPIO_Init+0x2f8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00d      	beq.n	8003a06 <HAL_GPIO_Init+0x1fa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a46      	ldr	r2, [pc, #280]	@ (8003b08 <HAL_GPIO_Init+0x2fc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <HAL_GPIO_Init+0x1f6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a45      	ldr	r2, [pc, #276]	@ (8003b0c <HAL_GPIO_Init+0x300>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_GPIO_Init+0x1f2>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 80039fe:	2307      	movs	r3, #7
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	@ (8003af8 <HAL_GPIO_Init+0x2ec>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a52:	4a2f      	ldr	r2, [pc, #188]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a7c:	4a24      	ldr	r2, [pc, #144]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a82:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b10 <HAL_GPIO_Init+0x304>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f aea2 	bls.w	8003828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	@ 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40013c00 	.word	0x40013c00

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b30:	e003      	b.n	8003b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	041a      	lsls	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b5e:	4a05      	ldr	r2, [pc, #20]	@ (8003b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fe9a 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e12b      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fdf0 	bl	8002784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	@ 0x24
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bdc:	f000 fd80 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8003be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a81      	ldr	r2, [pc, #516]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d807      	bhi.n	8003bfc <HAL_I2C_Init+0x84>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <HAL_I2C_Init+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf94      	ite	ls
 8003bf4:	2301      	movls	r3, #1
 8003bf6:	2300      	movhi	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e006      	b.n	8003c0a <HAL_I2C_Init+0x92>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8003df4 <HAL_I2C_Init+0x27c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e7      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a78      	ldr	r2, [pc, #480]	@ (8003df8 <HAL_I2C_Init+0x280>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0c9b      	lsrs	r3, r3, #18
 8003c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a6a      	ldr	r2, [pc, #424]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d802      	bhi.n	8003c4c <HAL_I2C_Init+0xd4>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	e009      	b.n	8003c60 <HAL_I2C_Init+0xe8>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	4a69      	ldr	r2, [pc, #420]	@ (8003dfc <HAL_I2C_Init+0x284>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	3301      	adds	r3, #1
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	495c      	ldr	r1, [pc, #368]	@ (8003dec <HAL_I2C_Init+0x274>)
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	d819      	bhi.n	8003cb4 <HAL_I2C_Init+0x13c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e59      	subs	r1, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c94:	400b      	ands	r3, r1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_I2C_Init+0x138>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e59      	subs	r1, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cae:	e051      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e04f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d111      	bne.n	8003ce0 <HAL_I2C_Init+0x168>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e012      	b.n	8003d06 <HAL_I2C_Init+0x18e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Init+0x196>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10e      	bne.n	8003d34 <HAL_I2C_Init+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e58      	subs	r0, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	440b      	add	r3, r1
 8003d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6911      	ldr	r1, [r2, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	000186a0 	.word	0x000186a0
 8003df0:	001e847f 	.word	0x001e847f
 8003df4:	003d08ff 	.word	0x003d08ff
 8003df8:	431bde83 	.word	0x431bde83
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e267      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e1e:	4b88      	ldr	r3, [pc, #544]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b85      	ldr	r3, [pc, #532]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d112      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b82      	ldr	r3, [pc, #520]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b7e      	ldr	r3, [pc, #504]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e242      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b70      	ldr	r3, [pc, #448]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6f      	ldr	r2, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b69      	ldr	r3, [pc, #420]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a68      	ldr	r2, [pc, #416]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b66      	ldr	r3, [pc, #408]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe ffea 	bl	8002e90 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fe ffe6 	bl	8002e90 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e207      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe ffd6 	bl	8002e90 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe ffd2 	bl	8002e90 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1f3      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b51      	ldr	r3, [pc, #324]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f16:	4b4a      	ldr	r3, [pc, #296]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1c7      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4937      	ldr	r1, [pc, #220]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e03a      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b34      	ldr	r3, [pc, #208]	@ (8004044 <HAL_RCC_OscConfig+0x244>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe ff8b 	bl	8002e90 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fe ff87 	bl	8002e90 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1a8      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4925      	ldr	r1, [pc, #148]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <HAL_RCC_OscConfig+0x244>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fe ff6a 	bl	8002e90 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fe ff66 	bl	8002e90 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e187      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d036      	beq.n	8004058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <HAL_RCC_OscConfig+0x248>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe ff4a 	bl	8002e90 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe ff46 	bl	8002e90 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e167      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x240>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
 800401e:	e01b      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_RCC_OscConfig+0x248>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004026:	f7fe ff33 	bl	8002e90 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e00e      	b.n	800404c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fe ff2f 	bl	8002e90 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d907      	bls.n	800404c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e150      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	42470000 	.word	0x42470000
 8004048:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	4b88      	ldr	r3, [pc, #544]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ea      	bne.n	800402e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8097 	beq.w	8004194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406a:	4b81      	ldr	r3, [pc, #516]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10f      	bne.n	8004096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b7d      	ldr	r3, [pc, #500]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a7c      	ldr	r2, [pc, #496]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b7a      	ldr	r3, [pc, #488]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b77      	ldr	r3, [pc, #476]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4b74      	ldr	r3, [pc, #464]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ae:	f7fe feef 	bl	8002e90 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fe feeb 	bl	8002e90 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e10c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_RCC_OscConfig+0x474>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x2ea>
 80040dc:	4b64      	ldr	r3, [pc, #400]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a63      	ldr	r2, [pc, #396]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x30c>
 80040f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a5b      	ldr	r2, [pc, #364]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 800410c:	4b58      	ldr	r3, [pc, #352]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	4a57      	ldr	r2, [pc, #348]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	@ 0x70
 8004118:	4b55      	ldr	r3, [pc, #340]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a54      	ldr	r2, [pc, #336]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe feb0 	bl	8002e90 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fe feac 	bl	8002e90 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0cb      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	4b49      	ldr	r3, [pc, #292]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ee      	beq.n	8004134 <HAL_RCC_OscConfig+0x334>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fe fe9a 	bl	8002e90 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fe fe96 	bl	8002e90 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0b5      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	4b3e      	ldr	r3, [pc, #248]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ee      	bne.n	8004160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b39      	ldr	r3, [pc, #228]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	4a38      	ldr	r2, [pc, #224]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004192:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a1 	beq.w	80042e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d05c      	beq.n	8004264 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d141      	bne.n	8004236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b31      	ldr	r3, [pc, #196]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fe6a 	bl	8002e90 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe fe66 	bl	8002e90 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e087      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	019b      	lsls	r3, r3, #6
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	491b      	ldr	r1, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fe fe3f 	bl	8002e90 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004216:	f7fe fe3b 	bl	8002e90 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e05c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x416>
 8004234:	e054      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_OscConfig+0x478>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fe28 	bl	8002e90 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fe fe24 	bl	8002e90 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e045      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_OscConfig+0x470>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x444>
 8004262:	e03d      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e038      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x4ec>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d028      	beq.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d121      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11a      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0cc      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d90c      	bls.n	800432c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d119      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b3f      	ldr	r3, [pc, #252]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b37      	ldr	r3, [pc, #220]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4934      	ldr	r1, [pc, #208]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fe fd56 	bl	8002e90 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fe fd52 	bl	8002e90 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2b      	ldr	r3, [pc, #172]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fcb6 	bl	8002e08 <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800c67c 	.word	0x0800c67c
 80044b4:	20000004 	.word	0x20000004
 80044b8:	20000008 	.word	0x20000008

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b094      	sub	sp, #80	@ 0x50
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d4:	4b79      	ldr	r3, [pc, #484]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d00d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x40>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	f200 80e1 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f4:	e0db      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fc:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004506:	4b6d      	ldr	r3, [pc, #436]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800451c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
 800452a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	0159      	lsls	r1, r3, #5
 800453c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004540:	0150      	lsls	r0, r2, #5
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4621      	mov	r1, r4
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	4629      	mov	r1, r5
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456a:	4651      	mov	r1, sl
 800456c:	018a      	lsls	r2, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ebb2 0801 	subs.w	r8, r2, r1
 8004574:	4659      	mov	r1, fp
 8004576:	eb63 0901 	sbc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ae:	4629      	mov	r1, r5
 80045b0:	024b      	lsls	r3, r1, #9
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b8:	4621      	mov	r1, r4
 80045ba:	024a      	lsls	r2, r1, #9
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045cc:	f7fc fb14 	bl	8000bf8 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	e058      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	4611      	mov	r1, r2
 80045e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004606:	0150      	lsls	r0, r2, #5
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4641      	mov	r1, r8
 800460e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb63 0b01 	sbc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800462c:	ebb2 040a 	subs.w	r4, r2, sl
 8004630:	eb63 050b 	sbc.w	r5, r3, fp
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	464b      	mov	r3, r9
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004662:	4629      	mov	r1, r5
 8004664:	028b      	lsls	r3, r1, #10
 8004666:	4621      	mov	r1, r4
 8004668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800466c:	4621      	mov	r1, r4
 800466e:	028a      	lsls	r2, r1, #10
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	2200      	movs	r2, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	f7fc faba 	bl	8000bf8 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800469c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3750      	adds	r7, #80	@ 0x50
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	0800c68c 	.word	0x0800c68c

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	0800c68c 	.word	0x0800c68c

08004730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07b      	b.n	800483a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d108      	bne.n	800475c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004752:	d009      	beq.n	8004768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	61da      	str	r2, [r3, #28]
 800475a:	e005      	b.n	8004768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe f846 	bl	8002814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ec:	ea42 0103 	orr.w	r1, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 0104 	and.w	r1, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	f003 0210 	and.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b088      	sub	sp, #32
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004852:	f7fe fb1d 	bl	8002e90 <HAL_GetTick>
 8004856:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004868:	2302      	movs	r3, #2
 800486a:	e12a      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Transmit+0x36>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e122      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_SPI_Transmit+0x48>
 8004886:	2302      	movs	r3, #2
 8004888:	e11b      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2203      	movs	r2, #3
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d8:	d10f      	bne.n	80048fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b40      	cmp	r3, #64	@ 0x40
 8004906:	d007      	beq.n	8004918 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004920:	d152      	bne.n	80049c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_SPI_Transmit+0xee>
 800492a:	8b7b      	ldrh	r3, [r7, #26]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d145      	bne.n	80049bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	881a      	ldrh	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004954:	e032      	b.n	80049bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d112      	bne.n	800498a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	881a      	ldrh	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	1c9a      	adds	r2, r3, #2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004988:	e018      	b.n	80049bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498a:	f7fe fa81 	bl	8002e90 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d803      	bhi.n	80049a2 <HAL_SPI_Transmit+0x160>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d102      	bne.n	80049a8 <HAL_SPI_Transmit+0x166>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e082      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1c7      	bne.n	8004956 <HAL_SPI_Transmit+0x114>
 80049c6:	e053      	b.n	8004a70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x194>
 80049d0:	8b7b      	ldrh	r3, [r7, #26]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d147      	bne.n	8004a66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049fc:	e033      	b.n	8004a66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d113      	bne.n	8004a34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	7812      	ldrb	r2, [r2, #0]
 8004a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a32:	e018      	b.n	8004a66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a34:	f7fe fa2c 	bl	8002e90 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d803      	bhi.n	8004a4c <HAL_SPI_Transmit+0x20a>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d102      	bne.n	8004a52 <HAL_SPI_Transmit+0x210>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e02d      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1c6      	bne.n	80049fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fa59 	bl	8004f2c <SPI_EndRxTxTransaction>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b08a      	sub	sp, #40	@ 0x28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004adc:	f7fe f9d8 	bl	8002e90 <HAL_GetTick>
 8004ae0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ae8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d00c      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x4a>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b00:	d106      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x46>
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d001      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e17f      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x5c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x5c>
 8004b20:	887b      	ldrh	r3, [r7, #2]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e174      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x6e>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e16d      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d003      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2205      	movs	r2, #5
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	887a      	ldrh	r2, [r7, #2]
 8004b76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d007      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb0:	d17e      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0xf6>
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d16c      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be4:	e059      	b.n	8004c9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d11b      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x162>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x162>
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d113      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	881a      	ldrh	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d119      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x1a4>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d014      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c6e:	f7fe f90f 	bl	8002e90 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d80d      	bhi.n	8004c9a <HAL_SPI_TransmitReceive+0x1d0>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d009      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0bc      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1a0      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x11c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d19b      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x11c>
 8004cae:	e082      	b.n	8004db6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x1f4>
 8004cb8:	8afb      	ldrh	r3, [r7, #22]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d171      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce4:	e05d      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d11c      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x264>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d017      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x264>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d114      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x2a6>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d70:	f7fe f88e 	bl	8002e90 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d803      	bhi.n	8004d88 <HAL_SPI_TransmitReceive+0x2be>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d102      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x2c4>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e038      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d19c      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x21c>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d197      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f8b6 	bl	8004f2c <SPI_EndRxTxTransaction>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e01d      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3728      	adds	r7, #40	@ 0x28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e2c:	f7fe f830 	bl	8002e90 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e3c:	f7fe f828 	bl	8002e90 <HAL_GetTick>
 8004e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e42:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	015b      	lsls	r3, r3, #5
 8004e48:	0d1b      	lsrs	r3, r3, #20
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e52:	e054      	b.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d050      	beq.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e5c:	f7fe f818 	bl	8002e90 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d902      	bls.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d13d      	bne.n	8004eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8a:	d111      	bne.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e94:	d004      	beq.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9e:	d107      	bne.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb8:	d10f      	bne.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e017      	b.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d19b      	bne.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000004 	.word	0x20000004

08004f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2102      	movs	r1, #2
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff ff6a 	bl	8004e1c <SPI_WaitFlagStateUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e032      	b.n	8004fc4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <SPI_EndRxTxTransaction+0xa0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <SPI_EndRxTxTransaction+0xa4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	0d5b      	lsrs	r3, r3, #21
 8004f6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7c:	d112      	bne.n	8004fa4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff ff47 	bl	8004e1c <SPI_WaitFlagStateUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e00f      	b.n	8004fc4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b80      	cmp	r3, #128	@ 0x80
 8004fbc:	d0f2      	beq.n	8004fa4 <SPI_EndRxTxTransaction+0x78>
 8004fbe:	e000      	b.n	8004fc2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004fc0:	bf00      	nop
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000004 	.word	0x20000004
 8004fd0:	165e9f81 	.word	0x165e9f81

08004fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e042      	b.n	800506c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fc52 	bl	80028a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	@ 0x24
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fdb7 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800502c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800503c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800504c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e04a      	b.n	800511c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fc02 	bl	80028a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fd67 	bl	8005b8c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0208 	orr.w	r2, r2, #8
 80050ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	@ 0x28
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b20      	cmp	r3, #32
 8005142:	d175      	bne.n	8005230 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_UART_Transmit+0x2c>
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e06e      	b.n	8005232 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2221      	movs	r2, #33	@ 0x21
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005162:	f7fd fe95 	bl	8002e90 <HAL_GetTick>
 8005166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517c:	d108      	bne.n	8005190 <HAL_UART_Transmit+0x6c>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e003      	b.n	8005198 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005198:	e02e      	b.n	80051f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	2180      	movs	r1, #128	@ 0x80
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fafb 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e03a      	b.n	8005232 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	3302      	adds	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e007      	b.n	80051ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3301      	adds	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1cb      	bne.n	800519a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2140      	movs	r1, #64	@ 0x40
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fac7 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0ba      	sub	sp, #232	@ 0xe8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005262:	2300      	movs	r3, #0
 8005264:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800527a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_UART_IRQHandler+0x66>
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fbb8 	bl	8005a10 <UART_Receive_IT>
      return;
 80052a0:	e25b      	b.n	800575a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80de 	beq.w	8005468 <HAL_UART_IRQHandler+0x22c>
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80d1 	beq.w	8005468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_UART_IRQHandler+0xae>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_UART_IRQHandler+0xd2>
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <HAL_UART_IRQHandler+0xf6>
 800531a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <HAL_UART_IRQHandler+0x126>
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800534a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535a:	f043 0208 	orr.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 81f2 	beq.w	8005750 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_UART_IRQHandler+0x14e>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fb43 	bl	8005a10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <HAL_UART_IRQHandler+0x17a>
 80053ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04f      	beq.n	8005456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa4b 	bl	8005852 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d141      	bne.n	800544e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800540e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1d9      	bne.n	80053ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d013      	beq.n	8005446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	4a7e      	ldr	r2, [pc, #504]	@ (800561c <HAL_UART_IRQHandler+0x3e0>)
 8005424:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd ff90 	bl	8003350 <HAL_DMA_Abort_IT>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e00e      	b.n	8005464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f994 	bl	8005774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00a      	b.n	8005464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f990 	bl	8005774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e006      	b.n	8005464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f98c 	bl	8005774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005462:	e175      	b.n	8005750 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	bf00      	nop
    return;
 8005466:	e173      	b.n	8005750 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 814f 	bne.w	8005710 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8148 	beq.w	8005710 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8141 	beq.w	8005710 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	f040 80b6 	bne.w	8005620 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8145 	beq.w	8005754 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f080 813e 	bcs.w	8005754 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ea:	f000 8088 	beq.w	80055fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800551a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800551e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1d9      	bne.n	80054ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800555e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800559c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fe39 	bl	8003270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800560c:	b29b      	uxth	r3, r3
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	b29b      	uxth	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f8b7 	bl	8005788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561a:	e09b      	b.n	8005754 <HAL_UART_IRQHandler+0x518>
 800561c:	08005919 	.word	0x08005919
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005628:	b29b      	uxth	r3, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 808e 	beq.w	8005758 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800563c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8089 	beq.w	8005758 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800565c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800566a:	647a      	str	r2, [r7, #68]	@ 0x44
 800566c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e3      	bne.n	8005646 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3314      	adds	r3, #20
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	623b      	str	r3, [r7, #32]
   return(result);
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3314      	adds	r3, #20
 800569e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e3      	bne.n	800567e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0310 	bic.w	r3, r3, #16
 80056da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	617b      	str	r3, [r7, #20]
   return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e3      	bne.n	80056c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f83d 	bl	8005788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800570e:	e023      	b.n	8005758 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HAL_UART_IRQHandler+0x4f4>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f909 	bl	8005940 <UART_Transmit_IT>
    return;
 800572e:	e014      	b.n	800575a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00e      	beq.n	800575a <HAL_UART_IRQHandler+0x51e>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f949 	bl	80059e0 <UART_EndTransmit_IT>
    return;
 800574e:	e004      	b.n	800575a <HAL_UART_IRQHandler+0x51e>
    return;
 8005750:	bf00      	nop
 8005752:	e002      	b.n	800575a <HAL_UART_IRQHandler+0x51e>
      return;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_UART_IRQHandler+0x51e>
      return;
 8005758:	bf00      	nop
  }
}
 800575a:	37e8      	adds	r7, #232	@ 0xe8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b0:	e03b      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d037      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fd fb69 	bl	8002e90 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e03a      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d023      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b80      	cmp	r3, #128	@ 0x80
 80057e6:	d020      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d01d      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d116      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f81d 	bl	8005852 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2208      	movs	r2, #8
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e00f      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	429a      	cmp	r2, r3
 8005846:	d0b4      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005852:	b480      	push	{r7}
 8005854:	b095      	sub	sp, #84	@ 0x54
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800587a:	643a      	str	r2, [r7, #64]	@ 0x40
 800587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	61fb      	str	r3, [r7, #28]
   return(result);
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d119      	bne.n	80058fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0310 	bic.w	r3, r3, #16
 80058e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ea:	61ba      	str	r2, [r7, #24]
 80058ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6979      	ldr	r1, [r7, #20]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	613b      	str	r3, [r7, #16]
   return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e5      	bne.n	80058ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800590c:	bf00      	nop
 800590e:	3754      	adds	r7, #84	@ 0x54
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff ff1e 	bl	8005774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b21      	cmp	r3, #33	@ 0x21
 8005952:	d13e      	bne.n	80059d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595c:	d114      	bne.n	8005988 <UART_Transmit_IT+0x48>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800597a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]
 8005986:	e008      	b.n	800599a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6211      	str	r1, [r2, #32]
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4619      	mov	r1, r3
 80059a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fead 	bl	8005760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	@ 0x30
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b22      	cmp	r3, #34	@ 0x22
 8005a22:	f040 80ae 	bne.w	8005b82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d117      	bne.n	8005a60 <UART_Receive_IT+0x50>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a5e:	e026      	b.n	8005aae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	d007      	beq.n	8005a84 <UART_Receive_IT+0x74>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <UART_Receive_IT+0x82>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e008      	b.n	8005aa4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d15d      	bne.n	8005b7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0220 	bic.w	r2, r2, #32
 8005ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d135      	bne.n	8005b74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2e:	623a      	str	r2, [r7, #32]
 8005b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d10a      	bne.n	8005b66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fe0b 	bl	8005788 <HAL_UARTEx_RxEventCallback>
 8005b72:	e002      	b.n	8005b7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb f9b7 	bl	8000ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e002      	b.n	8005b84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3730      	adds	r7, #48	@ 0x30
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b0c0      	sub	sp, #256	@ 0x100
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	ea40 0301 	orr.w	r3, r0, r1
 8005bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005be4:	f021 010c 	bic.w	r1, r1, #12
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	6999      	ldr	r1, [r3, #24]
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	ea40 0301 	orr.w	r3, r0, r1
 8005c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d005      	beq.n	8005c2c <UART_SetConfig+0xa0>
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b8d      	ldr	r3, [pc, #564]	@ (8005e5c <UART_SetConfig+0x2d0>)
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fe fd6c 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8005c30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c34:	e003      	b.n	8005c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7fe fd53 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c48:	f040 810c 	bne.w	8005e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c66:	415b      	adcs	r3, r3
 8005c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c6e:	4621      	mov	r1, r4
 8005c70:	eb12 0801 	adds.w	r8, r2, r1
 8005c74:	4629      	mov	r1, r5
 8005c76:	eb43 0901 	adc.w	r9, r3, r1
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8e:	4690      	mov	r8, r2
 8005c90:	4699      	mov	r9, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	eb18 0303 	adds.w	r3, r8, r3
 8005c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	18db      	adds	r3, r3, r3
 8005cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	eb42 0303 	adc.w	r3, r2, r3
 8005cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cd0:	f7fa ff92 	bl	8000bf8 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2302 	umull	r2, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	011c      	lsls	r4, r3, #4
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d04:	4641      	mov	r1, r8
 8005d06:	eb12 0a01 	adds.w	sl, r2, r1
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d24:	4692      	mov	sl, r2
 8005d26:	469b      	mov	fp, r3
 8005d28:	4643      	mov	r3, r8
 8005d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb4b 0303 	adc.w	r3, fp, r3
 8005d38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d66:	f7fa ff47 	bl	8000bf8 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005d72:	fba3 2301 	umull	r2, r3, r3, r1
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2264      	movs	r2, #100	@ 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	1acb      	subs	r3, r1, r3
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d86:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005d88:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d94:	441c      	add	r4, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005db0:	415b      	adcs	r3, r3
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005db8:	4641      	mov	r1, r8
 8005dba:	1851      	adds	r1, r2, r1
 8005dbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	414b      	adcs	r3, r1
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	00cb      	lsls	r3, r1, #3
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dda:	4651      	mov	r1, sl
 8005ddc:	00ca      	lsls	r2, r1, #3
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	4642      	mov	r2, r8
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dec:	464b      	mov	r3, r9
 8005dee:	460a      	mov	r2, r1
 8005df0:	eb42 0303 	adc.w	r3, r2, r3
 8005df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e22:	f7fa fee9 	bl	8000bf8 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	2164      	movs	r1, #100	@ 0x64
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	3332      	adds	r3, #50	@ 0x32
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f003 0207 	and.w	r2, r3, #7
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4422      	add	r2, r4
 8005e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e54:	e106      	b.n	8006064 <UART_SetConfig+0x4d8>
 8005e56:	bf00      	nop
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40011400 	.word	0x40011400
 8005e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6239      	str	r1, [r7, #32]
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e86:	4641      	mov	r1, r8
 8005e88:	1854      	adds	r4, r2, r1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	eb43 0501 	adc.w	r5, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	00eb      	lsls	r3, r5, #3
 8005e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9e:	00e2      	lsls	r2, r4, #3
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	18e3      	adds	r3, r4, r3
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005eac:	464b      	mov	r3, r9
 8005eae:	eb45 0303 	adc.w	r3, r5, r3
 8005eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	008b      	lsls	r3, r1, #2
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005edc:	4621      	mov	r1, r4
 8005ede:	008a      	lsls	r2, r1, #2
 8005ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ee4:	f7fa fe88 	bl	8000bf8 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4b60      	ldr	r3, [pc, #384]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011c      	lsls	r4, r3, #4
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	1891      	adds	r1, r2, r2
 8005f0e:	61b9      	str	r1, [r7, #24]
 8005f10:	415b      	adcs	r3, r3
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f18:	4641      	mov	r1, r8
 8005f1a:	1851      	adds	r1, r2, r1
 8005f1c:	6139      	str	r1, [r7, #16]
 8005f1e:	4649      	mov	r1, r9
 8005f20:	414b      	adcs	r3, r1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f30:	4659      	mov	r1, fp
 8005f32:	00cb      	lsls	r3, r1, #3
 8005f34:	4651      	mov	r1, sl
 8005f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	00ca      	lsls	r2, r1, #3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	4642      	mov	r2, r8
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	460a      	mov	r2, r1
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f70:	4649      	mov	r1, r9
 8005f72:	008b      	lsls	r3, r1, #2
 8005f74:	4641      	mov	r1, r8
 8005f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	008a      	lsls	r2, r1, #2
 8005f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f82:	f7fa fe39 	bl	8000bf8 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4b38      	ldr	r3, [pc, #224]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2264      	movs	r2, #100	@ 0x64
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	1acb      	subs	r3, r1, r3
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	3332      	adds	r3, #50	@ 0x32
 8005fa0:	4a33      	ldr	r2, [pc, #204]	@ (8006070 <UART_SetConfig+0x4e4>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fac:	441c      	add	r4, r3
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fcc:	4641      	mov	r1, r8
 8005fce:	1851      	adds	r1, r2, r1
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	00cb      	lsls	r3, r1, #3
 8005fe8:	4651      	mov	r1, sl
 8005fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fee:	4651      	mov	r1, sl
 8005ff0:	00ca      	lsls	r2, r1, #3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ffe:	464b      	mov	r3, r9
 8006000:	460a      	mov	r2, r1
 8006002:	eb42 0303 	adc.w	r3, r2, r3
 8006006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	663b      	str	r3, [r7, #96]	@ 0x60
 8006012:	667a      	str	r2, [r7, #100]	@ 0x64
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006020:	4649      	mov	r1, r9
 8006022:	008b      	lsls	r3, r1, #2
 8006024:	4641      	mov	r1, r8
 8006026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800602a:	4641      	mov	r1, r8
 800602c:	008a      	lsls	r2, r1, #2
 800602e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006032:	f7fa fde1 	bl	8000bf8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <UART_SetConfig+0x4e4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	@ 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	3332      	adds	r3, #50	@ 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <UART_SetConfig+0x4e4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 020f 	and.w	r2, r3, #15
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800606a:	46bd      	mov	sp, r7
 800606c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006070:	51eb851f 	.word	0x51eb851f

08006074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006078:	4904      	ldr	r1, [pc, #16]	@ (800608c <MX_FATFS_Init+0x18>)
 800607a:	4805      	ldr	r0, [pc, #20]	@ (8006090 <MX_FATFS_Init+0x1c>)
 800607c:	f003 f9c6 	bl	800940c <FATFS_LinkDriver>
 8006080:	4603      	mov	r3, r0
 8006082:	461a      	mov	r2, r3
 8006084:	4b03      	ldr	r3, [pc, #12]	@ (8006094 <MX_FATFS_Init+0x20>)
 8006086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000428 	.word	0x20000428
 8006090:	20000010 	.word	0x20000010
 8006094:	20000424 	.word	0x20000424

08006098 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800609c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fb f8df 	bl	8001278 <SD_disk_initialize>
 80060ba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fb f9b7 	bl	8001444 <SD_disk_status>
 80060d6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80060f0:	7bf8      	ldrb	r0, [r7, #15]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	f7fb f9ba 	bl	8001470 <SD_disk_read>
 80060fc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8006116:	7bf8      	ldrb	r0, [r7, #15]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	f7fb fa11 	bl	8001544 <SD_disk_write>
 8006122:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	603a      	str	r2, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
 8006138:	460b      	mov	r3, r1
 800613a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 800613c:	79b9      	ldrb	r1, [r7, #6]
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fb fa82 	bl	800164c <SD_disk_ioctl>
 8006148:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <disk_status+0x30>)
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	79fa      	ldrb	r2, [r7, #7]
 800616c:	4905      	ldr	r1, [pc, #20]	@ (8006184 <disk_status+0x30>)
 800616e:	440a      	add	r2, r1
 8006170:	7a12      	ldrb	r2, [r2, #8]
 8006172:	4610      	mov	r0, r2
 8006174:	4798      	blx	r3
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
  return stat;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000654 	.word	0x20000654

08006188 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	4a0e      	ldr	r2, [pc, #56]	@ (80061d4 <disk_initialize+0x4c>)
 800619a:	5cd3      	ldrb	r3, [r2, r3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d114      	bne.n	80061ca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	4a0c      	ldr	r2, [pc, #48]	@ (80061d4 <disk_initialize+0x4c>)
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	79fa      	ldrb	r2, [r7, #7]
 80061ae:	4909      	ldr	r1, [pc, #36]	@ (80061d4 <disk_initialize+0x4c>)
 80061b0:	440a      	add	r2, r1
 80061b2:	7a12      	ldrb	r2, [r2, #8]
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4a03      	ldr	r2, [pc, #12]	@ (80061d4 <disk_initialize+0x4c>)
 80061c6:	2101      	movs	r1, #1
 80061c8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000654 	.word	0x20000654

080061d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006214 <disk_read+0x3c>)
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	689c      	ldr	r4, [r3, #8]
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	4a07      	ldr	r2, [pc, #28]	@ (8006214 <disk_read+0x3c>)
 80061f8:	4413      	add	r3, r2
 80061fa:	7a18      	ldrb	r0, [r3, #8]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	47a0      	blx	r4
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
  return res;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	bd90      	pop	{r4, r7, pc}
 8006212:	bf00      	nop
 8006214:	20000654 	.word	0x20000654

08006218 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4a0a      	ldr	r2, [pc, #40]	@ (8006254 <disk_write+0x3c>)
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68dc      	ldr	r4, [r3, #12]
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	4a07      	ldr	r2, [pc, #28]	@ (8006254 <disk_write+0x3c>)
 8006238:	4413      	add	r3, r2
 800623a:	7a18      	ldrb	r0, [r3, #8]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	47a0      	blx	r4
 8006244:	4603      	mov	r3, r0
 8006246:	75fb      	strb	r3, [r7, #23]
  return res;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}
 8006252:	bf00      	nop
 8006254:	20000654 	.word	0x20000654

08006258 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	603a      	str	r2, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
 8006264:	460b      	mov	r3, r1
 8006266:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	4a09      	ldr	r2, [pc, #36]	@ (8006290 <disk_ioctl+0x38>)
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	4906      	ldr	r1, [pc, #24]	@ (8006290 <disk_ioctl+0x38>)
 8006278:	440a      	add	r2, r1
 800627a:	7a10      	ldrb	r0, [r2, #8]
 800627c:	79b9      	ldrb	r1, [r7, #6]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	4798      	blx	r3
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
  return res;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000654 	.word	0x20000654

08006294 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3301      	adds	r3, #1
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	b21a      	sxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80062b6:	89fb      	ldrh	r3, [r7, #14]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3303      	adds	r3, #3
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	3202      	adds	r2, #2
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	3201      	adds	r2, #1
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80062fc:	68fb      	ldr	r3, [r7, #12]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	887a      	ldrh	r2, [r7, #2]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	887a      	ldrh	r2, [r7, #2]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00d      	beq.n	80063ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	1c53      	adds	r3, r2, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	6179      	str	r1, [r7, #20]
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f1      	bne.n	80063b2 <mem_cpy+0x1a>
	}
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	617a      	str	r2, [r7, #20]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f3      	bne.n	80063ea <mem_set+0x10>
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006410:	b480      	push	{r7}
 8006412:	b089      	sub	sp, #36	@ 0x24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	4619      	mov	r1, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	61ba      	str	r2, [r7, #24]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	1acb      	subs	r3, r1, r3
 800643c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <mem_cmp+0x40>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0eb      	beq.n	8006428 <mem_cmp+0x18>

	return r;
 8006450:	697b      	ldr	r3, [r7, #20]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3724      	adds	r7, #36	@ 0x24
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006468:	e002      	b.n	8006470 <chk_chr+0x12>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3301      	adds	r3, #1
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <chk_chr+0x26>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	4293      	cmp	r3, r2
 8006482:	d1f2      	bne.n	800646a <chk_chr+0xc>
	return *str;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	781b      	ldrb	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e029      	b.n	80064fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80064a8:	4a27      	ldr	r2, [pc, #156]	@ (8006548 <chk_lock+0xb4>)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01d      	beq.n	80064f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064b6:	4a24      	ldr	r2, [pc, #144]	@ (8006548 <chk_lock+0xb4>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	4413      	add	r3, r2
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d116      	bne.n	80064f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80064c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <chk_lock+0xb4>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	4413      	add	r3, r2
 80064d0:	3304      	adds	r3, #4
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064d8:	429a      	cmp	r2, r3
 80064da:	d10c      	bne.n	80064f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006548 <chk_lock+0xb4>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	4413      	add	r3, r2
 80064e4:	3308      	adds	r3, #8
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d102      	bne.n	80064f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064f0:	e007      	b.n	8006502 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80064f2:	2301      	movs	r3, #1
 80064f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d9d2      	bls.n	80064a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d109      	bne.n	800651c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <chk_lock+0x80>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d101      	bne.n	8006518 <chk_lock+0x84>
 8006514:	2300      	movs	r3, #0
 8006516:	e010      	b.n	800653a <chk_lock+0xa6>
 8006518:	2312      	movs	r3, #18
 800651a:	e00e      	b.n	800653a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <chk_lock+0xa0>
 8006522:	4a09      	ldr	r2, [pc, #36]	@ (8006548 <chk_lock+0xb4>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4413      	add	r3, r2
 800652a:	330c      	adds	r3, #12
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006532:	d101      	bne.n	8006538 <chk_lock+0xa4>
 8006534:	2310      	movs	r3, #16
 8006536:	e000      	b.n	800653a <chk_lock+0xa6>
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20000434 	.word	0x20000434

0800654c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	e002      	b.n	800655e <enq_lock+0x12>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3301      	adds	r3, #1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d806      	bhi.n	8006572 <enq_lock+0x26>
 8006564:	4a09      	ldr	r2, [pc, #36]	@ (800658c <enq_lock+0x40>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	4413      	add	r3, r2
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f2      	bne.n	8006558 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b02      	cmp	r3, #2
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000434 	.word	0x20000434

08006590 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e01f      	b.n	80065e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80065a0:	4a41      	ldr	r2, [pc, #260]	@ (80066a8 <inc_lock+0x118>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	4413      	add	r3, r2
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d113      	bne.n	80065da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80065b2:	4a3d      	ldr	r2, [pc, #244]	@ (80066a8 <inc_lock+0x118>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	4413      	add	r3, r2
 80065ba:	3304      	adds	r3, #4
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d109      	bne.n	80065da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80065c6:	4a38      	ldr	r2, [pc, #224]	@ (80066a8 <inc_lock+0x118>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	3308      	adds	r3, #8
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d006      	beq.n	80065e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d9dc      	bls.n	80065a0 <inc_lock+0x10>
 80065e6:	e000      	b.n	80065ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80065e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d132      	bne.n	8006656 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e002      	b.n	80065fc <inc_lock+0x6c>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d806      	bhi.n	8006610 <inc_lock+0x80>
 8006602:	4a29      	ldr	r2, [pc, #164]	@ (80066a8 <inc_lock+0x118>)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	4413      	add	r3, r2
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f2      	bne.n	80065f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d101      	bne.n	800661a <inc_lock+0x8a>
 8006616:	2300      	movs	r3, #0
 8006618:	e040      	b.n	800669c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4922      	ldr	r1, [pc, #136]	@ (80066a8 <inc_lock+0x118>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	440b      	add	r3, r1
 8006626:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	491e      	ldr	r1, [pc, #120]	@ (80066a8 <inc_lock+0x118>)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	440b      	add	r3, r1
 8006634:	3304      	adds	r3, #4
 8006636:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	491a      	ldr	r1, [pc, #104]	@ (80066a8 <inc_lock+0x118>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	440b      	add	r3, r1
 8006644:	3308      	adds	r3, #8
 8006646:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006648:	4a17      	ldr	r2, [pc, #92]	@ (80066a8 <inc_lock+0x118>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	330c      	adds	r3, #12
 8006652:	2200      	movs	r2, #0
 8006654:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <inc_lock+0xe0>
 800665c:	4a12      	ldr	r2, [pc, #72]	@ (80066a8 <inc_lock+0x118>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	330c      	adds	r3, #12
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <inc_lock+0xe0>
 800666c:	2300      	movs	r3, #0
 800666e:	e015      	b.n	800669c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d108      	bne.n	8006688 <inc_lock+0xf8>
 8006676:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <inc_lock+0x118>)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	4413      	add	r3, r2
 800667e:	330c      	adds	r3, #12
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	e001      	b.n	800668c <inc_lock+0xfc>
 8006688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800668c:	4906      	ldr	r1, [pc, #24]	@ (80066a8 <inc_lock+0x118>)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	440b      	add	r3, r1
 8006694:	330c      	adds	r3, #12
 8006696:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	20000434 	.word	0x20000434

080066ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d825      	bhi.n	800670c <dec_lock+0x60>
		n = Files[i].ctr;
 80066c0:	4a17      	ldr	r2, [pc, #92]	@ (8006720 <dec_lock+0x74>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	4413      	add	r3, r2
 80066c8:	330c      	adds	r3, #12
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80066ce:	89fb      	ldrh	r3, [r7, #14]
 80066d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d4:	d101      	bne.n	80066da <dec_lock+0x2e>
 80066d6:	2300      	movs	r3, #0
 80066d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80066da:	89fb      	ldrh	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <dec_lock+0x3a>
 80066e0:	89fb      	ldrh	r3, [r7, #14]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006720 <dec_lock+0x74>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	4413      	add	r3, r2
 80066ee:	330c      	adds	r3, #12
 80066f0:	89fa      	ldrh	r2, [r7, #14]
 80066f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <dec_lock+0x5a>
 80066fa:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <dec_lock+0x74>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	737b      	strb	r3, [r7, #13]
 800670a:	e001      	b.n	8006710 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800670c:	2302      	movs	r3, #2
 800670e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006710:	7b7b      	ldrb	r3, [r7, #13]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000434 	.word	0x20000434

08006724 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e010      	b.n	8006754 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006732:	4a0d      	ldr	r2, [pc, #52]	@ (8006768 <clear_lock+0x44>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	4413      	add	r3, r2
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d105      	bne.n	800674e <clear_lock+0x2a>
 8006742:	4a09      	ldr	r2, [pc, #36]	@ (8006768 <clear_lock+0x44>)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d9eb      	bls.n	8006732 <clear_lock+0xe>
	}
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	20000434 	.word	0x20000434

0800676c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	78db      	ldrb	r3, [r3, #3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d034      	beq.n	80067ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006784:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7858      	ldrb	r0, [r3, #1]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006790:	2301      	movs	r3, #1
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f7ff fd40 	bl	8006218 <disk_write>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
 80067a2:	e022      	b.n	80067ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d217      	bcs.n	80067ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	789b      	ldrb	r3, [r3, #2]
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	e010      	b.n	80067e4 <sync_window+0x78>
					wsect += fs->fsize;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7858      	ldrb	r0, [r3, #1]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067d6:	2301      	movs	r3, #1
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	f7ff fd1d 	bl	8006218 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d8eb      	bhi.n	80067c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d01b      	beq.n	8006844 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff ffad 	bl	800676c <sync_window>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d113      	bne.n	8006844 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7858      	ldrb	r0, [r3, #1]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006826:	2301      	movs	r3, #1
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	f7ff fcd5 	bl	80061d8 <disk_read>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff87 	bl	800676c <sync_window>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d159      	bne.n	800691c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d149      	bne.n	8006904 <sync_fs+0xb4>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	791b      	ldrb	r3, [r3, #4]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d145      	bne.n	8006904 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	899b      	ldrh	r3, [r3, #12]
 8006882:	461a      	mov	r2, r3
 8006884:	2100      	movs	r1, #0
 8006886:	f7ff fda8 	bl	80063da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3338      	adds	r3, #56	@ 0x38
 800688e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006892:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fd37 	bl	800630a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3338      	adds	r3, #56	@ 0x38
 80068a0:	4921      	ldr	r1, [pc, #132]	@ (8006928 <sync_fs+0xd8>)
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fd4c 	bl	8006340 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3338      	adds	r3, #56	@ 0x38
 80068ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068b0:	491e      	ldr	r1, [pc, #120]	@ (800692c <sync_fs+0xdc>)
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fd44 	bl	8006340 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3338      	adds	r3, #56	@ 0x38
 80068bc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7ff fd3a 	bl	8006340 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3338      	adds	r3, #56	@ 0x38
 80068d0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	4619      	mov	r1, r3
 80068da:	4610      	mov	r0, r2
 80068dc:	f7ff fd30 	bl	8006340 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7858      	ldrb	r0, [r3, #1]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f8:	2301      	movs	r3, #1
 80068fa:	f7ff fc8d 	bl	8006218 <disk_write>
			fs->fsi_flag = 0;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fca3 	bl	8006258 <disk_ioctl>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <sync_fs+0xcc>
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	41615252 	.word	0x41615252
 800692c:	61417272 	.word	0x61417272

08006930 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	3b02      	subs	r3, #2
 800693e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	3b02      	subs	r3, #2
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d301      	bcc.n	8006950 <clust2sect+0x20>
 800694c:	2300      	movs	r3, #0
 800694e:	e008      	b.n	8006962 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	895b      	ldrh	r3, [r3, #10]
 8006954:	461a      	mov	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	fb03 f202 	mul.w	r2, r3, r2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	4413      	add	r3, r2
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d904      	bls.n	800698e <get_fat+0x20>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <get_fat+0x26>
		val = 1;	/* Internal error */
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e0ba      	b.n	8006b0a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b03      	cmp	r3, #3
 80069a0:	f000 8082 	beq.w	8006aa8 <get_fat+0x13a>
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	f300 80a6 	bgt.w	8006af6 <get_fat+0x188>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d002      	beq.n	80069b4 <get_fat+0x46>
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d055      	beq.n	8006a5e <get_fat+0xf0>
 80069b2:	e0a0      	b.n	8006af6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	899b      	ldrh	r3, [r3, #12]
 80069ca:	4619      	mov	r1, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80069d2:	4413      	add	r3, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	6938      	ldr	r0, [r7, #16]
 80069d8:	f7ff ff0c 	bl	80067f4 <move_window>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 808c 	bne.w	8006afc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	60fa      	str	r2, [r7, #12]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	8992      	ldrh	r2, [r2, #12]
 80069ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f2:	fb01 f202 	mul.w	r2, r1, r2
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	899b      	ldrh	r3, [r3, #12]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a12:	4413      	add	r3, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f7ff feec 	bl	80067f4 <move_window>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d16e      	bne.n	8006b00 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	899b      	ldrh	r3, [r3, #12]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a2e:	fb01 f202 	mul.w	r2, r1, r2
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4413      	add	r3, r2
 8006a38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <get_fat+0xe6>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	e002      	b.n	8006a5a <get_fat+0xec>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5a:	617b      	str	r3, [r7, #20]
			break;
 8006a5c:	e055      	b.n	8006b0a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	899b      	ldrh	r3, [r3, #12]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a72:	4413      	add	r3, r2
 8006a74:	4619      	mov	r1, r3
 8006a76:	6938      	ldr	r0, [r7, #16]
 8006a78:	f7ff febc 	bl	80067f4 <move_window>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d140      	bne.n	8006b04 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	8992      	ldrh	r2, [r2, #12]
 8006a90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a94:	fb00 f202 	mul.w	r2, r0, r2
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fbf9 	bl	8006294 <ld_word>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	617b      	str	r3, [r7, #20]
			break;
 8006aa6:	e030      	b.n	8006b0a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	899b      	ldrh	r3, [r3, #12]
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006abc:	4413      	add	r3, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6938      	ldr	r0, [r7, #16]
 8006ac2:	f7ff fe97 	bl	80067f4 <move_window>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11d      	bne.n	8006b08 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	8992      	ldrh	r2, [r2, #12]
 8006ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ade:	fb00 f202 	mul.w	r2, r0, r2
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fbec 	bl	80062c4 <ld_dword>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006af2:	617b      	str	r3, [r7, #20]
			break;
 8006af4:	e009      	b.n	8006b0a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e006      	b.n	8006b0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006afc:	bf00      	nop
 8006afe:	e004      	b.n	8006b0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b00:	bf00      	nop
 8006b02:	e002      	b.n	8006b0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b08:	bf00      	nop
		}
	}

	return val;
 8006b0a:	697b      	ldr	r3, [r7, #20]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b089      	sub	sp, #36	@ 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006b20:	2302      	movs	r3, #2
 8006b22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	f240 8109 	bls.w	8006d3e <put_fat+0x22a>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	f080 8103 	bcs.w	8006d3e <put_fat+0x22a>
		switch (fs->fs_type) {
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	f000 80b6 	beq.w	8006cae <put_fat+0x19a>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	f300 80fb 	bgt.w	8006d3e <put_fat+0x22a>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <put_fat+0x40>
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f000 8083 	beq.w	8006c58 <put_fat+0x144>
 8006b52:	e0f4      	b.n	8006d3e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4413      	add	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	899b      	ldrh	r3, [r3, #12]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	4413      	add	r3, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fe3c 	bl	80067f4 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 80d4 	bne.w	8006d30 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	61ba      	str	r2, [r7, #24]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	8992      	ldrh	r2, [r2, #12]
 8006b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b9c:	fb00 f202 	mul.w	r2, r0, r2
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00d      	beq.n	8006bcc <put_fat+0xb8>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	b25a      	sxtb	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	b25b      	sxtb	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b25b      	sxtb	r3, r3
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e001      	b.n	8006bd0 <put_fat+0xbc>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	899b      	ldrh	r3, [r3, #12]
 8006be2:	4619      	mov	r1, r3
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bea:	4413      	add	r3, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fe00 	bl	80067f4 <move_window>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bf8:	7ffb      	ldrb	r3, [r7, #31]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 809a 	bne.w	8006d34 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	899b      	ldrh	r3, [r3, #12]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c12:	fb00 f202 	mul.w	r2, r0, r2
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	440b      	add	r3, r1
 8006c1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <put_fat+0x11a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	091b      	lsrs	r3, r3, #4
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	e00e      	b.n	8006c4c <put_fat+0x138>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	f023 030f 	bic.w	r3, r3, #15
 8006c38:	b25a      	sxtb	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	70da      	strb	r2, [r3, #3]
			break;
 8006c56:	e072      	b.n	8006d3e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	899b      	ldrh	r3, [r3, #12]
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c6c:	4413      	add	r3, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fdbf 	bl	80067f4 <move_window>
 8006c76:	4603      	mov	r3, r0
 8006c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c7a:	7ffb      	ldrb	r3, [r7, #31]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d15b      	bne.n	8006d38 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	8992      	ldrh	r2, [r2, #12]
 8006c8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c92:	fb00 f202 	mul.w	r2, r0, r2
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	440b      	add	r3, r1
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fb32 	bl	800630a <st_word>
			fs->wflag = 1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	70da      	strb	r2, [r3, #3]
			break;
 8006cac:	e047      	b.n	8006d3e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	899b      	ldrh	r3, [r3, #12]
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fd94 	bl	80067f4 <move_window>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cd0:	7ffb      	ldrb	r3, [r7, #31]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d132      	bne.n	8006d3c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	8992      	ldrh	r2, [r2, #12]
 8006cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cee:	fb00 f202 	mul.w	r2, r0, r2
 8006cf2:	1a9b      	subs	r3, r3, r2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fae4 	bl	80062c4 <ld_dword>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d02:	4323      	orrs	r3, r4
 8006d04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	8992      	ldrh	r2, [r2, #12]
 8006d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d18:	fb00 f202 	mul.w	r2, r0, r2
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	440b      	add	r3, r1
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff fb0c 	bl	8006340 <st_dword>
			fs->wflag = 1;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	70da      	strb	r2, [r3, #3]
			break;
 8006d2e:	e006      	b.n	8006d3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d3c:	bf00      	nop
		}
	}
	return res;
 8006d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3724      	adds	r7, #36	@ 0x24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d904      	bls.n	8006d6e <remove_chain+0x26>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d301      	bcc.n	8006d72 <remove_chain+0x2a>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e04b      	b.n	8006e0a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	69b8      	ldr	r0, [r7, #24]
 8006d80:	f7ff fec8 	bl	8006b14 <put_fat>
 8006d84:	4603      	mov	r3, r0
 8006d86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006d88:	7ffb      	ldrb	r3, [r7, #31]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <remove_chain+0x4a>
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
 8006d90:	e03b      	b.n	8006e0a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fdea 	bl	800696e <get_fat>
 8006d9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d031      	beq.n	8006e06 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <remove_chain+0x64>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e02e      	b.n	8006e0a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d101      	bne.n	8006db8 <remove_chain+0x70>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e028      	b.n	8006e0a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006db8:	2200      	movs	r2, #0
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	69b8      	ldr	r0, [r7, #24]
 8006dbe:	f7ff fea9 	bl	8006b14 <put_fat>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006dc6:	7ffb      	ldrb	r3, [r7, #31]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <remove_chain+0x88>
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
 8006dce:	e01c      	b.n	8006e0a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	3b02      	subs	r3, #2
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d20b      	bcs.n	8006df6 <remove_chain+0xae>
			fs->free_clst++;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	791b      	ldrb	r3, [r3, #4]
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d3c6      	bcc.n	8006d92 <remove_chain+0x4a>
 8006e04:	e000      	b.n	8006e08 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006e06:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b088      	sub	sp, #32
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <create_chain+0x2c>
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d31b      	bcc.n	8006e76 <create_chain+0x64>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e018      	b.n	8006e76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff fd91 	bl	800696e <get_fat>
 8006e4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d801      	bhi.n	8006e58 <create_chain+0x46>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e070      	b.n	8006f3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d101      	bne.n	8006e64 <create_chain+0x52>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	e06a      	b.n	8006f3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d201      	bcs.n	8006e72 <create_chain+0x60>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	e063      	b.n	8006f3a <create_chain+0x128>
		scl = clst;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d307      	bcc.n	8006e9a <create_chain+0x88>
				ncl = 2;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d901      	bls.n	8006e9a <create_chain+0x88>
 8006e96:	2300      	movs	r3, #0
 8006e98:	e04f      	b.n	8006f3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fd66 	bl	800696e <get_fat>
 8006ea2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d003      	beq.n	8006eb8 <create_chain+0xa6>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d101      	bne.n	8006ebc <create_chain+0xaa>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e03e      	b.n	8006f3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d1da      	bne.n	8006e7a <create_chain+0x68>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e038      	b.n	8006f3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006ec8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	6938      	ldr	r0, [r7, #16]
 8006ed2:	f7ff fe1f 	bl	8006b14 <put_fat>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <create_chain+0xe2>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d006      	beq.n	8006ef4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f7ff fe12 	bl	8006b14 <put_fat>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d116      	bne.n	8006f28 <create_chain+0x116>
		fs->last_clst = ncl;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	3b02      	subs	r3, #2
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d804      	bhi.n	8006f18 <create_chain+0x106>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	1e5a      	subs	r2, r3, #1
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	791b      	ldrb	r3, [r3, #4]
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	711a      	strb	r2, [r3, #4]
 8006f26:	e007      	b.n	8006f38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <create_chain+0x122>
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f32:	e000      	b.n	8006f36 <create_chain+0x124>
 8006f34:	2301      	movs	r3, #1
 8006f36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f38:	69fb      	ldr	r3, [r7, #28]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	3304      	adds	r3, #4
 8006f58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	899b      	ldrh	r3, [r3, #12]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	8952      	ldrh	r2, [r2, #10]
 8006f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	613a      	str	r2, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <clmt_clust+0x42>
 8006f80:	2300      	movs	r3, #0
 8006f82:	e010      	b.n	8006fa6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d307      	bcc.n	8006f9c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3304      	adds	r3, #4
 8006f98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f9a:	e7e9      	b.n	8006f70 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006f9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	4413      	add	r3, r2
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b086      	sub	sp, #24
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fc8:	d204      	bcs.n	8006fd4 <dir_sdi+0x22>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e071      	b.n	80070bc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <dir_sdi+0x46>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d902      	bls.n	8006ff8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	8912      	ldrh	r2, [r2, #8]
 8007006:	4293      	cmp	r3, r2
 8007008:	d301      	bcc.n	800700e <dir_sdi+0x5c>
 800700a:	2302      	movs	r3, #2
 800700c:	e056      	b.n	80070bc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	61da      	str	r2, [r3, #28]
 8007016:	e02d      	b.n	8007074 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	895b      	ldrh	r3, [r3, #10]
 800701c:	461a      	mov	r2, r3
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	899b      	ldrh	r3, [r3, #12]
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007028:	e019      	b.n	800705e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6979      	ldr	r1, [r7, #20]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fc9d 	bl	800696e <get_fat>
 8007034:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d101      	bne.n	8007042 <dir_sdi+0x90>
 800703e:	2301      	movs	r3, #1
 8007040:	e03c      	b.n	80070bc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d904      	bls.n	8007052 <dir_sdi+0xa0>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d301      	bcc.n	8007056 <dir_sdi+0xa4>
 8007052:	2302      	movs	r3, #2
 8007054:	e032      	b.n	80070bc <dir_sdi+0x10a>
			ofs -= csz;
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d2e1      	bcs.n	800702a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	6938      	ldr	r0, [r7, #16]
 800706a:	f7ff fc61 	bl	8006930 <clust2sect>
 800706e:	4602      	mov	r2, r0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <dir_sdi+0xd4>
 8007082:	2302      	movs	r3, #2
 8007084:	e01a      	b.n	80070bc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	899b      	ldrh	r3, [r3, #12]
 800708e:	4619      	mov	r1, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	fbb3 f3f1 	udiv	r3, r3, r1
 8007096:	441a      	add	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	899b      	ldrh	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80070ae:	fb00 f202 	mul.w	r2, r0, r2
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	18ca      	adds	r2, r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	3320      	adds	r3, #32
 80070da:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <dir_next+0x28>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ea:	d301      	bcc.n	80070f0 <dir_next+0x2c>
 80070ec:	2304      	movs	r3, #4
 80070ee:	e0bb      	b.n	8007268 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	899b      	ldrh	r3, [r3, #12]
 80070f4:	461a      	mov	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fc:	fb01 f202 	mul.w	r2, r1, r2
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 809d 	bne.w	8007242 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	8912      	ldrh	r2, [r2, #8]
 8007122:	4293      	cmp	r3, r2
 8007124:	f0c0 808d 	bcc.w	8007242 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	61da      	str	r2, [r3, #28]
 800712e:	2304      	movs	r3, #4
 8007130:	e09a      	b.n	8007268 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	899b      	ldrh	r3, [r3, #12]
 8007136:	461a      	mov	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	fbb3 f3f2 	udiv	r3, r3, r2
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	8952      	ldrh	r2, [r2, #10]
 8007142:	3a01      	subs	r2, #1
 8007144:	4013      	ands	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d17b      	bne.n	8007242 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7ff fc0b 	bl	800696e <get_fat>
 8007158:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d801      	bhi.n	8007164 <dir_next+0xa0>
 8007160:	2302      	movs	r3, #2
 8007162:	e081      	b.n	8007268 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d101      	bne.n	8007170 <dir_next+0xac>
 800716c:	2301      	movs	r3, #1
 800716e:	e07b      	b.n	8007268 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d359      	bcc.n	800722e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	61da      	str	r2, [r3, #28]
 8007186:	2304      	movs	r3, #4
 8007188:	e06e      	b.n	8007268 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7ff fe3d 	bl	8006e12 <create_chain>
 8007198:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <dir_next+0xe0>
 80071a0:	2307      	movs	r3, #7
 80071a2:	e061      	b.n	8007268 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <dir_next+0xea>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e05c      	b.n	8007268 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d101      	bne.n	80071ba <dir_next+0xf6>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e056      	b.n	8007268 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fad6 	bl	800676c <sync_window>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <dir_next+0x106>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e04e      	b.n	8007268 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	899b      	ldrh	r3, [r3, #12]
 80071d4:	461a      	mov	r2, r3
 80071d6:	2100      	movs	r1, #0
 80071d8:	f7ff f8ff 	bl	80063da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	6979      	ldr	r1, [r7, #20]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff fba4 	bl	8006930 <clust2sect>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80071ee:	e012      	b.n	8007216 <dir_next+0x152>
						fs->wflag = 1;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fab8 	bl	800676c <sync_window>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <dir_next+0x142>
 8007202:	2301      	movs	r3, #1
 8007204:	e030      	b.n	8007268 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	635a      	str	r2, [r3, #52]	@ 0x34
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	895b      	ldrh	r3, [r3, #10]
 800721a:	461a      	mov	r2, r3
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4293      	cmp	r3, r2
 8007220:	d3e6      	bcc.n	80071f0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007234:	6979      	ldr	r1, [r7, #20]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fb7a 	bl	8006930 <clust2sect>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	899b      	ldrh	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	fbb3 f0f2 	udiv	r0, r3, r2
 800725a:	fb00 f202 	mul.w	r2, r0, r2
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	18ca      	adds	r2, r1, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe95 	bl	8006fb2 <dir_sdi>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12b      	bne.n	80072ea <dir_alloc+0x7a>
		n = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff faa9 	bl	80067f4 <move_window>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11d      	bne.n	80072e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2be5      	cmp	r3, #229	@ 0xe5
 80072b4:	d004      	beq.n	80072c0 <dir_alloc+0x50>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d107      	bne.n	80072d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3301      	adds	r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d102      	bne.n	80072d4 <dir_alloc+0x64>
 80072ce:	e00c      	b.n	80072ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fef4 	bl	80070c4 <dir_next>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0d7      	beq.n	8007296 <dir_alloc+0x26>
 80072e6:	e000      	b.n	80072ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80072e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d101      	bne.n	80072f4 <dir_alloc+0x84>
 80072f0:	2307      	movs	r3, #7
 80072f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	331a      	adds	r3, #26
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe ffc1 	bl	8006294 <ld_word>
 8007312:	4603      	mov	r3, r0
 8007314:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d109      	bne.n	8007332 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	3314      	adds	r3, #20
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe ffb6 	bl	8006294 <ld_word>
 8007328:	4603      	mov	r3, r0
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	331a      	adds	r3, #26
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	b292      	uxth	r2, r2
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe ffd9 	bl	800630a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d109      	bne.n	8007374 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f103 0214 	add.w	r2, r3, #20
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7fe ffcb 	bl	800630a <st_word>
	}
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	331a      	adds	r3, #26
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe ff82 	bl	8006294 <ld_word>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <cmp_lfn+0x1e>
 8007396:	2300      	movs	r3, #0
 8007398:	e059      	b.n	800744e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	4613      	mov	r3, r2
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80073b0:	2301      	movs	r3, #1
 80073b2:	81fb      	strh	r3, [r7, #14]
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	e033      	b.n	8007422 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80073ba:	4a27      	ldr	r2, [pc, #156]	@ (8007458 <cmp_lfn+0xdc>)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	4413      	add	r3, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe ff63 	bl	8006294 <ld_word>
 80073ce:	4603      	mov	r3, r0
 80073d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80073d2:	89fb      	ldrh	r3, [r7, #14]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2bfe      	cmp	r3, #254	@ 0xfe
 80073dc:	d812      	bhi.n	8007404 <cmp_lfn+0x88>
 80073de:	89bb      	ldrh	r3, [r7, #12]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f002 f85f 	bl	80094a4 <ff_wtoupper>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461c      	mov	r4, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	617a      	str	r2, [r7, #20]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f002 f853 	bl	80094a4 <ff_wtoupper>
 80073fe:	4603      	mov	r3, r0
 8007400:	429c      	cmp	r4, r3
 8007402:	d001      	beq.n	8007408 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007404:	2300      	movs	r3, #0
 8007406:	e022      	b.n	800744e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007408:	89bb      	ldrh	r3, [r7, #12]
 800740a:	81fb      	strh	r3, [r7, #14]
 800740c:	e006      	b.n	800741c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800740e:	89bb      	ldrh	r3, [r7, #12]
 8007410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007414:	4293      	cmp	r3, r2
 8007416:	d001      	beq.n	800741c <cmp_lfn+0xa0>
 8007418:	2300      	movs	r3, #0
 800741a:	e018      	b.n	800744e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d9c8      	bls.n	80073ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <cmp_lfn+0xd0>
 8007434:	89fb      	ldrh	r3, [r7, #14]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <cmp_lfn+0xd0>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <cmp_lfn+0xd0>
 8007448:	2300      	movs	r3, #0
 800744a:	e000      	b.n	800744e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800744c:	2301      	movs	r3, #1
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd90      	pop	{r4, r7, pc}
 8007456:	bf00      	nop
 8007458:	0800c71c 	.word	0x0800c71c

0800745c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4611      	mov	r1, r2
 8007468:	461a      	mov	r2, r3
 800746a:	460b      	mov	r3, r1
 800746c:	71fb      	strb	r3, [r7, #7]
 800746e:	4613      	mov	r3, r2
 8007470:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	330d      	adds	r3, #13
 8007476:	79ba      	ldrb	r2, [r7, #6]
 8007478:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	330b      	adds	r3, #11
 800747e:	220f      	movs	r2, #15
 8007480:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	330c      	adds	r3, #12
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	331a      	adds	r3, #26
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe ff3a 	bl	800630a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	1e5a      	subs	r2, r3, #1
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	82fb      	strh	r3, [r7, #22]
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80074ae:	8afb      	ldrh	r3, [r7, #22]
 80074b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <put_lfn+0x6c>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	61fa      	str	r2, [r7, #28]
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80074c8:	4a17      	ldr	r2, [pc, #92]	@ (8007528 <put_lfn+0xcc>)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	4413      	add	r3, r2
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4413      	add	r3, r2
 80074d6:	8afa      	ldrh	r2, [r7, #22]
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe ff15 	bl	800630a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80074e0:	8afb      	ldrh	r3, [r7, #22]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <put_lfn+0x90>
 80074e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b0c      	cmp	r3, #12
 80074f6:	d9da      	bls.n	80074ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80074f8:	8afb      	ldrh	r3, [r7, #22]
 80074fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074fe:	4293      	cmp	r3, r2
 8007500:	d006      	beq.n	8007510 <put_lfn+0xb4>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <put_lfn+0xbc>
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007516:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	79fa      	ldrb	r2, [r7, #7]
 800751c:	701a      	strb	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	0800c71c 	.word	0x0800c71c

0800752c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08c      	sub	sp, #48	@ 0x30
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800753a:	220b      	movs	r2, #11
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7fe ff2a 	bl	8006398 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b05      	cmp	r3, #5
 8007548:	d92b      	bls.n	80075a2 <gen_numname+0x76>
		sr = seq;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800754e:	e022      	b.n	8007596 <gen_numname+0x6a>
			wc = *lfn++;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	1c9a      	adds	r2, r3, #2
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800755a:	2300      	movs	r3, #0
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800755e:	e017      	b.n	8007590 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	005a      	lsls	r2, r3, #1
 8007564:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800756e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <gen_numname+0x5e>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007584:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007588:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	3301      	adds	r3, #1
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	2b0f      	cmp	r3, #15
 8007594:	d9e4      	bls.n	8007560 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1d8      	bne.n	8007550 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80075a2:	2307      	movs	r3, #7
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3330      	adds	r3, #48	@ 0x30
 80075b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80075b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075ba:	2b39      	cmp	r3, #57	@ 0x39
 80075bc:	d904      	bls.n	80075c8 <gen_numname+0x9c>
 80075be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075c2:	3307      	adds	r3, #7
 80075c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80075c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ca:	1e5a      	subs	r2, r3, #1
 80075cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80075ce:	3330      	adds	r3, #48	@ 0x30
 80075d0:	443b      	add	r3, r7
 80075d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80075d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	603b      	str	r3, [r7, #0]
	} while (seq);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1df      	bne.n	80075a6 <gen_numname+0x7a>
	ns[i] = '~';
 80075e6:	f107 0214 	add.w	r2, r7, #20
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	4413      	add	r3, r2
 80075ee:	227e      	movs	r2, #126	@ 0x7e
 80075f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f6:	e002      	b.n	80075fe <gen_numname+0xd2>
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	3301      	adds	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	429a      	cmp	r2, r3
 8007604:	d205      	bcs.n	8007612 <gen_numname+0xe6>
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	4413      	add	r3, r2
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b20      	cmp	r3, #32
 8007610:	d1f2      	bne.n	80075f8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	2b07      	cmp	r3, #7
 8007616:	d807      	bhi.n	8007628 <gen_numname+0xfc>
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800761e:	3330      	adds	r3, #48	@ 0x30
 8007620:	443b      	add	r3, r7
 8007622:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007626:	e000      	b.n	800762a <gen_numname+0xfe>
 8007628:	2120      	movs	r1, #32
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	460a      	mov	r2, r1
 8007636:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	2b07      	cmp	r3, #7
 800763c:	d9e9      	bls.n	8007612 <gen_numname+0xe6>
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	3730      	adds	r7, #48	@ 0x30
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007654:	230b      	movs	r3, #11
 8007656:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	0852      	lsrs	r2, r2, #1
 800765e:	01db      	lsls	r3, r3, #7
 8007660:	4313      	orrs	r3, r2
 8007662:	b2da      	uxtb	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	6079      	str	r1, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	4413      	add	r3, r2
 800766e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1ed      	bne.n	8007658 <sum_sfn+0x10>
	return sum;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007698:	2100      	movs	r1, #0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fc89 	bl	8006fb2 <dir_sdi>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <dir_find+0x24>
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	e0a9      	b.n	8007802 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80076ae:	23ff      	movs	r3, #255	@ 0xff
 80076b0:	753b      	strb	r3, [r7, #20]
 80076b2:	7d3b      	ldrb	r3, [r7, #20]
 80076b4:	757b      	strb	r3, [r7, #21]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6938      	ldr	r0, [r7, #16]
 80076c6:	f7ff f895 	bl	80067f4 <move_window>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8090 	bne.w	80077f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076de:	7dbb      	ldrb	r3, [r7, #22]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <dir_find+0x60>
 80076e4:	2304      	movs	r3, #4
 80076e6:	75fb      	strb	r3, [r7, #23]
 80076e8:	e08a      	b.n	8007800 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	330b      	adds	r3, #11
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7bfa      	ldrb	r2, [r7, #15]
 80076fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80076fe:	7dbb      	ldrb	r3, [r7, #22]
 8007700:	2be5      	cmp	r3, #229	@ 0xe5
 8007702:	d007      	beq.n	8007714 <dir_find+0x8a>
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <dir_find+0x98>
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b0f      	cmp	r3, #15
 8007712:	d006      	beq.n	8007722 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007714:	23ff      	movs	r3, #255	@ 0xff
 8007716:	757b      	strb	r3, [r7, #21]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007720:	e05e      	b.n	80077e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b0f      	cmp	r3, #15
 8007726:	d136      	bne.n	8007796 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d154      	bne.n	80077e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007736:	7dbb      	ldrb	r3, [r7, #22]
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	7b5b      	ldrb	r3, [r3, #13]
 8007746:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007748:	7dbb      	ldrb	r3, [r7, #22]
 800774a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774e:	75bb      	strb	r3, [r7, #22]
 8007750:	7dbb      	ldrb	r3, [r7, #22]
 8007752:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800775c:	7dba      	ldrb	r2, [r7, #22]
 800775e:	7d7b      	ldrb	r3, [r7, #21]
 8007760:	429a      	cmp	r2, r3
 8007762:	d115      	bne.n	8007790 <dir_find+0x106>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	330d      	adds	r3, #13
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	7d3a      	ldrb	r2, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d10e      	bne.n	8007790 <dir_find+0x106>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7ff fdfd 	bl	800737c <cmp_lfn>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <dir_find+0x106>
 8007788:	7d7b      	ldrb	r3, [r7, #21]
 800778a:	3b01      	subs	r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e000      	b.n	8007792 <dir_find+0x108>
 8007790:	23ff      	movs	r3, #255	@ 0xff
 8007792:	757b      	strb	r3, [r7, #21]
 8007794:	e024      	b.n	80077e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007796:	7d7b      	ldrb	r3, [r7, #21]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <dir_find+0x126>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ff51 	bl	8007648 <sum_sfn>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	7d3b      	ldrb	r3, [r7, #20]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d024      	beq.n	80077fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <dir_find+0x14a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a18      	ldr	r0, [r3, #32]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3324      	adds	r3, #36	@ 0x24
 80077c6:	220b      	movs	r2, #11
 80077c8:	4619      	mov	r1, r3
 80077ca:	f7fe fe21 	bl	8006410 <mem_cmp>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d014      	beq.n	80077fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077d4:	23ff      	movs	r3, #255	@ 0xff
 80077d6:	757b      	strb	r3, [r7, #21]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f04f 32ff 	mov.w	r2, #4294967295
 80077de:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fc6e 	bl	80070c4 <dir_next>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f43f af65 	beq.w	80076be <dir_find+0x34>
 80077f4:	e004      	b.n	8007800 <dir_find+0x176>
		if (res != FR_OK) break;
 80077f6:	bf00      	nop
 80077f8:	e002      	b.n	8007800 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80077fa:	bf00      	nop
 80077fc:	e000      	b.n	8007800 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80077fe:	bf00      	nop

	return res;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	@ 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007820:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <dir_register+0x20>
 8007828:	2306      	movs	r3, #6
 800782a:	e0e0      	b.n	80079ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800782c:	2300      	movs	r3, #0
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007830:	e002      	b.n	8007838 <dir_register+0x2c>
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	3301      	adds	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f4      	bne.n	8007832 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	220c      	movs	r2, #12
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fd9f 	bl	8006398 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d032      	beq.n	80078ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2240      	movs	r2, #64	@ 0x40
 8007868:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800786c:	2301      	movs	r3, #1
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007870:	e016      	b.n	80078a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	f107 010c 	add.w	r1, r7, #12
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	f7ff fe53 	bl	800752c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff feff 	bl	800768a <dir_find>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	3301      	adds	r3, #1
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	2b63      	cmp	r3, #99	@ 0x63
 80078a4:	d9e5      	bls.n	8007872 <dir_register+0x66>
 80078a6:	e000      	b.n	80078aa <dir_register+0x9e>
			if (res != FR_OK) break;
 80078a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2b64      	cmp	r3, #100	@ 0x64
 80078ae:	d101      	bne.n	80078b4 <dir_register+0xa8>
 80078b0:	2307      	movs	r3, #7
 80078b2:	e09c      	b.n	80079ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80078b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d002      	beq.n	80078c2 <dir_register+0xb6>
 80078bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078c0:	e095      	b.n	80079ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80078c2:	7dfa      	ldrb	r2, [r7, #23]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <dir_register+0xd8>
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	330c      	adds	r3, #12
 80078d8:	4a47      	ldr	r2, [pc, #284]	@ (80079f8 <dir_register+0x1ec>)
 80078da:	fba2 2303 	umull	r2, r3, r2, r3
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	3301      	adds	r3, #1
 80078e2:	e000      	b.n	80078e6 <dir_register+0xda>
 80078e4:	2301      	movs	r3, #1
 80078e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80078e8:	6a39      	ldr	r1, [r7, #32]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fcc0 	bl	8007270 <dir_alloc>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80078f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d148      	bne.n	8007990 <dir_register+0x184>
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	3b01      	subs	r3, #1
 8007902:	623b      	str	r3, [r7, #32]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d042      	beq.n	8007990 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	015b      	lsls	r3, r3, #5
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fb4b 	bl	8006fb2 <dir_sdi>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007926:	2b00      	cmp	r3, #0
 8007928:	d132      	bne.n	8007990 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3324      	adds	r3, #36	@ 0x24
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fe8a 	bl	8007648 <sum_sfn>
 8007934:	4603      	mov	r3, r0
 8007936:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	4619      	mov	r1, r3
 800793e:	69f8      	ldr	r0, [r7, #28]
 8007940:	f7fe ff58 	bl	80067f4 <move_window>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800794a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11d      	bne.n	800798e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	6918      	ldr	r0, [r3, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a19      	ldr	r1, [r3, #32]
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	b2da      	uxtb	r2, r3
 800795e:	7efb      	ldrb	r3, [r7, #27]
 8007960:	f7ff fd7c 	bl	800745c <put_lfn>
				fs->wflag = 1;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2201      	movs	r2, #1
 8007968:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff fba9 	bl	80070c4 <dir_next>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800797c:	2b00      	cmp	r3, #0
 800797e:	d107      	bne.n	8007990 <dir_register+0x184>
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	3b01      	subs	r3, #1
 8007984:	623b      	str	r3, [r7, #32]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1d5      	bne.n	8007938 <dir_register+0x12c>
 800798c:	e000      	b.n	8007990 <dir_register+0x184>
				if (res != FR_OK) break;
 800798e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007994:	2b00      	cmp	r3, #0
 8007996:	d128      	bne.n	80079ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	4619      	mov	r1, r3
 800799e:	69f8      	ldr	r0, [r7, #28]
 80079a0:	f7fe ff28 	bl	80067f4 <move_window>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80079aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d11b      	bne.n	80079ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	2220      	movs	r2, #32
 80079b8:	2100      	movs	r1, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fd0d 	bl	80063da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a18      	ldr	r0, [r3, #32]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3324      	adds	r3, #36	@ 0x24
 80079c8:	220b      	movs	r2, #11
 80079ca:	4619      	mov	r1, r3
 80079cc:	f7fe fce4 	bl	8006398 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	330c      	adds	r3, #12
 80079dc:	f002 0218 	and.w	r2, r2, #24
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2201      	movs	r2, #1
 80079e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80079ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3730      	adds	r7, #48	@ 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	4ec4ec4f 	.word	0x4ec4ec4f

080079fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	@ 0x28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	61ba      	str	r2, [r7, #24]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4413      	add	r3, r2
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a2c:	2b1f      	cmp	r3, #31
 8007a2e:	d940      	bls.n	8007ab2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007a30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a32:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a34:	d006      	beq.n	8007a44 <create_name+0x48>
 8007a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a38:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a3a:	d110      	bne.n	8007a5e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a3c:	e002      	b.n	8007a44 <create_name+0x48>
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	4413      	add	r3, r2
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a4e:	d0f6      	beq.n	8007a3e <create_name+0x42>
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	4413      	add	r3, r2
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a5a:	d0f0      	beq.n	8007a3e <create_name+0x42>
			break;
 8007a5c:	e02a      	b.n	8007ab4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a62:	d901      	bls.n	8007a68 <create_name+0x6c>
 8007a64:	2306      	movs	r3, #6
 8007a66:	e17d      	b.n	8007d64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007a68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a70:	2101      	movs	r1, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 fcda 	bl	800942c <ff_convert>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007a7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <create_name+0x8a>
 8007a82:	2306      	movs	r3, #6
 8007a84:	e16e      	b.n	8007d64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a8a:	d809      	bhi.n	8007aa0 <create_name+0xa4>
 8007a8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a8e:	4619      	mov	r1, r3
 8007a90:	488d      	ldr	r0, [pc, #564]	@ (8007cc8 <create_name+0x2cc>)
 8007a92:	f7fe fce4 	bl	800645e <chk_chr>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <create_name+0xa4>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	e161      	b.n	8007d64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	617a      	str	r2, [r7, #20]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007aae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007ab0:	e7b4      	b.n	8007a1c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007ab2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	441a      	add	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ac0:	2b1f      	cmp	r3, #31
 8007ac2:	d801      	bhi.n	8007ac8 <create_name+0xcc>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	e000      	b.n	8007aca <create_name+0xce>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007ace:	e011      	b.n	8007af4 <create_name+0xf8>
		w = lfn[di - 1];
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007ae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d002      	beq.n	8007aee <create_name+0xf2>
 8007ae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8007aec:	d106      	bne.n	8007afc <create_name+0x100>
		di--;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ea      	bne.n	8007ad0 <create_name+0xd4>
 8007afa:	e000      	b.n	8007afe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007afc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <create_name+0x118>
 8007b10:	2306      	movs	r3, #6
 8007b12:	e127      	b.n	8007d64 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3324      	adds	r3, #36	@ 0x24
 8007b18:	220b      	movs	r2, #11
 8007b1a:	2120      	movs	r1, #32
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fc5c 	bl	80063da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007b22:	2300      	movs	r3, #0
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e002      	b.n	8007b2e <create_name+0x132>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d0f5      	beq.n	8007b28 <create_name+0x12c>
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b48:	d0ee      	beq.n	8007b28 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <create_name+0x168>
 8007b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b54:	f043 0303 	orr.w	r3, r3, #3
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007b5c:	e002      	b.n	8007b64 <create_name+0x168>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <create_name+0x182>
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007b70:	3b01      	subs	r3, #1
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b7c:	d1ef      	bne.n	8007b5e <create_name+0x162>

	i = b = 0; ni = 8;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b84:	2300      	movs	r3, #0
 8007b86:	623b      	str	r3, [r7, #32]
 8007b88:	2308      	movs	r3, #8
 8007b8a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	61ba      	str	r2, [r7, #24]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8090 	beq.w	8007cc4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d006      	beq.n	8007bb8 <create_name+0x1bc>
 8007baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bae:	d10a      	bne.n	8007bc6 <create_name+0x1ca>
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d006      	beq.n	8007bc6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	f043 0303 	orr.w	r3, r3, #3
 8007bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007bc4:	e07d      	b.n	8007cc2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007bc6:	6a3a      	ldr	r2, [r7, #32]
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d203      	bcs.n	8007bd6 <create_name+0x1da>
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d123      	bne.n	8007c1e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b0b      	cmp	r3, #11
 8007bda:	d106      	bne.n	8007bea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007be0:	f043 0303 	orr.w	r3, r3, #3
 8007be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007be8:	e075      	b.n	8007cd6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d005      	beq.n	8007bfe <create_name+0x202>
 8007bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bf6:	f043 0303 	orr.w	r3, r3, #3
 8007bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d866      	bhi.n	8007cd4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	623b      	str	r3, [r7, #32]
 8007c0e:	230b      	movs	r3, #11
 8007c10:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007c12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c1c:	e051      	b.n	8007cc2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c22:	d914      	bls.n	8007c4e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 fbff 	bl	800942c <ff_convert>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <create_name+0x246>
 8007c38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c3a:	3b80      	subs	r3, #128	@ 0x80
 8007c3c:	4a23      	ldr	r2, [pc, #140]	@ (8007ccc <create_name+0x2d0>)
 8007c3e:	5cd3      	ldrb	r3, [r2, r3]
 8007c40:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <create_name+0x268>
 8007c54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c56:	4619      	mov	r1, r3
 8007c58:	481d      	ldr	r0, [pc, #116]	@ (8007cd0 <create_name+0x2d4>)
 8007c5a:	f7fe fc00 	bl	800645e <chk_chr>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007c64:	235f      	movs	r3, #95	@ 0x5f
 8007c66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c6c:	f043 0303 	orr.w	r3, r3, #3
 8007c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c74:	e01b      	b.n	8007cae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c78:	2b40      	cmp	r3, #64	@ 0x40
 8007c7a:	d909      	bls.n	8007c90 <create_name+0x294>
 8007c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c7e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007c80:	d806      	bhi.n	8007c90 <create_name+0x294>
					b |= 2;
 8007c82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c86:	f043 0302 	orr.w	r3, r3, #2
 8007c8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c8e:	e00e      	b.n	8007cae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007c90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c92:	2b60      	cmp	r3, #96	@ 0x60
 8007c94:	d90b      	bls.n	8007cae <create_name+0x2b2>
 8007c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c98:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c9a:	d808      	bhi.n	8007cae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007caa:	3b20      	subs	r3, #32
 8007cac:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	623a      	str	r2, [r7, #32]
 8007cb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cb6:	b2d1      	uxtb	r1, r2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	460a      	mov	r2, r1
 8007cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007cc2:	e763      	b.n	8007b8c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007cc4:	bf00      	nop
 8007cc6:	e006      	b.n	8007cd6 <create_name+0x2da>
 8007cc8:	0800c134 	.word	0x0800c134
 8007ccc:	0800c69c 	.word	0x0800c69c
 8007cd0:	0800c140 	.word	0x0800c140
			if (si > di) break;			/* No extension */
 8007cd4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007cdc:	2be5      	cmp	r3, #229	@ 0xe5
 8007cde:	d103      	bne.n	8007ce8 <create_name+0x2ec>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d104      	bne.n	8007cf8 <create_name+0x2fc>
 8007cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007cf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cfc:	f003 030c 	and.w	r3, r3, #12
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d005      	beq.n	8007d10 <create_name+0x314>
 8007d04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d105      	bne.n	8007d1c <create_name+0x320>
 8007d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d14:	f043 0302 	orr.w	r3, r3, #2
 8007d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d117      	bne.n	8007d58 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007d28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <create_name+0x344>
 8007d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d38:	f043 0310 	orr.w	r3, r3, #16
 8007d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d44:	f003 030c 	and.w	r3, r3, #12
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d105      	bne.n	8007d58 <create_name+0x35c>
 8007d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d50:	f043 0308 	orr.w	r3, r3, #8
 8007d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007d5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007d62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	@ 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d80:	e002      	b.n	8007d88 <follow_path+0x1c>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d8e:	d0f8      	beq.n	8007d82 <follow_path+0x16>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d96:	d0f4      	beq.n	8007d82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b1f      	cmp	r3, #31
 8007da4:	d80a      	bhi.n	8007dbc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2280      	movs	r2, #128	@ 0x80
 8007daa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007dae:	2100      	movs	r1, #0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff f8fe 	bl	8006fb2 <dir_sdi>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
 8007dba:	e048      	b.n	8007e4e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff fe1b 	bl	80079fc <create_name>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d139      	bne.n	8007e44 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fc5a 	bl	800768a <dir_find>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007de0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d12c      	bne.n	8007e48 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d127      	bne.n	8007e48 <follow_path+0xdc>
 8007df8:	2305      	movs	r3, #5
 8007dfa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dfc:	e024      	b.n	8007e48 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d121      	bne.n	8007e4c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	799b      	ldrb	r3, [r3, #6]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e14:	2305      	movs	r3, #5
 8007e16:	75fb      	strb	r3, [r7, #23]
 8007e18:	e019      	b.n	8007e4e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	8992      	ldrh	r2, [r2, #12]
 8007e28:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e2c:	fb00 f202 	mul.w	r2, r0, r2
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	440b      	add	r3, r1
 8007e34:	4619      	mov	r1, r3
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fa61 	bl	80072fe <ld_clust>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e42:	e7bb      	b.n	8007dbc <follow_path+0x50>
			if (res != FR_OK) break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <follow_path+0xe2>
				break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e4c:	bf00      	nop
			}
		}
	}

	return res;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295
 8007e64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d031      	beq.n	8007ed2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e002      	b.n	8007e7c <get_ldnumber+0x24>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b1f      	cmp	r3, #31
 8007e82:	d903      	bls.n	8007e8c <get_ldnumber+0x34>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e8a:	d1f4      	bne.n	8007e76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e92:	d11c      	bne.n	8007ece <get_ldnumber+0x76>
			tp = *path;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	60fa      	str	r2, [r7, #12]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	3b30      	subs	r3, #48	@ 0x30
 8007ea4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b09      	cmp	r3, #9
 8007eaa:	d80e      	bhi.n	8007eca <get_ldnumber+0x72>
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d10a      	bne.n	8007eca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d107      	bne.n	8007eca <get_ldnumber+0x72>
					vol = (int)i;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	e002      	b.n	8007ed4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ed2:	693b      	ldr	r3, [r7, #16]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	70da      	strb	r2, [r3, #3]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fe fc7a 	bl	80067f4 <move_window>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <check_fs+0x2a>
 8007f06:	2304      	movs	r3, #4
 8007f08:	e038      	b.n	8007f7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3338      	adds	r3, #56	@ 0x38
 8007f0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe f9be 	bl	8006294 <ld_word>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <check_fs+0x48>
 8007f24:	2303      	movs	r3, #3
 8007f26:	e029      	b.n	8007f7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f2e:	2be9      	cmp	r3, #233	@ 0xe9
 8007f30:	d009      	beq.n	8007f46 <check_fs+0x66>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f38:	2beb      	cmp	r3, #235	@ 0xeb
 8007f3a:	d11e      	bne.n	8007f7a <check_fs+0x9a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007f42:	2b90      	cmp	r3, #144	@ 0x90
 8007f44:	d119      	bne.n	8007f7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3338      	adds	r3, #56	@ 0x38
 8007f4a:	3336      	adds	r3, #54	@ 0x36
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe f9b9 	bl	80062c4 <ld_dword>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f58:	4a0a      	ldr	r2, [pc, #40]	@ (8007f84 <check_fs+0xa4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d101      	bne.n	8007f62 <check_fs+0x82>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e00c      	b.n	8007f7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3338      	adds	r3, #56	@ 0x38
 8007f66:	3352      	adds	r3, #82	@ 0x52
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe f9ab 	bl	80062c4 <ld_dword>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4a05      	ldr	r2, [pc, #20]	@ (8007f88 <check_fs+0xa8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d101      	bne.n	8007f7a <check_fs+0x9a>
 8007f76:	2300      	movs	r3, #0
 8007f78:	e000      	b.n	8007f7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f7a:	2302      	movs	r3, #2
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	00544146 	.word	0x00544146
 8007f88:	33544146 	.word	0x33544146

08007f8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b096      	sub	sp, #88	@ 0x58
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff ff59 	bl	8007e58 <get_ldnumber>
 8007fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da01      	bge.n	8007fb2 <find_volume+0x26>
 8007fae:	230b      	movs	r3, #11
 8007fb0:	e265      	b.n	800847e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007fb2:	4a9f      	ldr	r2, [pc, #636]	@ (8008230 <find_volume+0x2a4>)
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <find_volume+0x3a>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	e25b      	b.n	800847e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01a      	beq.n	8008012 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe f8b7 	bl	8006154 <disk_status>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10c      	bne.n	8008012 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <find_volume+0x82>
 8007ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800800a:	230a      	movs	r3, #10
 800800c:	e237      	b.n	800847e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800800e:	2300      	movs	r3, #0
 8008010:	e235      	b.n	800847e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801a:	b2da      	uxtb	r2, r3
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe f8af 	bl	8006188 <disk_initialize>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008030:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800803c:	2303      	movs	r3, #3
 800803e:	e21e      	b.n	800847e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <find_volume+0xca>
 8008046:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008052:	230a      	movs	r3, #10
 8008054:	e213      	b.n	800847e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	7858      	ldrb	r0, [r3, #1]
 800805a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805c:	330c      	adds	r3, #12
 800805e:	461a      	mov	r2, r3
 8008060:	2102      	movs	r1, #2
 8008062:	f7fe f8f9 	bl	8006258 <disk_ioctl>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <find_volume+0xe4>
 800806c:	2301      	movs	r3, #1
 800806e:	e206      	b.n	800847e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	899b      	ldrh	r3, [r3, #12]
 8008074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008078:	d80d      	bhi.n	8008096 <find_volume+0x10a>
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	899b      	ldrh	r3, [r3, #12]
 800807e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008082:	d308      	bcc.n	8008096 <find_volume+0x10a>
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	899b      	ldrh	r3, [r3, #12]
 8008088:	461a      	mov	r2, r3
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	899b      	ldrh	r3, [r3, #12]
 800808e:	3b01      	subs	r3, #1
 8008090:	4013      	ands	r3, r2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <find_volume+0x10e>
 8008096:	2301      	movs	r3, #1
 8008098:	e1f1      	b.n	800847e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800809e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080a2:	f7ff ff1d 	bl	8007ee0 <check_fs>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d149      	bne.n	8008148 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080b4:	2300      	movs	r3, #0
 80080b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80080b8:	e01e      	b.n	80080f8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80080c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80080c8:	4413      	add	r3, r2
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	3304      	adds	r3, #4
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <find_volume+0x158>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	3308      	adds	r3, #8
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe f8f2 	bl	80062c4 <ld_dword>
 80080e0:	4602      	mov	r2, r0
 80080e2:	e000      	b.n	80080e6 <find_volume+0x15a>
 80080e4:	2200      	movs	r2, #0
 80080e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	3358      	adds	r3, #88	@ 0x58
 80080ec:	443b      	add	r3, r7
 80080ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f4:	3301      	adds	r3, #1
 80080f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80080f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d9dd      	bls.n	80080ba <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80080fe:	2300      	movs	r3, #0
 8008100:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <find_volume+0x182>
 8008108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800810a:	3b01      	subs	r3, #1
 800810c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800810e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	3358      	adds	r3, #88	@ 0x58
 8008114:	443b      	add	r3, r7
 8008116:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800811a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800811c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <find_volume+0x1a2>
 8008122:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008124:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008126:	f7ff fedb 	bl	8007ee0 <check_fs>
 800812a:	4603      	mov	r3, r0
 800812c:	e000      	b.n	8008130 <find_volume+0x1a4>
 800812e:	2303      	movs	r3, #3
 8008130:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008134:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008138:	2b01      	cmp	r3, #1
 800813a:	d905      	bls.n	8008148 <find_volume+0x1bc>
 800813c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800813e:	3301      	adds	r3, #1
 8008140:	643b      	str	r3, [r7, #64]	@ 0x40
 8008142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008144:	2b03      	cmp	r3, #3
 8008146:	d9e2      	bls.n	800810e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008148:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800814c:	2b04      	cmp	r3, #4
 800814e:	d101      	bne.n	8008154 <find_volume+0x1c8>
 8008150:	2301      	movs	r3, #1
 8008152:	e194      	b.n	800847e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008154:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008158:	2b01      	cmp	r3, #1
 800815a:	d901      	bls.n	8008160 <find_volume+0x1d4>
 800815c:	230d      	movs	r3, #13
 800815e:	e18e      	b.n	800847e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	3338      	adds	r3, #56	@ 0x38
 8008164:	330b      	adds	r3, #11
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe f894 	bl	8006294 <ld_word>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	899b      	ldrh	r3, [r3, #12]
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <find_volume+0x1f0>
 8008178:	230d      	movs	r3, #13
 800817a:	e180      	b.n	800847e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	3338      	adds	r3, #56	@ 0x38
 8008180:	3316      	adds	r3, #22
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe f886 	bl	8006294 <ld_word>
 8008188:	4603      	mov	r3, r0
 800818a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <find_volume+0x214>
 8008192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008194:	3338      	adds	r3, #56	@ 0x38
 8008196:	3324      	adds	r3, #36	@ 0x24
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe f893 	bl	80062c4 <ld_dword>
 800819e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	789b      	ldrb	r3, [r3, #2]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d005      	beq.n	80081c4 <find_volume+0x238>
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	789b      	ldrb	r3, [r3, #2]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d001      	beq.n	80081c4 <find_volume+0x238>
 80081c0:	230d      	movs	r3, #13
 80081c2:	e15c      	b.n	800847e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	789b      	ldrb	r3, [r3, #2]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081cc:	fb02 f303 	mul.w	r3, r2, r3
 80081d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081d8:	461a      	mov	r2, r3
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	895b      	ldrh	r3, [r3, #10]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <find_volume+0x26c>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	895b      	ldrh	r3, [r3, #10]
 80081ea:	461a      	mov	r2, r3
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	895b      	ldrh	r3, [r3, #10]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <find_volume+0x270>
 80081f8:	230d      	movs	r3, #13
 80081fa:	e140      	b.n	800847e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	3338      	adds	r3, #56	@ 0x38
 8008200:	3311      	adds	r3, #17
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe f846 	bl	8006294 <ld_word>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	891b      	ldrh	r3, [r3, #8]
 8008214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008216:	8992      	ldrh	r2, [r2, #12]
 8008218:	0952      	lsrs	r2, r2, #5
 800821a:	b292      	uxth	r2, r2
 800821c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008220:	fb01 f202 	mul.w	r2, r1, r2
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <find_volume+0x2a8>
 800822c:	230d      	movs	r3, #13
 800822e:	e126      	b.n	800847e <find_volume+0x4f2>
 8008230:	2000042c 	.word	0x2000042c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	3338      	adds	r3, #56	@ 0x38
 8008238:	3313      	adds	r3, #19
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f82a 	bl	8006294 <ld_word>
 8008240:	4603      	mov	r3, r0
 8008242:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <find_volume+0x2cc>
 800824a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824c:	3338      	adds	r3, #56	@ 0x38
 800824e:	3320      	adds	r3, #32
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe f837 	bl	80062c4 <ld_dword>
 8008256:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825a:	3338      	adds	r3, #56	@ 0x38
 800825c:	330e      	adds	r3, #14
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe f818 	bl	8006294 <ld_word>
 8008264:	4603      	mov	r3, r0
 8008266:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008268:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <find_volume+0x2e6>
 800826e:	230d      	movs	r3, #13
 8008270:	e105      	b.n	800847e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008272:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008276:	4413      	add	r3, r2
 8008278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800827a:	8911      	ldrh	r1, [r2, #8]
 800827c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800827e:	8992      	ldrh	r2, [r2, #12]
 8008280:	0952      	lsrs	r2, r2, #5
 8008282:	b292      	uxth	r2, r2
 8008284:	fbb1 f2f2 	udiv	r2, r1, r2
 8008288:	b292      	uxth	r2, r2
 800828a:	4413      	add	r3, r2
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800828e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	429a      	cmp	r2, r3
 8008294:	d201      	bcs.n	800829a <find_volume+0x30e>
 8008296:	230d      	movs	r3, #13
 8008298:	e0f1      	b.n	800847e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800829a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082a2:	8952      	ldrh	r2, [r2, #10]
 80082a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <find_volume+0x328>
 80082b0:	230d      	movs	r3, #13
 80082b2:	e0e4      	b.n	800847e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80082b4:	2303      	movs	r3, #3
 80082b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d802      	bhi.n	80082ca <find_volume+0x33e>
 80082c4:	2302      	movs	r3, #2
 80082c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d802      	bhi.n	80082da <find_volume+0x34e>
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	1c9a      	adds	r2, r3, #2
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082e6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80082ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ec:	441a      	add	r2, r3
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80082f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	441a      	add	r2, r3
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80082fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008300:	2b03      	cmp	r3, #3
 8008302:	d11e      	bne.n	8008342 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	3338      	adds	r3, #56	@ 0x38
 8008308:	332a      	adds	r3, #42	@ 0x2a
 800830a:	4618      	mov	r0, r3
 800830c:	f7fd ffc2 	bl	8006294 <ld_word>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <find_volume+0x38e>
 8008316:	230d      	movs	r3, #13
 8008318:	e0b1      	b.n	800847e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	891b      	ldrh	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <find_volume+0x39a>
 8008322:	230d      	movs	r3, #13
 8008324:	e0ab      	b.n	800847e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	3338      	adds	r3, #56	@ 0x38
 800832a:	332c      	adds	r3, #44	@ 0x2c
 800832c:	4618      	mov	r0, r3
 800832e:	f7fd ffc9 	bl	80062c4 <ld_dword>
 8008332:	4602      	mov	r2, r0
 8008334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008336:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008340:	e01f      	b.n	8008382 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008344:	891b      	ldrh	r3, [r3, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <find_volume+0x3c2>
 800834a:	230d      	movs	r3, #13
 800834c:	e097      	b.n	800847e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008354:	441a      	add	r2, r3
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800835a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800835e:	2b02      	cmp	r3, #2
 8008360:	d103      	bne.n	800836a <find_volume+0x3de>
 8008362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	e00a      	b.n	8008380 <find_volume+0x3f4>
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	69da      	ldr	r2, [r3, #28]
 800836e:	4613      	mov	r3, r2
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	4413      	add	r3, r2
 8008374:	085a      	lsrs	r2, r3, #1
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008380:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	6a1a      	ldr	r2, [r3, #32]
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	899b      	ldrh	r3, [r3, #12]
 800838a:	4619      	mov	r1, r3
 800838c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800838e:	440b      	add	r3, r1
 8008390:	3b01      	subs	r3, #1
 8008392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008394:	8989      	ldrh	r1, [r1, #12]
 8008396:	fbb3 f3f1 	udiv	r3, r3, r1
 800839a:	429a      	cmp	r2, r3
 800839c:	d201      	bcs.n	80083a2 <find_volume+0x416>
 800839e:	230d      	movs	r3, #13
 80083a0:	e06d      	b.n	800847e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	2280      	movs	r2, #128	@ 0x80
 80083b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d149      	bne.n	8008454 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	3338      	adds	r3, #56	@ 0x38
 80083c4:	3330      	adds	r3, #48	@ 0x30
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fd ff64 	bl	8006294 <ld_word>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d140      	bne.n	8008454 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083d4:	3301      	adds	r3, #1
 80083d6:	4619      	mov	r1, r3
 80083d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083da:	f7fe fa0b 	bl	80067f4 <move_window>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d137      	bne.n	8008454 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80083e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e6:	2200      	movs	r2, #0
 80083e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	3338      	adds	r3, #56	@ 0x38
 80083ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd ff4e 	bl	8006294 <ld_word>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008400:	429a      	cmp	r2, r3
 8008402:	d127      	bne.n	8008454 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	3338      	adds	r3, #56	@ 0x38
 8008408:	4618      	mov	r0, r3
 800840a:	f7fd ff5b 	bl	80062c4 <ld_dword>
 800840e:	4603      	mov	r3, r0
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <find_volume+0x4fc>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d11e      	bne.n	8008454 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	3338      	adds	r3, #56	@ 0x38
 800841a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd ff50 	bl	80062c4 <ld_dword>
 8008424:	4603      	mov	r3, r0
 8008426:	4a19      	ldr	r2, [pc, #100]	@ (800848c <find_volume+0x500>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d113      	bne.n	8008454 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	3338      	adds	r3, #56	@ 0x38
 8008430:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008434:	4618      	mov	r0, r3
 8008436:	f7fd ff45 	bl	80062c4 <ld_dword>
 800843a:	4602      	mov	r2, r0
 800843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	3338      	adds	r3, #56	@ 0x38
 8008444:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008448:	4618      	mov	r0, r3
 800844a:	f7fd ff3b 	bl	80062c4 <ld_dword>
 800844e:	4602      	mov	r2, r0
 8008450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008452:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800845a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800845c:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <find_volume+0x504>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <find_volume+0x504>)
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <find_volume+0x504>)
 800846a:	881a      	ldrh	r2, [r3, #0]
 800846c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	4a08      	ldr	r2, [pc, #32]	@ (8008494 <find_volume+0x508>)
 8008474:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008476:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008478:	f7fe f954 	bl	8006724 <clear_lock>
#endif
	return FR_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3758      	adds	r7, #88	@ 0x58
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	41615252 	.word	0x41615252
 800848c:	61417272 	.word	0x61417272
 8008490:	20000430 	.word	0x20000430
 8008494:	20000454 	.word	0x20000454

08008498 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084a2:	2309      	movs	r3, #9
 80084a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01c      	beq.n	80084e6 <validate+0x4e>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d018      	beq.n	80084e6 <validate+0x4e>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d013      	beq.n	80084e6 <validate+0x4e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	889a      	ldrh	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	88db      	ldrh	r3, [r3, #6]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d10c      	bne.n	80084e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd fe3e 	bl	8006154 <disk_status>
 80084d8:	4603      	mov	r3, r0
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <validate+0x4e>
			res = FR_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <validate+0x5a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	e000      	b.n	80084f4 <validate+0x5c>
 80084f2:	2300      	movs	r3, #0
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	6013      	str	r3, [r2, #0]
	return res;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008516:	f107 0310 	add.w	r3, r7, #16
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fc9c 	bl	8007e58 <get_ldnumber>
 8008520:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	2b00      	cmp	r3, #0
 8008526:	da01      	bge.n	800852c <f_mount+0x28>
 8008528:	230b      	movs	r3, #11
 800852a:	e02b      	b.n	8008584 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800852c:	4a17      	ldr	r2, [pc, #92]	@ (800858c <f_mount+0x88>)
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008534:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800853c:	69b8      	ldr	r0, [r7, #24]
 800853e:	f7fe f8f1 	bl	8006724 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	490d      	ldr	r1, [pc, #52]	@ (800858c <f_mount+0x88>)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <f_mount+0x66>
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d001      	beq.n	800856e <f_mount+0x6a>
 800856a:	2300      	movs	r3, #0
 800856c:	e00a      	b.n	8008584 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800856e:	f107 010c 	add.w	r1, r7, #12
 8008572:	f107 0308 	add.w	r3, r7, #8
 8008576:	2200      	movs	r2, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fd07 	bl	8007f8c <find_volume>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008582:	7dfb      	ldrb	r3, [r7, #23]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3720      	adds	r7, #32
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	2000042c 	.word	0x2000042c

08008590 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b09a      	sub	sp, #104	@ 0x68
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <f_open+0x18>
 80085a4:	2309      	movs	r3, #9
 80085a6:	e1b7      	b.n	8008918 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085b0:	79fa      	ldrb	r2, [r7, #7]
 80085b2:	f107 0114 	add.w	r1, r7, #20
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fce6 	bl	8007f8c <find_volume>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80085c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 819b 	bne.w	8008906 <f_open+0x376>
		dj.obj.fs = fs;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	f107 0318 	add.w	r3, r7, #24
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fbc5 	bl	8007d6c <follow_path>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d118      	bne.n	8008622 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da03      	bge.n	8008602 <f_open+0x72>
				res = FR_INVALID_NAME;
 80085fa:	2306      	movs	r3, #6
 80085fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008600:	e00f      	b.n	8008622 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2b01      	cmp	r3, #1
 8008606:	bf8c      	ite	hi
 8008608:	2301      	movhi	r3, #1
 800860a:	2300      	movls	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	f107 0318 	add.w	r3, r7, #24
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fd ff3c 	bl	8006494 <chk_lock>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f003 031c 	and.w	r3, r3, #28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d07f      	beq.n	800872c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800862c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008630:	2b00      	cmp	r3, #0
 8008632:	d017      	beq.n	8008664 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008634:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008638:	2b04      	cmp	r3, #4
 800863a:	d10e      	bne.n	800865a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800863c:	f7fd ff86 	bl	800654c <enq_lock>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <f_open+0xc4>
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff f8de 	bl	800780c <dir_register>
 8008650:	4603      	mov	r3, r0
 8008652:	e000      	b.n	8008656 <f_open+0xc6>
 8008654:	2312      	movs	r3, #18
 8008656:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	f043 0308 	orr.w	r3, r3, #8
 8008660:	71fb      	strb	r3, [r7, #7]
 8008662:	e010      	b.n	8008686 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008664:	7fbb      	ldrb	r3, [r7, #30]
 8008666:	f003 0311 	and.w	r3, r3, #17
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <f_open+0xe6>
					res = FR_DENIED;
 800866e:	2307      	movs	r3, #7
 8008670:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008674:	e007      	b.n	8008686 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <f_open+0xf6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008686:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800868a:	2b00      	cmp	r3, #0
 800868c:	d168      	bne.n	8008760 <f_open+0x1d0>
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	f003 0308 	and.w	r3, r3, #8
 8008694:	2b00      	cmp	r3, #0
 8008696:	d063      	beq.n	8008760 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008698:	f7fd fcfe 	bl	8006098 <get_fattime>
 800869c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	330e      	adds	r3, #14
 80086a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fe4b 	bl	8006340 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ac:	3316      	adds	r3, #22
 80086ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fd fe45 	bl	8006340 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	330b      	adds	r3, #11
 80086ba:	2220      	movs	r2, #32
 80086bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fe1a 	bl	80072fe <ld_clust>
 80086ca:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086d0:	2200      	movs	r2, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fe32 	bl	800733c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086da:	331c      	adds	r3, #28
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fd fe2e 	bl	8006340 <st_dword>
					fs->wflag = 1;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2201      	movs	r2, #1
 80086e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d037      	beq.n	8008760 <f_open+0x1d0>
						dw = fs->winsect;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80086f6:	f107 0318 	add.w	r3, r7, #24
 80086fa:	2200      	movs	r2, #0
 80086fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fb22 	bl	8006d48 <remove_chain>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800870a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800870e:	2b00      	cmp	r3, #0
 8008710:	d126      	bne.n	8008760 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe f86c 	bl	80067f4 <move_window>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008726:	3a01      	subs	r2, #1
 8008728:	615a      	str	r2, [r3, #20]
 800872a:	e019      	b.n	8008760 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800872c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008730:	2b00      	cmp	r3, #0
 8008732:	d115      	bne.n	8008760 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008734:	7fbb      	ldrb	r3, [r7, #30]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <f_open+0x1b6>
					res = FR_NO_FILE;
 800873e:	2304      	movs	r3, #4
 8008740:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008744:	e00c      	b.n	8008760 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <f_open+0x1d0>
 8008750:	7fbb      	ldrb	r3, [r7, #30]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <f_open+0x1d0>
						res = FR_DENIED;
 800875a:	2307      	movs	r3, #7
 800875c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008760:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008764:	2b00      	cmp	r3, #0
 8008766:	d126      	bne.n	80087b6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008778:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008782:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	2b01      	cmp	r3, #1
 800878c:	bf8c      	ite	hi
 800878e:	2301      	movhi	r3, #1
 8008790:	2300      	movls	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f7fd fef7 	bl	8006590 <inc_lock>
 80087a2:	4602      	mov	r2, r0
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <f_open+0x226>
 80087b0:	2302      	movs	r3, #2
 80087b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80087b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 80a3 	bne.w	8008906 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fd99 	bl	80072fe <ld_clust>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	331c      	adds	r3, #28
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fd74 	bl	80062c4 <ld_dword>
 80087dc:	4602      	mov	r2, r0
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	88da      	ldrh	r2, [r3, #6]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	79fa      	ldrb	r2, [r7, #7]
 80087fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3330      	adds	r3, #48	@ 0x30
 8008812:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f7fd fdde 	bl	80063da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b00      	cmp	r3, #0
 8008826:	d06e      	beq.n	8008906 <f_open+0x376>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06a      	beq.n	8008906 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	895b      	ldrh	r3, [r3, #10]
 800883c:	461a      	mov	r2, r3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	fb02 f303 	mul.w	r3, r2, r3
 8008846:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008854:	e016      	b.n	8008884 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe f887 	bl	800696e <get_fat>
 8008860:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008864:	2b01      	cmp	r3, #1
 8008866:	d802      	bhi.n	800886e <f_open+0x2de>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800886e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d102      	bne.n	800887c <f_open+0x2ec>
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800887c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800887e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <f_open+0x304>
 800888c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800888e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008890:	429a      	cmp	r2, r3
 8008892:	d8e0      	bhi.n	8008856 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008898:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800889a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d131      	bne.n	8008906 <f_open+0x376>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	899b      	ldrh	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80088ae:	fb01 f202 	mul.w	r2, r1, r2
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d026      	beq.n	8008906 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe f837 	bl	8006930 <clust2sect>
 80088c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80088c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <f_open+0x342>
						res = FR_INT_ERR;
 80088ca:	2302      	movs	r3, #2
 80088cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80088d0:	e019      	b.n	8008906 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	899b      	ldrh	r3, [r3, #12]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088da:	fbb3 f2f2 	udiv	r2, r3, r2
 80088de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	7858      	ldrb	r0, [r3, #1]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	2301      	movs	r3, #1
 80088f6:	f7fd fc6f 	bl	80061d8 <disk_read>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <f_open+0x376>
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008906:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <f_open+0x384>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008914:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008918:	4618      	mov	r0, r3
 800891a:	3768      	adds	r7, #104	@ 0x68
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	@ 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f107 0214 	add.w	r2, r7, #20
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fda9 	bl	8008498 <validate>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800894c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008950:	2b00      	cmp	r3, #0
 8008952:	d107      	bne.n	8008964 <f_read+0x44>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	7d5b      	ldrb	r3, [r3, #21]
 8008958:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800895c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <f_read+0x4a>
 8008964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008968:	e135      	b.n	8008bd6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	7d1b      	ldrb	r3, [r3, #20]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <f_read+0x5a>
 8008976:	2307      	movs	r3, #7
 8008978:	e12d      	b.n	8008bd6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	429a      	cmp	r2, r3
 800898c:	f240 811e 	bls.w	8008bcc <f_read+0x2ac>
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008994:	e11a      	b.n	8008bcc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	8992      	ldrh	r2, [r2, #12]
 800899e:	fbb3 f1f2 	udiv	r1, r3, r2
 80089a2:	fb01 f202 	mul.w	r2, r1, r2
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 80d5 	bne.w	8008b58 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	8992      	ldrh	r2, [r2, #12]
 80089b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	8952      	ldrh	r2, [r2, #10]
 80089be:	3a01      	subs	r2, #1
 80089c0:	4013      	ands	r3, r2
 80089c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d12f      	bne.n	8008a2a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089d8:	e013      	b.n	8008a02 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7fe faaa 	bl	8006f42 <clmt_clust>
 80089ee:	6338      	str	r0, [r7, #48]	@ 0x30
 80089f0:	e007      	b.n	8008a02 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fd ffb7 	bl	800696e <get_fat>
 8008a00:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d804      	bhi.n	8008a12 <f_read+0xf2>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	755a      	strb	r2, [r3, #21]
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e0e1      	b.n	8008bd6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d104      	bne.n	8008a24 <f_read+0x104>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	755a      	strb	r2, [r3, #21]
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0d8      	b.n	8008bd6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fd ff7c 	bl	8006930 <clust2sect>
 8008a38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <f_read+0x12a>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2202      	movs	r2, #2
 8008a44:	755a      	strb	r2, [r3, #21]
 8008a46:	2302      	movs	r3, #2
 8008a48:	e0c5      	b.n	8008bd6 <f_read+0x2b6>
			sect += csect;
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	899b      	ldrh	r3, [r3, #12]
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d041      	beq.n	8008aea <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6a:	4413      	add	r3, r2
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	8952      	ldrh	r2, [r2, #10]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d905      	bls.n	8008a80 <f_read+0x160>
					cc = fs->csize - csect;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	895b      	ldrh	r3, [r3, #10]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	7858      	ldrb	r0, [r3, #1]
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a8a:	f7fd fba5 	bl	80061d8 <disk_read>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <f_read+0x17e>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	755a      	strb	r2, [r3, #21]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e09b      	b.n	8008bd6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da18      	bge.n	8008ada <f_read+0x1ba>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a1a      	ldr	r2, [r3, #32]
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d911      	bls.n	8008ada <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a1a      	ldr	r2, [r3, #32]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	8992      	ldrh	r2, [r2, #12]
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac8:	18d0      	adds	r0, r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	899b      	ldrh	r3, [r3, #12]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f7fd fc5f 	bl	8006398 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	899b      	ldrh	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	fb02 f303 	mul.w	r3, r2, r3
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008ae8:	e05c      	b.n	8008ba4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d02e      	beq.n	8008b52 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	7d1b      	ldrb	r3, [r3, #20]
 8008af8:	b25b      	sxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da18      	bge.n	8008b30 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	7858      	ldrb	r0, [r3, #1]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f7fd fb83 	bl	8006218 <disk_write>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <f_read+0x202>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	755a      	strb	r2, [r3, #21]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e059      	b.n	8008bd6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	7d1b      	ldrb	r3, [r3, #20]
 8008b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	7858      	ldrb	r0, [r3, #1]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	f7fd fb4b 	bl	80061d8 <disk_read>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <f_read+0x232>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	755a      	strb	r2, [r3, #21]
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e041      	b.n	8008bd6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	899b      	ldrh	r3, [r3, #12]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	8992      	ldrh	r2, [r2, #12]
 8008b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b6a:	fb01 f202 	mul.w	r2, r1, r2
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	1ac3      	subs	r3, r0, r3
 8008b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d901      	bls.n	8008b80 <f_read+0x260>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	8992      	ldrh	r2, [r2, #12]
 8008b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b92:	fb00 f202 	mul.w	r2, r0, r2
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	440b      	add	r3, r1
 8008b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ba0:	f7fd fbfa 	bl	8006398 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	4413      	add	r3, r2
 8008baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	441a      	add	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	619a      	str	r2, [r3, #24]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	441a      	add	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f47f aee1 	bne.w	8008996 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3738      	adds	r7, #56	@ 0x38
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b08c      	sub	sp, #48	@ 0x30
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f107 0210 	add.w	r2, r7, #16
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fc4a 	bl	8008498 <validate>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d107      	bne.n	8008c22 <f_write+0x44>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	7d5b      	ldrb	r3, [r3, #21]
 8008c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <f_write+0x4a>
 8008c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c26:	e16a      	b.n	8008efe <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	7d1b      	ldrb	r3, [r3, #20]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <f_write+0x5a>
 8008c34:	2307      	movs	r3, #7
 8008c36:	e162      	b.n	8008efe <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	441a      	add	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	f080 814c 	bcs.w	8008ee2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	43db      	mvns	r3, r3
 8008c50:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c52:	e146      	b.n	8008ee2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	8992      	ldrh	r2, [r2, #12]
 8008c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c60:	fb01 f202 	mul.w	r2, r1, r2
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 80f1 	bne.w	8008e4e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	8992      	ldrh	r2, [r2, #12]
 8008c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	8952      	ldrh	r2, [r2, #10]
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	4013      	ands	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d143      	bne.n	8008d10 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11a      	bne.n	8008cd2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe f8b6 	bl	8006e12 <create_chain>
 8008ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ca8:	e013      	b.n	8008cd2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7fe f942 	bl	8006f42 <clmt_clust>
 8008cbe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cc0:	e007      	b.n	8008cd2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f7fe f8a1 	bl	8006e12 <create_chain>
 8008cd0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8109 	beq.w	8008eec <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d104      	bne.n	8008cea <f_write+0x10c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	755a      	strb	r2, [r3, #21]
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e109      	b.n	8008efe <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d104      	bne.n	8008cfc <f_write+0x11e>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	755a      	strb	r2, [r3, #21]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e100      	b.n	8008efe <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d00:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <f_write+0x132>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d0e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	7d1b      	ldrb	r3, [r3, #20]
 8008d14:	b25b      	sxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da18      	bge.n	8008d4c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	7858      	ldrb	r0, [r3, #1]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f7fd fa75 	bl	8006218 <disk_write>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <f_write+0x160>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	755a      	strb	r2, [r3, #21]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e0df      	b.n	8008efe <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7d1b      	ldrb	r3, [r3, #20]
 8008d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7fd fdeb 	bl	8006930 <clust2sect>
 8008d5a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <f_write+0x18e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2202      	movs	r2, #2
 8008d66:	755a      	strb	r2, [r3, #21]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e0c8      	b.n	8008efe <f_write+0x320>
			sect += csect;
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	4413      	add	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	899b      	ldrh	r3, [r3, #12]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d80:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d043      	beq.n	8008e10 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	8952      	ldrh	r2, [r2, #10]
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d905      	bls.n	8008da2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	895b      	ldrh	r3, [r3, #10]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	7858      	ldrb	r0, [r3, #1]
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	69f9      	ldr	r1, [r7, #28]
 8008dac:	f7fd fa34 	bl	8006218 <disk_write>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <f_write+0x1e2>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	755a      	strb	r2, [r3, #21]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e09e      	b.n	8008efe <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1a      	ldr	r2, [r3, #32]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	6a3a      	ldr	r2, [r7, #32]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d918      	bls.n	8008e00 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1a      	ldr	r2, [r3, #32]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	8992      	ldrh	r2, [r2, #12]
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	18d1      	adds	r1, r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	899b      	ldrh	r3, [r3, #12]
 8008dec:	461a      	mov	r2, r3
 8008dee:	f7fd fad3 	bl	8006398 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	fb02 f303 	mul.w	r3, r2, r3
 8008e0c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008e0e:	e04b      	b.n	8008ea8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d016      	beq.n	8008e48 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d210      	bcs.n	8008e48 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	7858      	ldrb	r0, [r3, #1]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e30:	2301      	movs	r3, #1
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	f7fd f9d0 	bl	80061d8 <disk_read>
 8008e38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d004      	beq.n	8008e48 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	755a      	strb	r2, [r3, #21]
 8008e44:	2301      	movs	r3, #1
 8008e46:	e05a      	b.n	8008efe <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	4618      	mov	r0, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	8992      	ldrh	r2, [r2, #12]
 8008e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e60:	fb01 f202 	mul.w	r2, r1, r2
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	1ac3      	subs	r3, r0, r3
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d901      	bls.n	8008e76 <f_write+0x298>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	8992      	ldrh	r2, [r2, #12]
 8008e84:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e88:	fb00 f202 	mul.w	r2, r0, r2
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	440b      	add	r3, r1
 8008e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e92:	69f9      	ldr	r1, [r7, #28]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd fa7f 	bl	8006398 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	7d1b      	ldrb	r3, [r3, #20]
 8008e9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ea8:	69fa      	ldr	r2, [r7, #28]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	4413      	add	r3, r2
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	441a      	add	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	619a      	str	r2, [r3, #24]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	bf38      	it	cc
 8008ec8:	461a      	movcc	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	441a      	add	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f47f aeb5 	bne.w	8008c54 <f_write+0x76>
 8008eea:	e000      	b.n	8008eee <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008eec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7d1b      	ldrb	r3, [r3, #20]
 8008ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3730      	adds	r7, #48	@ 0x30
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b086      	sub	sp, #24
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f107 0208 	add.w	r2, r7, #8
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fabe 	bl	8008498 <validate>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d168      	bne.n	8008ff8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7d1b      	ldrb	r3, [r3, #20]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d062      	beq.n	8008ff8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7d1b      	ldrb	r3, [r3, #20]
 8008f36:	b25b      	sxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da15      	bge.n	8008f68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	7858      	ldrb	r0, [r3, #1]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f7fd f964 	bl	8006218 <disk_write>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <f_sync+0x54>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e04f      	b.n	8008ffa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7d1b      	ldrb	r3, [r3, #20]
 8008f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f68:	f7fd f896 	bl	8006098 <get_fattime>
 8008f6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	f7fd fc3c 	bl	80067f4 <move_window>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d138      	bne.n	8008ff8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	330b      	adds	r3, #11
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	330b      	adds	r3, #11
 8008f96:	f042 0220 	orr.w	r2, r2, #32
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68f9      	ldr	r1, [r7, #12]
 8008faa:	f7fe f9c7 	bl	800733c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f103 021c 	add.w	r2, r3, #28
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7fd f9c0 	bl	8006340 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3316      	adds	r3, #22
 8008fc4:	6939      	ldr	r1, [r7, #16]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd f9ba 	bl	8006340 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3312      	adds	r3, #18
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd f999 	bl	800630a <st_word>
					fs->wflag = 1;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fc35 	bl	8006850 <sync_fs>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7d1b      	ldrb	r3, [r3, #20]
 8008fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff ff7b 	bl	8008f06 <f_sync>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d118      	bne.n	800904c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f107 0208 	add.w	r2, r7, #8
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fa38 	bl	8008498 <validate>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	4618      	mov	r0, r3
 8009038:	f7fd fb38 	bl	80066ac <dec_lock>
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b092      	sub	sp, #72	@ 0x48
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009062:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009066:	f107 030c 	add.w	r3, r7, #12
 800906a:	2200      	movs	r2, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe ff8d 	bl	8007f8c <find_volume>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800907c:	2b00      	cmp	r3, #0
 800907e:	f040 8099 	bne.w	80091b4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	699a      	ldr	r2, [r3, #24]
 800908c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	3b02      	subs	r3, #2
 8009092:	429a      	cmp	r2, r3
 8009094:	d804      	bhi.n	80090a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009098:	699a      	ldr	r2, [r3, #24]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e089      	b.n	80091b4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d128      	bne.n	80090fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80090ac:	2302      	movs	r3, #2
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80090b4:	f107 0314 	add.w	r3, r7, #20
 80090b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fd fc57 	bl	800696e <get_fat>
 80090c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80090c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d103      	bne.n	80090d2 <f_getfree+0x7c>
 80090ca:	2301      	movs	r3, #1
 80090cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80090d0:	e063      	b.n	800919a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80090d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d103      	bne.n	80090e0 <f_getfree+0x8a>
 80090d8:	2302      	movs	r3, #2
 80090da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80090de:	e05c      	b.n	800919a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80090e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <f_getfree+0x96>
 80090e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e8:	3301      	adds	r3, #1
 80090ea:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80090ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ee:	3301      	adds	r3, #1
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3db      	bcc.n	80090b4 <f_getfree+0x5e>
 80090fc:	e04d      	b.n	800919a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
 800910e:	2300      	movs	r3, #0
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009114:	2b00      	cmp	r3, #0
 8009116:	d113      	bne.n	8009140 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800911a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009120:	4619      	mov	r1, r3
 8009122:	f7fd fb67 	bl	80067f4 <move_window>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800912c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009130:	2b00      	cmp	r3, #0
 8009132:	d131      	bne.n	8009198 <f_getfree+0x142>
							p = fs->win;
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	3338      	adds	r3, #56	@ 0x38
 8009138:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d10f      	bne.n	8009168 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800914a:	f7fd f8a3 	bl	8006294 <ld_word>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <f_getfree+0x104>
 8009154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009156:	3301      	adds	r3, #1
 8009158:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	3302      	adds	r3, #2
 800915e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009162:	3b02      	subs	r3, #2
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
 8009166:	e010      	b.n	800918a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800916a:	f7fd f8ab 	bl	80062c4 <ld_dword>
 800916e:	4603      	mov	r3, r0
 8009170:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <f_getfree+0x128>
 8009178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800917a:	3301      	adds	r3, #1
 800917c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	3304      	adds	r3, #4
 8009182:	633b      	str	r3, [r7, #48]	@ 0x30
 8009184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009186:	3b04      	subs	r3, #4
 8009188:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	3b01      	subs	r3, #1
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1bd      	bne.n	8009112 <f_getfree+0xbc>
 8009196:	e000      	b.n	800919a <f_getfree+0x144>
							if (res != FR_OK) break;
 8009198:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800919e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80091a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091a4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80091a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a8:	791a      	ldrb	r2, [r3, #4]
 80091aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ac:	f042 0201 	orr.w	r2, r2, #1
 80091b0:	b2d2      	uxtb	r2, r2
 80091b2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80091b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3748      	adds	r7, #72	@ 0x48
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
	int n = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80091d4:	e01c      	b.n	8009210 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80091d6:	f107 0310 	add.w	r3, r7, #16
 80091da:	f107 0114 	add.w	r1, r7, #20
 80091de:	2201      	movs	r2, #1
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fb9d 	bl	8008920 <f_read>
		if (rc != 1) break;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d117      	bne.n	800921c <f_gets+0x5c>
		c = s[0];
 80091ec:	7d3b      	ldrb	r3, [r7, #20]
 80091ee:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	2b0d      	cmp	r3, #13
 80091f4:	d00b      	beq.n	800920e <f_gets+0x4e>
		*p++ = c;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	61ba      	str	r2, [r7, #24]
 80091fc:	7dfa      	ldrb	r2, [r7, #23]
 80091fe:	701a      	strb	r2, [r3, #0]
		n++;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	2b0a      	cmp	r3, #10
 800920a:	d009      	beq.n	8009220 <f_gets+0x60>
 800920c:	e000      	b.n	8009210 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800920e:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	3b01      	subs	r3, #1
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	429a      	cmp	r2, r3
 8009218:	dbdd      	blt.n	80091d6 <f_gets+0x16>
 800921a:	e002      	b.n	8009222 <f_gets+0x62>
		if (rc != 1) break;
 800921c:	bf00      	nop
 800921e:	e000      	b.n	8009222 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009220:	bf00      	nop
	}
	*p = 0;
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <f_gets+0x72>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e000      	b.n	8009234 <f_gets+0x74>
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b0a      	cmp	r3, #10
 800924c:	d103      	bne.n	8009256 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800924e:	210d      	movs	r1, #13
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff fff3 	bl	800923c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	db25      	blt.n	80092ae <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	60fa      	str	r2, [r7, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b3c      	cmp	r3, #60	@ 0x3c
 8009274:	dd12      	ble.n	800929c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f103 010c 	add.w	r1, r3, #12
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	f7ff fcaa 	bl	8008bde <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	429a      	cmp	r2, r3
 8009290:	d101      	bne.n	8009296 <putc_bfd+0x5a>
 8009292:	2300      	movs	r3, #0
 8009294:	e001      	b.n	800929a <putc_bfd+0x5e>
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	609a      	str	r2, [r3, #8]
 80092ac:	e000      	b.n	80092b0 <putc_bfd+0x74>
	if (i < 0) return;
 80092ae:	bf00      	nop
}
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	db16      	blt.n	80092f4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f103 010c 	add.w	r1, r3, #12
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	461a      	mov	r2, r3
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	f7ff fc80 	bl	8008bde <f_write>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d107      	bne.n	80092f4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d102      	bne.n	80092f4 <putc_flush+0x3e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	e001      	b.n	80092f8 <putc_flush+0x42>
	return EOF;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	609a      	str	r2, [r3, #8]
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b096      	sub	sp, #88	@ 0x58
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009334:	f107 030c 	add.w	r3, r7, #12
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff ffe0 	bl	8009300 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009340:	e009      	b.n	8009356 <f_puts+0x2c>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	781a      	ldrb	r2, [r3, #0]
 800934a:	f107 030c 	add.w	r3, r7, #12
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff ff73 	bl	800923c <putc_bfd>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f1      	bne.n	8009342 <f_puts+0x18>
	return putc_flush(&pb);
 800935e:	f107 030c 	add.w	r3, r7, #12
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff ffa7 	bl	80092b6 <putc_flush>
 8009368:	4603      	mov	r3, r0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3758      	adds	r7, #88	@ 0x58
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800938a:	4b1f      	ldr	r3, [pc, #124]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 800938c:	7a5b      	ldrb	r3, [r3, #9]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d131      	bne.n	80093f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009394:	4b1c      	ldr	r3, [pc, #112]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 8009396:	7a5b      	ldrb	r3, [r3, #9]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	4b1a      	ldr	r3, [pc, #104]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 800939e:	2100      	movs	r1, #0
 80093a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093a2:	4b19      	ldr	r3, [pc, #100]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093a4:	7a5b      	ldrb	r3, [r3, #9]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4a17      	ldr	r2, [pc, #92]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093b2:	4b15      	ldr	r3, [pc, #84]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093b4:	7a5b      	ldrb	r3, [r3, #9]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b13      	ldr	r3, [pc, #76]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093bc:	4413      	add	r3, r2
 80093be:	79fa      	ldrb	r2, [r7, #7]
 80093c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093c2:	4b11      	ldr	r3, [pc, #68]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093c4:	7a5b      	ldrb	r3, [r3, #9]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	b2d1      	uxtb	r1, r2
 80093cc:	4a0e      	ldr	r2, [pc, #56]	@ (8009408 <FATFS_LinkDriverEx+0x94>)
 80093ce:	7251      	strb	r1, [r2, #9]
 80093d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093d2:	7dbb      	ldrb	r3, [r7, #22]
 80093d4:	3330      	adds	r3, #48	@ 0x30
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3301      	adds	r3, #1
 80093e0:	223a      	movs	r2, #58	@ 0x3a
 80093e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	3302      	adds	r3, #2
 80093e8:	222f      	movs	r2, #47	@ 0x2f
 80093ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	3303      	adds	r3, #3
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000654 	.word	0x20000654

0800940c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009416:	2200      	movs	r2, #0
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ffaa 	bl	8009374 <FATFS_LinkDriverEx>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	2b7f      	cmp	r3, #127	@ 0x7f
 800943c:	d802      	bhi.n	8009444 <ff_convert+0x18>
		c = chr;
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	81fb      	strh	r3, [r7, #14]
 8009442:	e025      	b.n	8009490 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	2bff      	cmp	r3, #255	@ 0xff
 800944e:	d805      	bhi.n	800945c <ff_convert+0x30>
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	3b80      	subs	r3, #128	@ 0x80
 8009454:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <ff_convert+0x74>)
 8009456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800945a:	e000      	b.n	800945e <ff_convert+0x32>
 800945c:	2300      	movs	r3, #0
 800945e:	81fb      	strh	r3, [r7, #14]
 8009460:	e016      	b.n	8009490 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009462:	2300      	movs	r3, #0
 8009464:	81fb      	strh	r3, [r7, #14]
 8009466:	e009      	b.n	800947c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009468:	89fb      	ldrh	r3, [r7, #14]
 800946a:	4a0d      	ldr	r2, [pc, #52]	@ (80094a0 <ff_convert+0x74>)
 800946c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	429a      	cmp	r2, r3
 8009474:	d006      	beq.n	8009484 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009476:	89fb      	ldrh	r3, [r7, #14]
 8009478:	3301      	adds	r3, #1
 800947a:	81fb      	strh	r3, [r7, #14]
 800947c:	89fb      	ldrh	r3, [r7, #14]
 800947e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009480:	d9f2      	bls.n	8009468 <ff_convert+0x3c>
 8009482:	e000      	b.n	8009486 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009484:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009486:	89fb      	ldrh	r3, [r7, #14]
 8009488:	3380      	adds	r3, #128	@ 0x80
 800948a:	b29b      	uxth	r3, r3
 800948c:	b2db      	uxtb	r3, r3
 800948e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009490:	89fb      	ldrh	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	0800c72c 	.word	0x0800c72c

080094a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b4:	d201      	bcs.n	80094ba <ff_wtoupper+0x16>
 80094b6:	4b3e      	ldr	r3, [pc, #248]	@ (80095b0 <ff_wtoupper+0x10c>)
 80094b8:	e000      	b.n	80094bc <ff_wtoupper+0x18>
 80094ba:	4b3e      	ldr	r3, [pc, #248]	@ (80095b4 <ff_wtoupper+0x110>)
 80094bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	1c9a      	adds	r2, r3, #2
 80094c2:	617a      	str	r2, [r7, #20]
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80094c8:	8a7b      	ldrh	r3, [r7, #18]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d068      	beq.n	80095a0 <ff_wtoupper+0xfc>
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	8a7b      	ldrh	r3, [r7, #18]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d364      	bcc.n	80095a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	617a      	str	r2, [r7, #20]
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	823b      	strh	r3, [r7, #16]
 80094e0:	8a3b      	ldrh	r3, [r7, #16]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	81fb      	strh	r3, [r7, #14]
 80094e6:	8a3b      	ldrh	r3, [r7, #16]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	8a79      	ldrh	r1, [r7, #18]
 80094f0:	8a3b      	ldrh	r3, [r7, #16]
 80094f2:	440b      	add	r3, r1
 80094f4:	429a      	cmp	r2, r3
 80094f6:	da49      	bge.n	800958c <ff_wtoupper+0xe8>
			switch (cmd) {
 80094f8:	89fb      	ldrh	r3, [r7, #14]
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d84f      	bhi.n	800959e <ff_wtoupper+0xfa>
 80094fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <ff_wtoupper+0x60>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	08009529 	.word	0x08009529
 8009508:	0800953b 	.word	0x0800953b
 800950c:	08009551 	.word	0x08009551
 8009510:	08009559 	.word	0x08009559
 8009514:	08009561 	.word	0x08009561
 8009518:	08009569 	.word	0x08009569
 800951c:	08009571 	.word	0x08009571
 8009520:	08009579 	.word	0x08009579
 8009524:	08009581 	.word	0x08009581
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	8a7b      	ldrh	r3, [r7, #18]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4413      	add	r3, r2
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	80fb      	strh	r3, [r7, #6]
 8009538:	e027      	b.n	800958a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	8a7b      	ldrh	r3, [r7, #18]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	b29b      	uxth	r3, r3
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	b29b      	uxth	r3, r3
 8009548:	88fa      	ldrh	r2, [r7, #6]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	80fb      	strh	r3, [r7, #6]
 800954e:	e01c      	b.n	800958a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	3b10      	subs	r3, #16
 8009554:	80fb      	strh	r3, [r7, #6]
 8009556:	e018      	b.n	800958a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009558:	88fb      	ldrh	r3, [r7, #6]
 800955a:	3b20      	subs	r3, #32
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	e014      	b.n	800958a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	3b30      	subs	r3, #48	@ 0x30
 8009564:	80fb      	strh	r3, [r7, #6]
 8009566:	e010      	b.n	800958a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	3b1a      	subs	r3, #26
 800956c:	80fb      	strh	r3, [r7, #6]
 800956e:	e00c      	b.n	800958a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	3308      	adds	r3, #8
 8009574:	80fb      	strh	r3, [r7, #6]
 8009576:	e008      	b.n	800958a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	3b50      	subs	r3, #80	@ 0x50
 800957c:	80fb      	strh	r3, [r7, #6]
 800957e:	e004      	b.n	800958a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009586:	80fb      	strh	r3, [r7, #6]
 8009588:	bf00      	nop
			}
			break;
 800958a:	e008      	b.n	800959e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800958c:	89fb      	ldrh	r3, [r7, #14]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d195      	bne.n	80094be <ff_wtoupper+0x1a>
 8009592:	8a3b      	ldrh	r3, [r7, #16]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800959c:	e78f      	b.n	80094be <ff_wtoupper+0x1a>
			break;
 800959e:	bf00      	nop
	}

	return chr;
 80095a0:	88fb      	ldrh	r3, [r7, #6]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	0800c82c 	.word	0x0800c82c
 80095b4:	0800ca20 	.word	0x0800ca20

080095b8 <__cvt>:
 80095b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	ec57 6b10 	vmov	r6, r7, d0
 80095c0:	2f00      	cmp	r7, #0
 80095c2:	460c      	mov	r4, r1
 80095c4:	4619      	mov	r1, r3
 80095c6:	463b      	mov	r3, r7
 80095c8:	bfbb      	ittet	lt
 80095ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095ce:	461f      	movlt	r7, r3
 80095d0:	2300      	movge	r3, #0
 80095d2:	232d      	movlt	r3, #45	@ 0x2d
 80095d4:	700b      	strb	r3, [r1, #0]
 80095d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095dc:	4691      	mov	r9, r2
 80095de:	f023 0820 	bic.w	r8, r3, #32
 80095e2:	bfbc      	itt	lt
 80095e4:	4632      	movlt	r2, r6
 80095e6:	4616      	movlt	r6, r2
 80095e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095ec:	d005      	beq.n	80095fa <__cvt+0x42>
 80095ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095f2:	d100      	bne.n	80095f6 <__cvt+0x3e>
 80095f4:	3401      	adds	r4, #1
 80095f6:	2102      	movs	r1, #2
 80095f8:	e000      	b.n	80095fc <__cvt+0x44>
 80095fa:	2103      	movs	r1, #3
 80095fc:	ab03      	add	r3, sp, #12
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	ab02      	add	r3, sp, #8
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	ec47 6b10 	vmov	d0, r6, r7
 8009608:	4653      	mov	r3, sl
 800960a:	4622      	mov	r2, r4
 800960c:	f000 ff5c 	bl	800a4c8 <_dtoa_r>
 8009610:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009614:	4605      	mov	r5, r0
 8009616:	d119      	bne.n	800964c <__cvt+0x94>
 8009618:	f019 0f01 	tst.w	r9, #1
 800961c:	d00e      	beq.n	800963c <__cvt+0x84>
 800961e:	eb00 0904 	add.w	r9, r0, r4
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f7 fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800962e:	b108      	cbz	r0, 8009634 <__cvt+0x7c>
 8009630:	f8cd 900c 	str.w	r9, [sp, #12]
 8009634:	2230      	movs	r2, #48	@ 0x30
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	454b      	cmp	r3, r9
 800963a:	d31e      	bcc.n	800967a <__cvt+0xc2>
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009640:	1b5b      	subs	r3, r3, r5
 8009642:	4628      	mov	r0, r5
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	b004      	add	sp, #16
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009650:	eb00 0904 	add.w	r9, r0, r4
 8009654:	d1e5      	bne.n	8009622 <__cvt+0x6a>
 8009656:	7803      	ldrb	r3, [r0, #0]
 8009658:	2b30      	cmp	r3, #48	@ 0x30
 800965a:	d10a      	bne.n	8009672 <__cvt+0xba>
 800965c:	2200      	movs	r2, #0
 800965e:	2300      	movs	r3, #0
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f7 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8009668:	b918      	cbnz	r0, 8009672 <__cvt+0xba>
 800966a:	f1c4 0401 	rsb	r4, r4, #1
 800966e:	f8ca 4000 	str.w	r4, [sl]
 8009672:	f8da 3000 	ldr.w	r3, [sl]
 8009676:	4499      	add	r9, r3
 8009678:	e7d3      	b.n	8009622 <__cvt+0x6a>
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	9103      	str	r1, [sp, #12]
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	e7d9      	b.n	8009636 <__cvt+0x7e>

08009682 <__exponent>:
 8009682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009684:	2900      	cmp	r1, #0
 8009686:	bfba      	itte	lt
 8009688:	4249      	neglt	r1, r1
 800968a:	232d      	movlt	r3, #45	@ 0x2d
 800968c:	232b      	movge	r3, #43	@ 0x2b
 800968e:	2909      	cmp	r1, #9
 8009690:	7002      	strb	r2, [r0, #0]
 8009692:	7043      	strb	r3, [r0, #1]
 8009694:	dd29      	ble.n	80096ea <__exponent+0x68>
 8009696:	f10d 0307 	add.w	r3, sp, #7
 800969a:	461d      	mov	r5, r3
 800969c:	270a      	movs	r7, #10
 800969e:	461a      	mov	r2, r3
 80096a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80096a4:	fb07 1416 	mls	r4, r7, r6, r1
 80096a8:	3430      	adds	r4, #48	@ 0x30
 80096aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096ae:	460c      	mov	r4, r1
 80096b0:	2c63      	cmp	r4, #99	@ 0x63
 80096b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80096b6:	4631      	mov	r1, r6
 80096b8:	dcf1      	bgt.n	800969e <__exponent+0x1c>
 80096ba:	3130      	adds	r1, #48	@ 0x30
 80096bc:	1e94      	subs	r4, r2, #2
 80096be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096c2:	1c41      	adds	r1, r0, #1
 80096c4:	4623      	mov	r3, r4
 80096c6:	42ab      	cmp	r3, r5
 80096c8:	d30a      	bcc.n	80096e0 <__exponent+0x5e>
 80096ca:	f10d 0309 	add.w	r3, sp, #9
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ac      	cmp	r4, r5
 80096d2:	bf88      	it	hi
 80096d4:	2300      	movhi	r3, #0
 80096d6:	3302      	adds	r3, #2
 80096d8:	4403      	add	r3, r0
 80096da:	1a18      	subs	r0, r3, r0
 80096dc:	b003      	add	sp, #12
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096e8:	e7ed      	b.n	80096c6 <__exponent+0x44>
 80096ea:	2330      	movs	r3, #48	@ 0x30
 80096ec:	3130      	adds	r1, #48	@ 0x30
 80096ee:	7083      	strb	r3, [r0, #2]
 80096f0:	70c1      	strb	r1, [r0, #3]
 80096f2:	1d03      	adds	r3, r0, #4
 80096f4:	e7f1      	b.n	80096da <__exponent+0x58>
	...

080096f8 <_printf_float>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	b08d      	sub	sp, #52	@ 0x34
 80096fe:	460c      	mov	r4, r1
 8009700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009704:	4616      	mov	r6, r2
 8009706:	461f      	mov	r7, r3
 8009708:	4605      	mov	r5, r0
 800970a:	f000 fdbf 	bl	800a28c <_localeconv_r>
 800970e:	6803      	ldr	r3, [r0, #0]
 8009710:	9304      	str	r3, [sp, #16]
 8009712:	4618      	mov	r0, r3
 8009714:	f7f6 fdb4 	bl	8000280 <strlen>
 8009718:	2300      	movs	r3, #0
 800971a:	930a      	str	r3, [sp, #40]	@ 0x28
 800971c:	f8d8 3000 	ldr.w	r3, [r8]
 8009720:	9005      	str	r0, [sp, #20]
 8009722:	3307      	adds	r3, #7
 8009724:	f023 0307 	bic.w	r3, r3, #7
 8009728:	f103 0208 	add.w	r2, r3, #8
 800972c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009730:	f8d4 b000 	ldr.w	fp, [r4]
 8009734:	f8c8 2000 	str.w	r2, [r8]
 8009738:	e9d3 8900 	ldrd	r8, r9, [r3]
 800973c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	f8cd 8018 	str.w	r8, [sp, #24]
 8009746:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800974a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800974e:	4b9c      	ldr	r3, [pc, #624]	@ (80099c0 <_printf_float+0x2c8>)
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	f7f7 f9f2 	bl	8000b3c <__aeabi_dcmpun>
 8009758:	bb70      	cbnz	r0, 80097b8 <_printf_float+0xc0>
 800975a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800975e:	4b98      	ldr	r3, [pc, #608]	@ (80099c0 <_printf_float+0x2c8>)
 8009760:	f04f 32ff 	mov.w	r2, #4294967295
 8009764:	f7f7 f9cc 	bl	8000b00 <__aeabi_dcmple>
 8009768:	bb30      	cbnz	r0, 80097b8 <_printf_float+0xc0>
 800976a:	2200      	movs	r2, #0
 800976c:	2300      	movs	r3, #0
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f7f7 f9bb 	bl	8000aec <__aeabi_dcmplt>
 8009776:	b110      	cbz	r0, 800977e <_printf_float+0x86>
 8009778:	232d      	movs	r3, #45	@ 0x2d
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800977e:	4a91      	ldr	r2, [pc, #580]	@ (80099c4 <_printf_float+0x2cc>)
 8009780:	4b91      	ldr	r3, [pc, #580]	@ (80099c8 <_printf_float+0x2d0>)
 8009782:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009786:	bf94      	ite	ls
 8009788:	4690      	movls	r8, r2
 800978a:	4698      	movhi	r8, r3
 800978c:	2303      	movs	r3, #3
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	f02b 0304 	bic.w	r3, fp, #4
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	f04f 0900 	mov.w	r9, #0
 800979a:	9700      	str	r7, [sp, #0]
 800979c:	4633      	mov	r3, r6
 800979e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097a0:	4621      	mov	r1, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	f000 f9d2 	bl	8009b4c <_printf_common>
 80097a8:	3001      	adds	r0, #1
 80097aa:	f040 808d 	bne.w	80098c8 <_printf_float+0x1d0>
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	b00d      	add	sp, #52	@ 0x34
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	4640      	mov	r0, r8
 80097be:	4649      	mov	r1, r9
 80097c0:	f7f7 f9bc 	bl	8000b3c <__aeabi_dcmpun>
 80097c4:	b140      	cbz	r0, 80097d8 <_printf_float+0xe0>
 80097c6:	464b      	mov	r3, r9
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bfbc      	itt	lt
 80097cc:	232d      	movlt	r3, #45	@ 0x2d
 80097ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097d2:	4a7e      	ldr	r2, [pc, #504]	@ (80099cc <_printf_float+0x2d4>)
 80097d4:	4b7e      	ldr	r3, [pc, #504]	@ (80099d0 <_printf_float+0x2d8>)
 80097d6:	e7d4      	b.n	8009782 <_printf_float+0x8a>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097de:	9206      	str	r2, [sp, #24]
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	d13b      	bne.n	800985c <_printf_float+0x164>
 80097e4:	2306      	movs	r3, #6
 80097e6:	6063      	str	r3, [r4, #4]
 80097e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097ec:	2300      	movs	r3, #0
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	9303      	str	r3, [sp, #12]
 80097f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80097f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80097f8:	ab09      	add	r3, sp, #36	@ 0x24
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	6861      	ldr	r1, [r4, #4]
 80097fe:	ec49 8b10 	vmov	d0, r8, r9
 8009802:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009806:	4628      	mov	r0, r5
 8009808:	f7ff fed6 	bl	80095b8 <__cvt>
 800980c:	9b06      	ldr	r3, [sp, #24]
 800980e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009810:	2b47      	cmp	r3, #71	@ 0x47
 8009812:	4680      	mov	r8, r0
 8009814:	d129      	bne.n	800986a <_printf_float+0x172>
 8009816:	1cc8      	adds	r0, r1, #3
 8009818:	db02      	blt.n	8009820 <_printf_float+0x128>
 800981a:	6863      	ldr	r3, [r4, #4]
 800981c:	4299      	cmp	r1, r3
 800981e:	dd41      	ble.n	80098a4 <_printf_float+0x1ac>
 8009820:	f1aa 0a02 	sub.w	sl, sl, #2
 8009824:	fa5f fa8a 	uxtb.w	sl, sl
 8009828:	3901      	subs	r1, #1
 800982a:	4652      	mov	r2, sl
 800982c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009830:	9109      	str	r1, [sp, #36]	@ 0x24
 8009832:	f7ff ff26 	bl	8009682 <__exponent>
 8009836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009838:	1813      	adds	r3, r2, r0
 800983a:	2a01      	cmp	r2, #1
 800983c:	4681      	mov	r9, r0
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	dc02      	bgt.n	8009848 <_printf_float+0x150>
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	07d2      	lsls	r2, r2, #31
 8009846:	d501      	bpl.n	800984c <_printf_float+0x154>
 8009848:	3301      	adds	r3, #1
 800984a:	6123      	str	r3, [r4, #16]
 800984c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0a2      	beq.n	800979a <_printf_float+0xa2>
 8009854:	232d      	movs	r3, #45	@ 0x2d
 8009856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800985a:	e79e      	b.n	800979a <_printf_float+0xa2>
 800985c:	9a06      	ldr	r2, [sp, #24]
 800985e:	2a47      	cmp	r2, #71	@ 0x47
 8009860:	d1c2      	bne.n	80097e8 <_printf_float+0xf0>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1c0      	bne.n	80097e8 <_printf_float+0xf0>
 8009866:	2301      	movs	r3, #1
 8009868:	e7bd      	b.n	80097e6 <_printf_float+0xee>
 800986a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800986e:	d9db      	bls.n	8009828 <_printf_float+0x130>
 8009870:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009874:	d118      	bne.n	80098a8 <_printf_float+0x1b0>
 8009876:	2900      	cmp	r1, #0
 8009878:	6863      	ldr	r3, [r4, #4]
 800987a:	dd0b      	ble.n	8009894 <_printf_float+0x19c>
 800987c:	6121      	str	r1, [r4, #16]
 800987e:	b913      	cbnz	r3, 8009886 <_printf_float+0x18e>
 8009880:	6822      	ldr	r2, [r4, #0]
 8009882:	07d0      	lsls	r0, r2, #31
 8009884:	d502      	bpl.n	800988c <_printf_float+0x194>
 8009886:	3301      	adds	r3, #1
 8009888:	440b      	add	r3, r1
 800988a:	6123      	str	r3, [r4, #16]
 800988c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800988e:	f04f 0900 	mov.w	r9, #0
 8009892:	e7db      	b.n	800984c <_printf_float+0x154>
 8009894:	b913      	cbnz	r3, 800989c <_printf_float+0x1a4>
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	07d2      	lsls	r2, r2, #31
 800989a:	d501      	bpl.n	80098a0 <_printf_float+0x1a8>
 800989c:	3302      	adds	r3, #2
 800989e:	e7f4      	b.n	800988a <_printf_float+0x192>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f2      	b.n	800988a <_printf_float+0x192>
 80098a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098aa:	4299      	cmp	r1, r3
 80098ac:	db05      	blt.n	80098ba <_printf_float+0x1c2>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	6121      	str	r1, [r4, #16]
 80098b2:	07d8      	lsls	r0, r3, #31
 80098b4:	d5ea      	bpl.n	800988c <_printf_float+0x194>
 80098b6:	1c4b      	adds	r3, r1, #1
 80098b8:	e7e7      	b.n	800988a <_printf_float+0x192>
 80098ba:	2900      	cmp	r1, #0
 80098bc:	bfd4      	ite	le
 80098be:	f1c1 0202 	rsble	r2, r1, #2
 80098c2:	2201      	movgt	r2, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	e7e0      	b.n	800988a <_printf_float+0x192>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	055a      	lsls	r2, r3, #21
 80098cc:	d407      	bmi.n	80098de <_printf_float+0x1e6>
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	4642      	mov	r2, r8
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	d12b      	bne.n	8009934 <_printf_float+0x23c>
 80098dc:	e767      	b.n	80097ae <_printf_float+0xb6>
 80098de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098e2:	f240 80dd 	bls.w	8009aa0 <_printf_float+0x3a8>
 80098e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	f7f7 f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d033      	beq.n	800995e <_printf_float+0x266>
 80098f6:	4a37      	ldr	r2, [pc, #220]	@ (80099d4 <_printf_float+0x2dc>)
 80098f8:	2301      	movs	r3, #1
 80098fa:	4631      	mov	r1, r6
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b8      	blx	r7
 8009900:	3001      	adds	r0, #1
 8009902:	f43f af54 	beq.w	80097ae <_printf_float+0xb6>
 8009906:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800990a:	4543      	cmp	r3, r8
 800990c:	db02      	blt.n	8009914 <_printf_float+0x21c>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	07d8      	lsls	r0, r3, #31
 8009912:	d50f      	bpl.n	8009934 <_printf_float+0x23c>
 8009914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af45 	beq.w	80097ae <_printf_float+0xb6>
 8009924:	f04f 0900 	mov.w	r9, #0
 8009928:	f108 38ff 	add.w	r8, r8, #4294967295
 800992c:	f104 0a1a 	add.w	sl, r4, #26
 8009930:	45c8      	cmp	r8, r9
 8009932:	dc09      	bgt.n	8009948 <_printf_float+0x250>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	079b      	lsls	r3, r3, #30
 8009938:	f100 8103 	bmi.w	8009b42 <_printf_float+0x44a>
 800993c:	68e0      	ldr	r0, [r4, #12]
 800993e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009940:	4298      	cmp	r0, r3
 8009942:	bfb8      	it	lt
 8009944:	4618      	movlt	r0, r3
 8009946:	e734      	b.n	80097b2 <_printf_float+0xba>
 8009948:	2301      	movs	r3, #1
 800994a:	4652      	mov	r2, sl
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	f43f af2b 	beq.w	80097ae <_printf_float+0xb6>
 8009958:	f109 0901 	add.w	r9, r9, #1
 800995c:	e7e8      	b.n	8009930 <_printf_float+0x238>
 800995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc39      	bgt.n	80099d8 <_printf_float+0x2e0>
 8009964:	4a1b      	ldr	r2, [pc, #108]	@ (80099d4 <_printf_float+0x2dc>)
 8009966:	2301      	movs	r3, #1
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af1d 	beq.w	80097ae <_printf_float+0xb6>
 8009974:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009978:	ea59 0303 	orrs.w	r3, r9, r3
 800997c:	d102      	bne.n	8009984 <_printf_float+0x28c>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	07d9      	lsls	r1, r3, #31
 8009982:	d5d7      	bpl.n	8009934 <_printf_float+0x23c>
 8009984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	f43f af0d 	beq.w	80097ae <_printf_float+0xb6>
 8009994:	f04f 0a00 	mov.w	sl, #0
 8009998:	f104 0b1a 	add.w	fp, r4, #26
 800999c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999e:	425b      	negs	r3, r3
 80099a0:	4553      	cmp	r3, sl
 80099a2:	dc01      	bgt.n	80099a8 <_printf_float+0x2b0>
 80099a4:	464b      	mov	r3, r9
 80099a6:	e793      	b.n	80098d0 <_printf_float+0x1d8>
 80099a8:	2301      	movs	r3, #1
 80099aa:	465a      	mov	r2, fp
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f aefb 	beq.w	80097ae <_printf_float+0xb6>
 80099b8:	f10a 0a01 	add.w	sl, sl, #1
 80099bc:	e7ee      	b.n	800999c <_printf_float+0x2a4>
 80099be:	bf00      	nop
 80099c0:	7fefffff 	.word	0x7fefffff
 80099c4:	0800cadc 	.word	0x0800cadc
 80099c8:	0800cae0 	.word	0x0800cae0
 80099cc:	0800cae4 	.word	0x0800cae4
 80099d0:	0800cae8 	.word	0x0800cae8
 80099d4:	0800caec 	.word	0x0800caec
 80099d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099de:	4553      	cmp	r3, sl
 80099e0:	bfa8      	it	ge
 80099e2:	4653      	movge	r3, sl
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	4699      	mov	r9, r3
 80099e8:	dc36      	bgt.n	8009a58 <_printf_float+0x360>
 80099ea:	f04f 0b00 	mov.w	fp, #0
 80099ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f2:	f104 021a 	add.w	r2, r4, #26
 80099f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099f8:	9306      	str	r3, [sp, #24]
 80099fa:	eba3 0309 	sub.w	r3, r3, r9
 80099fe:	455b      	cmp	r3, fp
 8009a00:	dc31      	bgt.n	8009a66 <_printf_float+0x36e>
 8009a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a04:	459a      	cmp	sl, r3
 8009a06:	dc3a      	bgt.n	8009a7e <_printf_float+0x386>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	07da      	lsls	r2, r3, #31
 8009a0c:	d437      	bmi.n	8009a7e <_printf_float+0x386>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a10:	ebaa 0903 	sub.w	r9, sl, r3
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	ebaa 0303 	sub.w	r3, sl, r3
 8009a1a:	4599      	cmp	r9, r3
 8009a1c:	bfa8      	it	ge
 8009a1e:	4699      	movge	r9, r3
 8009a20:	f1b9 0f00 	cmp.w	r9, #0
 8009a24:	dc33      	bgt.n	8009a8e <_printf_float+0x396>
 8009a26:	f04f 0800 	mov.w	r8, #0
 8009a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a2e:	f104 0b1a 	add.w	fp, r4, #26
 8009a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a34:	ebaa 0303 	sub.w	r3, sl, r3
 8009a38:	eba3 0309 	sub.w	r3, r3, r9
 8009a3c:	4543      	cmp	r3, r8
 8009a3e:	f77f af79 	ble.w	8009934 <_printf_float+0x23c>
 8009a42:	2301      	movs	r3, #1
 8009a44:	465a      	mov	r2, fp
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f aeae 	beq.w	80097ae <_printf_float+0xb6>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	e7ec      	b.n	8009a32 <_printf_float+0x33a>
 8009a58:	4642      	mov	r2, r8
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b8      	blx	r7
 8009a60:	3001      	adds	r0, #1
 8009a62:	d1c2      	bne.n	80099ea <_printf_float+0x2f2>
 8009a64:	e6a3      	b.n	80097ae <_printf_float+0xb6>
 8009a66:	2301      	movs	r3, #1
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	9206      	str	r2, [sp, #24]
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f ae9c 	beq.w	80097ae <_printf_float+0xb6>
 8009a76:	9a06      	ldr	r2, [sp, #24]
 8009a78:	f10b 0b01 	add.w	fp, fp, #1
 8009a7c:	e7bb      	b.n	80099f6 <_printf_float+0x2fe>
 8009a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d1c0      	bne.n	8009a0e <_printf_float+0x316>
 8009a8c:	e68f      	b.n	80097ae <_printf_float+0xb6>
 8009a8e:	9a06      	ldr	r2, [sp, #24]
 8009a90:	464b      	mov	r3, r9
 8009a92:	4442      	add	r2, r8
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d1c3      	bne.n	8009a26 <_printf_float+0x32e>
 8009a9e:	e686      	b.n	80097ae <_printf_float+0xb6>
 8009aa0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aa4:	f1ba 0f01 	cmp.w	sl, #1
 8009aa8:	dc01      	bgt.n	8009aae <_printf_float+0x3b6>
 8009aaa:	07db      	lsls	r3, r3, #31
 8009aac:	d536      	bpl.n	8009b1c <_printf_float+0x424>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b8      	blx	r7
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f43f ae78 	beq.w	80097ae <_printf_float+0xb6>
 8009abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b8      	blx	r7
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f43f ae70 	beq.w	80097ae <_printf_float+0xb6>
 8009ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ada:	f7f6 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ade:	b9c0      	cbnz	r0, 8009b12 <_printf_float+0x41a>
 8009ae0:	4653      	mov	r3, sl
 8009ae2:	f108 0201 	add.w	r2, r8, #1
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b8      	blx	r7
 8009aec:	3001      	adds	r0, #1
 8009aee:	d10c      	bne.n	8009b0a <_printf_float+0x412>
 8009af0:	e65d      	b.n	80097ae <_printf_float+0xb6>
 8009af2:	2301      	movs	r3, #1
 8009af4:	465a      	mov	r2, fp
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f ae56 	beq.w	80097ae <_printf_float+0xb6>
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	45d0      	cmp	r8, sl
 8009b08:	dbf3      	blt.n	8009af2 <_printf_float+0x3fa>
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b10:	e6df      	b.n	80098d2 <_printf_float+0x1da>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	f104 0b1a 	add.w	fp, r4, #26
 8009b1a:	e7f4      	b.n	8009b06 <_printf_float+0x40e>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4642      	mov	r2, r8
 8009b20:	e7e1      	b.n	8009ae6 <_printf_float+0x3ee>
 8009b22:	2301      	movs	r3, #1
 8009b24:	464a      	mov	r2, r9
 8009b26:	4631      	mov	r1, r6
 8009b28:	4628      	mov	r0, r5
 8009b2a:	47b8      	blx	r7
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	f43f ae3e 	beq.w	80097ae <_printf_float+0xb6>
 8009b32:	f108 0801 	add.w	r8, r8, #1
 8009b36:	68e3      	ldr	r3, [r4, #12]
 8009b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b3a:	1a5b      	subs	r3, r3, r1
 8009b3c:	4543      	cmp	r3, r8
 8009b3e:	dcf0      	bgt.n	8009b22 <_printf_float+0x42a>
 8009b40:	e6fc      	b.n	800993c <_printf_float+0x244>
 8009b42:	f04f 0800 	mov.w	r8, #0
 8009b46:	f104 0919 	add.w	r9, r4, #25
 8009b4a:	e7f4      	b.n	8009b36 <_printf_float+0x43e>

08009b4c <_printf_common>:
 8009b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	4616      	mov	r6, r2
 8009b52:	4698      	mov	r8, r3
 8009b54:	688a      	ldr	r2, [r1, #8]
 8009b56:	690b      	ldr	r3, [r1, #16]
 8009b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	bfb8      	it	lt
 8009b60:	4613      	movlt	r3, r2
 8009b62:	6033      	str	r3, [r6, #0]
 8009b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b68:	4607      	mov	r7, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	b10a      	cbz	r2, 8009b72 <_printf_common+0x26>
 8009b6e:	3301      	adds	r3, #1
 8009b70:	6033      	str	r3, [r6, #0]
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	0699      	lsls	r1, r3, #26
 8009b76:	bf42      	ittt	mi
 8009b78:	6833      	ldrmi	r3, [r6, #0]
 8009b7a:	3302      	addmi	r3, #2
 8009b7c:	6033      	strmi	r3, [r6, #0]
 8009b7e:	6825      	ldr	r5, [r4, #0]
 8009b80:	f015 0506 	ands.w	r5, r5, #6
 8009b84:	d106      	bne.n	8009b94 <_printf_common+0x48>
 8009b86:	f104 0a19 	add.w	sl, r4, #25
 8009b8a:	68e3      	ldr	r3, [r4, #12]
 8009b8c:	6832      	ldr	r2, [r6, #0]
 8009b8e:	1a9b      	subs	r3, r3, r2
 8009b90:	42ab      	cmp	r3, r5
 8009b92:	dc26      	bgt.n	8009be2 <_printf_common+0x96>
 8009b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b98:	6822      	ldr	r2, [r4, #0]
 8009b9a:	3b00      	subs	r3, #0
 8009b9c:	bf18      	it	ne
 8009b9e:	2301      	movne	r3, #1
 8009ba0:	0692      	lsls	r2, r2, #26
 8009ba2:	d42b      	bmi.n	8009bfc <_printf_common+0xb0>
 8009ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c8      	blx	r9
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d01e      	beq.n	8009bf0 <_printf_common+0xa4>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	6922      	ldr	r2, [r4, #16]
 8009bb6:	f003 0306 	and.w	r3, r3, #6
 8009bba:	2b04      	cmp	r3, #4
 8009bbc:	bf02      	ittt	eq
 8009bbe:	68e5      	ldreq	r5, [r4, #12]
 8009bc0:	6833      	ldreq	r3, [r6, #0]
 8009bc2:	1aed      	subeq	r5, r5, r3
 8009bc4:	68a3      	ldr	r3, [r4, #8]
 8009bc6:	bf0c      	ite	eq
 8009bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bcc:	2500      	movne	r5, #0
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	bfc4      	itt	gt
 8009bd2:	1a9b      	subgt	r3, r3, r2
 8009bd4:	18ed      	addgt	r5, r5, r3
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	341a      	adds	r4, #26
 8009bda:	42b5      	cmp	r5, r6
 8009bdc:	d11a      	bne.n	8009c14 <_printf_common+0xc8>
 8009bde:	2000      	movs	r0, #0
 8009be0:	e008      	b.n	8009bf4 <_printf_common+0xa8>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4652      	mov	r2, sl
 8009be6:	4641      	mov	r1, r8
 8009be8:	4638      	mov	r0, r7
 8009bea:	47c8      	blx	r9
 8009bec:	3001      	adds	r0, #1
 8009bee:	d103      	bne.n	8009bf8 <_printf_common+0xac>
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	e7c6      	b.n	8009b8a <_printf_common+0x3e>
 8009bfc:	18e1      	adds	r1, r4, r3
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	2030      	movs	r0, #48	@ 0x30
 8009c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c06:	4422      	add	r2, r4
 8009c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c10:	3302      	adds	r3, #2
 8009c12:	e7c7      	b.n	8009ba4 <_printf_common+0x58>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4622      	mov	r2, r4
 8009c18:	4641      	mov	r1, r8
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	47c8      	blx	r9
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d0e6      	beq.n	8009bf0 <_printf_common+0xa4>
 8009c22:	3601      	adds	r6, #1
 8009c24:	e7d9      	b.n	8009bda <_printf_common+0x8e>
	...

08009c28 <_printf_i>:
 8009c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	7e0f      	ldrb	r7, [r1, #24]
 8009c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c30:	2f78      	cmp	r7, #120	@ 0x78
 8009c32:	4691      	mov	r9, r2
 8009c34:	4680      	mov	r8, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	469a      	mov	sl, r3
 8009c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c3e:	d807      	bhi.n	8009c50 <_printf_i+0x28>
 8009c40:	2f62      	cmp	r7, #98	@ 0x62
 8009c42:	d80a      	bhi.n	8009c5a <_printf_i+0x32>
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	f000 80d2 	beq.w	8009dee <_printf_i+0x1c6>
 8009c4a:	2f58      	cmp	r7, #88	@ 0x58
 8009c4c:	f000 80b9 	beq.w	8009dc2 <_printf_i+0x19a>
 8009c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c58:	e03a      	b.n	8009cd0 <_printf_i+0xa8>
 8009c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c5e:	2b15      	cmp	r3, #21
 8009c60:	d8f6      	bhi.n	8009c50 <_printf_i+0x28>
 8009c62:	a101      	add	r1, pc, #4	@ (adr r1, 8009c68 <_printf_i+0x40>)
 8009c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c68:	08009cc1 	.word	0x08009cc1
 8009c6c:	08009cd5 	.word	0x08009cd5
 8009c70:	08009c51 	.word	0x08009c51
 8009c74:	08009c51 	.word	0x08009c51
 8009c78:	08009c51 	.word	0x08009c51
 8009c7c:	08009c51 	.word	0x08009c51
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009c51 	.word	0x08009c51
 8009c88:	08009c51 	.word	0x08009c51
 8009c8c:	08009c51 	.word	0x08009c51
 8009c90:	08009c51 	.word	0x08009c51
 8009c94:	08009dd5 	.word	0x08009dd5
 8009c98:	08009cff 	.word	0x08009cff
 8009c9c:	08009d8f 	.word	0x08009d8f
 8009ca0:	08009c51 	.word	0x08009c51
 8009ca4:	08009c51 	.word	0x08009c51
 8009ca8:	08009df7 	.word	0x08009df7
 8009cac:	08009c51 	.word	0x08009c51
 8009cb0:	08009cff 	.word	0x08009cff
 8009cb4:	08009c51 	.word	0x08009c51
 8009cb8:	08009c51 	.word	0x08009c51
 8009cbc:	08009d97 	.word	0x08009d97
 8009cc0:	6833      	ldr	r3, [r6, #0]
 8009cc2:	1d1a      	adds	r2, r3, #4
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6032      	str	r2, [r6, #0]
 8009cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e09d      	b.n	8009e10 <_printf_i+0x1e8>
 8009cd4:	6833      	ldr	r3, [r6, #0]
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	6031      	str	r1, [r6, #0]
 8009cdc:	0606      	lsls	r6, r0, #24
 8009cde:	d501      	bpl.n	8009ce4 <_printf_i+0xbc>
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	e003      	b.n	8009cec <_printf_i+0xc4>
 8009ce4:	0645      	lsls	r5, r0, #25
 8009ce6:	d5fb      	bpl.n	8009ce0 <_printf_i+0xb8>
 8009ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	da03      	bge.n	8009cf8 <_printf_i+0xd0>
 8009cf0:	232d      	movs	r3, #45	@ 0x2d
 8009cf2:	426d      	negs	r5, r5
 8009cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cf8:	4859      	ldr	r0, [pc, #356]	@ (8009e60 <_printf_i+0x238>)
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	e011      	b.n	8009d22 <_printf_i+0xfa>
 8009cfe:	6821      	ldr	r1, [r4, #0]
 8009d00:	6833      	ldr	r3, [r6, #0]
 8009d02:	0608      	lsls	r0, r1, #24
 8009d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d08:	d402      	bmi.n	8009d10 <_printf_i+0xe8>
 8009d0a:	0649      	lsls	r1, r1, #25
 8009d0c:	bf48      	it	mi
 8009d0e:	b2ad      	uxthmi	r5, r5
 8009d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d12:	4853      	ldr	r0, [pc, #332]	@ (8009e60 <_printf_i+0x238>)
 8009d14:	6033      	str	r3, [r6, #0]
 8009d16:	bf14      	ite	ne
 8009d18:	230a      	movne	r3, #10
 8009d1a:	2308      	moveq	r3, #8
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d22:	6866      	ldr	r6, [r4, #4]
 8009d24:	60a6      	str	r6, [r4, #8]
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	bfa2      	ittt	ge
 8009d2a:	6821      	ldrge	r1, [r4, #0]
 8009d2c:	f021 0104 	bicge.w	r1, r1, #4
 8009d30:	6021      	strge	r1, [r4, #0]
 8009d32:	b90d      	cbnz	r5, 8009d38 <_printf_i+0x110>
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	d04b      	beq.n	8009dd0 <_printf_i+0x1a8>
 8009d38:	4616      	mov	r6, r2
 8009d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8009d42:	5dc7      	ldrb	r7, [r0, r7]
 8009d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d48:	462f      	mov	r7, r5
 8009d4a:	42bb      	cmp	r3, r7
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	d9f4      	bls.n	8009d3a <_printf_i+0x112>
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d10b      	bne.n	8009d6c <_printf_i+0x144>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	07df      	lsls	r7, r3, #31
 8009d58:	d508      	bpl.n	8009d6c <_printf_i+0x144>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	6861      	ldr	r1, [r4, #4]
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	bfde      	ittt	le
 8009d62:	2330      	movle	r3, #48	@ 0x30
 8009d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d6c:	1b92      	subs	r2, r2, r6
 8009d6e:	6122      	str	r2, [r4, #16]
 8009d70:	f8cd a000 	str.w	sl, [sp]
 8009d74:	464b      	mov	r3, r9
 8009d76:	aa03      	add	r2, sp, #12
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f7ff fee6 	bl	8009b4c <_printf_common>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d14a      	bne.n	8009e1a <_printf_i+0x1f2>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	b004      	add	sp, #16
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f043 0320 	orr.w	r3, r3, #32
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	4833      	ldr	r0, [pc, #204]	@ (8009e64 <_printf_i+0x23c>)
 8009d98:	2778      	movs	r7, #120	@ 0x78
 8009d9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	6831      	ldr	r1, [r6, #0]
 8009da2:	061f      	lsls	r7, r3, #24
 8009da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009da8:	d402      	bmi.n	8009db0 <_printf_i+0x188>
 8009daa:	065f      	lsls	r7, r3, #25
 8009dac:	bf48      	it	mi
 8009dae:	b2ad      	uxthmi	r5, r5
 8009db0:	6031      	str	r1, [r6, #0]
 8009db2:	07d9      	lsls	r1, r3, #31
 8009db4:	bf44      	itt	mi
 8009db6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dba:	6023      	strmi	r3, [r4, #0]
 8009dbc:	b11d      	cbz	r5, 8009dc6 <_printf_i+0x19e>
 8009dbe:	2310      	movs	r3, #16
 8009dc0:	e7ac      	b.n	8009d1c <_printf_i+0xf4>
 8009dc2:	4827      	ldr	r0, [pc, #156]	@ (8009e60 <_printf_i+0x238>)
 8009dc4:	e7e9      	b.n	8009d9a <_printf_i+0x172>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	f023 0320 	bic.w	r3, r3, #32
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	e7f6      	b.n	8009dbe <_printf_i+0x196>
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	e7bd      	b.n	8009d50 <_printf_i+0x128>
 8009dd4:	6833      	ldr	r3, [r6, #0]
 8009dd6:	6825      	ldr	r5, [r4, #0]
 8009dd8:	6961      	ldr	r1, [r4, #20]
 8009dda:	1d18      	adds	r0, r3, #4
 8009ddc:	6030      	str	r0, [r6, #0]
 8009dde:	062e      	lsls	r6, r5, #24
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	d501      	bpl.n	8009de8 <_printf_i+0x1c0>
 8009de4:	6019      	str	r1, [r3, #0]
 8009de6:	e002      	b.n	8009dee <_printf_i+0x1c6>
 8009de8:	0668      	lsls	r0, r5, #25
 8009dea:	d5fb      	bpl.n	8009de4 <_printf_i+0x1bc>
 8009dec:	8019      	strh	r1, [r3, #0]
 8009dee:	2300      	movs	r3, #0
 8009df0:	6123      	str	r3, [r4, #16]
 8009df2:	4616      	mov	r6, r2
 8009df4:	e7bc      	b.n	8009d70 <_printf_i+0x148>
 8009df6:	6833      	ldr	r3, [r6, #0]
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	6032      	str	r2, [r6, #0]
 8009dfc:	681e      	ldr	r6, [r3, #0]
 8009dfe:	6862      	ldr	r2, [r4, #4]
 8009e00:	2100      	movs	r1, #0
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7f6 f9ec 	bl	80001e0 <memchr>
 8009e08:	b108      	cbz	r0, 8009e0e <_printf_i+0x1e6>
 8009e0a:	1b80      	subs	r0, r0, r6
 8009e0c:	6060      	str	r0, [r4, #4]
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	2300      	movs	r3, #0
 8009e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e18:	e7aa      	b.n	8009d70 <_printf_i+0x148>
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	4649      	mov	r1, r9
 8009e20:	4640      	mov	r0, r8
 8009e22:	47d0      	blx	sl
 8009e24:	3001      	adds	r0, #1
 8009e26:	d0ad      	beq.n	8009d84 <_printf_i+0x15c>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	079b      	lsls	r3, r3, #30
 8009e2c:	d413      	bmi.n	8009e56 <_printf_i+0x22e>
 8009e2e:	68e0      	ldr	r0, [r4, #12]
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	4298      	cmp	r0, r3
 8009e34:	bfb8      	it	lt
 8009e36:	4618      	movlt	r0, r3
 8009e38:	e7a6      	b.n	8009d88 <_printf_i+0x160>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	47d0      	blx	sl
 8009e44:	3001      	adds	r0, #1
 8009e46:	d09d      	beq.n	8009d84 <_printf_i+0x15c>
 8009e48:	3501      	adds	r5, #1
 8009e4a:	68e3      	ldr	r3, [r4, #12]
 8009e4c:	9903      	ldr	r1, [sp, #12]
 8009e4e:	1a5b      	subs	r3, r3, r1
 8009e50:	42ab      	cmp	r3, r5
 8009e52:	dcf2      	bgt.n	8009e3a <_printf_i+0x212>
 8009e54:	e7eb      	b.n	8009e2e <_printf_i+0x206>
 8009e56:	2500      	movs	r5, #0
 8009e58:	f104 0619 	add.w	r6, r4, #25
 8009e5c:	e7f5      	b.n	8009e4a <_printf_i+0x222>
 8009e5e:	bf00      	nop
 8009e60:	0800caee 	.word	0x0800caee
 8009e64:	0800caff 	.word	0x0800caff

08009e68 <std>:
 8009e68:	2300      	movs	r3, #0
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e76:	6083      	str	r3, [r0, #8]
 8009e78:	8181      	strh	r1, [r0, #12]
 8009e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e7c:	81c2      	strh	r2, [r0, #14]
 8009e7e:	6183      	str	r3, [r0, #24]
 8009e80:	4619      	mov	r1, r3
 8009e82:	2208      	movs	r2, #8
 8009e84:	305c      	adds	r0, #92	@ 0x5c
 8009e86:	f000 f9f9 	bl	800a27c <memset>
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec0 <std+0x58>)
 8009e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <std+0x5c>)
 8009e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e92:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec8 <std+0x60>)
 8009e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <std+0x64>)
 8009e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <std+0x68>)
 8009e9c:	6224      	str	r4, [r4, #32]
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d006      	beq.n	8009eb0 <std+0x48>
 8009ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ea6:	4294      	cmp	r4, r2
 8009ea8:	d002      	beq.n	8009eb0 <std+0x48>
 8009eaa:	33d0      	adds	r3, #208	@ 0xd0
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d105      	bne.n	8009ebc <std+0x54>
 8009eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb8:	f000 ba5c 	b.w	800a374 <__retarget_lock_init_recursive>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800a0cd 	.word	0x0800a0cd
 8009ec4:	0800a0ef 	.word	0x0800a0ef
 8009ec8:	0800a127 	.word	0x0800a127
 8009ecc:	0800a14b 	.word	0x0800a14b
 8009ed0:	20000660 	.word	0x20000660

08009ed4 <stdio_exit_handler>:
 8009ed4:	4a02      	ldr	r2, [pc, #8]	@ (8009ee0 <stdio_exit_handler+0xc>)
 8009ed6:	4903      	ldr	r1, [pc, #12]	@ (8009ee4 <stdio_exit_handler+0x10>)
 8009ed8:	4803      	ldr	r0, [pc, #12]	@ (8009ee8 <stdio_exit_handler+0x14>)
 8009eda:	f000 b869 	b.w	8009fb0 <_fwalk_sglue>
 8009ede:	bf00      	nop
 8009ee0:	20000024 	.word	0x20000024
 8009ee4:	0800bce1 	.word	0x0800bce1
 8009ee8:	20000034 	.word	0x20000034

08009eec <cleanup_stdio>:
 8009eec:	6841      	ldr	r1, [r0, #4]
 8009eee:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <cleanup_stdio+0x34>)
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	d001      	beq.n	8009efc <cleanup_stdio+0x10>
 8009ef8:	f001 fef2 	bl	800bce0 <_fflush_r>
 8009efc:	68a1      	ldr	r1, [r4, #8]
 8009efe:	4b09      	ldr	r3, [pc, #36]	@ (8009f24 <cleanup_stdio+0x38>)
 8009f00:	4299      	cmp	r1, r3
 8009f02:	d002      	beq.n	8009f0a <cleanup_stdio+0x1e>
 8009f04:	4620      	mov	r0, r4
 8009f06:	f001 feeb 	bl	800bce0 <_fflush_r>
 8009f0a:	68e1      	ldr	r1, [r4, #12]
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <cleanup_stdio+0x3c>)
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	d004      	beq.n	8009f1c <cleanup_stdio+0x30>
 8009f12:	4620      	mov	r0, r4
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f001 bee2 	b.w	800bce0 <_fflush_r>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000660 	.word	0x20000660
 8009f24:	200006c8 	.word	0x200006c8
 8009f28:	20000730 	.word	0x20000730

08009f2c <global_stdio_init.part.0>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <global_stdio_init.part.0+0x30>)
 8009f30:	4c0b      	ldr	r4, [pc, #44]	@ (8009f60 <global_stdio_init.part.0+0x34>)
 8009f32:	4a0c      	ldr	r2, [pc, #48]	@ (8009f64 <global_stdio_init.part.0+0x38>)
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	4620      	mov	r0, r4
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2104      	movs	r1, #4
 8009f3c:	f7ff ff94 	bl	8009e68 <std>
 8009f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f44:	2201      	movs	r2, #1
 8009f46:	2109      	movs	r1, #9
 8009f48:	f7ff ff8e 	bl	8009e68 <std>
 8009f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f50:	2202      	movs	r2, #2
 8009f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f56:	2112      	movs	r1, #18
 8009f58:	f7ff bf86 	b.w	8009e68 <std>
 8009f5c:	20000798 	.word	0x20000798
 8009f60:	20000660 	.word	0x20000660
 8009f64:	08009ed5 	.word	0x08009ed5

08009f68 <__sfp_lock_acquire>:
 8009f68:	4801      	ldr	r0, [pc, #4]	@ (8009f70 <__sfp_lock_acquire+0x8>)
 8009f6a:	f000 ba04 	b.w	800a376 <__retarget_lock_acquire_recursive>
 8009f6e:	bf00      	nop
 8009f70:	200007a1 	.word	0x200007a1

08009f74 <__sfp_lock_release>:
 8009f74:	4801      	ldr	r0, [pc, #4]	@ (8009f7c <__sfp_lock_release+0x8>)
 8009f76:	f000 b9ff 	b.w	800a378 <__retarget_lock_release_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	200007a1 	.word	0x200007a1

08009f80 <__sinit>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	4604      	mov	r4, r0
 8009f84:	f7ff fff0 	bl	8009f68 <__sfp_lock_acquire>
 8009f88:	6a23      	ldr	r3, [r4, #32]
 8009f8a:	b11b      	cbz	r3, 8009f94 <__sinit+0x14>
 8009f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f90:	f7ff bff0 	b.w	8009f74 <__sfp_lock_release>
 8009f94:	4b04      	ldr	r3, [pc, #16]	@ (8009fa8 <__sinit+0x28>)
 8009f96:	6223      	str	r3, [r4, #32]
 8009f98:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <__sinit+0x2c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1f5      	bne.n	8009f8c <__sinit+0xc>
 8009fa0:	f7ff ffc4 	bl	8009f2c <global_stdio_init.part.0>
 8009fa4:	e7f2      	b.n	8009f8c <__sinit+0xc>
 8009fa6:	bf00      	nop
 8009fa8:	08009eed 	.word	0x08009eed
 8009fac:	20000798 	.word	0x20000798

08009fb0 <_fwalk_sglue>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	4688      	mov	r8, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	2600      	movs	r6, #0
 8009fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc4:	d505      	bpl.n	8009fd2 <_fwalk_sglue+0x22>
 8009fc6:	6824      	ldr	r4, [r4, #0]
 8009fc8:	2c00      	cmp	r4, #0
 8009fca:	d1f7      	bne.n	8009fbc <_fwalk_sglue+0xc>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d907      	bls.n	8009fe8 <_fwalk_sglue+0x38>
 8009fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	d003      	beq.n	8009fe8 <_fwalk_sglue+0x38>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c0      	blx	r8
 8009fe6:	4306      	orrs	r6, r0
 8009fe8:	3568      	adds	r5, #104	@ 0x68
 8009fea:	e7e9      	b.n	8009fc0 <_fwalk_sglue+0x10>

08009fec <iprintf>:
 8009fec:	b40f      	push	{r0, r1, r2, r3}
 8009fee:	b507      	push	{r0, r1, r2, lr}
 8009ff0:	4906      	ldr	r1, [pc, #24]	@ (800a00c <iprintf+0x20>)
 8009ff2:	ab04      	add	r3, sp, #16
 8009ff4:	6808      	ldr	r0, [r1, #0]
 8009ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffa:	6881      	ldr	r1, [r0, #8]
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	f001 fcd3 	bl	800b9a8 <_vfiprintf_r>
 800a002:	b003      	add	sp, #12
 800a004:	f85d eb04 	ldr.w	lr, [sp], #4
 800a008:	b004      	add	sp, #16
 800a00a:	4770      	bx	lr
 800a00c:	20000030 	.word	0x20000030

0800a010 <_puts_r>:
 800a010:	6a03      	ldr	r3, [r0, #32]
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	6884      	ldr	r4, [r0, #8]
 800a016:	4605      	mov	r5, r0
 800a018:	460e      	mov	r6, r1
 800a01a:	b90b      	cbnz	r3, 800a020 <_puts_r+0x10>
 800a01c:	f7ff ffb0 	bl	8009f80 <__sinit>
 800a020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a022:	07db      	lsls	r3, r3, #31
 800a024:	d405      	bmi.n	800a032 <_puts_r+0x22>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	0598      	lsls	r0, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_puts_r+0x22>
 800a02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a02e:	f000 f9a2 	bl	800a376 <__retarget_lock_acquire_recursive>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	0719      	lsls	r1, r3, #28
 800a036:	d502      	bpl.n	800a03e <_puts_r+0x2e>
 800a038:	6923      	ldr	r3, [r4, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d135      	bne.n	800a0aa <_puts_r+0x9a>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f000 f8c5 	bl	800a1d0 <__swsetup_r>
 800a046:	b380      	cbz	r0, 800a0aa <_puts_r+0x9a>
 800a048:	f04f 35ff 	mov.w	r5, #4294967295
 800a04c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a04e:	07da      	lsls	r2, r3, #31
 800a050:	d405      	bmi.n	800a05e <_puts_r+0x4e>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	059b      	lsls	r3, r3, #22
 800a056:	d402      	bmi.n	800a05e <_puts_r+0x4e>
 800a058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a05a:	f000 f98d 	bl	800a378 <__retarget_lock_release_recursive>
 800a05e:	4628      	mov	r0, r5
 800a060:	bd70      	pop	{r4, r5, r6, pc}
 800a062:	2b00      	cmp	r3, #0
 800a064:	da04      	bge.n	800a070 <_puts_r+0x60>
 800a066:	69a2      	ldr	r2, [r4, #24]
 800a068:	429a      	cmp	r2, r3
 800a06a:	dc17      	bgt.n	800a09c <_puts_r+0x8c>
 800a06c:	290a      	cmp	r1, #10
 800a06e:	d015      	beq.n	800a09c <_puts_r+0x8c>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	6022      	str	r2, [r4, #0]
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a07e:	3b01      	subs	r3, #1
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	2900      	cmp	r1, #0
 800a084:	d1ed      	bne.n	800a062 <_puts_r+0x52>
 800a086:	2b00      	cmp	r3, #0
 800a088:	da11      	bge.n	800a0ae <_puts_r+0x9e>
 800a08a:	4622      	mov	r2, r4
 800a08c:	210a      	movs	r1, #10
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f85f 	bl	800a152 <__swbuf_r>
 800a094:	3001      	adds	r0, #1
 800a096:	d0d7      	beq.n	800a048 <_puts_r+0x38>
 800a098:	250a      	movs	r5, #10
 800a09a:	e7d7      	b.n	800a04c <_puts_r+0x3c>
 800a09c:	4622      	mov	r2, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 f857 	bl	800a152 <__swbuf_r>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d1e7      	bne.n	800a078 <_puts_r+0x68>
 800a0a8:	e7ce      	b.n	800a048 <_puts_r+0x38>
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	e7e4      	b.n	800a078 <_puts_r+0x68>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	e7ee      	b.n	800a098 <_puts_r+0x88>
	...

0800a0bc <puts>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	@ (800a0c8 <puts+0xc>)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f7ff bfa5 	b.w	800a010 <_puts_r>
 800a0c6:	bf00      	nop
 800a0c8:	20000030 	.word	0x20000030

0800a0cc <__sread>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d4:	f000 f900 	bl	800a2d8 <_read_r>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	bfab      	itete	ge
 800a0dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0de:	89a3      	ldrhlt	r3, [r4, #12]
 800a0e0:	181b      	addge	r3, r3, r0
 800a0e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0e6:	bfac      	ite	ge
 800a0e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0ea:	81a3      	strhlt	r3, [r4, #12]
 800a0ec:	bd10      	pop	{r4, pc}

0800a0ee <__swrite>:
 800a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	461f      	mov	r7, r3
 800a0f4:	898b      	ldrh	r3, [r1, #12]
 800a0f6:	05db      	lsls	r3, r3, #23
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4616      	mov	r6, r2
 800a0fe:	d505      	bpl.n	800a10c <__swrite+0x1e>
 800a100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a104:	2302      	movs	r3, #2
 800a106:	2200      	movs	r2, #0
 800a108:	f000 f8d4 	bl	800a2b4 <_lseek_r>
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	4632      	mov	r2, r6
 800a11a:	463b      	mov	r3, r7
 800a11c:	4628      	mov	r0, r5
 800a11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a122:	f000 b8eb 	b.w	800a2fc <_write_r>

0800a126 <__sseek>:
 800a126:	b510      	push	{r4, lr}
 800a128:	460c      	mov	r4, r1
 800a12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12e:	f000 f8c1 	bl	800a2b4 <_lseek_r>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	bf15      	itete	ne
 800a138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a13a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a13e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a142:	81a3      	strheq	r3, [r4, #12]
 800a144:	bf18      	it	ne
 800a146:	81a3      	strhne	r3, [r4, #12]
 800a148:	bd10      	pop	{r4, pc}

0800a14a <__sclose>:
 800a14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14e:	f000 b8a1 	b.w	800a294 <_close_r>

0800a152 <__swbuf_r>:
 800a152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a154:	460e      	mov	r6, r1
 800a156:	4614      	mov	r4, r2
 800a158:	4605      	mov	r5, r0
 800a15a:	b118      	cbz	r0, 800a164 <__swbuf_r+0x12>
 800a15c:	6a03      	ldr	r3, [r0, #32]
 800a15e:	b90b      	cbnz	r3, 800a164 <__swbuf_r+0x12>
 800a160:	f7ff ff0e 	bl	8009f80 <__sinit>
 800a164:	69a3      	ldr	r3, [r4, #24]
 800a166:	60a3      	str	r3, [r4, #8]
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	071a      	lsls	r2, r3, #28
 800a16c:	d501      	bpl.n	800a172 <__swbuf_r+0x20>
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	b943      	cbnz	r3, 800a184 <__swbuf_r+0x32>
 800a172:	4621      	mov	r1, r4
 800a174:	4628      	mov	r0, r5
 800a176:	f000 f82b 	bl	800a1d0 <__swsetup_r>
 800a17a:	b118      	cbz	r0, 800a184 <__swbuf_r+0x32>
 800a17c:	f04f 37ff 	mov.w	r7, #4294967295
 800a180:	4638      	mov	r0, r7
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	6922      	ldr	r2, [r4, #16]
 800a188:	1a98      	subs	r0, r3, r2
 800a18a:	6963      	ldr	r3, [r4, #20]
 800a18c:	b2f6      	uxtb	r6, r6
 800a18e:	4283      	cmp	r3, r0
 800a190:	4637      	mov	r7, r6
 800a192:	dc05      	bgt.n	800a1a0 <__swbuf_r+0x4e>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f001 fda2 	bl	800bce0 <_fflush_r>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1ed      	bne.n	800a17c <__swbuf_r+0x2a>
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	701e      	strb	r6, [r3, #0]
 800a1ae:	6962      	ldr	r2, [r4, #20]
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d004      	beq.n	800a1c0 <__swbuf_r+0x6e>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	07db      	lsls	r3, r3, #31
 800a1ba:	d5e1      	bpl.n	800a180 <__swbuf_r+0x2e>
 800a1bc:	2e0a      	cmp	r6, #10
 800a1be:	d1df      	bne.n	800a180 <__swbuf_r+0x2e>
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f001 fd8c 	bl	800bce0 <_fflush_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d0d9      	beq.n	800a180 <__swbuf_r+0x2e>
 800a1cc:	e7d6      	b.n	800a17c <__swbuf_r+0x2a>
	...

0800a1d0 <__swsetup_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4b29      	ldr	r3, [pc, #164]	@ (800a278 <__swsetup_r+0xa8>)
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	460c      	mov	r4, r1
 800a1da:	b118      	cbz	r0, 800a1e4 <__swsetup_r+0x14>
 800a1dc:	6a03      	ldr	r3, [r0, #32]
 800a1de:	b90b      	cbnz	r3, 800a1e4 <__swsetup_r+0x14>
 800a1e0:	f7ff fece 	bl	8009f80 <__sinit>
 800a1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e8:	0719      	lsls	r1, r3, #28
 800a1ea:	d422      	bmi.n	800a232 <__swsetup_r+0x62>
 800a1ec:	06da      	lsls	r2, r3, #27
 800a1ee:	d407      	bmi.n	800a200 <__swsetup_r+0x30>
 800a1f0:	2209      	movs	r2, #9
 800a1f2:	602a      	str	r2, [r5, #0]
 800a1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fe:	e033      	b.n	800a268 <__swsetup_r+0x98>
 800a200:	0758      	lsls	r0, r3, #29
 800a202:	d512      	bpl.n	800a22a <__swsetup_r+0x5a>
 800a204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a206:	b141      	cbz	r1, 800a21a <__swsetup_r+0x4a>
 800a208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a20c:	4299      	cmp	r1, r3
 800a20e:	d002      	beq.n	800a216 <__swsetup_r+0x46>
 800a210:	4628      	mov	r0, r5
 800a212:	f000 ff1d 	bl	800b050 <_free_r>
 800a216:	2300      	movs	r3, #0
 800a218:	6363      	str	r3, [r4, #52]	@ 0x34
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	2300      	movs	r3, #0
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	f043 0308 	orr.w	r3, r3, #8
 800a230:	81a3      	strh	r3, [r4, #12]
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	b94b      	cbnz	r3, 800a24a <__swsetup_r+0x7a>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a23c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a240:	d003      	beq.n	800a24a <__swsetup_r+0x7a>
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f001 fdab 	bl	800bda0 <__smakebuf_r>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	f013 0201 	ands.w	r2, r3, #1
 800a252:	d00a      	beq.n	800a26a <__swsetup_r+0x9a>
 800a254:	2200      	movs	r2, #0
 800a256:	60a2      	str	r2, [r4, #8]
 800a258:	6962      	ldr	r2, [r4, #20]
 800a25a:	4252      	negs	r2, r2
 800a25c:	61a2      	str	r2, [r4, #24]
 800a25e:	6922      	ldr	r2, [r4, #16]
 800a260:	b942      	cbnz	r2, 800a274 <__swsetup_r+0xa4>
 800a262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a266:	d1c5      	bne.n	800a1f4 <__swsetup_r+0x24>
 800a268:	bd38      	pop	{r3, r4, r5, pc}
 800a26a:	0799      	lsls	r1, r3, #30
 800a26c:	bf58      	it	pl
 800a26e:	6962      	ldrpl	r2, [r4, #20]
 800a270:	60a2      	str	r2, [r4, #8]
 800a272:	e7f4      	b.n	800a25e <__swsetup_r+0x8e>
 800a274:	2000      	movs	r0, #0
 800a276:	e7f7      	b.n	800a268 <__swsetup_r+0x98>
 800a278:	20000030 	.word	0x20000030

0800a27c <memset>:
 800a27c:	4402      	add	r2, r0
 800a27e:	4603      	mov	r3, r0
 800a280:	4293      	cmp	r3, r2
 800a282:	d100      	bne.n	800a286 <memset+0xa>
 800a284:	4770      	bx	lr
 800a286:	f803 1b01 	strb.w	r1, [r3], #1
 800a28a:	e7f9      	b.n	800a280 <memset+0x4>

0800a28c <_localeconv_r>:
 800a28c:	4800      	ldr	r0, [pc, #0]	@ (800a290 <_localeconv_r+0x4>)
 800a28e:	4770      	bx	lr
 800a290:	20000170 	.word	0x20000170

0800a294 <_close_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	@ (800a2b0 <_close_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f8 fcac 	bl	8002bfc <_close>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_close_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_close_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	2000079c 	.word	0x2000079c

0800a2b4 <_lseek_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	@ (800a2d4 <_lseek_r+0x20>)
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	602a      	str	r2, [r5, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7f8 fcc1 	bl	8002c4a <_lseek>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_lseek_r+0x1e>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_lseek_r+0x1e>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	2000079c 	.word	0x2000079c

0800a2d8 <_read_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	@ (800a2f8 <_read_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f8 fc4f 	bl	8002b8a <_read>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_read_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_read_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	2000079c 	.word	0x2000079c

0800a2fc <_write_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	@ (800a31c <_write_r+0x20>)
 800a300:	4604      	mov	r4, r0
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	2200      	movs	r2, #0
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f7f8 fc5a 	bl	8002bc4 <_write>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_write_r+0x1e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_write_r+0x1e>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	2000079c 	.word	0x2000079c

0800a320 <__errno>:
 800a320:	4b01      	ldr	r3, [pc, #4]	@ (800a328 <__errno+0x8>)
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000030 	.word	0x20000030

0800a32c <__libc_init_array>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	4d0d      	ldr	r5, [pc, #52]	@ (800a364 <__libc_init_array+0x38>)
 800a330:	4c0d      	ldr	r4, [pc, #52]	@ (800a368 <__libc_init_array+0x3c>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	2600      	movs	r6, #0
 800a338:	42a6      	cmp	r6, r4
 800a33a:	d109      	bne.n	800a350 <__libc_init_array+0x24>
 800a33c:	4d0b      	ldr	r5, [pc, #44]	@ (800a36c <__libc_init_array+0x40>)
 800a33e:	4c0c      	ldr	r4, [pc, #48]	@ (800a370 <__libc_init_array+0x44>)
 800a340:	f001 fe28 	bl	800bf94 <_init>
 800a344:	1b64      	subs	r4, r4, r5
 800a346:	10a4      	asrs	r4, r4, #2
 800a348:	2600      	movs	r6, #0
 800a34a:	42a6      	cmp	r6, r4
 800a34c:	d105      	bne.n	800a35a <__libc_init_array+0x2e>
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	f855 3b04 	ldr.w	r3, [r5], #4
 800a354:	4798      	blx	r3
 800a356:	3601      	adds	r6, #1
 800a358:	e7ee      	b.n	800a338 <__libc_init_array+0xc>
 800a35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a35e:	4798      	blx	r3
 800a360:	3601      	adds	r6, #1
 800a362:	e7f2      	b.n	800a34a <__libc_init_array+0x1e>
 800a364:	0800ce54 	.word	0x0800ce54
 800a368:	0800ce54 	.word	0x0800ce54
 800a36c:	0800ce54 	.word	0x0800ce54
 800a370:	0800ce58 	.word	0x0800ce58

0800a374 <__retarget_lock_init_recursive>:
 800a374:	4770      	bx	lr

0800a376 <__retarget_lock_acquire_recursive>:
 800a376:	4770      	bx	lr

0800a378 <__retarget_lock_release_recursive>:
 800a378:	4770      	bx	lr
	...

0800a37c <__assert_func>:
 800a37c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a37e:	4614      	mov	r4, r2
 800a380:	461a      	mov	r2, r3
 800a382:	4b09      	ldr	r3, [pc, #36]	@ (800a3a8 <__assert_func+0x2c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	68d8      	ldr	r0, [r3, #12]
 800a38a:	b954      	cbnz	r4, 800a3a2 <__assert_func+0x26>
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <__assert_func+0x30>)
 800a38e:	461c      	mov	r4, r3
 800a390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a394:	9100      	str	r1, [sp, #0]
 800a396:	462b      	mov	r3, r5
 800a398:	4905      	ldr	r1, [pc, #20]	@ (800a3b0 <__assert_func+0x34>)
 800a39a:	f001 fcc9 	bl	800bd30 <fiprintf>
 800a39e:	f001 fd7b 	bl	800be98 <abort>
 800a3a2:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <__assert_func+0x38>)
 800a3a4:	e7f4      	b.n	800a390 <__assert_func+0x14>
 800a3a6:	bf00      	nop
 800a3a8:	20000030 	.word	0x20000030
 800a3ac:	0800cb4b 	.word	0x0800cb4b
 800a3b0:	0800cb1d 	.word	0x0800cb1d
 800a3b4:	0800cb10 	.word	0x0800cb10

0800a3b8 <quorem>:
 800a3b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	6903      	ldr	r3, [r0, #16]
 800a3be:	690c      	ldr	r4, [r1, #16]
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	db7e      	blt.n	800a4c4 <quorem+0x10c>
 800a3c6:	3c01      	subs	r4, #1
 800a3c8:	f101 0814 	add.w	r8, r1, #20
 800a3cc:	00a3      	lsls	r3, r4, #2
 800a3ce:	f100 0514 	add.w	r5, r0, #20
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3ee:	d32e      	bcc.n	800a44e <quorem+0x96>
 800a3f0:	f04f 0a00 	mov.w	sl, #0
 800a3f4:	46c4      	mov	ip, r8
 800a3f6:	46ae      	mov	lr, r5
 800a3f8:	46d3      	mov	fp, sl
 800a3fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3fe:	b298      	uxth	r0, r3
 800a400:	fb06 a000 	mla	r0, r6, r0, sl
 800a404:	0c02      	lsrs	r2, r0, #16
 800a406:	0c1b      	lsrs	r3, r3, #16
 800a408:	fb06 2303 	mla	r3, r6, r3, r2
 800a40c:	f8de 2000 	ldr.w	r2, [lr]
 800a410:	b280      	uxth	r0, r0
 800a412:	b292      	uxth	r2, r2
 800a414:	1a12      	subs	r2, r2, r0
 800a416:	445a      	add	r2, fp
 800a418:	f8de 0000 	ldr.w	r0, [lr]
 800a41c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a420:	b29b      	uxth	r3, r3
 800a422:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a426:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a42a:	b292      	uxth	r2, r2
 800a42c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a430:	45e1      	cmp	r9, ip
 800a432:	f84e 2b04 	str.w	r2, [lr], #4
 800a436:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a43a:	d2de      	bcs.n	800a3fa <quorem+0x42>
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	58eb      	ldr	r3, [r5, r3]
 800a440:	b92b      	cbnz	r3, 800a44e <quorem+0x96>
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	3b04      	subs	r3, #4
 800a446:	429d      	cmp	r5, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	d32f      	bcc.n	800a4ac <quorem+0xf4>
 800a44c:	613c      	str	r4, [r7, #16]
 800a44e:	4638      	mov	r0, r7
 800a450:	f001 f978 	bl	800b744 <__mcmp>
 800a454:	2800      	cmp	r0, #0
 800a456:	db25      	blt.n	800a4a4 <quorem+0xec>
 800a458:	4629      	mov	r1, r5
 800a45a:	2000      	movs	r0, #0
 800a45c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a460:	f8d1 c000 	ldr.w	ip, [r1]
 800a464:	fa1f fe82 	uxth.w	lr, r2
 800a468:	fa1f f38c 	uxth.w	r3, ip
 800a46c:	eba3 030e 	sub.w	r3, r3, lr
 800a470:	4403      	add	r3, r0
 800a472:	0c12      	lsrs	r2, r2, #16
 800a474:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a478:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a482:	45c1      	cmp	r9, r8
 800a484:	f841 3b04 	str.w	r3, [r1], #4
 800a488:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a48c:	d2e6      	bcs.n	800a45c <quorem+0xa4>
 800a48e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a496:	b922      	cbnz	r2, 800a4a2 <quorem+0xea>
 800a498:	3b04      	subs	r3, #4
 800a49a:	429d      	cmp	r5, r3
 800a49c:	461a      	mov	r2, r3
 800a49e:	d30b      	bcc.n	800a4b8 <quorem+0x100>
 800a4a0:	613c      	str	r4, [r7, #16]
 800a4a2:	3601      	adds	r6, #1
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	b003      	add	sp, #12
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	6812      	ldr	r2, [r2, #0]
 800a4ae:	3b04      	subs	r3, #4
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	d1cb      	bne.n	800a44c <quorem+0x94>
 800a4b4:	3c01      	subs	r4, #1
 800a4b6:	e7c6      	b.n	800a446 <quorem+0x8e>
 800a4b8:	6812      	ldr	r2, [r2, #0]
 800a4ba:	3b04      	subs	r3, #4
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	d1ef      	bne.n	800a4a0 <quorem+0xe8>
 800a4c0:	3c01      	subs	r4, #1
 800a4c2:	e7ea      	b.n	800a49a <quorem+0xe2>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7ee      	b.n	800a4a6 <quorem+0xee>

0800a4c8 <_dtoa_r>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	69c7      	ldr	r7, [r0, #28]
 800a4ce:	b099      	sub	sp, #100	@ 0x64
 800a4d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4d4:	ec55 4b10 	vmov	r4, r5, d0
 800a4d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a4da:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4dc:	4683      	mov	fp, r0
 800a4de:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4e2:	b97f      	cbnz	r7, 800a504 <_dtoa_r+0x3c>
 800a4e4:	2010      	movs	r0, #16
 800a4e6:	f000 fdfd 	bl	800b0e4 <malloc>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800a4f0:	b920      	cbnz	r0, 800a4fc <_dtoa_r+0x34>
 800a4f2:	4ba7      	ldr	r3, [pc, #668]	@ (800a790 <_dtoa_r+0x2c8>)
 800a4f4:	21ef      	movs	r1, #239	@ 0xef
 800a4f6:	48a7      	ldr	r0, [pc, #668]	@ (800a794 <_dtoa_r+0x2cc>)
 800a4f8:	f7ff ff40 	bl	800a37c <__assert_func>
 800a4fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a500:	6007      	str	r7, [r0, #0]
 800a502:	60c7      	str	r7, [r0, #12]
 800a504:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a508:	6819      	ldr	r1, [r3, #0]
 800a50a:	b159      	cbz	r1, 800a524 <_dtoa_r+0x5c>
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	604a      	str	r2, [r1, #4]
 800a510:	2301      	movs	r3, #1
 800a512:	4093      	lsls	r3, r2
 800a514:	608b      	str	r3, [r1, #8]
 800a516:	4658      	mov	r0, fp
 800a518:	f000 feda 	bl	800b2d0 <_Bfree>
 800a51c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a520:	2200      	movs	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	1e2b      	subs	r3, r5, #0
 800a526:	bfb9      	ittee	lt
 800a528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a52c:	9303      	strlt	r3, [sp, #12]
 800a52e:	2300      	movge	r3, #0
 800a530:	6033      	strge	r3, [r6, #0]
 800a532:	9f03      	ldr	r7, [sp, #12]
 800a534:	4b98      	ldr	r3, [pc, #608]	@ (800a798 <_dtoa_r+0x2d0>)
 800a536:	bfbc      	itt	lt
 800a538:	2201      	movlt	r2, #1
 800a53a:	6032      	strlt	r2, [r6, #0]
 800a53c:	43bb      	bics	r3, r7
 800a53e:	d112      	bne.n	800a566 <_dtoa_r+0x9e>
 800a540:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a542:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a54c:	4323      	orrs	r3, r4
 800a54e:	f000 854d 	beq.w	800afec <_dtoa_r+0xb24>
 800a552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a554:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a7ac <_dtoa_r+0x2e4>
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 854f 	beq.w	800affc <_dtoa_r+0xb34>
 800a55e:	f10a 0303 	add.w	r3, sl, #3
 800a562:	f000 bd49 	b.w	800aff8 <_dtoa_r+0xb30>
 800a566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	ec51 0b17 	vmov	r0, r1, d7
 800a570:	2300      	movs	r3, #0
 800a572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a576:	f7f6 faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a57a:	4680      	mov	r8, r0
 800a57c:	b158      	cbz	r0, 800a596 <_dtoa_r+0xce>
 800a57e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a580:	2301      	movs	r3, #1
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a586:	b113      	cbz	r3, 800a58e <_dtoa_r+0xc6>
 800a588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a58a:	4b84      	ldr	r3, [pc, #528]	@ (800a79c <_dtoa_r+0x2d4>)
 800a58c:	6013      	str	r3, [r2, #0]
 800a58e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a7b0 <_dtoa_r+0x2e8>
 800a592:	f000 bd33 	b.w	800affc <_dtoa_r+0xb34>
 800a596:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a59a:	aa16      	add	r2, sp, #88	@ 0x58
 800a59c:	a917      	add	r1, sp, #92	@ 0x5c
 800a59e:	4658      	mov	r0, fp
 800a5a0:	f001 f980 	bl	800b8a4 <__d2b>
 800a5a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a5a8:	4681      	mov	r9, r0
 800a5aa:	2e00      	cmp	r6, #0
 800a5ac:	d077      	beq.n	800a69e <_dtoa_r+0x1d6>
 800a5ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4b74      	ldr	r3, [pc, #464]	@ (800a7a0 <_dtoa_r+0x2d8>)
 800a5ce:	f7f5 fe63 	bl	8000298 <__aeabi_dsub>
 800a5d2:	a369      	add	r3, pc, #420	@ (adr r3, 800a778 <_dtoa_r+0x2b0>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f6 f816 	bl	8000608 <__aeabi_dmul>
 800a5dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a780 <_dtoa_r+0x2b8>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f7f5 fe5b 	bl	800029c <__adddf3>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	f7f5 ffa2 	bl	8000534 <__aeabi_i2d>
 800a5f0:	a365      	add	r3, pc, #404	@ (adr r3, 800a788 <_dtoa_r+0x2c0>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f6 f807 	bl	8000608 <__aeabi_dmul>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f5 fe4b 	bl	800029c <__adddf3>
 800a606:	4604      	mov	r4, r0
 800a608:	460d      	mov	r5, r1
 800a60a:	f7f6 faad 	bl	8000b68 <__aeabi_d2iz>
 800a60e:	2200      	movs	r2, #0
 800a610:	4607      	mov	r7, r0
 800a612:	2300      	movs	r3, #0
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f6 fa68 	bl	8000aec <__aeabi_dcmplt>
 800a61c:	b140      	cbz	r0, 800a630 <_dtoa_r+0x168>
 800a61e:	4638      	mov	r0, r7
 800a620:	f7f5 ff88 	bl	8000534 <__aeabi_i2d>
 800a624:	4622      	mov	r2, r4
 800a626:	462b      	mov	r3, r5
 800a628:	f7f6 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800a62c:	b900      	cbnz	r0, 800a630 <_dtoa_r+0x168>
 800a62e:	3f01      	subs	r7, #1
 800a630:	2f16      	cmp	r7, #22
 800a632:	d851      	bhi.n	800a6d8 <_dtoa_r+0x210>
 800a634:	4b5b      	ldr	r3, [pc, #364]	@ (800a7a4 <_dtoa_r+0x2dc>)
 800a636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a642:	f7f6 fa53 	bl	8000aec <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	d048      	beq.n	800a6dc <_dtoa_r+0x214>
 800a64a:	3f01      	subs	r7, #1
 800a64c:	2300      	movs	r3, #0
 800a64e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a652:	1b9b      	subs	r3, r3, r6
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	bf44      	itt	mi
 800a658:	f1c3 0801 	rsbmi	r8, r3, #1
 800a65c:	2300      	movmi	r3, #0
 800a65e:	9208      	str	r2, [sp, #32]
 800a660:	bf54      	ite	pl
 800a662:	f04f 0800 	movpl.w	r8, #0
 800a666:	9308      	strmi	r3, [sp, #32]
 800a668:	2f00      	cmp	r7, #0
 800a66a:	db39      	blt.n	800a6e0 <_dtoa_r+0x218>
 800a66c:	9b08      	ldr	r3, [sp, #32]
 800a66e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a670:	443b      	add	r3, r7
 800a672:	9308      	str	r3, [sp, #32]
 800a674:	2300      	movs	r3, #0
 800a676:	930a      	str	r3, [sp, #40]	@ 0x28
 800a678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	d864      	bhi.n	800a748 <_dtoa_r+0x280>
 800a67e:	2b05      	cmp	r3, #5
 800a680:	bfc4      	itt	gt
 800a682:	3b04      	subgt	r3, #4
 800a684:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a688:	f1a3 0302 	sub.w	r3, r3, #2
 800a68c:	bfcc      	ite	gt
 800a68e:	2400      	movgt	r4, #0
 800a690:	2401      	movle	r4, #1
 800a692:	2b03      	cmp	r3, #3
 800a694:	d863      	bhi.n	800a75e <_dtoa_r+0x296>
 800a696:	e8df f003 	tbb	[pc, r3]
 800a69a:	372a      	.short	0x372a
 800a69c:	5535      	.short	0x5535
 800a69e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a6a2:	441e      	add	r6, r3
 800a6a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	bfc1      	itttt	gt
 800a6ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6b0:	409f      	lslgt	r7, r3
 800a6b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6ba:	bfd6      	itet	le
 800a6bc:	f1c3 0320 	rsble	r3, r3, #32
 800a6c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6c4:	fa04 f003 	lslle.w	r0, r4, r3
 800a6c8:	f7f5 ff24 	bl	8000514 <__aeabi_ui2d>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a6d2:	3e01      	subs	r6, #1
 800a6d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a6d6:	e777      	b.n	800a5c8 <_dtoa_r+0x100>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e7b8      	b.n	800a64e <_dtoa_r+0x186>
 800a6dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a6de:	e7b7      	b.n	800a650 <_dtoa_r+0x188>
 800a6e0:	427b      	negs	r3, r7
 800a6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	eba8 0807 	sub.w	r8, r8, r7
 800a6ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6ec:	e7c4      	b.n	800a678 <_dtoa_r+0x1b0>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dc35      	bgt.n	800a764 <_dtoa_r+0x29c>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	461a      	mov	r2, r3
 800a700:	920e      	str	r2, [sp, #56]	@ 0x38
 800a702:	e00b      	b.n	800a71c <_dtoa_r+0x254>
 800a704:	2301      	movs	r3, #1
 800a706:	e7f3      	b.n	800a6f0 <_dtoa_r+0x228>
 800a708:	2300      	movs	r3, #0
 800a70a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a70e:	18fb      	adds	r3, r7, r3
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	3301      	adds	r3, #1
 800a714:	2b01      	cmp	r3, #1
 800a716:	9307      	str	r3, [sp, #28]
 800a718:	bfb8      	it	lt
 800a71a:	2301      	movlt	r3, #1
 800a71c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a720:	2100      	movs	r1, #0
 800a722:	2204      	movs	r2, #4
 800a724:	f102 0514 	add.w	r5, r2, #20
 800a728:	429d      	cmp	r5, r3
 800a72a:	d91f      	bls.n	800a76c <_dtoa_r+0x2a4>
 800a72c:	6041      	str	r1, [r0, #4]
 800a72e:	4658      	mov	r0, fp
 800a730:	f000 fd8e 	bl	800b250 <_Balloc>
 800a734:	4682      	mov	sl, r0
 800a736:	2800      	cmp	r0, #0
 800a738:	d13c      	bne.n	800a7b4 <_dtoa_r+0x2ec>
 800a73a:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a8 <_dtoa_r+0x2e0>)
 800a73c:	4602      	mov	r2, r0
 800a73e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a742:	e6d8      	b.n	800a4f6 <_dtoa_r+0x2e>
 800a744:	2301      	movs	r3, #1
 800a746:	e7e0      	b.n	800a70a <_dtoa_r+0x242>
 800a748:	2401      	movs	r4, #1
 800a74a:	2300      	movs	r3, #0
 800a74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a74e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	9307      	str	r3, [sp, #28]
 800a758:	2200      	movs	r2, #0
 800a75a:	2312      	movs	r3, #18
 800a75c:	e7d0      	b.n	800a700 <_dtoa_r+0x238>
 800a75e:	2301      	movs	r3, #1
 800a760:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a762:	e7f5      	b.n	800a750 <_dtoa_r+0x288>
 800a764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	9307      	str	r3, [sp, #28]
 800a76a:	e7d7      	b.n	800a71c <_dtoa_r+0x254>
 800a76c:	3101      	adds	r1, #1
 800a76e:	0052      	lsls	r2, r2, #1
 800a770:	e7d8      	b.n	800a724 <_dtoa_r+0x25c>
 800a772:	bf00      	nop
 800a774:	f3af 8000 	nop.w
 800a778:	636f4361 	.word	0x636f4361
 800a77c:	3fd287a7 	.word	0x3fd287a7
 800a780:	8b60c8b3 	.word	0x8b60c8b3
 800a784:	3fc68a28 	.word	0x3fc68a28
 800a788:	509f79fb 	.word	0x509f79fb
 800a78c:	3fd34413 	.word	0x3fd34413
 800a790:	0800cb59 	.word	0x0800cb59
 800a794:	0800cb70 	.word	0x0800cb70
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	0800caed 	.word	0x0800caed
 800a7a0:	3ff80000 	.word	0x3ff80000
 800a7a4:	0800cc68 	.word	0x0800cc68
 800a7a8:	0800cbc8 	.word	0x0800cbc8
 800a7ac:	0800cb55 	.word	0x0800cb55
 800a7b0:	0800caec 	.word	0x0800caec
 800a7b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7b8:	6018      	str	r0, [r3, #0]
 800a7ba:	9b07      	ldr	r3, [sp, #28]
 800a7bc:	2b0e      	cmp	r3, #14
 800a7be:	f200 80a4 	bhi.w	800a90a <_dtoa_r+0x442>
 800a7c2:	2c00      	cmp	r4, #0
 800a7c4:	f000 80a1 	beq.w	800a90a <_dtoa_r+0x442>
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	dd33      	ble.n	800a834 <_dtoa_r+0x36c>
 800a7cc:	4bad      	ldr	r3, [pc, #692]	@ (800aa84 <_dtoa_r+0x5bc>)
 800a7ce:	f007 020f 	and.w	r2, r7, #15
 800a7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d6:	ed93 7b00 	vldr	d7, [r3]
 800a7da:	05f8      	lsls	r0, r7, #23
 800a7dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a7e4:	d516      	bpl.n	800a814 <_dtoa_r+0x34c>
 800a7e6:	4ba8      	ldr	r3, [pc, #672]	@ (800aa88 <_dtoa_r+0x5c0>)
 800a7e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7f0:	f7f6 f834 	bl	800085c <__aeabi_ddiv>
 800a7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7f8:	f004 040f 	and.w	r4, r4, #15
 800a7fc:	2603      	movs	r6, #3
 800a7fe:	4da2      	ldr	r5, [pc, #648]	@ (800aa88 <_dtoa_r+0x5c0>)
 800a800:	b954      	cbnz	r4, 800a818 <_dtoa_r+0x350>
 800a802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80a:	f7f6 f827 	bl	800085c <__aeabi_ddiv>
 800a80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a812:	e028      	b.n	800a866 <_dtoa_r+0x39e>
 800a814:	2602      	movs	r6, #2
 800a816:	e7f2      	b.n	800a7fe <_dtoa_r+0x336>
 800a818:	07e1      	lsls	r1, r4, #31
 800a81a:	d508      	bpl.n	800a82e <_dtoa_r+0x366>
 800a81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a824:	f7f5 fef0 	bl	8000608 <__aeabi_dmul>
 800a828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a82c:	3601      	adds	r6, #1
 800a82e:	1064      	asrs	r4, r4, #1
 800a830:	3508      	adds	r5, #8
 800a832:	e7e5      	b.n	800a800 <_dtoa_r+0x338>
 800a834:	f000 80d2 	beq.w	800a9dc <_dtoa_r+0x514>
 800a838:	427c      	negs	r4, r7
 800a83a:	4b92      	ldr	r3, [pc, #584]	@ (800aa84 <_dtoa_r+0x5bc>)
 800a83c:	4d92      	ldr	r5, [pc, #584]	@ (800aa88 <_dtoa_r+0x5c0>)
 800a83e:	f004 020f 	and.w	r2, r4, #15
 800a842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a84e:	f7f5 fedb 	bl	8000608 <__aeabi_dmul>
 800a852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a856:	1124      	asrs	r4, r4, #4
 800a858:	2300      	movs	r3, #0
 800a85a:	2602      	movs	r6, #2
 800a85c:	2c00      	cmp	r4, #0
 800a85e:	f040 80b2 	bne.w	800a9c6 <_dtoa_r+0x4fe>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d3      	bne.n	800a80e <_dtoa_r+0x346>
 800a866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a868:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80b7 	beq.w	800a9e0 <_dtoa_r+0x518>
 800a872:	4b86      	ldr	r3, [pc, #536]	@ (800aa8c <_dtoa_r+0x5c4>)
 800a874:	2200      	movs	r2, #0
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f6 f937 	bl	8000aec <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	f000 80ae 	beq.w	800a9e0 <_dtoa_r+0x518>
 800a884:	9b07      	ldr	r3, [sp, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80aa 	beq.w	800a9e0 <_dtoa_r+0x518>
 800a88c:	9b00      	ldr	r3, [sp, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd37      	ble.n	800a902 <_dtoa_r+0x43a>
 800a892:	1e7b      	subs	r3, r7, #1
 800a894:	9304      	str	r3, [sp, #16]
 800a896:	4620      	mov	r0, r4
 800a898:	4b7d      	ldr	r3, [pc, #500]	@ (800aa90 <_dtoa_r+0x5c8>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	4629      	mov	r1, r5
 800a89e:	f7f5 feb3 	bl	8000608 <__aeabi_dmul>
 800a8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a6:	9c00      	ldr	r4, [sp, #0]
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7f5 fe42 	bl	8000534 <__aeabi_i2d>
 800a8b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8b4:	f7f5 fea8 	bl	8000608 <__aeabi_dmul>
 800a8b8:	4b76      	ldr	r3, [pc, #472]	@ (800aa94 <_dtoa_r+0x5cc>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f7f5 fcee 	bl	800029c <__adddf3>
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	f040 808d 	bne.w	800a9e6 <_dtoa_r+0x51e>
 800a8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d0:	4b71      	ldr	r3, [pc, #452]	@ (800aa98 <_dtoa_r+0x5d0>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f5 fce0 	bl	8000298 <__aeabi_dsub>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4633      	mov	r3, r6
 800a8e4:	f7f6 f920 	bl	8000b28 <__aeabi_dcmpgt>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f040 828b 	bne.w	800ae04 <_dtoa_r+0x93c>
 800a8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8f8:	f7f6 f8f8 	bl	8000aec <__aeabi_dcmplt>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f040 8128 	bne.w	800ab52 <_dtoa_r+0x68a>
 800a902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a90a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f2c0 815a 	blt.w	800abc6 <_dtoa_r+0x6fe>
 800a912:	2f0e      	cmp	r7, #14
 800a914:	f300 8157 	bgt.w	800abc6 <_dtoa_r+0x6fe>
 800a918:	4b5a      	ldr	r3, [pc, #360]	@ (800aa84 <_dtoa_r+0x5bc>)
 800a91a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a91e:	ed93 7b00 	vldr	d7, [r3]
 800a922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a924:	2b00      	cmp	r3, #0
 800a926:	ed8d 7b00 	vstr	d7, [sp]
 800a92a:	da03      	bge.n	800a934 <_dtoa_r+0x46c>
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f340 8101 	ble.w	800ab36 <_dtoa_r+0x66e>
 800a934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a938:	4656      	mov	r6, sl
 800a93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f5 ff8b 	bl	800085c <__aeabi_ddiv>
 800a946:	f7f6 f90f 	bl	8000b68 <__aeabi_d2iz>
 800a94a:	4680      	mov	r8, r0
 800a94c:	f7f5 fdf2 	bl	8000534 <__aeabi_i2d>
 800a950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4620      	mov	r0, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a964:	f7f5 fc98 	bl	8000298 <__aeabi_dsub>
 800a968:	f806 4b01 	strb.w	r4, [r6], #1
 800a96c:	9d07      	ldr	r5, [sp, #28]
 800a96e:	eba6 040a 	sub.w	r4, r6, sl
 800a972:	42a5      	cmp	r5, r4
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	f040 8117 	bne.w	800abaa <_dtoa_r+0x6e2>
 800a97c:	f7f5 fc8e 	bl	800029c <__adddf3>
 800a980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	f7f6 f8ce 	bl	8000b28 <__aeabi_dcmpgt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f040 80f9 	bne.w	800ab84 <_dtoa_r+0x6bc>
 800a992:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a99e:	b118      	cbz	r0, 800a9a8 <_dtoa_r+0x4e0>
 800a9a0:	f018 0f01 	tst.w	r8, #1
 800a9a4:	f040 80ee 	bne.w	800ab84 <_dtoa_r+0x6bc>
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	4658      	mov	r0, fp
 800a9ac:	f000 fc90 	bl	800b2d0 <_Bfree>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	7033      	strb	r3, [r6, #0]
 800a9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9b6:	3701      	adds	r7, #1
 800a9b8:	601f      	str	r7, [r3, #0]
 800a9ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 831d 	beq.w	800affc <_dtoa_r+0xb34>
 800a9c2:	601e      	str	r6, [r3, #0]
 800a9c4:	e31a      	b.n	800affc <_dtoa_r+0xb34>
 800a9c6:	07e2      	lsls	r2, r4, #31
 800a9c8:	d505      	bpl.n	800a9d6 <_dtoa_r+0x50e>
 800a9ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9ce:	f7f5 fe1b 	bl	8000608 <__aeabi_dmul>
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	1064      	asrs	r4, r4, #1
 800a9d8:	3508      	adds	r5, #8
 800a9da:	e73f      	b.n	800a85c <_dtoa_r+0x394>
 800a9dc:	2602      	movs	r6, #2
 800a9de:	e742      	b.n	800a866 <_dtoa_r+0x39e>
 800a9e0:	9c07      	ldr	r4, [sp, #28]
 800a9e2:	9704      	str	r7, [sp, #16]
 800a9e4:	e761      	b.n	800a8aa <_dtoa_r+0x3e2>
 800a9e6:	4b27      	ldr	r3, [pc, #156]	@ (800aa84 <_dtoa_r+0x5bc>)
 800a9e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9f2:	4454      	add	r4, sl
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d053      	beq.n	800aaa0 <_dtoa_r+0x5d8>
 800a9f8:	4928      	ldr	r1, [pc, #160]	@ (800aa9c <_dtoa_r+0x5d4>)
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	f7f5 ff2e 	bl	800085c <__aeabi_ddiv>
 800aa00:	4633      	mov	r3, r6
 800aa02:	462a      	mov	r2, r5
 800aa04:	f7f5 fc48 	bl	8000298 <__aeabi_dsub>
 800aa08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa0c:	4656      	mov	r6, sl
 800aa0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa12:	f7f6 f8a9 	bl	8000b68 <__aeabi_d2iz>
 800aa16:	4605      	mov	r5, r0
 800aa18:	f7f5 fd8c 	bl	8000534 <__aeabi_i2d>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa24:	f7f5 fc38 	bl	8000298 <__aeabi_dsub>
 800aa28:	3530      	adds	r5, #48	@ 0x30
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa32:	f806 5b01 	strb.w	r5, [r6], #1
 800aa36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa3a:	f7f6 f857 	bl	8000aec <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d171      	bne.n	800ab26 <_dtoa_r+0x65e>
 800aa42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa46:	4911      	ldr	r1, [pc, #68]	@ (800aa8c <_dtoa_r+0x5c4>)
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f7f5 fc25 	bl	8000298 <__aeabi_dsub>
 800aa4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa52:	f7f6 f84b 	bl	8000aec <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8095 	bne.w	800ab86 <_dtoa_r+0x6be>
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	f43f af50 	beq.w	800a902 <_dtoa_r+0x43a>
 800aa62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa66:	4b0a      	ldr	r3, [pc, #40]	@ (800aa90 <_dtoa_r+0x5c8>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f7f5 fdcd 	bl	8000608 <__aeabi_dmul>
 800aa6e:	4b08      	ldr	r3, [pc, #32]	@ (800aa90 <_dtoa_r+0x5c8>)
 800aa70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa74:	2200      	movs	r2, #0
 800aa76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa7a:	f7f5 fdc5 	bl	8000608 <__aeabi_dmul>
 800aa7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa82:	e7c4      	b.n	800aa0e <_dtoa_r+0x546>
 800aa84:	0800cc68 	.word	0x0800cc68
 800aa88:	0800cc40 	.word	0x0800cc40
 800aa8c:	3ff00000 	.word	0x3ff00000
 800aa90:	40240000 	.word	0x40240000
 800aa94:	401c0000 	.word	0x401c0000
 800aa98:	40140000 	.word	0x40140000
 800aa9c:	3fe00000 	.word	0x3fe00000
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7f5 fdb0 	bl	8000608 <__aeabi_dmul>
 800aaa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aaac:	9415      	str	r4, [sp, #84]	@ 0x54
 800aaae:	4656      	mov	r6, sl
 800aab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab4:	f7f6 f858 	bl	8000b68 <__aeabi_d2iz>
 800aab8:	4605      	mov	r5, r0
 800aaba:	f7f5 fd3b 	bl	8000534 <__aeabi_i2d>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac6:	f7f5 fbe7 	bl	8000298 <__aeabi_dsub>
 800aaca:	3530      	adds	r5, #48	@ 0x30
 800aacc:	f806 5b01 	strb.w	r5, [r6], #1
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	42a6      	cmp	r6, r4
 800aad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aada:	f04f 0200 	mov.w	r2, #0
 800aade:	d124      	bne.n	800ab2a <_dtoa_r+0x662>
 800aae0:	4bac      	ldr	r3, [pc, #688]	@ (800ad94 <_dtoa_r+0x8cc>)
 800aae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aae6:	f7f5 fbd9 	bl	800029c <__adddf3>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf2:	f7f6 f819 	bl	8000b28 <__aeabi_dcmpgt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d145      	bne.n	800ab86 <_dtoa_r+0x6be>
 800aafa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aafe:	49a5      	ldr	r1, [pc, #660]	@ (800ad94 <_dtoa_r+0x8cc>)
 800ab00:	2000      	movs	r0, #0
 800ab02:	f7f5 fbc9 	bl	8000298 <__aeabi_dsub>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab0e:	f7f5 ffed 	bl	8000aec <__aeabi_dcmplt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f43f aef5 	beq.w	800a902 <_dtoa_r+0x43a>
 800ab18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ab1a:	1e73      	subs	r3, r6, #1
 800ab1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab22:	2b30      	cmp	r3, #48	@ 0x30
 800ab24:	d0f8      	beq.n	800ab18 <_dtoa_r+0x650>
 800ab26:	9f04      	ldr	r7, [sp, #16]
 800ab28:	e73e      	b.n	800a9a8 <_dtoa_r+0x4e0>
 800ab2a:	4b9b      	ldr	r3, [pc, #620]	@ (800ad98 <_dtoa_r+0x8d0>)
 800ab2c:	f7f5 fd6c 	bl	8000608 <__aeabi_dmul>
 800ab30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab34:	e7bc      	b.n	800aab0 <_dtoa_r+0x5e8>
 800ab36:	d10c      	bne.n	800ab52 <_dtoa_r+0x68a>
 800ab38:	4b98      	ldr	r3, [pc, #608]	@ (800ad9c <_dtoa_r+0x8d4>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab40:	f7f5 fd62 	bl	8000608 <__aeabi_dmul>
 800ab44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab48:	f7f5 ffe4 	bl	8000b14 <__aeabi_dcmpge>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f000 8157 	beq.w	800ae00 <_dtoa_r+0x938>
 800ab52:	2400      	movs	r4, #0
 800ab54:	4625      	mov	r5, r4
 800ab56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab58:	43db      	mvns	r3, r3
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	4656      	mov	r6, sl
 800ab5e:	2700      	movs	r7, #0
 800ab60:	4621      	mov	r1, r4
 800ab62:	4658      	mov	r0, fp
 800ab64:	f000 fbb4 	bl	800b2d0 <_Bfree>
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	d0dc      	beq.n	800ab26 <_dtoa_r+0x65e>
 800ab6c:	b12f      	cbz	r7, 800ab7a <_dtoa_r+0x6b2>
 800ab6e:	42af      	cmp	r7, r5
 800ab70:	d003      	beq.n	800ab7a <_dtoa_r+0x6b2>
 800ab72:	4639      	mov	r1, r7
 800ab74:	4658      	mov	r0, fp
 800ab76:	f000 fbab 	bl	800b2d0 <_Bfree>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4658      	mov	r0, fp
 800ab7e:	f000 fba7 	bl	800b2d0 <_Bfree>
 800ab82:	e7d0      	b.n	800ab26 <_dtoa_r+0x65e>
 800ab84:	9704      	str	r7, [sp, #16]
 800ab86:	4633      	mov	r3, r6
 800ab88:	461e      	mov	r6, r3
 800ab8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab8e:	2a39      	cmp	r2, #57	@ 0x39
 800ab90:	d107      	bne.n	800aba2 <_dtoa_r+0x6da>
 800ab92:	459a      	cmp	sl, r3
 800ab94:	d1f8      	bne.n	800ab88 <_dtoa_r+0x6c0>
 800ab96:	9a04      	ldr	r2, [sp, #16]
 800ab98:	3201      	adds	r2, #1
 800ab9a:	9204      	str	r2, [sp, #16]
 800ab9c:	2230      	movs	r2, #48	@ 0x30
 800ab9e:	f88a 2000 	strb.w	r2, [sl]
 800aba2:	781a      	ldrb	r2, [r3, #0]
 800aba4:	3201      	adds	r2, #1
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	e7bd      	b.n	800ab26 <_dtoa_r+0x65e>
 800abaa:	4b7b      	ldr	r3, [pc, #492]	@ (800ad98 <_dtoa_r+0x8d0>)
 800abac:	2200      	movs	r2, #0
 800abae:	f7f5 fd2b 	bl	8000608 <__aeabi_dmul>
 800abb2:	2200      	movs	r2, #0
 800abb4:	2300      	movs	r3, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	f7f5 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f aebb 	beq.w	800a93a <_dtoa_r+0x472>
 800abc4:	e6f0      	b.n	800a9a8 <_dtoa_r+0x4e0>
 800abc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abc8:	2a00      	cmp	r2, #0
 800abca:	f000 80db 	beq.w	800ad84 <_dtoa_r+0x8bc>
 800abce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd0:	2a01      	cmp	r2, #1
 800abd2:	f300 80bf 	bgt.w	800ad54 <_dtoa_r+0x88c>
 800abd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800abd8:	2a00      	cmp	r2, #0
 800abda:	f000 80b7 	beq.w	800ad4c <_dtoa_r+0x884>
 800abde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800abe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800abe4:	4646      	mov	r6, r8
 800abe6:	9a08      	ldr	r2, [sp, #32]
 800abe8:	2101      	movs	r1, #1
 800abea:	441a      	add	r2, r3
 800abec:	4658      	mov	r0, fp
 800abee:	4498      	add	r8, r3
 800abf0:	9208      	str	r2, [sp, #32]
 800abf2:	f000 fc21 	bl	800b438 <__i2b>
 800abf6:	4605      	mov	r5, r0
 800abf8:	b15e      	cbz	r6, 800ac12 <_dtoa_r+0x74a>
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dd08      	ble.n	800ac12 <_dtoa_r+0x74a>
 800ac00:	42b3      	cmp	r3, r6
 800ac02:	9a08      	ldr	r2, [sp, #32]
 800ac04:	bfa8      	it	ge
 800ac06:	4633      	movge	r3, r6
 800ac08:	eba8 0803 	sub.w	r8, r8, r3
 800ac0c:	1af6      	subs	r6, r6, r3
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	9308      	str	r3, [sp, #32]
 800ac12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac14:	b1f3      	cbz	r3, 800ac54 <_dtoa_r+0x78c>
 800ac16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80b7 	beq.w	800ad8c <_dtoa_r+0x8c4>
 800ac1e:	b18c      	cbz	r4, 800ac44 <_dtoa_r+0x77c>
 800ac20:	4629      	mov	r1, r5
 800ac22:	4622      	mov	r2, r4
 800ac24:	4658      	mov	r0, fp
 800ac26:	f000 fcc7 	bl	800b5b8 <__pow5mult>
 800ac2a:	464a      	mov	r2, r9
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4605      	mov	r5, r0
 800ac30:	4658      	mov	r0, fp
 800ac32:	f000 fc17 	bl	800b464 <__multiply>
 800ac36:	4649      	mov	r1, r9
 800ac38:	9004      	str	r0, [sp, #16]
 800ac3a:	4658      	mov	r0, fp
 800ac3c:	f000 fb48 	bl	800b2d0 <_Bfree>
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	4699      	mov	r9, r3
 800ac44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac46:	1b1a      	subs	r2, r3, r4
 800ac48:	d004      	beq.n	800ac54 <_dtoa_r+0x78c>
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	f000 fcb3 	bl	800b5b8 <__pow5mult>
 800ac52:	4681      	mov	r9, r0
 800ac54:	2101      	movs	r1, #1
 800ac56:	4658      	mov	r0, fp
 800ac58:	f000 fbee 	bl	800b438 <__i2b>
 800ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5e:	4604      	mov	r4, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 81cf 	beq.w	800b004 <_dtoa_r+0xb3c>
 800ac66:	461a      	mov	r2, r3
 800ac68:	4601      	mov	r1, r0
 800ac6a:	4658      	mov	r0, fp
 800ac6c:	f000 fca4 	bl	800b5b8 <__pow5mult>
 800ac70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	4604      	mov	r4, r0
 800ac76:	f300 8095 	bgt.w	800ada4 <_dtoa_r+0x8dc>
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 8087 	bne.w	800ad90 <_dtoa_r+0x8c8>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 8089 	bne.w	800ada0 <_dtoa_r+0x8d8>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac94:	0d1b      	lsrs	r3, r3, #20
 800ac96:	051b      	lsls	r3, r3, #20
 800ac98:	b12b      	cbz	r3, 800aca6 <_dtoa_r+0x7de>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	9308      	str	r3, [sp, #32]
 800aca0:	f108 0801 	add.w	r8, r8, #1
 800aca4:	2301      	movs	r3, #1
 800aca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 81b0 	beq.w	800b010 <_dtoa_r+0xb48>
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb6:	6918      	ldr	r0, [r3, #16]
 800acb8:	f000 fb72 	bl	800b3a0 <__hi0bits>
 800acbc:	f1c0 0020 	rsb	r0, r0, #32
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	4418      	add	r0, r3
 800acc4:	f010 001f 	ands.w	r0, r0, #31
 800acc8:	d077      	beq.n	800adba <_dtoa_r+0x8f2>
 800acca:	f1c0 0320 	rsb	r3, r0, #32
 800acce:	2b04      	cmp	r3, #4
 800acd0:	dd6b      	ble.n	800adaa <_dtoa_r+0x8e2>
 800acd2:	9b08      	ldr	r3, [sp, #32]
 800acd4:	f1c0 001c 	rsb	r0, r0, #28
 800acd8:	4403      	add	r3, r0
 800acda:	4480      	add	r8, r0
 800acdc:	4406      	add	r6, r0
 800acde:	9308      	str	r3, [sp, #32]
 800ace0:	f1b8 0f00 	cmp.w	r8, #0
 800ace4:	dd05      	ble.n	800acf2 <_dtoa_r+0x82a>
 800ace6:	4649      	mov	r1, r9
 800ace8:	4642      	mov	r2, r8
 800acea:	4658      	mov	r0, fp
 800acec:	f000 fcbe 	bl	800b66c <__lshift>
 800acf0:	4681      	mov	r9, r0
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd05      	ble.n	800ad04 <_dtoa_r+0x83c>
 800acf8:	4621      	mov	r1, r4
 800acfa:	461a      	mov	r2, r3
 800acfc:	4658      	mov	r0, fp
 800acfe:	f000 fcb5 	bl	800b66c <__lshift>
 800ad02:	4604      	mov	r4, r0
 800ad04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d059      	beq.n	800adbe <_dtoa_r+0x8f6>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4648      	mov	r0, r9
 800ad0e:	f000 fd19 	bl	800b744 <__mcmp>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	da53      	bge.n	800adbe <_dtoa_r+0x8f6>
 800ad16:	1e7b      	subs	r3, r7, #1
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	220a      	movs	r2, #10
 800ad20:	4658      	mov	r0, fp
 800ad22:	f000 faf7 	bl	800b314 <__multadd>
 800ad26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad28:	4681      	mov	r9, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 8172 	beq.w	800b014 <_dtoa_r+0xb4c>
 800ad30:	2300      	movs	r3, #0
 800ad32:	4629      	mov	r1, r5
 800ad34:	220a      	movs	r2, #10
 800ad36:	4658      	mov	r0, fp
 800ad38:	f000 faec 	bl	800b314 <__multadd>
 800ad3c:	9b00      	ldr	r3, [sp, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	4605      	mov	r5, r0
 800ad42:	dc67      	bgt.n	800ae14 <_dtoa_r+0x94c>
 800ad44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	dc41      	bgt.n	800adce <_dtoa_r+0x906>
 800ad4a:	e063      	b.n	800ae14 <_dtoa_r+0x94c>
 800ad4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad52:	e746      	b.n	800abe2 <_dtoa_r+0x71a>
 800ad54:	9b07      	ldr	r3, [sp, #28]
 800ad56:	1e5c      	subs	r4, r3, #1
 800ad58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	bfbf      	itttt	lt
 800ad5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad64:	1ae3      	sublt	r3, r4, r3
 800ad66:	bfb4      	ite	lt
 800ad68:	18d2      	addlt	r2, r2, r3
 800ad6a:	1b1c      	subge	r4, r3, r4
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	bfbc      	itt	lt
 800ad70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ad72:	2400      	movlt	r4, #0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bfb5      	itete	lt
 800ad78:	eba8 0603 	sublt.w	r6, r8, r3
 800ad7c:	9b07      	ldrge	r3, [sp, #28]
 800ad7e:	2300      	movlt	r3, #0
 800ad80:	4646      	movge	r6, r8
 800ad82:	e730      	b.n	800abe6 <_dtoa_r+0x71e>
 800ad84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad88:	4646      	mov	r6, r8
 800ad8a:	e735      	b.n	800abf8 <_dtoa_r+0x730>
 800ad8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad8e:	e75c      	b.n	800ac4a <_dtoa_r+0x782>
 800ad90:	2300      	movs	r3, #0
 800ad92:	e788      	b.n	800aca6 <_dtoa_r+0x7de>
 800ad94:	3fe00000 	.word	0x3fe00000
 800ad98:	40240000 	.word	0x40240000
 800ad9c:	40140000 	.word	0x40140000
 800ada0:	9b02      	ldr	r3, [sp, #8]
 800ada2:	e780      	b.n	800aca6 <_dtoa_r+0x7de>
 800ada4:	2300      	movs	r3, #0
 800ada6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada8:	e782      	b.n	800acb0 <_dtoa_r+0x7e8>
 800adaa:	d099      	beq.n	800ace0 <_dtoa_r+0x818>
 800adac:	9a08      	ldr	r2, [sp, #32]
 800adae:	331c      	adds	r3, #28
 800adb0:	441a      	add	r2, r3
 800adb2:	4498      	add	r8, r3
 800adb4:	441e      	add	r6, r3
 800adb6:	9208      	str	r2, [sp, #32]
 800adb8:	e792      	b.n	800ace0 <_dtoa_r+0x818>
 800adba:	4603      	mov	r3, r0
 800adbc:	e7f6      	b.n	800adac <_dtoa_r+0x8e4>
 800adbe:	9b07      	ldr	r3, [sp, #28]
 800adc0:	9704      	str	r7, [sp, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dc20      	bgt.n	800ae08 <_dtoa_r+0x940>
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adca:	2b02      	cmp	r3, #2
 800adcc:	dd1e      	ble.n	800ae0c <_dtoa_r+0x944>
 800adce:	9b00      	ldr	r3, [sp, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f47f aec0 	bne.w	800ab56 <_dtoa_r+0x68e>
 800add6:	4621      	mov	r1, r4
 800add8:	2205      	movs	r2, #5
 800adda:	4658      	mov	r0, fp
 800addc:	f000 fa9a 	bl	800b314 <__multadd>
 800ade0:	4601      	mov	r1, r0
 800ade2:	4604      	mov	r4, r0
 800ade4:	4648      	mov	r0, r9
 800ade6:	f000 fcad 	bl	800b744 <__mcmp>
 800adea:	2800      	cmp	r0, #0
 800adec:	f77f aeb3 	ble.w	800ab56 <_dtoa_r+0x68e>
 800adf0:	4656      	mov	r6, sl
 800adf2:	2331      	movs	r3, #49	@ 0x31
 800adf4:	f806 3b01 	strb.w	r3, [r6], #1
 800adf8:	9b04      	ldr	r3, [sp, #16]
 800adfa:	3301      	adds	r3, #1
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	e6ae      	b.n	800ab5e <_dtoa_r+0x696>
 800ae00:	9c07      	ldr	r4, [sp, #28]
 800ae02:	9704      	str	r7, [sp, #16]
 800ae04:	4625      	mov	r5, r4
 800ae06:	e7f3      	b.n	800adf0 <_dtoa_r+0x928>
 800ae08:	9b07      	ldr	r3, [sp, #28]
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 8104 	beq.w	800b01c <_dtoa_r+0xb54>
 800ae14:	2e00      	cmp	r6, #0
 800ae16:	dd05      	ble.n	800ae24 <_dtoa_r+0x95c>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	4658      	mov	r0, fp
 800ae1e:	f000 fc25 	bl	800b66c <__lshift>
 800ae22:	4605      	mov	r5, r0
 800ae24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d05a      	beq.n	800aee0 <_dtoa_r+0xa18>
 800ae2a:	6869      	ldr	r1, [r5, #4]
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	f000 fa0f 	bl	800b250 <_Balloc>
 800ae32:	4606      	mov	r6, r0
 800ae34:	b928      	cbnz	r0, 800ae42 <_dtoa_r+0x97a>
 800ae36:	4b84      	ldr	r3, [pc, #528]	@ (800b048 <_dtoa_r+0xb80>)
 800ae38:	4602      	mov	r2, r0
 800ae3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae3e:	f7ff bb5a 	b.w	800a4f6 <_dtoa_r+0x2e>
 800ae42:	692a      	ldr	r2, [r5, #16]
 800ae44:	3202      	adds	r2, #2
 800ae46:	0092      	lsls	r2, r2, #2
 800ae48:	f105 010c 	add.w	r1, r5, #12
 800ae4c:	300c      	adds	r0, #12
 800ae4e:	f001 f815 	bl	800be7c <memcpy>
 800ae52:	2201      	movs	r2, #1
 800ae54:	4631      	mov	r1, r6
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 fc08 	bl	800b66c <__lshift>
 800ae5c:	f10a 0301 	add.w	r3, sl, #1
 800ae60:	9307      	str	r3, [sp, #28]
 800ae62:	9b00      	ldr	r3, [sp, #0]
 800ae64:	4453      	add	r3, sl
 800ae66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	462f      	mov	r7, r5
 800ae70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae72:	4605      	mov	r5, r0
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	4621      	mov	r1, r4
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	4648      	mov	r0, r9
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	f7ff fa9b 	bl	800a3b8 <quorem>
 800ae82:	4639      	mov	r1, r7
 800ae84:	9002      	str	r0, [sp, #8]
 800ae86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae8a:	4648      	mov	r0, r9
 800ae8c:	f000 fc5a 	bl	800b744 <__mcmp>
 800ae90:	462a      	mov	r2, r5
 800ae92:	9008      	str	r0, [sp, #32]
 800ae94:	4621      	mov	r1, r4
 800ae96:	4658      	mov	r0, fp
 800ae98:	f000 fc70 	bl	800b77c <__mdiff>
 800ae9c:	68c2      	ldr	r2, [r0, #12]
 800ae9e:	4606      	mov	r6, r0
 800aea0:	bb02      	cbnz	r2, 800aee4 <_dtoa_r+0xa1c>
 800aea2:	4601      	mov	r1, r0
 800aea4:	4648      	mov	r0, r9
 800aea6:	f000 fc4d 	bl	800b744 <__mcmp>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	4631      	mov	r1, r6
 800aeae:	4658      	mov	r0, fp
 800aeb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeb2:	f000 fa0d 	bl	800b2d0 <_Bfree>
 800aeb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aeba:	9e07      	ldr	r6, [sp, #28]
 800aebc:	ea43 0102 	orr.w	r1, r3, r2
 800aec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aec2:	4319      	orrs	r1, r3
 800aec4:	d110      	bne.n	800aee8 <_dtoa_r+0xa20>
 800aec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aeca:	d029      	beq.n	800af20 <_dtoa_r+0xa58>
 800aecc:	9b08      	ldr	r3, [sp, #32]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dd02      	ble.n	800aed8 <_dtoa_r+0xa10>
 800aed2:	9b02      	ldr	r3, [sp, #8]
 800aed4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aed8:	9b00      	ldr	r3, [sp, #0]
 800aeda:	f883 8000 	strb.w	r8, [r3]
 800aede:	e63f      	b.n	800ab60 <_dtoa_r+0x698>
 800aee0:	4628      	mov	r0, r5
 800aee2:	e7bb      	b.n	800ae5c <_dtoa_r+0x994>
 800aee4:	2201      	movs	r2, #1
 800aee6:	e7e1      	b.n	800aeac <_dtoa_r+0x9e4>
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	db04      	blt.n	800aef8 <_dtoa_r+0xa30>
 800aeee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aef0:	430b      	orrs	r3, r1
 800aef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aef4:	430b      	orrs	r3, r1
 800aef6:	d120      	bne.n	800af3a <_dtoa_r+0xa72>
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	dded      	ble.n	800aed8 <_dtoa_r+0xa10>
 800aefc:	4649      	mov	r1, r9
 800aefe:	2201      	movs	r2, #1
 800af00:	4658      	mov	r0, fp
 800af02:	f000 fbb3 	bl	800b66c <__lshift>
 800af06:	4621      	mov	r1, r4
 800af08:	4681      	mov	r9, r0
 800af0a:	f000 fc1b 	bl	800b744 <__mcmp>
 800af0e:	2800      	cmp	r0, #0
 800af10:	dc03      	bgt.n	800af1a <_dtoa_r+0xa52>
 800af12:	d1e1      	bne.n	800aed8 <_dtoa_r+0xa10>
 800af14:	f018 0f01 	tst.w	r8, #1
 800af18:	d0de      	beq.n	800aed8 <_dtoa_r+0xa10>
 800af1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af1e:	d1d8      	bne.n	800aed2 <_dtoa_r+0xa0a>
 800af20:	9a00      	ldr	r2, [sp, #0]
 800af22:	2339      	movs	r3, #57	@ 0x39
 800af24:	7013      	strb	r3, [r2, #0]
 800af26:	4633      	mov	r3, r6
 800af28:	461e      	mov	r6, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af30:	2a39      	cmp	r2, #57	@ 0x39
 800af32:	d052      	beq.n	800afda <_dtoa_r+0xb12>
 800af34:	3201      	adds	r2, #1
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	e612      	b.n	800ab60 <_dtoa_r+0x698>
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	dd07      	ble.n	800af4e <_dtoa_r+0xa86>
 800af3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af42:	d0ed      	beq.n	800af20 <_dtoa_r+0xa58>
 800af44:	9a00      	ldr	r2, [sp, #0]
 800af46:	f108 0301 	add.w	r3, r8, #1
 800af4a:	7013      	strb	r3, [r2, #0]
 800af4c:	e608      	b.n	800ab60 <_dtoa_r+0x698>
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	9a07      	ldr	r2, [sp, #28]
 800af52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800af56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af58:	4293      	cmp	r3, r2
 800af5a:	d028      	beq.n	800afae <_dtoa_r+0xae6>
 800af5c:	4649      	mov	r1, r9
 800af5e:	2300      	movs	r3, #0
 800af60:	220a      	movs	r2, #10
 800af62:	4658      	mov	r0, fp
 800af64:	f000 f9d6 	bl	800b314 <__multadd>
 800af68:	42af      	cmp	r7, r5
 800af6a:	4681      	mov	r9, r0
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	f04f 020a 	mov.w	r2, #10
 800af74:	4639      	mov	r1, r7
 800af76:	4658      	mov	r0, fp
 800af78:	d107      	bne.n	800af8a <_dtoa_r+0xac2>
 800af7a:	f000 f9cb 	bl	800b314 <__multadd>
 800af7e:	4607      	mov	r7, r0
 800af80:	4605      	mov	r5, r0
 800af82:	9b07      	ldr	r3, [sp, #28]
 800af84:	3301      	adds	r3, #1
 800af86:	9307      	str	r3, [sp, #28]
 800af88:	e774      	b.n	800ae74 <_dtoa_r+0x9ac>
 800af8a:	f000 f9c3 	bl	800b314 <__multadd>
 800af8e:	4629      	mov	r1, r5
 800af90:	4607      	mov	r7, r0
 800af92:	2300      	movs	r3, #0
 800af94:	220a      	movs	r2, #10
 800af96:	4658      	mov	r0, fp
 800af98:	f000 f9bc 	bl	800b314 <__multadd>
 800af9c:	4605      	mov	r5, r0
 800af9e:	e7f0      	b.n	800af82 <_dtoa_r+0xaba>
 800afa0:	9b00      	ldr	r3, [sp, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bfcc      	ite	gt
 800afa6:	461e      	movgt	r6, r3
 800afa8:	2601      	movle	r6, #1
 800afaa:	4456      	add	r6, sl
 800afac:	2700      	movs	r7, #0
 800afae:	4649      	mov	r1, r9
 800afb0:	2201      	movs	r2, #1
 800afb2:	4658      	mov	r0, fp
 800afb4:	f000 fb5a 	bl	800b66c <__lshift>
 800afb8:	4621      	mov	r1, r4
 800afba:	4681      	mov	r9, r0
 800afbc:	f000 fbc2 	bl	800b744 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dcb0      	bgt.n	800af26 <_dtoa_r+0xa5e>
 800afc4:	d102      	bne.n	800afcc <_dtoa_r+0xb04>
 800afc6:	f018 0f01 	tst.w	r8, #1
 800afca:	d1ac      	bne.n	800af26 <_dtoa_r+0xa5e>
 800afcc:	4633      	mov	r3, r6
 800afce:	461e      	mov	r6, r3
 800afd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afd4:	2a30      	cmp	r2, #48	@ 0x30
 800afd6:	d0fa      	beq.n	800afce <_dtoa_r+0xb06>
 800afd8:	e5c2      	b.n	800ab60 <_dtoa_r+0x698>
 800afda:	459a      	cmp	sl, r3
 800afdc:	d1a4      	bne.n	800af28 <_dtoa_r+0xa60>
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	3301      	adds	r3, #1
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	2331      	movs	r3, #49	@ 0x31
 800afe6:	f88a 3000 	strb.w	r3, [sl]
 800afea:	e5b9      	b.n	800ab60 <_dtoa_r+0x698>
 800afec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b04c <_dtoa_r+0xb84>
 800aff2:	b11b      	cbz	r3, 800affc <_dtoa_r+0xb34>
 800aff4:	f10a 0308 	add.w	r3, sl, #8
 800aff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	4650      	mov	r0, sl
 800affe:	b019      	add	sp, #100	@ 0x64
 800b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b006:	2b01      	cmp	r3, #1
 800b008:	f77f ae37 	ble.w	800ac7a <_dtoa_r+0x7b2>
 800b00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b010:	2001      	movs	r0, #1
 800b012:	e655      	b.n	800acc0 <_dtoa_r+0x7f8>
 800b014:	9b00      	ldr	r3, [sp, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f77f aed6 	ble.w	800adc8 <_dtoa_r+0x900>
 800b01c:	4656      	mov	r6, sl
 800b01e:	4621      	mov	r1, r4
 800b020:	4648      	mov	r0, r9
 800b022:	f7ff f9c9 	bl	800a3b8 <quorem>
 800b026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b02a:	f806 8b01 	strb.w	r8, [r6], #1
 800b02e:	9b00      	ldr	r3, [sp, #0]
 800b030:	eba6 020a 	sub.w	r2, r6, sl
 800b034:	4293      	cmp	r3, r2
 800b036:	ddb3      	ble.n	800afa0 <_dtoa_r+0xad8>
 800b038:	4649      	mov	r1, r9
 800b03a:	2300      	movs	r3, #0
 800b03c:	220a      	movs	r2, #10
 800b03e:	4658      	mov	r0, fp
 800b040:	f000 f968 	bl	800b314 <__multadd>
 800b044:	4681      	mov	r9, r0
 800b046:	e7ea      	b.n	800b01e <_dtoa_r+0xb56>
 800b048:	0800cbc8 	.word	0x0800cbc8
 800b04c:	0800cb4c 	.word	0x0800cb4c

0800b050 <_free_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4605      	mov	r5, r0
 800b054:	2900      	cmp	r1, #0
 800b056:	d041      	beq.n	800b0dc <_free_r+0x8c>
 800b058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b05c:	1f0c      	subs	r4, r1, #4
 800b05e:	2b00      	cmp	r3, #0
 800b060:	bfb8      	it	lt
 800b062:	18e4      	addlt	r4, r4, r3
 800b064:	f000 f8e8 	bl	800b238 <__malloc_lock>
 800b068:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e0 <_free_r+0x90>)
 800b06a:	6813      	ldr	r3, [r2, #0]
 800b06c:	b933      	cbnz	r3, 800b07c <_free_r+0x2c>
 800b06e:	6063      	str	r3, [r4, #4]
 800b070:	6014      	str	r4, [r2, #0]
 800b072:	4628      	mov	r0, r5
 800b074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b078:	f000 b8e4 	b.w	800b244 <__malloc_unlock>
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	d908      	bls.n	800b092 <_free_r+0x42>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	1821      	adds	r1, r4, r0
 800b084:	428b      	cmp	r3, r1
 800b086:	bf01      	itttt	eq
 800b088:	6819      	ldreq	r1, [r3, #0]
 800b08a:	685b      	ldreq	r3, [r3, #4]
 800b08c:	1809      	addeq	r1, r1, r0
 800b08e:	6021      	streq	r1, [r4, #0]
 800b090:	e7ed      	b.n	800b06e <_free_r+0x1e>
 800b092:	461a      	mov	r2, r3
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	b10b      	cbz	r3, 800b09c <_free_r+0x4c>
 800b098:	42a3      	cmp	r3, r4
 800b09a:	d9fa      	bls.n	800b092 <_free_r+0x42>
 800b09c:	6811      	ldr	r1, [r2, #0]
 800b09e:	1850      	adds	r0, r2, r1
 800b0a0:	42a0      	cmp	r0, r4
 800b0a2:	d10b      	bne.n	800b0bc <_free_r+0x6c>
 800b0a4:	6820      	ldr	r0, [r4, #0]
 800b0a6:	4401      	add	r1, r0
 800b0a8:	1850      	adds	r0, r2, r1
 800b0aa:	4283      	cmp	r3, r0
 800b0ac:	6011      	str	r1, [r2, #0]
 800b0ae:	d1e0      	bne.n	800b072 <_free_r+0x22>
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	6053      	str	r3, [r2, #4]
 800b0b6:	4408      	add	r0, r1
 800b0b8:	6010      	str	r0, [r2, #0]
 800b0ba:	e7da      	b.n	800b072 <_free_r+0x22>
 800b0bc:	d902      	bls.n	800b0c4 <_free_r+0x74>
 800b0be:	230c      	movs	r3, #12
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	e7d6      	b.n	800b072 <_free_r+0x22>
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	1821      	adds	r1, r4, r0
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf04      	itt	eq
 800b0cc:	6819      	ldreq	r1, [r3, #0]
 800b0ce:	685b      	ldreq	r3, [r3, #4]
 800b0d0:	6063      	str	r3, [r4, #4]
 800b0d2:	bf04      	itt	eq
 800b0d4:	1809      	addeq	r1, r1, r0
 800b0d6:	6021      	streq	r1, [r4, #0]
 800b0d8:	6054      	str	r4, [r2, #4]
 800b0da:	e7ca      	b.n	800b072 <_free_r+0x22>
 800b0dc:	bd38      	pop	{r3, r4, r5, pc}
 800b0de:	bf00      	nop
 800b0e0:	200007a8 	.word	0x200007a8

0800b0e4 <malloc>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <malloc+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f000 b825 	b.w	800b138 <_malloc_r>
 800b0ee:	bf00      	nop
 800b0f0:	20000030 	.word	0x20000030

0800b0f4 <sbrk_aligned>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b134 <sbrk_aligned+0x40>)
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	6831      	ldr	r1, [r6, #0]
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	b911      	cbnz	r1, 800b106 <sbrk_aligned+0x12>
 800b100:	f000 feac 	bl	800be5c <_sbrk_r>
 800b104:	6030      	str	r0, [r6, #0]
 800b106:	4621      	mov	r1, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	f000 fea7 	bl	800be5c <_sbrk_r>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	d103      	bne.n	800b11a <sbrk_aligned+0x26>
 800b112:	f04f 34ff 	mov.w	r4, #4294967295
 800b116:	4620      	mov	r0, r4
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	1cc4      	adds	r4, r0, #3
 800b11c:	f024 0403 	bic.w	r4, r4, #3
 800b120:	42a0      	cmp	r0, r4
 800b122:	d0f8      	beq.n	800b116 <sbrk_aligned+0x22>
 800b124:	1a21      	subs	r1, r4, r0
 800b126:	4628      	mov	r0, r5
 800b128:	f000 fe98 	bl	800be5c <_sbrk_r>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d1f2      	bne.n	800b116 <sbrk_aligned+0x22>
 800b130:	e7ef      	b.n	800b112 <sbrk_aligned+0x1e>
 800b132:	bf00      	nop
 800b134:	200007a4 	.word	0x200007a4

0800b138 <_malloc_r>:
 800b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b13c:	1ccd      	adds	r5, r1, #3
 800b13e:	f025 0503 	bic.w	r5, r5, #3
 800b142:	3508      	adds	r5, #8
 800b144:	2d0c      	cmp	r5, #12
 800b146:	bf38      	it	cc
 800b148:	250c      	movcc	r5, #12
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	4606      	mov	r6, r0
 800b14e:	db01      	blt.n	800b154 <_malloc_r+0x1c>
 800b150:	42a9      	cmp	r1, r5
 800b152:	d904      	bls.n	800b15e <_malloc_r+0x26>
 800b154:	230c      	movs	r3, #12
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	2000      	movs	r0, #0
 800b15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b234 <_malloc_r+0xfc>
 800b162:	f000 f869 	bl	800b238 <__malloc_lock>
 800b166:	f8d8 3000 	ldr.w	r3, [r8]
 800b16a:	461c      	mov	r4, r3
 800b16c:	bb44      	cbnz	r4, 800b1c0 <_malloc_r+0x88>
 800b16e:	4629      	mov	r1, r5
 800b170:	4630      	mov	r0, r6
 800b172:	f7ff ffbf 	bl	800b0f4 <sbrk_aligned>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	4604      	mov	r4, r0
 800b17a:	d158      	bne.n	800b22e <_malloc_r+0xf6>
 800b17c:	f8d8 4000 	ldr.w	r4, [r8]
 800b180:	4627      	mov	r7, r4
 800b182:	2f00      	cmp	r7, #0
 800b184:	d143      	bne.n	800b20e <_malloc_r+0xd6>
 800b186:	2c00      	cmp	r4, #0
 800b188:	d04b      	beq.n	800b222 <_malloc_r+0xea>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	4639      	mov	r1, r7
 800b18e:	4630      	mov	r0, r6
 800b190:	eb04 0903 	add.w	r9, r4, r3
 800b194:	f000 fe62 	bl	800be5c <_sbrk_r>
 800b198:	4581      	cmp	r9, r0
 800b19a:	d142      	bne.n	800b222 <_malloc_r+0xea>
 800b19c:	6821      	ldr	r1, [r4, #0]
 800b19e:	1a6d      	subs	r5, r5, r1
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7ff ffa6 	bl	800b0f4 <sbrk_aligned>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d03a      	beq.n	800b222 <_malloc_r+0xea>
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	442b      	add	r3, r5
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	bb62      	cbnz	r2, 800b214 <_malloc_r+0xdc>
 800b1ba:	f8c8 7000 	str.w	r7, [r8]
 800b1be:	e00f      	b.n	800b1e0 <_malloc_r+0xa8>
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	1b52      	subs	r2, r2, r5
 800b1c4:	d420      	bmi.n	800b208 <_malloc_r+0xd0>
 800b1c6:	2a0b      	cmp	r2, #11
 800b1c8:	d917      	bls.n	800b1fa <_malloc_r+0xc2>
 800b1ca:	1961      	adds	r1, r4, r5
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	6025      	str	r5, [r4, #0]
 800b1d0:	bf18      	it	ne
 800b1d2:	6059      	strne	r1, [r3, #4]
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	bf08      	it	eq
 800b1d8:	f8c8 1000 	streq.w	r1, [r8]
 800b1dc:	5162      	str	r2, [r4, r5]
 800b1de:	604b      	str	r3, [r1, #4]
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f82f 	bl	800b244 <__malloc_unlock>
 800b1e6:	f104 000b 	add.w	r0, r4, #11
 800b1ea:	1d23      	adds	r3, r4, #4
 800b1ec:	f020 0007 	bic.w	r0, r0, #7
 800b1f0:	1ac2      	subs	r2, r0, r3
 800b1f2:	bf1c      	itt	ne
 800b1f4:	1a1b      	subne	r3, r3, r0
 800b1f6:	50a3      	strne	r3, [r4, r2]
 800b1f8:	e7af      	b.n	800b15a <_malloc_r+0x22>
 800b1fa:	6862      	ldr	r2, [r4, #4]
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	bf0c      	ite	eq
 800b200:	f8c8 2000 	streq.w	r2, [r8]
 800b204:	605a      	strne	r2, [r3, #4]
 800b206:	e7eb      	b.n	800b1e0 <_malloc_r+0xa8>
 800b208:	4623      	mov	r3, r4
 800b20a:	6864      	ldr	r4, [r4, #4]
 800b20c:	e7ae      	b.n	800b16c <_malloc_r+0x34>
 800b20e:	463c      	mov	r4, r7
 800b210:	687f      	ldr	r7, [r7, #4]
 800b212:	e7b6      	b.n	800b182 <_malloc_r+0x4a>
 800b214:	461a      	mov	r2, r3
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d1fb      	bne.n	800b214 <_malloc_r+0xdc>
 800b21c:	2300      	movs	r3, #0
 800b21e:	6053      	str	r3, [r2, #4]
 800b220:	e7de      	b.n	800b1e0 <_malloc_r+0xa8>
 800b222:	230c      	movs	r3, #12
 800b224:	6033      	str	r3, [r6, #0]
 800b226:	4630      	mov	r0, r6
 800b228:	f000 f80c 	bl	800b244 <__malloc_unlock>
 800b22c:	e794      	b.n	800b158 <_malloc_r+0x20>
 800b22e:	6005      	str	r5, [r0, #0]
 800b230:	e7d6      	b.n	800b1e0 <_malloc_r+0xa8>
 800b232:	bf00      	nop
 800b234:	200007a8 	.word	0x200007a8

0800b238 <__malloc_lock>:
 800b238:	4801      	ldr	r0, [pc, #4]	@ (800b240 <__malloc_lock+0x8>)
 800b23a:	f7ff b89c 	b.w	800a376 <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	200007a0 	.word	0x200007a0

0800b244 <__malloc_unlock>:
 800b244:	4801      	ldr	r0, [pc, #4]	@ (800b24c <__malloc_unlock+0x8>)
 800b246:	f7ff b897 	b.w	800a378 <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	200007a0 	.word	0x200007a0

0800b250 <_Balloc>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	69c6      	ldr	r6, [r0, #28]
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	b976      	cbnz	r6, 800b278 <_Balloc+0x28>
 800b25a:	2010      	movs	r0, #16
 800b25c:	f7ff ff42 	bl	800b0e4 <malloc>
 800b260:	4602      	mov	r2, r0
 800b262:	61e0      	str	r0, [r4, #28]
 800b264:	b920      	cbnz	r0, 800b270 <_Balloc+0x20>
 800b266:	4b18      	ldr	r3, [pc, #96]	@ (800b2c8 <_Balloc+0x78>)
 800b268:	4818      	ldr	r0, [pc, #96]	@ (800b2cc <_Balloc+0x7c>)
 800b26a:	216b      	movs	r1, #107	@ 0x6b
 800b26c:	f7ff f886 	bl	800a37c <__assert_func>
 800b270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b274:	6006      	str	r6, [r0, #0]
 800b276:	60c6      	str	r6, [r0, #12]
 800b278:	69e6      	ldr	r6, [r4, #28]
 800b27a:	68f3      	ldr	r3, [r6, #12]
 800b27c:	b183      	cbz	r3, 800b2a0 <_Balloc+0x50>
 800b27e:	69e3      	ldr	r3, [r4, #28]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b286:	b9b8      	cbnz	r0, 800b2b8 <_Balloc+0x68>
 800b288:	2101      	movs	r1, #1
 800b28a:	fa01 f605 	lsl.w	r6, r1, r5
 800b28e:	1d72      	adds	r2, r6, #5
 800b290:	0092      	lsls	r2, r2, #2
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fe07 	bl	800bea6 <_calloc_r>
 800b298:	b160      	cbz	r0, 800b2b4 <_Balloc+0x64>
 800b29a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b29e:	e00e      	b.n	800b2be <_Balloc+0x6e>
 800b2a0:	2221      	movs	r2, #33	@ 0x21
 800b2a2:	2104      	movs	r1, #4
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fdfe 	bl	800bea6 <_calloc_r>
 800b2aa:	69e3      	ldr	r3, [r4, #28]
 800b2ac:	60f0      	str	r0, [r6, #12]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e4      	bne.n	800b27e <_Balloc+0x2e>
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}
 800b2b8:	6802      	ldr	r2, [r0, #0]
 800b2ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2c4:	e7f7      	b.n	800b2b6 <_Balloc+0x66>
 800b2c6:	bf00      	nop
 800b2c8:	0800cb59 	.word	0x0800cb59
 800b2cc:	0800cbd9 	.word	0x0800cbd9

0800b2d0 <_Bfree>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	69c6      	ldr	r6, [r0, #28]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b976      	cbnz	r6, 800b2f8 <_Bfree+0x28>
 800b2da:	2010      	movs	r0, #16
 800b2dc:	f7ff ff02 	bl	800b0e4 <malloc>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	61e8      	str	r0, [r5, #28]
 800b2e4:	b920      	cbnz	r0, 800b2f0 <_Bfree+0x20>
 800b2e6:	4b09      	ldr	r3, [pc, #36]	@ (800b30c <_Bfree+0x3c>)
 800b2e8:	4809      	ldr	r0, [pc, #36]	@ (800b310 <_Bfree+0x40>)
 800b2ea:	218f      	movs	r1, #143	@ 0x8f
 800b2ec:	f7ff f846 	bl	800a37c <__assert_func>
 800b2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2f4:	6006      	str	r6, [r0, #0]
 800b2f6:	60c6      	str	r6, [r0, #12]
 800b2f8:	b13c      	cbz	r4, 800b30a <_Bfree+0x3a>
 800b2fa:	69eb      	ldr	r3, [r5, #28]
 800b2fc:	6862      	ldr	r2, [r4, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b304:	6021      	str	r1, [r4, #0]
 800b306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	0800cb59 	.word	0x0800cb59
 800b310:	0800cbd9 	.word	0x0800cbd9

0800b314 <__multadd>:
 800b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b318:	690d      	ldr	r5, [r1, #16]
 800b31a:	4607      	mov	r7, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	461e      	mov	r6, r3
 800b320:	f101 0c14 	add.w	ip, r1, #20
 800b324:	2000      	movs	r0, #0
 800b326:	f8dc 3000 	ldr.w	r3, [ip]
 800b32a:	b299      	uxth	r1, r3
 800b32c:	fb02 6101 	mla	r1, r2, r1, r6
 800b330:	0c1e      	lsrs	r6, r3, #16
 800b332:	0c0b      	lsrs	r3, r1, #16
 800b334:	fb02 3306 	mla	r3, r2, r6, r3
 800b338:	b289      	uxth	r1, r1
 800b33a:	3001      	adds	r0, #1
 800b33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b340:	4285      	cmp	r5, r0
 800b342:	f84c 1b04 	str.w	r1, [ip], #4
 800b346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b34a:	dcec      	bgt.n	800b326 <__multadd+0x12>
 800b34c:	b30e      	cbz	r6, 800b392 <__multadd+0x7e>
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	42ab      	cmp	r3, r5
 800b352:	dc19      	bgt.n	800b388 <__multadd+0x74>
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	4638      	mov	r0, r7
 800b358:	3101      	adds	r1, #1
 800b35a:	f7ff ff79 	bl	800b250 <_Balloc>
 800b35e:	4680      	mov	r8, r0
 800b360:	b928      	cbnz	r0, 800b36e <__multadd+0x5a>
 800b362:	4602      	mov	r2, r0
 800b364:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <__multadd+0x84>)
 800b366:	480d      	ldr	r0, [pc, #52]	@ (800b39c <__multadd+0x88>)
 800b368:	21ba      	movs	r1, #186	@ 0xba
 800b36a:	f7ff f807 	bl	800a37c <__assert_func>
 800b36e:	6922      	ldr	r2, [r4, #16]
 800b370:	3202      	adds	r2, #2
 800b372:	f104 010c 	add.w	r1, r4, #12
 800b376:	0092      	lsls	r2, r2, #2
 800b378:	300c      	adds	r0, #12
 800b37a:	f000 fd7f 	bl	800be7c <memcpy>
 800b37e:	4621      	mov	r1, r4
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff ffa5 	bl	800b2d0 <_Bfree>
 800b386:	4644      	mov	r4, r8
 800b388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b38c:	3501      	adds	r5, #1
 800b38e:	615e      	str	r6, [r3, #20]
 800b390:	6125      	str	r5, [r4, #16]
 800b392:	4620      	mov	r0, r4
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	0800cbc8 	.word	0x0800cbc8
 800b39c:	0800cbd9 	.word	0x0800cbd9

0800b3a0 <__hi0bits>:
 800b3a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	bf36      	itet	cc
 800b3a8:	0403      	lslcc	r3, r0, #16
 800b3aa:	2000      	movcs	r0, #0
 800b3ac:	2010      	movcc	r0, #16
 800b3ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3b2:	bf3c      	itt	cc
 800b3b4:	021b      	lslcc	r3, r3, #8
 800b3b6:	3008      	addcc	r0, #8
 800b3b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3bc:	bf3c      	itt	cc
 800b3be:	011b      	lslcc	r3, r3, #4
 800b3c0:	3004      	addcc	r0, #4
 800b3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3c6:	bf3c      	itt	cc
 800b3c8:	009b      	lslcc	r3, r3, #2
 800b3ca:	3002      	addcc	r0, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	db05      	blt.n	800b3dc <__hi0bits+0x3c>
 800b3d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b3d4:	f100 0001 	add.w	r0, r0, #1
 800b3d8:	bf08      	it	eq
 800b3da:	2020      	moveq	r0, #32
 800b3dc:	4770      	bx	lr

0800b3de <__lo0bits>:
 800b3de:	6803      	ldr	r3, [r0, #0]
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	f013 0007 	ands.w	r0, r3, #7
 800b3e6:	d00b      	beq.n	800b400 <__lo0bits+0x22>
 800b3e8:	07d9      	lsls	r1, r3, #31
 800b3ea:	d421      	bmi.n	800b430 <__lo0bits+0x52>
 800b3ec:	0798      	lsls	r0, r3, #30
 800b3ee:	bf49      	itett	mi
 800b3f0:	085b      	lsrmi	r3, r3, #1
 800b3f2:	089b      	lsrpl	r3, r3, #2
 800b3f4:	2001      	movmi	r0, #1
 800b3f6:	6013      	strmi	r3, [r2, #0]
 800b3f8:	bf5c      	itt	pl
 800b3fa:	6013      	strpl	r3, [r2, #0]
 800b3fc:	2002      	movpl	r0, #2
 800b3fe:	4770      	bx	lr
 800b400:	b299      	uxth	r1, r3
 800b402:	b909      	cbnz	r1, 800b408 <__lo0bits+0x2a>
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	2010      	movs	r0, #16
 800b408:	b2d9      	uxtb	r1, r3
 800b40a:	b909      	cbnz	r1, 800b410 <__lo0bits+0x32>
 800b40c:	3008      	adds	r0, #8
 800b40e:	0a1b      	lsrs	r3, r3, #8
 800b410:	0719      	lsls	r1, r3, #28
 800b412:	bf04      	itt	eq
 800b414:	091b      	lsreq	r3, r3, #4
 800b416:	3004      	addeq	r0, #4
 800b418:	0799      	lsls	r1, r3, #30
 800b41a:	bf04      	itt	eq
 800b41c:	089b      	lsreq	r3, r3, #2
 800b41e:	3002      	addeq	r0, #2
 800b420:	07d9      	lsls	r1, r3, #31
 800b422:	d403      	bmi.n	800b42c <__lo0bits+0x4e>
 800b424:	085b      	lsrs	r3, r3, #1
 800b426:	f100 0001 	add.w	r0, r0, #1
 800b42a:	d003      	beq.n	800b434 <__lo0bits+0x56>
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	4770      	bx	lr
 800b430:	2000      	movs	r0, #0
 800b432:	4770      	bx	lr
 800b434:	2020      	movs	r0, #32
 800b436:	4770      	bx	lr

0800b438 <__i2b>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	460c      	mov	r4, r1
 800b43c:	2101      	movs	r1, #1
 800b43e:	f7ff ff07 	bl	800b250 <_Balloc>
 800b442:	4602      	mov	r2, r0
 800b444:	b928      	cbnz	r0, 800b452 <__i2b+0x1a>
 800b446:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <__i2b+0x24>)
 800b448:	4805      	ldr	r0, [pc, #20]	@ (800b460 <__i2b+0x28>)
 800b44a:	f240 1145 	movw	r1, #325	@ 0x145
 800b44e:	f7fe ff95 	bl	800a37c <__assert_func>
 800b452:	2301      	movs	r3, #1
 800b454:	6144      	str	r4, [r0, #20]
 800b456:	6103      	str	r3, [r0, #16]
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	bf00      	nop
 800b45c:	0800cbc8 	.word	0x0800cbc8
 800b460:	0800cbd9 	.word	0x0800cbd9

0800b464 <__multiply>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	4614      	mov	r4, r2
 800b46a:	690a      	ldr	r2, [r1, #16]
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	429a      	cmp	r2, r3
 800b470:	bfa8      	it	ge
 800b472:	4623      	movge	r3, r4
 800b474:	460f      	mov	r7, r1
 800b476:	bfa4      	itt	ge
 800b478:	460c      	movge	r4, r1
 800b47a:	461f      	movge	r7, r3
 800b47c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b480:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	6861      	ldr	r1, [r4, #4]
 800b488:	eb0a 0609 	add.w	r6, sl, r9
 800b48c:	42b3      	cmp	r3, r6
 800b48e:	b085      	sub	sp, #20
 800b490:	bfb8      	it	lt
 800b492:	3101      	addlt	r1, #1
 800b494:	f7ff fedc 	bl	800b250 <_Balloc>
 800b498:	b930      	cbnz	r0, 800b4a8 <__multiply+0x44>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4b44      	ldr	r3, [pc, #272]	@ (800b5b0 <__multiply+0x14c>)
 800b49e:	4845      	ldr	r0, [pc, #276]	@ (800b5b4 <__multiply+0x150>)
 800b4a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4a4:	f7fe ff6a 	bl	800a37c <__assert_func>
 800b4a8:	f100 0514 	add.w	r5, r0, #20
 800b4ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4543      	cmp	r3, r8
 800b4b6:	d321      	bcc.n	800b4fc <__multiply+0x98>
 800b4b8:	f107 0114 	add.w	r1, r7, #20
 800b4bc:	f104 0214 	add.w	r2, r4, #20
 800b4c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b4c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	1b13      	subs	r3, r2, r4
 800b4cc:	3b15      	subs	r3, #21
 800b4ce:	f023 0303 	bic.w	r3, r3, #3
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	f104 0715 	add.w	r7, r4, #21
 800b4d8:	42ba      	cmp	r2, r7
 800b4da:	bf38      	it	cc
 800b4dc:	2304      	movcc	r3, #4
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	9b02      	ldr	r3, [sp, #8]
 800b4e2:	9103      	str	r1, [sp, #12]
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	d80c      	bhi.n	800b502 <__multiply+0x9e>
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	dd03      	ble.n	800b4f4 <__multiply+0x90>
 800b4ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d05b      	beq.n	800b5ac <__multiply+0x148>
 800b4f4:	6106      	str	r6, [r0, #16]
 800b4f6:	b005      	add	sp, #20
 800b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fc:	f843 2b04 	str.w	r2, [r3], #4
 800b500:	e7d8      	b.n	800b4b4 <__multiply+0x50>
 800b502:	f8b1 a000 	ldrh.w	sl, [r1]
 800b506:	f1ba 0f00 	cmp.w	sl, #0
 800b50a:	d024      	beq.n	800b556 <__multiply+0xf2>
 800b50c:	f104 0e14 	add.w	lr, r4, #20
 800b510:	46a9      	mov	r9, r5
 800b512:	f04f 0c00 	mov.w	ip, #0
 800b516:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b51a:	f8d9 3000 	ldr.w	r3, [r9]
 800b51e:	fa1f fb87 	uxth.w	fp, r7
 800b522:	b29b      	uxth	r3, r3
 800b524:	fb0a 330b 	mla	r3, sl, fp, r3
 800b528:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b52c:	f8d9 7000 	ldr.w	r7, [r9]
 800b530:	4463      	add	r3, ip
 800b532:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b536:	fb0a c70b 	mla	r7, sl, fp, ip
 800b53a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b53e:	b29b      	uxth	r3, r3
 800b540:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b544:	4572      	cmp	r2, lr
 800b546:	f849 3b04 	str.w	r3, [r9], #4
 800b54a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b54e:	d8e2      	bhi.n	800b516 <__multiply+0xb2>
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	f845 c003 	str.w	ip, [r5, r3]
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b55c:	3104      	adds	r1, #4
 800b55e:	f1b9 0f00 	cmp.w	r9, #0
 800b562:	d021      	beq.n	800b5a8 <__multiply+0x144>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	f104 0c14 	add.w	ip, r4, #20
 800b56a:	46ae      	mov	lr, r5
 800b56c:	f04f 0a00 	mov.w	sl, #0
 800b570:	f8bc b000 	ldrh.w	fp, [ip]
 800b574:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b578:	fb09 770b 	mla	r7, r9, fp, r7
 800b57c:	4457      	add	r7, sl
 800b57e:	b29b      	uxth	r3, r3
 800b580:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b584:	f84e 3b04 	str.w	r3, [lr], #4
 800b588:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b58c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b590:	f8be 3000 	ldrh.w	r3, [lr]
 800b594:	fb09 330a 	mla	r3, r9, sl, r3
 800b598:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b59c:	4562      	cmp	r2, ip
 800b59e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5a2:	d8e5      	bhi.n	800b570 <__multiply+0x10c>
 800b5a4:	9f01      	ldr	r7, [sp, #4]
 800b5a6:	51eb      	str	r3, [r5, r7]
 800b5a8:	3504      	adds	r5, #4
 800b5aa:	e799      	b.n	800b4e0 <__multiply+0x7c>
 800b5ac:	3e01      	subs	r6, #1
 800b5ae:	e79b      	b.n	800b4e8 <__multiply+0x84>
 800b5b0:	0800cbc8 	.word	0x0800cbc8
 800b5b4:	0800cbd9 	.word	0x0800cbd9

0800b5b8 <__pow5mult>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4615      	mov	r5, r2
 800b5be:	f012 0203 	ands.w	r2, r2, #3
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	460e      	mov	r6, r1
 800b5c6:	d007      	beq.n	800b5d8 <__pow5mult+0x20>
 800b5c8:	4c25      	ldr	r4, [pc, #148]	@ (800b660 <__pow5mult+0xa8>)
 800b5ca:	3a01      	subs	r2, #1
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5d2:	f7ff fe9f 	bl	800b314 <__multadd>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	10ad      	asrs	r5, r5, #2
 800b5da:	d03d      	beq.n	800b658 <__pow5mult+0xa0>
 800b5dc:	69fc      	ldr	r4, [r7, #28]
 800b5de:	b97c      	cbnz	r4, 800b600 <__pow5mult+0x48>
 800b5e0:	2010      	movs	r0, #16
 800b5e2:	f7ff fd7f 	bl	800b0e4 <malloc>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	61f8      	str	r0, [r7, #28]
 800b5ea:	b928      	cbnz	r0, 800b5f8 <__pow5mult+0x40>
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b664 <__pow5mult+0xac>)
 800b5ee:	481e      	ldr	r0, [pc, #120]	@ (800b668 <__pow5mult+0xb0>)
 800b5f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5f4:	f7fe fec2 	bl	800a37c <__assert_func>
 800b5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5fc:	6004      	str	r4, [r0, #0]
 800b5fe:	60c4      	str	r4, [r0, #12]
 800b600:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b608:	b94c      	cbnz	r4, 800b61e <__pow5mult+0x66>
 800b60a:	f240 2171 	movw	r1, #625	@ 0x271
 800b60e:	4638      	mov	r0, r7
 800b610:	f7ff ff12 	bl	800b438 <__i2b>
 800b614:	2300      	movs	r3, #0
 800b616:	f8c8 0008 	str.w	r0, [r8, #8]
 800b61a:	4604      	mov	r4, r0
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	f04f 0900 	mov.w	r9, #0
 800b622:	07eb      	lsls	r3, r5, #31
 800b624:	d50a      	bpl.n	800b63c <__pow5mult+0x84>
 800b626:	4631      	mov	r1, r6
 800b628:	4622      	mov	r2, r4
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7ff ff1a 	bl	800b464 <__multiply>
 800b630:	4631      	mov	r1, r6
 800b632:	4680      	mov	r8, r0
 800b634:	4638      	mov	r0, r7
 800b636:	f7ff fe4b 	bl	800b2d0 <_Bfree>
 800b63a:	4646      	mov	r6, r8
 800b63c:	106d      	asrs	r5, r5, #1
 800b63e:	d00b      	beq.n	800b658 <__pow5mult+0xa0>
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	b938      	cbnz	r0, 800b654 <__pow5mult+0x9c>
 800b644:	4622      	mov	r2, r4
 800b646:	4621      	mov	r1, r4
 800b648:	4638      	mov	r0, r7
 800b64a:	f7ff ff0b 	bl	800b464 <__multiply>
 800b64e:	6020      	str	r0, [r4, #0]
 800b650:	f8c0 9000 	str.w	r9, [r0]
 800b654:	4604      	mov	r4, r0
 800b656:	e7e4      	b.n	800b622 <__pow5mult+0x6a>
 800b658:	4630      	mov	r0, r6
 800b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65e:	bf00      	nop
 800b660:	0800cc34 	.word	0x0800cc34
 800b664:	0800cb59 	.word	0x0800cb59
 800b668:	0800cbd9 	.word	0x0800cbd9

0800b66c <__lshift>:
 800b66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b670:	460c      	mov	r4, r1
 800b672:	6849      	ldr	r1, [r1, #4]
 800b674:	6923      	ldr	r3, [r4, #16]
 800b676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	4607      	mov	r7, r0
 800b67e:	4691      	mov	r9, r2
 800b680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b684:	f108 0601 	add.w	r6, r8, #1
 800b688:	42b3      	cmp	r3, r6
 800b68a:	db0b      	blt.n	800b6a4 <__lshift+0x38>
 800b68c:	4638      	mov	r0, r7
 800b68e:	f7ff fddf 	bl	800b250 <_Balloc>
 800b692:	4605      	mov	r5, r0
 800b694:	b948      	cbnz	r0, 800b6aa <__lshift+0x3e>
 800b696:	4602      	mov	r2, r0
 800b698:	4b28      	ldr	r3, [pc, #160]	@ (800b73c <__lshift+0xd0>)
 800b69a:	4829      	ldr	r0, [pc, #164]	@ (800b740 <__lshift+0xd4>)
 800b69c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6a0:	f7fe fe6c 	bl	800a37c <__assert_func>
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	e7ee      	b.n	800b688 <__lshift+0x1c>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f100 0114 	add.w	r1, r0, #20
 800b6b0:	f100 0210 	add.w	r2, r0, #16
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	4553      	cmp	r3, sl
 800b6b8:	db33      	blt.n	800b722 <__lshift+0xb6>
 800b6ba:	6920      	ldr	r0, [r4, #16]
 800b6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6c0:	f104 0314 	add.w	r3, r4, #20
 800b6c4:	f019 091f 	ands.w	r9, r9, #31
 800b6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6d0:	d02b      	beq.n	800b72a <__lshift+0xbe>
 800b6d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6d6:	468a      	mov	sl, r1
 800b6d8:	2200      	movs	r2, #0
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b6e0:	4310      	orrs	r0, r2
 800b6e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ea:	459c      	cmp	ip, r3
 800b6ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6f0:	d8f3      	bhi.n	800b6da <__lshift+0x6e>
 800b6f2:	ebac 0304 	sub.w	r3, ip, r4
 800b6f6:	3b15      	subs	r3, #21
 800b6f8:	f023 0303 	bic.w	r3, r3, #3
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	f104 0015 	add.w	r0, r4, #21
 800b702:	4584      	cmp	ip, r0
 800b704:	bf38      	it	cc
 800b706:	2304      	movcc	r3, #4
 800b708:	50ca      	str	r2, [r1, r3]
 800b70a:	b10a      	cbz	r2, 800b710 <__lshift+0xa4>
 800b70c:	f108 0602 	add.w	r6, r8, #2
 800b710:	3e01      	subs	r6, #1
 800b712:	4638      	mov	r0, r7
 800b714:	612e      	str	r6, [r5, #16]
 800b716:	4621      	mov	r1, r4
 800b718:	f7ff fdda 	bl	800b2d0 <_Bfree>
 800b71c:	4628      	mov	r0, r5
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	f842 0f04 	str.w	r0, [r2, #4]!
 800b726:	3301      	adds	r3, #1
 800b728:	e7c5      	b.n	800b6b6 <__lshift+0x4a>
 800b72a:	3904      	subs	r1, #4
 800b72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b730:	f841 2f04 	str.w	r2, [r1, #4]!
 800b734:	459c      	cmp	ip, r3
 800b736:	d8f9      	bhi.n	800b72c <__lshift+0xc0>
 800b738:	e7ea      	b.n	800b710 <__lshift+0xa4>
 800b73a:	bf00      	nop
 800b73c:	0800cbc8 	.word	0x0800cbc8
 800b740:	0800cbd9 	.word	0x0800cbd9

0800b744 <__mcmp>:
 800b744:	690a      	ldr	r2, [r1, #16]
 800b746:	4603      	mov	r3, r0
 800b748:	6900      	ldr	r0, [r0, #16]
 800b74a:	1a80      	subs	r0, r0, r2
 800b74c:	b530      	push	{r4, r5, lr}
 800b74e:	d10e      	bne.n	800b76e <__mcmp+0x2a>
 800b750:	3314      	adds	r3, #20
 800b752:	3114      	adds	r1, #20
 800b754:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b758:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b75c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b760:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b764:	4295      	cmp	r5, r2
 800b766:	d003      	beq.n	800b770 <__mcmp+0x2c>
 800b768:	d205      	bcs.n	800b776 <__mcmp+0x32>
 800b76a:	f04f 30ff 	mov.w	r0, #4294967295
 800b76e:	bd30      	pop	{r4, r5, pc}
 800b770:	42a3      	cmp	r3, r4
 800b772:	d3f3      	bcc.n	800b75c <__mcmp+0x18>
 800b774:	e7fb      	b.n	800b76e <__mcmp+0x2a>
 800b776:	2001      	movs	r0, #1
 800b778:	e7f9      	b.n	800b76e <__mcmp+0x2a>
	...

0800b77c <__mdiff>:
 800b77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	4689      	mov	r9, r1
 800b782:	4606      	mov	r6, r0
 800b784:	4611      	mov	r1, r2
 800b786:	4648      	mov	r0, r9
 800b788:	4614      	mov	r4, r2
 800b78a:	f7ff ffdb 	bl	800b744 <__mcmp>
 800b78e:	1e05      	subs	r5, r0, #0
 800b790:	d112      	bne.n	800b7b8 <__mdiff+0x3c>
 800b792:	4629      	mov	r1, r5
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff fd5b 	bl	800b250 <_Balloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	b928      	cbnz	r0, 800b7aa <__mdiff+0x2e>
 800b79e:	4b3f      	ldr	r3, [pc, #252]	@ (800b89c <__mdiff+0x120>)
 800b7a0:	f240 2137 	movw	r1, #567	@ 0x237
 800b7a4:	483e      	ldr	r0, [pc, #248]	@ (800b8a0 <__mdiff+0x124>)
 800b7a6:	f7fe fde9 	bl	800a37c <__assert_func>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	b003      	add	sp, #12
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	bfbc      	itt	lt
 800b7ba:	464b      	movlt	r3, r9
 800b7bc:	46a1      	movlt	r9, r4
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7c4:	bfba      	itte	lt
 800b7c6:	461c      	movlt	r4, r3
 800b7c8:	2501      	movlt	r5, #1
 800b7ca:	2500      	movge	r5, #0
 800b7cc:	f7ff fd40 	bl	800b250 <_Balloc>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	b918      	cbnz	r0, 800b7dc <__mdiff+0x60>
 800b7d4:	4b31      	ldr	r3, [pc, #196]	@ (800b89c <__mdiff+0x120>)
 800b7d6:	f240 2145 	movw	r1, #581	@ 0x245
 800b7da:	e7e3      	b.n	800b7a4 <__mdiff+0x28>
 800b7dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b7e0:	6926      	ldr	r6, [r4, #16]
 800b7e2:	60c5      	str	r5, [r0, #12]
 800b7e4:	f109 0310 	add.w	r3, r9, #16
 800b7e8:	f109 0514 	add.w	r5, r9, #20
 800b7ec:	f104 0e14 	add.w	lr, r4, #20
 800b7f0:	f100 0b14 	add.w	fp, r0, #20
 800b7f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	46d9      	mov	r9, fp
 800b800:	f04f 0c00 	mov.w	ip, #0
 800b804:	9b01      	ldr	r3, [sp, #4]
 800b806:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b80a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	fa1f f38a 	uxth.w	r3, sl
 800b814:	4619      	mov	r1, r3
 800b816:	b283      	uxth	r3, r0
 800b818:	1acb      	subs	r3, r1, r3
 800b81a:	0c00      	lsrs	r0, r0, #16
 800b81c:	4463      	add	r3, ip
 800b81e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b822:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b826:	b29b      	uxth	r3, r3
 800b828:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b82c:	4576      	cmp	r6, lr
 800b82e:	f849 3b04 	str.w	r3, [r9], #4
 800b832:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b836:	d8e5      	bhi.n	800b804 <__mdiff+0x88>
 800b838:	1b33      	subs	r3, r6, r4
 800b83a:	3b15      	subs	r3, #21
 800b83c:	f023 0303 	bic.w	r3, r3, #3
 800b840:	3415      	adds	r4, #21
 800b842:	3304      	adds	r3, #4
 800b844:	42a6      	cmp	r6, r4
 800b846:	bf38      	it	cc
 800b848:	2304      	movcc	r3, #4
 800b84a:	441d      	add	r5, r3
 800b84c:	445b      	add	r3, fp
 800b84e:	461e      	mov	r6, r3
 800b850:	462c      	mov	r4, r5
 800b852:	4544      	cmp	r4, r8
 800b854:	d30e      	bcc.n	800b874 <__mdiff+0xf8>
 800b856:	f108 0103 	add.w	r1, r8, #3
 800b85a:	1b49      	subs	r1, r1, r5
 800b85c:	f021 0103 	bic.w	r1, r1, #3
 800b860:	3d03      	subs	r5, #3
 800b862:	45a8      	cmp	r8, r5
 800b864:	bf38      	it	cc
 800b866:	2100      	movcc	r1, #0
 800b868:	440b      	add	r3, r1
 800b86a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b86e:	b191      	cbz	r1, 800b896 <__mdiff+0x11a>
 800b870:	6117      	str	r7, [r2, #16]
 800b872:	e79d      	b.n	800b7b0 <__mdiff+0x34>
 800b874:	f854 1b04 	ldr.w	r1, [r4], #4
 800b878:	46e6      	mov	lr, ip
 800b87a:	0c08      	lsrs	r0, r1, #16
 800b87c:	fa1c fc81 	uxtah	ip, ip, r1
 800b880:	4471      	add	r1, lr
 800b882:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b886:	b289      	uxth	r1, r1
 800b888:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b88c:	f846 1b04 	str.w	r1, [r6], #4
 800b890:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b894:	e7dd      	b.n	800b852 <__mdiff+0xd6>
 800b896:	3f01      	subs	r7, #1
 800b898:	e7e7      	b.n	800b86a <__mdiff+0xee>
 800b89a:	bf00      	nop
 800b89c:	0800cbc8 	.word	0x0800cbc8
 800b8a0:	0800cbd9 	.word	0x0800cbd9

0800b8a4 <__d2b>:
 800b8a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8a8:	460f      	mov	r7, r1
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	ec59 8b10 	vmov	r8, r9, d0
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	f7ff fccd 	bl	800b250 <_Balloc>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	b930      	cbnz	r0, 800b8c8 <__d2b+0x24>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	4b23      	ldr	r3, [pc, #140]	@ (800b94c <__d2b+0xa8>)
 800b8be:	4824      	ldr	r0, [pc, #144]	@ (800b950 <__d2b+0xac>)
 800b8c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8c4:	f7fe fd5a 	bl	800a37c <__assert_func>
 800b8c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8d0:	b10d      	cbz	r5, 800b8d6 <__d2b+0x32>
 800b8d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b8dc:	d023      	beq.n	800b926 <__d2b+0x82>
 800b8de:	4668      	mov	r0, sp
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	f7ff fd7c 	bl	800b3de <__lo0bits>
 800b8e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8ea:	b1d0      	cbz	r0, 800b922 <__d2b+0x7e>
 800b8ec:	f1c0 0320 	rsb	r3, r0, #32
 800b8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	40c2      	lsrs	r2, r0
 800b8f8:	6163      	str	r3, [r4, #20]
 800b8fa:	9201      	str	r2, [sp, #4]
 800b8fc:	9b01      	ldr	r3, [sp, #4]
 800b8fe:	61a3      	str	r3, [r4, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	bf0c      	ite	eq
 800b904:	2201      	moveq	r2, #1
 800b906:	2202      	movne	r2, #2
 800b908:	6122      	str	r2, [r4, #16]
 800b90a:	b1a5      	cbz	r5, 800b936 <__d2b+0x92>
 800b90c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b910:	4405      	add	r5, r0
 800b912:	603d      	str	r5, [r7, #0]
 800b914:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b918:	6030      	str	r0, [r6, #0]
 800b91a:	4620      	mov	r0, r4
 800b91c:	b003      	add	sp, #12
 800b91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b922:	6161      	str	r1, [r4, #20]
 800b924:	e7ea      	b.n	800b8fc <__d2b+0x58>
 800b926:	a801      	add	r0, sp, #4
 800b928:	f7ff fd59 	bl	800b3de <__lo0bits>
 800b92c:	9b01      	ldr	r3, [sp, #4]
 800b92e:	6163      	str	r3, [r4, #20]
 800b930:	3020      	adds	r0, #32
 800b932:	2201      	movs	r2, #1
 800b934:	e7e8      	b.n	800b908 <__d2b+0x64>
 800b936:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b93a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b93e:	6038      	str	r0, [r7, #0]
 800b940:	6918      	ldr	r0, [r3, #16]
 800b942:	f7ff fd2d 	bl	800b3a0 <__hi0bits>
 800b946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b94a:	e7e5      	b.n	800b918 <__d2b+0x74>
 800b94c:	0800cbc8 	.word	0x0800cbc8
 800b950:	0800cbd9 	.word	0x0800cbd9

0800b954 <__sfputc_r>:
 800b954:	6893      	ldr	r3, [r2, #8]
 800b956:	3b01      	subs	r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	b410      	push	{r4}
 800b95c:	6093      	str	r3, [r2, #8]
 800b95e:	da08      	bge.n	800b972 <__sfputc_r+0x1e>
 800b960:	6994      	ldr	r4, [r2, #24]
 800b962:	42a3      	cmp	r3, r4
 800b964:	db01      	blt.n	800b96a <__sfputc_r+0x16>
 800b966:	290a      	cmp	r1, #10
 800b968:	d103      	bne.n	800b972 <__sfputc_r+0x1e>
 800b96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b96e:	f7fe bbf0 	b.w	800a152 <__swbuf_r>
 800b972:	6813      	ldr	r3, [r2, #0]
 800b974:	1c58      	adds	r0, r3, #1
 800b976:	6010      	str	r0, [r2, #0]
 800b978:	7019      	strb	r1, [r3, #0]
 800b97a:	4608      	mov	r0, r1
 800b97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <__sfputs_r>:
 800b982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b984:	4606      	mov	r6, r0
 800b986:	460f      	mov	r7, r1
 800b988:	4614      	mov	r4, r2
 800b98a:	18d5      	adds	r5, r2, r3
 800b98c:	42ac      	cmp	r4, r5
 800b98e:	d101      	bne.n	800b994 <__sfputs_r+0x12>
 800b990:	2000      	movs	r0, #0
 800b992:	e007      	b.n	800b9a4 <__sfputs_r+0x22>
 800b994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b998:	463a      	mov	r2, r7
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ffda 	bl	800b954 <__sfputc_r>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d1f3      	bne.n	800b98c <__sfputs_r+0xa>
 800b9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9a8 <_vfiprintf_r>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	460d      	mov	r5, r1
 800b9ae:	b09d      	sub	sp, #116	@ 0x74
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	4698      	mov	r8, r3
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	b118      	cbz	r0, 800b9c0 <_vfiprintf_r+0x18>
 800b9b8:	6a03      	ldr	r3, [r0, #32]
 800b9ba:	b90b      	cbnz	r3, 800b9c0 <_vfiprintf_r+0x18>
 800b9bc:	f7fe fae0 	bl	8009f80 <__sinit>
 800b9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9c2:	07d9      	lsls	r1, r3, #31
 800b9c4:	d405      	bmi.n	800b9d2 <_vfiprintf_r+0x2a>
 800b9c6:	89ab      	ldrh	r3, [r5, #12]
 800b9c8:	059a      	lsls	r2, r3, #22
 800b9ca:	d402      	bmi.n	800b9d2 <_vfiprintf_r+0x2a>
 800b9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9ce:	f7fe fcd2 	bl	800a376 <__retarget_lock_acquire_recursive>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	071b      	lsls	r3, r3, #28
 800b9d6:	d501      	bpl.n	800b9dc <_vfiprintf_r+0x34>
 800b9d8:	692b      	ldr	r3, [r5, #16]
 800b9da:	b99b      	cbnz	r3, 800ba04 <_vfiprintf_r+0x5c>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7fe fbf6 	bl	800a1d0 <__swsetup_r>
 800b9e4:	b170      	cbz	r0, 800ba04 <_vfiprintf_r+0x5c>
 800b9e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9e8:	07dc      	lsls	r4, r3, #31
 800b9ea:	d504      	bpl.n	800b9f6 <_vfiprintf_r+0x4e>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b01d      	add	sp, #116	@ 0x74
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	0598      	lsls	r0, r3, #22
 800b9fa:	d4f7      	bmi.n	800b9ec <_vfiprintf_r+0x44>
 800b9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9fe:	f7fe fcbb 	bl	800a378 <__retarget_lock_release_recursive>
 800ba02:	e7f3      	b.n	800b9ec <_vfiprintf_r+0x44>
 800ba04:	2300      	movs	r3, #0
 800ba06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba08:	2320      	movs	r3, #32
 800ba0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba12:	2330      	movs	r3, #48	@ 0x30
 800ba14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bbc4 <_vfiprintf_r+0x21c>
 800ba18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba1c:	f04f 0901 	mov.w	r9, #1
 800ba20:	4623      	mov	r3, r4
 800ba22:	469a      	mov	sl, r3
 800ba24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba28:	b10a      	cbz	r2, 800ba2e <_vfiprintf_r+0x86>
 800ba2a:	2a25      	cmp	r2, #37	@ 0x25
 800ba2c:	d1f9      	bne.n	800ba22 <_vfiprintf_r+0x7a>
 800ba2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba32:	d00b      	beq.n	800ba4c <_vfiprintf_r+0xa4>
 800ba34:	465b      	mov	r3, fp
 800ba36:	4622      	mov	r2, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffa1 	bl	800b982 <__sfputs_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	f000 80a7 	beq.w	800bb94 <_vfiprintf_r+0x1ec>
 800ba46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba48:	445a      	add	r2, fp
 800ba4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 809f 	beq.w	800bb94 <_vfiprintf_r+0x1ec>
 800ba56:	2300      	movs	r3, #0
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba60:	f10a 0a01 	add.w	sl, sl, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba6e:	4654      	mov	r4, sl
 800ba70:	2205      	movs	r2, #5
 800ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba76:	4853      	ldr	r0, [pc, #332]	@ (800bbc4 <_vfiprintf_r+0x21c>)
 800ba78:	f7f4 fbb2 	bl	80001e0 <memchr>
 800ba7c:	9a04      	ldr	r2, [sp, #16]
 800ba7e:	b9d8      	cbnz	r0, 800bab8 <_vfiprintf_r+0x110>
 800ba80:	06d1      	lsls	r1, r2, #27
 800ba82:	bf44      	itt	mi
 800ba84:	2320      	movmi	r3, #32
 800ba86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba8a:	0713      	lsls	r3, r2, #28
 800ba8c:	bf44      	itt	mi
 800ba8e:	232b      	movmi	r3, #43	@ 0x2b
 800ba90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba94:	f89a 3000 	ldrb.w	r3, [sl]
 800ba98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba9a:	d015      	beq.n	800bac8 <_vfiprintf_r+0x120>
 800ba9c:	9a07      	ldr	r2, [sp, #28]
 800ba9e:	4654      	mov	r4, sl
 800baa0:	2000      	movs	r0, #0
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4621      	mov	r1, r4
 800baa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baac:	3b30      	subs	r3, #48	@ 0x30
 800baae:	2b09      	cmp	r3, #9
 800bab0:	d94b      	bls.n	800bb4a <_vfiprintf_r+0x1a2>
 800bab2:	b1b0      	cbz	r0, 800bae2 <_vfiprintf_r+0x13a>
 800bab4:	9207      	str	r2, [sp, #28]
 800bab6:	e014      	b.n	800bae2 <_vfiprintf_r+0x13a>
 800bab8:	eba0 0308 	sub.w	r3, r0, r8
 800babc:	fa09 f303 	lsl.w	r3, r9, r3
 800bac0:	4313      	orrs	r3, r2
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	46a2      	mov	sl, r4
 800bac6:	e7d2      	b.n	800ba6e <_vfiprintf_r+0xc6>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	1d19      	adds	r1, r3, #4
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	9103      	str	r1, [sp, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bfbb      	ittet	lt
 800bad4:	425b      	neglt	r3, r3
 800bad6:	f042 0202 	orrlt.w	r2, r2, #2
 800bada:	9307      	strge	r3, [sp, #28]
 800badc:	9307      	strlt	r3, [sp, #28]
 800bade:	bfb8      	it	lt
 800bae0:	9204      	strlt	r2, [sp, #16]
 800bae2:	7823      	ldrb	r3, [r4, #0]
 800bae4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bae6:	d10a      	bne.n	800bafe <_vfiprintf_r+0x156>
 800bae8:	7863      	ldrb	r3, [r4, #1]
 800baea:	2b2a      	cmp	r3, #42	@ 0x2a
 800baec:	d132      	bne.n	800bb54 <_vfiprintf_r+0x1ac>
 800baee:	9b03      	ldr	r3, [sp, #12]
 800baf0:	1d1a      	adds	r2, r3, #4
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	9203      	str	r2, [sp, #12]
 800baf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bafa:	3402      	adds	r4, #2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bbd4 <_vfiprintf_r+0x22c>
 800bb02:	7821      	ldrb	r1, [r4, #0]
 800bb04:	2203      	movs	r2, #3
 800bb06:	4650      	mov	r0, sl
 800bb08:	f7f4 fb6a 	bl	80001e0 <memchr>
 800bb0c:	b138      	cbz	r0, 800bb1e <_vfiprintf_r+0x176>
 800bb0e:	9b04      	ldr	r3, [sp, #16]
 800bb10:	eba0 000a 	sub.w	r0, r0, sl
 800bb14:	2240      	movs	r2, #64	@ 0x40
 800bb16:	4082      	lsls	r2, r0
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	3401      	adds	r4, #1
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb22:	4829      	ldr	r0, [pc, #164]	@ (800bbc8 <_vfiprintf_r+0x220>)
 800bb24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb28:	2206      	movs	r2, #6
 800bb2a:	f7f4 fb59 	bl	80001e0 <memchr>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d03f      	beq.n	800bbb2 <_vfiprintf_r+0x20a>
 800bb32:	4b26      	ldr	r3, [pc, #152]	@ (800bbcc <_vfiprintf_r+0x224>)
 800bb34:	bb1b      	cbnz	r3, 800bb7e <_vfiprintf_r+0x1d6>
 800bb36:	9b03      	ldr	r3, [sp, #12]
 800bb38:	3307      	adds	r3, #7
 800bb3a:	f023 0307 	bic.w	r3, r3, #7
 800bb3e:	3308      	adds	r3, #8
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb44:	443b      	add	r3, r7
 800bb46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb48:	e76a      	b.n	800ba20 <_vfiprintf_r+0x78>
 800bb4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb4e:	460c      	mov	r4, r1
 800bb50:	2001      	movs	r0, #1
 800bb52:	e7a8      	b.n	800baa6 <_vfiprintf_r+0xfe>
 800bb54:	2300      	movs	r3, #0
 800bb56:	3401      	adds	r4, #1
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f04f 0c0a 	mov.w	ip, #10
 800bb60:	4620      	mov	r0, r4
 800bb62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb66:	3a30      	subs	r2, #48	@ 0x30
 800bb68:	2a09      	cmp	r2, #9
 800bb6a:	d903      	bls.n	800bb74 <_vfiprintf_r+0x1cc>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0c6      	beq.n	800bafe <_vfiprintf_r+0x156>
 800bb70:	9105      	str	r1, [sp, #20]
 800bb72:	e7c4      	b.n	800bafe <_vfiprintf_r+0x156>
 800bb74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb78:	4604      	mov	r4, r0
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e7f0      	b.n	800bb60 <_vfiprintf_r+0x1b8>
 800bb7e:	ab03      	add	r3, sp, #12
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	462a      	mov	r2, r5
 800bb84:	4b12      	ldr	r3, [pc, #72]	@ (800bbd0 <_vfiprintf_r+0x228>)
 800bb86:	a904      	add	r1, sp, #16
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7fd fdb5 	bl	80096f8 <_printf_float>
 800bb8e:	4607      	mov	r7, r0
 800bb90:	1c78      	adds	r0, r7, #1
 800bb92:	d1d6      	bne.n	800bb42 <_vfiprintf_r+0x19a>
 800bb94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	d405      	bmi.n	800bba6 <_vfiprintf_r+0x1fe>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	059a      	lsls	r2, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_vfiprintf_r+0x1fe>
 800bba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bba2:	f7fe fbe9 	bl	800a378 <__retarget_lock_release_recursive>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	065b      	lsls	r3, r3, #25
 800bbaa:	f53f af1f 	bmi.w	800b9ec <_vfiprintf_r+0x44>
 800bbae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbb0:	e71e      	b.n	800b9f0 <_vfiprintf_r+0x48>
 800bbb2:	ab03      	add	r3, sp, #12
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4b05      	ldr	r3, [pc, #20]	@ (800bbd0 <_vfiprintf_r+0x228>)
 800bbba:	a904      	add	r1, sp, #16
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7fe f833 	bl	8009c28 <_printf_i>
 800bbc2:	e7e4      	b.n	800bb8e <_vfiprintf_r+0x1e6>
 800bbc4:	0800cd30 	.word	0x0800cd30
 800bbc8:	0800cd3a 	.word	0x0800cd3a
 800bbcc:	080096f9 	.word	0x080096f9
 800bbd0:	0800b983 	.word	0x0800b983
 800bbd4:	0800cd36 	.word	0x0800cd36

0800bbd8 <__sflush_r>:
 800bbd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe0:	0716      	lsls	r6, r2, #28
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	d454      	bmi.n	800bc92 <__sflush_r+0xba>
 800bbe8:	684b      	ldr	r3, [r1, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dc02      	bgt.n	800bbf4 <__sflush_r+0x1c>
 800bbee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dd48      	ble.n	800bc86 <__sflush_r+0xae>
 800bbf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	d045      	beq.n	800bc86 <__sflush_r+0xae>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc00:	682f      	ldr	r7, [r5, #0]
 800bc02:	6a21      	ldr	r1, [r4, #32]
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	d030      	beq.n	800bc6a <__sflush_r+0x92>
 800bc08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	0759      	lsls	r1, r3, #29
 800bc0e:	d505      	bpl.n	800bc1c <__sflush_r+0x44>
 800bc10:	6863      	ldr	r3, [r4, #4]
 800bc12:	1ad2      	subs	r2, r2, r3
 800bc14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc16:	b10b      	cbz	r3, 800bc1c <__sflush_r+0x44>
 800bc18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc1a:	1ad2      	subs	r2, r2, r3
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc20:	6a21      	ldr	r1, [r4, #32]
 800bc22:	4628      	mov	r0, r5
 800bc24:	47b0      	blx	r6
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	d106      	bne.n	800bc3a <__sflush_r+0x62>
 800bc2c:	6829      	ldr	r1, [r5, #0]
 800bc2e:	291d      	cmp	r1, #29
 800bc30:	d82b      	bhi.n	800bc8a <__sflush_r+0xb2>
 800bc32:	4a2a      	ldr	r2, [pc, #168]	@ (800bcdc <__sflush_r+0x104>)
 800bc34:	410a      	asrs	r2, r1
 800bc36:	07d6      	lsls	r6, r2, #31
 800bc38:	d427      	bmi.n	800bc8a <__sflush_r+0xb2>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	6062      	str	r2, [r4, #4]
 800bc3e:	04d9      	lsls	r1, r3, #19
 800bc40:	6922      	ldr	r2, [r4, #16]
 800bc42:	6022      	str	r2, [r4, #0]
 800bc44:	d504      	bpl.n	800bc50 <__sflush_r+0x78>
 800bc46:	1c42      	adds	r2, r0, #1
 800bc48:	d101      	bne.n	800bc4e <__sflush_r+0x76>
 800bc4a:	682b      	ldr	r3, [r5, #0]
 800bc4c:	b903      	cbnz	r3, 800bc50 <__sflush_r+0x78>
 800bc4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc52:	602f      	str	r7, [r5, #0]
 800bc54:	b1b9      	cbz	r1, 800bc86 <__sflush_r+0xae>
 800bc56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	d002      	beq.n	800bc64 <__sflush_r+0x8c>
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7ff f9f6 	bl	800b050 <_free_r>
 800bc64:	2300      	movs	r3, #0
 800bc66:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc68:	e00d      	b.n	800bc86 <__sflush_r+0xae>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b0      	blx	r6
 800bc70:	4602      	mov	r2, r0
 800bc72:	1c50      	adds	r0, r2, #1
 800bc74:	d1c9      	bne.n	800bc0a <__sflush_r+0x32>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0c6      	beq.n	800bc0a <__sflush_r+0x32>
 800bc7c:	2b1d      	cmp	r3, #29
 800bc7e:	d001      	beq.n	800bc84 <__sflush_r+0xac>
 800bc80:	2b16      	cmp	r3, #22
 800bc82:	d11e      	bne.n	800bcc2 <__sflush_r+0xea>
 800bc84:	602f      	str	r7, [r5, #0]
 800bc86:	2000      	movs	r0, #0
 800bc88:	e022      	b.n	800bcd0 <__sflush_r+0xf8>
 800bc8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8e:	b21b      	sxth	r3, r3
 800bc90:	e01b      	b.n	800bcca <__sflush_r+0xf2>
 800bc92:	690f      	ldr	r7, [r1, #16]
 800bc94:	2f00      	cmp	r7, #0
 800bc96:	d0f6      	beq.n	800bc86 <__sflush_r+0xae>
 800bc98:	0793      	lsls	r3, r2, #30
 800bc9a:	680e      	ldr	r6, [r1, #0]
 800bc9c:	bf08      	it	eq
 800bc9e:	694b      	ldreq	r3, [r1, #20]
 800bca0:	600f      	str	r7, [r1, #0]
 800bca2:	bf18      	it	ne
 800bca4:	2300      	movne	r3, #0
 800bca6:	eba6 0807 	sub.w	r8, r6, r7
 800bcaa:	608b      	str	r3, [r1, #8]
 800bcac:	f1b8 0f00 	cmp.w	r8, #0
 800bcb0:	dde9      	ble.n	800bc86 <__sflush_r+0xae>
 800bcb2:	6a21      	ldr	r1, [r4, #32]
 800bcb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcb6:	4643      	mov	r3, r8
 800bcb8:	463a      	mov	r2, r7
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b0      	blx	r6
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	dc08      	bgt.n	800bcd4 <__sflush_r+0xfc>
 800bcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcca:	81a3      	strh	r3, [r4, #12]
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd4:	4407      	add	r7, r0
 800bcd6:	eba8 0800 	sub.w	r8, r8, r0
 800bcda:	e7e7      	b.n	800bcac <__sflush_r+0xd4>
 800bcdc:	dfbffffe 	.word	0xdfbffffe

0800bce0 <_fflush_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	690b      	ldr	r3, [r1, #16]
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	b913      	cbnz	r3, 800bcf0 <_fflush_r+0x10>
 800bcea:	2500      	movs	r5, #0
 800bcec:	4628      	mov	r0, r5
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	b118      	cbz	r0, 800bcfa <_fflush_r+0x1a>
 800bcf2:	6a03      	ldr	r3, [r0, #32]
 800bcf4:	b90b      	cbnz	r3, 800bcfa <_fflush_r+0x1a>
 800bcf6:	f7fe f943 	bl	8009f80 <__sinit>
 800bcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0f3      	beq.n	800bcea <_fflush_r+0xa>
 800bd02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd04:	07d0      	lsls	r0, r2, #31
 800bd06:	d404      	bmi.n	800bd12 <_fflush_r+0x32>
 800bd08:	0599      	lsls	r1, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_fflush_r+0x32>
 800bd0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd0e:	f7fe fb32 	bl	800a376 <__retarget_lock_acquire_recursive>
 800bd12:	4628      	mov	r0, r5
 800bd14:	4621      	mov	r1, r4
 800bd16:	f7ff ff5f 	bl	800bbd8 <__sflush_r>
 800bd1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd1c:	07da      	lsls	r2, r3, #31
 800bd1e:	4605      	mov	r5, r0
 800bd20:	d4e4      	bmi.n	800bcec <_fflush_r+0xc>
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	059b      	lsls	r3, r3, #22
 800bd26:	d4e1      	bmi.n	800bcec <_fflush_r+0xc>
 800bd28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd2a:	f7fe fb25 	bl	800a378 <__retarget_lock_release_recursive>
 800bd2e:	e7dd      	b.n	800bcec <_fflush_r+0xc>

0800bd30 <fiprintf>:
 800bd30:	b40e      	push	{r1, r2, r3}
 800bd32:	b503      	push	{r0, r1, lr}
 800bd34:	4601      	mov	r1, r0
 800bd36:	ab03      	add	r3, sp, #12
 800bd38:	4805      	ldr	r0, [pc, #20]	@ (800bd50 <fiprintf+0x20>)
 800bd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3e:	6800      	ldr	r0, [r0, #0]
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	f7ff fe31 	bl	800b9a8 <_vfiprintf_r>
 800bd46:	b002      	add	sp, #8
 800bd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd4c:	b003      	add	sp, #12
 800bd4e:	4770      	bx	lr
 800bd50:	20000030 	.word	0x20000030

0800bd54 <__swhatbuf_r>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	460c      	mov	r4, r1
 800bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	b096      	sub	sp, #88	@ 0x58
 800bd60:	4615      	mov	r5, r2
 800bd62:	461e      	mov	r6, r3
 800bd64:	da0d      	bge.n	800bd82 <__swhatbuf_r+0x2e>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd6c:	f04f 0100 	mov.w	r1, #0
 800bd70:	bf14      	ite	ne
 800bd72:	2340      	movne	r3, #64	@ 0x40
 800bd74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd78:	2000      	movs	r0, #0
 800bd7a:	6031      	str	r1, [r6, #0]
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	b016      	add	sp, #88	@ 0x58
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	466a      	mov	r2, sp
 800bd84:	f000 f848 	bl	800be18 <_fstat_r>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dbec      	blt.n	800bd66 <__swhatbuf_r+0x12>
 800bd8c:	9901      	ldr	r1, [sp, #4]
 800bd8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd96:	4259      	negs	r1, r3
 800bd98:	4159      	adcs	r1, r3
 800bd9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd9e:	e7eb      	b.n	800bd78 <__swhatbuf_r+0x24>

0800bda0 <__smakebuf_r>:
 800bda0:	898b      	ldrh	r3, [r1, #12]
 800bda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda4:	079d      	lsls	r5, r3, #30
 800bda6:	4606      	mov	r6, r0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	d507      	bpl.n	800bdbc <__smakebuf_r+0x1c>
 800bdac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	6123      	str	r3, [r4, #16]
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	6163      	str	r3, [r4, #20]
 800bdb8:	b003      	add	sp, #12
 800bdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdbc:	ab01      	add	r3, sp, #4
 800bdbe:	466a      	mov	r2, sp
 800bdc0:	f7ff ffc8 	bl	800bd54 <__swhatbuf_r>
 800bdc4:	9f00      	ldr	r7, [sp, #0]
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	4639      	mov	r1, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff f9b4 	bl	800b138 <_malloc_r>
 800bdd0:	b948      	cbnz	r0, 800bde6 <__smakebuf_r+0x46>
 800bdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd6:	059a      	lsls	r2, r3, #22
 800bdd8:	d4ee      	bmi.n	800bdb8 <__smakebuf_r+0x18>
 800bdda:	f023 0303 	bic.w	r3, r3, #3
 800bdde:	f043 0302 	orr.w	r3, r3, #2
 800bde2:	81a3      	strh	r3, [r4, #12]
 800bde4:	e7e2      	b.n	800bdac <__smakebuf_r+0xc>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	6020      	str	r0, [r4, #0]
 800bdea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bdf6:	b15b      	cbz	r3, 800be10 <__smakebuf_r+0x70>
 800bdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f000 f81d 	bl	800be3c <_isatty_r>
 800be02:	b128      	cbz	r0, 800be10 <__smakebuf_r+0x70>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	f043 0301 	orr.w	r3, r3, #1
 800be0e:	81a3      	strh	r3, [r4, #12]
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	431d      	orrs	r5, r3
 800be14:	81a5      	strh	r5, [r4, #12]
 800be16:	e7cf      	b.n	800bdb8 <__smakebuf_r+0x18>

0800be18 <_fstat_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d07      	ldr	r5, [pc, #28]	@ (800be38 <_fstat_r+0x20>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	4611      	mov	r1, r2
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	f7f6 fef5 	bl	8002c14 <_fstat>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d102      	bne.n	800be34 <_fstat_r+0x1c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b103      	cbz	r3, 800be34 <_fstat_r+0x1c>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	2000079c 	.word	0x2000079c

0800be3c <_isatty_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	@ (800be58 <_isatty_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f6 fef4 	bl	8002c34 <_isatty>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_isatty_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_isatty_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	2000079c 	.word	0x2000079c

0800be5c <_sbrk_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4d06      	ldr	r5, [pc, #24]	@ (800be78 <_sbrk_r+0x1c>)
 800be60:	2300      	movs	r3, #0
 800be62:	4604      	mov	r4, r0
 800be64:	4608      	mov	r0, r1
 800be66:	602b      	str	r3, [r5, #0]
 800be68:	f7f6 fefc 	bl	8002c64 <_sbrk>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d102      	bne.n	800be76 <_sbrk_r+0x1a>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b103      	cbz	r3, 800be76 <_sbrk_r+0x1a>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	2000079c 	.word	0x2000079c

0800be7c <memcpy>:
 800be7c:	440a      	add	r2, r1
 800be7e:	4291      	cmp	r1, r2
 800be80:	f100 33ff 	add.w	r3, r0, #4294967295
 800be84:	d100      	bne.n	800be88 <memcpy+0xc>
 800be86:	4770      	bx	lr
 800be88:	b510      	push	{r4, lr}
 800be8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be92:	4291      	cmp	r1, r2
 800be94:	d1f9      	bne.n	800be8a <memcpy+0xe>
 800be96:	bd10      	pop	{r4, pc}

0800be98 <abort>:
 800be98:	b508      	push	{r3, lr}
 800be9a:	2006      	movs	r0, #6
 800be9c:	f000 f85e 	bl	800bf5c <raise>
 800bea0:	2001      	movs	r0, #1
 800bea2:	f7f6 fe67 	bl	8002b74 <_exit>

0800bea6 <_calloc_r>:
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	fba1 5402 	umull	r5, r4, r1, r2
 800beac:	b93c      	cbnz	r4, 800bebe <_calloc_r+0x18>
 800beae:	4629      	mov	r1, r5
 800beb0:	f7ff f942 	bl	800b138 <_malloc_r>
 800beb4:	4606      	mov	r6, r0
 800beb6:	b928      	cbnz	r0, 800bec4 <_calloc_r+0x1e>
 800beb8:	2600      	movs	r6, #0
 800beba:	4630      	mov	r0, r6
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	220c      	movs	r2, #12
 800bec0:	6002      	str	r2, [r0, #0]
 800bec2:	e7f9      	b.n	800beb8 <_calloc_r+0x12>
 800bec4:	462a      	mov	r2, r5
 800bec6:	4621      	mov	r1, r4
 800bec8:	f7fe f9d8 	bl	800a27c <memset>
 800becc:	e7f5      	b.n	800beba <_calloc_r+0x14>

0800bece <__ascii_mbtowc>:
 800bece:	b082      	sub	sp, #8
 800bed0:	b901      	cbnz	r1, 800bed4 <__ascii_mbtowc+0x6>
 800bed2:	a901      	add	r1, sp, #4
 800bed4:	b142      	cbz	r2, 800bee8 <__ascii_mbtowc+0x1a>
 800bed6:	b14b      	cbz	r3, 800beec <__ascii_mbtowc+0x1e>
 800bed8:	7813      	ldrb	r3, [r2, #0]
 800beda:	600b      	str	r3, [r1, #0]
 800bedc:	7812      	ldrb	r2, [r2, #0]
 800bede:	1e10      	subs	r0, r2, #0
 800bee0:	bf18      	it	ne
 800bee2:	2001      	movne	r0, #1
 800bee4:	b002      	add	sp, #8
 800bee6:	4770      	bx	lr
 800bee8:	4610      	mov	r0, r2
 800beea:	e7fb      	b.n	800bee4 <__ascii_mbtowc+0x16>
 800beec:	f06f 0001 	mvn.w	r0, #1
 800bef0:	e7f8      	b.n	800bee4 <__ascii_mbtowc+0x16>

0800bef2 <__ascii_wctomb>:
 800bef2:	4603      	mov	r3, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	b141      	cbz	r1, 800bf0a <__ascii_wctomb+0x18>
 800bef8:	2aff      	cmp	r2, #255	@ 0xff
 800befa:	d904      	bls.n	800bf06 <__ascii_wctomb+0x14>
 800befc:	228a      	movs	r2, #138	@ 0x8a
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	4770      	bx	lr
 800bf06:	700a      	strb	r2, [r1, #0]
 800bf08:	2001      	movs	r0, #1
 800bf0a:	4770      	bx	lr

0800bf0c <_raise_r>:
 800bf0c:	291f      	cmp	r1, #31
 800bf0e:	b538      	push	{r3, r4, r5, lr}
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	d904      	bls.n	800bf20 <_raise_r+0x14>
 800bf16:	2316      	movs	r3, #22
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf22:	b112      	cbz	r2, 800bf2a <_raise_r+0x1e>
 800bf24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf28:	b94b      	cbnz	r3, 800bf3e <_raise_r+0x32>
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f000 f830 	bl	800bf90 <_getpid_r>
 800bf30:	4622      	mov	r2, r4
 800bf32:	4601      	mov	r1, r0
 800bf34:	4628      	mov	r0, r5
 800bf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf3a:	f000 b817 	b.w	800bf6c <_kill_r>
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d00a      	beq.n	800bf58 <_raise_r+0x4c>
 800bf42:	1c59      	adds	r1, r3, #1
 800bf44:	d103      	bne.n	800bf4e <_raise_r+0x42>
 800bf46:	2316      	movs	r3, #22
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	e7e7      	b.n	800bf1e <_raise_r+0x12>
 800bf4e:	2100      	movs	r1, #0
 800bf50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf54:	4620      	mov	r0, r4
 800bf56:	4798      	blx	r3
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e7e0      	b.n	800bf1e <_raise_r+0x12>

0800bf5c <raise>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	@ (800bf68 <raise+0xc>)
 800bf5e:	4601      	mov	r1, r0
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	f7ff bfd3 	b.w	800bf0c <_raise_r>
 800bf66:	bf00      	nop
 800bf68:	20000030 	.word	0x20000030

0800bf6c <_kill_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d07      	ldr	r5, [pc, #28]	@ (800bf8c <_kill_r+0x20>)
 800bf70:	2300      	movs	r3, #0
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	4611      	mov	r1, r2
 800bf78:	602b      	str	r3, [r5, #0]
 800bf7a:	f7f6 fdeb 	bl	8002b54 <_kill>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	d102      	bne.n	800bf88 <_kill_r+0x1c>
 800bf82:	682b      	ldr	r3, [r5, #0]
 800bf84:	b103      	cbz	r3, 800bf88 <_kill_r+0x1c>
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	bd38      	pop	{r3, r4, r5, pc}
 800bf8a:	bf00      	nop
 800bf8c:	2000079c 	.word	0x2000079c

0800bf90 <_getpid_r>:
 800bf90:	f7f6 bdd8 	b.w	8002b44 <_getpid>

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
